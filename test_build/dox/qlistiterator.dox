/*************************************************************************
*                                                                         
* Copyright (C) 2012-2015 Barbara Geller & Ansel Sermersheim              
* Copyright (C) 2014 Digia Plc                                            
* All rights reserved.                                                    
*                                                                         
*                                                                         
* GNU Free Documentation License                                          
* This file may be used under the terms of the GNU Free Documentation     
* License version 1.3 as published by the Free Software Foundation        
* and appearing in the file included in the packaging of this file.       
*                                                                         
*                                                                         
*************************************************************************/

/*!
\class QListIterator 
\brief The QListIterator class provides a Java-style const iterator for QList and QQueue. 

\ingroup qtcore

The QListIterator class provides a Java-style const iterator for QList and QQueue.

QList has both Java-style iterators and STL-style iterators. The Java-style iterators are more high-level and easier to use than the STL-style iterators; on the other hand, they are slightly less efficient.

An alternative to using iterators is to use index positions. Most QList member functions take an index as their first parameter, making it possible to access, modify, and remove items without using iterators.

QListIterator&lt;T&gt; allows you to iterate over a QList&lt;T&gt; (or a QQueue&lt;T&gt;). If you want to modify the list as you iterate over it, use QMutableListIterator&lt;T&gt; instead.

The QListIterator constructor takes a QList as argument. After construction, the iterator is located at the very beginning of the list (before the first item). Here's how to iterate over all the elements sequentially:

\code
    QList<float> list;
    ...
    QListIterator<float> i(list);

    while (i.hasNext())  {
        qDebug() << i.next();
    }
\endcode

The next() function returns the next item in the list and advances the iterator. Unlike STL-style iterators, Java-style iterators point <i>between</i> items rather than directly <i>at</i> items. The first call to next() advances the iterator to the position between the first and second item, and returns the first item; the second call to next() advances the iterator to the position between the second and third item, and returns the second item; and so on.

Here is how to iterate over the elements in reverse order:

\code
    QListIterator<float> i(list);
    i.toBack();

    while (i.hasPrevious()) {
        qDebug() << i.previous();
    }
\endcode

If you want to find all occurrences of a particular value, use findNext() or findPrevious() in a loop.

Multiple iterators can be used on the same list. If the list is modified while a QListIterator is active, the QListIterator will continue iterating over the original list, ignoring the modified copy.
<b>See also </b>QMutableListIterator and QList::const_iterator.
*/


/*!
\fn QListIterator::QListIterator ( const QList<T> & list )

Constructs an iterator for traversing <i>list</i>. The iterator is set to be at the front of the list (before the first item).

<b>See also </b>operator=().


*/


/*!
\fn bool QListIterator::findNext ( const T & value )

Searches for <i>value</i> starting from the current iterator position forward. Returns true if <i>value</i> is found; otherwise returns false.

After the call, if <i>value</i> was found, the iterator is positioned just after the matching item; otherwise, the iterator is positioned at the back of the container.

<b>See also </b>findPrevious().


*/


/*!
\fn bool QListIterator::findPrevious ( const T & value )

Searches for <i>value</i> starting from the current iterator position backward. Returns true if <i>value</i> is found; otherwise returns false.

After the call, if <i>value</i> was found, the iterator is positioned just before the matching item; otherwise, the iterator is positioned at the front of the container.

<b>See also </b>findNext().


*/


/*!
\fn bool QListIterator::hasNext () const

Returns true if there is at least one item ahead of the iterator, i.e. the iterator is <i>not</i> at the back of the container; otherwise returns false.

<b>See also </b>hasPrevious() and next().


*/


/*!
\fn bool QListIterator::hasPrevious () const

Returns true if there is at least one item behind the iterator, i.e. the iterator is <i>not</i> at the front of the container; otherwise returns false.

<b>See also </b>hasNext() and previous().


*/


/*!
\fn const T & QListIterator::next ()

Returns the next item and advances the iterator by one position.

Calling this function on an iterator located at the back of the container leads to undefined results.

<b>See also </b>hasNext(), peekNext(), and previous().


*/


/*!
\fn const T & QListIterator::peekNext () const

Returns the next item without moving the iterator.

Calling this function on an iterator located at the back of the container leads to undefined results.

<b>See also </b>hasNext(), next(), and peekPrevious().


*/


/*!
\fn const T & QListIterator::peekPrevious () const

Returns the previous item without moving the iterator.

Calling this function on an iterator located at the front of the container leads to undefined results.

<b>See also </b>hasPrevious(), previous(), and peekNext().


*/


/*!
\fn const T & QListIterator::previous ()

Returns the previous item and moves the iterator back by one position.

Calling this function on an iterator located at the front of the container leads to undefined results.

<b>See also </b>hasPrevious(), peekPrevious(), and next().


*/


/*!
\fn void QListIterator::toBack ()

Moves the iterator to the back of the container (after the last item).

<b>See also </b>toFront() and previous().


*/


/*!
\fn void QListIterator::toFront ()

Moves the iterator to the front of the container (before the first item).

<b>See also </b>toBack() and next().


*/


/*!
\fn QListIterator & QListIterator::operator= ( const QList<T> & list )

Makes the iterator operate on <i>list</i>. The iterator is set to be at the front of the list (before the first item).

<b>See also </b>toFront() and toBack().


*/


