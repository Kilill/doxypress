/*************************************************************************
*                                                                         
* Copyright (C) 2012-2015 Barbara Geller & Ansel Sermersheim              
* Copyright (C) 2014 Digia Plc                                            
* All rights reserved.                                                    
*                                                                         
*                                                                         
* GNU Free Documentation License                                          
* This file may be used under the terms of the GNU Free Documentation     
* License version 1.3 as published by the Free Software Foundation        
* and appearing in the file included in the packaging of this file.       
*                                                                         
*                                                                         
*************************************************************************/

/*!
\class QList 
\brief The QList class is a template class that provides lists. 

\ingroup implicit-sharing-c
\ingroup qtcore

The QList class is a template class that provides lists.

QList&lt;T&gt; is one of Qt's generic <a href="containers.html">container classes</a>. It stores a list of values and provides fast index-based access as well as fast insertions and removals.

QList&lt;T&gt;, QLinkedList&lt;T&gt;, and QVector&lt;T&gt; provide similar functionality. Here's an overview:

<ul>
<li>For most purposes, QList is the right class to use. Its index-based API is more convenient than QLinkedList's iterator-based API, and it is usually faster than QVector because of the way it stores its items in memory. It also expands to less code in your executable.</li>
<li>If you need a real linked list, with guarantees of <a href="containers.html#constant-time">constant time</a> insertions in the middle of the list and iterators to items rather than indexes, use QLinkedList.</li>
<li>If you want the items to occupy adjacent memory positions, use QVector.</li>
</ul>
Internally, QList&lt;T&gt; is represented as an array of pointers to items of type T. If T is itself a pointer type or a basic type that is no larger than a pointer, or if T is one of Qt's <a href="implicit-sharing.html#shared-classes">shared classes</a>, then QList&lt;T&gt; stores the items directly in the pointer array. For lists under a thousand items, this array representation allows for very fast insertions in the middle, and it allows index-based access. Furthermore, operations like prepend() and append() are very fast, because QList preallocates memory at both ends of its internal array. (See <a href="containers.html#algorithmic-complexity">Algorithmic Complexity</a> for details.) Note, however, that for unshared list items that are larger than a pointer, each append or insert of a new item requires allocating the new item on the heap, and this per item allocation might make QVector a better choice in cases that do lots of appending or inserting, since QVector allocates memory for its items in a single heap allocation.

Note that the internal array only ever gets bigger over the life of the list. It never shrinks. The internal array is deallocated by the destructor, by clear(), and by the assignment operator, when one list is assigned to another.

Here's an example of a QList that stores integers and a QList that stores QDate values:

\code
    QList<int> integerList;
    QList<QDate> dateList;
\endcode

Qt includes a QStringList class that inherits QList&lt;QString&gt; and adds a convenience function QStringList::join(). (QString::split() creates QStringLists from strings.)

QList stores a list of items. The default constructor creates an empty list. To insert items into the list, you can use operator&lt;&lt;():

\code
    QList<QString> list;
    list << "one" << "two" << "three";
    // list: ["one", "two", "three"]
\endcode

QList provides these basic functions to add, move, and remove items: insert(), replace(), removeAt(), move(), and swap(). In addition, it provides the following convenience functions: append(), prepend(), removeFirst(), and removeLast().

QList uses 0-based indexes, just like C++ arrays. To access the item at a particular index position, you can use operator[](). On non-const lists, operator[]() returns a reference to the item and can be used on the left side of an assignment:

\code
    if (list[0] == "Bob")
        list[0] = "Robert";
\endcode

Because QList is implemented as an array of pointers, this operation is very fast (<a href="containers.html#constant-time">constant time</a>). For read-only access, an alternative syntax is to use at():

\code
    for (int i = 0; i < list.size(); ++i) {
        if (list.at(i) == "Jane")
            cout << "Found Jane at position " << i << endl;
    }
\endcode

at() can be faster than operator[](), because it never causes a <a href="implicit-sharing.html#deep-copy">deep copy</a> to occur.

A common requirement is to remove an item from a list and do something with it. For this, QList provides takeAt(), takeFirst(), and takeLast(). Here's a loop that removes the items from a list one at a time and calls <tt>delete</tt> on them:

\code
    QList<QWidget *> list;
    ...
    while (!list.isEmpty())
        delete list.takeFirst();
\endcode

Inserting and removing items at either ends of the list is very fast (<a href="containers.html#constant-time">constant time</a> in most cases), because QList preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.

If you want to find all occurrences of a particular value in a list, use indexOf() or lastIndexOf(). The former searches forward starting from a given index position, the latter searches backward. Both return the index of a matching item if they find it; otherwise, they return -1. For example:

\code
    int i = list.indexOf("Jane");
    if (i != -1)
        cout << "First occurrence of Jane is at position " << i << endl;
\endcode

If you simply want to check whether a list contains a particular value, use contains(). If you want to find out how many times a particular value occurs in the list, use count(). If you want to replace all occurrences of a particular value with another, use replace().

QList's value type must be an <a href="containers.html#assignable-data-type">assignable data type</a>. This covers most data types that are commonly used, but the compiler won't let you, for example, store a QWidget as a value; instead, store a QWidget *. A few functions have additional requirements; for example, indexOf() and lastIndexOf() expect the value type to support <tt>operator==()</tt>. These requirements are documented on a per-function basis.

Like the other container classes, QList provides <a href="containers.html#java-style-iterators">Java-style iterators</a> (QListIterator and QMutableListIterator) and <a href="containers.html#stl-style-iterators">STL-style iterators</a> (QList::const_iterator and QList::iterator). In practice, these are rarely used, because you can use indexes into the QList. QList is implemented in such a way that direct index-based access is just as fast as using iterators.

QList does <i>not</i> support inserting, prepending, appending or replacing with references to its own values. Doing so will cause your application to abort with an error message.

To make QList as efficient as possible, its member functions don't validate their input before using it. Except for isEmpty(), member functions always assume the list is <i>not</i> empty. Member functions that take index values as parameters always assume their index value parameters are in the valid range. This means QList member functions can fail. If you define QT_NO_DEBUG when you compile, failures will not be detected. If you <i>don't</i> define QT_NO_DEBUG, failures will be detected using <a href="qtglobal.html#Q_ASSERT">Q_ASSERT</a>() or <a href="qtglobal.html#Q_ASSERT_X">Q_ASSERT_X</a>() with an appropriate message.

To avoid failures when your list can be empty, call isEmpty() before calling other member functions. If you must pass an index value that might not be in the valid range, check that it is less than the value returned by size() but <i>not</i> less than 0.
<b>See also </b>QListIterator, QMutableListIterator, QLinkedList, and QVector.
*/


/*!
\fn QList::QList ()

Constructs an empty list.


*/


/*!
\fn QList::QList ( const QList<T> & other )

Constructs a copy of <i>other</i>.

This operation takes <a href="containers.html#constant-time">constant time</a>, because QList is <a href="implicit-sharing.html#implicitly-shared">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="containers.html#linear-time">linear time</a>.

<b>See also </b>operator=().


*/


/*!
\fn QList::QList ( std::initializer_list<T> args )

Construct a list from the std::initializer_list specified by <i>args</i>.

This constructor is only enabled if the compiler supports C++0x

This function was introduced in Qt 4.8.


*/


/*!
\fn QList::~QList ()

Destroys the list. References to the values in the list and all iterators of this list become invalid.


*/


/*!
\fn void QList::append ( const T & value )

Inserts <i>value</i> at the end of the list.

Example:

\code
    QList<QString> list;
    list.append("one");
    list.append("two");
    list.append("three");
    // list: ["one", "two", "three"]
\endcode

This is the same as list.insert(size(), <i>value</i>).

This operation is typically very fast (<a href="containers.html#constant-time">constant time</a>), because QList preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.

<b>See also </b>operator&lt;&lt;(), prepend(), and insert().


*/


/*!
\fn void QList::append ( const QList<T> & value )

This is an overloaded function.

Appends the items of the <i>value</i> list to this list.

This function was introduced in Qt 4.5.

<b>See also </b>operator&lt;&lt;() and operator+=().


*/


/*!
\fn const T & QList::at ( int i ) const

Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; size()).

This function is very fast (<a href="containers.html#constant-time">constant time</a>).

<b>See also </b>value() and operator[]().


*/


/*!
\fn T & QList::back ()

This function is provided for STL compatibility. It is equivalent to last(). The list must not be empty. If the list can be empty, call isEmpty() before calling this function.


*/


/*!
\fn const T & QList::back () const

This is an overloaded function.


*/


/*!
\fn iterator QList::begin ()

Returns an <a href="containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.

<b>See also </b>constBegin() and end().


*/


/*!
\fn const_iterator QList::begin () const

This is an overloaded function.


*/


/*!
\fn void QList::clear ()

Removes all items from the list.

<b>See also </b>removeAll().


*/


/*!
\fn const_iterator QList::constBegin () const

Returns a const <a href="containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.

<b>See also </b>begin() and constEnd().


*/


/*!
\fn const_iterator QList::constEnd () const

Returns a const <a href="containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.

<b>See also </b>constBegin() and end().


*/


/*!
\fn bool QList::contains ( const T & value ) const

Returns true if the list contains an occurrence of <i>value</i>; otherwise returns false.

This function requires the value type to have an implementation of <tt>operator==()</tt>.

<b>See also </b>indexOf() and count().


*/


/*!
\fn int QList::count ( const T & value ) const

Returns the number of occurrences of <i>value</i> in the list.

This function requires the value type to have an implementation of <tt>operator==()</tt>.

<b>See also </b>contains() and indexOf().


*/


/*!
\fn int QList::count () const

Returns the number of items in the list. This is effectively the same as size().


*/


/*!
\fn bool QList::empty () const

This function is provided for STL compatibility. It is equivalent to isEmpty() and returns true if the list is empty.


*/


/*!
\fn iterator QList::end ()

Returns an <a href="containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.

<b>See also </b>begin() and constEnd().


*/


/*!
\fn const_iterator QList::end () const

This is an overloaded function.


*/


/*!
\fn bool QList::endsWith ( const T & value ) const

Returns true if this list is not empty and its last item is equal to <i>value</i>; otherwise returns false.

This function was introduced in Qt 4.5.

<b>See also </b>isEmpty() and contains().


*/


/*!
\fn iterator QList::erase ( iterator pos )

Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be end()).

<b>See also </b>insert() and removeAt().


*/


/*!
\fn iterator QList::erase ( iterator begin, iterator end )

This is an overloaded function.

Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.


*/


/*!
\fn T & QList::first ()

Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call isEmpty() before calling this function.

<b>See also </b>last() and isEmpty().


*/


/*!
\fn const T & QList::first () const

This is an overloaded function.


*/


/*!
\fn QList<T> QList::fromSet ( const QSet<T> & set ) [static]

Returns a QList object with the data contained in <i>set</i>. The order of the elements in the QList is undefined.

Example:

\code
    QSet<int> set;
    set << 20 << 30 << 40 << ... << 70;

    QList<int> list = QList<int>::fromSet(set);
    <a href="qtalgorithms.html#qSort">qSort</a>(list);
\endcode

<b>See also </b>fromVector(), toSet(), QSet::toList(), and <a href="qtalgorithms.html#qSort">qSort</a>().


*/


/*!
\fn QList<T> QList::fromStdList ( const std::list<T> & list ) [static]

Returns a QList object with the data contained in <i>list</i>. The order of the elements in the QList is the same as in <i>list</i>.

Example:

\code
    std::list<double> stdlist;
    list.push_back(1.2);
    list.push_back(0.5);
    list.push_back(3.14);

    QList<double> list = QList<double>::fromStdList(stdlist);
\endcode

<b>See also </b>toStdList() and QVector::fromStdVector().


*/


/*!
\fn QList<T> QList::fromVector ( const QVector<T> & vector ) [static]

Returns a QList object with the data contained in <i>vector</i>.

Example:

\code
    QVector<double> vect;
    vect << 20.0 << 30.0 << 40.0 << 50.0;

    QList<double> list = QVector<T>::fromVector(vect);
    // list: [20.0, 30.0, 40.0, 50.0]
\endcode

<b>See also </b>fromSet(), toVector(), and QVector::toList().


*/


/*!
\fn T & QList::front ()

This function is provided for STL compatibility. It is equivalent to first(). The list must not be empty. If the list can be empty, call isEmpty() before calling this function.


*/


/*!
\fn const T & QList::front () const

This is an overloaded function.


*/


/*!
\fn int QList::indexOf ( const T & value, int from = 0 ) const

Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.

Example:

\code
    QList<QString> list;
    list << "A" << "B" << "C" << "B" << "A";
    list.indexOf("B");          // returns 1
    list.indexOf("B", 1);       // returns 1
    list.indexOf("B", 2);       // returns 3
    list.indexOf("X");          // returns -1
\endcode

This function requires the value type to have an implementation of <tt>operator==()</tt>.

Note that QList uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.

<b>See also </b>lastIndexOf() and contains().


*/


/*!
\fn void QList::insert ( int i, const T & value )

Inserts <i>value</i> at index position <i>i</i> in the list. If <i>i</i> is 0, the value is prepended to the list. If <i>i</i> is size(), the value is appended to the list.

Example:

\code
    QList<QString> list;
    list << "alpha" << "beta" << "delta";
    list.insert(2, "gamma");
    // list: ["alpha", "beta", "gamma", "delta"]
\endcode

<b>See also </b>append(), prepend(), replace(), and removeAt().


*/


/*!
\fn iterator QList::insert ( iterator before, const T & value )

This is an overloaded function.

Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.


*/


/*!
\fn bool QList::isEmpty () const

Returns true if the list contains no items; otherwise returns false.

<b>See also </b>size().


*/


/*!
\fn T & QList::last ()

Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call isEmpty() before calling this function.

<b>See also </b>first() and isEmpty().


*/


/*!
\fn const T & QList::last () const

This is an overloaded function.


*/


/*!
\fn int QList::lastIndexOf ( const T & value, int from = -1 ) const

Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.

Example:

\code
    QList<QString> list;
    list << "A" << "B" << "C" << "B" << "A";
    list.lastIndexOf("B");      // returns 3
    list.lastIndexOf("B", 3);   // returns 3
    list.lastIndexOf("B", 2);   // returns 1
    list.lastIndexOf("X");      // returns -1
\endcode

This function requires the value type to have an implementation of <tt>operator==()</tt>.

Note that QList uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.

<b>See also </b>indexOf().


*/


/*!
\fn int QList::length () const

This function is identical to count().

This function was introduced in Qt 4.5.

<b>See also </b>count().


*/


/*!
\fn QList<T> QList::mid ( int pos, int length = -1 ) const

Returns a list whose elements are copied from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are copied; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are copied.


*/


/*!
\fn void QList::move ( int from, int to )

Moves the item at index position <i>from</i> to index position <i>to</i>.

Example:

\code
    QList<QString> list;
    list << "A" << "B" << "C" << "D" << "E" << "F";
    list.move(1, 4);
    // list: ["A", "C", "D", "E", "B", "F"]
\endcode

This is the same as insert(<i>to</i>, takeAt(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than size(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than size().

<b>See also </b>swap(), insert(), and takeAt().


*/


/*!
\fn void QList::pop_back ()

This function is provided for STL compatibility. It is equivalent to removeLast(). The list must not be empty. If the list can be empty, call isEmpty() before calling this function.


*/


/*!
\fn void QList::pop_front ()

This function is provided for STL compatibility. It is equivalent to removeFirst(). The list must not be empty. If the list can be empty, call isEmpty() before calling this function.


*/


/*!
\fn void QList::prepend ( const T & value )

Inserts <i>value</i> at the beginning of the list.

Example:

\code
    QList<QString> list;
    list.prepend("one");
    list.prepend("two");
    list.prepend("three");
    // list: ["three", "two", "one"]
\endcode

This is the same as list.insert(0, <i>value</i>).

This operation is usually very fast (<a href="containers.html#constant-time">constant time</a>), because QList preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.

<b>See also </b>append() and insert().


*/


/*!
\fn void QList::push_back ( const T & value )

This function is provided for STL compatibility. It is equivalent to append(<i>value</i>).


*/


/*!
\fn void QList::push_front ( const T & value )

This function is provided for STL compatibility. It is equivalent to prepend(<i>value</i>).


*/


/*!
\fn int QList::removeAll ( const T & value )

Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.

Example:

\code
    QList<QString> list;
    list << "sun" << "cloud" << "sun" << "rain";
    list.removeAll("sun");
    // list: ["cloud", "rain"]
\endcode

This function requires the value type to have an implementation of <tt>operator==()</tt>.

<b>See also </b>removeOne(), removeAt(), takeAt(), and replace().


*/


/*!
\fn void QList::removeAt ( int i )

Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; size()).

<b>See also </b>takeAt(), removeFirst(), removeLast(), and removeOne().


*/


/*!
\fn void QList::removeFirst ()

Removes the first item in the list. Calling this function is equivalent to calling removeAt(0). The list must not be empty. If the list can be empty, call isEmpty() before calling this function.

<b>See also </b>removeAt() and takeFirst().


*/


/*!
\fn void QList::removeLast ()

Removes the last item in the list. Calling this function is equivalent to calling removeAt(size() - 1). The list must not be empty. If the list can be empty, call isEmpty() before calling this function.

<b>See also </b>removeAt() and takeLast().


*/


/*!
\fn bool QList::removeOne ( const T & value )

Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns false.

Example:

\code
    QList<QString> list;
    list << "sun" << "cloud" << "sun" << "rain";
    list.removeOne("sun");
    // list: ["cloud", ,"sun", "rain"]
\endcode

This function requires the value type to have an implementation of <tt>operator==()</tt>.

This function was introduced in Qt 4.4.

<b>See also </b>removeAll(), removeAt(), takeAt(), and replace().


*/


/*!
\fn void QList::replace ( int i, const T & value )

Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; size()).

<b>See also </b>operator[]() and removeAt().


*/


/*!
\fn void QList::reserve ( int alloc )

Reserve space for <i>alloc</i> elements.

If <i>alloc</i> is smaller than the current size of the list, nothing will happen.

Use this function to avoid repetetive reallocation of QList's internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.

This function was introduced in Qt 4.7.


*/


/*!
\fn int QList::size () const

Returns the number of items in the list.

<b>See also </b>isEmpty() and count().


*/


/*!
\fn bool QList::startsWith ( const T & value ) const

Returns true if this list is not empty and its first item is equal to <i>value</i>; otherwise returns false.

This function was introduced in Qt 4.5.

<b>See also </b>isEmpty() and contains().


*/


/*!
\fn void QList::swap ( QList<T> & other )

Swaps list <i>other</i> with this list. This operation is very fast and never fails.

This function was introduced in Qt 4.8.


*/


/*!
\fn void QList::swap ( int i, int j )

Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than size(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than size().

Example:

\code
    QList<QString> list;
    list << "A" << "B" << "C" << "D" << "E" << "F";
    list.swap(1, 4);
    // list: ["A", "E", "C", "D", "B", "F"]
\endcode

<b>See also </b>move().


*/


/*!
\fn T QList::takeAt ( int i )

Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; size()).

If you don't use the return value, removeAt() is more efficient.

<b>See also </b>removeAt(), takeFirst(), and takeLast().


*/


/*!
\fn T QList::takeFirst ()

Removes the first item in the list and returns it. This is the same as takeAt(0). This function assumes the list is not empty. To avoid failure, call isEmpty() before calling this function.

This operation takes <a href="containers.html#constant-time">constant time</a>.

If you don't use the return value, removeFirst() is more efficient.

<b>See also </b>takeLast(), takeAt(), and removeFirst().


*/


/*!
\fn T QList::takeLast ()

Removes the last item in the list and returns it. This is the same as takeAt(size() - 1). This function assumes the list is not empty. To avoid failure, call isEmpty() before calling this function.

This operation takes <a href="containers.html#constant-time">constant time</a>.

If you don't use the return value, removeLast() is more efficient.

<b>See also </b>takeFirst(), takeAt(), and removeLast().


*/


/*!
\fn QSet<T> QList::toSet () const

Returns a QSet object with the data contained in this QList. Since QSet doesn't allow duplicates, the resulting QSet might be smaller than the original list was.

Example:

\code
    QStringList list;
    list << "Julia" << "Mike" << "Mike" << "Julia" << "Julia";

    QSet<QString> set = list.toSet();
    set.contains("Julia");  // returns true
    set.contains("Mike");   // returns true
    set.size();             // returns 2
\endcode

<b>See also </b>toVector(), fromSet(), and QSet::fromList().


*/


/*!
\fn std::list<T> QList::toStdList () const

Returns a std::list object with the data contained in this QList. Example:

\code
    QList<double> list;
    list << 1.2 << 0.5 << 3.14;

    std::list<double> stdlist = list.toStdList();
\endcode

<b>See also </b>fromStdList() and QVector::toStdVector().


*/


/*!
\fn QVector<T> QList::toVector () const

Returns a QVector object with the data contained in this QList.

Example:

\code
    QStringList list;
    list << "Sven" << "Kim" << "Ola";

    QVector<QString> vect = list.toVector();
    // vect: ["Sven", "Kim", "Ola"]
\endcode

<b>See also </b>toSet(), fromVector(), and QVector::fromList().


*/


/*!
\fn T QList::value ( int i ) const

Returns the value at index position <i>i</i> in the list.

If the index <i>i</i> is out of bounds, the function returns a <a href="containers.html#default-constructed-values">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use at() instead, which is slightly faster.

<b>See also </b>at() and operator[]().


*/


/*!
\fn T QList::value ( int i, const T & defaultValue ) const

This is an overloaded function.

If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.


*/


/*!
\fn bool QList::operator!= ( const QList<T> & other ) const

Returns true if <i>other</i> is not equal to this list; otherwise returns false.

Two lists are considered equal if they contain the same values in the same order.

This function requires the value type to have an implementation of <tt>operator==()</tt>.

<b>See also </b>operator==().


*/


/*!
\fn QList<T> QList::operator+ ( const QList<T> & other ) const

Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.

<b>See also </b>operator+=().


*/


/*!
\fn QList<T> & QList::operator+= ( const QList<T> & other )

Appends the items of the <i>other</i> list to this list and returns a reference to this list.

<b>See also </b>operator+() and append().


*/


/*!
\fn QList<T> & QList::operator+= ( const T & value )

This is an overloaded function.

Appends <i>value</i> to the list.

<b>See also </b>append() and operator&lt;&lt;().


*/


/*!
\fn QList<T> & QList::operator<< ( const QList<T> & other )

Appends the items of the <i>other</i> list to this list and returns a reference to this list.

<b>See also </b>operator+=() and append().


*/


/*!
\fn QList<T> & QList::operator<< ( const T & value )

This is an overloaded function.

Appends <i>value</i> to the list.


*/


/*!
\fn QList<T> & QList::operator= ( const QList<T> & other )

Assigns <i>other</i> to this list and returns a reference to this list.


*/


/*!
\fn bool QList::operator== ( const QList<T> & other ) const

Returns true if <i>other</i> is equal to this list; otherwise returns false.

Two lists are considered equal if they contain the same values in the same order.

This function requires the value type to have an implementation of <tt>operator==()</tt>.

<b>See also </b>operator!=().


*/


/*!
\fn T & QList::operator[] ( int i )

Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; size()).

This function is very fast (<a href="containers.html#constant-time">constant time</a>).

<b>See also </b>at() and value().


*/


/*!
\fn const T & QList::operator[] ( int i ) const

This is an overloaded function.

Same as at().


*/


/*!
\typedef QList::ConstIterator

Qt-style synonym for QList::const_iterator.


*/


/*!
\typedef QList::Iterator

Qt-style synonym for QList::iterator.


*/


/*!
\typedef QList::const_pointer

Typedef for const T *. Provided for STL compatibility.


*/


/*!
\typedef QList::const_reference

Typedef for const T &amp;. Provided for STL compatibility.


*/


/*!
\typedef QList::difference_type

Typedef for ptrdiff_t. Provided for STL compatibility.


*/


/*!
\typedef QList::pointer

Typedef for T *. Provided for STL compatibility.


*/


/*!
\typedef QList::reference

Typedef for T &amp;. Provided for STL compatibility.


*/


/*!
\typedef QList::size_type

Typedef for int. Provided for STL compatibility.


*/


/*!
\typedef QList::value_type

Typedef for T. Provided for STL compatibility.


*/


