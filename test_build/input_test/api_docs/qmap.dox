/*************************************************************************
*
* Copyright (C) 2012-2019 Barbara Geller & Ansel Sermersheim
*
* GNU Free Documentation License
*
*************************************************************************/

/* test code to force a foward declaration  */
template <typename Key, typename Val, typename C>
class QMap;


/*!
\class QMap
\brief Provides an ordered associative container.

The QMap class is a template class which provides an ordered associative container. QMap<Key, Val, C> is one of of the
CopperSpice generic container classes. It stores (key, value) pairs and provides logarithmic time lookup of the value
associated with a key.

QMap and %QHash provide very similar functionality.

<ul>
   <li>When iterating over a %QHash the items are arbitrarily ordered, with QMap the items are always sorted by \a key.</li>

   <li>%QHash provides faster lookups than QMap.</li>

   <li>The key type of a %QHash must provide operator==() and a global qHash(Key) function. The key type of a QMap must
    provide operator<() specifying  a total order.</li>
</ul>

The following uses QMap with QString keys and <tt>int</tt> values.

\code
    QMap<QString, int> map;
\endcode

To insert a (key, value) pair into the map the operator[]() can be used as shown:

\code
    map["one"]   = 1;
    map["three"] = 3;
    map["seven"] = 7;
\endcode

*/


/**
\fn QMap::QMap ()

Constructs an empty QMap.

\sa clear().

*/


/**
\fn QMap::QMap ( const QMap<Key, Val, C> & other )

Constructs a copy of \a other.

*/


/**
\fn QMap::QMap ( QMap<Key, Val, C> && other )

Move constructs a map from \a other.

*/


/**
\fn QMap::~QMap ()

Destroys the map. References to the values in the map and all iterators over this map become invalid.

*/


/**
\fn void QMap::clear ()

Removes all items from the map.

*/



/**
\fn bool QMap::contains ( const Key & key ) const

Returns true if the map contains an item with key \a key, otherwise it returns false.

*/

