/************************************************************************
*
* Copyright (c) 2014-2023 Barbara Geller & Ansel Sermersheim
* Copyright (c) 1997-2014 Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer code_py_YY_create_buffer
#define yy_delete_buffer code_py_YY_delete_buffer
#define yy_flex_debug code_py_YY_flex_debug
#define yy_init_buffer code_py_YY_init_buffer
#define yy_flush_buffer code_py_YY_flush_buffer
#define yy_load_buffer_state code_py_YY_load_buffer_state
#define yy_switch_to_buffer code_py_YY_switch_to_buffer
#define yyin code_py_YYin
#define yyleng code_py_YYleng
#define yylex code_py_YYlex
#define yylineno code_py_YYlineno
#define yyout code_py_YYout
#define yyrestart code_py_YYrestart
#define yytext code_py_YYtext
#define yywrap code_py_YYwrap
#define yyalloc code_py_YYalloc
#define yyrealloc code_py_YYrealloc
#define yyfree code_py_YYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE code_py_YYrestart(code_py_YYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int code_py_YYleng;

extern FILE *code_py_YYin, *code_py_YYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up code_py_YYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up code_py_YYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via code_py_YYrestart()), so that the user can continue scanning by
	 * just pointing code_py_YYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when code_py_YYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int code_py_YYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow code_py_YYwrap()'s to do buffer switches
 * instead of setting up a fresh code_py_YYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void code_py_YYrestart (FILE *input_file  );
void code_py_YY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE code_py_YY_create_buffer (FILE *file,int size  );
void code_py_YY_delete_buffer (YY_BUFFER_STATE b  );
void code_py_YY_flush_buffer (YY_BUFFER_STATE b  );
void code_py_YYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void code_py_YYpop_buffer_state (void );

static void code_py_YYensure_buffer_stack (void );
static void code_py_YY_load_buffer_state (void );
static void code_py_YY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER code_py_YY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE code_py_YY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE code_py_YY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE code_py_YY_scan_bytes (yyconst char *bytes,int len  );

void *code_py_YYalloc (yy_size_t  );
void *code_py_YYrealloc (void *,yy_size_t  );
void code_py_YYfree (void *  );

#define yy_new_buffer code_py_YY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        code_py_YYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            code_py_YY_create_buffer(code_py_YYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        code_py_YYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            code_py_YY_create_buffer(code_py_YYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define code_py_YYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *code_py_YYin = (FILE *) 0, *code_py_YYout = (FILE *) 0;

typedef int yy_state_type;

extern int code_py_YYlineno;

int code_py_YYlineno = 1;

extern char *code_py_YYtext;
#define yytext_ptr code_py_YYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up code_py_YYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	code_py_YYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 73
#define YY_END_OF_BUFFER 74
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1149] =
    {   0,
    16423,16423,   64,   64,   74,   72,   73,   70,   72,   73,
       69,   73,   63,   72,   73,   68,   72,   73,   62,   72,
       73,   72,   73,   72,   73,   72,   73,   72,   73,   42,
       69,   73,   27,   41,   72,   73,   27,   41,   72,   73,
       27,   41,   72,   73,   27,   41,   72,   73,   27,   41,
       72,   73,   27,   41,   72,   73,   27,   41,   72,   73,
       27,   41,   72,   73,   27,   41,   72,   73,   27,   41,
       72,   73,   27,   41,   72,   73,   27,   41,   72,   73,
       27,   41,   72,   73,   27,   41,   72,   73,   27,   41,
       72,   73,   27,   41,   72,   73,   27,   41,   72,   73,

       27,   41,   72,   73,   27,   41,   72,   73,   27,   41,
       72,   73,   27,   41,   72,   73,   27,   41,   72,   73,
       27,   41,   72,   73,   27,   41,   72,   73,   27,   41,
       72,   73,   70,   72,   73,   17,   72,   73,   16,   72,
       73,   16,   72,   73,   16,   72,   73,   16,   72,   73,
       16,   72,   73,   19,   72,   73,   18,   70,   72,   73,
       21,   69,   73,   19,   63,   72,   73,   19,   68,   72,
       73,   19,   62,   72,   73,   20,   72,   73,   18,   19,
       72,   73,   22,   72,   73,   19,   72,   73,   19,   72,
       73,   19,   72,   73,   19,   72,   73,   19,   72,   73,

       12,   72,   73,   12,   72,   73,   12,   72,   73,   12,
       72,   73,   12,   72,   73,   13,   70,   72,   73,   13,
       72,   73,   15,   72,   73,   14,   72,   73,   14,   72,
       73,   14,   72,   73,   14,   72,   73,   14,   72,   73,
       40,   69,   73,   27,   72,   73,   27,   72,   73,   27,
       72,   73,   27,   72,   73,   27,   72,   73,   27,   72,
       73,   27,   72,   73,   27,   72,   73,   27,   72,   73,
       27,   72,   73,   27,   72,   73,   27,   72,   73,   27,
       72,   73,   27,   72,   73,   27,   72,   73,   27,   72,
       73,   27,   72,   73,   27,   72,   73,   27,   72,   73,

       27,   72,   73,   27,   72,   73,   27,   72,   73,   27,
       72,   73,   27,   72,   73,   27,   72,   73,   36,   70,
       72,   73,   35,   69,   73,   28,   70,   72,   73,   34,
       69,   73,   68,   72,   73,   32,   72,   73,   32,   72,
       73,   32,   72,   73,   32,   72,   73,   32,   72,   73,
       32,   72,   73,   32,   72,   73,   32,   72,   73,   32,
       72,   73,   32,   72,   73,   32,   72,   73,   32,   72,
       73,   32,   72,   73,   32,   72,   73,   32,   72,   73,
       32,   72,   73,   32,   72,   73,   32,   72,   73,   32,
       72,   73,   32,   72,   73,   32,   72,   73,   32,   72,

       73,   32,   72,   73,   70,   72,   73,16421,   38,   69,
       73, 8231,   72,   73, 8231,   68,   72,   73, 8231,   72,
       73, 8231,   72,   73, 8231,   72,   73, 8231,   72,   73,
       47,   48,   72,   73,   47,   48,   70,   72,   73,   48,
       63,   72,   73,   47,   48,   68,   72,   73,   46,   48,
       62,   72,   73,   47,   48,   72,   73,   47,   48,   72,
       73,   48,   72,   73,   47,   48,   72,   73,   47,   48,
       72,   73,   53,   54,   72,   73,   53,   54,   70,   72,
       73,   52,   54,   63,   72,   73,   53,   54,   68,   72,
       73,   54,   62,   72,   73,   53,   54,   72,   73,   53,

       54,   72,   73,   54,   72,   73,   53,   54,   72,   73,
       53,   54,   72,   73,   57,   59,   72,   73,   57,   59,
       70,   72,   73,   57,   58,   69,   73,   57,   59,   63,
       72,   73,   57,   59,   68,   72,   73,   57,   59,   62,
       72,   73,   57,   59,   72,   73,   57,   59,   72,   73,
       59,   72,   73,   57,   59,   72,   73,   57,   59,   72,
       73,   64,   72,   73,   64,   70,   72,   73,   66,   69,
       73,   63,   64,   72,   73,   64,   68,   72,   73,   62,
       64,   72,   73,   64,   72,   73,   64,   72,   73,   64,
       72,   73,   64,   72,   73,   70,   68,   67,   68,   63,

       62,   71,   25,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   23,   27,   41,   27,   41,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,
       27,   41,   27,   41,   27,   41,   27,   41,   24,   27,
       41,   27,   41,   24,   27,   41,   27,   41,   27,   41,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,
       71,   70,   17,   16,   16,   16,   71,   19,   18,   70,
       19,   19,   68,   19,   67,   68,   19,   19,   19,   63,
       19,   62,   19,   19,   71,   12,   12,   12,   71,   13,

       70,   14,   14,   14,   71,   27,   27,   27,   27,   27,
       27,   23,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   24,   27,   27,   24,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       71,   36,   70,   35,   28,   70,   33,   67,   68,   32,
       32,   32,   32,   32,   30,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   31,   32,   32,   31,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   71,   70,16421,   38, 8229,   47,   47,   70,
       47,   68,   47,   67,   68,   63,   47,   44,   44,   43,

       47,   71,   53,   53,   70,   53,   68,   53,   67,   68,
       62,   53,   50,   50,   49,   53,   71,   57,   57,   70,
       57,   57,   68,   57,   67,   68,   68,   57,   57,   57,
       71,   64,   64,   70,   65,   64,   64,   68,   64,   67,
       68,   64,   63,   64,   62,   64,   64,   64,   71,   61,
       67,   68,   60,   26,   27,   41,   27,   41,   27,   41,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,
       23,   27,   41,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   27,

       41,   27,   41,   27,   41,   19,   61,   19,   67,   68,
       19,   60,   14,   27,   27,   27,   27,   27,   27,   27,
       27,   23,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   32,
       32,   32,   32,   32,   32,   30,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   45,   61,   47,   67,   68,   53,   67,   68,
       51,   60,   55,   61,   57,   67,   68,   67,   68,   56,
       60,   61,   64,   64,   67,   68,   60,   64,   26,   27,
       41,    3,   27,   41,   23,   27,   41,   27,   41,   27,

       41,   27,   41,   27,   41,    1,   27,   41,   27,   41,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,
       27,   41,   27,   41,   27,   41,   27,   41,   27,    3,
       27,   23,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   29,   31,
       32,   32,   32,   32,   32,   32,   27,   41,   23,   27,
       41,   11,   26,16392,16394,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   27,
       23,   27,   27,   27,   27,   27,   27,   27,   27,   32,

       32,   32,   32,   32,   32,   32,   32,    2,    9,   25,
       11,   26,16392,16394,   27,   41,   27,   41,    7,   26,
    16388,16390,   27,   27,   32,   32, 8202,   26,   27,   41,
        5,   25,    7,   26,16388,16390,   27,   32, 8200,   25,
     8202,   26, 8198,   26, 8196,   25, 8198,   26
    } ;

static yyconst flex_int16_t yy_accept[590] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    6,    8,   11,   13,   16,   19,   22,
       24,   26,   28,   30,   33,   37,   41,   45,   49,   53,
       57,   61,   65,   69,   73,   77,   81,   85,   89,   93,
       97,  101,  105,  109,  113,  117,  121,  125,  129,  133,
      136,  139,  142,  145,  148,  151,  154,  157,  161,  164,
      168,  172,  176,  179,  183,  186,  189,  192,  195,  198,
      201,  204,  207,  210,  213,  216,  220,  223,  226,  229,

      232,  235,  238,  241,  244,  247,  250,  253,  256,  259,
      262,  265,  268,  271,  274,  277,  280,  283,  286,  289,
      292,  295,  298,  301,  304,  307,  310,  313,  316,  319,
      323,  326,  330,  333,  336,  339,  342,  345,  348,  351,
      354,  357,  360,  363,  366,  369,  372,  375,  378,  381,
      384,  387,  390,  393,  396,  399,  402,  405,  409,  412,
      415,  419,  422,  425,  428,  431,  435,  440,  444,  449,
      454,  458,  462,  465,  469,  473,  477,  482,  487,  492,
      496,  500,  504,  507,  511,  515,  519,  524,  528,  533,
      538,  543,  547,  551,  554,  558,  562,  565,  569,  572,

      576,  580,  584,  587,  590,  593,  596,  597,  597,  598,
      600,  600,  601,  602,  602,  603,  604,  604,  606,  608,
      610,  612,  614,  616,  619,  621,  623,  625,  627,  629,
      631,  633,  635,  637,  639,  642,  644,  647,  649,  651,
      653,  655,  657,  659,  661,  663,  665,  667,  669,  672,
      673,  674,  675,  676,  678,  679,  681,  682,  684,  687,
      688,  689,  691,  693,  694,  696,  697,  698,  700,  702,
      702,  703,  704,  706,  707,  708,  709,  710,  711,  712,
      714,  715,  716,  717,  718,  719,  720,  721,  722,  723,
      724,  726,  727,  729,  730,  731,  732,  733,  734,  735,

      736,  737,  738,  739,  740,  742,  744,  745,  747,  750,
      751,  752,  753,  754,  755,  757,  758,  759,  760,  761,
      762,  763,  764,  765,  766,  767,  769,  770,  772,  773,
      774,  775,  776,  777,  778,  779,  780,  781,  782,  784,
      786,  787,  788,  789,  791,  791,  793,  796,  797,  798,
      799,  800,  801,  803,  804,  806,  808,  811,  811,  812,
      813,  814,  815,  816,  818,  819,  819,  821,  822,  824,
      827,  828,  829,  830,  832,  833,  835,  835,  836,  837,
      839,  842,  843,  845,  847,  848,  850,  851,  853,  854,
      855,  857,  859,  861,  863,  865,  867,  869,  871,  874,

      876,  878,  880,  882,  884,  886,  888,  890,  892,  894,
      896,  898,  900,  902,  904,  906,  908,  911,  913,  914,
      915,  916,  917,  918,  919,  920,  921,  922,  924,  925,
      926,  927,  928,  929,  930,  931,  932,  933,  934,  935,
      936,  937,  938,  939,  940,  941,  942,  943,  944,  945,
      946,  948,  949,  950,  951,  952,  953,  954,  955,  956,
      957,  958,  959,  960,  961,  962,  963,  965,  968,  968,
      971,  973,  973,  975,  978,  980,  982,  984,  987,  989,
      990,  992,  995,  998, 1000, 1002, 1004, 1004, 1006, 1007,
     1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027,

     1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
     1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
     1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062,
     1063, 1064, 1065, 1066, 1067, 1069, 1072, 1076, 1078, 1080,
     1082, 1084, 1086, 1088, 1090, 1090, 1091, 1093, 1094, 1095,
     1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
     1106, 1107, 1108, 1109, 1111, 1111, 1115, 1117, 1119, 1123,
     1124, 1125, 1126, 1127, 1129, 1131, 1133, 1133, 1137, 1138,
     1139, 1141, 1141, 1143, 1145, 1147, 1147, 1149, 1149
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    4,    4,    7,    8,
        9,    4,    4,   10,    4,   11,    4,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    4,    4,
        4,    4,    1,    1,   14,   14,   14,   14,   14,   15,
       14,   14,   14,   14,   14,   14,   14,   16,   14,   14,
       14,   17,   14,   18,   19,   14,   14,   14,   14,   14,
        4,   20,    4,    1,   21,    4,   22,   23,   24,   25,

       26,   27,   28,   29,   30,   14,   31,   32,   33,   34,
       35,   36,   14,   37,   38,   39,   40,   14,   41,   42,
       43,   14,    4,    4,    4,    4,    1,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    2,    3,    4,    5,    4,    5,    6,    2,    4,
        7,    8,    2,    9,    9,    9,    9,    9,    9,   10,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_base[633] =
    {   0,
        0,   44,   89,    0,  134,    0,  179,    0,  224,    0,
      269,    0,  314,    0,    6,    8,  359,    0,  404,  449,
        0,    0,    0,    0,  493,  537,  581,  625,  669,  713,
      757,  801, 1896, 1897, 1893, 1897, 1889, 1887, 1885,    7,
       11,   15, 1847, 1897,   13,   19,   18,   28,   23,   51,
      404,   46,  405,   56,  411,  428,  416,  449,   58,  424,
      409,  453,  462,  466,  470,  497,  495,  417,  418,   36,
     1897,    0,    8,  504,  510, 1846,    0, 1887, 1897, 1883,
      553, 1880, 1897,    0, 1897,  846,  866,    6,   38,  521,
        0,   65,  515,  541, 1842, 1883, 1897, 1897, 1873,   66,

      562,  585,  474, 1897,   68,  423,  560,  586,  508,  598,
      542,  552,  602,  603,  608,  643,  609,  625,  635,  656,
      645,  673,  685,  686,  690,  717,  715,  691,  564,   83,
     1897, 1881, 1897, 1876,    0, 1859,  486, 1843,  724,   40,
     1842,  398, 1852,  376,  631, 1845,  709, 1854, 1840, 1837,
      514,  678, 1836,  732,  442, 1842, 1827,  477, 1897, 1897,
     1864,  524,  750,  761, 1825,    0, 1866, 1862,  618, 1859,
      530,  768,  645,  772, 1821,    0, 1862, 1858,  775, 1855,
      672,  779,  749,  794, 1817, 1840,  667, 1839, 1853,  807,
     1850,  810,  817,  785,  828,  726,    0, 1854,  495, 1850,

     1848, 1846,  698,  857,  873, 1808, 1849, 1818,    0,    0,
     1796, 1788, 1776,  733, 1729, 1897,    0,  596,  817,  821,
      828,  874,  815,  850,  876,  881,  887,  885,  893,  889,
      898,  897,  903,  907,  852,  909,  914,  916,  918,  922,
      928,  929,  933,  935,  939,  940,  944,  945,  953,  562,
     1897,    0,  786, 1719,    0, 1751, 1730,  960,  972, 1706,
      814, 1701, 1697,    0,  958,    0,  837, 1640, 1675,    0,
     1664,  979,  872,  967,  968,  980,  981,  988,  990,  995,
      996,  997, 1002, 1001, 1009, 1016, 1015, 1021, 1026, 1030,
     1034, 1035, 1040, 1042, 1044, 1046, 1048, 1052, 1056, 1058,

     1062, 1066, 1068, 1077, 1078,  769, 1897, 1665,    0,    0,
     1616, 1605, 1011, 1619, 1597, 1602, 1603, 1590, 1582,  718,
     1521, 1510, 1506, 1505, 1504,    0, 1502,    0, 1502, 1495,
     1493, 1495, 1482, 1466, 1457, 1465, 1449, 1450, 1427, 1028,
     1897, 1897,    0, 1464, 1459, 1086, 1092, 1457, 1087, 1897,
     1078, 1897, 1396,    0, 1434, 1093, 1097, 1417, 1412, 1103,
     1897, 1112, 1897, 1366, 1371, 1113,  715, 1381, 1116, 1121,
     1379, 1367, 1120,  855,    0, 1365,  579, 1897, 1357,    0,
        0, 1354, 1349, 1340, 1104, 1290, 1897,    0, 1897, 1121,
     1122, 1123, 1127, 1131, 1136, 1135, 1137, 1143, 1148, 1144,

     1153, 1154, 1155, 1159, 1161, 1167, 1175, 1177, 1179, 1183,
     1185, 1189, 1195, 1193, 1197,    0, 1210,    0, 1304, 1199,
     1206, 1220, 1222, 1227, 1228, 1232, 1233, 1243, 1242, 1244,
     1248, 1249, 1250, 1254, 1256, 1265, 1267, 1273, 1271, 1278,
     1279, 1284, 1285, 1289, 1275, 1285, 1278, 1281, 1256, 1246,
        0, 1253, 1242, 1237, 1225, 1209, 1211, 1191, 1197, 1161,
     1161, 1143, 1128, 1105, 1072, 1055, 1897, 1169, 1296, 1204,
     1897, 1299, 1897, 1305, 1069, 1897,    0,    0,    0, 1309,
     1311, 1315, 1316, 1320, 1321, 1322,    0, 1328, 1066, 1327,
     1332, 1333, 1334, 1340, 1338, 1342, 1348, 1358, 1362, 1364,

     1368, 1370, 1372, 1376, 1384, 1382, 1388, 1389, 1390, 1394,
     1395, 1396, 1400, 1401, 1406, 1415, 1420, 1422, 1036, 1007,
      994,  973,  964,  951,  945,  944,  917,  910,    0,  889,
      881,  854,  843,  834, 1426, 1427, 1433, 1434, 1440, 1441,
     1442, 1446, 1447, 1448,    0, 1452, 1459, 1464, 1469, 1470,
     1475, 1476, 1481, 1482,  804,  766,  744,  733,  681,  669,
      638,  621,  647, 1897,    0, 1486, 1488, 1493, 1498, 1502,
     1503,  599,  569, 1509, 1511, 1897,    0, 1510, 1515,  523,
     1897,    0, 1516, 1521, 1897,    0, 1522, 1897, 1546, 1556,
     1566, 1576, 1586, 1596, 1606, 1611, 1613, 1622, 1632, 1642,

     1645, 1648, 1652, 1654, 1662, 1672, 1681, 1691, 1701, 1710,
     1720, 1730, 1740, 1750, 1760, 1770,  514, 1780,  405, 1790,
     1800, 1810, 1820, 1825,   78, 1829,   56,   33, 1833, 1837,
       16, 1841
    } ;

static yyconst flex_int16_t yy_def[633] =
    {   0,
      589,  589,  588,    3,  588,    5,  588,    7,  588,    9,
      588,   11,  588,   13,    2,    2,  588,   17,  590,  590,
        2,    2,    2,    2,  591,  591,  592,  592,  593,  593,
      594,  594,  588,  588,  588,  588,  588,  595,  588,  588,
      588,  588,  588,  588,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  588,
      588,  597,  597,  597,  597,  597,  598,  588,  588,  598,
      599,  598,  588,  598,  588,  600,  600,   87,   87,   87,
      601,  601,  601,  601,  601,  588,  588,  588,  602,  602,

      602,  602,  602,  588,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  588,
      588,  588,  588,  595,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  605,  588,  588,
      595,  588,  588,  588,  588,  606,  606,  588,  607,  588,
      606,  606,  608,  606,  606,  609,  609,  588,  610,  588,
      609,  609,  611,  609,  609,  612,  612,  612,  588,  613,
      588,  612,  612,  612,  612,  612,  614,  614,  588,  614,

      615,  614,  614,  614,  614,  614,  588,  588,  595,  616,
      588,  588,  588,  588,  588,  588,  617,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  588,
      588,  597,  597,  597,  598,  588,  598,  599,  618,  598,
       87,  598,  598,   87,   87,  601,  601,  601,  588,  619,
      602,  602,  602,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,

      603,  603,  603,  603,  603,  588,  588,  588,  616,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  605,
      588,  588,  606,  606,  588,  607,  620,  588,  606,  588,
      588,  588,  606,  609,  609,  610,  621,  588,  588,  609,
      588,  588,  588,  609,  612,  612,  612,  588,  613,  622,
      613,  588,  612,  612,  614,  614,  588,  588,  614,  615,
      623,  614,  614,  614,  614,  614,  588,  616,  588,  624,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,

      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  598,  618,  598,  602,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  588,  620,  588,  621,
      588,  588,  588,  622,  622,  588,  614,  623,  614,  624,
      596,  596,  596,  596,  596,  596,  625,  596,  588,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,

      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  596,  596,  626,  596,  596,  596,
      596,  596,  596,  596,  627,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  604,  604,  604,  604,  604,  604,
      604,  604,  588,  588,  628,  626,  596,  596,  629,  603,
      603,  604,  604,  630,  596,  588,  631,  629,  603,  604,
      588,  628,  630,  632,  588,  631,  632,    0,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,

      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588
    } ;

static yyconst flex_int16_t yy_nxt[1943] =
    {   0,
      588,   35,   36,  588,   37,   38,   39,  130,  131,  130,
      131,  212,  212,  213,  213,  212,   40,  213,   41,  212,
      216,  213,  264,  217,  584,  216,  216,  214,  217,  217,
      216,  214,  212,  217,  213,  216,   40,  250,  217,   42,
      219,  574,  264,  251,   43,   35,   36,  214,   37,   38,
       39,  214,  220,  216,  264,  212,  217,  213,  216,  221,
       40,  217,   41,  216,  569,  216,  217,  222,  217,  212,
      212,  213,  213,  314,  264,  216,  270,  315,  217,  238,
       40,  228,  225,   42,  306,  307,  537,  222,   43,   34,
       35,   44,   34,   37,   38,   39,   34,   34,   34,   34,

       34,   34,   45,   46,   47,   48,   49,   50,   34,   45,
       51,   52,   53,   54,   55,   56,   57,   45,   58,   45,
       59,   45,   60,   61,   62,   63,   64,   65,   66,   67,
       45,   68,   45,   69,   34,   70,   36,   34,   37,   38,
       39,   71,   34,   34,   34,   34,   34,   72,   72,   72,
       73,   72,   74,   34,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       73,   72,   72,   75,   72,   72,   72,   72,   76,   77,
       78,   79,   77,   80,   81,   82,   34,   83,   84,   77,
       77,   85,   86,   86,   86,   87,   86,   88,   77,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   87,   86,   86,   89,   86,
       86,   86,   86,   90,   34,   35,   36,   34,   37,   38,
       39,   34,   34,   34,   34,   34,   34,   91,   91,   91,
       92,   91,   93,   34,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       92,   91,   91,   94,   91,   91,   91,   91,   95,   34,
       96,   36,   34,   37,   38,   39,   97,   97,   97,   34,
       34,   98,   99,   99,   99,  100,   99,  101,   34,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,  100,   99,   99,  102,   99,
       99,   99,   99,  103,   34,   35,  104,   34,   37,   38,
       39,   34,   34,   34,   34,   34,   34,  105,  106,  107,
      108,  109,  110,   34,  105,  111,  112,  113,  114,  115,
      116,  117,  105,  118,  105,  119,  105,  120,  121,  122,
      123,  124,  125,  126,  127,  105,  128,  105,  129,   34,
      132,  133,   34,   37,  134,   39,   34,   34,   34,   34,
       34,   34,  135,  136,  135,  137,  138,  139,   34,  135,
      140,  141,  142,  143,  144,  145,  146,  135,  147,  135,
      148,  135,  149,  150,  151,  152,  135,  153,  154,  155,

      135,  156,  135,  157,   34,  158,  159,  320,   37,  161,
       39,  216,  216,  419,  217,  217,  216,  321,  216,  217,
      162,  217,  163,  216,  216,  216,  217,  217,  217,  317,
      216,  216,  318,  217,  217,  216,  226,  223,  217,  227,
      162,  224,  229,  164,  275,  237,  248,  234,  165,   34,
      158,  159,  230,   37,  161,   39,  216,  231,  239,  217,
      216,  249,  232,  217,  233,  162,  212,  163,  213,  216,
      336,  337,  217,  216,  240,  235,  217,  216,  340,  341,
      217,  236,  237,  242,  270,  162,  237,  243,  164,  241,
      212,  244,  213,  165,  167,   36,  377,  168,  169,  170,

      378,  212,  216,  213,  216,  217,  245,  217,  212,  171,
      213,  172,  173,  222,  212,  216,  213,  273,  217,  212,
      253,  213,  390,  246,  247,  255,  253,  255,  212,  171,
      213,  267,  174,  222,  348,  331,  213,  175,  167,   36,
      253,  168,  169,  170,  277,  212,  253,  213,  328,  216,
      332,  267,  217,  171,  209,  172,  173,  267,  259,  216,
      209,  209,  217,  250,  265,  209,  212,  216,  213,  251,
      217,  216,  270,  171,  217,  279,  174,  267,  272,  280,
      377,  175,  177,   36,  378,  178,  179,  180,  281,  212,
      212,  213,  213,  216,  276,  270,  217,  181,  272,  182,

      183,  272,  212,  216,  213,  216,  217,  305,  217,  216,
      216,  328,  217,  217,  278,  216,  216,  181,  217,  217,
      184,  272,  209,  347,  209,  185,  177,   36,  284,  178,
      179,  180,  216,  282,  278,  217,  283,  209,  580,  285,
      290,  181,  216,  182,  183,  217,  351,  352,  563,  286,
      216,  291,  216,  217,  328,  217,  294,  292,  293,  451,
      322,  181,  293,  216,  184,  323,  217,  324,  367,  185,
      187,  188,  287,  189,  190,  191,  212,  288,  359,  289,
      216,  293,  212,  217,  213,  192,  366,  193,  194,  212,
      295,  213,  216,  216,  296,  217,  217,  216,  216,  333,

      217,  217,  383,  334,  384,  192,  298,  451,  195,  297,
      299,  300,  451,  196,  187,  188,  367,  189,  190,  191,
      304,  212,  216,  213,  216,  217,  301,  217,  212,  192,
      213,  193,  194,  278,  366,  326,  212,  212,  213,  213,
      313,  327,  328,  302,  303,  366,  328,  452,  313,  192,
      362,  363,  195,  278,  212,  453,  213,  196,  198,  199,
      313,  200,  201,  202,  573,  212,  214,  213,  313,  374,
      306,  307,  348,  203,  213,  204,  348,  214,  213,  209,
      357,  209,  328,  212,  349,  359,  214,  588,  349,  365,
      212,  365,  213,  203,  209,  360,  205,  214,  212,  572,

      359,  206,  198,  199,  349,  200,  201,  202,  349,  365,
      360,  209,  370,  209,  212,  360,  213,  203,  255,  204,
      255,  212,  216,  213,  216,  217,  371,  217,  216,  366,
      360,  217,  212,  373,  213,  216,  366,  203,  217,  237,
      205,  212,  451,  213,  373,  206,  255,  366,  391,  255,
      255,  255,  255,  373,  392,  255,  255,  216,  328,  216,
      217,  383,  217,  384,  373,  255,  255,  393,  328,  255,
      262,  255,  263,  385,  366,  255,  255,  383,  212,  384,
      213,  216,  270,  216,  217,  255,  217,  394,  216,  385,
      562,  217,  216,  385,  216,  217,  216,  217,  374,  217,

      216,  395,  396,  217,  216,  216,  328,  217,  217,  385,
      216,  399,  402,  217,  216,  273,  216,  217,  397,  217,
      398,  216,  400,  216,  217,  216,  217,  328,  217,  216,
      401,  403,  217,  237,  561,  216,  216,  404,  217,  217,
      216,  405,  216,  217,  406,  217,  216,  216,  407,  217,
      217,  216,  216,  560,  217,  217,  237,  409,  410,  408,
      216,  209,  255,  217,  255,  559,  412,  209,  209,  413,
      415,  411,  209,  388,  216,  216,  558,  217,  217,  388,
      388,  237,  414,  212,  388,  213,  557,  216,  216,  270,
      217,  217,  212,  556,  213,  216,  249,  216,  217,  420,

      217,  265,  216,  216,  216,  217,  217,  217,  216,  216,
      451,  217,  217,  421,  293,  212,  216,  213,  425,  217,
      422,  424,  216,  216,  328,  217,  217,  428,  216,  340,
      341,  217,  423,  216,  426,  427,  217,  216,  429,  431,
      217,  216,  216,  555,  217,  217,  430,  216,  432,  216,
      217,  216,  217,  216,  217,  216,  217,  293,  217,  216,
      433,  451,  217,  216,  434,  216,  217,  489,  217,  216,
      435,  588,  217,  216,  436,  216,  217,  438,  217,  469,
      352,  439,  293,  437,  216,  216,  534,  217,  217,  441,
      209,  348,  209,  213,  440,  442,  388,  209,  388,  209,

      451,  388,  444,  388,  293,  209,  443,  212,  383,  359,
      384,  388,  209,  472,  363,  588,  388,  365,  365,  365,
      209,  305,  209,  365,  212,  388,  213,  388,  216,  216,
      216,  217,  217,  217,  216,  371,  533,  217,  216,  366,
      475,  217,  216,  216,  216,  217,  217,  487,  482,  489,
      216,  216,  483,  217,  217,  216,  484,  485,  217,  481,
      216,  216,  216,  217,  217,  217,  216,  532,  216,  217,
      237,  217,  486,  388,  216,  388,  491,  217,  237,  490,
      531,  488,  216,  492,  216,  217,  216,  217,  388,  217,
      216,  483,  216,  217,  530,  217,  216,  494,  529,  217,

      216,  493,  216,  217,  216,  217,  216,  217,  388,  217,
      388,  388,  495,  216,  237,  498,  217,  388,  388,  528,
      496,  483,  388,  388,  497,  527,  499,  216,  500,  216,
      217,  502,  217,  526,  216,  216,  501,  217,  217,  216,
      216,  451,  487,  217,  489,  503,  525,  504,  505,  216,
      216,  216,  217,  217,  217,  216,  216,  216,  217,  217,
      217,  216,  524,  216,  217,  506,  217,  328,  293,  293,
      509,  507,  216,  508,  216,  217,  510,  217,  216,  328,
      216,  217,  503,  217,  523,  216,  216,  512,  217,  217,
      511,  216,  216,  522,  217,  217,  216,  469,  352,  217,

      472,  363,  521,  520,  293,  516,  513,  365,  514,  388,
      451,  388,  519,  503,  270,  517,  216,  515,  216,  217,
      518,  217,  216,  216,  475,  217,  217,  216,  216,  216,
      217,  217,  217,  386,  216,  216,  483,  217,  217,  216,
      216,  216,  217,  217,  217,  216,  382,  216,  217,  216,
      217,  237,  217,  379,  541,  216,  535,  538,  217,  536,
      479,  477,  539,  540,  543,  216,  376,  237,  545,  216,
      542,  216,  217,  476,  217,  216,  237,  216,  217,  216,
      217,  588,  217,  216,  544,  473,  217,  237,  237,  216,
      366,  216,  217,  503,  217,  216,  216,  216,  217,  217,

      217,  216,  216,  216,  217,  217,  217,  216,  216,  364,
      217,  217,  546,  216,  293,  551,  217,  548,  358,  547,
      553,  550,  216,  471,  549,  545,  293,  216,  563,  216,
      217,  552,  217,  216,  216,  355,  217,  217,  293,  353,
      564,  216,  554,  565,  217,  293,  293,  216,  216,  216,
      217,  217,  217,  216,  216,  216,  217,  217,  217,  216,
      563,  345,  217,  467,  483,  344,  216,  567,  483,  217,
      339,  216,  568,  483,  217,  466,  216,  216,  237,  217,
      217,  237,  216,  216,  483,  217,  217,  465,  216,  216,
      503,  217,  217,  564,  464,  216,  565,  570,  217,  328,

      216,  571,  503,  217,  463,  576,  503,  293,  577,  216,
      216,  462,  217,  217,  503,  293,  581,  576,  216,  582,
      577,  217,  216,  581,  461,  217,  582,  575,  585,  585,
      460,  586,  586,  328,  459,  237,  237,  458,  457,  456,
      293,  579,  328,  455,  454,  293,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  197,  197,  197,  197,

      197,  197,  197,  197,  197,  197,  209,  209,  451,  209,
      209,  209,  209,  209,  209,  209,  218,  218,  218,  218,
      252,  252,  255,  450,  449,  255,  255,  448,  255,  255,
      255,  255,  258,  258,  447,  258,  258,  258,  258,  258,
      258,  258,  261,  328,  446,  261,  261,  445,  261,  261,
      261,  261,  266,  266,  271,  271,  271,  274,  274,  274,
      274,  310,  310,  342,  342,  342,  308,  342,  342,  342,
      342,  342,  343,  343,  270,  343,  269,  343,  343,  343,
      343,  346,  346,  268,  346,  346,  346,  346,  346,  346,
      346,  350,  350,  350,  350,  350,  350,  350,  350,  350,

      350,  354,  354,  260,  354,  257,  354,  354,  354,  354,
      356,  356,  418,  356,  356,  356,  356,  356,  356,  356,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      365,  365,  365,  365,  416,  365,  365,  365,  365,  365,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      375,  375,  256,  375,  375,  375,  375,  375,  375,  375,
      380,  380,  254,  380,  380,  380,  380,  380,  380,  380,
      388,  388,  215,  388,  388,  388,  388,  388,  388,  388,
      417,  417,  211,  417,  417,  417,  417,  417,  417,  417,
      468,  468,  208,  468,  468,  468,  468,  468,  468,  468,

      470,  470,  389,  470,  470,  470,  470,  470,  470,  470,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      478,  478,  387,  478,  478,  478,  478,  478,  478,  478,
      480,  480,  480,  480,  566,  566,  566,  566,  578,  578,
      578,  578,  583,  583,  583,  583,  587,  587,  587,  587,
      207,  386,  382,  381,  379,  376,  372,  368,  366,  366,
      364,  358,  208,  355,  353,  211,  345,  344,  215,  210,
      339,  338,  335,  328,  330,  329,  325,  319,  316,  312,
      311,  309,  308,  270,  269,  268,  260,  257,  256,  254,
      215,  211,  210,  208,  207,  588,   33,  588,  588,  588,

      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588
    } ;

static yyconst flex_int16_t yy_chk[1943] =
    {   0,
        0,    1,    1,    0,    1,    1,    1,   15,   15,   16,
       16,   40,   73,   40,   73,   41,    1,   41,    1,   42,
       45,   42,   88,   45,  631,   47,   46,   41,   47,   46,
       49,   42,   48,   49,   48,   48,    1,   70,   48,    1,
       46,  628,   88,   70,    1,    2,    2,   41,    2,    2,
        2,   42,   47,   52,   89,   50,   52,   50,   50,   49,
        2,   50,    2,   54,  627,   59,   54,   50,   59,   92,
      100,   92,  100,  140,   89,  105,  100,  140,  105,   59,
        2,   54,   52,    2,  130,  130,  625,   50,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   19,   19,   19,  144,   19,   19,
       19,   51,   53,  619,   51,   53,   61,  144,   55,   61,
       19,   55,   19,   57,   68,   69,   57,   68,   69,  142,
      106,   60,  142,  106,   60,   56,   53,   51,   56,   53,
       19,   51,   55,   19,  106,   61,   68,   57,   19,   20,
       20,   20,   55,   20,   20,   20,   58,   56,   60,   58,
       62,   69,   56,   62,   56,   20,   63,   20,   63,   63,
      155,  155,   63,   64,   62,   58,   64,   65,  158,  158,
       65,   58,   58,   63,  103,   20,   58,   63,   20,   62,
      137,   64,  137,   20,   25,   25,  199,   25,   25,   25,

      199,   66,   67,   66,   66,   67,   65,   66,   74,   25,
       74,   25,   25,   66,   75,  109,   75,  103,  109,   93,
       74,   93,  617,   67,   67,   90,   75,   90,  162,   25,
      162,   93,   25,   66,  171,  151,  171,   25,   26,   26,
       74,   26,   26,   26,  109,   94,   75,   94,  580,  111,
      151,   93,  111,   26,   81,   26,   26,   94,   81,  112,
       81,   81,  112,  250,   90,   81,  101,  107,  101,  250,
      107,  129,  101,   26,  129,  111,   26,   94,  101,  111,
      377,   26,   27,   27,  377,   27,   27,   27,  112,  102,
      108,  102,  108,  108,  107,  102,  108,   27,  101,   27,

       27,  102,  110,  218,  110,  110,  218,  129,  110,  113,
      114,  573,  113,  114,  110,  115,  117,   27,  115,  117,
       27,  102,  169,  169,  169,   27,   28,   28,  114,   28,
       28,   28,  118,  113,  110,  118,  113,  169,  572,  115,
      117,   28,  119,   28,   28,  119,  173,  173,  563,  115,
      116,  118,  121,  116,  562,  121,  119,  118,  118,  561,
      145,   28,  118,  120,   28,  145,  120,  145,  187,   28,
       29,   29,  116,   29,   29,   29,  181,  116,  181,  116,
      122,  121,  152,  122,  152,   29,  187,   29,   29,  123,
      120,  123,  123,  124,  122,  123,  124,  125,  128,  152,

      125,  128,  203,  152,  203,   29,  123,  560,   29,  122,
      123,  124,  559,   29,   30,   30,  367,   30,   30,   30,
      128,  126,  127,  126,  126,  127,  125,  126,  139,   30,
      139,   30,   30,  126,  367,  147,  154,  214,  154,  214,
      139,  147,  147,  127,  127,  196,  147,  320,  154,   30,
      183,  183,   30,  126,  163,  320,  163,   30,   31,   31,
      139,   31,   31,   31,  558,  164,  163,  164,  154,  196,
      306,  306,  172,   31,  172,   31,  174,  164,  174,  179,
      179,  179,  557,  182,  172,  182,  163,  194,  174,  194,
      253,  194,  253,   31,  179,  182,   31,  164,  184,  556,

      184,   31,   32,   32,  172,   32,   32,   32,  174,  190,
      184,  190,  190,  190,  192,  182,  192,   32,  261,   32,
      261,  193,  223,  193,  219,  223,  190,  219,  220,  192,
      184,  220,  195,  193,  195,  221,  193,   32,  221,  223,
       32,  267,  555,  267,  195,   32,   86,  195,  219,   86,
       86,   86,   86,  193,  220,   86,   86,  224,  534,  235,
      224,  204,  235,  204,  195,   86,   87,  221,  533,   87,
       87,   87,   87,  204,  374,   87,   87,  205,  222,  205,
      222,  222,  273,  225,  222,   87,  225,  224,  226,  205,
      532,  226,  228,  204,  227,  228,  230,  227,  374,  230,

      229,  225,  226,  229,  232,  231,  531,  232,  231,  205,
      233,  228,  230,  233,  234,  273,  236,  234,  226,  236,
      227,  237,  229,  238,  237,  239,  238,  530,  239,  240,
      229,  231,  240,  232,  528,  241,  242,  233,  241,  242,
      243,  234,  244,  243,  236,  244,  245,  246,  238,  245,
      246,  247,  248,  527,  247,  248,  239,  241,  242,  240,
      249,  258,  265,  249,  265,  526,  244,  258,  258,  246,
      248,  243,  258,  259,  274,  275,  525,  274,  275,  259,
      259,  245,  247,  272,  259,  272,  524,  276,  277,  272,
      276,  277,  278,  523,  278,  278,  249,  279,  278,  275,

      279,  265,  280,  281,  282,  280,  281,  282,  284,  283,
      522,  284,  283,  276,  279,  313,  285,  313,  282,  285,
      277,  281,  287,  286,  521,  287,  286,  284,  288,  340,
      340,  288,  280,  289,  282,  283,  289,  290,  285,  286,
      290,  291,  292,  520,  291,  292,  285,  293,  287,  294,
      293,  295,  294,  296,  295,  297,  296,  288,  297,  298,
      289,  519,  298,  299,  290,  300,  299,  489,  300,  301,
      292,  475,  301,  302,  294,  303,  302,  297,  303,  351,
      351,  298,  295,  296,  304,  305,  466,  304,  305,  300,
      346,  349,  346,  349,  299,  302,  347,  356,  347,  356,

      465,  357,  304,  357,  301,  346,  303,  360,  385,  360,
      385,  347,  356,  362,  362,  366,  357,  366,  369,  366,
      369,  305,  369,  370,  373,  370,  373,  370,  390,  391,
      392,  390,  391,  392,  393,  369,  464,  393,  394,  373,
      370,  394,  396,  395,  397,  396,  395,  397,  392,  399,
      398,  400,  393,  398,  400,  399,  394,  395,  399,  391,
      401,  402,  403,  401,  402,  403,  404,  463,  405,  404,
      400,  405,  396,  468,  406,  468,  403,  406,  401,  402,
      462,  398,  407,  405,  408,  407,  409,  408,  468,  409,
      410,  404,  411,  410,  461,  411,  412,  407,  460,  412,

      414,  406,  413,  414,  415,  413,  420,  415,  470,  420,
      470,  417,  409,  421,  408,  412,  421,  417,  417,  459,
      410,  414,  417,  470,  411,  458,  413,  422,  415,  423,
      422,  421,  423,  457,  424,  425,  420,  424,  425,  426,
      427,  456,  426,  427,  428,  422,  455,  423,  424,  429,
      428,  430,  429,  428,  430,  431,  432,  433,  431,  432,
      433,  434,  454,  435,  434,  425,  435,  453,  429,  430,
      432,  427,  436,  431,  437,  436,  434,  437,  439,  452,
      438,  439,  433,  438,  450,  440,  441,  436,  440,  441,
      435,  442,  443,  449,  442,  443,  444,  469,  469,  444,

      472,  472,  448,  447,  437,  441,  438,  474,  439,  474,
      446,  474,  445,  443,  419,  442,  480,  440,  481,  480,
      444,  481,  482,  483,  474,  482,  483,  484,  485,  486,
      484,  485,  486,  386,  490,  488,  481,  490,  488,  491,
      492,  493,  491,  492,  493,  495,  384,  494,  495,  496,
      494,  485,  496,  383,  492,  497,  484,  488,  497,  486,
      382,  379,  490,  491,  494,  498,  376,  496,  498,  499,
      493,  500,  499,  372,  500,  501,  495,  502,  501,  503,
      502,  371,  503,  504,  497,  368,  504,  499,  500,  506,
      365,  505,  506,  501,  505,  507,  508,  509,  507,  508,

      509,  510,  511,  512,  510,  511,  512,  513,  514,  364,
      513,  514,  504,  515,  505,  510,  515,  507,  359,  506,
      512,  509,  516,  358,  508,  516,  514,  517,  536,  518,
      517,  511,  518,  535,  536,  355,  535,  536,  513,  353,
      537,  538,  515,  537,  538,  517,  518,  539,  540,  541,
      539,  540,  541,  542,  543,  544,  542,  543,  544,  546,
      547,  348,  546,  345,  535,  344,  547,  538,  543,  547,
      339,  548,  540,  541,  548,  338,  549,  550,  539,  549,
      550,  544,  551,  552,  542,  551,  552,  337,  553,  554,
      546,  553,  554,  566,  336,  567,  566,  548,  567,  335,

      568,  550,  553,  568,  334,  569,  551,  549,  569,  570,
      571,  333,  570,  571,  552,  554,  574,  578,  575,  574,
      578,  575,  579,  583,  332,  579,  583,  567,  584,  587,
      331,  584,  587,  330,  329,  568,  575,  327,  325,  324,
      579,  570,  323,  322,  321,  571,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  595,  595,  319,  595,
      595,  595,  595,  595,  595,  595,  596,  596,  596,  596,
      597,  597,  598,  318,  317,  598,  598,  316,  598,  598,
      598,  598,  599,  599,  315,  599,  599,  599,  599,  599,
      599,  599,  600,  314,  312,  600,  600,  311,  600,  600,
      600,  600,  601,  601,  602,  602,  602,  603,  603,  603,
      603,  604,  604,  605,  605,  605,  308,  605,  605,  605,
      605,  605,  606,  606,  271,  606,  269,  606,  606,  606,
      606,  607,  607,  268,  607,  607,  607,  607,  607,  607,
      607,  608,  608,  608,  608,  608,  608,  608,  608,  608,

      608,  609,  609,  263,  609,  262,  609,  609,  609,  609,
      610,  610,  260,  610,  610,  610,  610,  610,  610,  610,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      612,  612,  612,  612,  257,  612,  612,  612,  612,  612,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      614,  614,  256,  614,  614,  614,  614,  614,  614,  614,
      615,  615,  254,  615,  615,  615,  615,  615,  615,  615,
      616,  616,  215,  616,  616,  616,  616,  616,  616,  616,
      618,  618,  213,  618,  618,  618,  618,  618,  618,  618,
      620,  620,  212,  620,  620,  620,  620,  620,  620,  620,

      621,  621,  211,  621,  621,  621,  621,  621,  621,  621,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      623,  623,  208,  623,  623,  623,  623,  623,  623,  623,
      624,  624,  624,  624,  626,  626,  626,  626,  629,  629,
      629,  629,  630,  630,  630,  630,  632,  632,  632,  632,
      207,  206,  202,  201,  200,  198,  191,  189,  188,  186,
      185,  180,  178,  177,  175,  170,  168,  167,  165,  161,
      157,  156,  153,  150,  149,  148,  146,  143,  141,  138,
      136,  134,  132,   99,   96,   95,   82,   80,   78,   76,
       43,   39,   38,   37,   35,   33,  588,  588,  588,  588,

      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588
    } ;

extern int code_py_YY_flex_debug;
int code_py_YY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up code_py_YYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *code_py_YYtext;
/*************************************************************************
 *
 * Copyright (c) 2014-2023 Barbara Geller & Ansel Sermersheim
 * Copyright (c) 1997-2014 Dimitri van Heesch

*************************************************************************/

#include <QStack>
#include <QSharedPointer>
#include <QStringList>

#include <stdio.h>

#include <config.h>
#include <doxy_globals.h>
#include <entry.h>
#include <message.h>
#include <outputlist.h>
#include <parse_cstyle.h>
#include <parse_py.h>
#include <tooltip.h>
#include <util.h>

#define DBG_CTX(...)     do { } while(0)

#define YY_NO_INPUT 1

static ClassSDict    s_codeClassSDict;
static QString       s_curClassName;
static QStringList   s_curClassBases;

static QString       s_inputString;        // the code fragment as text
static int	         s_inputPosition;      // read offset during parsing
static QString       s_currentFontClass;
static bool          s_needsTermination;

static bool          s_collectXRefs;
static int           s_inputLines;         // number of line in the code fragment
static int	         s_yyLineNr;           // current line number

static bool          s_includeCodeFragment;
static QString       s_realScope;

static int           s_bodyCurlyCount;
static bool          s_searchingForBody;
static QString       s_classScope;
static int           s_paramParens;

static bool          s_exampleBlock;
static QString       s_exampleName;
static QString       s_type;
static QString       s_name;

static bool          s_doubleStringIsDoc;
static bool          s_doubleQuote;
static bool          s_noSuiteFound;
static int           s_stringContext;

static QString       s_docBlock;
static bool          s_endComment;

static CodeGenerator               *s_code;

static QStack<uint>                 s_indents;           // tracks indentation levels for scoping in python
static QSharedPointer<Definition>   s_searchCtx;
static QSharedPointer<FileDef>      s_sourceFileDef;
static QSharedPointer<Definition>   s_currentDefinition;
static QSharedPointer<MemberDef>    s_currentMemberDef;

static void endFontClass();
static void adjustScopesAndSuites(unsigned indentLength);

/*! Represents a stack of variable to class mappings as found in the
 *  code. Each scope is enclosed in pushScope() and popScope() calls.
 *  Variables are added by calling addVariables() and one can search
 *  for variable using findVariable().
 */
class PyVariableContext
{
   public:
      static QSharedPointer<ClassDef> dummyContext();

      PyVariableContext() {
      }

      virtual ~PyVariableContext() {
      }

      void pushScope() {
         m_scopes.append(new StringMap<QSharedPointer<ClassDef>>);
      }

      void popScope() {
         if (m_scopes.count() > 0) {
            m_scopes.removeAt(m_scopes.count() - 1);
         }
      }

      void clear() {
         m_scopes.clear();
         m_globalScope.clear();
      }

      void clearExceptGlobal() {
         m_scopes.clear();
      }

      void addVariable(const QString &type, const QString &name);
      QSharedPointer<ClassDef> findVariable(const QString &name);

   private:
      StringMap<QSharedPointer<ClassDef>>          m_globalScope;
      QList<StringMap<QSharedPointer<ClassDef>> *> m_scopes;
};

QSharedPointer<ClassDef> PyVariableContext::dummyContext()
{
   static QSharedPointer<ClassDef> dummyContext = QMakeShared<ClassDef>("", 0, 0, "dummyContext-python", CompoundType::Class);
   return dummyContext;
}

void PyVariableContext::addVariable(const QString &type, const QString &name)
{
   QString ltype = type.simplified();
   QString lname = name.simplified();

   StringMap<QSharedPointer<ClassDef>> *scope;

   if (m_scopes.count() == 0 ) {
      scope = &m_globalScope;
   } else {
      scope = m_scopes.last();
   }

   QSharedPointer<ClassDef> varType;

   if ( (varType = s_codeClassSDict[ltype]) || (varType = getResolvedClass(s_currentDefinition, s_sourceFileDef, ltype)) ) {
      // look for class definitions inside the code block
      // look for global class definitions

      scope->insert(lname, varType);

   } else {
      if (m_scopes.count() > 0)  {
         // for local variables add a dummy entry so the name
         // is hidden to avoid false links to global variables with the same name
         // TODO: make this work for namespaces as well

         scope->insert(lname, PyVariableContext::dummyContext());
      }
   }
}

QSharedPointer<ClassDef> PyVariableContext::findVariable(const QString &name)
{
   if (name.isEmpty()) {
      return QSharedPointer<ClassDef>();
   }

   QSharedPointer<ClassDef> result;

   // search from inner to outer scope
   for (int k = m_scopes.size() - 1; k >= 0; --k) {

      result = m_scopes[k]->find(name);

      if (result) {
         return result;
      }
   }

   // nothing found -> also try the global scope
   result = m_globalScope.find(name);

   return result;
}

static PyVariableContext s_theVarContext;

class PyCallContext
{
   public:
      struct Ctx {
         Ctx() : name(s_name), type(s_type), cd(0)
         {}

         QString name;
         QString type;

         QSharedPointer<ClassDef> cd;
      };

      PyCallContext() {
         m_classList.append(new Ctx);
      }

      virtual ~PyCallContext() {}

      void setClass(QSharedPointer<ClassDef> cd) {
         Ctx *ctx = m_classList.last();

         if (ctx) {
            ctx->cd = cd;
         }
      }

      void pushScope() {
         m_classList.append(new Ctx);
      }

      void popScope() {
         if (m_classList.count() > 1) {
            Ctx *ctx = m_classList.last();

            if (ctx) {
               s_name = ctx->name;
               s_type = ctx->type;
            }
            m_classList.removeLast();
         }
      }

      void clear() {
         m_classList.clear();
         m_classList.append(new Ctx);
      }

      QSharedPointer<ClassDef> getClass() const {
         Ctx *ctx = m_classList.last();

         if (ctx) {
            return ctx->cd;
         } else {
            return QSharedPointer<ClassDef>();
         }
      }

   private:
      QList<Ctx *> m_classList;
};

static PyCallContext s_theCallContext;

// counts the number of lines in the input
static int countLines()
{
   int count = 1;

   if (s_inputString.isEmpty() ) {
      return count;
   }

   for (QChar c : s_inputString) {
      if (c == '\n') {
         ++count;
      }
   }

   if (s_inputString.last() != '\n') {
      // last line does not end with a \n, add extra line and explicitly terminate the line after parsing
      ++count;
      s_needsTermination = true;
   }

   return count;
}

static void setCurrentDoc(const QString &anchor)
{
   if (Doxy_Globals::searchIndexBase != nullptr) {
      if (s_searchCtx) {
         Doxy_Globals::searchIndexBase->setCurrentDoc(s_searchCtx, s_searchCtx->anchor(), false);
      } else {
         Doxy_Globals::searchIndexBase->setCurrentDoc(s_sourceFileDef, anchor, true);
      }
   }
}

static void addToSearchIndex(const QString &text)
{
   if (Doxy_Globals::searchIndexBase != nullptr) {
      Doxy_Globals::searchIndexBase->addWord(text, false);
   }
}

static QSharedPointer<ClassDef> stripClassName(const QString &s, QSharedPointer<Definition> d = s_currentDefinition)
{
   int pos = 0;

   QString type = s;
   QString className;
   QString templSpec;

   while (extractClassNameFromType(type, pos, className, templSpec) != -1) {
      QString clName = className + templSpec;

      QSharedPointer<ClassDef> cd;

      if (! s_classScope.isEmpty()) {
         cd = getResolvedClass(d, s_sourceFileDef, s_classScope + "::" + clName);
      }

      if (cd == 0) {
         cd = getResolvedClass(d, s_sourceFileDef, clName);
      }

      if (cd) {
         return cd;
      }
   }

   return QSharedPointer<ClassDef>();
}

/* start a new line of code, inserting a line number if s_sourceFileDef
 * is true. If a definition starts at the current line, then the line
 * number is linked to the documentation of that definition.
 */
static void startCodeLine()
{
   if (s_sourceFileDef) {
      QSharedPointer<Definition> d = s_sourceFileDef->getSourceDefinition(s_yyLineNr);

      if (! s_includeCodeFragment && d && d->isLinkableInProject()) {
         s_currentDefinition = d;
         s_currentMemberDef  = s_sourceFileDef->getSourceMember(s_yyLineNr);
         s_endComment        = false;
         s_searchingForBody  = true;

         s_realScope  = d->name();
         s_classScope = d->name();

         s_bodyCurlyCount = 0;

         QString lineAnchor;
         lineAnchor = QString("l%1").formatArg(s_yyLineNr, 5, 10, QChar('0'));

         if (s_currentMemberDef) {
            s_code->writeLineNumber(s_currentMemberDef->getReference(), s_currentMemberDef->getOutputFileBase(),
                  s_currentMemberDef->anchor(), s_yyLineNr);

            setCurrentDoc(lineAnchor);

         } else {
            s_code->writeLineNumber(d->getReference(), d->getOutputFileBase(), QString(), s_yyLineNr);
            setCurrentDoc(lineAnchor);
         }

      } else {
         s_code->writeLineNumber(QString(), QString(), QString(), s_yyLineNr);
      }
   }

   s_code->startCodeLine(s_sourceFileDef);

   if (! s_currentFontClass.isEmpty()) {
      s_code->startFontClass(s_currentFontClass);
   }
}

static void codify(const QString &text)
{
   s_code->codify(text);
}

static void endCodeLine()
{
   endFontClass();
   s_code->endCodeLine();
}

static void nextCodeLine()
{
   QString fc = s_currentFontClass;
   endCodeLine();

   if (s_yyLineNr < s_inputLines) {
      s_currentFontClass = fc;
      startCodeLine();
   }
}

static void startFontClass(const QString &s)
{
   // if font class is already set do not stop and start it again
   if (s_currentFontClass != s) {
      endFontClass();
      s_code->startFontClass(s);
      s_currentFontClass = s;
   }
}

static void endFontClass()
{
   if (! s_currentFontClass.isEmpty() ) {
      s_code->endFontClass();
      s_currentFontClass = "";
   }
}

/* writes a link to a fragment \a text that may span multiple lines, inserting
 * line numbers for each line. If \a text contains newlines, the link will be
 * split into multiple links with the same destination, one for each line.
 */
static void writeMultiLineCodeLink(CodeGenerator &ol, QSharedPointer<Definition> d, const QString &text)
{
   static const bool sourceTooltips = Config::getBool("source-tooltips");
   TooltipManager::instance()->addTooltip(d);

   QString ref    = d->getReference();
   QString file   = d->getOutputFileBase();
   QString anchor = d->anchor();
   QString tooltip;

   if (! sourceTooltips) {
      // fall back to simple "title" tooltips
      tooltip = d->briefDescriptionAsTooltip();
   }

   QString tmp;

   for (auto c : text) {

      if (c == '\n') {
         s_yyLineNr++;

         ol.writeCodeLink(ref, file, anchor, tmp, tooltip);
         nextCodeLine();

         tmp = "";

      } else {
         tmp += c;

      }
   }

   if ( ! tmp.isEmpty() ) {
      ol.writeCodeLink(ref, file, anchor, tmp, tooltip);
   }
}

static void codifyLines(const QString &text)
{
   const QString tmp_currentFontClass = s_currentFontClass;

   QString tmp;

   for (auto c : text) {

      if (c == '\n') {
         s_yyLineNr++;

         s_code->codify(tmp);
         endCodeLine();

         if (s_yyLineNr < s_inputLines) {
            startCodeLine();
         }

         if (! tmp_currentFontClass.isEmpty()) {
            startFontClass(tmp_currentFontClass);
         }

         tmp = "";

      } else {
         tmp += c;

      }
   }

   if (! tmp.isEmpty() )  {
      s_code->codify(tmp);
   }
}

static bool getLinkInScope(const QString &c, const QString &m,  const QString &memberText,
                           CodeGenerator &ol, const QString &text )
{
   QSharedPointer<MemberDef>    md;
   QSharedPointer<ClassDef>     cd;
   QSharedPointer<FileDef>      fd;
   QSharedPointer<NamespaceDef> nd;
   QSharedPointer<GroupDef>     gd;

   if (getDefs(c, m, "()", md, cd, fd, nd, gd, false, s_sourceFileDef) && md->isLinkable()) {

      QSharedPointer<Definition> d;

      if (md->getOuterScope() == Doxy_Globals::globalScope) {
         d = md->getBodyDef() ;
      } else {
         d = md->getOuterScope();
      }

      if (md->getGroupDef()) {
         d = md->getGroupDef();
      }

      if (d && d->isLinkable()) {
         s_theCallContext.setClass(stripClassName(md->typeString(), md->getOuterScope()));

         if (s_currentDefinition && s_currentMemberDef && md != s_currentMemberDef && s_collectXRefs) {
            addDocCrossReference(s_currentMemberDef, md);
         }

         writeMultiLineCodeLink(ol, md, ! text.isEmpty() ? text : memberText);
         addToSearchIndex(! text.isEmpty() ? text : memberText);

         return true;
      }
   }

   return false;
}

static bool getLink(const QString &className, const QString &memberName, CodeGenerator &ol,
                  const QString &text = QString())
{
   QString m = removeRedundantWhiteSpace(memberName);
   QString c = className;

   if (! getLinkInScope(c, m, memberName, ol, text)) {
      if (! s_curClassName.isEmpty()) {

         if (! c.isEmpty()) {
            c.prepend("::");
         }

         c.prepend(s_curClassName);
         return getLinkInScope(c, m, memberName, ol, text);
      }
      return false;
   }
   return true;
}

/*
  For a given string in the source code,
  finds its class or global id and links to it.
*/
static void generateClassOrGlobalLink(CodeGenerator &ol, const QString &clName, bool typeOnly = false)
{
   QString className = clName;

   // do not do anything for empty text
   if (className.isEmpty()) {
      return;
   }

   DBG_CTX(stderr, "generateClassOrGlobalLink(className=%s)\n", csPrintable(className) );

   QSharedPointer<ClassDef> cd;
   QSharedPointer<ClassDef> lcd;

   // Member def that we may find
   QSharedPointer<MemberDef> md;

   if ((lcd = s_theVarContext.findVariable(className)) == 0) { // not a local variable
      QSharedPointer<Definition> d = s_currentDefinition;

      QString scope = substitute(className, ".", "::");

      cd = getResolvedClass(d, s_sourceFileDef, substitute(className, ".", "::"), &md);

      DBG_CTX(stderr, "d=%s s_sourceFileDef=%s\n", d ? csPrintable(d->displayName()) : "<null>",
               s_currentDefinition ? csPrintable(s_currentDefinition->displayName()) : "<null>");

      DBG_CTX(stderr, "is found as a type %s\n", cd ? csPrintable(cd->name()) : "<null>");

      if (cd == 0 && md == 0) {
         // also see if it is variable or enum or enum value
         QSharedPointer<NamespaceDef> nd = getResolvedNamespace(scope);

         if (nd) {
            writeMultiLineCodeLink(ol, nd, clName);
            addToSearchIndex(className);
            return;

         } else if (getLink(s_classScope, clName, ol, clName)) {
            return;
         }
      }

   } else {
      if (lcd != PyVariableContext::dummyContext()) {
         s_theCallContext.setClass(lcd);
      }

      DBG_CTX(stderr, "is a local variable cd=%p\n", cd.data());
   }

   if (cd && cd->isLinkable()) { // is it a linkable class
      writeMultiLineCodeLink(ol, cd, clName);
      addToSearchIndex(className);

      if (md) {
         QSharedPointer<Definition> d;

         if (md->getOuterScope() == Doxy_Globals::globalScope) {
            d = md->getBodyDef();
         } else {
            d = md->getOuterScope();
         }

         if (md->getGroupDef()) {
            d = md->getGroupDef();
         }

         if (d && d->isLinkable() && md->isLinkable() && s_currentMemberDef && s_collectXRefs) {
            addDocCrossReference(s_currentMemberDef, md);
         }
      }

   } else { // not a class, maybe a global member
      int scopeEnd = className.lastIndexOf(".");

      if (scopeEnd != -1 && !typeOnly) { // name with explicit scope
         QString scope = substitute(className.left(scopeEnd), ".", "::");
         QString locName = className.right(className.length() - scopeEnd - 1);

         QSharedPointer<ClassDef> mcd = getClass(scope);

         DBG_CTX(stderr, "scope=%s locName=%s mcd=%p\n", csPrintable(scope), csPrintable(locName), mcd.data());

         if (mcd) {
            QSharedPointer<MemberDef> itemMd = mcd->getMemberByName(locName);

            if (itemMd != nullptr) {
               s_theCallContext.setClass(stripClassName(itemMd->typeString(), itemMd->getOuterScope()) );
               writeMultiLineCodeLink(ol, itemMd, clName);
               addToSearchIndex(className);

               QSharedPointer<Definition> d;

               if (itemMd->getOuterScope() == Doxy_Globals::globalScope) {
                  d = itemMd->getBodyDef();
               } else {
                  d = itemMd->getOuterScope();
               }

               if (itemMd->getGroupDef()) {
                  d = itemMd->getGroupDef();
               }

               if (d && d->isLinkable() && itemMd->isLinkable() && s_currentMemberDef && s_collectXRefs) {
                  addDocCrossReference(s_currentMemberDef, itemMd);
               }

               return;
            }

         } else {
            // check namespace as well
            QSharedPointer<NamespaceDef> mnd = getResolvedNamespace(scope);

            if (mnd) {
               QSharedPointer<MemberDef> itemMd = mnd->getMemberByName(locName);

               if (itemMd != nullptr) {
                  s_theCallContext.setClass(stripClassName(itemMd->typeString(), itemMd->getOuterScope()) );
                  writeMultiLineCodeLink(ol, itemMd, clName);
                  addToSearchIndex(className);

                  QSharedPointer<Definition> d;

                  if (itemMd->getOuterScope() == Doxy_Globals::globalScope) {
                     d = itemMd->getBodyDef();

                  } else {
                     d = itemMd->getOuterScope();

                  }

                  if (itemMd->getGroupDef()) {
                     d = itemMd->getGroupDef();
                  }

                  if (d && d->isLinkable() && itemMd->isLinkable() && s_currentMemberDef && s_collectXRefs) {
                     addDocCrossReference(s_currentMemberDef, itemMd);
                  }

                  return;
               }
            }
         }
      }

      // nothing found, just write out the word
      codifyLines(clName);
      addToSearchIndex(clName);
   }
}

// seems to work for file members, but scopes are not being correctly tracked for classes
static void generateFunctionLink(CodeGenerator &ol, const QString &funcName)
{
   QSharedPointer<ClassDef> ccd;

   QString locScope = s_classScope;
   QString locFunc = removeRedundantWhiteSpace(funcName);

   DBG_CTX(stdout, "*** locScope=%s locFunc=%s\n", csPrintable(locScope), csPrintable(locFunc));
   int i = locFunc.lastIndexOf("::");

   if (i > 0) {
      locScope = locFunc.left(i);
      locFunc  = locFunc.right(locFunc.length() - i - 2).trimmed();
   }

   if (! locScope.isEmpty() && (ccd = s_codeClassSDict[locScope])) {

      if (ccd->baseClasses()) {
         for (auto item : *ccd->baseClasses() ) {
            if (getLink(item->classDef->name(), locFunc, ol, funcName)) {
               return;
            }
         }
      }
   }

   if (! getLink(locScope, locFunc, ol, funcName)) {
      generateClassOrGlobalLink(ol, funcName);
   }
   return;
}

static bool findMemberLink(CodeGenerator &ol, QSharedPointer<Definition> def, const QString &name)
{
   if (def->getOuterScope() && def->getOuterScope()->definitionType() == Definition::TypeClass &&
         s_currentDefinition->definitionType() == Definition::TypeClass) {

      QSharedPointer<ClassDef> cd     = def->getOuterScope().dynamicCast<ClassDef>();
      QSharedPointer<ClassDef> thisCd = s_currentDefinition.dynamicCast<ClassDef>();

      if (def->definitionType() == Definition::TypeMember) {
         if (s_currentMemberDef && s_collectXRefs) {
            addDocCrossReference(s_currentMemberDef, def.dynamicCast<MemberDef>());
         }
      }

      DBG_CTX(stderr, "cd=%s thisCd=%s\n", cd ? csPrintable(cd->name()) : "<none>",
                  thisCd ? csPrintable(thisCd->name()) : "<none>");

      // TODO: find the nearest base class in case cd is a base class of thisCd

      if (cd == thisCd || (thisCd && thisCd->isBaseClass(cd, true))) {
         writeMultiLineCodeLink(ol, def, name);
         return true;
      }
   }

   return false;
}

static void findMemberLink(CodeGenerator &ol, const QString &phrase)
{
   if (s_currentDefinition) {
      auto iter = Doxy_Globals::glossary().find(phrase);

      while (iter != Doxy_Globals::glossary().end() && iter.key() == phrase) {
         QSharedPointer<Definition> def = sharedFrom(iter.value());

         if (findMemberLink(ol, def, phrase)) {
            return;
         }

         ++iter;
      }
   }

   codify(phrase);
}

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
   int len = max_size;

   QString tmp1    = s_inputString.mid(s_inputPosition, max_size);
   QByteArray tmp2 = tmp1.toUtf8();

   while(len > 0 && tmp2.size() > len) {
     len = len / 2;

     tmp1.truncate(len);
     tmp2 = tmp1.toUtf8();
   };

   s_inputPosition += len;
   memcpy(buf, tmp2.constData(), tmp2.size());

   return tmp2.size();
}

#define YY_NO_UNISTD_H 1

#define INITIAL 0
#define Body 1
#define FunctionDec 2
#define FunctionParams 3
#define ClassDec 4
#define ClassInheritance 5
#define Suite 6
#define SuiteCaptureIndent 7
#define SuiteStart 8
#define SuiteMaintain 9
#define SuiteContinuing 10
#define LongString 11
#define SingleQuoteString 12
#define DoubleQuoteString 13
#define TripleString 14
#define DocBlock 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int code_py_YYlex_destroy (void );

int code_py_YYget_debug (void );

void code_py_YYset_debug (int debug_flag  );

YY_EXTRA_TYPE code_py_YYget_extra (void );

void code_py_YYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *code_py_YYget_in (void );

void code_py_YYset_in  (FILE * in_str  );

FILE *code_py_YYget_out (void );

void code_py_YYset_out  (FILE * out_str  );

int code_py_YYget_leng (void );

char *code_py_YYget_text (void );

int code_py_YYget_lineno (void );

void code_py_YYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int code_py_YYwrap (void );
#else
extern int code_py_YYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( code_py_YYtext, code_py_YYleng, 1, code_py_YYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( code_py_YYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( code_py_YYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, code_py_YYin))==0 && ferror(code_py_YYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(code_py_YYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int code_py_YYlex (void);

#define YY_DECL int code_py_YYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after code_py_YYtext and code_py_YYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)code_py_YYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in code_py_YYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! code_py_YYin )
			code_py_YYin = stdin;

		if ( ! code_py_YYout )
			code_py_YYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			code_py_YYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				code_py_YY_create_buffer(code_py_YYin,YY_BUF_SIZE );
		}

		code_py_YY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of code_py_YYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 589 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 588 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keyword");
      codify(text);
      endFontClass();
      BEGIN( FunctionDec );
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
     QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keyword");
      codify(text);
      endFontClass();
      BEGIN( ClassDec );
      }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keywordtype");
      codify(text);
      endFontClass();
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify("self.");
		findMemberLink(*s_code, text.mid(5));
   }
	YY_BREAK
case 5:
*yy_cp = (yy_hold_char); /* undo effects of setting up code_py_YYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up code_py_YYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify("self.");
      findMemberLink(*s_code, text.mid(5));
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify("self.");
		findMemberLink(*s_code, text.mid(5));
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify("self.");
      findMemberLink(*s_code, text.mid(5));
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
		codify("cls.");
	   findMemberLink(*s_code, text.mid(4));
   }
	YY_BREAK
case 9:
*yy_cp = (yy_hold_char); /* undo effects of setting up code_py_YYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up code_py_YYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify("cls.");
      findMemberLink(*s_code, text.mid(4));
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
		codify("cls.");
	   findMemberLink(*s_code, text.mid(4));
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify("cls.");
      findMemberLink(*s_code, text.mid(4));
    }
	YY_BREAK

case 12:
YY_RULE_SETUP
{
   QString text = QString::fromUtf8(code_py_YYtext);
   generateClassOrGlobalLink(*s_code, text);

   s_curClassName = text;
   s_curClassBases.clear();
   BEGIN( ClassInheritance );
}
	YY_BREAK

case 13:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      // The parser is assuming that ALL identifiers in this state are base classes;
      // it does not check to see that the first parenthesis has been seen.
      // it should probably be more strict about what to accept.

      QString text = QString::fromUtf8(code_py_YYtext);
      s_curClassBases.append(text);

      generateClassOrGlobalLink(*s_code, text);
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);

      // Assume this will be a one-line suite;
      // found counter-example in SuiteStart.

      // Push a class scope
      QSharedPointer<ClassDef> classDefToAdd = QMakeShared<ClassDef> ("<code>", 1, 1, s_curClassName,
                  CompoundType::Class, "", "", false);

      s_codeClassSDict.insert(s_curClassName, classDefToAdd);

      for (auto str : s_curClassBases) {

         QSharedPointer<ClassDef> baseDefToAdd;
         baseDefToAdd = s_codeClassSDict[str];

         // Try to find class in global scope

         if (baseDefToAdd == 0) {
            baseDefToAdd = getResolvedClass(s_currentDefinition, s_sourceFileDef, str);
         }

         if (baseDefToAdd && baseDefToAdd != classDefToAdd) {
            classDefToAdd->insertBaseClass(baseDefToAdd, str, Protection::Public, Specifier::Normal);
         }
      }

      // Reset class-parsing variables.
      s_curClassName.resize(0);
      s_curClassBases.clear();

      s_noSuiteFound = true;
      BEGIN( SuiteStart );
   }
	YY_BREAK

case 16:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      generateFunctionLink(*s_code, text);
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
      BEGIN( FunctionParams );
   }
	YY_BREAK

case 18:
YY_RULE_SETUP
{
      // Parses delimiters
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
	   codifyLines(text);
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);

      // assume this will be a one-line suite
      // found counter-example in SuiteStart.

      s_noSuiteFound = true;
      BEGIN( SuiteStart );
   }
	YY_BREAK

case 23:
YY_RULE_SETUP
{
      // Position-sensitive rules, must come AFTER keyword-triggered rules
      // Must come BEFORE identifier NONEMPTY-like rules to syntax highlight.

      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keyword");
      codify(text);
      endFontClass();
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keywordflow");
      codify(text);
      endFontClass();
                               }
	YY_BREAK
case 25:
*yy_cp = (yy_hold_char); /* undo effects of setting up code_py_YYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up code_py_YYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      generateClassOrGlobalLink(*s_code, text);
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      generateClassOrGlobalLink(*s_code, text, true);
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK

case 28:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keyword");
      codifyLines(text);
      endFontClass();
      BEGIN(Body);
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keyword");
      codifyLines(text);
      endFontClass();

      // no indentation necessary
      s_noSuiteFound = false;
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keywordflow");
      codifyLines(text);
      endFontClass();

      // no indentation necessary
      s_noSuiteFound = false;
   }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      if (YY_START == SingleQuoteString || YY_START == DoubleQuoteString || YY_START == TripleString) {
         REJECT;
      }

      yy_push_state(YY_START);
      BEGIN(DocBlock);
      s_docBlock = text;
   }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);

      if ( s_noSuiteFound ) {
         BEGIN ( SuiteCaptureIndent );
      }
   }
	YY_BREAK

case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
      // Blankline - ignore, keep looking for indentation
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      // This state lasts momentarily, to check the indentation
      // level that is about to be used
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);

      s_indents.push(code_py_YYleng);
      BEGIN( Suite );
   }
	YY_BREAK

case 37:
YY_RULE_SETUP
{
      // This implements poor indentation-tracking should be improved.
      // (translate tabs to space, etc)
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
      adjustScopesAndSuites(code_py_YYleng);
   }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{
      // If this ever succeeds, it means that this is a blank line, and
      // can be ignored.
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      // Default rule; matches yhe empty string, assuming real text starts here.
      // Just go straight to Body
      adjustScopesAndSuites(0);
   }
	YY_BREAK

case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
      BEGIN( SuiteMaintain );
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK

/*
      // Single quoted string like 'That\'s a """nice""" string!'
   */
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{
      // line continuation
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      // escaped char
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      // triple double quotes
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      // end of the string
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
      endFontClass();

      BEGIN(s_stringContext);
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      // normal chars
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      // normal char
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK

/*
      // Double quoted string like "That's \"a '''nice'''\" string!"
   */
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{
      // line continuation
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // escpaced char
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 51:
YY_RULE_SETUP
{
      // triple single quotes
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      // end of the string
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
      endFontClass();

      BEGIN( s_stringContext );
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      // normal chars
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // normal char
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK

case 55:
case 56:
YY_RULE_SETUP
{

      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);

      if (s_doubleQuote == (text[0] == '"')) {
         endFontClass();
         BEGIN(s_stringContext);
      }
    }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK

/*
<*>({NONEMPTY}|{EXPCHAR}|{BB})           {
      // This should go one character at a time.
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);

      //endFontClass();
      BEGIN(Body);
   }
  */
case 60:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);

      if (YY_START == SingleQuoteString) {
         REJECT;
      }

		startFontClass("stringliteral");
		s_stringContext = YY_START;
		s_doubleQuote   = text[code_py_YYleng-1] == '"';
      codify(text);

		BEGIN(TripleString);
   }
	YY_BREAK
case 61:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);

      if (YY_START == DoubleQuoteString) {
         REJECT;
      }

      startFontClass("stringliteral");
      s_stringContext = YY_START;
      s_doubleQuote   = text[code_py_YYleng-1] == '"';
      codify(text);

      BEGIN(TripleString);
   }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
      // single quoted string
      QString text = QString::fromUtf8(code_py_YYtext);

      if (YY_START == SingleQuoteString || YY_START == DoubleQuoteString || YY_START == TripleString) {
         REJECT;
      }

      startFontClass("stringliteral");
      s_stringContext = YY_START;
      codify(text);

      BEGIN(SingleQuoteString);
   }
	YY_BREAK
case 63:
YY_RULE_SETUP
{
      // double quoted string
      QString text = QString::fromUtf8(code_py_YYtext);

      if (YY_START == SingleQuoteString || YY_START == DoubleQuoteString || YY_START == TripleString) {
         REJECT;
      }

      startFontClass("stringliteral");
      s_stringContext = YY_START;
      codify(text);

      BEGIN(DoubleQuoteString);
   }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
      // contents of current comment line
      QString text = QString::fromUtf8(code_py_YYtext);
      s_docBlock += text;
   }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{
      // comment block (next line is also comment line)
      QString text = QString::fromUtf8(code_py_YYtext);
      s_docBlock += text;
   }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{
      // comment block ends at the end of this line
      // remove special comment (default config)

      static const bool stripCodeComments = Config::getBool("strip-code-comments");

      if (stripCodeComments)  {
         s_yyLineNr   += s_docBlock.count('\n');
         s_endComment = true;

      } else  {
         // do not remove comment

         startFontClass("comment");
         codifyLines(s_docBlock);
         endFontClass();
      }

      unput(*code_py_YYtext);
      yy_pop_state();
   }
	YY_BREAK
case 67:
YY_RULE_SETUP
{
      if (YY_START == SingleQuoteString || YY_START == DoubleQuoteString || YY_START == TripleString) {
         REJECT;
      }

      QString text = QString::fromUtf8(code_py_YYtext);
      yy_push_state(YY_START);

      BEGIN(DocBlock);
      s_docBlock = text;
   }
	YY_BREAK
case 68:
YY_RULE_SETUP
{
      // normal comment
      if (YY_START == SingleQuoteString || YY_START == DoubleQuoteString || YY_START == TripleString) {
         REJECT;
      }

      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("comment");

      codifyLines(text);
      endFontClass();
   }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{
      if (s_endComment) {
         s_endComment = false;
      } else {
         QString text = QString::fromUtf8(code_py_YYtext);
         codifyLines(text);
      }

      BEGIN(Body);
   }
	YY_BREAK
case 70:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
      BEGIN(Body);
   }
	YY_BREAK
case 71:
YY_RULE_SETUP
{
      // utf-8 code point
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
      BEGIN(Body);
   }
	YY_BREAK
case 72:
YY_RULE_SETUP
{
      // catch all
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
      BEGIN(Body);
   }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Body):
case YY_STATE_EOF(FunctionDec):
case YY_STATE_EOF(FunctionParams):
case YY_STATE_EOF(ClassDec):
case YY_STATE_EOF(ClassInheritance):
case YY_STATE_EOF(Suite):
case YY_STATE_EOF(SuiteCaptureIndent):
case YY_STATE_EOF(SuiteStart):
case YY_STATE_EOF(SuiteMaintain):
case YY_STATE_EOF(SuiteContinuing):
case YY_STATE_EOF(LongString):
case YY_STATE_EOF(SingleQuoteString):
case YY_STATE_EOF(DoubleQuoteString):
case YY_STATE_EOF(TripleString):
case YY_STATE_EOF(DocBlock):
{
      static const bool stripCodeComments = Config::getBool("strip-code-comments");

      if (YY_START == DocBlock) {

         if (! stripCodeComments)  {
            startFontClass("comment");
            codifyLines(s_docBlock);
            endFontClass();
         }
       }

       yyterminate();
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed code_py_YYin at a new source and called
			 * code_py_YYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = code_py_YYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( code_py_YYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * code_py_YYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of code_py_YYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			code_py_YYrestart(code_py_YYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) code_py_YYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 589 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 589 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 588);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up code_py_YYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					code_py_YYrestart(code_py_YYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( code_py_YYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve code_py_YYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void code_py_YYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        code_py_YYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            code_py_YY_create_buffer(code_py_YYin,YY_BUF_SIZE );
	}

	code_py_YY_init_buffer(YY_CURRENT_BUFFER,input_file );
	code_py_YY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void code_py_YY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		code_py_YYpop_buffer_state();
	 *		code_py_YYpush_buffer_state(new_buffer);
     */
	code_py_YYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	code_py_YY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (code_py_YYwrap()) processing, but the only time this flag
	 * is looked at is after code_py_YYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void code_py_YY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	code_py_YYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE code_py_YY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) code_py_YYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in code_py_YY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) code_py_YYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in code_py_YY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	code_py_YY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with code_py_YY_create_buffer()
 * 
 */
    void code_py_YY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		code_py_YYfree((void *) b->yy_ch_buf  );

	code_py_YYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a code_py_YYrestart() or at EOF.
 */
    static void code_py_YY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	code_py_YY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then code_py_YY_init_buffer was _probably_
     * called from code_py_YYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void code_py_YY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		code_py_YY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void code_py_YYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	code_py_YYensure_buffer_stack();

	/* This block is copied from code_py_YY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from code_py_YY_switch_to_buffer. */
	code_py_YY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void code_py_YYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	code_py_YY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		code_py_YY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void code_py_YYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)code_py_YYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in code_py_YYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)code_py_YYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in code_py_YYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE code_py_YY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) code_py_YYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in code_py_YY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	code_py_YY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to code_py_YYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       code_py_YY_scan_bytes() instead.
 */
YY_BUFFER_STATE code_py_YY_scan_string (yyconst char * yystr )
{
    
	return code_py_YY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to code_py_YYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE code_py_YY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) code_py_YYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in code_py_YY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = code_py_YY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in code_py_YY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) code_py_YYalloc(new_size  );

		else
			(yy_start_stack) = (int *) code_py_YYrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up code_py_YYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		code_py_YYtext[code_py_YYleng] = (yy_hold_char); \
		(yy_c_buf_p) = code_py_YYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		code_py_YYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int code_py_YYget_lineno  (void)
{
        
    return code_py_YYlineno;
}

/** Get the input stream.
 * 
 */
FILE *code_py_YYget_in  (void)
{
        return code_py_YYin;
}

/** Get the output stream.
 * 
 */
FILE *code_py_YYget_out  (void)
{
        return code_py_YYout;
}

/** Get the length of the current token.
 * 
 */
int code_py_YYget_leng  (void)
{
        return code_py_YYleng;
}

/** Get the current token.
 * 
 */

char *code_py_YYget_text  (void)
{
        return code_py_YYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void code_py_YYset_lineno (int  line_number )
{
    
    code_py_YYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see code_py_YY_switch_to_buffer
 */
void code_py_YYset_in (FILE *  in_str )
{
        code_py_YYin = in_str ;
}

void code_py_YYset_out (FILE *  out_str )
{
        code_py_YYout = out_str ;
}

int code_py_YYget_debug  (void)
{
        return code_py_YY_flex_debug;
}

void code_py_YYset_debug (int  bdebug )
{
        code_py_YY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from code_py_YYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    code_py_YYin = stdin;
    code_py_YYout = stdout;
#else
    code_py_YYin = (FILE *) 0;
    code_py_YYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * code_py_YYlex_init()
     */
    return 0;
}

/* code_py_YYlex_destroy is for both reentrant and non-reentrant scanners. */
int code_py_YYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		code_py_YY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		code_py_YYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	code_py_YYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        code_py_YYfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    code_py_YYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * code_py_YYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *code_py_YYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *code_py_YYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void code_py_YYfree (void * ptr )
{
	free( (char *) ptr );	/* see code_py_YYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

void resetPythonCodeParserState()
{
   s_currentDefinition = QSharedPointer<Definition>();
   s_currentMemberDef  = QSharedPointer<MemberDef>();

   s_doubleStringIsDoc = false;
   s_paramParens = 0;
   s_indents.clear();
   BEGIN( Body );
}

/*
  Examines current stack of white-space indentations;
  re-syncs the parser with the correct scope.
*/
static void adjustScopesAndSuites(unsigned indentLength)
{
   // States to pop
   if (!s_indents.isEmpty() && indentLength < s_indents.top()) {

      while (! s_indents.isEmpty() && indentLength < s_indents.top()) {
         // pop the old suite's indentation
         s_indents.pop();

         s_currentMemberDef = QSharedPointer<MemberDef>();

         if (s_currentDefinition) {
            s_currentDefinition = s_currentDefinition->getOuterScope();
         }
      }
   }

   // Are there any remaining indentation levels for suites?
   if (! s_indents.isEmpty()) {
    BEGIN( Suite );

   } else {
    BEGIN( Body );
   }
}

void parsePythonCode(CodeGenerator &od, const QString &, const QString &s, bool exBlock, const QString &exName,
                     QSharedPointer<FileDef> fd, int startLine, int endLine, bool inlineFragment,
                     QSharedPointer<MemberDef> , bool, QSharedPointer<Definition> searchCtx, bool collectXRefs)
{
   if (s.isEmpty()) {
      return;
   }

   printlex(code_py_YY_flex_debug, true, __FILE__, fd ? fd->fileName() : "" );

   TooltipManager::instance()->clearTooltips();
   s_code             = &od;
   s_inputString      = s;
   s_inputPosition    = 0;
   s_currentFontClass = "";
   s_needsTermination = false;
   s_searchCtx        = searchCtx;
   s_collectXRefs     = collectXRefs;

   if (startLine != -1) {
      s_yyLineNr    = startLine;
   } else {
      s_yyLineNr    = 1;
   }

   if (endLine != -1) {
      s_inputLines  = endLine + 1;
   } else {
      s_inputLines  = s_yyLineNr + countLines() - 1;
   }

   s_exampleBlock  = exBlock;
   s_exampleName   = exName;
   s_sourceFileDef = fd;

   s_includeCodeFragment = inlineFragment;

   bool cleanupSourceDef = false;

   if (exBlock && fd == nullptr) {
      // create a dummy filedef for the example
      s_sourceFileDef  = QMakeShared<FileDef>("", (! exName.isEmpty() ? exName : "generated"));
      cleanupSourceDef = true;
   }

   if (s_sourceFileDef) {
      setCurrentDoc("l00001");
   }

   // Starts line 1 on the output
   startCodeLine();

   code_py_YYrestart(code_py_YYin );
   code_py_YYlex();

   if (s_needsTermination) {
      endCodeLine();
   }

   if (fd != nullptr) {
      TooltipManager::instance()->writeTooltips(*s_code);
   }

   if (cleanupSourceDef) {
      // clear the temporary file definition used for this example
      s_sourceFileDef = QSharedPointer<FileDef>();
   }

   printlex(code_py_YY_flex_debug, false, __FILE__, fd ? fd->fileName() : "" );
}

