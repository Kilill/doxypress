/*************************************************************************
 *
 * Copyright (C) 2014-2017 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License version 2
 * is hereby granted. No representations are made about the suitability of
 * this software for any purpose. It is provided "as is" without express or
 * implied warranty. See the GNU General Public License for more details.
 *
 * Documents produced by DoxyPress are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer code_py_YY_create_buffer
#define yy_delete_buffer code_py_YY_delete_buffer
#define yy_flex_debug code_py_YY_flex_debug
#define yy_init_buffer code_py_YY_init_buffer
#define yy_flush_buffer code_py_YY_flush_buffer
#define yy_load_buffer_state code_py_YY_load_buffer_state
#define yy_switch_to_buffer code_py_YY_switch_to_buffer
#define yyin code_py_YYin
#define yyleng code_py_YYleng
#define yylex code_py_YYlex
#define yylineno code_py_YYlineno
#define yyout code_py_YYout
#define yyrestart code_py_YYrestart
#define yytext code_py_YYtext
#define yywrap code_py_YYwrap
#define yyalloc code_py_YYalloc
#define yyrealloc code_py_YYrealloc
#define yyfree code_py_YYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE code_py_YYrestart(code_py_YYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int code_py_YYleng;

extern FILE *code_py_YYin, *code_py_YYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up code_py_YYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up code_py_YYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via code_py_YYrestart()), so that the user can continue scanning by
	 * just pointing code_py_YYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when code_py_YYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int code_py_YYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow code_py_YYwrap()'s to do buffer switches
 * instead of setting up a fresh code_py_YYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void code_py_YYrestart (FILE *input_file  );
void code_py_YY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE code_py_YY_create_buffer (FILE *file,int size  );
void code_py_YY_delete_buffer (YY_BUFFER_STATE b  );
void code_py_YY_flush_buffer (YY_BUFFER_STATE b  );
void code_py_YYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void code_py_YYpop_buffer_state (void );

static void code_py_YYensure_buffer_stack (void );
static void code_py_YY_load_buffer_state (void );
static void code_py_YY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER code_py_YY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE code_py_YY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE code_py_YY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE code_py_YY_scan_bytes (yyconst char *bytes,int len  );

void *code_py_YYalloc (yy_size_t  );
void *code_py_YYrealloc (void *,yy_size_t  );
void code_py_YYfree (void *  );

#define yy_new_buffer code_py_YY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        code_py_YYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            code_py_YY_create_buffer(code_py_YYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        code_py_YYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            code_py_YY_create_buffer(code_py_YYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define code_py_YYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *code_py_YYin = (FILE *) 0, *code_py_YYout = (FILE *) 0;

typedef int yy_state_type;

extern int code_py_YYlineno;

int code_py_YYlineno = 1;

extern char *code_py_YYtext;
#define yytext_ptr code_py_YYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up code_py_YYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	code_py_YYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 72
#define YY_END_OF_BUFFER 73
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1124] =
    {   0,
    16423,16423,   64,   64,   73,   71,   72,   70,   71,   72,
       69,   72,   63,   71,   72,   68,   71,   72,   62,   71,
       72,   71,   72,   71,   72,   71,   72,   42,   69,   72,
       27,   41,   71,   72,   27,   41,   71,   72,   27,   41,
       71,   72,   27,   41,   71,   72,   27,   41,   71,   72,
       27,   41,   71,   72,   27,   41,   71,   72,   27,   41,
       71,   72,   27,   41,   71,   72,   27,   41,   71,   72,
       27,   41,   71,   72,   27,   41,   71,   72,   27,   41,
       71,   72,   27,   41,   71,   72,   27,   41,   71,   72,
       27,   41,   71,   72,   27,   41,   71,   72,   27,   41,

       71,   72,   27,   41,   71,   72,   27,   41,   71,   72,
       27,   41,   71,   72,   27,   41,   71,   72,   27,   41,
       71,   72,   27,   41,   71,   72,   70,   71,   72,   17,
       71,   72,   16,   71,   72,   16,   71,   72,   16,   71,
       72,   16,   71,   72,   19,   71,   72,   18,   70,   71,
       72,   21,   69,   72,   19,   63,   71,   72,   19,   68,
       71,   72,   19,   62,   71,   72,   20,   71,   72,   18,
       19,   71,   72,   22,   71,   72,   19,   71,   72,   19,
       71,   72,   19,   71,   72,   19,   71,   72,   12,   71,
       72,   12,   71,   72,   12,   71,   72,   12,   71,   72,

       13,   70,   71,   72,   13,   71,   72,   15,   71,   72,
       14,   71,   72,   14,   71,   72,   14,   71,   72,   14,
       71,   72,   40,   69,   72,   27,   71,   72,   27,   71,
       72,   27,   71,   72,   27,   71,   72,   27,   71,   72,
       27,   71,   72,   27,   71,   72,   27,   71,   72,   27,
       71,   72,   27,   71,   72,   27,   71,   72,   27,   71,
       72,   27,   71,   72,   27,   71,   72,   27,   71,   72,
       27,   71,   72,   27,   71,   72,   27,   71,   72,   27,
       71,   72,   27,   71,   72,   27,   71,   72,   27,   71,
       72,   27,   71,   72,   27,   71,   72,   36,   70,   71,

       72,   35,   69,   72,   28,   70,   71,   72,   34,   69,
       72,   68,   71,   72,   32,   71,   72,   32,   71,   72,
       32,   71,   72,   32,   71,   72,   32,   71,   72,   32,
       71,   72,   32,   71,   72,   32,   71,   72,   32,   71,
       72,   32,   71,   72,   32,   71,   72,   32,   71,   72,
       32,   71,   72,   32,   71,   72,   32,   71,   72,   32,
       71,   72,   32,   71,   72,   32,   71,   72,   32,   71,
       72,   32,   71,   72,   32,   71,   72,   32,   71,   72,
       70,   71,   72,16421,   38,   69,   72, 8231,   71,   72,
     8231,   68,   71,   72, 8231,   71,   72, 8231,   71,   72,

     8231,   71,   72,   47,   48,   71,   72,   47,   48,   70,
       71,   72,   48,   63,   71,   72,   47,   48,   68,   71,
       72,   46,   48,   62,   71,   72,   47,   48,   71,   72,
       47,   48,   71,   72,   48,   71,   72,   47,   48,   71,
       72,   53,   54,   71,   72,   53,   54,   70,   71,   72,
       52,   54,   63,   71,   72,   53,   54,   68,   71,   72,
       54,   62,   71,   72,   53,   54,   71,   72,   53,   54,
       71,   72,   54,   71,   72,   53,   54,   71,   72,   57,
       59,   71,   72,   57,   59,   70,   71,   72,   57,   58,
       69,   72,   57,   59,   63,   71,   72,   57,   59,   68,

       71,   72,   57,   59,   62,   71,   72,   57,   59,   71,
       72,   57,   59,   71,   72,   59,   71,   72,   57,   59,
       71,   72,   64,   71,   72,   64,   70,   71,   72,   66,
       69,   72,   63,   64,   71,   72,   64,   68,   71,   72,
       62,   64,   71,   72,   64,   71,   72,   64,   71,   72,
       64,   71,   72,   71,   70,   68,   67,   68,   68,   71,
       63,   62,   25,   27,   41,   27,   41,   71,   27,   41,
       27,   41,   27,   41,   27,   41,   27,   41,   23,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   27,

       41,   24,   27,   41,   27,   41,   24,   27,   41,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   70,
       17,   16,   16,   71,   16,   19,   19,   71,   18,   70,
       19,   19,   68,   19,   67,   68,   19,   68,   71,   19,
       19,   19,   71,   19,   63,   19,   62,   19,   12,   12,
       71,   12,   13,   70,   14,   14,   71,   14,   27,   27,
       71,   27,   27,   27,   27,   27,   23,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   24,   27,
       27,   24,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   36,   70,   35,   28,   70,   33,   67,
       68,   32,   32,   71,   32,   32,   32,   32,   30,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       31,   32,   32,   31,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   70,16421,   38, 8229, 8229,   71,
       47,   47,   71,   47,   70,   47,   68,   47,   67,   68,
       47,   68,   71,   63,   47,   44,   44,   43,   44,   71,
       53,   53,   71,   53,   70,   53,   68,   53,   67,   68,
       53,   68,   71,   62,   53,   50,   50,   49,   50,   71,
       57,   57,   71,   57,   70,   57,   57,   68,   57,   67,

       68,   68,   57,   68,   71,   57,   57,   64,   64,   71,
       64,   70,   65,   64,   64,   68,   64,   67,   68,   64,
       68,   71,   64,   63,   64,   62,   64,   64,   61,   67,
       68,   60,   26,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   23,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,
       27,   41,   19,   61,   19,   67,   68,   19,   60,   14,
       27,   27,   27,   27,   27,   27,   27,   27,   23,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   32,   32,   32,   32,   32,
       32,   30,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   45,   61,   47,
       67,   68,   53,   67,   68,   51,   60,   55,   61,   57,
       67,   68,   67,   68,   56,   60,   61,   64,   64,   67,
       68,   60,   64,   26,   27,   41,    3,   27,   41,   23,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,
        1,   27,   41,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   27,

       41,   27,   41,   27,    3,   27,   23,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   29,   31,   32,   32,   32,   32,   32,
       32,   27,   41,   23,   27,   41,   11,   26,16392,16394,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,
       27,   41,   27,   41,   27,   23,   27,   27,   27,   27,
       27,   27,   27,   27,   32,   32,   32,   32,   32,   32,
       32,   32,    2,    9,   25,   11,   26,16392,16394,   27,
       41,   27,   41,    7,   26,16388,16390,   27,   27,   32,

       32, 8202,   26,   27,   41,    5,   25,    7,   26,16388,
    16390,   27,   32, 8200,   25, 8202,   26, 8198,   26, 8196,
       25, 8198,   26
    } ;

static yyconst flex_int16_t yy_accept[581] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    6,    8,   11,   13,   16,   19,   22,
       24,   26,   28,   31,   35,   39,   43,   47,   51,   55,
       59,   63,   67,   71,   75,   79,   83,   87,   91,   95,
       99,  103,  107,  111,  115,  119,  123,  127,  130,  133,
      136,  139,  142,  145,  148,  152,  155,  159,  163,  167,
      170,  174,  177,  180,  183,  186,  189,  192,  195,  198,
      201,  205,  208,  211,  214,  217,  220,  223,  226,  229,

      232,  235,  238,  241,  244,  247,  250,  253,  256,  259,
      262,  265,  268,  271,  274,  277,  280,  283,  286,  289,
      292,  295,  298,  302,  305,  309,  312,  315,  318,  321,
      324,  327,  330,  333,  336,  339,  342,  345,  348,  351,
      354,  357,  360,  363,  366,  369,  372,  375,  378,  381,
      385,  388,  391,  395,  398,  401,  404,  408,  413,  417,
      422,  427,  431,  435,  438,  442,  446,  451,  456,  461,
      465,  469,  473,  476,  480,  484,  489,  493,  498,  503,
      508,  512,  516,  519,  523,  526,  530,  533,  537,  541,
      545,  548,  551,  554,  555,  556,  556,  557,  559,  561,

      561,  562,  563,  563,  564,  564,  566,  569,  571,  573,
      575,  577,  579,  582,  584,  586,  588,  590,  592,  594,
      596,  598,  600,  602,  605,  607,  610,  612,  614,  616,
      618,  620,  622,  624,  626,  628,  630,  631,  632,  633,
      635,  636,  637,  639,  641,  642,  644,  647,  650,  651,
      652,  654,  656,  658,  659,  660,  662,  663,  665,  665,
      666,  668,  669,  670,  672,  673,  674,  675,  676,  677,
      679,  680,  681,  682,  683,  684,  685,  686,  687,  688,
      689,  691,  692,  694,  695,  696,  697,  698,  699,  700,
      701,  702,  703,  704,  706,  707,  709,  712,  713,  715,

      716,  717,  718,  719,  721,  722,  723,  724,  725,  726,
      727,  728,  729,  730,  731,  733,  734,  736,  737,  738,
      739,  740,  741,  742,  743,  744,  745,  747,  748,  749,
      751,  752,  754,  756,  756,  758,  761,  764,  765,  766,
      767,  768,  769,  771,  772,  774,  776,  778,  781,  784,
      784,  785,  786,  787,  788,  789,  791,  792,  792,  794,
      796,  797,  799,  802,  803,  806,  807,  808,  809,  811,
      813,  813,  814,  815,  817,  820,  823,  824,  826,  828,
      829,  830,  832,  833,  834,  836,  838,  840,  842,  844,
      846,  848,  850,  853,  855,  857,  859,  861,  863,  865,

      867,  869,  871,  873,  875,  877,  879,  881,  883,  885,
      888,  890,  891,  892,  893,  894,  895,  896,  897,  898,
      899,  901,  902,  903,  904,  905,  906,  907,  908,  909,
      910,  911,  912,  913,  914,  915,  916,  917,  918,  919,
      920,  921,  922,  924,  925,  926,  927,  928,  929,  930,
      931,  932,  933,  934,  935,  936,  937,  938,  940,  943,
      943,  946,  948,  948,  950,  953,  955,  957,  959,  962,
      964,  965,  967,  970,  973,  975,  977,  979,  979,  981,
      982,  984,  986,  988,  990,  992,  994,  996,  998, 1000,
     1002, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014,

     1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
     1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
     1037, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1051, 1053,
     1055, 1057, 1059, 1061, 1063, 1065, 1065, 1066, 1068, 1069,
     1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
     1080, 1081, 1082, 1083, 1084, 1086, 1086, 1090, 1092, 1094,
     1098, 1099, 1100, 1101, 1102, 1104, 1106, 1108, 1108, 1112,
     1113, 1114, 1116, 1116, 1118, 1120, 1122, 1122, 1124, 1124
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    4,    4,    7,    8,
        9,    4,    4,   10,    4,   11,    4,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    4,    4,
        4,    4,    1,    1,   14,   14,   14,   14,   14,   15,
       14,   14,   14,   14,   14,   14,   14,   16,   14,   14,
       14,   17,   14,   18,   19,   14,   14,   14,   14,   14,
        4,   20,    4,    1,   21,    4,   22,   23,   24,   25,

       26,   27,   28,   29,   30,   14,   31,   32,   33,   34,
       35,   36,   14,   37,   38,   39,   40,   14,   41,   42,
       43,   14,    4,    4,    4,    4,    1,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14
    } ;

static yyconst flex_int32_t yy_meta[45] =
    {   0,
        1,    2,    3,    4,    5,    4,    5,    6,    2,    4,
        7,    8,    2,    9,    9,    9,    9,    9,    9,   10,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_base[624] =
    {   0,
        0,   39,   79,    0,  123,    0,  167,    0,  211,    0,
      255,    0,  299,    0,    6,    8,  343,    0,  387,  427,
        0,    0,    0,    0,  466,  505,  544,  583,  622,  661,
      700,  739, 1991, 1946,   10, 1992,    8,    9,    7,   11,
       22,   26, 1992,   13,   27,  387,  392,  401,  775,  403,
      405,  443,  399,  447,  484,  449,  812,  454,  415,  486,
      494,  515,  409,  518,    0,  455,   17,   18, 1945, 1944,
       25,  483,  560, 1943,   20, 1992,   29,  566,   16, 1942,
     1941, 1940,  856,  900,   31,  384, 1939,  510,  575,  589,
       34, 1938, 1937,  404,  529,  594,  638, 1992,  469,  549,

      626,  610,  639,  940,  666,  649,  676,  645,  680,  686,
      707,  977,  721,  717,  723,  725,  522,  727,  762,    0,
      746,  766,  670, 1992,  417, 1992,  396, 1936,   28,  551,
       30,  761,  532,  554,  600,  426,   33,  655,  364,  770,
      452,  474,  570,  614,  804,  572,  784,  719,  361,  785,
     1992, 1935,  412,  788,  810,  835, 1934,  499,  564,  829,
      706,  811,  875,  841,  879, 1933,  820,  578,  882,  720,
      826,  892,  888,  917,  780,  839, 1956,  608,  932,  830,
      920,  926,  953,  961, 1931,  849,  663,  635,  859,  831,
      864,  962,  975, 1930, 1971, 1967,    0,    0, 1927, 1963,

     1964, 1961,  528, 1992,    0,  773,  870,  910,  975,  951,
      956,  964,  963,  887, 1005, 1006, 1012, 1014,  979, 1020,
     1018, 1022, 1024,  942, 1026, 1030, 1034, 1038, 1040, 1039,
     1045, 1050, 1052, 1057, 1062, 1068,  747, 1992,    0, 1923,
      641,    0, 1922, 1963, 1959, 1072, 1088, 1096, 1956, 1059,
      910, 1957, 1954, 1889,    0, 1869,  923, 1901,    0, 1882,
      715, 1088, 1075, 1080, 1099, 1100, 1104, 1085, 1105, 1109,
     1110, 1115, 1117, 1127, 1131, 1135, 1137, 1141, 1147, 1149,
     1154, 1155, 1156, 1162, 1164, 1166, 1168, 1172, 1177, 1178,
     1179, 1185, 1186,  693, 1992, 1881,    0,    0, 1829, 1831,

     1805,  989, 1798, 1778, 1788, 1772, 1753, 1758,  764, 1753,
     1724, 1718, 1719, 1710,    0, 1702,    0, 1702, 1695, 1681,
     1625, 1624, 1614, 1608, 1618, 1621, 1005, 1992, 1992, 1602,
        0, 1599, 1640, 1635, 1194, 1200, 1201, 1634, 1204, 1992,
     1069, 1992, 1566,    0, 1545, 1562, 1212, 1218, 1219, 1530,
     1518, 1222, 1992, 1130, 1992, 1474, 1496, 1228,  833,  805,
     1503, 1237, 1244, 1496, 1245, 1484, 1223,    0, 1441, 1477,
     1235, 1992, 1473,    0,    0, 1433, 1465, 1459, 1440, 1229,
     1992,    0, 1992, 1245, 1247, 1251, 1258, 1260, 1259, 1264,
     1265, 1271, 1272, 1279, 1283, 1285, 1290, 1284, 1292, 1296,

     1297, 1305, 1310, 1311, 1315, 1319, 1321, 1325,    0, 1326,
        0, 1430, 1329, 1330, 1334, 1339, 1340, 1350, 1355, 1360,
     1362, 1364, 1366, 1368, 1373, 1372, 1374, 1378, 1379, 1385,
     1390, 1392, 1396, 1398, 1400, 1406, 1390, 1401, 1396, 1398,
     1372, 1339,    0, 1342, 1333, 1328, 1330, 1281, 1276, 1262,
     1265, 1240, 1220, 1208, 1178, 1181, 1168, 1992, 1411, 1258,
     1414, 1992, 1322, 1992, 1430, 1189, 1992,    0,    0,    0,
     1404, 1418, 1431, 1432, 1437, 1438, 1443,    0, 1445, 1179,
     1444, 1450, 1449, 1451, 1459, 1455, 1457, 1465, 1478, 1479,
     1484, 1485, 1489, 1490, 1495, 1496, 1502, 1504, 1506, 1511,

     1513, 1512, 1520, 1518, 1522, 1528, 1530, 1536, 1542, 1142,
     1119, 1119, 1103, 1097, 1083, 1082, 1084, 1050, 1057,    0,
      997,  998,  981,  976,  970, 1543, 1544, 1548, 1550, 1552,
     1558, 1560, 1562, 1564, 1566,    0, 1568, 1585, 1570, 1572,
     1577, 1586, 1587, 1591, 1595,  926,  921,  910,  909,  862,
      829,  836,  779,  783, 1992,    0, 1597, 1604, 1606, 1608,
     1612, 1613,  732,  666, 1614, 1619, 1992,    0, 1620, 1624,
      604, 1992,    0, 1625, 1626, 1992,    0, 1630, 1992, 1656,
     1666, 1676, 1686, 1696, 1706, 1716, 1721, 1723, 1732, 1742,
     1752, 1755, 1758, 1762, 1764, 1772, 1782, 1791, 1801, 1811,

     1820, 1830, 1840, 1850, 1860, 1870, 1880,  578, 1890,  569,
     1900, 1910, 1920, 1930, 1935,  544, 1939,  495,  473, 1943,
     1947,  430, 1951
    } ;

static yyconst flex_int16_t yy_def[624] =
    {   0,
      580,  580,  579,    3,  579,    5,  579,    7,  579,    9,
      579,   11,  579,   13,    2,    2,  579,   17,  581,  581,
        2,    2,    2,    2,  582,  582,  583,  583,  584,  584,
      585,  585,  579,  579,  579,  579,  579,  586,  579,  579,
      579,  579,  579,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,   49,  587,  587,   49,  587,  587,  579,  579,  588,
      588,  588,  588,  589,  579,  579,  589,  590,  589,  579,
      589,  579,  591,  591,   84,   84,  592,  592,  592,  592,
      579,  579,  579,  593,  593,  593,  593,  579,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  104,  594,  594,  104,
      594,  594,  579,  579,  579,  579,  586,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  596,
      579,  579,  586,  579,  579,  579,  597,  597,  579,  598,
      579,  597,  597,  599,  597,  600,  600,  579,  601,  579,
      600,  600,  602,  600,  603,  603,  603,  579,  604,  579,
      603,  603,  603,  603,  605,  605,  579,  605,  606,  605,
      605,  605,  605,  579,  579,  579,  586,  607,  586,  579,

      579,  579,  579,  579,  608,  587,  587,  587,  587,  587,
       49,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  579,  579,  588,  588,
      588,  589,  589,  579,  589,  590,  609,  590,  589,   84,
       84,  589,  589,   84,  592,  592,  592,  579,  610,  593,
      593,  593,  594,  594,  594,  594,  594,  104,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  579,  579,  579,  607,  595,  595,  595,

      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  596,  579,  579,  579,
      597,  597,  597,  579,  598,  611,  598,  579,  597,  579,
      579,  579,  579,  600,  600,  600,  601,  612,  601,  579,
      579,  600,  579,  579,  579,  579,  603,  603,  603,  603,
      579,  604,  613,  604,  604,  579,  603,  605,  605,  605,
      579,  579,  605,  606,  614,  606,  605,  605,  605,  605,
      579,  607,  579,  615,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  587,  587,  587,  587,  587,  589,  609,
      589,  593,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  579,  611,  579,
      612,  579,  579,  579,  613,  613,  579,  605,  614,  605,
      615,  587,  587,  587,  587,  587,  587,  616,  587,  579,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  594,  594,  594,  594,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  587,  587,  617,  587,  587,
      587,  587,  587,  587,  587,  618,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  595,  595,  595,  595,  595,
      595,  595,  595,  579,  579,  619,  617,  587,  587,  620,
      594,  594,  595,  595,  621,  587,  579,  622,  620,  594,
      595,  579,  619,  621,  623,  579,  622,  623,    0,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,

      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579
    } ;

static yyconst flex_int16_t yy_nxt[2037] =
    {   0,
      579,   35,   36,  579,   37,   38,   39,  123,  124,  123,
      124,  195,  196,  200,  198,  201,   40,  202,   41,  237,
      204,  244,  249,  205,  204,  238,  201,  205,  202,  201,
      201,  202,  202,  245,  204,  258,   40,  205,  203,   42,
       35,   36,  203,   37,   38,   39,  236,  254,  208,  300,
      194,  194,  199,  194,  194,   40,  207,   41,  203,  243,
      207,  194,  203,  194,  309,  194,  301,  254,  240,  194,
      207,  299,  243,  299,  310,   40,  299,  194,   42,   34,
       35,   43,   34,   37,   38,   39,   34,   34,   34,   34,
       34,   34,   44,   45,   46,   47,   48,   49,   34,   44,

       50,   51,   52,   53,   54,   55,   56,   44,   57,   44,
       58,   44,   59,   60,   61,   62,   63,   64,   65,   66,
       44,   67,   44,   34,   68,   36,   34,   37,   38,   39,
       69,   34,   34,   34,   34,   34,   70,   70,   70,   71,
       70,   72,   34,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   71,
       70,   70,   73,   70,   70,   70,   70,   74,   75,   76,
       74,   77,   78,   79,   34,   80,   81,   74,   74,   82,
       83,   83,   83,   84,   83,   85,   74,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   84,   83,   83,   86,   83,   83,   83,
       83,   34,   35,   36,   34,   37,   38,   39,   34,   34,
       34,   34,   34,   34,   87,   87,   87,   88,   87,   89,
       34,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   88,   87,   87,
       90,   87,   87,   87,   87,   34,   91,   36,   34,   37,
       38,   39,   92,   92,   92,   34,   34,   93,   94,   94,
       94,   95,   94,   96,   34,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   95,   94,   94,   97,   94,   94,   94,   94,   34,

       35,   98,   34,   37,   38,   39,   34,   34,   34,   34,
       34,   34,   99,  100,  101,  102,  103,  104,   34,   99,
      105,  106,  107,  108,  109,  110,  111,   99,  112,   99,
      113,   99,  114,  115,  116,  117,  118,  119,  120,  121,
       99,  122,   99,   34,  125,  126,   34,   37,  127,   39,
       34,   34,   34,   34,   34,   34,  128,  129,  128,  130,
      131,  132,   34,  128,  133,  134,  135,  136,  137,  138,
      139,  128,  140,  128,  141,  128,  142,  143,  144,  145,
      128,  146,  147,  148,  128,  149,  128,   34,  150,  151,
      326,   37,  153,   39,  204,  314,  201,  205,  202,  204,

      254,  297,  205,  154,  299,  155,  204,  299,  204,  205,
      204,  205,  204,  205,  259,  205,  204,  198,  296,  205,
      254,  209,  204,  154,  217,  205,  156,   34,  150,  151,
      207,   37,  153,   39,  233,  207,  212,  210,  575,  199,
      213,  214,  207,  154,  207,  155,  207,  261,  207,  228,
      204,  308,  207,  205,  204,  199,  204,  205,  207,  205,
      194,  204,  204,  154,  205,  205,  156,  158,   36,  299,
      159,  160,  161,  318,  215,  227,  204,  216,  218,  205,
      223,  565,  162,  235,  163,  164,  207,  201,  219,  202,
      207,  204,  207,  204,  205,  299,  205,  207,  207,  241,

      333,  204,  162,  560,  205,  165,  158,   36,  319,  159,
      160,  161,  264,  220,  201,  229,  202,  299,  221,  241,
      222,  162,  226,  163,  164,  204,  240,  207,  205,  207,
      230,  206,  201,  201,  202,  202,  231,  207,  263,  259,
      232,  162,  332,  288,  165,  167,   36,  289,  168,  169,
      170,  206,  528,  256,  234,  201,  204,  202,  263,  205,
      171,  207,  172,  173,  201,  303,  202,  197,  334,  304,
      265,  247,  261,  197,  197,  299,  241,  412,  197,  201,
      171,  202,  196,  174,  167,   36,  384,  168,  169,  170,
      305,  257,  264,  201,  299,  202,  241,  299,  201,  171,

      202,  172,  173,  240,  259,  257,  317,  194,  324,  248,
      262,  257,  361,  299,  201,  299,  202,  204,  256,  171,
      205,  194,  174,  176,  177,  257,  178,  179,  180,  317,
      262,  306,  256,  204,  307,  320,  205,  261,  181,  373,
      182,  183,  201,  299,  202,  201,  204,  202,  259,  205,
      321,  194,  204,  264,  262,  205,  204,  299,  181,  205,
      266,  184,  176,  177,  371,  178,  179,  180,  372,  264,
      274,  294,  295,  204,  262,  267,  205,  181,  369,  182,
      183,  261,  264,  204,  311,  271,  205,  204,  264,  312,
      205,  313,  264,  204,  294,  295,  205,  181,  299,  269,

      184,  186,  187,  270,  188,  189,  190,  272,  317,  264,
      273,  275,  200,  194,  204,  277,  191,  205,  192,  264,
      278,  276,  279,  264,  204,  259,  350,  205,  204,  264,
      204,  205,  204,  205,  204,  205,  191,  205,  280,  193,
      186,  187,  284,  188,  189,  190,  286,  325,  237,  194,
      264,  285,  290,  204,  238,  191,  205,  192,  261,  283,
      264,  287,  299,  194,  264,  201,  264,  202,  264,  204,
      264,  571,  205,  204,  292,  191,  205,  302,  193,  201,
      204,  202,  204,  205,  554,  205,  327,  328,  201,  264,
      202,  211,  201,  444,  202,  293,  315,  302,  291,  358,

      302,  445,  316,  317,  299,  264,  360,  317,  201,  264,
      202,  211,  317,  299,  201,  338,  202,  202,  207,  204,
      302,  346,  205,  359,  358,  322,  203,  299,  330,  323,
      201,  194,  351,  197,  336,  197,  366,  377,  224,  201,
      360,  202,  341,  342,  225,  226,  203,  299,  197,  226,
      370,  203,  358,  194,  332,  207,  242,  443,  358,  242,
      242,  242,  242,  345,  375,  242,  242,  443,  378,  345,
      379,  203,  337,  194,  369,  242,  359,  204,  194,  338,
      205,  202,  359,  338,  343,  202,  197,  348,  197,  354,
      355,  339,  369,  443,  204,  339,  201,  205,  351,  251,

      242,  197,  376,  242,  252,  242,  253,  369,  352,  242,
      242,  339,  389,  207,  242,  339,  242,  204,  332,  242,
      205,  201,  332,  351,  201,  349,  202,  201,  352,  202,
      201,  356,  202,  352,  357,  345,  197,  363,  197,  358,
      564,  385,  367,  251,  201,  358,  202,  204,  317,  204,
      205,  364,  205,  352,  563,  579,  268,  357,  204,  357,
      345,  205,  367,  359,  443,  201,  378,  202,  379,  359,
      204,  204,  206,  205,  205,  365,  268,  367,  380,  378,
      358,  379,  204,  264,  204,  205,  204,  205,  226,  205,
      387,  380,  206,  201,  317,  202,  359,  367,  380,  206,

      388,  317,  396,  281,  359,  369,  327,  328,  386,  282,
      283,  380,  204,  204,  283,  205,  205,  553,  369,  204,
      264,  204,  205,  317,  205,  204,  390,  204,  205,  204,
      205,  204,  205,  204,  205,  317,  205,  204,  393,  392,
      205,  204,  391,  394,  205,  204,  204,  204,  205,  205,
      205,  395,  204,  397,  226,  205,  398,  204,  399,  204,
      205,  400,  205,  242,  204,  242,  401,  205,  403,  204,
      460,  342,  205,  197,  404,  204,  226,  402,  205,  197,
      197,  552,  204,  406,  197,  205,  551,  204,  405,  382,
      205,  407,  201,  408,  202,  382,  382,  197,  259,  226,

      382,  263,  250,  197,  197,  550,  204,  204,  197,  205,
      205,  204,  204,  549,  205,  205,  204,  204,  548,  205,
      205,  263,  204,  264,  204,  205,  547,  205,  263,  283,
      413,  463,  355,  414,  204,  417,  418,  205,  204,  248,
      443,  205,  204,  415,  204,  205,  416,  205,  204,  317,
      420,  205,  419,  421,  204,  546,  204,  205,  424,  205,
      422,  204,  204,  204,  205,  205,  205,  443,  423,  204,
      425,  204,  205,  204,  205,  204,  205,  283,  205,  204,
      480,  426,  205,  427,  204,  204,  204,  205,  205,  205,
      428,  579,  204,  204,  429,  205,  205,  431,  197,  525,

      197,  432,  283,  430,  382,  197,  382,  197,  338,  434,
      202,  436,  524,  197,  435,  433,  197,  523,  197,  382,
      197,  283,  382,  197,  382,  197,  201,  201,  351,  202,
      579,  197,  357,  378,  357,  379,  371,  382,  197,  357,
      372,  197,  358,  197,  337,  522,  357,  357,  382,  197,
      382,  197,  204,  521,  204,  205,  364,  205,  204,  460,
      342,  205,  349,  466,  364,  204,  204,  204,  205,  205,
      205,  204,  204,  480,  205,  478,  473,  520,  204,  204,
      476,  205,  205,  474,  472,  475,  204,  519,  365,  205,
      204,  204,  204,  205,  205,  205,  518,  204,  517,  204,

      205,  477,  205,  204,  204,  226,  205,  205,  226,  479,
      481,  482,  204,  443,  483,  205,  474,  204,  204,  485,
      205,  205,  204,  463,  355,  205,  204,  382,  204,  205,
      484,  205,  204,  382,  382,  205,  204,  204,  382,  205,
      205,  204,  226,  486,  205,  489,  204,  204,  487,  205,
      205,  516,  490,  515,  488,  493,  491,  204,  317,  494,
      205,  496,  204,  480,  495,  478,  492,  204,  317,  204,
      205,  204,  205,  204,  205,  204,  205,  514,  205,  204,
      204,  204,  205,  205,  205,  204,  204,  497,  205,  205,
      283,  283,  204,  499,  500,  205,  501,  204,  498,  204,

      205,  503,  205,  204,  494,  204,  205,  204,  205,  513,
      205,  204,  502,  204,  205,  382,  205,  382,  382,  512,
      382,  511,  283,  504,  507,  204,  443,  510,  205,  505,
      382,  508,  357,  382,  382,  506,  382,  509,  204,  204,
      259,  205,  205,  474,  204,  204,  377,  205,  205,  466,
      204,  204,  204,  205,  205,  205,  204,  204,  204,  205,
      205,  205,  204,  373,  204,  205,  204,  205,  226,  205,
      532,  470,  204,  526,  529,  205,  376,  468,  370,  530,
      527,  531,  226,  534,  369,  204,  204,  533,  536,  205,
      467,  204,  204,  226,  205,  205,  204,  204,  579,  205,

      205,  535,  204,  204,  226,  205,  205,  464,  226,  204,
      494,  204,  205,  204,  205,  358,  205,  194,  204,  204,
      204,  205,  205,  205,  350,  204,  283,  204,  205,  204,
      205,  537,  205,  539,  542,  204,  462,  204,  205,  538,
      536,  540,  541,  204,  544,  554,  205,  283,  543,  204,
      204,  204,  205,  205,  205,  555,  283,  204,  556,  204,
      205,  283,  205,  346,  545,  204,  283,  204,  205,  204,
      205,  204,  205,  204,  205,  204,  205,  204,  205,  204,
      205,  474,  205,  558,  204,  474,  554,  205,  345,  559,
      226,  474,  204,  204,  204,  205,  205,  205,  204,  226,

      474,  205,  204,  561,  555,  205,  494,  556,  562,  194,
      283,  204,  494,  204,  205,  567,  205,  494,  568,  204,
      204,  572,  205,  205,  573,  494,  204,  567,  283,  205,
      568,  204,  572,  576,  205,  573,  577,  576,  334,  458,
      577,  333,  332,  566,  226,  194,  457,  456,  226,  283,
      317,  570,  455,  454,  453,  283,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  175,  175,  175,  175,

      175,  175,  175,  175,  175,  175,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  197,  197,  452,  197,
      197,  197,  197,  197,  197,  197,  206,  206,  206,  206,
      239,  239,  242,  317,  451,  242,  242,  450,  242,  242,
      242,  242,  246,  246,  449,  246,  246,  246,  246,  246,
      246,  246,  250,  448,  317,  250,  250,  447,  250,  250,
      250,  250,  255,  255,  260,  260,  260,  263,  263,  263,
      263,  298,  298,  329,  329,  329,  446,  329,  329,  329,
      329,  329,  331,  331,  443,  331,  442,  331,  331,  331,
      331,  335,  335,  441,  335,  335,  335,  335,  335,  335,

      335,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  344,  344,  440,  344,  439,  344,  344,  344,  344,
      347,  347,  317,  347,  347,  347,  347,  347,  347,  347,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      357,  357,  357,  357,  438,  357,  357,  357,  357,  357,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      368,  368,  437,  368,  368,  368,  368,  368,  368,  368,
      374,  374,  299,  374,  374,  374,  374,  374,  374,  374,
      382,  382,  296,  382,  382,  382,  382,  382,  382,  382,
      410,  410,  259,  410,  410,  410,  410,  410,  410,  410,

      459,  459,  258,  459,  459,  459,  459,  459,  459,  459,
      461,  461,  256,  461,  461,  461,  461,  461,  461,  461,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      469,  469,  250,  469,  469,  469,  469,  469,  469,  469,
      471,  471,  471,  471,  557,  557,  557,  557,  569,  569,
      569,  569,  574,  574,  574,  574,  578,  578,  578,  578,
      249,  245,  411,  409,  244,  243,  240,  200,  196,  383,
      199,  381,  195,  194,  369,  358,  345,  332,  194,  299,
      194,  194,  256,  194,  243,  194,  243,  240,  194,  194,
      579,   33,  579,  579,  579,  579,  579,  579,  579,  579,

      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579
    } ;

static yyconst flex_int16_t yy_chk[2037] =
    {   0,
        0,    1,    1,    0,    1,    1,    1,   15,   15,   16,
       16,   35,   37,   39,   38,   40,    1,   40,    1,   68,
       44,   75,   79,   44,   67,   68,   41,   67,   41,   71,
       42,   71,   42,   77,   45,   91,    1,   45,   41,    1,
        2,    2,   42,    2,    2,    2,   67,   85,   45,  129,
       39,   37,   38,   35,   40,    2,   44,    2,   41,   79,
       67,   68,   42,   75,  137,   41,  131,   85,   71,   42,
       45,  129,   77,  131,  137,    2,  137,   91,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   19,   19,   19,
      149,   19,   19,   19,   46,  139,   47,   46,   47,   47,

       86,  127,   47,   19,  149,   19,   53,  139,   48,   53,
       50,   48,   51,   50,   94,   51,   63,  153,  125,   63,
       86,   46,   59,   19,   53,   59,   19,   20,   20,   20,
       46,   20,   20,   20,   63,   47,   50,   48,  622,  127,
       50,   51,   53,   20,   48,   20,   50,   94,   51,   59,
       52,  136,   63,   52,   54,  153,   56,   54,   59,   56,
      125,   58,   66,   20,   58,   66,   20,   25,   25,  136,
       25,   25,   25,  141,   52,   58,   99,   52,   54,   99,
       56,  619,   25,   66,   25,   25,   52,   72,   54,   72,
       54,   55,   56,   60,   55,  141,   60,   58,   66,   72,

      158,   61,   25,  618,   61,   25,   26,   26,  142,   26,
       26,   26,   99,   55,   88,   61,   88,  142,   55,   72,
       55,   26,   60,   26,   26,   64,   72,   55,   64,   60,
       61,   62,  203,   95,  203,   95,   62,   61,  117,   95,
       62,   26,  158,  117,   26,   27,   27,  117,   27,   27,
       27,   62,  616,   88,   64,  130,  100,  130,  117,  100,
       27,   64,   27,   27,   73,  133,   73,   78,  159,  133,
      100,   78,   95,   78,   78,  133,   73,  610,   78,   89,
       27,   89,  168,   27,   28,   28,  608,   28,   28,   28,
      134,   89,  100,   90,  130,   90,   73,  134,   96,   28,

       96,   28,   28,   73,   96,   90,  143,  159,  146,   78,
       96,   89,  178,  143,  102,  146,  102,  102,   89,   28,
      102,  168,   28,   29,   29,   90,   29,   29,   29,  571,
       96,  135,   90,  101,  135,  144,  101,   96,   29,  188,
       29,   29,   97,  135,   97,  241,  103,  241,   97,  103,
      144,  178,  108,  102,   97,  108,  106,  144,   29,  106,
      101,   29,   30,   30,  187,   30,   30,   30,  187,  101,
      108,  123,  123,  105,   97,  103,  105,   30,  188,   30,
       30,   97,  103,  107,  138,  106,  107,  109,  108,  138,
      109,  138,  106,  110,  294,  294,  110,   30,  138,  105,

       30,   31,   31,  105,   31,   31,   31,  107,  564,  105,
      107,  109,  161,  123,  111,  110,   31,  111,   31,  107,
      110,  109,  110,  109,  114,  261,  170,  114,  113,  110,
      115,  113,  116,  115,  118,  116,   31,  118,  111,   31,
       32,   32,  113,   32,   32,   32,  116,  148,  237,  161,
      111,  114,  118,  121,  237,   32,  121,   32,  261,  115,
      114,  116,  148,  170,  113,  132,  115,  132,  116,  119,
      118,  563,  119,  122,  121,   32,  122,  132,   32,   49,
      206,   49,   49,  206,  554,   49,  150,  150,  147,  121,
      147,   49,  154,  309,  154,  122,  140,  132,  119,  175,

      147,  309,  140,  140,  132,  119,  360,  140,  145,  122,
      145,   49,  553,  140,  155,  162,  155,  162,   49,   57,
      147,  167,   57,  175,  360,  145,  155,  147,  150,  145,
      171,  154,  171,  160,  160,  160,  180,  190,   57,  156,
      176,  156,  164,  164,   57,   57,  155,  145,  160,   57,
      186,  156,  359,  155,  162,   57,   83,  552,  176,   83,
       83,   83,   83,  167,  189,   83,   83,  551,  191,  171,
      191,  156,  160,  180,  190,   83,  359,  207,  156,  163,
      207,  163,  176,  165,  164,  165,  169,  169,  169,  173,
      173,  163,  186,  550,  214,  165,  172,  214,  172,   83,

       84,  169,  189,   84,   84,   84,   84,  191,  172,   84,
       84,  163,  214,  207,  251,  165,  251,  208,  163,   84,
      208,  174,  165,  174,  181,  169,  181,  257,  172,  257,
      182,  173,  182,  174,  179,  172,  179,  179,  179,  181,
      549,  208,  182,   84,  104,  182,  104,  104,  548,  224,
      104,  179,  224,  174,  547,  183,  104,  183,  210,  183,
      174,  210,  182,  181,  546,  184,  192,  184,  192,  182,
      213,  212,  211,  213,  212,  179,  104,  184,  192,  193,
      184,  193,  209,  104,  112,  209,  219,  112,  212,  219,
      210,  193,  211,  302,  525,  302,  183,  184,  192,  211,

      213,  524,  219,  112,  184,  192,  327,  327,  209,  112,
      112,  193,  215,  216,  112,  215,  216,  523,  193,  217,
      112,  218,  217,  522,  218,  221,  215,  220,  221,  222,
      220,  223,  222,  225,  223,  521,  225,  226,  217,  216,
      226,  227,  215,  218,  227,  228,  230,  229,  228,  230,
      229,  218,  231,  220,  221,  231,  222,  232,  223,  233,
      232,  225,  233,  250,  234,  250,  227,  234,  230,  235,
      341,  341,  235,  246,  231,  236,  228,  229,  236,  246,
      246,  519,  263,  233,  246,  263,  518,  264,  232,  247,
      264,  235,  262,  236,  262,  247,  247,  248,  262,  234,

      247,  268,  250,  248,  248,  517,  265,  266,  248,  265,
      266,  267,  269,  516,  267,  269,  270,  271,  515,  270,
      271,  268,  272,  264,  273,  272,  514,  273,  268,  269,
      265,  354,  354,  266,  274,  271,  272,  274,  275,  248,
      513,  275,  276,  267,  277,  276,  270,  277,  278,  512,
      273,  278,  272,  274,  279,  511,  280,  279,  276,  280,
      275,  281,  282,  283,  281,  282,  283,  510,  275,  284,
      277,  285,  284,  286,  285,  287,  286,  278,  287,  288,
      480,  279,  288,  280,  289,  290,  291,  289,  290,  291,
      282,  466,  292,  293,  284,  292,  293,  287,  335,  457,

      335,  288,  285,  286,  336,  337,  336,  337,  339,  290,
      339,  293,  456,  335,  292,  289,  347,  455,  347,  336,
      337,  291,  348,  349,  348,  349,  352,  367,  352,  367,
      358,  347,  358,  380,  358,  380,  371,  348,  349,  362,
      371,  362,  367,  362,  337,  454,  363,  365,  363,  365,
      363,  365,  384,  453,  385,  384,  362,  385,  386,  460,
      460,  386,  349,  363,  365,  387,  389,  388,  387,  389,
      388,  390,  391,  393,  390,  391,  386,  452,  392,  393,
      389,  392,  393,  387,  385,  388,  394,  451,  365,  394,
      395,  398,  396,  395,  398,  396,  450,  397,  449,  399,

      397,  390,  399,  400,  401,  394,  400,  401,  395,  392,
      396,  397,  402,  448,  399,  402,  398,  403,  404,  401,
      403,  404,  405,  463,  463,  405,  406,  410,  407,  406,
      400,  407,  408,  410,  410,  408,  413,  414,  410,  413,
      414,  415,  402,  403,  415,  406,  416,  417,  404,  416,
      417,  447,  407,  446,  405,  414,  408,  418,  445,  415,
      418,  417,  419,  421,  416,  419,  413,  420,  444,  421,
      420,  422,  421,  423,  422,  424,  423,  442,  424,  426,
      425,  427,  426,  425,  427,  428,  429,  418,  428,  429,
      422,  423,  430,  424,  425,  430,  427,  431,  420,  432,

      431,  429,  432,  433,  426,  434,  433,  435,  434,  441,
      435,  471,  428,  436,  471,  459,  436,  459,  461,  440,
      461,  439,  430,  431,  434,  472,  438,  437,  472,  432,
      459,  435,  465,  461,  465,  433,  465,  436,  473,  474,
      412,  473,  474,  472,  475,  476,  379,  475,  476,  465,
      477,  481,  479,  477,  481,  479,  483,  482,  484,  483,
      482,  484,  486,  378,  487,  486,  485,  487,  476,  485,
      483,  377,  488,  475,  479,  488,  376,  373,  370,  481,
      477,  482,  487,  485,  369,  489,  490,  484,  489,  490,
      366,  491,  492,  486,  491,  492,  493,  494,  364,  493,

      494,  488,  495,  496,  490,  495,  496,  361,  491,  497,
      492,  498,  497,  499,  498,  357,  499,  356,  500,  502,
      501,  500,  502,  501,  351,  504,  496,  503,  504,  505,
      503,  495,  505,  498,  501,  506,  350,  507,  506,  497,
      507,  499,  500,  508,  503,  527,  508,  505,  502,  509,
      526,  527,  509,  526,  527,  528,  504,  529,  528,  530,
      529,  508,  530,  346,  506,  531,  509,  532,  531,  533,
      532,  534,  533,  535,  534,  537,  535,  539,  537,  540,
      539,  526,  540,  529,  541,  534,  538,  541,  345,  531,
      530,  532,  538,  542,  543,  538,  542,  543,  544,  535,

      533,  544,  545,  539,  557,  545,  537,  557,  541,  343,
      540,  558,  544,  559,  558,  560,  559,  542,  560,  561,
      562,  565,  561,  562,  565,  543,  566,  569,  545,  566,
      569,  570,  574,  575,  570,  574,  575,  578,  338,  334,
      578,  333,  332,  558,  566,  330,  326,  325,  559,  570,
      324,  561,  323,  322,  321,  562,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  584,  584,  584,  584,

      584,  584,  584,  584,  584,  584,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  586,  586,  320,  586,
      586,  586,  586,  586,  586,  586,  587,  587,  587,  587,
      588,  588,  589,  319,  318,  589,  589,  316,  589,  589,
      589,  589,  590,  590,  314,  590,  590,  590,  590,  590,
      590,  590,  591,  313,  312,  591,  591,  311,  591,  591,
      591,  591,  592,  592,  593,  593,  593,  594,  594,  594,
      594,  595,  595,  596,  596,  596,  310,  596,  596,  596,
      596,  596,  597,  597,  308,  597,  307,  597,  597,  597,
      597,  598,  598,  306,  598,  598,  598,  598,  598,  598,

      598,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  600,  600,  305,  600,  304,  600,  600,  600,  600,
      601,  601,  303,  601,  601,  601,  601,  601,  601,  601,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      603,  603,  603,  603,  301,  603,  603,  603,  603,  603,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      605,  605,  300,  605,  605,  605,  605,  605,  605,  605,
      606,  606,  299,  606,  606,  606,  606,  606,  606,  606,
      607,  607,  296,  607,  607,  607,  607,  607,  607,  607,
      609,  609,  260,  609,  609,  609,  609,  609,  609,  609,

      611,  611,  258,  611,  611,  611,  611,  611,  611,  611,
      612,  612,  256,  612,  612,  612,  612,  612,  612,  612,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      614,  614,  254,  614,  614,  614,  614,  614,  614,  614,
      615,  615,  615,  615,  617,  617,  617,  617,  620,  620,
      620,  620,  621,  621,  621,  621,  623,  623,  623,  623,
      253,  252,  249,  245,  244,  243,  240,  202,  201,  200,
      199,  196,  195,  194,  185,  177,  166,  157,  152,  128,
       93,   92,   87,   82,   81,   80,   74,   70,   69,   34,
       33,  579,  579,  579,  579,  579,  579,  579,  579,  579,

      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579
    } ;

extern int code_py_YY_flex_debug;
int code_py_YY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up code_py_YYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *code_py_YYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2017 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <QStack>
#include <QSharedPointer>
#include <QStringList>

#include <stdio.h>

#include <config.h>
#include <doxy_globals.h>
#include <entry.h>
#include <message.h>
#include <outputlist.h>
#include <parse_cstyle.h>
#include <parse_py.h>
#include <tooltip.h>
#include <util.h>

#define DBG_CTX(...)     do { } while(0)

#define YY_NO_INPUT 1
#define YY_NEVER_INTERACTIVE 1

static ClassSDict     g_codeClassSDict;
static QString        g_curClassName;
static QStringList    g_curClassBases;

static CodeOutputInterface *g_code;

static QString       g_inputString;     //!< the code fragment as text
static int	         g_inputPosition;   //!< read offset during parsing
static QString       g_currentFontClass;
static bool          g_needsTermination;

static QSharedPointer<Definition>   g_searchCtx;
static bool          g_collectXRefs;
static int           g_inputLines;      //!< number of line in the code fragment
static int	         g_yyLineNr;        //!< current line number

static QSharedPointer<FileDef>      g_sourceFileDef;
static QSharedPointer<Definition>   g_currentDefinition;
static QSharedPointer<MemberDef>    g_currentMemberDef;

static bool          g_includeCodeFragment;
static QString       g_realScope;

static int           g_bodyCurlyCount;
static bool          g_searchingForBody;
static QString       g_classScope;
static int           g_paramParens;

static bool          g_exampleBlock;
static QString       g_exampleName;
static QString       g_type;
static QString       g_name;

static bool          g_doubleStringIsDoc;
static bool          g_doubleQuote;
static bool          g_noSuiteFound;
static int           g_stringContext;

static QStack<uint>  g_indents;           // tracks indentation levels for scoping in python

static QString       g_docBlock;
static bool          g_endComment;

static void endFontClass();
static void adjustScopesAndSuites(unsigned indentLength);

/*! Represents a stack of variable to class mappings as found in the
 *  code. Each scope is enclosed in pushScope() and popScope() calls.
 *  Variables are added by calling addVariables() and one can search
 *  for variable using findVariable().
 */
class PyVariableContext
{
   public:
      static QSharedPointer<ClassDef> dummyContext();

      PyVariableContext() {
      }

      virtual ~PyVariableContext() {
      }

      void pushScope() {
         m_scopes.append(new StringMap<QSharedPointer<ClassDef>>);
      }

      void popScope() {
         if (m_scopes.count() > 0) {
            m_scopes.removeAt(m_scopes.count() - 1);
         }
      }

      void clear() {
         m_scopes.clear();
         m_globalScope.clear();
      }

      void clearExceptGlobal() {
         m_scopes.clear();
      }

      void addVariable(const QString &type, const QString &name);
      QSharedPointer<ClassDef> findVariable(const QString &name);

   private:
      StringMap<QSharedPointer<ClassDef>>          m_globalScope;
      QList<StringMap<QSharedPointer<ClassDef>> *> m_scopes;
};

QSharedPointer<ClassDef> PyVariableContext::dummyContext()
{
   static QSharedPointer<ClassDef> dummyContext = QMakeShared<ClassDef>("", 0, 0, "dummyContext-python", CompoundType::Class);
   return dummyContext;
}

void PyVariableContext::addVariable(const QString &type, const QString &name)
{
   QString ltype = type.simplified();
   QString lname = name.simplified();

   StringMap<QSharedPointer<ClassDef>> *scope;

   if (m_scopes.count() == 0 ) {
      scope = &m_globalScope;
   } else {
      scope = m_scopes.last();
   }

   QSharedPointer<ClassDef> varType;

   if ( (varType = g_codeClassSDict[ltype]) || (varType = getResolvedClass(g_currentDefinition, g_sourceFileDef, ltype)) ) {
      // look for class definitions inside the code block
      // look for global class definitions

      scope->insert(lname, varType);

   } else {
      if (m_scopes.count() > 0)  {
         // for local variables add a dummy entry so the name
         // is hidden to avoid false links to global variables with the same name
         // TODO: make this work for namespaces as well

         scope->insert(lname, PyVariableContext::dummyContext());
      }
   }
}

QSharedPointer<ClassDef> PyVariableContext::findVariable(const QString &name)
{
   if (name.isEmpty()) {
      return QSharedPointer<ClassDef>();
   }

   QSharedPointer<ClassDef> result;

   // search from inner to outer scope
   for (int k = m_scopes.size() - 1; k >= 0; --k) {

      result = m_scopes[k]->find(name);

      if (result) {
         return result;
      }
   }

   // nothing found -> also try the global scope
   result = m_globalScope.find(name);

   return result;
}

static PyVariableContext g_theVarContext;

class PyCallContext
{
   public:
      struct Ctx {
         Ctx() : name(g_name), type(g_type), cd(0)
         {}

         QString name;
         QString type;

         QSharedPointer<ClassDef> cd;
      };

      PyCallContext() {
         m_classList.append(new Ctx);
      }

      virtual ~PyCallContext() {}

      void setClass(QSharedPointer<ClassDef> cd) {
         Ctx *ctx = m_classList.last();

         if (ctx) {
            ctx->cd = cd;
         }
      }

      void pushScope() {
         m_classList.append(new Ctx);
      }

      void popScope() {
         if (m_classList.count() > 1) {
            Ctx *ctx = m_classList.last();

            if (ctx) {
               g_name = ctx->name;
               g_type = ctx->type;
            }
            m_classList.removeLast();
         }
      }

      void clear() {
         m_classList.clear();
         m_classList.append(new Ctx);
      }

      QSharedPointer<ClassDef> getClass() const {
         Ctx *ctx = m_classList.last();

         if (ctx) {
            return ctx->cd;
         } else {
            return QSharedPointer<ClassDef>();
         }
      }

   private:
      QList<Ctx *> m_classList;
};

static PyCallContext g_theCallContext;

/* counts the number of lines in the input */
static int countLines()
{
   int count = 1;

   if (g_inputString.isEmpty() ) {
      return count;
   }

   const QChar *p = g_inputString.constData();
   QChar c;

   while ((c = *p) != 0) {
      p++ ;

      if (c == '\n') {
         count++;
      }
   }

   if (*(p - 1) != '\n') {
      // last line does not end with a \n, so we add an extra
      // line and explicitly terminate the line after parsing
      count++;
      g_needsTermination = true;
   }

   return count;
}

static void setCurrentDoc(const QString &anchor)
{
   if (Doxy_Globals::searchIndexBase != nullptr) {
      if (g_searchCtx) {
         Doxy_Globals::searchIndexBase->setCurrentDoc(g_searchCtx, g_searchCtx->anchor(), false);
      } else {
         Doxy_Globals::searchIndexBase->setCurrentDoc(g_sourceFileDef, anchor, true);
      }
   }
}

static void addToSearchIndex(const QString &text)
{
   if (Doxy_Globals::searchIndexBase != nullptr) {
      Doxy_Globals::searchIndexBase->addWord(text, false);
   }
}

static QSharedPointer<ClassDef> stripClassName(const QString &s, QSharedPointer<Definition> d = g_currentDefinition)
{
   int pos = 0;

   QString type = s;
   QString className;
   QString templSpec;

   while (extractClassNameFromType(type, pos, className, templSpec) != -1) {
      QString clName = className + templSpec;

      QSharedPointer<ClassDef> cd;

      if (! g_classScope.isEmpty()) {
         cd = getResolvedClass(d, g_sourceFileDef, g_classScope + "::" + clName);
      }

      if (cd == 0) {
         cd = getResolvedClass(d, g_sourceFileDef, clName);
      }

      if (cd) {
         return cd;
      }
   }

   return QSharedPointer<ClassDef>();
}

/* start a new line of code, inserting a line number if g_sourceFileDef
 * is true. If a definition starts at the current line, then the line
 * number is linked to the documentation of that definition.
 */
static void startCodeLine()
{
   if (g_sourceFileDef) {
      QSharedPointer<Definition> d = g_sourceFileDef->getSourceDefinition(g_yyLineNr);

      if (! g_includeCodeFragment && d && d->isLinkableInProject()) {
         g_currentDefinition = d;
         g_currentMemberDef  = g_sourceFileDef->getSourceMember(g_yyLineNr);
         g_endComment        = false;
         g_searchingForBody  = true;

         g_realScope  = d->name();
         g_classScope = d->name();

         g_bodyCurlyCount = 0;

         QString lineAnchor;
         lineAnchor = QString("l%1").arg(g_yyLineNr, 5, 10, QChar('0'));

         if (g_currentMemberDef) {
            g_code->writeLineNumber(g_currentMemberDef->getReference(),
                  g_currentMemberDef->getOutputFileBase(), g_currentMemberDef->anchor(), g_yyLineNr);

            setCurrentDoc(lineAnchor);

         } else {
            g_code->writeLineNumber(d->getReference(), d->getOutputFileBase(), 0, g_yyLineNr);
            setCurrentDoc(lineAnchor);
         }

      } else {
         g_code->writeLineNumber(0, 0, 0, g_yyLineNr);
      }
   }

   g_code->startCodeLine(g_sourceFileDef);

   if (! g_currentFontClass.isEmpty()) {
      g_code->startFontClass(g_currentFontClass);
   }
}

static void codify(const QString &text)
{
   g_code->codify(text);
}

static void endCodeLine()
{
   endFontClass();
   g_code->endCodeLine();
}

static void nextCodeLine()
{
   QString fc = g_currentFontClass;
   endCodeLine();

   if (g_yyLineNr < g_inputLines) {
      g_currentFontClass = fc;
      startCodeLine();
   }
}

static void startFontClass(const QString &s)
{
   // if font class is already set do not stop and start it again
   if (g_currentFontClass != s) {
      endFontClass();
      g_code->startFontClass(s);
      g_currentFontClass = s;
   }
}

static void endFontClass()
{
   if (! g_currentFontClass.isEmpty() ) {
      g_code->endFontClass();
      g_currentFontClass = "";
   }
}

/* writes a link to a fragment \a text that may span multiple lines, inserting
 * line numbers for each line. If \a text contains newlines, the link will be
 * split into multiple links with the same destination, one for each line.
 */
static void writeMultiLineCodeLink(CodeOutputInterface &ol, QSharedPointer<Definition> d, const QString &text)
{
   static bool sourceTooltips = Config::getBool("source-tooltips");
   TooltipManager::instance()->addTooltip(d);

   QString ref    = d->getReference();
   QString file   = d->getOutputFileBase();
   QString anchor = d->anchor();
   QString tooltip;

   if (! sourceTooltips) {
      // fall back to simple "title" tooltips
      tooltip = d->briefDescriptionAsTooltip();
   }

   QString tmp;

   for (auto c : text) {

      if (c == '\n') {
         g_yyLineNr++;

         ol.writeCodeLink(ref, file, anchor, tmp, tooltip);
         nextCodeLine();

         tmp = "";

      } else {
         tmp += c;

      }
   }

   if ( ! tmp.isEmpty() ) {
      ol.writeCodeLink(ref, file, anchor, tmp, tooltip);
   }
}

static void codifyLines(const QString &text)
{
   QString tmp;

   const QString tmp_currentFontClass = g_currentFontClass;

   for (auto c : text) {

      if (c == '\n') {
         g_yyLineNr++;

         g_code->codify(tmp);
         endCodeLine();

         if (g_yyLineNr < g_inputLines) {
            startCodeLine();
         }

         if (! tmp_currentFontClass.isEmpty()) {
            startFontClass(tmp_currentFontClass);
         }

         tmp = "";

      } else {
         tmp += c;

      }
   }

   if (! tmp.isEmpty() )  {
      g_code->codify(tmp);
   }
}

static bool getLinkInScope(const QString &c, const QString &m,  const QString &memberText,
                           CodeOutputInterface &ol, const QString &text )
{
   QSharedPointer<MemberDef>    md;
   QSharedPointer<ClassDef>     cd;
   QSharedPointer<FileDef>      fd;
   QSharedPointer<NamespaceDef> nd;
   QSharedPointer<GroupDef>     gd;

   if (getDefs(c, m, "()", md, cd, fd, nd, gd, false, g_sourceFileDef) && md->isLinkable()) {

      QSharedPointer<Definition> d;

      if (md->getOuterScope() == Doxy_Globals::globalScope) {
         d = md->getBodyDef() ;
      } else {
         d = md->getOuterScope();
      }

      if (md->getGroupDef()) {
         d = md->getGroupDef();
      }

      if (d && d->isLinkable()) {
         g_theCallContext.setClass(stripClassName(md->typeString(), md->getOuterScope()));

         if (g_currentDefinition && g_currentMemberDef && md != g_currentMemberDef && g_collectXRefs) {
            addDocCrossReference(g_currentMemberDef, md);
         }

         writeMultiLineCodeLink(ol, md, ! text.isEmpty() ? text : memberText);
         addToSearchIndex(! text.isEmpty() ? text : memberText);

         return true;
      }
   }

   return false;
}

static bool getLink(const QString &className, const QString &memberName, CodeOutputInterface &ol, const QString &text = QString())
{
   QString m = removeRedundantWhiteSpace(memberName);
   QString c = className;

   if (! getLinkInScope(c, m, memberName, ol, text)) {
      if (! g_curClassName.isEmpty()) {

         if (! c.isEmpty()) {
            c.prepend("::");
         }

         c.prepend(g_curClassName);
         return getLinkInScope(c, m, memberName, ol, text);
      }
      return false;
   }
   return true;
}

/*
  For a given string in the source code,
  finds its class or global id and links to it.
*/
static void generateClassOrGlobalLink(CodeOutputInterface &ol, const QString &clName, bool typeOnly = false)
{
   QString className = clName;

   // do not do anything for empty text
   if (className.isEmpty()) {
      return;
   }

   DBG_CTX(stderr, "generateClassOrGlobalLink(className=%s)\n", csPrintable(className) );

   QSharedPointer<ClassDef> cd;
   QSharedPointer<ClassDef> lcd;

   // Member def that we may find
   QSharedPointer<MemberDef> md;

   if ((lcd = g_theVarContext.findVariable(className)) == 0) { // not a local variable
      QSharedPointer<Definition> d = g_currentDefinition;

      QString scope = substitute(className, ".", "::");

      cd = getResolvedClass(d, g_sourceFileDef, substitute(className, ".", "::"), &md);

      DBG_CTX(stderr, "d=%s g_sourceFileDef=%s\n", d ? qPrintable(d->displayName()) : "<null>",
               g_currentDefinition ? qPrintable(g_currentDefinition->displayName()) : "<null>");

      DBG_CTX(stderr, "is found as a type %s\n", cd ? qPrintable(cd->name()) : "<null>");

      if (cd == 0 && md == 0) {
         // also see if it is variable or enum or enum value
         QSharedPointer<NamespaceDef> nd = getResolvedNamespace(scope);

         if (nd) {
            writeMultiLineCodeLink(ol, nd, clName);
            addToSearchIndex(className);
            return;

         } else if (getLink(g_classScope, clName, ol, clName)) {
            return;
         }
      }

   } else {
      if (lcd != PyVariableContext::dummyContext()) {
         g_theCallContext.setClass(lcd);
      }

      DBG_CTX(stderr, "is a local variable cd=%p\n", cd.data());
   }

   if (cd && cd->isLinkable()) { // is it a linkable class
      writeMultiLineCodeLink(ol, cd, clName);
      addToSearchIndex(className);

      if (md) {
         QSharedPointer<Definition> d;

         if (md->getOuterScope() == Doxy_Globals::globalScope) {
            d = md->getBodyDef();
         } else {
            d = md->getOuterScope();
         }

         if (md->getGroupDef()) {
            d = md->getGroupDef();
         }

         if (d && d->isLinkable() && md->isLinkable() && g_currentMemberDef && g_collectXRefs) {
            addDocCrossReference(g_currentMemberDef, md);
         }
      }

   } else { // not a class, maybe a global member
      int scopeEnd = className.lastIndexOf(".");

      if (scopeEnd != -1 && !typeOnly) { // name with explicit scope
         QString scope = substitute(className.left(scopeEnd), ".", "::");
         QString locName = className.right(className.length() - scopeEnd - 1);

         QSharedPointer<ClassDef> mcd = getClass(scope);

         DBG_CTX(stderr, "scope=%s locName=%s mcd=%p\n", qPrintable(scope), qPrintable(locName), mcd.data());

         if (mcd) {
            QSharedPointer<MemberDef> md = mcd->getMemberByName(locName);

            if (md) {
               g_theCallContext.setClass(stripClassName(md->typeString(), md->getOuterScope()) );
               writeMultiLineCodeLink(ol, md, clName);
               addToSearchIndex(className);

               QSharedPointer<Definition> d;

               if (md->getOuterScope() == Doxy_Globals::globalScope) {
                  d = md->getBodyDef();
               } else {
                  d = md->getOuterScope();
               }

               if (md->getGroupDef()) {
                  d = md->getGroupDef();
               }

               if (d && d->isLinkable() && md->isLinkable() && g_currentMemberDef && g_collectXRefs) {
                  addDocCrossReference(g_currentMemberDef, md);
               }

               return;
            }

         } else { // check namespace as well
            QSharedPointer<NamespaceDef> mnd = getResolvedNamespace(scope);

            if (mnd) {
               QSharedPointer<MemberDef> md = mnd->getMemberByName(locName);

               if (md) {
                  g_theCallContext.setClass(stripClassName(md->typeString(), md->getOuterScope()) );
                  writeMultiLineCodeLink(ol, md, clName);
                  addToSearchIndex(className);

                  QSharedPointer<Definition> d;

                  if (md->getOuterScope() == Doxy_Globals::globalScope) {
                     d = md->getBodyDef();

                  } else {
                     d = md->getOuterScope();

                  }

                  if (md->getGroupDef()) {
                     d = md->getGroupDef();
                  }

                  if (d && d->isLinkable() && md->isLinkable() && g_currentMemberDef && g_collectXRefs) {
                     addDocCrossReference(g_currentMemberDef, md);
                  }

                  return;
               }
            }
         }
      }

      // nothing found, just write out the word
      codifyLines(clName);
      addToSearchIndex(clName);
   }
}

// seems to work for file members, but scopes are not being correctly tracked for classes
static void generateFunctionLink(CodeOutputInterface &ol, const QString &funcName)
{
   QSharedPointer<ClassDef> ccd;

   QString locScope = g_classScope;
   QString locFunc = removeRedundantWhiteSpace(funcName);

   DBG_CTX(stdout, "*** locScope=%s locFunc=%s\n", csPrintable(locScope), csPrintable(locFunc));
   int i = locFunc.lastIndexOf("::");

   if (i > 0) {
      locScope = locFunc.left(i);
      locFunc  = locFunc.right(locFunc.length() - i - 2).trimmed();
   }

   if (! locScope.isEmpty() && (ccd = g_codeClassSDict[locScope])) {

      if (ccd->baseClasses()) {
         for (auto item : *ccd->baseClasses() ) {
            if (getLink(item->classDef->name(), locFunc, ol, funcName)) {
               return;
            }
         }
      }
   }

   if (! getLink(locScope, locFunc, ol, funcName)) {
      generateClassOrGlobalLink(ol, funcName);
   }
   return;
}

static bool findMemberLink(CodeOutputInterface &ol, QSharedPointer<Definition> def, const QString &name)
{
   if (def->getOuterScope() && def->getOuterScope()->definitionType() == Definition::TypeClass &&
         g_currentDefinition->definitionType() == Definition::TypeClass) {

      QSharedPointer<ClassDef> cd     = def->getOuterScope().dynamicCast<ClassDef>();
      QSharedPointer<ClassDef> thisCd = g_currentDefinition.dynamicCast<ClassDef>();

      if (def->definitionType() == Definition::TypeMember) {
         if (g_currentMemberDef && g_collectXRefs) {
            addDocCrossReference(g_currentMemberDef, def.dynamicCast<MemberDef>());
         }
      }

      DBG_CTX(stderr, "cd=%s thisCd=%s\n", cd ? qPrintable(cd->name()) : "<none>",
                  thisCd ? qPrintable(thisCd->name()) : "<none>");

      // TODO: find the nearest base class in case cd is a base class of thisCd

      if (cd == thisCd || (thisCd && thisCd->isBaseClass(cd, true))) {
         writeMultiLineCodeLink(ol, def, name);
         return true;
      }
   }

   return false;
}

static void findMemberLink(CodeOutputInterface &ol, const QString &phrase)
{
   if (g_currentDefinition) {
      auto iter = Doxy_Globals::glossary().find(phrase);

      while (iter != Doxy_Globals::glossary().end() && iter.key() == phrase) {
         QSharedPointer<Definition> def = sharedFrom(iter.value());

         if (findMemberLink(ol, def, phrase)) {
            return;
         }

         ++iter;
      }
   }

   codify(phrase);
}

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
   int c = 0;

   while (g_inputString[g_inputPosition] != 0) {

      QString tmp1    = g_inputString.at(g_inputPosition);
      QByteArray tmp2 = tmp1.toUtf8();

      if (c + tmp2.length() >= max_size)  {
         // buffer is full
         break;
      }

      c += tmp2.length();

      for (auto letters : tmp2) {
         *buf = letters;
          buf++;
      }

      g_inputPosition++;
   }

   return c;
}

#define INITIAL 0
#define Body 1
#define FunctionDec 2
#define FunctionParams 3
#define ClassDec 4
#define ClassInheritance 5
#define Suite 6
#define SuiteCaptureIndent 7
#define SuiteStart 8
#define SuiteMaintain 9
#define SuiteContinuing 10
#define LongString 11
#define SingleQuoteString 12
#define DoubleQuoteString 13
#define TripleString 14
#define DocBlock 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int code_py_YYlex_destroy (void );

int code_py_YYget_debug (void );

void code_py_YYset_debug (int debug_flag  );

YY_EXTRA_TYPE code_py_YYget_extra (void );

void code_py_YYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *code_py_YYget_in (void );

void code_py_YYset_in  (FILE * in_str  );

FILE *code_py_YYget_out (void );

void code_py_YYset_out  (FILE * out_str  );

int code_py_YYget_leng (void );

char *code_py_YYget_text (void );

int code_py_YYget_lineno (void );

void code_py_YYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int code_py_YYwrap (void );
#else
extern int code_py_YYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( code_py_YYtext, code_py_YYleng, 1, code_py_YYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( code_py_YYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( code_py_YYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, code_py_YYin))==0 && ferror(code_py_YYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(code_py_YYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int code_py_YYlex (void);

#define YY_DECL int code_py_YYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after code_py_YYtext and code_py_YYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)code_py_YYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in code_py_YYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! code_py_YYin )
			code_py_YYin = stdin;

		if ( ! code_py_YYout )
			code_py_YYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			code_py_YYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				code_py_YY_create_buffer(code_py_YYin,YY_BUF_SIZE );
		}

		code_py_YY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of code_py_YYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 580 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1992 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keyword");
      codify(text);
      endFontClass();
      BEGIN( FunctionDec );
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
     QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keyword");
      codify(text);
      endFontClass();
      BEGIN( ClassDec );
      }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keywordtype");
      codify(text);
      endFontClass();
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify("self.");
		findMemberLink(*g_code, text.mid(5));
   }
	YY_BREAK
case 5:
*yy_cp = (yy_hold_char); /* undo effects of setting up code_py_YYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up code_py_YYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify("self.");
      findMemberLink(*g_code, text.mid(5));
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify("self.");
		findMemberLink(*g_code, text.mid(5));
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify("self.");
      findMemberLink(*g_code, text.mid(5));
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
		codify("cls.");
	   findMemberLink(*g_code, text.mid(4));
   }
	YY_BREAK
case 9:
*yy_cp = (yy_hold_char); /* undo effects of setting up code_py_YYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up code_py_YYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify("cls.");
      findMemberLink(*g_code, text.mid(4));
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
		codify("cls.");
	   findMemberLink(*g_code, text.mid(4));
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify("cls.");
      findMemberLink(*g_code, text.mid(4));
    }
	YY_BREAK

case 12:
YY_RULE_SETUP
{
   QString text = QString::fromUtf8(code_py_YYtext);
   generateClassOrGlobalLink(*g_code, text);

   g_curClassName = text;
   g_curClassBases.clear();
   BEGIN( ClassInheritance );
}
	YY_BREAK

case 13:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      // The parser is assuming that ALL identifiers in this state are base classes;
      // it does not check to see that the first parenthesis has been seen.
      // it should probably be more strict about what to accept.

      QString text = QString::fromUtf8(code_py_YYtext);
      g_curClassBases.append(text);

      generateClassOrGlobalLink(*g_code, text);
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);

      // Assume this will be a one-line suite;
      // found counter-example in SuiteStart.

      // Push a class scope
      QSharedPointer<ClassDef> classDefToAdd = QMakeShared<ClassDef> ("<code>", 1, 1, g_curClassName,
                  CompoundType::Class, "", "", false);

      g_codeClassSDict.insert(g_curClassName, classDefToAdd);

      for (auto s : g_curClassBases) {

         QSharedPointer<ClassDef> baseDefToAdd;
         baseDefToAdd = g_codeClassSDict[s];

         // Try to find class in global scope

         if (baseDefToAdd == 0) {
            baseDefToAdd = getResolvedClass(g_currentDefinition, g_sourceFileDef, qPrintable(s));
         }

         if (baseDefToAdd && baseDefToAdd != classDefToAdd) {
            classDefToAdd->insertBaseClass(baseDefToAdd, qPrintable(s), Public, Normal);
         }
      }

      // Reset class-parsing variables.
      g_curClassName.resize(0);
      g_curClassBases.clear();

      g_noSuiteFound = true;
      BEGIN( SuiteStart );
   }
	YY_BREAK

case 16:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      generateFunctionLink(*g_code, text);
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
      BEGIN( FunctionParams );
   }
	YY_BREAK

case 18:
YY_RULE_SETUP
{
      // Parses delimiters
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
	   codifyLines(text);
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);

      // assume this will be a one-line suite
      // found counter-example in SuiteStart.

      g_noSuiteFound = true;
      BEGIN( SuiteStart );
   }
	YY_BREAK

case 23:
YY_RULE_SETUP
{
      // Position-sensitive rules, must come AFTER keyword-triggered rules
      // Must come BEFORE identifier NONEMPTY-like rules to syntax highlight.

      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keyword");
      codify(text);
      endFontClass();
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keywordflow");
      codify(text);
      endFontClass();
                               }
	YY_BREAK
case 25:
*yy_cp = (yy_hold_char); /* undo effects of setting up code_py_YYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up code_py_YYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      generateClassOrGlobalLink(*g_code, text);
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      generateClassOrGlobalLink(*g_code, text, true);
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK

case 28:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keyword");
      codifyLines(text);
      endFontClass();
      BEGIN(Body);
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keyword");
      codifyLines(text);
      endFontClass();

      // no indentation necessary
      g_noSuiteFound = false;
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("keywordflow");
      codifyLines(text);
      endFontClass();

      // no indentation necessary
      g_noSuiteFound = false;
   }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      if (YY_START == SingleQuoteString || YY_START == DoubleQuoteString || YY_START == TripleString) {
         REJECT;
      }

      yy_push_state(YY_START);
      BEGIN(DocBlock);
      g_docBlock = text;
   }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);

      if ( g_noSuiteFound ) {
         BEGIN ( SuiteCaptureIndent );
      }
   }
	YY_BREAK

case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
      // Blankline - ignore, keep looking for indentation
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      // This state lasts momentarily, to check the indentation
      // level that is about to be used
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);

      g_indents.push(code_py_YYleng);
      BEGIN( Suite );
   }
	YY_BREAK

case 37:
YY_RULE_SETUP
{
      // This implements poor indendation-tracking should be improved.
      // (translate tabs to space, etc)
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
      adjustScopesAndSuites(code_py_YYleng);
   }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{
      // If this ever succeeds, it means that this is a blank line, and
      // can be ignored.
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      // Default rule; matches yhe empty string, assuming real text starts here.
      // Just go straight to Body
      adjustScopesAndSuites(0);
   }
	YY_BREAK

case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
      BEGIN( SuiteMaintain );
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK

/*
      // Single quoted string like 'That\'s a """nice""" string!'
   */
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{
      // line continuation
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      // espaced char
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      // tripple double quotes
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      // end of the string
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
      endFontClass();

      BEGIN(g_stringContext);
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      // normal chars
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      // normal char
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK

/*
      // Double quoted string like "That's \"a '''nice'''\" string!"
   */
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{
      // line continuation
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // espaced char
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 51:
YY_RULE_SETUP
{
      // tripple single quotes
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      // end of the string
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
      endFontClass();

      BEGIN( g_stringContext );
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      // normal chars
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // normal char
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK

case 55:
case 56:
YY_RULE_SETUP
{

      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);

      if (g_doubleQuote == (text[0] == '"')) {
         endFontClass();
         BEGIN(g_stringContext);
      }
    }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codifyLines(text);
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
   }
	YY_BREAK

/*
<*>({NONEMPTY}|{EXPCHAR}|{BB})           {
      // This should go one character at a time.
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);

      //endFontClass();
      BEGIN(Body);
   }
  */
case 60:
case 61:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);

      startFontClass("stringliteral");
      g_stringContext = YY_START;
      g_doubleQuote   = text[code_py_YYleng-1] == '"';
      codify(text);

      BEGIN(TripleString);
   }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
      // single quoted string
      QString text = QString::fromUtf8(code_py_YYtext);

      startFontClass("stringliteral");
      g_stringContext = YY_START;
      codify(text);

      BEGIN(SingleQuoteString);
   }
	YY_BREAK
case 63:
YY_RULE_SETUP
{
      // double quoted string
      QString text = QString::fromUtf8(code_py_YYtext);

      startFontClass("stringliteral");
      g_stringContext = YY_START;
      codify(text);

      BEGIN(DoubleQuoteString);
   }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
      // contents of current comment line
      QString text = QString::fromUtf8(code_py_YYtext);
      g_docBlock += text;
   }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{
      // comment block (next line is also comment line)
      QString text = QString::fromUtf8(code_py_YYtext);
      g_docBlock += text;
   }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{
      // comment block ends at the end of this line
      // remove special comment (default config)

      if (Config::getBool("strip-code-comments"))  {
         g_yyLineNr   += g_docBlock.count('\n');
         g_endComment = true;

      } else  {
         // do not remove comment

         startFontClass("comment");
         codifyLines(g_docBlock);
         endFontClass();
      }

      unput(*code_py_YYtext);
      yy_pop_state();
   }
	YY_BREAK
case 67:
YY_RULE_SETUP
{
      if (YY_START == SingleQuoteString || YY_START == DoubleQuoteString || YY_START == TripleString) {
         REJECT;
      }

      QString text = QString::fromUtf8(code_py_YYtext);
      yy_push_state(YY_START);

      BEGIN(DocBlock);
      g_docBlock = text;
   }
	YY_BREAK
case 68:
YY_RULE_SETUP
{
      // normal comment
      if (YY_START==SingleQuoteString || YY_START==DoubleQuoteString || YY_START==TripleString) {
         REJECT;
      }

      QString text = QString::fromUtf8(code_py_YYtext);
      startFontClass("comment");
      codifyLines(text);
      endFontClass();
   }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{
      if (g_endComment) {
         g_endComment = false;
      } else {
         QString text = QString::fromUtf8(code_py_YYtext);
         codifyLines(text);
      }

      BEGIN(Body);
   }
	YY_BREAK
case 70:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);
      BEGIN(Body);
   }
	YY_BREAK
case 71:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(code_py_YYtext);
      codify(text);

      BEGIN(Body);
   }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Body):
case YY_STATE_EOF(FunctionDec):
case YY_STATE_EOF(FunctionParams):
case YY_STATE_EOF(ClassDec):
case YY_STATE_EOF(ClassInheritance):
case YY_STATE_EOF(Suite):
case YY_STATE_EOF(SuiteCaptureIndent):
case YY_STATE_EOF(SuiteStart):
case YY_STATE_EOF(SuiteMaintain):
case YY_STATE_EOF(SuiteContinuing):
case YY_STATE_EOF(LongString):
case YY_STATE_EOF(SingleQuoteString):
case YY_STATE_EOF(DoubleQuoteString):
case YY_STATE_EOF(TripleString):
case YY_STATE_EOF(DocBlock):
{
      if (YY_START == DocBlock) {

         if (! Config::getBool("strip-code-comments"))  {
            startFontClass("comment");
            codifyLines(g_docBlock);
            endFontClass();
         }
       }

       yyterminate();
   }
	YY_BREAK
case 72:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed code_py_YYin at a new source and called
			 * code_py_YYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = code_py_YYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( code_py_YYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * code_py_YYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of code_py_YYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			code_py_YYrestart(code_py_YYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) code_py_YYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 580 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 580 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 579);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up code_py_YYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					code_py_YYrestart(code_py_YYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( code_py_YYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve code_py_YYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void code_py_YYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        code_py_YYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            code_py_YY_create_buffer(code_py_YYin,YY_BUF_SIZE );
	}

	code_py_YY_init_buffer(YY_CURRENT_BUFFER,input_file );
	code_py_YY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void code_py_YY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		code_py_YYpop_buffer_state();
	 *		code_py_YYpush_buffer_state(new_buffer);
     */
	code_py_YYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	code_py_YY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (code_py_YYwrap()) processing, but the only time this flag
	 * is looked at is after code_py_YYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void code_py_YY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	code_py_YYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE code_py_YY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) code_py_YYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in code_py_YY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) code_py_YYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in code_py_YY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	code_py_YY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with code_py_YY_create_buffer()
 * 
 */
    void code_py_YY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		code_py_YYfree((void *) b->yy_ch_buf  );

	code_py_YYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a code_py_YYrestart() or at EOF.
 */
    static void code_py_YY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	code_py_YY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then code_py_YY_init_buffer was _probably_
     * called from code_py_YYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void code_py_YY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		code_py_YY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void code_py_YYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	code_py_YYensure_buffer_stack();

	/* This block is copied from code_py_YY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from code_py_YY_switch_to_buffer. */
	code_py_YY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void code_py_YYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	code_py_YY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		code_py_YY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void code_py_YYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)code_py_YYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in code_py_YYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)code_py_YYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in code_py_YYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE code_py_YY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) code_py_YYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in code_py_YY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	code_py_YY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to code_py_YYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       code_py_YY_scan_bytes() instead.
 */
YY_BUFFER_STATE code_py_YY_scan_string (yyconst char * yystr )
{
    
	return code_py_YY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to code_py_YYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE code_py_YY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) code_py_YYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in code_py_YY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = code_py_YY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in code_py_YY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) code_py_YYalloc(new_size  );

		else
			(yy_start_stack) = (int *) code_py_YYrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up code_py_YYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		code_py_YYtext[code_py_YYleng] = (yy_hold_char); \
		(yy_c_buf_p) = code_py_YYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		code_py_YYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int code_py_YYget_lineno  (void)
{
        
    return code_py_YYlineno;
}

/** Get the input stream.
 * 
 */
FILE *code_py_YYget_in  (void)
{
        return code_py_YYin;
}

/** Get the output stream.
 * 
 */
FILE *code_py_YYget_out  (void)
{
        return code_py_YYout;
}

/** Get the length of the current token.
 * 
 */
int code_py_YYget_leng  (void)
{
        return code_py_YYleng;
}

/** Get the current token.
 * 
 */

char *code_py_YYget_text  (void)
{
        return code_py_YYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void code_py_YYset_lineno (int  line_number )
{
    
    code_py_YYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see code_py_YY_switch_to_buffer
 */
void code_py_YYset_in (FILE *  in_str )
{
        code_py_YYin = in_str ;
}

void code_py_YYset_out (FILE *  out_str )
{
        code_py_YYout = out_str ;
}

int code_py_YYget_debug  (void)
{
        return code_py_YY_flex_debug;
}

void code_py_YYset_debug (int  bdebug )
{
        code_py_YY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from code_py_YYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    code_py_YYin = stdin;
    code_py_YYout = stdout;
#else
    code_py_YYin = (FILE *) 0;
    code_py_YYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * code_py_YYlex_init()
     */
    return 0;
}

/* code_py_YYlex_destroy is for both reentrant and non-reentrant scanners. */
int code_py_YYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		code_py_YY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		code_py_YYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	code_py_YYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        code_py_YYfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    code_py_YYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * code_py_YYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *code_py_YYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *code_py_YYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void code_py_YYfree (void * ptr )
{
	free( (char *) ptr );	/* see code_py_YYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

void resetPythonCodeParserState()
{
   g_currentDefinition = QSharedPointer<Definition>();
   g_currentMemberDef  = QSharedPointer<MemberDef>();

   g_doubleStringIsDoc = false;
   g_paramParens = 0;
   g_indents.clear();
   BEGIN( Body );
}

/*
  Examines current stack of white-space indentations;
  re-syncs the parser with the correct scope.
*/
static void adjustScopesAndSuites(unsigned indentLength)
{
   // States to pop
   if (!g_indents.isEmpty() && indentLength < g_indents.top()) {

      while (! g_indents.isEmpty() && indentLength < g_indents.top()) {
         // pop the old suite's indentation
         g_indents.pop();

         g_currentMemberDef = QSharedPointer<MemberDef>();

         if (g_currentDefinition) {
            g_currentDefinition = g_currentDefinition->getOuterScope();
         }
      }
   }

   // Are there any remaining indentation levels for suites?
   if (! g_indents.isEmpty()) {
    BEGIN( Suite );

   } else {
    BEGIN( Body );
   }
}

void parsePythonCode(CodeOutputInterface &od, const QString &, const QString &s, bool exBlock, const QString &exName,
                     QSharedPointer<FileDef> fd, int startLine, int endLine, bool,
                     QSharedPointer<MemberDef> , bool, QSharedPointer<Definition> searchCtx, bool collectXRefs)
{
   if (s.isEmpty()) {
      return;
   }

   printlex(code_py_YY_flex_debug, true, __FILE__, fd ? fd->fileName() : NULL);

   TooltipManager::instance()->clearTooltips();
   g_code             = &od;
   g_inputString      = s;
   g_inputPosition    = 0;
   g_currentFontClass = "";
   g_needsTermination = false;
   g_searchCtx = searchCtx;
   g_collectXRefs = collectXRefs;

   if (endLine != -1) {
      g_inputLines  = endLine + 1;
   } else {
      g_inputLines  = countLines();
   }

   if (startLine != -1) {
      g_yyLineNr    = startLine;
   } else {
      g_yyLineNr    = 1;
   }

   g_exampleBlock  = exBlock;
   g_exampleName   = exName;
   g_sourceFileDef = fd;

   bool cleanupSourceDef = false;

   if (fd == nullptr) {
      // create a dummy filedef for the example
      g_sourceFileDef  = QMakeShared<FileDef>("", (! exName.isEmpty() ? exName : "generated"));
      cleanupSourceDef = true;
   }

   if (g_sourceFileDef) {
      setCurrentDoc("l00001");
   }

   // Starts line 1 on the output
   startCodeLine();

   code_py_YYrestart(code_py_YYin );
   code_py_YYlex();

   if (g_needsTermination) {
      endCodeLine();
   }

   if (fd) {
      TooltipManager::instance()->writeTooltips(*g_code);
   }

   if (cleanupSourceDef) {
      // clear the temporary file definition used for this example
      g_sourceFileDef = QSharedPointer<FileDef>();
   }

   printlex(code_py_YY_flex_debug, false, __FILE__, fd ? fd->fileName() : "");
}

