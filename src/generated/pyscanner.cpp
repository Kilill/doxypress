/*************************************************************************
 *
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 * Copyright (C) 2014-2015 Barbara Geller & Ansel Sermersheim
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License version 2
 * is hereby granted. No representations are made about the suitability of
 * this software for any purpose. It is provided "as is" without express or
 * implied warranty. See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pyscannerYY_create_buffer
#define yy_delete_buffer pyscannerYY_delete_buffer
#define yy_flex_debug pyscannerYY_flex_debug
#define yy_init_buffer pyscannerYY_init_buffer
#define yy_flush_buffer pyscannerYY_flush_buffer
#define yy_load_buffer_state pyscannerYY_load_buffer_state
#define yy_switch_to_buffer pyscannerYY_switch_to_buffer
#define yyin pyscannerYYin
#define yyleng pyscannerYYleng
#define yylex pyscannerYYlex
#define yylineno pyscannerYYlineno
#define yyout pyscannerYYout
#define yyrestart pyscannerYYrestart
#define yytext pyscannerYYtext
#define yywrap pyscannerYYwrap
#define yyalloc pyscannerYYalloc
#define yyrealloc pyscannerYYrealloc
#define yyfree pyscannerYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pyscannerYYrestart(pyscannerYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int pyscannerYYleng;

extern FILE *pyscannerYYin, *pyscannerYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscannerYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {
   FILE *yy_input_file;

   char *yy_ch_buf;		/* input buffer */
   char *yy_buf_pos;		/* current position in input buffer */

   /* Size of input buffer in bytes, not including room for EOB
    * characters.
    */
   yy_size_t yy_buf_size;

   /* Number of characters read into yy_ch_buf, not including EOB
    * characters.
    */
   int yy_n_chars;

   /* Whether we "own" the buffer - i.e., we know we created it,
    * and can realloc() it to grow it, and should free() it to
    * delete it.
    */
   int yy_is_our_buffer;

   /* Whether this is an "interactive" input source; if so, and
    * if we're using stdio for input, then we want to use getc()
    * instead of fread(), to make sure we stop fetching input after
    * each newline.
    */
   int yy_is_interactive;

   /* Whether we're considered to be at the beginning of a line.
    * If so, '^' rules will be active on the next match, otherwise
    * not.
    */
   int yy_at_bol;

   int yy_bs_lineno; /**< The line count. */
   int yy_bs_column; /**< The column count. */

   /* Whether to try to fill the input buffer when we reach the
    * end of it.
    */
   int yy_fill_buffer;

   int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
   /* When an EOF's been seen but there's still some text to process
    * then we mark the buffer as YY_EOF_PENDING, to indicate that we
    * shouldn't try reading from the input source any more.  We might
    * still have a bunch of tokens to match, though, because of
    * possible backing-up.
    *
    * When we actually see the EOF, we change the status to "new"
    * (via pyscannerYYrestart()), so that the user can continue scanning by
    * just pointing pyscannerYYin at a new input file.
    */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE *yy_buffer_stack = 0;  /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pyscannerYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int pyscannerYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pyscannerYYwrap()'s to do buffer switches
 * instead of setting up a fresh pyscannerYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pyscannerYYrestart (FILE *input_file  );
void pyscannerYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pyscannerYY_create_buffer (FILE *file, int size  );
void pyscannerYY_delete_buffer (YY_BUFFER_STATE b  );
void pyscannerYY_flush_buffer (YY_BUFFER_STATE b  );
void pyscannerYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pyscannerYYpop_buffer_state (void );

static void pyscannerYYensure_buffer_stack (void );
static void pyscannerYY_load_buffer_state (void );
static void pyscannerYY_init_buffer (YY_BUFFER_STATE b, FILE *file  );

#define YY_FLUSH_BUFFER pyscannerYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pyscannerYY_scan_buffer (char *base, yy_size_t size  );
YY_BUFFER_STATE pyscannerYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pyscannerYY_scan_bytes (yyconst char *bytes, int len  );

void *pyscannerYYalloc (yy_size_t  );
void *pyscannerYYrealloc (void *, yy_size_t  );
void pyscannerYYfree (void *);

#define yy_new_buffer pyscannerYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pyscannerYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscannerYY_create_buffer(pyscannerYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pyscannerYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscannerYY_create_buffer(pyscannerYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pyscannerYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pyscannerYYin = (FILE *) 0, *pyscannerYYout = (FILE *) 0;

typedef int yy_state_type;

extern int pyscannerYYlineno;

int pyscannerYYlineno = 1;

extern char *pyscannerYYtext;
#define yytext_ptr pyscannerYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pyscannerYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pyscannerYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 155
#define YY_END_OF_BUFFER 156
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info {
   flex_int32_t yy_verify;
   flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_acclist[771] = {
   0,
   16483, 16483,  101,  101,   26,   26,   32,   32,   37,   37,
   156,  154,  155,  153,  155,   21,  154,  155,   17,  153,
   155,   12,   21,  154,  155,   21,  154,  155,   11,   21,
   154,  155,   21,  154,  155,   15,   21,  154,  155,   15,
   21,  154,  155,   15,   21,  154,  155,   15,   21,  154,
   155,   15,   21,  154,  155,   16,   21,  154,  155,   15,
   21,  154,  155, 16393, 16394,   15,   21,  154,  155, 16393,
   16394,   15,   21,  154,  155, 16393, 16394,   15,   21,  154,
   155, 16393, 16394,   15,   21,  154,  155, 16393, 16394,   48,
   49,  154,  155,   46,  153,  155,   45,   49,  154,  155,

   49,  154,  155,   44,   49,  154,  155,   49,  154,  155,
   47,   49,  154,  155,   47,   49,  154,  155,   47,   48,
   49,  154,  155,  128,  130,  154,  155,  130,  154,  155,
   129,  153,  155,  130,  154,  155,  130,  154,  155,  127,
   130,  154,  155,  133,  135,  154,  155,  134,  153,  155,
   135,  154,  155,  133,  135,  154,  155,  131,  135,  154,
   155,  154,  155,   66,  154,  155,   65,  154,  155,   64,
   154,  155,   73,  154,  155,   67,  154,  155,   73,  154,
   155,   70,  154,  155,   67,   73,  154,  155,   71,  154,
   155,   69,   73,  154,  155,   68,   73,  154,  155,   56,

   60,  154,  155,   60,  154,  155,   59,  153,  155, 16434,
   55,   60,  154,  155,   58,   60,  154,  155,   54,   60,
   154,  155,   53,   60,  154,  155,   58,   60,  154,  155,
   77,  154,  155,   78,  153,  155,   74,   77,  154,  155,
   76,   77,  154,  155,   75,   77,  154,  155,   91,  154,
   155,   92,  154,  155,   92,  154,  155,   93,  154,  155,
   94,  154,  155,  154,  155,   95,  153,  155, 8291,  154,
   155,  154,  155,  154,  155,   98,  154,  155,   85,   88,
   154,  155,   88,  154,  155,   86,  153,  155,   84,   88,
   154,  155,   88,  154,  155,   83,   88,  154,  155,   82,

   88,  154,  155,  113,  154,  155,  101,  113,  154,  155,
   114,  153,  155,  105,  113,  154,  155,  111,  113,  154,
   155,  104,  113,  154,  155,  108,  113,  154,  155,  102,
   113,  154,  155,  102,  113,  154,  155,  100,  113,  154,
   155,  112,  113,  154,  155,  112,  113,  154,  155,  112,
   113,  154,  155,  109,  113,  154,  155,  112,  113,  154,
   155,  110,  113,  154,  155,  124,  154,  155,  123,  153,
   155,  121,  154,  155,  122,  153,  155,  119,  121,  154,
   155,  121,  154,  155,  115,  121,  154,  155,  116,  121,
   154,  155,  120,  121,  154,  155,  140,  141,  154,  155,

   141,  154,  155,  139,  141,  154,  155,  141,  154,  155,
   146,  147,  154,  155,  145,  147,  154,  155,  147,  154,
   155,  147,  154,  155,  150,  152,  154,  155,  150,  151,
   153,  155,  150,  152,  154,  155,  150,  152,  154,  155,
   152,  154,  155,   27,  154,  155,   26,   27,  154,  155,
   25,  153,  155,   22,   27,  154,  155,   23,   27,  154,
   155,   23,   27,  154,  155,   34,  154,  155,   32,   34,
   154,  155,   31,  153,  155,   28,   34,  154,  155,   33,
   34,  154,  155,   30,   34,  154,  155, 16413,   38,  154,
   155,   37,   38,  154,  155,   36,  153,  155,   35,   38,

   154,  155,   17,   14,   15,   15,   15,   15,   15,   16,
   16393, 16394, 16393, 16394, 16393, 16394, 16393, 16394, 16393, 16394,
   15, 16393, 16394,   15, 16393, 16394,   15, 16393, 16394,   15,
   16393, 16394,   15, 16393, 16394,   48,   43,   47,   47,   47,
   48,  128,  127,  133,  132,  133,  131,  131,   66,   65,
   64,   67,   72,   71,   68,   56, 16434,   58,   58,   53,
   52,   57,   58,   91,   92,   94,   95,   98,   85,   87,
   82,   81,  101,  111,  102,  102,  102,  112,  105,  104,
   112,  120,  140,  137,  137,  136,  146,  143,  143,  142,
   150,  150,  150,   26,   23,   23,   32, 8221,   30, 16413,

   37,   35,   18,   14,   20,   19,   15,   15,   15,   15,
   16393, 16394, 16393, 16394, 16393, 16394, 16393, 16394, 16393, 16394,
   8202, 8202, 8202,   15, 16393, 16394,   15, 16393, 16394,   15,
   16393, 16394,   15, 16393, 16394,   40,   43,   42,   41,   47,
   125,  126,   72,   51, 8242,   61,   58,   63,   63,   62,
   57,   58,   94,   96,   97,   79,   89,   87,   90,  106,
   107,  103,  102,  102,  117,  118,  138,  144,  148,  149,
   23,   23, 8221,   35,   18,   19,   15,    2,   15,   15,
   16393, 16394, 16393, 16394, 16393, 16394, 16393, 16394,   15, 16393,
   16394,    1,    2,   15, 16393, 16394,   15, 16393, 16394,   40,

   41,   47,  125,  126,   61,   62,   94,   96,   97,   80,
   89,   90,  106,  107,  103,  102,  117,  118,  148,  149,
   23,   23,   35,   15,    6,   15, 16393, 16394,    1, 16393,
   16394, 16393, 16394,   15, 16393, 16394,    5,    6,   15, 16393,
   16394,  103,   23,    4,   15, 16393, 16394,    5, 16393, 16394,
   3,    4,   15, 16393, 16394, 16423,   23,   24,    8,    3,
   16393, 16394,    7,    8, 16423, 8231,   24,    7, 8201,   13
} ;

static yyconst flex_int16_t yy_accept[462] = {
   0,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    2,    3,    3,    3,    4,
   5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
   5,    6,    7,    8,    9,   10,   11,   12,   14,   16,
   19,   22,   26,   29,   33,   36,   40,   44,   48,   52,
   56,   60,   66,   72,   78,   84,   90,   94,   97,  101,
   104,  108,  111,  115,  119,  124,  128,  131,  134,  137,
   140,  144,  148,  151,  154,  158,  162,  164,  167,  170,
   173,  176,  179,  182,  185,  189,  192,  196,  200,  204,

   207,  211,  215,  219,  223,  227,  231,  234,  237,  241,
   245,  249,  252,  255,  258,  261,  264,  266,  269,  272,
   274,  276,  279,  283,  286,  289,  293,  296,  300,  304,
   307,  311,  314,  318,  322,  326,  330,  334,  338,  342,
   346,  350,  354,  358,  362,  366,  369,  372,  375,  378,
   382,  385,  389,  393,  397,  401,  404,  408,  411,  415,
   419,  422,  425,  429,  433,  437,  441,  444,  447,  451,
   454,  458,  462,  466,  469,  473,  476,  480,  484,  489,
   492,  496,  499,  503,  504,  504,  505,  505,  505,  505,
   506,  507,  508,  509,  510,  511,  513,  515,  517,  519,

   521,  521,  524,  524,  527,  530,  533,  536,  537,  537,
   538,  538,  538,  539,  540,  542,  543,  543,  543,  544,
   545,  545,  546,  547,  548,  549,  549,  550,  551,  552,
   553,  554,  555,  556,  557,  558,  558,  558,  558,  559,
   560,  560,  561,  562,  564,  565,  566,  566,  567,  567,
   568,  568,  568,  569,  570,  570,  570,  570,  571,  571,
   572,  573,  574,  574,  575,  575,  575,  576,  577,  578,
   578,  579,  580,  581,  582,  582,  582,  583,  584,  584,
   585,  586,  587,  588,  588,  589,  590,  591,  592,  592,
   593,  594,  595,  595,  595,  596,  597,  598,  598,  599,

   601,  602,  602,  602,  603,  604,  605,  606,  607,  607,
   608,  609,  610,  611,  613,  615,  617,  619,  621,  622,
   623,  624,  627,  630,  633,  636,  637,  638,  639,  640,
   641,  642,  643,  644,  645,  646,  646,  647,  649,  650,
   651,  653,  654,  655,  656,  656,  657,  657,  658,  659,
   660,  661,  662,  663,  664,  665,  666,  667,  668,  668,
   669,  669,  670,  671,  671,  672,  673,  674,  674,  675,
   676,  677,  677,  678,  679,  680,  681,  683,  685,  687,
   689,  689,  689,  689,  692,  694,  697,  700,  701,  702,
   703,  704,  705,  706,  707,  708,  709,  710,  711,  712,

   713,  714,  715,  715,  716,  717,  718,  719,  720,  721,
   722,  723,  724,  724,  725,  726,  727,  729,  730,  732,
   734,  734,  737,  739,  742,  742,  742,  743,  744,  744,
   745,  746,  748,  749,  751,  751,  753,  756,  757,  759,
   759,  760,  761,  763,  763,  765,  765,  766,  767,  768,
   768,  769,  769,  769,  769,  769,  770,  770,  770,  771,
   771
} ;

static yyconst flex_int32_t yy_ec[256] = {
   0,
   1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
   10,   11,   12,   13,   12,   14,    7,   15,   16,   16,
   16,   16,   16,   16,   16,   17,   17,   18,    7,    7,
   19,    7,    1,   20,   21,   21,   21,   21,   22,   21,
   23,   23,   23,   24,   23,   25,   23,   23,   23,   23,
   23,   26,   23,   23,   27,   23,   23,   28,   23,   23,
   29,   30,   31,    1,   32,    7,   33,   21,   34,   35,

   36,   37,   23,   38,   39,   24,   23,   40,   41,   23,
   42,   43,   23,   44,   45,   46,   47,   23,   23,   28,
   48,   23,   49,    7,   31,    7,    1,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,

   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50
} ;

static yyconst flex_int32_t yy_meta[51] = {
   0,
   1,    2,    3,    1,    4,    5,    1,    4,    1,    1,
   1,    1,    6,    7,    8,    8,    8,    1,    9,    1,
   10,   10,   11,   11,   11,   11,   11,   11,    1,   12,
   1,   11,   10,   10,   10,   10,   10,   11,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   11,    1,   13
} ;

static yyconst flex_int16_t yy_base[539] = {
   0,
   1641, 1640,    0,   50,  100,    0, 1628, 1617,  149,  153,
   156,  161,  167,    0,  217,    0,  266,  273,  279,  281,
   294,    0,  344,    0,  394,  402,  410,  418,  426,    0,
   1602, 1595,  476,    0,  524,  525,  531,  532,  538,  539,
   569,    0,  619,    0,  669,    0, 1588, 1928, 1928, 1928,
   1580, 1577, 1575, 1572, 1534,    0, 1529, 1518, 1506, 1506,
   718,  398,  719,  529,  720,  721,    0, 1928, 1539, 1537,
   1534, 1928,    0, 1505,  764,    0, 1928, 1928, 1533, 1527,
   1531,    0,  271, 1928,  543, 1525,  548, 1928, 1928,    0,
   1928, 1528,    0, 1928, 1928, 1527, 1928,    0,    0, 1928,

   550, 1521, 1517, 1512,  163, 1513, 1928, 1928, 1928, 1928,
   1928,    0, 1516, 1928, 1928, 1503,  283, 1928, 1928, 1501,
   1480,  406,    0, 1928, 1474, 1474,    0, 1454,  556, 1928,
   1452, 1928, 1448,    0, 1441, 1928,  801,  710, 1928,    0,
   393,  723, 1928,  725, 1928, 1928, 1928, 1928, 1928, 1441,
   1435, 1928, 1928,    0,    0, 1435, 1928,  561,    0, 1928,
   1420,  734, 1387, 1385, 1406, 1400,  738, 1928, 1405, 1928,
   1928,  730,  746, 1928, 1404, 1928, 1928, 1928,  743, 1928,
   1403, 1928,  740, 1392, 1389,    0,    0, 1385, 1346,    0,
   1356, 1349, 1340, 1336,  768,  759,  770,  802,  789,  790,

   804,  809,  745,  817,  818,  820,  825,    0, 1362,    0,
   0, 1346,    0, 1310,    0,    0, 1342, 1338, 1343,    0,
   784, 1928,  794, 1338, 1336,  833, 1928, 1928,    0, 1339,
   0, 1331,    0,    0,  795, 1325, 1328, 1324,    0,  837,
   1320,  796, 1928,    0,    0, 1323,    0, 1308,  843, 1928,
   1307, 1302,  845,    0, 1300, 1301, 1288,    0, 1283,  850,
   1928, 1277, 1273,    0, 1269,  841,  849,  855, 1928,    0,
   0, 1928, 1928,  870, 1269, 1263,    0,    0, 1254, 1928,
   857, 1928,    0, 1246, 1928,  874, 1928, 1223,  878, 1245,
   1240, 1245,  810, 1244,  847,  880, 1240,  883, 1235,  885,

   1234,  886, 1233,  888, 1230,    0, 1928, 1229, 1197, 1182,
   1224, 1184, 1182,  865,  889,  890,  891,  895, 1928,  897,
   1179,  899,  901,  902,  905, 1218,    0, 1928, 1217, 1181,
   1211, 1199,    0, 1928, 1054, 1053, 1050,    0, 1928, 1049,
   0, 1038, 1047, 1046,    0, 1047, 1046, 1043,    0, 1042,
   1041, 1039,  913, 1928,  513, 1029, 1027, 1928,  903, 1928,
   909, 1025, 1023, 1009,  911,  917,  993,  990,  932, 1928,
   1928,  944,  942,  984,  959,  911,  913,  934,  937,  943,
   914,  897,  884,  946,  948,  949,  950, 1928, 1928,  903,
   1928, 1928, 1928, 1928,  840, 1928, 1928, 1928, 1928, 1928,

   1928, 1928,  958, 1928, 1928, 1928, 1928, 1928, 1928,  940,
   958,  962,  795,  830,  828,  739,  961,  964,  969,  977,
   720,  979,  980,  982,    0,  988,  992,  998,  724,  727,
   565,  991,  995, 1011,  524, 1013, 1015, 1016,  975,  510,
   423, 1017, 1018,  375, 1020, 1021, 1022, 1928, 1024,  375,
   1023,  360,  247,  235,  232, 1928,  118,  118, 1928, 1928,
   1057, 1070, 1083, 1096, 1109, 1122, 1135, 1148, 1161, 1174,
   1187, 1200, 1206, 1218, 1230, 1243, 1256, 1262, 1275, 1288,
   1294, 1307, 1313, 1326, 1338, 1351, 1364, 1370, 1377, 1390,
   1399, 1412, 1425, 1431, 1437, 1450, 1463, 1476, 1489, 1502,

   1514, 1526, 1538, 1551, 1564, 1576, 1589, 1602, 1615, 1628,
   1640, 1653, 1666, 1672, 1676, 1683, 1696, 1708, 1721, 1734,
   1740, 1743, 1749, 1762, 1775, 1787, 1799, 1811, 1823, 1835,
   1848, 1854, 1861, 1874, 1886, 1898, 1902, 1914
} ;

static yyconst flex_int16_t yy_def[539] = {
   0,
   461,  461,  460,  460,  460,    5,  461,  461,  462,  462,
   463,  463,  460,   13,  460,   15,  464,  464,  465,  465,
   460,   21,  460,   23,  466,  466,  467,  467,  460,   29,
   468,  468,  460,   33,  469,  469,  470,  470,  471,  471,
   460,   41,  460,   43,  460,   45,  460,  460,  460,  460,
   460,  460,  472,  460,  460,  473,  473,  473,  473,  473,
   474,  475,  475,  475,  475,  475,  476,  460,  460,  477,
   460,  460,  478,  478,  478,  479,  460,  460,  460,  460,
   460,  480,  460,  460,  480,  460,  460,  460,  460,  481,
   460,  460,  482,  460,  460,  460,  460,  483,  484,  460,

   485,  460,  486,  460,  460,  487,  460,  460,  460,  460,
   460,  488,  460,  460,  460,  489,  460,  460,  460,  460,
   460,  460,  490,  460,  491,  460,  492,  460,  460,  460,
   460,  460,  460,  493,  460,  460,  460,  460,  460,  494,
   494,  494,  460,  494,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  495,  496,  460,  460,  497,  498,  460,
   460,  499,  500,  500,  460,  460,  500,  460,  460,  460,
   460,  501,  501,  460,  460,  460,  460,  460,  502,  460,
   460,  460,  503,  460,  460,  504,  505,  460,  460,  473,
   473,  473,  473,  473,  474,  506,  506,  506,  506,  506,

   460,  475,  507,  475,  475,  475,  475,  476,  460,  508,
   509,  460,  478,  478,   75,  479,  460,  460,  460,  480,
   460,  460,  480,  460,  460,  460,  460,  460,  481,  460,
   510,  460,  483,  484,  485,  460,  511,  460,  486,  512,
   460,  460,  460,  513,  514,  460,  515,  516,  460,  460,
   460,  460,  460,  517,  460,  518,  460,  519,  460,  460,
   460,  460,  460,  520,  460,  460,  460,  460,  460,  521,
   522,  460,  460,  522,  460,  460,  523,  524,  460,  460,
   460,  460,  525,  460,  460,  460,  460,  500,  500,  460,
   460,  460,  460,  526,  527,  527,  460,  460,  460,  528,

   460,  460,  529,  530,  460,  531,  460,  460,  460,  532,
   532,  532,  532,  506,  506,  506,  506,  506,  460,  460,
   460,  475,  475,  475,  475,  460,  508,  460,  460,  478,
   460,  460,  510,  460,  460,  511,  460,  486,  460,  460,
   513,  533,  460,  460,  534,  460,  518,  460,  519,  460,
   460,  460,  460,  460,  521,  460,  460,  460,  460,  460,
   460,  460,  460,  526,  535,  527,  460,  529,  536,  460,
   460,  460,  532,  460,  532,  532,  506,  506,  506,  506,
   460,  460,  460,  475,  460,  475,  475,  460,  460,  478,
   460,  460,  460,  460,  533,  460,  460,  460,  460,  460,

   460,  460,  460,  460,  460,  460,  460,  460,  460,  535,
   527,  536,  460,  532,  460,  532,  506,  460,  506,  506,
   460,  475,  460,  475,  537,  460,  460,  527,  460,  460,
   532,  506,  460,  506,  460,  460,  475,  538,  527,  460,
   460,  460,  506,  460,  460,  460,  538,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,    0,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,

   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460
} ;

static yyconst flex_int16_t yy_nxt[1979] = {
   0,
   50,   50,   51,   50,   52,   53,   50,   54,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   55,
   56,   56,   56,   56,   56,   56,   56,   56,   50,   50,
   50,   56,   56,   57,   58,   56,   59,   56,   60,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   50,   56,
   50,   61,   51,   50,   52,   53,   50,   54,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   55,
   62,   62,   62,   62,   62,   62,   62,   62,   50,   50,
   50,   62,   62,   63,   64,   62,   65,   62,   66,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   50,   62,

   67,   67,   68,   67,   69,   70,   67,   71,   67,   67,
   67,   67,   67,   72,   67,   67,   67,   67,   67,   67,
   73,   73,   73,   73,   73,   73,   73,   73,   67,   67,
   67,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   74,   73,   73,   73,   67,   75,
   77,   78,  459,   79,   81,   78,   80,   79,   83,  458,
   80,   84,   85,   83,  242,  243,   86,   48,   87,   49,
   48,   48,   48,   48,   48,   88,   48,   48,   48,   48,
   48,   48,   48,   48,   89,   48,   48,   90,   90,   90,
   90,   90,   90,   90,   90,   48,   48,   48,   90,   90,

   90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
   90,   90,   90,   90,   90,   48,   90,   91,   92,   49,
   91,   91,   93,   91,   91,   48,   94,   91,   91,   95,
   91,   91,   91,   91,   96,   97,   91,   98,   98,   98,
   98,   98,   98,   98,   98,   91,   91,   91,   98,   98,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,   98,   98,   91,   98,  100,  101,  457,
   102,  103,  221,  104,  105,  101,  222,  102,  106,  100,
   104,  108,  456,  108,  249,  250,  100,  109,  110,  109,
   110,  111,  455,  111,   48,   48,   49,   48,   48,   48,

   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,  112,  112,  112,  112,  112,  112,
   112,  112,   48,   48,   48,  112,  112,  112,  112,  112,
   112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
   112,  112,   48,  112,   48,  113,   49,   48,   48,   48,
   48,   48,  114,  114,   48,   48,  114,   48,   48,   48,
   48,  115,   48,   48,  116,  116,  116,  116,  116,  116,
   116,  116,   48,   48,   48,  116,  116,  116,  116,  116,
   116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
   116,  116,   48,  116,   48,  117,  118,  272,  120,  201,

   273,  121,   48,  122,  118,  454,  120,  253,  250,  121,
   453,  124,  125,   48,  126,  127,  203,  128,  452,  129,
   125,   48,  126,  127,  441,  128,  130,  131,  132,  130,
   133,  134,  130,  135,  136,  130,  130,  130,  130,  130,
   137,  138,  138,  130,  139,  130,  140,  140,  140,  140,
   140,  141,  142,  140,  143,  130,  130,  140,  140,  140,
   140,  140,  140,  140,  140,  140,  140,  140,  140,  141,
   140,  140,  144,  140,  145,  140,  148,  148,  149,  148,
   150,  148,  148,  151,  152,  153,  148,  148,  148,  148,
   148,  148,  148,  148,  148,  148,  154,  154,  154,  154,

   154,  154,  154,  154,  152,  148,  153,  154,  154,  154,
   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
   154,  154,  154,  154,  152,  154,   49,   49,  156,  156,
   201,  157,  157,   49,   49,  160,  160,  405,  161,  161,
   164,  164,  165,  165,  223,  166,  166,  203,  224,  226,
   450,  235,  405,  158,  158,  236,  227,  260,  261,  444,
   162,  162,  281,  282,  205,  228,  441,  167,  167,  168,
   169,  170,  168,  168,  168,  168,  168,  168,  168,  168,
   168,  168,  171,  168,  168,  168,  168,  168,  168,  172,
   172,  172,  172,  172,  172,  172,  172,  168,  168,  168,

   172,  172,  172,  172,  172,  172,  172,  173,  172,  172,
   172,  172,  172,  172,  172,  172,  172,  168,  172,  174,
   175,  176,  174,  174,  174,  174,  174,  174,  174,  177,
   174,  178,  174,  174,  174,  174,  174,  174,  174,  179,
   179,  179,  179,  179,  179,  179,  179,  174,  174,  174,
   179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
   179,  179,  179,  179,  179,  179,  179,  174,  179,  180,
   181,  182,  180,  180,  180,  180,  180,  180,  180,  180,
   180,  180,  180,  180,  180,  180,  180,  180,  180,  183,
   183,  183,  183,  183,  183,  183,  183,  180,  180,  180,

   183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
   183,  183,  183,  183,  183,  183,  183,  180,  183,  195,
   201,  201,  201,  266,  268,  268,  268,  272,  430,  272,
   273,  293,  273,  269,  269,  286,  287,  203,  203,  203,
   460,  302,  288,  294,  298,  288,  320,  293,  274,  269,
   274,  197,  198,  303,  199,  299,  200,  440,  204,  294,
   201,  207,  435,  206,  208,  208,  274,  208,  274,  195,
   208,  201,  208,  208,  208,  208,  208,  203,  215,  215,
   215,  208,  208,  208,  431,  221,  296,  321,  203,  222,
   201,  201,  208,  208,  208,  223,  235,  242,  243,  224,

   236,  197,  198,  201,  199,  201,  200,  203,  203,  315,
   201,  293,  208,  215,  266,  267,  267,  268,  201,  201,
   203,  201,  203,  294,  269,  269,  201,  203,  270,  415,
   318,  430,  317,  429,  226,  203,  203,  316,  203,  339,
   269,  227,  239,  203,  249,  250,  253,  250,  293,  322,
   228,  260,  261,  247,  323,  353,  353,  353,  359,  282,
   294,  324,  266,  267,  267,  268,  201,  325,  266,  268,
   268,  268,  269,  354,  272,  361,  287,  273,  269,  269,
   460,  293,  288,  203,  298,  288,  298,  302,  354,  302,
   201,  201,  201,  294,  269,  299,  201,  299,  381,  303,

   201,  303,  385,  201,  359,  282,  201,  203,  203,  203,
   361,  287,  293,  203,  201,  381,  425,  203,  293,  203,
   203,  377,  366,  203,  294,  421,  378,  353,  353,  353,
   294,  203,  379,  302,  403,  418,  404,  380,  201,  382,
   383,  293,  386,  384,  201,  303,  387,  201,  403,  385,
   423,  201,  203,  294,  416,  203,  382,  417,  411,  293,
   415,  203,  201,  302,  203,  418,  203,  203,  203,  426,
   433,  294,  427,  427,  427,  303,  449,  419,  201,  203,
   436,  423,  203,  201,  420,  374,  414,  203,  294,  413,
   422,  368,  442,  424,  367,  203,  433,  203,  203,  293,

   203,  428,  427,  427,  427,  432,  427,  427,  427,  203,
   364,  294,  201,  203,  436,  404,  445,  446,  442,  451,
   434,  445,  446,  446,  451,  449,  409,  437,  408,  203,
   407,  203,  406,  203,  448,  203,  203,  294,  203,  448,
   448,  203,  402,  439,  401,  400,  399,  346,  346,  397,
   396,  247,  394,  393,  335,  335,  443,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
   76,   76,   76,   82,   82,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,   99,   99,   99,   99,

   99,   99,   99,   99,   99,   99,   99,   99,   99,  107,
   107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
   107,  107,  119,  119,  119,  119,  119,  119,  119,  119,
   119,  119,  119,  119,  119,  123,  123,  123,  123,  123,
   123,  123,  123,  123,  123,  123,  123,  123,  146,  146,
   146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
   146,  155,  155,  155,  155,  155,  155,  155,  155,  155,
   155,  155,  155,  155,  159,  159,  159,  159,  159,  159,
   159,  159,  159,  159,  159,  159,  159,  163,  163,  163,
   163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

   186,  186,  392,  186,  186,  186,  186,  186,  186,  186,
   186,  186,  186,  190,  391,  190,  190,  390,  190,  196,
   389,  388,  383,  376,  375,  374,  373,  196,  196,  372,
   196,  202,  371,  370,  368,  301,  367,  202,  202,  202,
   202,  297,  202,  208,  208,  364,  292,  363,  208,  362,
   208,  208,  289,  360,  208,  208,  210,  210,  358,  210,
   210,  210,  210,  210,  210,  210,  210,  210,  210,  213,
   357,  213,  213,  356,  213,  216,  352,  351,  262,  216,
   216,  216,  216,  216,  216,  216,  216,  216,  220,  220,
   350,  220,  348,  220,  220,  220,  220,  220,  220,  220,

   220,  229,  346,  229,  229,  345,  229,  231,  231,  344,
   231,  343,  231,  231,  231,  231,  231,  231,  231,  231,
   233,  247,  233,  233,  246,  233,  234,  340,  337,  335,
   334,  234,  232,  234,  234,  234,  234,  234,  234,  237,
   230,  225,  237,  225,  219,  332,  331,  237,  237,  330,
   237,  239,  239,  329,  239,  239,  239,  239,  239,  239,
   239,  239,  239,  239,  244,  244,  326,  244,  244,  244,
   244,  244,  244,  244,  244,  244,  244,  245,  313,  245,
   245,  312,  245,  248,  248,  311,  248,  248,  310,  248,
   254,  309,  308,  305,  184,  254,  254,  254,  254,  254,

   254,  254,  254,  256,  301,  297,  292,  291,  256,  256,
   290,  256,  258,  258,  289,  258,  289,  258,  258,  258,
   258,  258,  258,  258,  258,  264,  264,  284,  264,  264,
   264,  264,  264,  264,  264,  264,  264,  264,  271,  279,
   271,  271,  276,  271,  277,  275,  277,  277,  265,  277,
   278,  278,  263,  262,  278,  278,  278,  278,  278,  278,
   278,  259,  278,  280,  280,  280,  280,  280,  280,  280,
   280,  280,  280,  280,  280,  280,  283,  283,  257,  255,
   283,  283,  283,  283,  283,  283,  283,  252,  283,  285,
   285,  285,  285,  285,  285,  285,  285,  285,  285,  285,

   285,  285,  288,  288,  288,  251,  288,  288,  288,  288,
   288,  288,  288,  288,  288,  295,  247,  246,  240,  241,
   295,  295,  240,  295,  295,  238,  295,  300,  232,  230,
   225,  300,  219,  300,  218,  300,  300,  217,  300,  304,
   214,  212,  211,  209,  304,  304,  194,  304,  304,  193,
   304,  306,  306,  192,  306,  306,  306,  306,  306,  306,
   306,  306,  306,  306,  307,  307,  307,  307,  191,  307,
   307,  307,  307,  307,  307,  307,  307,  314,  189,  188,
   187,  185,  184,  314,  314,  314,  314,  460,  314,  319,
   319,  319,  319,  319,  319,  319,  319,  147,  319,  319,

   319,  319,  327,  327,  147,  327,  327,  327,  327,  327,
   327,  327,  327,  327,  327,  328,  328,  328,  328,   49,
   328,  328,  328,  328,  328,  328,  328,  328,  333,  333,
   49,  333,  333,  333,  333,  333,  333,  333,  333,  333,
   333,  336,   49,   49,  460,  460,  460,  336,  460,  336,
   336,  460,  336,  338,  338,  338,  338,  338,  338,  338,
   338,  338,  338,  338,  338,  338,  341,  341,  460,  341,
   341,  341,  341,  341,  341,  341,  341,  341,  341,  245,
   460,  245,  245,  460,  245,  342,  342,  460,  342,  248,
   248,  460,  248,  248,  460,  248,  254,  460,  460,  460,

   460,  254,  254,  254,  254,  254,  254,  254,  254,  347,
   460,  460,  460,  460,  460,  347,  460,  347,  347,  460,
   347,  349,  349,  460,  349,  349,  349,  349,  349,  349,
   349,  349,  349,  349,  264,  264,  460,  264,  264,  264,
   264,  264,  264,  264,  264,  264,  264,  355,  460,  355,
   271,  460,  271,  271,  460,  271,  277,  460,  277,  277,
   460,  277,  278,  278,  460,  460,  278,  278,  278,  278,
   278,  278,  278,  460,  278,  283,  283,  460,  460,  283,
   283,  283,  283,  283,  283,  283,  460,  283,  365,  460,
   460,  460,  460,  460,  460,  460,  365,  365,  460,  365,

   295,  460,  460,  460,  460,  295,  295,  460,  295,  295,
   460,  295,  300,  460,  460,  460,  300,  460,  300,  460,
   300,  300,  460,  300,  369,  460,  460,  460,  460,  460,
   460,  460,  369,  369,  460,  369,  304,  460,  460,  460,
   460,  304,  304,  460,  304,  304,  460,  304,  306,  306,
   460,  306,  306,  306,  306,  306,  306,  306,  306,  306,
   306,  190,  460,  190,  190,  460,  190,  395,  395,  460,
   395,  395,  460,  395,  398,  398,  398,  398,  460,  398,
   398,  398,  398,  398,  398,  398,  398,  410,  460,  460,
   460,  460,  410,  410,  460,  410,  410,  460,  410,  412,

   460,  460,  460,  460,  412,  412,  460,  412,  412,  460,
   412,  438,  438,  460,  438,  447,  460,  460,  460,  460,
   460,  447,  447,  447,  447,  460,  447,   47,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460
} ;

static yyconst flex_int16_t yy_chk[1979] = {
   0,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
   4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
   4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
   4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
   4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

   5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
   5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
   5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
   5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
   5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
   9,    9,  458,    9,   10,   10,    9,   10,   11,  457,
   10,   11,   12,   12,  105,  105,   12,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   17,   17,  455,
   17,   17,   83,   17,   18,   18,   83,   18,   18,   17,
   18,   19,  454,   20,  117,  117,   18,   19,   19,   20,
   20,   19,  453,   20,   21,   21,   21,   21,   21,   21,

   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   25,   25,   25,  141,   25,   62,

   141,   25,   26,   26,   26,  452,   26,  122,  122,   26,
   450,   27,   27,   25,   27,   27,   62,   27,  444,   28,
   28,   26,   28,   28,  441,   28,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   35,   36,   35,   36,
   64,   35,   36,   37,   38,   37,   38,  355,   37,   38,
   39,   40,   39,   40,   85,   39,   40,   64,   85,   87,
   440,  101,  355,   35,   36,  101,   87,  129,  129,  435,
   37,   38,  158,  158,   64,   87,  431,   39,   40,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   45,
   45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

   45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   45,   45,   61,
   63,   65,   66,  138,  138,  138,  138,  142,  430,  144,
   142,  172,  144,  138,  138,  162,  162,   63,   65,   66,
   167,  183,  167,  172,  179,  167,  203,  173,  142,  138,
   144,   61,   61,  183,   61,  179,   61,  429,   63,  173,
   196,   66,  421,   65,   75,   75,  142,   75,  144,  195,
   75,  197,   75,   75,   75,   75,   75,  196,   75,   75,
   75,   75,   75,   75,  416,  221,  173,  203,  197,  221,
   199,  200,   75,   75,   75,  223,  235,  242,  242,  223,

   235,  195,  195,  198,  195,  201,  195,  199,  200,  197,
   202,  293,   75,   75,  137,  137,  137,  137,  204,  205,
   198,  206,  201,  293,  137,  137,  207,  202,  137,  415,
   200,  414,  199,  413,  226,  204,  205,  198,  206,  240,
   137,  226,  240,  207,  249,  249,  253,  253,  295,  204,
   226,  260,  260,  395,  205,  266,  266,  266,  281,  281,
   295,  206,  267,  267,  267,  267,  314,  207,  268,  268,
   268,  268,  267,  267,  274,  286,  286,  274,  268,  268,
   289,  296,  289,  314,  298,  289,  300,  302,  267,  304,
   315,  316,  317,  296,  268,  298,  318,  300,  320,  302,

   322,  304,  323,  324,  359,  359,  325,  315,  316,  317,
   361,  361,  365,  318,  377,  381,  390,  322,  366,  323,
   324,  315,  296,  325,  365,  383,  316,  353,  353,  353,
   366,  377,  317,  369,  353,  378,  353,  318,  379,  320,
   382,  410,  324,  322,  380,  369,  325,  384,  353,  385,
   386,  387,  378,  410,  376,  379,  381,  377,  366,  411,
   375,  380,  417,  412,  384,  418,  385,  386,  387,  403,
   419,  411,  403,  403,  403,  412,  439,  379,  420,  417,
   422,  423,  418,  424,  380,  374,  373,  419,  439,  372,
   384,  368,  432,  387,  367,  420,  433,  422,  423,  428,

   424,  411,  426,  426,  426,  417,  427,  427,  427,  432,
   364,  428,  434,  433,  436,  427,  437,  438,  442,  443,
   420,  445,  446,  447,  451,  449,  363,  424,  362,  434,
   357,  436,  356,  437,  438,  442,  443,  449,  445,  446,
   447,  451,  352,  428,  351,  350,  348,  347,  346,  344,
   343,  342,  340,  337,  336,  335,  434,  461,  461,  461,
   461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
   462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
   462,  462,  462,  463,  463,  463,  463,  463,  463,  463,
   463,  463,  463,  463,  463,  463,  464,  464,  464,  464,

   464,  464,  464,  464,  464,  464,  464,  464,  464,  465,
   465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
   465,  465,  466,  466,  466,  466,  466,  466,  466,  466,
   466,  466,  466,  466,  466,  467,  467,  467,  467,  467,
   467,  467,  467,  467,  467,  467,  467,  467,  468,  468,
   468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
   468,  469,  469,  469,  469,  469,  469,  469,  469,  469,
   469,  469,  469,  469,  470,  470,  470,  470,  470,  470,
   470,  470,  470,  470,  470,  470,  470,  471,  471,  471,
   471,  471,  471,  471,  471,  471,  471,  471,  471,  471,

   472,  472,  332,  472,  472,  472,  472,  472,  472,  472,
   472,  472,  472,  473,  331,  473,  473,  330,  473,  474,
   329,  326,  321,  313,  312,  311,  310,  474,  474,  309,
   474,  475,  308,  305,  303,  301,  299,  475,  475,  475,
   475,  297,  475,  476,  476,  294,  292,  291,  476,  290,
   476,  476,  288,  284,  476,  476,  477,  477,  279,  477,
   477,  477,  477,  477,  477,  477,  477,  477,  477,  478,
   276,  478,  478,  275,  478,  479,  265,  263,  262,  479,
   479,  479,  479,  479,  479,  479,  479,  479,  480,  480,
   259,  480,  257,  480,  480,  480,  480,  480,  480,  480,

   480,  481,  256,  481,  481,  255,  481,  482,  482,  252,
   482,  251,  482,  482,  482,  482,  482,  482,  482,  482,
   483,  248,  483,  483,  246,  483,  484,  241,  238,  237,
   236,  484,  232,  484,  484,  484,  484,  484,  484,  485,
   230,  225,  485,  224,  219,  218,  217,  485,  485,  214,
   485,  486,  486,  212,  486,  486,  486,  486,  486,  486,
   486,  486,  486,  486,  487,  487,  209,  487,  487,  487,
   487,  487,  487,  487,  487,  487,  487,  488,  194,  488,
   488,  193,  488,  489,  489,  192,  489,  489,  191,  489,
   490,  189,  188,  185,  184,  490,  490,  490,  490,  490,

   490,  490,  490,  491,  181,  175,  169,  166,  491,  491,
   165,  491,  492,  492,  164,  492,  163,  492,  492,  492,
   492,  492,  492,  492,  492,  493,  493,  161,  493,  493,
   493,  493,  493,  493,  493,  493,  493,  493,  494,  156,
   494,  494,  151,  494,  495,  150,  495,  495,  135,  495,
   496,  496,  133,  131,  496,  496,  496,  496,  496,  496,
   496,  128,  496,  497,  497,  497,  497,  497,  497,  497,
   497,  497,  497,  497,  497,  497,  498,  498,  126,  125,
   498,  498,  498,  498,  498,  498,  498,  121,  498,  499,
   499,  499,  499,  499,  499,  499,  499,  499,  499,  499,

   499,  499,  500,  500,  500,  120,  500,  500,  500,  500,
   500,  500,  500,  500,  500,  501,  116,  113,  106,  104,
   501,  501,  103,  501,  501,  102,  501,  502,   96,   92,
   86,  502,   81,  502,   80,  502,  502,   79,  502,  503,
   74,   71,   70,   69,  503,  503,   60,  503,  503,   59,
   503,  504,  504,   58,  504,  504,  504,  504,  504,  504,
   504,  504,  504,  504,  505,  505,  505,  505,   57,  505,
   505,  505,  505,  505,  505,  505,  505,  506,   55,   54,
   53,   52,   51,  506,  506,  506,  506,   47,  506,  507,
   507,  507,  507,  507,  507,  507,  507,   32,  507,  507,

   507,  507,  508,  508,   31,  508,  508,  508,  508,  508,
   508,  508,  508,  508,  508,  509,  509,  509,  509,    8,
   509,  509,  509,  509,  509,  509,  509,  509,  510,  510,
   7,  510,  510,  510,  510,  510,  510,  510,  510,  510,
   510,  511,    2,    1,    0,    0,    0,  511,    0,  511,
   511,    0,  511,  512,  512,  512,  512,  512,  512,  512,
   512,  512,  512,  512,  512,  512,  513,  513,    0,  513,
   513,  513,  513,  513,  513,  513,  513,  513,  513,  514,
   0,  514,  514,    0,  514,  515,  515,    0,  515,  516,
   516,    0,  516,  516,    0,  516,  517,    0,    0,    0,

   0,  517,  517,  517,  517,  517,  517,  517,  517,  518,
   0,    0,    0,    0,    0,  518,    0,  518,  518,    0,
   518,  519,  519,    0,  519,  519,  519,  519,  519,  519,
   519,  519,  519,  519,  520,  520,    0,  520,  520,  520,
   520,  520,  520,  520,  520,  520,  520,  521,    0,  521,
   522,    0,  522,  522,    0,  522,  523,    0,  523,  523,
   0,  523,  524,  524,    0,    0,  524,  524,  524,  524,
   524,  524,  524,    0,  524,  525,  525,    0,    0,  525,
   525,  525,  525,  525,  525,  525,    0,  525,  526,    0,
   0,    0,    0,    0,    0,    0,  526,  526,    0,  526,

   527,    0,    0,    0,    0,  527,  527,    0,  527,  527,
   0,  527,  528,    0,    0,    0,  528,    0,  528,    0,
   528,  528,    0,  528,  529,    0,    0,    0,    0,    0,
   0,    0,  529,  529,    0,  529,  530,    0,    0,    0,
   0,  530,  530,    0,  530,  530,    0,  530,  531,  531,
   0,  531,  531,  531,  531,  531,  531,  531,  531,  531,
   531,  532,    0,  532,  532,    0,  532,  533,  533,    0,
   533,  533,    0,  533,  534,  534,  534,  534,    0,  534,
   534,  534,  534,  534,  534,  534,  534,  535,    0,    0,
   0,    0,  535,  535,    0,  535,  535,    0,  535,  536,

   0,    0,    0,    0,  536,  536,    0,  536,  536,    0,
   536,  537,  537,    0,  537,  538,    0,    0,    0,    0,
   0,  538,  538,  538,  538,    0,  538,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
   460,  460,  460,  460,  460,  460,  460,  460
} ;

extern int pyscannerYY_flex_debug;
int pyscannerYY_flex_debug = 0;

static yy_state_type *yy_state_buf = 0, *yy_state_ptr = 0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pyscannerYYtext;

#include <QFile>
#include <QFileInfo>
#include <QHash>
#include <QRegExp>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>
#include <unistd.h>

#include "arguments.h"
#include "commentscan.h"
#include "config.h"
#include "doxygen.h"
#include "defargs.h"
#include "entry.h"
#include "language.h"
#include "message.h"
#include "pyscanner.h"
#include "pycode.h"
#include "util.h"

#include <doxy_globals.h>

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#define YY_NEVER_INTERACTIVE 1
#define YY_NO_INPUT 1

/* -----------------------------------------------------------------
 *
 *	statics
 */


static ParserInterface *g_thisParser;
static const char      *inputString;
static int		         inputPosition;
static QFile            inputFile;

static Protection	protection;

static Entry		*current_root = 0 ;
static Entry		*current      = 0 ;
static Entry		*previous     = 0 ;
static Entry		*bodyEntry    = 0 ;
static int		      yyLineNr     = 1 ;
static QByteArray		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static Specifier    	virt;

static int              docBlockContext;
static QByteArray       docBlock;
static QByteArray       docBlockName;
static bool             docBlockInBody;
static bool             docBlockJavaStyle;
static bool             docBrief;
static bool             docBlockSpecial;

static bool             g_doubleQuote;
static bool             g_specialBlock;
static int              g_stringContext;
static QByteArray       *g_copyString;
static int              g_indent = 0;
static int              g_curIndent = 0;

static QHash<QString, QByteArray *>  g_packageNameCache;

static QByteArray       g_packageScope;

static char             g_atomStart;
static char             g_atomEnd;
static int              g_atomCount;

//static bool           g_insideConstructor;

static QByteArray       g_moduleScope;
static QByteArray       g_packageName;

//static bool           g_hideClassDocs;

static QByteArray       g_defVal;
static int              g_braceCount;

static bool             g_lexInit = FALSE;
static bool             g_packageCommentAllowed;


static void initParser()
{
   protection = Public;
   mtype = Method;
   gstat = FALSE;
   virt = Normal;
   previous = 0;
   g_packageCommentAllowed = TRUE;
}

static void initEntry()
{
   //current->python = TRUE;
   current->protection = protection ;
   current->mtype      = mtype;
   current->virt       = virt;
   current->stat       = gstat;
   current->lang       = SrcLangExt_Python;
   current->setParent(current_root);
   initGroupInfo(current);
   gstat = FALSE;
}

static void newEntry()
{
   previous = current;
   current_root->addSubEntry(current);
   current = new Entry ;
   initEntry();
}

static void newVariable()
{
   if (!current->name.isEmpty() && current->name.at(0) == '_') { // mark as private
      current->protection = Private;
   }
   if (current_root->section & Entry::COMPOUND_MASK) { // mark as class variable
      current->stat = TRUE;
   }
   newEntry();
}

static void newFunction()
{
   if (current->name.left(2) == "__" && current->name.right(2) == "__") {
      // special method name, see
      // http://docs.python.org/ref/specialnames.html
      current->protection = Public;
   } else if (current->name.at(0) == '_') {
      current->protection = Private;
   }
}

static inline int computeIndent(const char *s)
{
   int col = 0;
   static int tabSize = Config_getInt("TAB_SIZE");
   const char *p = s;
   char c;
   while ((c = *p++)) {
      if (c == ' ') {
         col++;
      } else if (c == '\t') {
         col += tabSize - (col % tabSize);
      } else {
         break;
      }
   }
   return col;
}

static QByteArray findPackageScopeFromPath(const QByteArray &path)
{
   QByteArray *pScope = g_packageNameCache.value(path);

   if (pScope) {
      return *pScope;
   }

   QFileInfo pf(path + "/__init__.py"); // found package initialization file

   if (pf.exists()) {
      int i = path.lastIndexOf('/');

      if (i != -1) {
         QByteArray scope = findPackageScopeFromPath(path.left(i));

         if (!scope.isEmpty()) {
            scope += "::";
         }

         scope += path.mid(i + 1);
         g_packageNameCache.insert(path, new QByteArray(scope));
         return scope;
      }
   }

   return "";
}

static QByteArray findPackageScope(const char *fileName)
{
   if (fileName == 0) {
      return "";
   }

   QFileInfo fi(fileName);

   return findPackageScopeFromPath(fi.absolutePath().toUtf8());
}

static void lineCount()
{
   DBG_CTX((stderr, "yyLineNr=%d\n", yyLineNr));
   for (const char *p = pyscannerYYtext; *p; ++p) {
      yyLineNr += (*p == '\n') ;
   }
}

static void incLineNr()
{
   DBG_CTX((stderr, "yyLineNr=%d\n", yyLineNr));
   yyLineNr++;
}

#if 0
// Appends the current-name to current-type;
// Destroys current-name.
// Destroys current->args and current->argList
static void addType( Entry *current )
{
   uint tl = current->type.length();
   if ( tl > 0 && !current->name.isEmpty() && current->type.at(tl - 1) != '.') {
      current->type += ' ' ;
   }
   current->type += current->name ;
   current->name.resize(0) ;
   tl = current->type.length();
   if ( tl > 0 && !current->args.isEmpty() && current->type.at(tl - 1) != '.') {
      current->type += ' ' ;
   }
   current->type += current->args ;
   current->args.resize(0) ;
   current->argList->clear();
}

static QByteArray stripQuotes(const char *s)
{
   QByteArray name;
   if (s == 0 || *s == 0) {
      return name;
   }
   name = s;
   if (name.at(0) == '"' && name.at(name.length() - 1) == '"') {
      name = name.mid(1, name.length() - 2);
   }
   return name;
}
#endif

static void startCommentBlock(bool brief)
{
   if (brief) {
      current->briefFile = yyFileName;
      current->briefLine = yyLineNr;
   } else {
      current->docFile = yyFileName;
      current->docLine = yyLineNr;
   }
}

/*
static void appendDocBlock() {
  previous = current;
  current_root->addSubEntry(current);
  current = new Entry;
  initEntry();
}
*/

static void handleCommentBlock(const QByteArray &doc, bool brief)
{
   //printf("handleCommentBlock(doc=[%s] brief=%d docBlockInBody=%d docBlockJavaStyle=%d\n",
   //    doc.data(),brief,docBlockInBody,docBlockJavaStyle);

   // TODO: Fix me
   docBlockInBody = FALSE;

   if (docBlockInBody && previous && !previous->doc.isEmpty()) {
      previous->doc = previous->doc.trimmed() + "\n\n";
   }

   int position = 0;
   bool needsEntry;
   int lineNr = brief ? current->briefLine : current->docLine;
   while (parseCommentBlock(
             g_thisParser,
             (docBlockInBody && previous) ? previous : current,
             doc,     // text
             yyFileName, // file
             lineNr,
             docBlockInBody ? FALSE : brief,
             docBlockJavaStyle, // javadoc style // or FALSE,
             docBlockInBody,
             protection,
             position,
             needsEntry)
         ) { // need to start a new entry
      if (needsEntry) {
         newEntry();
      }
   }
   if (needsEntry) {
      newEntry();
   }

}

static void endOfDef(int correction = 0)
{
   //printf("endOfDef at=%d\n",yyLineNr);
   if (bodyEntry) {
      bodyEntry->endBodyLine  = yyLineNr - correction;
      bodyEntry = 0;
   }
   newEntry();
   //g_insideConstructor = FALSE;
}

static inline void addToString(const char *s)
{
   if (g_copyString) {
      (*g_copyString) += s;
   }
}

static void initTriDoubleQuoteBlock()
{
   docBlockContext   = YY_START;
   docBlockInBody    = FALSE;
   docBlockJavaStyle = TRUE;
   docBlockSpecial   = pyscannerYYtext[3] == '!';
   docBlock.resize(0);
   g_doubleQuote = TRUE;
   startCommentBlock(FALSE);
}

static void initTriSingleQuoteBlock()
{
   docBlockContext   = YY_START;
   docBlockInBody    = FALSE;
   docBlockJavaStyle = TRUE;
   docBlockSpecial   = pyscannerYYtext[3] == '!';
   docBlock.resize(0);
   g_doubleQuote = FALSE;
   startCommentBlock(FALSE);
}

static void initSpecialBlock()
{
   docBlockContext   = YY_START;
   docBlockInBody    = FALSE;
   docBlockJavaStyle = TRUE;
   docBrief = TRUE;
   docBlock.resize(0);
   startCommentBlock(TRUE);
}

static void searchFoundDef()
{
   current->fileName  = yyFileName;
   current->startLine = yyLineNr;
   current->bodyLine  = yyLineNr;
   current->section = Entry::FUNCTION_SEC;
   current->protection = protection = Public;
   current->lang = SrcLangExt_Python;
   current->virt = Normal;
   current->stat = gstat;
   current->mtype = mtype = Method;
   current->type.resize(0);
   current->name.resize(0);
   current->args.resize(0);

   current->argList.clear();

   g_packageCommentAllowed = FALSE;
   gstat = FALSE;
   //printf("searchFoundDef at=%d\n",yyLineNr);
}

static void searchFoundClass()
{
   current->section = Entry::CLASS_SEC;
   current->argList.clear();
   current->type += "class" ;

   current->fileName  = yyFileName;
   current->startLine  = yyLineNr;
   current->bodyLine  = yyLineNr;
   g_packageCommentAllowed = FALSE;
}

#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int c = 0;
   while ( c < max_size && inputString[inputPosition] ) {
      *buf = inputString[inputPosition++] ;
      //printf("%d (%c)\n",*buf,*buf);
      c++;
      buf++;
   }
   return c;
}

/* start command character */
/* Main start state */


/* Mid-comment states */
/* %x FuncDoubleComment */
/* %x ClassDoubleComment */



/* Function states */



/* Class states */



/* Variable states */


/* String states */


/* import */



#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define TryClassDocString 3
#define TripleComment 4
#define SpecialComment 5
#define FunctionDec 6
#define FunctionParams 7
#define FunctionBody 8
#define FunctionParamDefVal 9
#define ClassDec 10
#define ClassInheritance 11
#define ClassCaptureIndent 12
#define ClassBody 13
#define VariableDec 14
#define VariableEnd 15
#define VariableAtom 16
#define SingleQuoteString 17
#define DoubleQuoteString 18
#define TripleString 19
#define FromMod 20
#define FromModItem 21
#define Import 22

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pyscannerYYlex_destroy (void );

int pyscannerYYget_debug (void );

void pyscannerYYset_debug (int debug_flag  );

YY_EXTRA_TYPE pyscannerYYget_extra (void );

void pyscannerYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pyscannerYYget_in (void );

void pyscannerYYset_in  (FILE *in_str  );

FILE *pyscannerYYget_out (void );

void pyscannerYYset_out  (FILE *out_str  );

int pyscannerYYget_leng (void );

char *pyscannerYYget_text (void );

int pyscannerYYget_lineno (void );

void pyscannerYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pyscannerYYwrap (void );
#else
extern int pyscannerYYwrap (void );
#endif
#endif

static void yyunput (int c, char *buf_ptr  );

#ifndef yytext_ptr
static void yy_flex_strncpy (char *, yyconst char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char *);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( pyscannerYYtext, pyscannerYYleng, 1, pyscannerYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pyscannerYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pyscannerYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pyscannerYYin))==0 && ferror(pyscannerYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pyscannerYYin); \
			} \
		}\
\
 
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pyscannerYYlex (void);

#define YY_DECL int pyscannerYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pyscannerYYtext and pyscannerYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( pyscannerYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(pyscannerYYtext[pyscannerYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL {
   register yy_state_type yy_current_state;
   register char *yy_cp, *yy_bp;
   register int yy_act;




   /* ------------ Function recognition rules -------------- */



   if ( !(yy_init) )
   {
      (yy_init) = 1;

#ifdef YY_USER_INIT
      YY_USER_INIT;
#endif

      /* Create the reject buffer large enough to save one state per allowed character. */
      if ( ! (yy_state_buf) ) {
         (yy_state_buf) = (yy_state_type *)pyscannerYYalloc(YY_STATE_BUF_SIZE  );
      }
      if ( ! (yy_state_buf) ) {
         YY_FATAL_ERROR( "out of dynamic memory in pyscannerYYlex()" );
      }

      if ( ! (yy_start) ) {
         (yy_start) = 1;   /* first start state */
      }

      if ( ! pyscannerYYin ) {
         pyscannerYYin = stdin;
      }

      if ( ! pyscannerYYout ) {
         pyscannerYYout = stdout;
      }

      if ( ! YY_CURRENT_BUFFER ) {
         pyscannerYYensure_buffer_stack ();
         YY_CURRENT_BUFFER_LVALUE =
            pyscannerYY_create_buffer(pyscannerYYin, YY_BUF_SIZE );
      }

      pyscannerYY_load_buffer_state( );
   }

   while ( 1 )		/* loops until end-of-file is reached */
   {
      yy_cp = (yy_c_buf_p);

      /* Support of pyscannerYYtext. */
      *yy_cp = (yy_hold_char);

      /* yy_bp points to the position in yy_ch_buf of the start of
       * the current run.
       */
      yy_bp = yy_cp;

      yy_current_state = (yy_start);
      yy_current_state += YY_AT_BOL();

      (yy_state_ptr) = (yy_state_buf);
      *(yy_state_ptr)++ = yy_current_state;

   yy_match:
      do {
         register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
         while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state ) {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 461 ) {
               yy_c = yy_meta[(unsigned int) yy_c];
            }
         }
         yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
         *(yy_state_ptr)++ = yy_current_state;
         ++yy_cp;
      } while ( yy_base[yy_current_state] != 1928 );

   yy_find_action:
      yy_current_state = *--(yy_state_ptr);
      (yy_lp) = yy_accept[yy_current_state];
   find_rule: /* we branch to this label when backing up */
      for ( ; ; ) { /* until we find what rule we matched */
         if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] ) {
            yy_act = yy_acclist[(yy_lp)];
            if ( yy_act & YY_TRAILING_HEAD_MASK ||
                  (yy_looking_for_trail_begin) ) {
               if ( yy_act == (yy_looking_for_trail_begin) ) {
                  (yy_looking_for_trail_begin) = 0;
                  yy_act &= ~YY_TRAILING_HEAD_MASK;
                  break;
               }
            } else if ( yy_act & YY_TRAILING_MASK ) {
               (yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
               (yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
            } else {
               (yy_full_match) = yy_cp;
               (yy_full_state) = (yy_state_ptr);
               (yy_full_lp) = (yy_lp);
               break;
            }
            ++(yy_lp);
            goto find_rule;
         }
         --yy_cp;
         yy_current_state = *--(yy_state_ptr);
         (yy_lp) = yy_accept[yy_current_state];
      }

      YY_DO_BEFORE_ACTION;

   do_action:	/* This label is used only to access EOF actions. */

      switch ( yy_act ) {
         /* beginning of action switch */

         case 1:
            YY_RULE_SETUP

            {
               // start of a function/method definition with indent
               DBG_CTX((stderr, "Found def at %d\n", yyLineNr));
               g_indent = computeIndent(pyscannerYYtext);
               searchFoundDef();
               BEGIN( FunctionDec );
            }
            YY_BREAK
         case 2:
            YY_RULE_SETUP

            {
               // start of a function/method definition
               searchFoundDef();
               BEGIN( FunctionDec );
            }
            YY_BREAK
         case 3:
            YY_RULE_SETUP

            {
               // start of a class definition with indent
               DBG_CTX((stderr, "Found class at %d\n", yyLineNr));
               g_indent = computeIndent(pyscannerYYtext);
               searchFoundClass();
               BEGIN( ClassDec ) ;
            }
            YY_BREAK
         case 4:
            YY_RULE_SETUP

            {
               // start of a class definition
               searchFoundClass();
               BEGIN( ClassDec ) ;
            }
            YY_BREAK
         case 5:

         case 6:
            YY_RULE_SETUP

            {
               // start of an from import
               g_packageCommentAllowed = FALSE;
               BEGIN( FromMod );
            }
            YY_BREAK
         case 7:

         case 8:
            YY_RULE_SETUP

            {
               // start of an import statement
               g_packageCommentAllowed = FALSE;
               BEGIN( Import );
            }
            YY_BREAK
         case 9:
            YY_RULE_SETUP

            {
               // property
               current->section   = Entry::VARIABLE_SEC;
               current->mtype     = Property;
               current->name      = QByteArray(pyscannerYYtext).trimmed();
               current->fileName  = yyFileName;
               current->startLine = yyLineNr;
               current->bodyLine  = yyLineNr;
               g_packageCommentAllowed = FALSE;
               BEGIN(VariableDec);
            }
            YY_BREAK
         case 10:
            /* rule 10 can match eol */
            YY_RULE_SETUP

            {
               // variable
               g_indent = computeIndent(pyscannerYYtext);
               current->section   = Entry::VARIABLE_SEC;
               current->name      = QByteArray(pyscannerYYtext).trimmed();
               current->fileName  = yyFileName;
               current->startLine = yyLineNr;
               current->bodyLine  = yyLineNr;
               g_packageCommentAllowed = FALSE;
               BEGIN(VariableDec);
            }
            YY_BREAK
         case 11:
            YY_RULE_SETUP

            {
               // start of a single quoted string
               g_stringContext = YY_START;
               g_copyString = 0;
               g_packageCommentAllowed = FALSE;
               BEGIN( SingleQuoteString );
            }
            YY_BREAK
         case 12:
            YY_RULE_SETUP

            {
               // start of a double quoted string
               g_stringContext = YY_START;
               g_copyString = 0;
               g_packageCommentAllowed = FALSE;
               BEGIN( DoubleQuoteString );
            }
            YY_BREAK
         case 13:
            YY_RULE_SETUP

            {
               gstat = TRUE;
            }
            YY_BREAK
         case 14:
            YY_RULE_SETUP

            {
               // normal comment
               g_packageCommentAllowed = FALSE;
            }
            YY_BREAK
         case 15:
            YY_RULE_SETUP

            {
               // some other identifier
               g_packageCommentAllowed = FALSE;
            }
            YY_BREAK
         case 16:
            YY_RULE_SETUP

            {
               g_curIndent = computeIndent(pyscannerYYtext);
            }
            YY_BREAK
         case 17:
            /* rule 17 can match eol */
            YY_RULE_SETUP

            {
               // new line
               lineCount();
            }
            YY_BREAK
         case 18:
            YY_RULE_SETUP

            {
               // start of a comment block
               initTriDoubleQuoteBlock();
               BEGIN(TripleComment);
            }
            YY_BREAK
         case 19:
            YY_RULE_SETUP

            {
               // start of a comment block
               initTriSingleQuoteBlock();
               BEGIN(TripleComment);
            }
            YY_BREAK
         case 20:
            /* rule 20 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
            (yy_c_buf_p) = yy_cp = yy_bp + 2;
            YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
            YY_RULE_SETUP

            {
               // start of a special comment
               g_curIndent = computeIndent(pyscannerYYtext);
               g_packageCommentAllowed = FALSE;
               initSpecialBlock();
               BEGIN(SpecialComment);
            }
            YY_BREAK
         case 21:
            YY_RULE_SETUP

            {
               // any other character...
               // This is the major default
               // that should catch everything
               // else in Body.
            }
            YY_BREAK


         case 22:
            YY_RULE_SETUP

            {
               // python3 style imports
            }
            YY_BREAK
         case 23:
            YY_RULE_SETUP

            {
               // from package import
               g_packageName = pyscannerYYtext;
            }
            YY_BREAK
         case 24:
            YY_RULE_SETUP

            {
               BEGIN(FromModItem);
            }
            YY_BREAK
         case 25:
            /* rule 25 can match eol */
            YY_RULE_SETUP

            {
               incLineNr();
               BEGIN(Search);
            }
            YY_BREAK
         case 26:
            YY_RULE_SETUP

            {
            }
            YY_BREAK
         case 27:
            YY_RULE_SETUP

            {
               unput(*pyscannerYYtext);
               BEGIN(Search);
            }
            YY_BREAK


         case 28:
            YY_RULE_SETUP

            {
               // import all
               QByteArray item = g_packageName;
               current->name = removeRedundantWhiteSpace(substitute(item, ".", "::"));
               current->fileName = yyFileName;
               //printf("Adding using directive: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
               current->section = Entry::USINGDIR_SEC;
               current_root->addSubEntry(current);
               current = new Entry ;
               initEntry();
               BEGIN(Search);
            }
            YY_BREAK
         case 29:
            YY_RULE_SETUP
            {
               QByteArray item = g_packageName + "." + QByteArray(pyscannerYYtext);

               current->name = removeRedundantWhiteSpace(substitute(item, ".", "::"));
               current->fileName = yyFileName;

               //printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
               current->section = Entry::USINGDECL_SEC;
               current_root->addSubEntry(current);
               current = new Entry ;
               initEntry();
            }
            YY_BREAK

         case 30:
            YY_RULE_SETUP

            {
               QByteArray item = g_packageName + "." + QByteArray(pyscannerYYtext);
               current->name = removeRedundantWhiteSpace(substitute(item, ".", "::"));
               current->fileName = yyFileName;

               //printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
               current->section = Entry::USINGDECL_SEC;
               current_root->addSubEntry(current);
               current = new Entry ;

               initEntry();
               BEGIN(Search);
            }
            YY_BREAK
         case 31:
            /* rule 31 can match eol */
            YY_RULE_SETUP

            {
               incLineNr();
               BEGIN(Search);
            }
            YY_BREAK
         case 32:
            YY_RULE_SETUP

            {
            }
            YY_BREAK
         case 33:
            YY_RULE_SETUP

            {
            }
            YY_BREAK
         case 34:
            YY_RULE_SETUP

            {
               unput(*pyscannerYYtext);
               BEGIN(Search);
            }
            YY_BREAK


         case 35:
            YY_RULE_SETUP

            {
               current->name = removeRedundantWhiteSpace(substitute(pyscannerYYtext, ".", "::"));
               current->fileName = yyFileName;
               //printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
               current->section = Entry::USINGDECL_SEC;
               current_root->addSubEntry(current);
               current = new Entry ;
               initEntry();
               BEGIN(Search);
            }
            YY_BREAK
         case 36:
            /* rule 36 can match eol */
            YY_RULE_SETUP

            {
               incLineNr();
               BEGIN(Search);
            }
            YY_BREAK
         case 37:
            YY_RULE_SETUP

            {
            }
            YY_BREAK
         case 38:
            YY_RULE_SETUP

            {
               unput(*pyscannerYYtext);
               BEGIN(Search);
            }
            YY_BREAK


         case 39:
            YY_RULE_SETUP

            {
               DBG_CTX((stderr, "Found member variable %s in %s at %d\n", &pyscannerYYtext[5], current_root->name.data(), yyLineNr));
               current->name = &pyscannerYYtext[5];
               current->section = Entry::VARIABLE_SEC;
               current->fileName  = yyFileName;
               current->startLine = yyLineNr;
               current->bodyLine  = yyLineNr;
               current->type.resize(0);
               if (current->name.at(0) == '_') // mark as private
               {
                  current->protection = Private;
               } else
               {
                  current->protection = Public;
               }
               newEntry();
            }
            YY_BREAK
         case 40:
            YY_RULE_SETUP

            {
               // start of a comment block
               initTriDoubleQuoteBlock();
               BEGIN(TripleComment);
            }
            YY_BREAK
         case 41:
            YY_RULE_SETUP

            {
               // start of a comment block
               initTriSingleQuoteBlock();
               BEGIN(TripleComment);
            }
            YY_BREAK
         case 42:
            /* rule 42 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
            (yy_c_buf_p) = yy_cp = yy_bp + 2;
            YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
            YY_RULE_SETUP

            {
               // start of a special comment
               initSpecialBlock();
               BEGIN(SpecialComment);
            }
            YY_BREAK
         case 43:
            YY_RULE_SETUP

            {
               // #
            }
            YY_BREAK
         case 44:
            YY_RULE_SETUP

            {
               // start of a single quoted string
               g_stringContext = YY_START;
               g_copyString = 0;
               BEGIN( SingleQuoteString );
            }
            YY_BREAK
         case 45:
            YY_RULE_SETUP

            {
               // start of a double quoted string
               g_stringContext = YY_START;
               g_copyString = 0;
               BEGIN( DoubleQuoteString );
            }
            YY_BREAK
         case 46:
            /* rule 46 can match eol */
            YY_RULE_SETUP

            { incLineNr(); }
            YY_BREAK
         case 47:
            YY_RULE_SETUP

            // identifiers
            YY_BREAK
         case 48:
            YY_RULE_SETUP

            // other uninteresting stuff
            YY_BREAK
         case 49:
            YY_RULE_SETUP

            // anything else
            YY_BREAK


         case 50:
            /* rule 50 can match eol */
            YY_RULE_SETUP

            {
               DBG_CTX((stderr, "indent %d<=%d\n", computeIndent(&pyscannerYYtext[1]), g_indent));
               if (computeIndent(&pyscannerYYtext[1]) <= g_indent)
               {
                  int i;
                  for (i = (int)pyscannerYYleng - 1; i >= 0; i--) {
                     unput(pyscannerYYtext[i]);
                  }
                  endOfDef();
                  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                  BEGIN(Search);
               } else
               {
                  incLineNr();
                  current->program += pyscannerYYtext;
               }
            }
            YY_BREAK
         case 51:
            /* rule 51 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
            (yy_c_buf_p) = yy_cp -= 2;
            YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
            YY_RULE_SETUP

            {
               if (computeIndent(&pyscannerYYtext[1]) <= g_indent)
               {
                  int i;
                  for (i = (int)pyscannerYYleng - 1; i >= 0; i--) {
                     unput(pyscannerYYtext[i]);
                  }
                  endOfDef();
                  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                  BEGIN(Search);
               } else
               {
                  incLineNr();
                  current->program += pyscannerYYtext;
               }
            }
            YY_BREAK
         case YY_STATE_EOF(FunctionBody):

         {
            endOfDef();
            yyterminate();
         }
         YY_BREAK
         case 52:
            /* rule 52 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
            YY_RULE_SETUP

            {
               // skip empty line
               current->program += pyscannerYYtext;
            }
            YY_BREAK
         case 53:
            YY_RULE_SETUP

            {
               // something at indent >0
               current->program += pyscannerYYtext;
               g_curIndent = computeIndent(pyscannerYYtext);
               if (g_curIndent <= g_indent)
                  // jumped out of the function
               {
                  endOfDef(1);
                  BEGIN(Search);
               }
            }
            YY_BREAK
         case 54:
            YY_RULE_SETUP

            {
               // start of a single quoted string
               current->program += pyscannerYYtext;
               g_stringContext = YY_START;
               g_specialBlock = FALSE;
               g_copyString = &current->program;
               BEGIN( SingleQuoteString );
            }
            YY_BREAK
         case 55:
            YY_RULE_SETUP

            {
               // start of a double quoted string
               current->program += pyscannerYYtext;
               g_stringContext = YY_START;
               g_specialBlock = FALSE;
               g_copyString = &current->program;
               BEGIN( DoubleQuoteString );
            }
            YY_BREAK
         case 56:
            YY_RULE_SETUP

            {
               // non-special stuff
               current->program += pyscannerYYtext;
               g_specialBlock = FALSE;
            }
            YY_BREAK
         case 57:
            YY_RULE_SETUP

            {
               // normal comment
               current->program += pyscannerYYtext;
            }
            YY_BREAK
         case 58:
            YY_RULE_SETUP

            {
               // comment half way
               current->program += pyscannerYYtext;
            }
            YY_BREAK
         case 59:
            /* rule 59 can match eol */
            YY_RULE_SETUP

            {
               incLineNr();
               current->program += pyscannerYYtext;
            }
            YY_BREAK
         case 60:
            YY_RULE_SETUP

            {
               // any character
               current->program += *pyscannerYYtext;
               g_specialBlock = FALSE;
            }
            YY_BREAK
         case 61:
            YY_RULE_SETUP

            {
               // start of a comment block
               current->program += pyscannerYYtext;
               initTriDoubleQuoteBlock();
               BEGIN(TripleComment);
            }
            YY_BREAK
         case 62:
            YY_RULE_SETUP

            {
               // start of a comment block
               current->program += pyscannerYYtext;
               initTriSingleQuoteBlock();
               BEGIN(TripleComment);
            }
            YY_BREAK
         case 63:
            /* rule 63 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
            (yy_c_buf_p) = yy_cp = yy_bp + 2;
            YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
            YY_RULE_SETUP

            {
               // start of a special comment
               initSpecialBlock();
               BEGIN(SpecialComment);
            }
            YY_BREAK


         case 64:
            YY_RULE_SETUP

            {
               //found function name
               if (current->type.isEmpty())
               {
                  current->type = "def";
               }
               current->name = pyscannerYYtext;
               current->name = current->name.trimmed();
               newFunction();
            }
            YY_BREAK
         case 65:
            YY_RULE_SETUP

            {
               // function without arguments
               g_specialBlock = TRUE; // expecting a docstring
               bodyEntry = current;
               current->bodyLine  = yyLineNr;
               BEGIN( FunctionBody );
            }
            YY_BREAK
         case 66:
            YY_RULE_SETUP

            {
               BEGIN( FunctionParams );
            }
            YY_BREAK


         case 67:
            YY_RULE_SETUP

            {
            }
            YY_BREAK
         case 68:
            YY_RULE_SETUP

            {
               // Name of parameter
               lineCount();
              
               current->argList.append( Argument() );
               current->argList.last().name = QByteArray(pyscannerYYtext).trimmed();
               current->argList.last().type = "";
            }
            YY_BREAK

         case 69:
            YY_RULE_SETUP

            {
               // default value
               // TODO: this rule is too simple, need to be able to
               // match things like =")" as well!
               QByteArray defVal = &pyscannerYYtext[1];
               g_defVal.resize(0);
               g_braceCount = 0;
               BEGIN(FunctionParamDefVal);
            }
            YY_BREAK
         case 70:
            YY_RULE_SETUP

            {
               // end of parameter list
               current->args = argListToString(&(current->argList));
            }
            YY_BREAK
         case 71:
            YY_RULE_SETUP

            {
               g_specialBlock = TRUE; // expecting a docstring
               bodyEntry = current;
               current->bodyLine  = yyLineNr;
               BEGIN( FunctionBody );
            }
            YY_BREAK
         case 72:
            YY_RULE_SETUP

            {
               // a comment
            }
            YY_BREAK
         case 73:
            YY_RULE_SETUP

            {
               // Default rule inside arguments.
            }
            YY_BREAK


         case 74:
            YY_RULE_SETUP

            {
               // internal opening brace
               g_braceCount++;
               g_defVal += *pyscannerYYtext;
            }
            YY_BREAK
         case 75:

         case 76:
            YY_RULE_SETUP

            {
               if (g_braceCount == 0) // end of default argument
               {
                  if (! current->argList.isEmpty()) {
                     current->argList.last().defval = g_defVal.trimmed();
                  }

                  BEGIN(FunctionParams);

               } else // continue
               {
                  g_braceCount--;
                  g_defVal += *pyscannerYYtext;
               }
            }
            YY_BREAK

         case 77:
            YY_RULE_SETUP

            {
               g_defVal += *pyscannerYYtext;
            }
            YY_BREAK
         case 78:
            /* rule 78 can match eol */
            YY_RULE_SETUP

            {
               g_defVal += *pyscannerYYtext;
               incLineNr();
            }
            YY_BREAK


         case 79:
            /* rule 79 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
            (yy_c_buf_p) = yy_cp = yy_bp + 1;
            YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
            YY_RULE_SETUP

            {
               // new def at indent 0
               incLineNr();
               endOfDef();
               //g_hideClassDocs = FALSE;
               //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
               BEGIN(Search);
            }
            YY_BREAK
         case 80:
            /* rule 80 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
            (yy_c_buf_p) = yy_cp = yy_bp + 1;
            YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
            YY_RULE_SETUP

            {
               // start of a special comment at indent 0
               incLineNr();
               endOfDef();
               //g_hideClassDocs = FALSE;
               //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
               BEGIN(Search);
            }
            YY_BREAK
         case 81:
            /* rule 81 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
            YY_RULE_SETUP

            {
               // skip empty line
               current->program += pyscannerYYtext;
            }
            YY_BREAK
         case YY_STATE_EOF(ClassBody):

         {
            endOfDef();
            yyterminate();
         }
         YY_BREAK
         case 82:
            YY_RULE_SETUP

            {
               // something at indent >0
               g_curIndent = computeIndent(pyscannerYYtext);
               DBG_CTX((stderr, "g_curIndent=%d g_indent=%d\n", g_curIndent, g_indent));
               if (g_curIndent <= g_indent)
                  // jumped out of the class/method
               {
                  endOfDef(1);
                  g_indent = g_curIndent;
                  // make sure the next rule matches ^...
                  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                  //g_hideClassDocs = FALSE;
                  BEGIN(Search);
               } else
               {
                  current->program += pyscannerYYtext;
               }
            }
            YY_BREAK
         case 83:
            YY_RULE_SETUP

            {
               // start of a single quoted string
               current->program += *pyscannerYYtext;
               g_stringContext = YY_START;
               g_specialBlock = FALSE;
               g_copyString = &current->program;
               BEGIN( SingleQuoteString );
            }
            YY_BREAK
         case 84:
            YY_RULE_SETUP

            {
               // start of a double quoted string
               current->program += *pyscannerYYtext;
               g_stringContext = YY_START;
               g_specialBlock = FALSE;
               g_copyString = &current->program;
               BEGIN( DoubleQuoteString );
            }
            YY_BREAK
         case 85:
            YY_RULE_SETUP

            {
               // non-special stuff
               current->program += pyscannerYYtext;
               g_specialBlock = FALSE;
               //g_hideClassDocs = FALSE;
            }
            YY_BREAK
         case 86:
            /* rule 86 can match eol */
            YY_RULE_SETUP

            {
               current->program += *pyscannerYYtext;
               incLineNr();
            }
            YY_BREAK
         case 87:
            YY_RULE_SETUP

            {
               // normal comment
               current->program += pyscannerYYtext;
            }
            YY_BREAK
         case 88:
            YY_RULE_SETUP

            {
               // any character
               g_specialBlock = FALSE;
               current->program += *pyscannerYYtext;
            }
            YY_BREAK
         case 89:
            YY_RULE_SETUP

            {
               // start of a comment block
               //if (!g_hideClassDocs)
               current->program += pyscannerYYtext;
               initTriDoubleQuoteBlock();
               BEGIN(TripleComment);
            }
            YY_BREAK
         case 90:
            YY_RULE_SETUP

            {
               // start of a comment block
               //if (!g_hideClassDocs)
               current->program += pyscannerYYtext;
               initTriSingleQuoteBlock();
               BEGIN(TripleComment);
            }
            YY_BREAK

         case 91:
            YY_RULE_SETUP

            {
               if (current->type.isEmpty())
               {
                  current->type = "class";
               }

               current->section = Entry::CLASS_SEC;
               current->name = pyscannerYYtext;

               // prepend scope in case of nested classes
               if (current_root->section & Entry::SCOPE_MASK)
               {
                  //printf("*** Prepending scope %s to class %s\n",current_root->name.data(),current->name.data());
                  current->name.prepend(current_root->name + "::");
               }

               current->name = current->name.trimmed();
               current->fileName = yyFileName;
               docBlockContext   = YY_START;
               docBlockInBody    = FALSE;
               docBlockJavaStyle = FALSE;
               docBlock.resize(0);

               BEGIN(ClassInheritance);
            }
            YY_BREAK

         case 92:
            YY_RULE_SETUP

            {
               // syntactic sugar for the list
            }
            YY_BREAK
         case 93:
            YY_RULE_SETUP

            {
               // begin of the class definition
               g_specialBlock = TRUE; // expecting a docstring
               current->bodyLine  = yyLineNr;
               current->program.resize(0);
               BEGIN(ClassCaptureIndent);
            }
            YY_BREAK
         case 94:
            YY_RULE_SETUP

            {
               current->extends.append(BaseInfo(substitute(pyscannerYYtext, ".", "::"), Public, Normal));
               //Has base class-do stuff
            }
            YY_BREAK


         case 95:
            /* rule 95 can match eol */
            YY_RULE_SETUP

            {
               // Blankline - ignore, keep looking for indentation.
               lineCount();
               current->program += pyscannerYYtext;
            }
            YY_BREAK
         case 96:
            YY_RULE_SETUP

            {
               // start of a comment block
               initTriDoubleQuoteBlock();
               current->program += pyscannerYYtext;
               BEGIN(TripleComment);
            }
            YY_BREAK
         case 97:
            YY_RULE_SETUP

            {
               // start of a comment block
               initTriSingleQuoteBlock();
               current->program += pyscannerYYtext;
               BEGIN(TripleComment);
            }
            YY_BREAK
         case 98:
            YY_RULE_SETUP

            {
               current->program += pyscannerYYtext;
               //current->startLine = yyLineNr;
               g_curIndent = computeIndent(pyscannerYYtext);
               bodyEntry = current;
               DBG_CTX((stderr, "setting indent %d\n", g_curIndent));
               //printf("current->program=[%s]\n",current->program.data());
               //g_hideClassDocs = TRUE;
               BEGIN(ClassBody);
            }
            YY_BREAK
         case 99:
            YY_RULE_SETUP

            {

               // Just pushback an empty class, and
               // resume parsing the body.
               newEntry();
               current->program += pyscannerYYtext;

               // printf("Failed to find indent - skipping!");
               BEGIN( Search );
            }
            YY_BREAK


         case 100:
            YY_RULE_SETUP

            {
               // the assignment operator
               //printf("====== VariableDec at line %d\n",yyLineNr);
               current->initializer = pyscannerYYtext;
               current->initializer += " ";
            }
            YY_BREAK
         case 101:
            YY_RULE_SETUP

            {
               // spaces
            }
            YY_BREAK
         case 102:
            YY_RULE_SETUP

            {
               // integer value
               current->type = "int";
               current->initializer += pyscannerYYtext;
               BEGIN(VariableEnd);
            }
            YY_BREAK
         case 103:
            YY_RULE_SETUP

            {
               // floating point value
               current->type = "float";
               current->initializer += pyscannerYYtext;
               BEGIN(VariableEnd);
            }
            YY_BREAK
         case 104:
            YY_RULE_SETUP

            {
               // string
               current->type = "string";
               current->initializer += pyscannerYYtext;
               g_copyString = &current->initializer;
               g_stringContext = VariableEnd;
               BEGIN( SingleQuoteString );
            }
            YY_BREAK
         case 105:
            YY_RULE_SETUP

            {
               // string
               current->type = "string";
               current->initializer += pyscannerYYtext;
               g_copyString = &current->initializer;
               g_stringContext = VariableEnd;
               BEGIN( DoubleQuoteString );
            }
            YY_BREAK
         case 106:
            YY_RULE_SETUP

            {
               // start of a comment block
               current->type = "string";
               current->initializer += pyscannerYYtext;
               g_doubleQuote = TRUE;
               g_copyString = &current->initializer;
               g_stringContext = VariableEnd;
               BEGIN(TripleString);
            }
            YY_BREAK
         case 107:
            YY_RULE_SETUP

            {
               // start of a comment block
               current->type = "string";
               current->initializer += pyscannerYYtext;
               g_doubleQuote = FALSE;
               g_copyString = &current->initializer;
               g_stringContext = VariableEnd;
               BEGIN(TripleString);
            }
            YY_BREAK
         case 108:
            YY_RULE_SETUP

            {
               // tuple
               if (current->mtype != Property)
               {
                  current->type = "tuple";
               }
               current->initializer += *pyscannerYYtext;
               g_atomStart = '(';
               g_atomEnd = ')';
               g_atomCount = 1;
               BEGIN( VariableAtom );
            }
            YY_BREAK
         case 109:
            YY_RULE_SETUP

            {
               // list
               current->type = "list";
               current->initializer += *pyscannerYYtext;
               g_atomStart = '[';
               g_atomEnd = ']';
               g_atomCount = 1;
               BEGIN( VariableAtom );
            }
            YY_BREAK
         case 110:
            YY_RULE_SETUP

            {
               // dictionary
               current->type = "dictionary";
               current->initializer += *pyscannerYYtext;
               g_atomStart = '{';
               g_atomEnd = '}';
               g_atomCount = 1;
               BEGIN( VariableAtom );
            }
            YY_BREAK
         case 111:
            YY_RULE_SETUP

            {
               // comment
               BEGIN( VariableEnd );
            }
            YY_BREAK
         case 112:
            YY_RULE_SETUP

            {
               current->initializer += pyscannerYYtext;
            }
            YY_BREAK
         case 113:
            YY_RULE_SETUP

            {
               current->initializer += *pyscannerYYtext;
            }
            YY_BREAK
         case 114:
            /* rule 114 can match eol */
            YY_RULE_SETUP

            {
               unput('\n');
               BEGIN( VariableEnd );
            }
            YY_BREAK


         case 115:
            YY_RULE_SETUP

            {
               current->initializer += *pyscannerYYtext;
               if (g_atomStart == *pyscannerYYtext)
               {
                  g_atomCount++;
               }
            }
            YY_BREAK
         case 116:
            YY_RULE_SETUP

            {
               current->initializer += *pyscannerYYtext;
               if (g_atomEnd == *pyscannerYYtext)
               {
                  g_atomCount--;
               }
               if (g_atomCount == 0)
               {
                  BEGIN(VariableEnd);
               }
            }
            YY_BREAK
         case 117:
            YY_RULE_SETUP

            {
               // start of a comment block
               g_specialBlock = FALSE;
               current->program += pyscannerYYtext;
               initTriDoubleQuoteBlock();
               BEGIN(TripleComment);
            }
            YY_BREAK
         case 118:
            YY_RULE_SETUP

            {
               // start of a comment block
               g_specialBlock = FALSE;
               current->program += pyscannerYYtext;
               initTriSingleQuoteBlock();
               BEGIN(TripleComment);
            }
            YY_BREAK
         case 119:
            YY_RULE_SETUP

            {
               g_stringContext = YY_START;
               current->initializer += "\"";
               g_copyString = &current->initializer;
               BEGIN( DoubleQuoteString );
            }
            YY_BREAK
         case 120:
            YY_RULE_SETUP

            {
               current->initializer += pyscannerYYtext;
            }
            YY_BREAK
         case 121:
            YY_RULE_SETUP

            {
               current->initializer += *pyscannerYYtext;
            }
            YY_BREAK
         case 122:
            /* rule 122 can match eol */
            YY_RULE_SETUP

            {
               current->initializer += *pyscannerYYtext;
               incLineNr();
            }
            YY_BREAK


         case 123:
            /* rule 123 can match eol */
            YY_RULE_SETUP

            {
               incLineNr();
               newVariable();
               BEGIN(Search);
            }
            YY_BREAK
         case 124:
            YY_RULE_SETUP

            {
               unput(*pyscannerYYtext);
               newVariable();
               BEGIN(Search);
            }
            YY_BREAK
         case YY_STATE_EOF(VariableEnd):

         {
            yyterminate();
            newEntry();
         }
         YY_BREAK


         case 125:

         case 126:
            YY_RULE_SETUP

            {
               // printf("Expected module block %d special=%d\n",g_expectModuleDocs,g_specialBlock);
               if (g_doubleQuote == (pyscannerYYtext[0] == '"'))
               {
                  if (g_specialBlock) { // expecting a docstring
                     QByteArray actualDoc = docBlock;
                     if (!docBlockSpecial) { // legacy unformatted docstring
                        actualDoc.prepend("\\verbatim ");
                        actualDoc.append("\\endverbatim ");
                     }
                     //printf("-------> current=%p bodyEntry=%p\n",current,bodyEntry);
                     handleCommentBlock(actualDoc, FALSE);
                  } else if (g_packageCommentAllowed) { // expecting module docs
                     QByteArray actualDoc = docBlock;
                     if (!docBlockSpecial) { // legacy unformatted docstring
                        actualDoc.prepend("\\verbatim ");
                        actualDoc.append("\\endverbatim ");
                     }
                     actualDoc.prepend("\\namespace " + g_moduleScope + "\\_linebr ");
                     handleCommentBlock(actualDoc, FALSE);
                  }
                  if ((docBlockContext == ClassBody /*&& !g_hideClassDocs*/) ||
                        docBlockContext == FunctionBody) {
                     current->program += docBlock;
                     current->program += pyscannerYYtext;
                  }
                  //if (g_hideClassDocs)
                  //{
                  //  current->startLine = yyLineNr;
                  //}
                  //g_hideClassDocs=FALSE;
                  BEGIN(docBlockContext);
               } else
               {
                  docBlock += pyscannerYYtext;
               }
               g_packageCommentAllowed = FALSE;
            }
            YY_BREAK
         case 127:
            YY_RULE_SETUP

            {
               // leading whitespace
               int indent = computeIndent(pyscannerYYtext);
               if (indent >= g_curIndent)
               {
                  // strip g_curIndent amount of whitespace
                  int i;
                  for (i = 0; i < indent - g_curIndent; i++) {
                     docBlock += ' ';
                  }
                  DBG_CTX((stderr, "stripping indent %d\n", g_curIndent));
               } else
               {
                  DBG_CTX((stderr, "not stripping: %d<%d\n", indent, g_curIndent));
                  docBlock += pyscannerYYtext;
               }
            }
            YY_BREAK
         case 128:
            YY_RULE_SETUP

            {
               docBlock += pyscannerYYtext;
            }
            YY_BREAK
         case 129:
            /* rule 129 can match eol */
            YY_RULE_SETUP

            {
               incLineNr();
               docBlock += pyscannerYYtext;
            }
            YY_BREAK
         case 130:
            YY_RULE_SETUP

            {
               docBlock += pyscannerYYtext;
            }
            YY_BREAK


         case 131:
            YY_RULE_SETUP

            {
               // skip leading hashes
            }
            YY_BREAK
         case 132:
            /* rule 132 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up pyscannerYYtext */
            (yy_c_buf_p) = yy_cp = yy_bp + 1;
            YY_DO_BEFORE_ACTION; /* set up pyscannerYYtext again */
            YY_RULE_SETUP

            {
               // continuation of the comment on the next line
               docBlock += '\n';
               docBrief = FALSE;
               startCommentBlock(FALSE);
               incLineNr();
            }
            YY_BREAK
         case 133:
            YY_RULE_SETUP

            {
               // any other stuff
               docBlock += pyscannerYYtext;
            }
            YY_BREAK
         case 134:
            /* rule 134 can match eol */
            YY_RULE_SETUP

            {
               // new line that ends the comment
               handleCommentBlock(docBlock, docBrief);
               incLineNr();
               BEGIN(docBlockContext);
            }
            YY_BREAK
         case 135:
            YY_RULE_SETUP

            {
               // anything we missed
               docBlock += *pyscannerYYtext;
            }
            YY_BREAK


         case 136:
            /* rule 136 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               addToString(pyscannerYYtext);
               incLineNr();
            }
            YY_BREAK
         case 137:
            YY_RULE_SETUP

            {
               // espaced char
               addToString(pyscannerYYtext);
            }
            YY_BREAK
         case 138:
            YY_RULE_SETUP

            {
               // tripple double quotes
               addToString(pyscannerYYtext);
            }
            YY_BREAK
         case 139:
            YY_RULE_SETUP

            {
               // end of the string
               addToString(pyscannerYYtext);
               BEGIN(g_stringContext);
            }
            YY_BREAK
         case 140:
            YY_RULE_SETUP

            {
               // normal chars
               addToString(pyscannerYYtext);
            }
            YY_BREAK
         case 141:
            YY_RULE_SETUP

            {
               // normal char
               addToString(pyscannerYYtext);
            }
            YY_BREAK


         case 142:
            /* rule 142 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               addToString(pyscannerYYtext);
               incLineNr();
            }
            YY_BREAK
         case 143:
            YY_RULE_SETUP

            {
               // espaced char
               addToString(pyscannerYYtext);
            }
            YY_BREAK
         case 144:
            YY_RULE_SETUP

            {
               // tripple single quotes
               addToString(pyscannerYYtext);
            }
            YY_BREAK
         case 145:
            YY_RULE_SETUP

            {
               // end of the string
               addToString(pyscannerYYtext);
               BEGIN(g_stringContext);
            }
            YY_BREAK
         case 146:
            YY_RULE_SETUP

            {
               // normal chars
               addToString(pyscannerYYtext);
            }
            YY_BREAK
         case 147:
            YY_RULE_SETUP

            {
               // normal char
               addToString(pyscannerYYtext);
            }
            YY_BREAK


         case 148:

         case 149:
            YY_RULE_SETUP

            {
               *g_copyString += pyscannerYYtext;
               if (g_doubleQuote == (pyscannerYYtext[0] == '"'))
               {
                  BEGIN(g_stringContext);
               }
            }
            YY_BREAK
         case 150:
            /* rule 150 can match eol */
            YY_RULE_SETUP

            {
               lineCount();
               *g_copyString += pyscannerYYtext;
            }
            YY_BREAK
         case 151:
            /* rule 151 can match eol */
            YY_RULE_SETUP

            {
               incLineNr();
               *g_copyString += pyscannerYYtext;
            }
            YY_BREAK
         case 152:
            YY_RULE_SETUP

            {
               *g_copyString += *pyscannerYYtext;
            }
            YY_BREAK

         /* ------------ End rules -------------- */
         /*
         <*>({NONEMPTY}|{EXPCHAR}|{BB})           { // This should go one character at a time.
         				 // printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
         				 //       pyscannerYYtext, YY_START, yyLineNr);

                                        }
           */
         case 153:
            /* rule 153 can match eol */
            YY_RULE_SETUP

            {
               //printf("[pyscanner] %d NEWLINE [line %d] no match\n",
               //       YY_START, yyLineNr);

               lineCount();
            }
            YY_BREAK
         case 154:
            YY_RULE_SETUP

            {
               //printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
               //       pyscannerYYtext, YY_START, yyLineNr);

            }
            YY_BREAK
         case 155:
            YY_RULE_SETUP

            ECHO;
            YY_BREAK

         case YY_STATE_EOF(INITIAL):
         case YY_STATE_EOF(Search):
         case YY_STATE_EOF(SearchMemVars):
         case YY_STATE_EOF(TryClassDocString):
         case YY_STATE_EOF(TripleComment):
         case YY_STATE_EOF(SpecialComment):
         case YY_STATE_EOF(FunctionDec):
         case YY_STATE_EOF(FunctionParams):
         case YY_STATE_EOF(FunctionParamDefVal):
         case YY_STATE_EOF(ClassDec):
         case YY_STATE_EOF(ClassInheritance):
         case YY_STATE_EOF(ClassCaptureIndent):
         case YY_STATE_EOF(VariableDec):
         case YY_STATE_EOF(VariableAtom):
         case YY_STATE_EOF(SingleQuoteString):
         case YY_STATE_EOF(DoubleQuoteString):
         case YY_STATE_EOF(TripleString):
         case YY_STATE_EOF(FromMod):
         case YY_STATE_EOF(FromModItem):
         case YY_STATE_EOF(Import):
            yyterminate();

         case YY_END_OF_BUFFER: {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = (yy_hold_char);
            YY_RESTORE_YY_MORE_OFFSET

            if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW ) {
               /* We're scanning a new file or input source.  It's
                * possible that this happened because the user
                * just pointed pyscannerYYin at a new source and called
                * pyscannerYYlex().  If so, then we have to assure
                * consistency between YY_CURRENT_BUFFER and our
                * globals.  Here is the right place to do so, because
                * this is the first action (other than possibly a
                * back-up) that will match for the new input source.
                */
               (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
               YY_CURRENT_BUFFER_LVALUE->yy_input_file = pyscannerYYin;
               YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
            }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] ) {
               /* This was really a NUL. */
               yy_state_type yy_next_state;

               (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

               yy_current_state = yy_get_previous_state(  );

               /* Okay, we're now positioned to make the NUL
                * transition.  We couldn't have
                * yy_get_previous_state() go ahead and do it
                * for us because it doesn't know how to deal
                * with the possibility of jamming (and we don't
                * want to build jamming into it because then it
                * will run more slowly).
                */

               yy_next_state = yy_try_NUL_trans( yy_current_state );

               yy_bp = (yytext_ptr) + YY_MORE_ADJ;

               if ( yy_next_state ) {
                  /* Consume the NUL. */
                  yy_cp = ++(yy_c_buf_p);
                  yy_current_state = yy_next_state;
                  goto yy_match;
               }

               else {
                  yy_cp = (yy_c_buf_p);
                  goto yy_find_action;
               }
            }

            else switch ( yy_get_next_buffer(  ) ) {
                  case EOB_ACT_END_OF_FILE: {
                     (yy_did_buffer_switch_on_eof) = 0;

                     if ( pyscannerYYwrap( ) ) {
                        /* Note: because we've taken care in
                         * yy_get_next_buffer() to have set up
                         * pyscannerYYtext, we can now set up
                         * yy_c_buf_p so that if some total
                         * hoser (like flex itself) wants to
                         * call the scanner after we return the
                         * YY_NULL, it'll still work - another
                         * YY_NULL will get returned.
                         */
                        (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                        yy_act = YY_STATE_EOF(YY_START);
                        goto do_action;
                     }

                     else {
                        if ( ! (yy_did_buffer_switch_on_eof) ) {
                           YY_NEW_FILE;
                        }
                     }
                     break;
                  }

                  case EOB_ACT_CONTINUE_SCAN:
                     (yy_c_buf_p) =
                        (yytext_ptr) + yy_amount_of_matched_text;

                     yy_current_state = yy_get_previous_state(  );

                     yy_cp = (yy_c_buf_p);
                     yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                     goto yy_match;

                  case EOB_ACT_LAST_MATCH:
                     (yy_c_buf_p) =
                        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                     yy_current_state = yy_get_previous_state(  );

                     yy_cp = (yy_c_buf_p);
                     yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                     goto yy_find_action;
               }
            break;
         }

         default:
            YY_FATAL_ERROR(
               "fatal flex scanner internal error--no action found" );
      } /* end of action switch */
   } /* end of scanning one token */
} /* end of pyscannerYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
   register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
   register char *source = (yytext_ptr);
   register int number_to_move, i;
   int ret_val;

   if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
      YY_FATAL_ERROR(
         "fatal flex scanner internal error--end of buffer missed" );

   if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 ) {
      /* Don't try to fill the buffer, so this is an EOF. */
      if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 ) {
         /* We matched a single character, the EOB, so
          * treat this as a final EOF.
          */
         return EOB_ACT_END_OF_FILE;
      }

      else {
         /* We matched some text prior to the EOB, first
          * process it.
          */
         return EOB_ACT_LAST_MATCH;
      }
   }

   /* Try to read more data. */

   /* First move last chars to start of buffer. */
   number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

   for ( i = 0; i < number_to_move; ++i ) {
      *(dest++) = *(source++);
   }

   if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
      /* don't do the read, it's not guaranteed to return an EOF,
       * just force an EOF
       */
   {
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
   }

   else {
      int num_to_read =
         YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

      while ( num_to_read <= 0 ) {
         /* Not enough room in the buffer - grow it. */

         YY_FATAL_ERROR(
            "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

      }

      if ( num_to_read > YY_READ_BUF_SIZE ) {
         num_to_read = YY_READ_BUF_SIZE;
      }

      /* Read in more data. */
      YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
                (yy_n_chars), (size_t) num_to_read );

      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
   }

   if ( (yy_n_chars) == 0 ) {
      if ( number_to_move == YY_MORE_ADJ ) {
         ret_val = EOB_ACT_END_OF_FILE;
         pyscannerYYrestart(pyscannerYYin  );
      }

      else {
         ret_val = EOB_ACT_LAST_MATCH;
         YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
      }
   }

   else {
      ret_val = EOB_ACT_CONTINUE_SCAN;
   }

   if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
      /* Extend the array by 50%, plus the number we really need. */
      yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
      YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pyscannerYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size  );
      if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf ) {
         YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
      }
   }

   (yy_n_chars) += number_to_move;
   YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
   YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

   (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

   return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state (void)
{
   register yy_state_type yy_current_state;
   register char *yy_cp;

   yy_current_state = (yy_start);
   yy_current_state += YY_AT_BOL();

   (yy_state_ptr) = (yy_state_buf);
   *(yy_state_ptr)++ = yy_current_state;

   for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp ) {
      register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
      while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state ) {
         yy_current_state = (int) yy_def[yy_current_state];
         if ( yy_current_state >= 461 ) {
            yy_c = yy_meta[(unsigned int) yy_c];
         }
      }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
      *(yy_state_ptr)++ = yy_current_state;
   }

   return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
   register int yy_is_jam;

   register YY_CHAR yy_c = 1;
   while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state ) {
      yy_current_state = (int) yy_def[yy_current_state];
      if ( yy_current_state >= 461 ) {
         yy_c = yy_meta[(unsigned int) yy_c];
      }
   }
   yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
   yy_is_jam = (yy_current_state == 460);
   if ( ! yy_is_jam ) {
      *(yy_state_ptr)++ = yy_current_state;
   }

   return yy_is_jam ? 0 : yy_current_state;
}

static void yyunput (int c, register char *yy_bp )
{
   register char *yy_cp;

   yy_cp = (yy_c_buf_p);

   /* undo effects of setting up pyscannerYYtext */
   *yy_cp = (yy_hold_char);

   if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 ) {
      /* need to shift things up to make room */
      /* +2 for EOB chars. */
      register int number_to_move = (yy_n_chars) + 2;
      register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                               YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
      register char *source =
         &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

      while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf ) {
         *--dest = *--source;
      }

      yy_cp += (int) (dest - source);
      yy_bp += (int) (dest - source);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
         (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

      if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 ) {
         YY_FATAL_ERROR( "flex scanner push-back overflow" );
      }
   }

   *--yy_cp = (char) c;

   (yytext_ptr) = yy_bp;
   (yy_hold_char) = *yy_cp;
   (yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput (void)
#else
static int input  (void)
#endif

{
   int c;

   *(yy_c_buf_p) = (yy_hold_char);

   if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR ) {
      /* yy_c_buf_p now points to the character we want to return.
       * If this occurs *before* the EOB characters, then it's a
       * valid NUL; if not, then we've hit the end of the buffer.
       */
      if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
         /* This was really a NUL. */
      {
         *(yy_c_buf_p) = '\0';
      }

      else {
         /* need more input */
         int offset = (yy_c_buf_p) - (yytext_ptr);
         ++(yy_c_buf_p);

         switch ( yy_get_next_buffer(  ) ) {
            case EOB_ACT_LAST_MATCH:
               /* This happens because yy_g_n_b()
                * sees that we've accumulated a
                * token and flags that we need to
                * try matching the token before
                * proceeding.  But for input(),
                * there's no matching to consider.
                * So convert the EOB_ACT_LAST_MATCH
                * to EOB_ACT_END_OF_FILE.
                */

               /* Reset buffer status. */
               pyscannerYYrestart(pyscannerYYin );

            /*FALLTHROUGH*/

            case EOB_ACT_END_OF_FILE: {
               if ( pyscannerYYwrap( ) ) {
                  return EOF;
               }

               if ( ! (yy_did_buffer_switch_on_eof) ) {
                  YY_NEW_FILE;
               }
#ifdef __cplusplus
               return yyinput();
#else
               return input();
#endif
            }

            case EOB_ACT_CONTINUE_SCAN:
               (yy_c_buf_p) = (yytext_ptr) + offset;
               break;
         }
      }
   }

   c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
   *(yy_c_buf_p) = '\0';	/* preserve pyscannerYYtext */
   (yy_hold_char) = *++(yy_c_buf_p);

   YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

   return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void pyscannerYYrestart  (FILE *input_file )
{

   if ( ! YY_CURRENT_BUFFER ) {
      pyscannerYYensure_buffer_stack ();
      YY_CURRENT_BUFFER_LVALUE =
         pyscannerYY_create_buffer(pyscannerYYin, YY_BUF_SIZE );
   }

   pyscannerYY_init_buffer(YY_CURRENT_BUFFER, input_file );
   pyscannerYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void pyscannerYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

   /* TODO. We should be able to replace this entire function body
    * with
    *		pyscannerYYpop_buffer_state();
    *		pyscannerYYpush_buffer_state(new_buffer);
     */
   pyscannerYYensure_buffer_stack ();
   if ( YY_CURRENT_BUFFER == new_buffer ) {
      return;
   }

   if ( YY_CURRENT_BUFFER ) {
      /* Flush out information for old buffer. */
      *(yy_c_buf_p) = (yy_hold_char);
      YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
   }

   YY_CURRENT_BUFFER_LVALUE = new_buffer;
   pyscannerYY_load_buffer_state( );

   /* We don't actually know whether we did this switch during
    * EOF (pyscannerYYwrap()) processing, but the only time this flag
    * is looked at is after pyscannerYYwrap() is called, so it's safe
    * to go ahead and always set it.
    */
   (yy_did_buffer_switch_on_eof) = 1;
}

static void pyscannerYY_load_buffer_state  (void)
{
   (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
   (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
   pyscannerYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
   (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE pyscannerYY_create_buffer  (FILE *file, int  size )
{
   YY_BUFFER_STATE b;

   b = (YY_BUFFER_STATE) pyscannerYYalloc(sizeof( struct yy_buffer_state )  );
   if ( ! b ) {
      YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_create_buffer()" );
   }

   b->yy_buf_size = size;

   /* yy_ch_buf has to be 2 characters longer than the size given because
    * we need to put in 2 end-of-buffer characters.
    */
   b->yy_ch_buf = (char *) pyscannerYYalloc(b->yy_buf_size + 2  );
   if ( ! b->yy_ch_buf ) {
      YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_create_buffer()" );
   }

   b->yy_is_our_buffer = 1;

   pyscannerYY_init_buffer(b, file );

   return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pyscannerYY_create_buffer()
 *
 */
void pyscannerYY_delete_buffer (YY_BUFFER_STATE  b )
{

   if ( ! b ) {
      return;
   }

   if ( b == YY_CURRENT_BUFFER ) { /* Not sure if we should pop here. */
      YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
   }

   if ( b->yy_is_our_buffer ) {
      pyscannerYYfree((void *) b->yy_ch_buf  );
   }

   pyscannerYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pyscannerYYrestart() or at EOF.
 */
static void pyscannerYY_init_buffer  (YY_BUFFER_STATE  b, FILE *file )

{
   int oerrno = errno;

   pyscannerYY_flush_buffer(b );

   b->yy_input_file = file;
   b->yy_fill_buffer = 1;

   /* If b is the current buffer, then pyscannerYY_init_buffer was _probably_
    * called from pyscannerYYrestart() or through yy_get_next_buffer.
    * In that case, we don't want to reset the lineno or column.
    */
   if (b != YY_CURRENT_BUFFER) {
      b->yy_bs_lineno = 1;
      b->yy_bs_column = 0;
   }

   b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

   errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void pyscannerYY_flush_buffer (YY_BUFFER_STATE  b )
{
   if ( ! b ) {
      return;
   }

   b->yy_n_chars = 0;

   /* We always need two end-of-buffer characters.  The first causes
    * a transition to the end-of-buffer state.  The second causes
    * a jam in that state.
    */
   b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
   b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

   b->yy_buf_pos = &b->yy_ch_buf[0];

   b->yy_at_bol = 1;
   b->yy_buffer_status = YY_BUFFER_NEW;

   if ( b == YY_CURRENT_BUFFER ) {
      pyscannerYY_load_buffer_state( );
   }
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void pyscannerYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
   if (new_buffer == NULL) {
      return;
   }

   pyscannerYYensure_buffer_stack();

   /* This block is copied from pyscannerYY_switch_to_buffer. */
   if ( YY_CURRENT_BUFFER ) {
      /* Flush out information for old buffer. */
      *(yy_c_buf_p) = (yy_hold_char);
      YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
   }

   /* Only push if top exists. Otherwise, replace top. */
   if (YY_CURRENT_BUFFER) {
      (yy_buffer_stack_top)++;
   }
   YY_CURRENT_BUFFER_LVALUE = new_buffer;

   /* copied from pyscannerYY_switch_to_buffer. */
   pyscannerYY_load_buffer_state( );
   (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void pyscannerYYpop_buffer_state (void)
{
   if (!YY_CURRENT_BUFFER) {
      return;
   }

   pyscannerYY_delete_buffer(YY_CURRENT_BUFFER );
   YY_CURRENT_BUFFER_LVALUE = NULL;
   if ((yy_buffer_stack_top) > 0) {
      --(yy_buffer_stack_top);
   }

   if (YY_CURRENT_BUFFER) {
      pyscannerYY_load_buffer_state( );
      (yy_did_buffer_switch_on_eof) = 1;
   }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pyscannerYYensure_buffer_stack (void)
{
   int num_to_alloc;

   if (!(yy_buffer_stack)) {

      /* First allocation is just for 2 elements, since we don't know if this
       * scanner will even need a stack. We use 2 instead of 1 to avoid an
       * immediate realloc on the next call.
         */
      num_to_alloc = 1;
      (yy_buffer_stack) = (struct yy_buffer_state **)pyscannerYYalloc
                          (num_to_alloc * sizeof(struct yy_buffer_state *)
                          );
      if ( ! (yy_buffer_stack) ) {
         YY_FATAL_ERROR( "out of dynamic memory in pyscannerYYensure_buffer_stack()" );
      }

      memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state *));

      (yy_buffer_stack_max) = num_to_alloc;
      (yy_buffer_stack_top) = 0;
      return;
   }

   if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1) {

      /* Increase the buffer to prepare for a possible push. */
      int grow_size = 8 /* arbitrary grow size */;

      num_to_alloc = (yy_buffer_stack_max) + grow_size;
      (yy_buffer_stack) = (struct yy_buffer_state **)pyscannerYYrealloc
                          ((yy_buffer_stack),
                           num_to_alloc * sizeof(struct yy_buffer_state *)
                          );
      if ( ! (yy_buffer_stack) ) {
         YY_FATAL_ERROR( "out of dynamic memory in pyscannerYYensure_buffer_stack()" );
      }

      /* zero only the new slots.*/
      memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state *));
      (yy_buffer_stack_max) = num_to_alloc;
   }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pyscannerYY_scan_buffer  (char *base, yy_size_t  size )
{
   YY_BUFFER_STATE b;

   if ( size < 2 ||
         base[size - 2] != YY_END_OF_BUFFER_CHAR ||
         base[size - 1] != YY_END_OF_BUFFER_CHAR )
      /* They forgot to leave room for the EOB's. */
   {
      return 0;
   }

   b = (YY_BUFFER_STATE) pyscannerYYalloc(sizeof( struct yy_buffer_state )  );
   if ( ! b ) {
      YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_scan_buffer()" );
   }

   b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
   b->yy_buf_pos = b->yy_ch_buf = base;
   b->yy_is_our_buffer = 0;
   b->yy_input_file = 0;
   b->yy_n_chars = b->yy_buf_size;
   b->yy_is_interactive = 0;
   b->yy_at_bol = 1;
   b->yy_fill_buffer = 0;
   b->yy_buffer_status = YY_BUFFER_NEW;

   pyscannerYY_switch_to_buffer(b  );

   return b;
}

/** Setup the input buffer state to scan a string. The next call to pyscannerYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pyscannerYY_scan_bytes() instead.
 */
YY_BUFFER_STATE pyscannerYY_scan_string (yyconst char *yystr )
{

   return pyscannerYY_scan_bytes(yystr, strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pyscannerYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pyscannerYY_scan_bytes  (yyconst char *yybytes, int  _yybytes_len )
{
   YY_BUFFER_STATE b;
   char *buf;
   yy_size_t n;
   int i;

   /* Get memory for full buffer, including space for trailing EOB's. */
   n = _yybytes_len + 2;
   buf = (char *) pyscannerYYalloc(n  );
   if ( ! buf ) {
      YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_scan_bytes()" );
   }

   for ( i = 0; i < _yybytes_len; ++i ) {
      buf[i] = yybytes[i];
   }

   buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

   b = pyscannerYY_scan_buffer(buf, n );
   if ( ! b ) {
      YY_FATAL_ERROR( "bad buffer in pyscannerYY_scan_bytes()" );
   }

   /* It's okay to grow etc. this buffer, and we should throw it
    * away when we're done.
    */
   b->yy_is_our_buffer = 1;

   return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char *msg )
{
   (void) fprintf( stderr, "%s\n", msg );
   exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscannerYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pyscannerYYtext[pyscannerYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = pyscannerYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pyscannerYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int pyscannerYYget_lineno  (void)
{

   return pyscannerYYlineno;
}

/** Get the input stream.
 *
 */
FILE *pyscannerYYget_in  (void)
{
   return pyscannerYYin;
}

/** Get the output stream.
 *
 */
FILE *pyscannerYYget_out  (void)
{
   return pyscannerYYout;
}

/** Get the length of the current token.
 *
 */
int pyscannerYYget_leng  (void)
{
   return pyscannerYYleng;
}

/** Get the current token.
 *
 */

char *pyscannerYYget_text  (void)
{
   return pyscannerYYtext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void pyscannerYYset_lineno (int  line_number )
{

   pyscannerYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see pyscannerYY_switch_to_buffer
 */
void pyscannerYYset_in (FILE   *in_str )
{
   pyscannerYYin = in_str ;
}

void pyscannerYYset_out (FILE   *out_str )
{
   pyscannerYYout = out_str ;
}

int pyscannerYYget_debug  (void)
{
   return pyscannerYY_flex_debug;
}

void pyscannerYYset_debug (int  bdebug )
{
   pyscannerYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
   /* Initialization is the same as for the non-reentrant scanner.
   * This function is called from pyscannerYYlex_destroy(), so don't allocate here.
   */

   (yy_buffer_stack) = 0;
   (yy_buffer_stack_top) = 0;
   (yy_buffer_stack_max) = 0;
   (yy_c_buf_p) = (char *) 0;
   (yy_init) = 0;
   (yy_start) = 0;

   (yy_state_buf) = 0;
   (yy_state_ptr) = 0;
   (yy_full_match) = 0;
   (yy_lp) = 0;

   /* Defined in main.c */
#ifdef YY_STDINIT
   pyscannerYYin = stdin;
   pyscannerYYout = stdout;
#else
   pyscannerYYin = (FILE *) 0;
   pyscannerYYout = (FILE *) 0;
#endif

   /* For future reference: Set errno on error, since we are called by
    * pyscannerYYlex_init()
    */
   return 0;
}

/* pyscannerYYlex_destroy is for both reentrant and non-reentrant scanners. */
int pyscannerYYlex_destroy  (void)
{

   /* Pop the buffer stack, destroying each element. */
   while (YY_CURRENT_BUFFER) {
      pyscannerYY_delete_buffer(YY_CURRENT_BUFFER  );
      YY_CURRENT_BUFFER_LVALUE = NULL;
      pyscannerYYpop_buffer_state();
   }

   /* Destroy the stack itself. */
   pyscannerYYfree((yy_buffer_stack) );
   (yy_buffer_stack) = NULL;

   pyscannerYYfree ( (yy_state_buf) );
   (yy_state_buf)  = NULL;

   /* Reset the globals. This is important in a non-reentrant scanner so the next time
    * pyscannerYYlex() is called, initialization will occur. */
   yy_init_globals( );

   return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *s1, yyconst char *s2, int n )
{
   register int i;
   for ( i = 0; i < n; ++i ) {
      s1[i] = s2[i];
   }
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char *s )
{
   register int n;
   for ( n = 0; s[n]; ++n )
      ;

   return n;
}
#endif

void *pyscannerYYalloc (yy_size_t  size )
{
   return (void *) malloc( size );
}

void *pyscannerYYrealloc  (void *ptr, yy_size_t  size )
{
   /* The cast to (char *) in the following accommodates both
    * implementations that use char* generic pointers, and those
    * that use void* generic pointers.  It works with the latter
    * because both ANSI C and C++ allow castless assignment from
    * any pointer type to void*, and deal with argument conversions
    * as though doing an assignment.
    */
   return (void *) realloc( (char *) ptr, size );
}

void pyscannerYYfree (void *ptr )
{
   free( (char *) ptr );	/* see pyscannerYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static void parseCompounds(Entry *rt)
{    
   for (auto ce : rt->children() ) {
      if (! ce->program.isEmpty()) {         
         // init scanner state
         inputString = ce->program;
         inputPosition = 0;
         pyscannerYYrestart( pyscannerYYin ) ;

         if (ce->section & Entry::COMPOUND_MASK) {
            current_root = ce ;
            BEGIN( Search );

         } else if (ce->parent()) {
            current_root = ce->parent();            
            BEGIN( SearchMemVars );
         }

         yyFileName = ce->fileName;
         yyLineNr   = ce->bodyLine ;
         if (current) {
            delete current;
         }

         current = new Entry;
         initEntry();

         groupEnterCompound(yyFileName, yyLineNr, ce->name);

         pyscannerYYlex() ;
         g_lexInit = TRUE;
         delete current;
         current = 0;
         ce->program.resize(0);

         groupLeaveCompound(yyFileName, yyLineNr, ce->name);

      }
      parseCompounds(ce);
   }
}

static void parseMain(const char *fileName, const char *fileBuf, Entry *rt)
{
   initParser();

   inputString = fileBuf;
   inputPosition = 0;

   protection    = Public;
   mtype         = Method;
   gstat         = FALSE;
   virt          = Normal;
   current_root  = rt;
   g_specialBlock = FALSE;

   inputFile.setFileName(fileName);

   if (inputFile.open(QIODevice::ReadOnly)) {
      yyLineNr = 1 ;
      yyFileName = fileName;

      //setContext();
      msg("Parsing file %s...\n", yyFileName.data());

      QFileInfo fi(fileName);
      g_moduleScope = findPackageScope(fileName);
      QByteArray baseName = fi.baseName().toUtf8();
      if (baseName != "__init__") { // package initializer file is not a package itself
         if (!g_moduleScope.isEmpty()) {
            g_moduleScope += "::";
         }
         g_moduleScope += baseName;
      }

      current            = new Entry;
      initEntry();
      current->name      = g_moduleScope;
      current->section   = Entry::NAMESPACE_SEC;
      current->type      = "namespace";
      current->fileName  = yyFileName;
      current->startLine = yyLineNr;
      current->bodyLine  = yyLineNr;

      rt->addSubEntry(current);

      current_root  = current ;
      initParser();
      current       = new Entry;

      groupEnterFile(yyFileName, yyLineNr);

      current->reset();
      initEntry();
      pyscannerYYrestart( pyscannerYYin );
      BEGIN( Search );
      pyscannerYYlex();
      g_lexInit = TRUE;

      groupLeaveFile(yyFileName, yyLineNr);

      current_root->program.resize(0);
      delete current;
      current = 0;

      parseCompounds(current_root);

      inputFile.close();
   }

}

//----------------------------------------------------------------------------

static void parsePrototype(const QByteArray &text)
{
   //printf("**** parsePrototype(%s) begin\n",text.data());
   if (text.isEmpty()) {
      warn(yyFileName, yyLineNr, "Empty prototype found!");
      return;
   }

   g_specialBlock = FALSE;
   g_packageCommentAllowed = FALSE;

   const char *orgInputString;
   int orgInputPosition;
   YY_BUFFER_STATE orgState;

   // save scanner state
   orgState = YY_CURRENT_BUFFER;
   pyscannerYY_switch_to_buffer(pyscannerYY_create_buffer(pyscannerYYin, YY_BUF_SIZE));
   orgInputString = inputString;
   orgInputPosition = inputPosition;

   // set new string
   inputString = text;
   inputPosition = 0;
   pyscannerYYrestart( pyscannerYYin );

   BEGIN( FunctionDec );

   pyscannerYYlex();
   g_lexInit = TRUE;

   current->name = current->name.trimmed();
   if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty()) {
      current->section = Entry::VARIABLEDOC_SEC;
   }

   // restore original scanner state

   YY_BUFFER_STATE tmpBuf = YY_CURRENT_BUFFER;
   pyscannerYY_switch_to_buffer(orgState);
   pyscannerYY_delete_buffer(tmpBuf);

   inputString = orgInputString;
   inputPosition = orgInputPosition;

   //printf("**** parsePrototype end\n");
}

void pyscanFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION)
   if (g_lexInit) {
      pyscannerYYlex_destroy();
   }
#endif
}

//----------------------------------------------------------------------------

void PythonLanguageScanner::parseInput(const char *fileName,
                                       const char *fileBuf,
                                       Entry *root,
                                       bool /*sameTranslationUnit*/,
                                       QStringList & /*filesInSameTranslationUnit*/)
{
   g_thisParser = this;
   printlex(pyscannerYY_flex_debug, TRUE, __FILE__, fileName);
   ::parseMain(fileName, fileBuf, root);
   printlex(pyscannerYY_flex_debug, FALSE, __FILE__, fileName);

   // May print the AST for debugging purposes
   // printAST(global_root);
}

bool PythonLanguageScanner::needsPreprocessing(const QByteArray &)
{
   return FALSE;
}

void PythonLanguageScanner::parseCode(CodeOutputInterface &codeOutIntf, const char *scopeName,
                                      const QByteArray &input, SrcLangExt /*lang*/, bool isExampleBlock,
                                      const char *exampleName, FileDef *fileDef, int startLine,
                                      int endLine, bool inlineFragment, MemberDef *memberDef,
                                      bool showLineNumbers, Definition *searchCtx, bool collectXRefs )
{
   ::parsePythonCode(codeOutIntf, scopeName, input, isExampleBlock, exampleName,
                     fileDef, startLine, endLine, inlineFragment, memberDef,
                     showLineNumbers, searchCtx, collectXRefs);
}

void PythonLanguageScanner::parsePrototype(const char *text)
{
   ::parsePrototype(text);

}

void PythonLanguageScanner::resetCodeParserState()
{
   ::resetPythonCodeParserState();
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION)
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
   void pyscannerYYdummy()
   {
      yy_flex_realloc(0, 0);
   }
}
#endif


