
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer scannerYY_create_buffer
#define yy_delete_buffer scannerYY_delete_buffer
#define yy_flex_debug scannerYY_flex_debug
#define yy_init_buffer scannerYY_init_buffer
#define yy_flush_buffer scannerYY_flush_buffer
#define yy_load_buffer_state scannerYY_load_buffer_state
#define yy_switch_to_buffer scannerYY_switch_to_buffer
#define yyin scannerYYin
#define yyleng scannerYYleng
#define yylex scannerYYlex
#define yylineno scannerYYlineno
#define yyout scannerYYout
#define yyrestart scannerYYrestart
#define yytext scannerYYtext
#define yywrap scannerYYwrap
#define yyalloc scannerYYalloc
#define yyrealloc scannerYYrealloc
#define yyfree scannerYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE scannerYYrestart(scannerYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int scannerYYleng;

extern FILE *scannerYYin, *scannerYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scannerYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via scannerYYrestart()), so that the user can continue scanning by
	 * just pointing scannerYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when scannerYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int scannerYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow scannerYYwrap()'s to do buffer switches
 * instead of setting up a fresh scannerYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void scannerYYrestart (FILE *input_file  );
void scannerYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE scannerYY_create_buffer (FILE *file,int size  );
void scannerYY_delete_buffer (YY_BUFFER_STATE b  );
void scannerYY_flush_buffer (YY_BUFFER_STATE b  );
void scannerYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void scannerYYpop_buffer_state (void );

static void scannerYYensure_buffer_stack (void );
static void scannerYY_load_buffer_state (void );
static void scannerYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER scannerYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE scannerYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE scannerYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE scannerYY_scan_bytes (yyconst char *bytes,int len  );

void *scannerYYalloc (yy_size_t  );
void *scannerYYrealloc (void *,yy_size_t  );
void scannerYYfree (void *  );

#define yy_new_buffer scannerYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        scannerYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scannerYY_create_buffer(scannerYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        scannerYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scannerYY_create_buffer(scannerYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define scannerYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *scannerYYin = (FILE *) 0, *scannerYYout = (FILE *) 0;

typedef int yy_state_type;

extern int scannerYYlineno;

int scannerYYlineno = 1;

extern char *scannerYYtext;
#define yytext_ptr scannerYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up scannerYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	scannerYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 795
#define YY_END_OF_BUFFER 796
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[5782] =
    {   0,
       40,   40,  442,  442,  442,  442,  442,  442,  439,  439,
       51,   51,   59,   59,  499,  499,  499,  499,  796,  790,
      795,  785,  795,  786,  789,  790,  795,  787,  790,  795,
      788,  790,  795,  790,  795,  636,  790,  795,  635,  785,
      795,  636,  786,  789,  790,  795,  636,  787,  790,  795,
      636,  788,  790,  795,  634,  636,  790,  795,  636,  790,
      795,  640,  790,  795,  639,  785,  795,  640,  786,  789,
      790,  795,  640,  787,  790,  795,  640,  788,  790,  795,
      637,  640,  790,  795,  638,  640,  790,  795,  640,  790,
      795,  790,  795,  294,  790,  795,  300,  790,  795,  300,

      790,  795,  295,  785,  795,  299,  300,  786,  789,  790,
      795,  300,  787,  790,  795,  300,  788,  790,  795,  300,
      790,  795,  300,  790,  795,  790,  795,  785,  795,  790,
      795,  790,  795,  790,  795,  790,  795,  623,  790,  795,
      624,  790,  795,  642,  643,  790,  795,17017,17025,  671,
      790,  795,  790,  795,  790,  795,  785,  795,  790,  795,
      790,  795,  790,  795,  665,  790,  795,  648,  790,  795,
      670,  790,  795,  645,  790,  795,  790,  795,  664,  790,
      795,  684,  790,  795,  790,  795,  647,  790,  795,  647,
      790,  795,  647,  790,  795,  659,  790,  795,  658,  785,

      795,  659,  786,  789,  790,  795,  651,  659,  787,  790,
      795,  659,  790,  795,  659,  788,  790,  795,  659,  790,
      795,  654,  659,  790,  795,  653,  659,  790,  795,  655,
      659,  790,  795,  659,  790,  795,  657,  659,  790,  795,
      657,  659,  790,  795,  652,  659,  790,  795,  790,  795,
      790,  795,  663,  790,  795,  660,  790,  795,  631,  790,
      795,  631,  786,  789,  790,  795,  631,  787,  790,  795,
      631,  788,  790,  795,  166,  631,  790,  795,  167,  631,
      790,  795,  631,  790,  795,  630,  631,  790,  795,  629,
      631,  790,  795,   41,  790,  795,   40,   41,  790,  795,

       39,  785,  795,   41,  786,  789,  790,  795,   41,  787,
      790,  795,   41,  790,  795,   41,  788,  790,  795,   41,
      790,  795,   38,   41,  790,  795,   35,   41,  790,  795,
       36,   41,  790,  795,   37,   41,  790,  795,   43,  790,
      795,   43,  786,  789,  790,  795,   43,  787,  790,  795,
       43,  788,  790,  795,   43,  790,  795,   42,   43,  790,
      795,  561,  790,  795,  560,  785,  795,  561,  786,  789,
      790,  795,  561,  787,  790,  795,  561,  790,  795,  561,
      788,  790,  795,  561,  790,  795,  558,  561,  790,  795,
      559,  561,  790,  795,  790,  795,  785,  795,  790,  795,

      790,  795,  699,  790,  795,  790,  795,  625,  790,  795,
      685,  790,  795,  699,  790,  795,  679,  680,  681,  790,
      795,  790,  795,  700,  790,  795,  678,  790,  795,  677,
      678,  790,  795,  677,  785,  795,  678,  786,  789,  790,
      795,  678,  787,  790,  795,  678,  788,  790,  795,  678,
      790,  795,  678,  790,  795,  678,  790,  795,  678,  790,
      795,    9,  786,  789,  790,  795,    7,  788,  790,  795,
        2,  790,  795,   10,  790,  795,   10,  790,  795,    1,
      790,  795,  391,  790,  795,  391,  786,  789,  790,  795,
      391,  787,  790,  795,  391,  788,  790,  795,   11,  391,

      790,  795,  391,  790,  795,   11,  391,  790,  795,  392,
      790,  795,  393,  785,  795,  392,  786,  789,  790,  795,
      392,  787,  790,  795,  392,  788,  790,  795,   12,  392,
      790,  795,  392,  790,  795,   12,  392,  790,  795,   12,
      392,  790,  795,   62,  790,  795,   62,  785,  795,   62,
      790,  795,  790,  795,  284,  787,  790,  795,  790,  795,
      302,  790,  795,  303,  790,  795,  495,  790,  795,   47,
      790,  795,  394,  790,  795,  270,  790,  795,  790,  795,
      790,  795,  390,  790,  795,  394,  790,  795,  429,  790,
      795,  309,  790,  795,  790,  795,  790,  795,  261,  790,

      795,  261,  790,  795,  261,  790,  795,  395,  790,  795,
      302,  790,  795,  261,  790,  795,  261,  790,  795,  261,
      790,  795,  261,  790,  795,  261,  790,  795,  261,  790,
      795,  261,  790,  795,  261,  790,  795,  261,  790,  795,
      261,  790,  795,  261,  790,  795,  261,  790,  795,  261,
      790,  795,  261,  790,  795,  261,  790,  795,  261,  790,
      795,  261,  790,  795,  261,  790,  795,  718,  790,  795,
       16,   18,  790,  795,   17,  785,  795,   16,   18,  786,
      789,  790,  795,   16,   18,  787,  790,  795,   16,   18,
      788,  790,  795,   16,   18,  790,  795,   18,  790,  795,

      790,  795,  785,  795,  790,  795,  790,  795,  790,  795,
      261,  790,  795,  790,  795,  785,  795,  790,  795,  284,
      787,  790,  795,  790,  795,  435,  790,  795,  440,  790,
      795,  790,  795,  437,  790,  795,  436,  790,  795,  434,
      790,  795,  441,  790,  795,  790,  795,  556,  787,  790,
      795,  587,  790,  795,  589,  790,  795,  588,  790,  795,
      589,  790,  795,  574,  790,  795,  555,  574,  790,  795,
      555,  785,  795,  574,  786,  789,  790,  795,  556,  574,
      787,  790,  795,  574,  788,  790,  795,  535,  574,  790,
      795,  536,  574,  790,  795,  554,  574,  790,  795,  574,

      790,  795,  582,  790,  795,  582,  786,  789,  790,  795,
      582,  787,  790,  795,  582,  788,  790,  795,  580,  582,
      790,  795,  581,  582,  790,  795,  582,  790,  795,  586,
      790,  795,  585,  785,  795,  586,  786,  789,  790,  795,
      586,  787,  790,  795,  586,  788,  790,  795,  586,  790,
      795,  584,  586,  790,  795,  583,  586,  790,  795,  555,
      574,  790,  795,  555,  785,  795,  574,  790,  795,  537,
      574,  790,  795,  574,  790,  795,  574,  790,  795,  557,
      574,  790,  795,  569,  574,  790,  795,  569,  574,  790,
      795,  569,  574,  790,  795,  569,  574,  790,  795,  569,

      574,  790,  795,  569,  574,  790,  795,  569,  574,  790,
      795,  569,  574,  790,  795,  569,  574,  790,  795,  569,
      574,  790,  795,  552,  790,  795,  552,  790,  795,  553,
      785,  795,  552,  786,  789,  790,  795,  552,  787,  790,
      795,  552,  788,  790,  795,  552,  790,  795,  551,  552,
      790,  795,  552,  790,  795,  552,  790,  795,  552,  790,
      795,  129,  790,  795,  129,  785,  795,  129,  786,  789,
      790,  795,  129,  787,  790,  795,  129,  788,  790,  795,
      131,  790,  795,  129,  790,  795,  128,  129,  790,  795,
      129,  790,  795,  424,  790,  795,  424,  786,  789,  790,

      795,  424,  787,  790,  795,  424,  788,  790,  795,  424,
      790,  795,  423,  424,  790,  795,  421,  424,  790,  795,
      442,  467,  790,  795,  442,  465,  467,  790,  795,  465,
      785,  795,  465,  467,  790,  795,  447,  467,  786,  789,
      790,  795,  444,  467,  787,  790,  795,  450,  467,  788,
      790,  795,  467,  790,  795,  467,  790,  795,  467,  790,
      795,  452,  467,  790,  795,  454,  467,  790,  795,  454,
      467,  790,  795,  467,  790,  795,  453,  467,  790,  795,
      790,  795,  154,  790,  795,  147,  790,  795,  146,  790,
      795,  146,  790,  795,  146,  790,  795,  150,  790,  795,

      151,  785,  795,  150,  786,  789,  790,  795,  150,  787,
      790,  795,  150,  788,  790,  795,  150,  790,  795,  148,
      150,  790,  795,  152,  790,  795,  790,  795,  785,  795,
      790,  795,  790,  795,  790,  795,  153,  790,  795,  604,
      616,  790,  795,  604,  616,  790,  795,  602,  785,  795,
      600,  616,  786,  789,  790,  795,  612,  616,  787,  790,
      795,  615,  616,  788,  790,  795,  616,  790,  795,  616,
      790,  795,  616,  790,  795,  616,  790,  795,  594,  616,
      790,  795,  596,  616,  790,  795,  604,  616,  790,  795,
      601,  612,  616,  787,  790,  795,  605,  785,  795,  616,

      786,  789,  790,  795,  616,  790,  795,  616,  790,  795,
      599,  790,  795,  622,  790,  795,  621,  785,  795,  618,
      622,  786,  789,  790,  795,  622,  787,  790,  795,  622,
      788,  790,  795,  622,  790,  795,  622,  790,  795,  622,
      790,  795,  622,  786,  789,  790,  795,  619,  622,  788,
      790,  795,  610,  616,  786,  789,  790,  795,  612,  616,
      787,  790,  795,  616,  790,  795,  609,  616,  790,  795,
      616,  790,  795,  611,  616,  790,  795,  616,  790,  795,
      593,  616,  790,  795,  616,  787,  790,  795,  616,  788,
      790,  795,  616,  790,  795,  591,  616,  790,  795,  592,

      616,  790,  795,  290,  790,  795,  292,  785,  795,  290,
      790,  795,  290,  786,  789,  790,  795,  290,  787,  790,
      795,  290,  788,  790,  795,  290,  790,  795,  290,  790,
      795,  784,  790,  795,  784,  790,  795,  784,  786,  789,
      790,  795,  784,  787,  790,  795,  784,  788,  790,  795,
      790,  795,  784,  790,  795,  790,  795,  783,  785,  795,
      786,  789,  790,  795,  787,  790,  795,  788,  790,  795,
      790,  795,  790,  795,    5,  790,  795,    6,  790,  795,
        3,  790,  795,    4,  790,  795,  433,  790,  795,  432,
      433,  790,  795,  432,  785,  795,  433,  786,  789,  790,

      795,  433,  787,  790,  795,  433,  788,  790,  795,  433,
      790,  795,  431,  433,  790,  795,  430,  433,  790,  795,
      698,  786,  789,  790,  795,  696,  790,  795,  697,  790,
      795,  428,  790,  795,  427,  786,  789,  790,  795,  428,
      787,  790,  795,  428,  788,  790,  795,  428,  790,  795,
      425,  790,  795,  426,  790,  795,  439,  790,  795,  438,
      785,  795,  439,  786,  789,  790,  795,  439,  787,  790,
      795,  439,  788,  790,  795,  439,  790,  795,  264,  790,
      795,  263,  264,  790,  795,  263,  785,  795,  264,  786,
      789,  790,  795,  264,  787,  790,  795,  264,  788,  790,

      795,  262,  264,  790,  795,  264,  790,  795,  267,  790,
      795,  266,  267,  790,  795,  266,  785,  795,  267,  786,
      789,  790,  795,  267,  787,  790,  795,  267,  788,  790,
      795,  265,  267,  790,  795,  267,  790,  795,  790,  795,
      458,  790,  795,  457,  790,  795,  457,  790,  795,  457,
      790,  795,  279,  790,  795,  277,  785,  795,  279,  786,
      789,  790,  795,  279,  787,  790,  795,  279,  788,  790,
      795,  279,  790,  795,  278,  279,  790,  795,  282,  790,
      795,  282,  790,  795,  281,  785,  795,  282,  786,  789,
      790,  795,  282,  787,  790,  795,  282,  788,  790,  795,

      282,  790,  795,  282,  790,  795,  710,  712,  790,  795,
      705,  712,  790,  795,  705,  785,  795,  710,  712,  786,
      789,  790,  795,  710,  712,  787,  790,  795,  710,  712,
      788,  790,  795,  712,  790,  795,  712,  790,  795,  712,
      790,  795,  710,  712,  790,  795,  790,  795,   79,  790,
      795,   78,  790,  795,   80,  790,  795,  790,  795,  790,
      795,  790,  795,  141,  790,  795,  138,  790,  795,16521,
      790,  795,  785,  795,  790,  795,  140,  790,  795,  730,
      790,  795,  731,  785,  795,  730,  786,  789,  790,  795,
      730,  787,  790,  795,  730,  788,  790,  795,  730,  790,

      795,  730,  790,  795,  730,  790,  795,  730,  790,  795,
      730,  790,  795,  730,  790,  795,  719,  730,  790,  795,
      720,  730,  790,  795,  627,  790,  795,  288,  790,  795,
      289,  785,  795,  288,  786,  789,  790,  795,  288,  787,
      790,  795,  288,  788,  790,  795,  288,  790,  795,  790,
      795,  790,  795,  297,  790,  795,  297,  786,  789,  790,
      795,  297,  787,  790,  795,  297,  788,  790,  795,  297,
      790,  795,  296,  297,  790,  795,  573,  790,  795,  573,
      790,  795,  573,  786,  789,  790,  795,  573,  787,  790,
      795,  573,  790,  795,  573,  788,  790,  795,  570,  573,

      790,  795,  573,  790,  795,  570,  573,  790,  795,  571,
      573,  790,  795,  572,  573,  790,  795,  334,  338,  790,
      795,  337,  785,  795,  336,  338,  786,  789,  790,  795,
      334,  338,  787,  790,  795,  334,  338,  788,  790,  795,
      334,  338,  790,  795,  790,  795,   48,  790,  795,   50,
      790,  795,   60,  790,  795,   49,  790,  795,   61,  790,
      795,   51,  790,  795,   51,  785,  795,   51,  786,  789,
      790,  795,   51,  787,  790,  795,   51,  788,  790,  795,
       52,  790,  795,   51,  790,  795,  790,  795,   56,  790,
      795,  790,  795,   53,  790,  795,   54,  790,  795,   59,

      790,  795,   59,  785,  795,   59,  786,  789,  790,  795,
       59,  787,  790,  795,   59,  788,  790,  795,   57,  790,
      795,   58,  790,  795,   59,  790,  795,  628,  790,  795,
       75,  790,  795,  790,  795,  790,  795,  790,  795,  790,
      795,  790,  795,  790,  795,  790,  795,  790,  795,   77,
      790,  795,  185,  790,  795,  790,  795,  182,  790,  795,
      186,  790,  795,  186,  790,  795,  186,  790,  795,  186,
      790,  795,  186,  790,  795,  186,  790,  795,  790,  795,
      187,  790,  795,  183,  790,  795,  790,  795,  790,  795,
      790,  795,  790,  795,  790,  795,  193,  790,  795,  790,

      795,  194,  790,  795,  196,  790,  795,  790,  795,  197,
      790,  795,  198,  790,  795,  200,  790,  795,  201,  790,
      795,  203,  790,  795,  790,  795,  206,  790,  795,  208,
      790,  795,  207,  790,  795,  790,  795,  209,  790,  795,
      790,  795,  211,  790,  795,  213,  790,  795,  212,  790,
      795,  790,  795,  214,  790,  795,  790,  795,  216,  790,
      795,  218,  790,  795,  217,  790,  795,  790,  795,  219,
      790,  795,  790,  795,  221,  790,  795,  223,  790,  795,
      222,  790,  795,  790,  795,  224,  790,  795,  790,  795,
      232,  790,  795,  234,  790,  795,  233,  790,  795,  790,

      795,  236,  790,  795,  237,  790,  795,  235,  790,  795,
      790,  795,  238,  790,  795,  239,  790,  795,  204,  790,
      795,  241,  790,  795,  790,  795,  243,  790,  795,  242,
      790,  795,  790,  795,  785,  795,  790,  795,  790,  795,
      245,  790,  795,  790,  795,  244,  790,  795,  246,  790,
      795,  790,  795,  259,  790,  795,  258,  790,  795,  251,
      790,  795,  790,  795,  256,  790,  795,  253,  790,  795,
      252,  790,  795,  790,  795,  254,  790,  795,  255,  790,
      795,  340,  790,  795,  340,  790,  795,  332,  785,  795,
      324,  340,  786,  789,  790,  795,  340,  787,  790,  795,

      330,  340,  788,  790,  795,  312,  328,  340,  790,  795,
      329,  340,  790,  795,  314,  340,  790,  795,  340,  790,
      795,  340,  790,  795,  314,  340,  790,  795,  328,  340,
      790,  795,  329,  340,  790,  795,  340,  790,  795,  340,
      790,  795,  340,  790,  795,  340,  790,  795,  328,  340,
      790,  795,  340,  790,  795,  313,  328,  340,  790,  795,
      790,  795,  785,  795,  790,  795,  311,  790,  795,  790,
      795,  785,  795,  790,  795,  790,  795,  790,  795,  283,
      790,  795,  790,  795,  785,  795,  790,  795,  790,  795,
      460,  790,  795,  461,  790,  795,  790,  795,  461,  790,

      795,  462,  790,  795,  459,  790,  795,  463,  790,  795,
      464,  790,  795,  168,  790,  795,  168,  786,  789,  790,
      795,  168,  787,  790,  795,  168,  788,  790,  795,  166,
      168,  790,  795,  167,  168,  790,  795,  168,  790,  795,
      160,  168,  790,  795,  162,  168,  790,  795,16548,  471,
      790,  795,  471,  790,  795,  785,  795,  471,  790,  795,
      471,  786,  789,  790,  795,  471,  787,  790,  795,  471,
      790,  795,  471,  788,  790,  795,  471,  790,  795,  471,
      790,  795,  470,  471,  790,  795,  475,  790,  795,  473,
      785,  795,  475,  786,  789,  790,  795,  475,  787,  790,

      795,  475,  788,  790,  795,  474,  475,  790,  795,  475,
      790,  795,  479,  790,  795,  481,  790,  795,  790,  795,
      496,  534,  790,  795,  499,  534,  790,  795,  499,  533,
      785,  795,  501,  534,  786,  789,  790,  795,  534,  787,
      790,  795,  532,  534,  788,  790,  795,  502,  534,  790,
      795,  503,  534,  790,  795,  534,  790,  795,  496,  534,
      790,  795,  496,  534,  790,  795,  496,  534,  790,  795,
      534,  790,  795,  521,  534,  790,  795,  522,  534,  790,
      795,  534,  790,  795,  534,  790,  795,  534,  790,  795,
      276,  790,  795,  275,  785,  795,  276,  786,  789,  790,

      795,  276,  787,  790,  795,  276,  788,  790,  795,  276,
      790,  795,  274,  276,  790,  795,  790,  795,  134,  790,
      795,  790,  795,  136,  790,  795,  135,  790,  795,  346,
      790,  795,  345,  785,  795,  342,  346,  786,  789,  790,
      795,  346,  787,  790,  795,  346,  788,  790,  795,  346,
      790,  795,  346,  790,  795,  346,  790,  795,  346,  786,
      789,  790,  795,  343,  346,  788,  790,  795,  352,  790,
      795,  351,  785,  795,  348,  352,  786,  789,  790,  795,
      352,  787,  790,  795,  352,  788,  790,  795,  352,  790,
      795,  352,  790,  795,  352,  790,  795,  352,  786,  789,

      790,  795,  349,  352,  788,  790,  795,  359,  360,  790,
      795,  356,  785,  795,  353,  360,  786,  789,  790,  795,
      359,  360,  787,  790,  795,  357,  360,  788,  790,  795,
      354,  360,  790,  795,  355,  360,  790,  795,  359,  360,
      790,  795,  374,  377,  790,  795,  376,  785,  795,  369,
      377,  786,  789,  790,  795,  374,  377,  787,  790,  795,
      370,  377,  788,  790,  795,  375,  377,  790,  795,  371,
      377,  790,  795,  372,  377,  790,  795,  367,  368,  790,
      795,  364,  785,  795,  361,  368,  786,  789,  790,  795,
      367,  368,  787,  790,  795,  365,  368,  788,  790,  795,

      362,  368,  790,  795,  363,  368,  790,  795,  368,  790,
      795,  385,  389,  790,  795,  388,  785,  795,  380,  389,
      786,  789,  790,  795,  385,  389,  787,  790,  795,  381,
      389,  788,  790,  795,  386,  389,  790,  795,  387,  389,
      790,  795,  382,  389,  790,  795,  383,  389,  790,  795,
      385,  389,  787,  790,  795,  704,  790,  795,  704,  790,
      795,  703,  785,  795,  704,  786,  789,  790,  795,  704,
      787,  790,  795,  704,  788,  790,  795,  701,  704,  790,
      795,  702,  704,  790,  795,  704,  790,  795,  695,  790,
      795,  688,  695,  790,  795,  688,  785,  795,  695,  786,

      789,  790,  795,  695,  787,  790,  795,  695,  788,  790,
      795,  693,  695,  790,  795,  694,  695,  790,  795,  695,
      790,  795,  686,  695,  790,  795,  687,  695,  790,  795,
      695,  790,  795,  567,  790,  795,  568,  785,  795,  563,
      567,  786,  789,  790,  795,  567,  787,  790,  795,  567,
      790,  795,  564,  567,  788,  790,  795,  567,  790,  795,
      562,  567,  790,  795,  566,  567,  790,  795,  482,  574,
      790,  795,  483,  574,  790,  795,  487,  790,  795,  487,
      786,  789,  790,  795,  487,  787,  790,  795,  487,  788,
      790,  795,  487,  790,  795,  487,  790,  795,  492,  790,

      795,  491,  492,  790,  795,  491,  785,  795,  492,  786,
      789,  790,  795,  492,  787,  790,  795,  492,  788,  790,
      795,  488,  492,  790,  795,  489,  492,  790,  795,  490,
      492,  790,  795,  492,  790,  795,  422,  424,  790,  795,
      497,  534,  790,  795,  533,  785,  795,  529,  534,  786,
      789,  790,  795,  497,  534,  787,  790,  795,  534,  788,
      790,  795,  497,  534,  790,  795,  534,  790,  795,  534,
      786,  789,  790,  795,  530,  534,  788,  790,  795,  498,
      534,  790,  795,  498,  534,  787,  790,  795,  523,  534,
      790,  795,  524,  534,  790,  795,  534,  790,  795,  498,

      534,  790,  795,  498,  534,  790,  795,  498,  534,  790,
      795,  525,  534,  790,  795,  526,  534,  790,  795,  527,
      534,  790,  795,  510,  519,  790,  795,  518,  785,  795,
      510,  519,  786,  789,  790,  795,  510,  519,  787,  790,
      795,  510,  519,  788,  790,  795,  519,  790,  795,  510,
      519,  790,  795,  519,  790,  795,  510,  519,  790,  795,
      519,  790,  795,16893,  516,  517,  790,  795,  512,  785,
      795,  516,  517,  786,  789,  790,  795,  516,  517,  787,
      790,  795,  516,  517,  788,  790,  795,  516,  517,  790,
      795,  517,  790,  795,  519,  790,  795,  519,  786,  789,

      790,  795,  519,  787,  790,  795,  519,  788,  790,  795,
      519,  790,  795,  519,  790,  795,  790,  795,  788,  790,
      795,  172,  790,  795,  175,  790,  795,  175,  786,  789,
      790,  795,  175,  787,  790,  795,  175,  788,  790,  795,
      175,  790,  795,  175,  790,  795,  174,  175,  790,  795,
      790,  795,  788,  790,  795,  170,  790,  795,  178,  790,
      795,  177,  785,  795,  178,  786,  789,  790,  795,  178,
      787,  790,  795,  178,  788,  790,  795,  178,  790,  795,
      178,  790,  795,  176,  178,  790,  795,  321,  322,  790,
      795,  321,  323,  785,  795,  321,  322,  786,  789,  790,

      795,  321,  322,  787,  790,  795,  321,  322,  788,  790,
      795,  322,  790,  795,  321,  322,  790,  795,  317,  318,
      790,  795,  319,  785,  795,  317,  318,  786,  789,  790,
      795,  317,  318,  787,  790,  795,  317,  318,  788,  790,
      795,  318,  790,  795,  317,  318,  790,  795,  410,  790,
      795,  410,  786,  789,  790,  795,  410,  787,  790,  795,
      410,  788,  790,  795,  410,  790,  795,  396,  410,  790,
      795,  410,  790,  795,  410,  790,  795,  410,  790,  795,
      410,  790,  795,  410,  790,  795,  410,  790,  795,  410,
      790,  795,  410,  790,  795,  420,  790,  795,  420,  790,

      795,  785,  795,  420,  786,  789,  790,  795,  420,  787,
      790,  795,  420,  790,  795,  420,  788,  790,  795,  420,
      790,  795,  419,  420,  790,  795,  416,  420,  790,  795,
      420,  790,  795,  790,  795,  785,  795,  790,  795,  790,
      795,  411,  790,  795,  780,  790,  795,  780,  786,  789,
      790,  795,  780,  787,  790,  795,  780,  788,  790,  795,
      766,  780,  790,  795,  780,  790,  795,  780,  790,  795,
      771,  790,  795,  771,  790,  795,  785,  795,  771,  790,
      795,  771,  786,  789,  790,  795,  771,  787,  790,  795,
      771,  790,  795,  771,  788,  790,  795,  769,  771,  790,

      795,  770,  771,  790,  795,  771,  790,  795,  771,  790,
      795,  768,  771,  790,  795,  779,  790,  795,  779,  790,
      795,  779,  786,  789,  790,  795,  779,  787,  790,  795,
      779,  788,  790,  795,  779,  790,  795,  779,  790,  795,
      779,  790,  795,  779,  790,  795,  779,  790,  795,  772,
      779,  790,  795,  778,  790,  795,  778,  786,  789,  790,
      795,  778,  787,  790,  795,  778,  788,  790,  795,  777,
      778,  790,  795,  778,  790,  795,  781,  790,  795,  781,
      786,  789,  790,  795,  781,  787,  790,  795,  781,  788,
      790,  795,  781,  790,  795,  790,  795,  790,  795,  734,

      785,  795,  786,  789,  790,  795,  787,  790,  795,  788,
      790,  795,  790,  795,  748,  750,  790,  795,  748,  750,
      790,  795,  749,  785,  795,  748,  750,  786,  789,  790,
      795,  748,  750,  787,  790,  795,  748,  750,  788,  790,
      795,  750,  790,  795,  750,  790,  795,  748,  750,  790,
      795,  750,  790,  795,  750,  790,  795,  748,  750,  790,
      795,  750,  790,  795,  748,  750,  790,  795,  750,  790,
      795,  750,  790,  795,  761,  764,  790,  795,  763,  785,
      795,  761,  764,  786,  789,  790,  795,  761,  764,  787,
      790,  795,  764,  790,  795,  761,  764,  788,  790,  795,

      764,  790,  795,  764,  790,  795,  764,  790,  795,  764,
      790,  795,  761,  764,  790,  795,  764,  790,  795,  761,
      764,  790,  795, 8950,  764,  790,  795,17139,17140,17141,
    17142,  792,  794,  294,  293,  294,  792,  794,  298,  671,
      642,17017,17025,  642,  643,17017,17025,  643, 8825, 8833,
      642,  643,17017,17025,  632,  626,  671,  642,  643,17017,
    17025,  682,  682,  682,  647,  670,  792,  794,  644,  647,
      647,  647,  655,  792,  794,  655,  657,  657,  657,  268,
      660,  662,  661,  660,  159,  161,   40,   35,   35,  558,
      558,  685,  680,  681,  680,  681,  700,  682,  682,  682,

      685,  680,  681,  682,  680,  681,  682,  679,  680,  681,
      699,  679,  680,  681,  679,  700,   62,   62,  284,  261,
      261,   21,   22,  303,  469,   47,  792,  794,  269,  271,
       19,   76,   76,   76,   76,   76,   76,  261,  156,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,   16,   16,  792,   16,  794,   14,  261,
      261,  261,  157,  284,  434,  792,  794,  434,  555,  554,
      554,  555,  569,  550,  792,  794,  547,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  130,
      442,  442,  465,  465,  444,  444,  448,  792,  443,  794,
      445,  146,  146,  146,  146,  153,  153,  153,  604,  604,
      607,  792,  608,  794,  613,  604,  601,  607,  792,  608,
      794,  606,  620,  620,  792,  620,  794,  617,  608,  794,
      590,  607,  792,  608,  794,  292,  292,  291,  784,  784,
      793,  791,  792,  784,  791,  794,  783,  792,  794,  782,
      783,  432,  428,  428,  792,  428,  794,  439,  439,  792,
      439,  794,  263,  266,  457,  457,  457,  457,  710,  705,
      711,  706,  792,  707,  794,  710,  710,  710,   78,   78,

      138,16521,  138,16521,  140,  140,  287,  571,  792,  794,
      571,  334,  335,  334,  792,  334,  794,   49,   50,   49,
       51,   51,  792,   51,  794,   54,   54,   54,   53,   59,
       58,   59,  792,   59,  794,  185,  186,  186,  186,  186,
      186,  186,  186,  186,  187,  187,  193,  193,  194,  194,
      197,  197,  207,  207,  209,  209,  212,  212,  214,  214,
      217,  217,  219,  219,  222,  222,  224,  224,  233,  233,
      235,  235,  239,  239,  242,  242,  244,  244,  244,  258,
      258,  252,  252,  255,  255,  325,  792,  794,  326,  327,
      339,  333,  494,  272,  459,  459,  459,  159,16548,  163,

      470,  470,  470,  477,  476,  478,  480,  496,  499,  506,
      792,  507,  794,  496,  496,  273,  134,  134,  135,  135,
      344,  344,  792,  344,  794,  341,  350,  350,  792,  350,
      794,  347,  359,  359,  792,  359,  794,  374,  367,  385,
      386,  385,  701,  688,  689,  691,  566,  566,  484,  485,
      486,  491,  490,  490,  497,  497,  792,  497,  794,  528,
      498,  498,  498,  510,  511,  510,  794,  510,16893, 8701,
      516,  516,  792,  516,  794,  172,  172,  174,  174,  170,
      170,  176,  176,  321,  320,  321,  792,  321,  794,  317,
      316,  317,  792,  317,  794,  416,  418,  417,  416,  415,

      411,  411,  411,  412,  411,  414,  767,  768,  768,  768,
      775,  734,  792,  794,  748,  748,  748,  735,  740,  792,
      739,  794,  748,  748,  748,  748,  736,  737,  736,  736,
      738,  739,  794,  761,  762,  762,  792,  762,  794,  761,
      761, 8950,17139,17140,17141,17142, 8947, 8950, 8949, 8949,
      642,17017,17025,  642,17017,17025,  643,  643,  642,  643,
    17017,17025,  668,  713,  669,  715,  647,  647,  650,  650,
      657,  657,  680,  681,  680,  681,  680,  681,  679,    8,
       62,   62,  261,   21,  469,  713,  715,  269,   63,   76,
       76,   76,   76,   76,   76,   76,   76,  155,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  713,  715,  550,
      713,  715,  547,  569,  569,  569,  542,  569,  569,  569,
      569,  569,  569,  569,  569,  127,  442,  465,  465,  444,
      451,  448,  449,  443,  446,  146,  146,  146,  153,  614,
      603,  606,  291,  457,  457,  710,  710,  710,   78,  142,
      143,  727,  726,  725,  301,  713,  715,   61,  186,  186,

      186,  186,  186,  186,  186,  244,  331,  315,  459,  158,
     8356,  165,  470,  472,  531,  504,  504,  500,  358,  373,
      366,  384,  385,  565,  514,  173,  171,  320,  316,  418,
      415,  411,  411,  413,  768,  775,  748,  748,  742,  746,
      748,  745,  736,  738,  738,  753,  760,  761,  759, 8948,
     8949,  306,  642,17017,17025,  643,  667,  714,  666,  716,
      666,  716,  683,  647,  647,  650,  649,  657,  657,  629,
      680,  681,  680,  681,    8,   62,   62,  468,  714,  714,
      714,  307,  716,  716,  716,  716,  308,   76,   76,   76,
       76,   76,   76,   76,   76,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  306,  714,  306,  716,  542,  569,  569,
      569,  542,  569,  569,  569,  569,  569,  576,  575,  569,
      442,  465,  465,  444,  451,  146,  146,  614,  457,  457,
      710,  710,  710,   78,  143, 8329,  139,  301,   55,   71,
       72,  186,  184,  186,  186,  186,  186,  186,  188,  331,

     8356,  531,  504,  505,  358,  373,  366,  384,  385,  690,
      565,  515,  320,  316,  413,  732,  748,  748,  741,  741,
      746,  748,  745,  737,  760,  761,  759, 8948,  647,  647,
      656,  657,  629,  629,  680,  681,  305,  304,   62,   62,
      286,  493,  308,   13,   76,   76,   76,   76,   76,   76,
       76,   76,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,   20,   20,   20,   20,
      156,   20,  261,  125,  124,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,   14,
      569,  543,  569,  540,  569,  569,  569,  569,  569,  569,
      569,  540,  126,  442,  465,  465,  286,  444,  466,  146,
      146,  149,  597,  598,  457,  457,  280,  708,  710,  710,
      710,  710,  729,  186,  186,  186,  189,  508,  513,  320,
      316,  403,  773,  733,  734,  743,  748,  748,  744,  647,
      647,17030,  629,  680,  681,   62,   62,  125,  308,   76,
      104,   76,   76,   76,   76,   76,   76,   76,   76,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  180,  261,  261,  261,  261,  261,  261,
      106,  105,  261,  261,  261,  261,   33,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,16499,  261,  261,  261,  123,  122,
      144,  261,  261,  261,  543,  569,  543,  540,  569,  569,
      569,  541,  569,  577,  569,  569,  442,  465,  465,  146,
      146,  456,  457,  710,  710,  710,  728,   68,   70,   73,
      186,  186,  320,  316,  773,  776,  747,  748,  751,  647,
     8838, 8838,  680,  681,  673,   62,   62,  106,   33,16499,

      123,  285,   76,   76,   76,   76,   76,   76,   76,   76,
      261,  261,  199,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,   83,  261,  261,  261,   87,  261,
      261,   24,  261,  261,   94,  261,  261,  261,  261,  261,
       29,  261,  261,  261,  261,  261,  261,  261,   82, 8307,
      114,  261,  261,  261,  261,  261,  261,  541,  548,  569,
      569,  569,  578,  541,  579,  569,  442,  465,  465,  146,
      146,  457,  710,  710,  710,  186,  186,  190,  520,  320,
      316,  398,  397,  752,  680,  681,  676,  672,   62,   62,

       83,   87,   24,   94,   29,   82, 8307,   76,   76,   76,
       76,   76,   76,   46,   76,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  179,  261,  261,
      261,  261,  261,  113,  261,  169,  261,  261,  261, 8324,
      156,16516,  261,  261,  261,  261,   24,   95,   88,  261,
       32,  261,  261,  261,  261,  261,   29,  261,  261,  261,
      261,   97,   25,  261,  261,  261,   84,  261,  549,  548,
      538,  569,  545,  569,  539,  569,  544,  569,  539,  442,
      465,  465,  146,  146,  595,  709,  710,  710,  710,   64,
       66,   65,  190,  320,  316,  401,  399,  402,  774,  754,

      680,  681,  675,   62,   62,   46,  113,   95,   88,   32,
       97,   25,   84,   76,   76,   76,   44,   76,   76,   76,
      261,  261,  261,  261,  195,  261,  261,  261,  261,  257,
      261,  248,  261,  261,  261,  261,  261,  261,   86,  261,
      261,  261,   89,  717, 8324,  155,  261,   81,  261,   30,
      261,   32,  261,  261,  261,   34,  261,  261,  261,  261,
      261,   25,  261,   92,  261,  538,  545,  544,  549,  538,
      545,  546,  539,  544,  442,  465,  465,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  710,   64,   74,   67,   65,  378,  379,  692,  320,

      316,  400,  407,  404,  406,  774,  680,  681,  674,   62,
       62,   44,   86,   89,   81,   30,   34,   92,   76,   76,
       91,   76,  102,   90,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  199,  261,  261,  181,  261,  261,   96,
      261,  103,  717,  717,  261,   99,   99,   30,   93,   93,
    16517,   93,   93,  156,   93,  261,  261,  261,  261,   31,
      261,  261,  261,  261,   85,  110,  109,  261,   98,  442,
      465,  465,  455,  145,  146,  146,  146,  146,  146,  710,
      378,  378,  379,  379,  320,  316,  765,  680,  681,  699,
       62,   62,   91,  102,   90,   96,  103,   99,   99,   93,

       31,   85,   98,   76,  101,   45,  261,  199,  261,  261,
      261,  261,  261,  261,  240,  261,  247,  261,  261,  261,
      261,  261,  125,  261,   93,   93,  261,  261,   23,   31,
      261,  261,  261,  261,  119,  118,  261,  442,  465,  465,
      710,  723,  721,  320,  316,  405,  699,   62,   62,  101,
       45,   23,   76,  261,  261,  261,  261,  261,  261,  261,
      261,  261, 8325,  261,  261,   23,  261,  261,  261,   26,
      108,  107,  442,  465,  465,  192,  191,  320,  316,  408,
       62,   62,   26,   76,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  260,  261,

       28,  261,  261,   26,  117,  116,  442,  465,  465,  724,
      722,  192,  191,  320,  316,   62,   62,   28,   76,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,   28,  261,  261,  442,  465,  465,  310,
      320,  316,  409,   62,   62,   76,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,   27,  442,  465,  465,  320,  316,   62,
       62,   27,  100,  261,  261,  261,  261,  261,  261,  205,
      261,  261,  261,  261,  261,  229,  261,  261,  199,  202,
      261,  261,  250,  261,  112,  111,   27,  442,  465,  465,

      320,  316,   62,   62,  100,  261,  261,  261,  261,  231,
      261,  261,  215,  261,  261,  261,  261,  210,  261,  261,
      121,  120,  442,  465,  465,   69,  320,  316,   62,   62,
      261,  261,  261,  220,  261,  261,  261,  228,  261,  249,
      261,  442,  465,  465,  320,  316,   62,   62,  261,  261,
      261,  261,  261,  442,  465,  465,   62,   62,  261,  230,
      261,  261,  225,  261,  261,  442,  465,  465,   62,   62,
      261,  261,  261,   15,  442,  465,  465,   62,   62,  261,
      226,  261,  227,  261,  442,  465,  465,   62,   62,  261,
      442,  465,  465,   62,   62,  261,  442,  465,  465,   62,

       62,  261,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,

       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,

       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
       62,   62,  442,  465,  465,   62,   62,  442,  465,  465,
      442
    } ;

static yyconst flex_int16_t yy_accept[4962] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    5,    6,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,   13,   13,   13,   14,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   16,
       17,   18,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   22,   24,
       28,   31,   34,   36,   39,   42,   47,   51,   55,   59,
       62,   65,   68,   73,   77,   81,   85,   89,   92,   94,
       97,  100,  103,  106,  112,  116,  120,  123,  126,  128,
      130,  132,  134,  136,  138,  141,  144,  150,  153,  155,
      157,  159,  161,  163,  165,  168,  171,  174,  177,  179,
      182,  185,  187,  190,  193,  196,  199,  202,  207,  212,

      215,  219,  222,  226,  230,  234,  237,  241,  245,  249,
      251,  253,  256,  259,  262,  267,  271,  275,  279,  283,
      286,  290,  294,  297,  301,  304,  309,  313,  316,  320,
      323,  327,  331,  335,  339,  342,  347,  351,  355,  358,
      362,  365,  368,  373,  377,  380,  384,  387,  391,  395,
      397,  399,  401,  403,  406,  408,  411,  414,  417,  422,
      424,  427,  430,  434,  437,  442,  446,  450,  453,  456,
      459,  462,  467,  471,  474,  477,  480,  483,  486,  491,
      495,  499,  503,  506,  510,  513,  516,  521,  525,  529,
      533,  536,  540,  544,  547,  550,  553,  555,  559,  561,

      564,  567,  570,  573,  576,  579,  581,  583,  586,  589,
      592,  595,  597,  599,  602,  605,  608,  611,  614,  617,
      620,  623,  626,  629,  632,  635,  638,  641,  644,  647,
      650,  653,  656,  659,  662,  665,  668,  671,  675,  678,
      684,  689,  694,  698,  701,  703,  705,  707,  709,  711,
      714,  716,  718,  720,  724,  726,  729,  732,  734,  737,
      740,  743,  746,  748,  752,  755,  758,  761,  764,  767,
      771,  774,  779,  784,  788,  792,  796,  800,  803,  806,
      811,  815,  819,  823,  827,  830,  833,  836,  841,  845,
      849,  852,  856,  860,  864,  867,  870,  874,  877,  880,

      884,  888,  892,  896,  900,  904,  908,  912,  916,  920,
      924,  927,  930,  933,  938,  942,  946,  949,  953,  956,
      959,  962,  965,  968,  973,  977,  981,  984,  987,  991,
      994,  997, 1002, 1006, 1010, 1013, 1017, 1021, 1025, 1030,
     1033, 1037, 1043, 1048, 1053, 1056, 1059, 1062, 1066, 1070,
     1074, 1077, 1081, 1083, 1086, 1089, 1092, 1095, 1098, 1101,
     1104, 1109, 1113, 1117, 1120, 1124, 1127, 1129, 1131, 1133,
     1135, 1137, 1140, 1144, 1148, 1151, 1157, 1162, 1167, 1170,
     1173, 1176, 1179, 1183, 1187, 1191, 1197, 1200, 1205, 1208,
     1211, 1214, 1217, 1220, 1226, 1230, 1234, 1237, 1240, 1243,

     1248, 1253, 1259, 1264, 1267, 1271, 1274, 1278, 1281, 1285,
     1289, 1293, 1296, 1300, 1304, 1307, 1310, 1313, 1318, 1322,
     1326, 1329, 1332, 1335, 1338, 1343, 1347, 1351, 1353, 1356,
     1358, 1361, 1365, 1368, 1371, 1373, 1375, 1378, 1381, 1384,
     1387, 1390, 1394, 1397, 1402, 1406, 1410, 1413, 1417, 1421,
     1426, 1429, 1432, 1435, 1440, 1444, 1448, 1451, 1454, 1457,
     1460, 1463, 1468, 1472, 1476, 1479, 1482, 1486, 1489, 1494,
     1498, 1502, 1506, 1509, 1512, 1516, 1519, 1524, 1528, 1532,
     1536, 1539, 1541, 1544, 1547, 1550, 1553, 1556, 1559, 1564,
     1568, 1572, 1575, 1579, 1582, 1585, 1588, 1593, 1597, 1601,

     1604, 1607, 1611, 1615, 1618, 1624, 1629, 1634, 1637, 1640,
     1643, 1647, 1649, 1652, 1655, 1658, 1660, 1662, 1664, 1667,
     1671, 1673, 1675, 1677, 1680, 1683, 1686, 1691, 1695, 1699,
     1702, 1705, 1708, 1711, 1714, 1717, 1721, 1725, 1728, 1731,
     1734, 1739, 1743, 1747, 1750, 1752, 1754, 1757, 1762, 1766,
     1770, 1773, 1777, 1780, 1783, 1788, 1792, 1795, 1799, 1803,
     1806, 1810, 1814, 1818, 1822, 1825, 1831, 1836, 1841, 1845,
     1847, 1850, 1853, 1856, 1859, 1862, 1865, 1868, 1873, 1877,
     1881, 1884, 1887, 1889, 1892, 1894, 1897, 1900, 1903, 1906,
     1911, 1915, 1919, 1922, 1925, 1928, 1931, 1934, 1936, 1938,

     1940, 1942, 1944, 1946, 1948, 1950, 1953, 1956, 1958, 1961,
     1964, 1967, 1970, 1973, 1976, 1979, 1981, 1984, 1987, 1989,
     1991, 1993, 1995, 1997, 2000, 2002, 2005, 2008, 2010, 2013,
     2016, 2019, 2022, 2025, 2027, 2030, 2033, 2036, 2038, 2041,
     2043, 2046, 2049, 2052, 2054, 2057, 2059, 2062, 2065, 2068,
     2070, 2073, 2075, 2078, 2081, 2084, 2086, 2089, 2091, 2094,
     2097, 2100, 2102, 2105, 2108, 2111, 2113, 2116, 2119, 2122,
     2125, 2127, 2130, 2133, 2135, 2137, 2139, 2141, 2144, 2146,
     2149, 2152, 2154, 2157, 2160, 2163, 2165, 2168, 2171, 2174,
     2176, 2179, 2182, 2185, 2188, 2191, 2197, 2201, 2206, 2211,

     2215, 2219, 2222, 2225, 2229, 2233, 2237, 2240, 2243, 2246,
     2249, 2253, 2256, 2261, 2263, 2265, 2267, 2270, 2272, 2274,
     2276, 2278, 2280, 2283, 2285, 2287, 2289, 2291, 2294, 2297,
     2299, 2302, 2305, 2308, 2311, 2314, 2317, 2322, 2326, 2330,
     2334, 2338, 2341, 2345, 2350, 2353, 2356, 2358, 2361, 2366,
     2370, 2373, 2377, 2380, 2383, 2387, 2390, 2393, 2398, 2402,
     2406, 2410, 2413, 2416, 2419, 2421, 2425, 2429, 2433, 2439,
     2443, 2448, 2452, 2456, 2459, 2463, 2467, 2471, 2474, 2478,
     2482, 2485, 2488, 2491, 2494, 2497, 2502, 2506, 2510, 2513,
     2517, 2519, 2522, 2524, 2527, 2530, 2533, 2536, 2542, 2546,

     2550, 2553, 2556, 2559, 2564, 2569, 2572, 2575, 2581, 2585,
     2589, 2592, 2595, 2598, 2603, 2608, 2612, 2615, 2621, 2626,
     2631, 2635, 2639, 2643, 2647, 2650, 2656, 2661, 2666, 2670,
     2674, 2678, 2682, 2685, 2691, 2696, 2701, 2705, 2709, 2712,
     2716, 2719, 2725, 2730, 2735, 2739, 2743, 2747, 2751, 2756,
     2759, 2762, 2765, 2770, 2774, 2778, 2782, 2786, 2789, 2792,
     2796, 2799, 2804, 2808, 2812, 2816, 2820, 2823, 2827, 2831,
     2834, 2837, 2840, 2846, 2850, 2853, 2858, 2861, 2865, 2869,
     2873, 2877, 2880, 2885, 2889, 2893, 2896, 2899, 2902, 2906,
     2909, 2914, 2918, 2922, 2926, 2930, 2934, 2937, 2941, 2945,

     2948, 2954, 2959, 2963, 2967, 2970, 2975, 2980, 2984, 2989,
     2993, 2997, 3000, 3004, 3008, 3012, 3016, 3020, 3024, 3028,
     3031, 3037, 3042, 3047, 3050, 3054, 3057, 3061, 3065, 3069,
     3072, 3078, 3083, 3088, 3092, 3095, 3098, 3103, 3107, 3111,
     3114, 3117, 3119, 3122, 3125, 3128, 3133, 3137, 3141, 3144,
     3147, 3151, 3153, 3156, 3159, 3162, 3165, 3170, 3174, 3178,
     3181, 3184, 3188, 3192, 3196, 3202, 3207, 3212, 3215, 3219,
     3223, 3226, 3232, 3237, 3242, 3245, 3249, 3252, 3257, 3261,
     3265, 3268, 3272, 3275, 3278, 3281, 3284, 3287, 3290, 3293,
     3296, 3299, 3302, 3304, 3309, 3313, 3316, 3320, 3323, 3327,

     3331, 3334, 3336, 3338, 3340, 3342, 3345, 3348, 3353, 3357,
     3361, 3365, 3368, 3371, 3374, 3377, 3379, 3382, 3387, 3391,
     3394, 3398, 3402, 3406, 3409, 3412, 3416, 3419, 3422, 3427,
     3431, 3435, 3438, 3441, 3444, 3447, 3450, 3454, 3457, 3462,
     3466, 3470, 3474, 3477, 3480, 3485, 3489, 3493, 3496, 3498,
     3500, 3503, 3507, 3510, 3513, 3515, 3519, 3523, 3526, 3532,
     3537, 3542, 3545, 3548, 3552, 3555, 3558, 3562, 3565, 3569,
     3572, 3575, 3579, 3582, 3588, 3593, 3596, 3601, 3604, 3607,
     3610, 3613, 3617, 3620, 3624, 3632, 3633, 3634, 3635, 3635,
     3636, 3637, 3637, 3637, 3638, 3639, 3640, 3640, 3640, 3640,

     3640, 3640, 3641, 3641, 3641, 3644, 3644, 3644, 3644, 3648,
     3648, 3648, 3649, 3649, 3649, 3649, 3650, 3651, 3655, 3656,
     3657, 3658, 3658, 3658, 3662, 3662, 3662, 3662, 3663, 3663,
     3664, 3665, 3665, 3665, 3665, 3665, 3665, 3666, 3667, 3668,
     3669, 3669, 3669, 3669, 3670, 3671, 3672, 3673, 3674, 3675,
     3676, 3677, 3678, 3678, 3678, 3679, 3679, 3680, 3680, 3681,
     3682, 3682, 3683, 3684, 3685, 3686, 3686, 3686, 3687, 3688,
     3689, 3690, 3691, 3692, 3692, 3692, 3692, 3693, 3695, 3697,
     3698, 3698, 3699, 3700, 3702, 3705, 3708, 3711, 3711, 3711,
     3712, 3712, 3712, 3715, 3715, 3715, 3715, 3716, 3717, 3717,

     3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3718,
     3719, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720,
     3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720,
     3720, 3720, 3720, 3720, 3720, 3720, 3720, 3721, 3721, 3721,
     3721, 3721, 3721, 3721, 3722, 3723, 3724, 3725, 3725, 3725,
     3726, 3726, 3726, 3727, 3728, 3729, 3729, 3730, 3731, 3731,
     3731, 3732, 3732, 3733, 3734, 3735, 3736, 3737, 3738, 3738,
     3739, 3740, 3741, 3742, 3742, 3742, 3743, 3744, 3745, 3746,
     3747, 3748, 3749, 3750, 3751, 3752, 3753, 3754, 3755, 3756,
     3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 3766,

     3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3777,
     3779, 3780, 3780, 3780, 3780, 3780, 3780, 3781, 3781, 3781,
     3782, 3782, 3782, 3783, 3784, 3784, 3785, 3785, 3786, 3787,
     3788, 3789, 3790, 3791, 3792, 3793, 3793, 3793, 3793, 3793,
     3793, 3793, 3793, 3793, 3793, 3793, 3793, 3794, 3795, 3796,
     3797, 3797, 3798, 3798, 3799, 3800, 3801, 3802, 3803, 3804,
     3805, 3806, 3807, 3808, 3809, 3810, 3810, 3810, 3810, 3810,
     3810, 3811, 3812, 3814, 3815, 3815, 3816, 3817, 3817, 3817,
     3819, 3821, 3821, 3822, 3822, 3822, 3823, 3823, 3823, 3824,
     3824, 3825, 3826, 3826, 3826, 3826, 3826, 3826, 3826, 3827,

     3827, 3827, 3828, 3828, 3829, 3830, 3831, 3831, 3831, 3831,
     3833, 3835, 3835, 3836, 3836, 3836, 3837, 3838, 3840, 3842,
     3843, 3843, 3843, 3843, 3844, 3846, 3848, 3849, 3849, 3851,
     3851, 3851, 3852, 3854, 3856, 3857, 3858, 3858, 3859, 3859,
     3860, 3861, 3861, 3862, 3864, 3867, 3867, 3868, 3868, 3869,
     3870, 3872, 3873, 3874, 3876, 3878, 3879, 3881, 3883, 3884,
     3885, 3886, 3887, 3888, 3889, 3889, 3889, 3889, 3890, 3891,
     3892, 3894, 3896, 3897, 3898, 3899, 3900, 3900, 3901, 3901,
     3901, 3901, 3901, 3903, 3903, 3905, 3905, 3905, 3905, 3906,
     3907, 3907, 3907, 3907, 3907, 3907, 3907, 3907, 3908, 3908,

     3908, 3908, 3909, 3910, 3911, 3912, 3913, 3914, 3916, 3918,
     3919, 3920, 3920, 3921, 3922, 3924, 3926, 3927, 3927, 3927,
     3928, 3929, 3930, 3931, 3932, 3934, 3936, 3936, 3936, 3936,
     3936, 3936, 3936, 3936, 3936, 3936, 3937, 3938, 3939, 3939,
     3939, 3940, 3941, 3942, 3943, 3944, 3945, 3946, 3947, 3947,
     3947, 3947, 3947, 3948, 3949, 3950, 3951, 3952, 3953, 3954,
     3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964,
     3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3974,
     3975, 3976, 3977, 3977, 3977, 3977, 3977, 3978, 3978, 3978,
     3979, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3986,

     3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993, 3993, 3993,
     3993, 3993, 3993, 3993, 3993, 3993, 3993, 3993, 3994, 3994,
     3994, 3995, 3995, 3995, 3995, 3996, 3997, 3998, 3998, 3999,
     4000, 4001, 4001, 4001, 4001, 4001, 4001, 4002, 4002, 4002,
     4003, 4003, 4004, 4004, 4004, 4004, 4005, 4006, 4007, 4007,
     4008, 4009, 4010, 4010, 4010, 4010, 4010, 4012, 4014, 4015,
     4015, 4016, 4016, 4016, 4017, 4018, 4019, 4020, 4021, 4021,
     4022, 4024, 4026, 4027, 4028, 4030, 4032, 4033, 4034, 4034,
     4034, 4036, 4038, 4039, 4039, 4039, 4040, 4040, 4040, 4041,
     4041, 4041, 4042, 4043, 4043, 4044, 4045, 4046, 4047, 4047,

     4048, 4048, 4048, 4049, 4049, 4050, 4051, 4052, 4053, 4054,
     4055, 4056, 4058, 4060, 4061, 4062, 4063, 4064, 4065, 4066,
     4068, 4068, 4068, 4069, 4070, 4071, 4072, 4074, 4076, 4076,
     4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4077,
     4077, 4077, 4078, 4079, 4080, 4081, 4081, 4081, 4082, 4083,
     4084, 4085, 4085, 4086, 4088, 4090, 4091, 4091, 4092, 4094,
     4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
     4096, 4096, 4096, 4097, 4097, 4098, 4099, 4100, 4100, 4101,
     4101, 4101, 4101, 4102, 4103, 4103, 4103, 4103, 4104, 4105,
     4106, 4107, 4107, 4107, 4108, 4108, 4108, 4108, 4108, 4108,

     4108, 4109, 4109, 4109, 4110, 4110, 4111, 4111, 4111, 4111,
     4111, 4111, 4112, 4112, 4112, 4112, 4112, 4113, 4113, 4113,
     4113, 4113, 4114, 4115, 4116, 4117, 4118, 4118, 4119, 4121,
     4123, 4124, 4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125,
     4125, 4125, 4126, 4126, 4127, 4127, 4127, 4129, 4130, 4131,
     4134, 4135, 4136, 4138, 4140, 4140, 4140, 4140, 4141, 4141,
     4142, 4147, 4149, 4149, 4150, 4151, 4151, 4151, 4151, 4151,
     4154, 4157, 4157, 4158, 4158, 4158, 4159, 4159, 4163, 4163,
     4163, 4163, 4165, 4165, 4165, 4167, 4167, 4167, 4167, 4168,
     4169, 4170, 4171, 4172, 4172, 4172, 4172, 4173, 4173, 4175,

     4177, 4177, 4177, 4178, 4178, 4179, 4179, 4180, 4180, 4180,
     4180, 4180, 4180, 4180, 4181, 4181, 4181, 4181, 4181, 4181,
     4181, 4182, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183,
     4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183,
     4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183,
     4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4184,
     4184, 4184, 4184, 4185, 4186, 4186, 4186, 4186, 4186, 4186,
     4186, 4186, 4186, 4186, 4187, 4187, 4187, 4187, 4188, 4188,
     4188, 4189, 4189, 4189, 4189, 4189, 4190, 4190, 4191, 4192,
     4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202,

     4203, 4204, 4205, 4205, 4205, 4206, 4207, 4208, 4209, 4210,
     4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220,
     4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230,
     4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240,
     4241, 4242, 4243, 4244, 4245, 4246, 4247, 4247, 4247, 4247,
     4248, 4248, 4249, 4249, 4250, 4250, 4250, 4250, 4250, 4250,
     4250, 4250, 4250, 4250, 4250, 4251, 4252, 4252, 4252, 4253,
     4253, 4254, 4254, 4255, 4256, 4257, 4259, 4260, 4261, 4262,
     4263, 4264, 4265, 4266, 4266, 4266, 4266, 4267, 4267, 4269,
     4270, 4271, 4271, 4272, 4272, 4272, 4273, 4274, 4274, 4275,

     4276, 4276, 4276, 4276, 4276, 4277, 4278, 4279, 4279, 4279,
     4280, 4280, 4280, 4281, 4281, 4281, 4282, 4282, 4282, 4283,
     4283, 4283, 4283, 4283, 4283, 4284, 4285, 4286, 4286, 4287,
     4288, 4289, 4289, 4290, 4290, 4290, 4291, 4292, 4292, 4292,
     4292, 4292, 4293, 4294, 4294, 4294, 4294, 4294, 4295, 4295,
     4296, 4297, 4297, 4298, 4298, 4299, 4299, 4299, 4299, 4299,
     4299, 4299, 4299, 4299, 4299, 4299, 4299, 4299, 4299, 4300,
     4301, 4302, 4303, 4304, 4305, 4306, 4306, 4306, 4306, 4306,
     4306, 4307, 4307, 4307, 4308, 4308, 4308, 4308, 4308, 4308,
     4308, 4308, 4308, 4308, 4309, 4309, 4309, 4310, 4311, 4311,

     4311, 4312, 4312, 4313, 4314, 4314, 4314, 4315, 4315, 4316,
     4316, 4316, 4316, 4316, 4317, 4318, 4318, 4319, 4319, 4319,
     4320, 4320, 4320, 4320, 4321, 4321, 4321, 4321, 4322, 4322,
     4322, 4322, 4323, 4323, 4323, 4324, 4324, 4324, 4324, 4324,
     4325, 4325, 4325, 4325, 4325, 4325, 4325, 4326, 4326, 4326,
     4326, 4326, 4326, 4326, 4326, 4327, 4327, 4328, 4328, 4328,
     4329, 4329, 4330, 4330, 4330, 4330, 4330, 4330, 4330, 4330,
     4330, 4330, 4330, 4331, 4332, 4333, 4334, 4334, 4335, 4335,
     4335, 4335, 4335, 4336, 4336, 4337, 4337, 4337, 4337, 4337,
     4337, 4337, 4338, 4339, 4339, 4339, 4339, 4339, 4340, 4340,

     4340, 4340, 4340, 4340, 4342, 4343, 4344, 4345, 4346, 4346,
     4346, 4346, 4346, 4347, 4349, 4350, 4351, 4352, 4353, 4353,
     4356, 4357, 4357, 4359, 4359, 4361, 4363, 4364, 4365, 4366,
     4367, 4368, 4368, 4369, 4370, 4370, 4370, 4370, 4370, 4371,
     4373, 4374, 4375, 4375, 4375, 4375, 4375, 4375, 4375, 4375,
     4376, 4376, 4376, 4376, 4377, 4378, 4378, 4378, 4378, 4378,
     4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378,
     4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378,
     4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378,
     4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378,

     4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378, 4378,
     4379, 4379, 4379, 4379, 4379, 4379, 4379, 4379, 4380, 4381,
     4382, 4383, 4383, 4383, 4384, 4385, 4386, 4387, 4388, 4388,
     4388, 4388, 4388, 4389, 4390, 4391, 4392, 4393, 4394, 4395,
     4396, 4397, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4405,
     4406, 4407, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415,
     4416, 4417, 4418, 4419, 4420, 4421, 4422, 4423, 4424, 4425,
     4426, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435,
     4436, 4437, 4438, 4439, 4440, 4441, 4441, 4442, 4443, 4444,
     4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454,

     4454, 4454, 4456, 4458, 4458, 4458, 4459, 4459, 4459, 4459,
     4459, 4459, 4459, 4459, 4459, 4460, 4461, 4462, 4463, 4464,
     4465, 4466, 4467, 4468, 4469, 4470, 4471, 4471, 4471, 4471,
     4471, 4473, 4474, 4475, 4475, 4476, 4476, 4476, 4476, 4477,
     4478, 4478, 4478, 4479, 4479, 4479, 4479, 4479, 4479, 4480,
     4481, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4488,
     4488, 4488, 4488, 4489, 4490, 4490, 4491, 4491, 4491, 4491,
     4491, 4491, 4491, 4491, 4492, 4492, 4493, 4495, 4496, 4497,
     4498, 4499, 4499, 4500, 4500, 4500, 4500, 4500, 4501, 4501,
     4501, 4501, 4502, 4502, 4502, 4502, 4502, 4503, 4503, 4503,

     4504, 4505, 4505, 4505, 4505, 4506, 4506, 4506, 4507, 4507,
     4507, 4508, 4508, 4508, 4509, 4509, 4510, 4511, 4511, 4511,
     4512, 4512, 4512, 4512, 4512, 4512, 4512, 4512, 4512, 4512,
     4512, 4512, 4513, 4513, 4514, 4514, 4515, 4515, 4515, 4515,
     4515, 4515, 4515, 4515, 4515, 4515, 4516, 4516, 4516, 4516,
     4516, 4516, 4517, 4517, 4518, 4519, 4520, 4520, 4521, 4521,
     4521, 4521, 4521, 4521, 4521, 4521, 4523, 4524, 4525, 4525,
     4525, 4525, 4527, 4528, 4529, 4529, 4530, 4531, 4533, 4533,
     4533, 4534, 4534, 4534, 4534, 4535, 4537, 4537, 4537, 4537,
     4537, 4537, 4537, 4537, 4538, 4539, 4540, 4541, 4541, 4541,

     4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541,
     4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541,
     4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541,
     4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541,
     4541, 4541, 4541, 4542, 4542, 4542, 4542, 4542, 4542, 4542,
     4542, 4542, 4542, 4543, 4543, 4543, 4543, 4543, 4544, 4544,
     4545, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553,
     4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563,
     4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573,
     4574, 4575, 4576, 4577, 4578, 4579, 4580, 4582, 4584, 4585,

     4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595,
     4596, 4597, 4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605,
     4606, 4606, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613,
     4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4621, 4621,
     4621, 4621, 4621, 4621, 4621, 4621, 4621, 4621, 4622, 4624,
     4626, 4627, 4628, 4629, 4630, 4631, 4632, 4633, 4633, 4633,
     4634, 4636, 4637, 4639, 4639, 4639, 4639, 4640, 4641, 4642,
     4643, 4643, 4643, 4644, 4645, 4646, 4647, 4648, 4650, 4651,
     4652, 4653, 4653, 4653, 4654, 4654, 4654, 4654, 4654, 4654,
     4654, 4654, 4654, 4654, 4654, 4655, 4656, 4657, 4657, 4657,

     4657, 4658, 4658, 4658, 4658, 4658, 4658, 4658, 4658, 4659,
     4659, 4659, 4659, 4659, 4659, 4659, 4659, 4659, 4659, 4659,
     4659, 4659, 4659, 4659, 4659, 4660, 4660, 4660, 4660, 4660,
     4660, 4660, 4660, 4660, 4660, 4660, 4660, 4660, 4660, 4661,
     4661, 4662, 4662, 4663, 4663, 4663, 4663, 4663, 4663, 4663,
     4663, 4663, 4663, 4663, 4664, 4664, 4664, 4664, 4666, 4668,
     4669, 4670, 4670, 4670, 4670, 4670, 4670, 4670, 4670, 4670,
     4670, 4670, 4670, 4670, 4670, 4670, 4671, 4673, 4674, 4674,
     4676, 4676, 4676, 4676, 4676, 4676, 4677, 4678, 4678, 4678,
     4678, 4678, 4678, 4678, 4678, 4678, 4678, 4678, 4678, 4678,

     4678, 4679, 4679, 4679, 4679, 4679, 4679, 4679, 4679, 4679,
     4679, 4679, 4679, 4679, 4679, 4679, 4679, 4679, 4679, 4679,
     4679, 4679, 4679, 4679, 4679, 4679, 4679, 4679, 4679, 4679,
     4679, 4679, 4679, 4679, 4679, 4679, 4679, 4679, 4680, 4680,
     4682, 4683, 4684, 4685, 4686, 4687, 4688, 4689, 4690, 4691,
     4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701,
     4702, 4703, 4704, 4706, 4707, 4708, 4709, 4710, 4711, 4712,
     4713, 4714, 4714, 4715, 4716, 4717, 4717, 4717, 4718, 4719,
     4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729,
     4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739,

     4739, 4739, 4740, 4741, 4742, 4743, 4744, 4746, 4747, 4748,
     4749, 4750, 4751, 4752, 4752, 4753, 4754, 4755, 4755, 4755,
     4756, 4756, 4756, 4756, 4756, 4756, 4756, 4756, 4757, 4758,
     4759, 4760, 4761, 4762, 4764, 4764, 4765, 4766, 4767, 4767,
     4769, 4770, 4770, 4771, 4772, 4772, 4773, 4774, 4775, 4776,
     4777, 4777, 4777, 4778, 4779, 4779, 4779, 4779, 4779, 4780,
     4780, 4781, 4781, 4782, 4783, 4783, 4783, 4783, 4783, 4783,
     4783, 4783, 4783, 4783, 4783, 4783, 4783, 4783, 4783, 4783,
     4783, 4783, 4783, 4783, 4783, 4783, 4783, 4784, 4784, 4785,
     4785, 4785, 4785, 4785, 4785, 4785, 4785, 4785, 4785, 4785,

     4785, 4785, 4785, 4786, 4786, 4787, 4787, 4789, 4789, 4789,
     4789, 4789, 4789, 4789, 4790, 4790, 4790, 4790, 4790, 4790,
     4790, 4790, 4791, 4791, 4792, 4793, 4795, 4795, 4795, 4795,
     4796, 4796, 4797, 4798, 4798, 4798, 4798, 4798, 4798, 4798,
     4798, 4798, 4798, 4798, 4798, 4799, 4799, 4799, 4799, 4800,
     4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800,
     4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800,
     4800, 4800, 4801, 4801, 4801, 4802, 4802, 4802, 4802, 4802,
     4802, 4803, 4803, 4804, 4805, 4806, 4807, 4808, 4809, 4810,
     4811, 4812, 4813, 4815, 4816, 4817, 4818, 4819, 4820, 4821,

     4822, 4823, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831,
     4831, 4831, 4832, 4832, 4832, 4833, 4833, 4833, 4834, 4835,
     4836, 4836, 4836, 4837, 4838, 4839, 4840, 4841, 4842, 4842,
     4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4851,
     4852, 4853, 4854, 4855, 4855, 4855, 4856, 4857, 4858, 4859,
     4860, 4861, 4862, 4863, 4864, 4865, 4865, 4865, 4866, 4867,
     4868, 4868, 4868, 4868, 4868, 4869, 4869, 4869, 4869, 4870,
     4871, 4872, 4873, 4873, 4874, 4875, 4876, 4877, 4877, 4879,
     4880, 4880, 4881, 4882, 4882, 4883, 4884, 4885, 4886, 4886,
     4886, 4886, 4886, 4886, 4886, 4886, 4886, 4887, 4888, 4888,

     4888, 4889, 4889, 4889, 4889, 4889, 4889, 4889, 4890, 4890,
     4890, 4890, 4890, 4890, 4890, 4890, 4890, 4890, 4890, 4890,
     4890, 4890, 4891, 4891, 4892, 4892, 4892, 4892, 4892, 4892,
     4892, 4892, 4893, 4894, 4894, 4894, 4894, 4894, 4894, 4894,
     4894, 4894, 4894, 4894, 4895, 4895, 4895, 4895, 4895, 4895,
     4895, 4895, 4895, 4897, 4897, 4898, 4898, 4899, 4900, 4901,
     4901, 4901, 4901, 4901, 4901, 4901, 4901, 4901, 4901, 4901,
     4901, 4901, 4901, 4901, 4901, 4902, 4902, 4903, 4903, 4903,
     4903, 4904, 4904, 4904, 4905, 4905, 4905, 4905, 4905, 4905,
     4905, 4906, 4906, 4906, 4906, 4906, 4906, 4906, 4907, 4908,

     4908, 4908, 4908, 4908, 4908, 4908, 4908, 4909, 4910, 4911,
     4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921,
     4922, 4923, 4924, 4925, 4926, 4927, 4928, 4930, 4931, 4932,
     4933, 4934, 4935, 4935, 4936, 4936, 4937, 4938, 4938, 4938,
     4939, 4940, 4940, 4940, 4940, 4940, 4940, 4943, 4944, 4945,
     4946, 4947, 4948, 4949, 4949, 4950, 4951, 4951, 4952, 4953,
     4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961, 4961, 4961,
     4962, 4963, 4963, 4964, 4965, 4965, 4966, 4966, 4966, 4967,
     4968, 4969, 4969, 4969, 4969, 4969, 4970, 4971, 4973, 4975,
     4977, 4979, 4980, 4982, 4983, 4983, 4984, 4985, 4986, 4988,

     4989, 4990, 4990, 4990, 4990, 4991, 4991, 4992, 4992, 4992,
     4993, 4993, 4993, 4994, 4994, 4994, 4994, 4994, 4994, 4994,
     4994, 4994, 4994, 4994, 4994, 4994, 4994, 4994, 4994, 4994,
     4995, 4995, 4996, 4996, 4996, 4996, 4996, 4996, 4997, 4998,
     4999, 4999, 4999, 4999, 5000, 5000, 5000, 5000, 5000, 5001,
     5001, 5001, 5001, 5001, 5001, 5003, 5004, 5004, 5005, 5006,
     5006, 5006, 5006, 5006, 5006, 5006, 5007, 5007, 5007, 5007,
     5007, 5008, 5008, 5008, 5008, 5008, 5008, 5008, 5009, 5009,
     5010, 5010, 5010, 5011, 5011, 5011, 5011, 5011, 5011, 5011,
     5011, 5011, 5012, 5012, 5013, 5013, 5013, 5013, 5013, 5014,

     5014, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022,
     5023, 5024, 5025, 5027, 5028, 5029, 5030, 5032, 5034, 5035,
     5036, 5037, 5038, 5039, 5040, 5041, 5042, 5042, 5042, 5043,
     5044, 5045, 5045, 5045, 5045, 5045, 5047, 5048, 5049, 5050,
     5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059,
     5060, 5061, 5061, 5061, 5062, 5063, 5064, 5064, 5064, 5065,
     5065, 5065, 5066, 5066, 5067, 5068, 5069, 5070, 5071, 5072,
     5073, 5074, 5075, 5077, 5078, 5078, 5079, 5079, 5080, 5081,
     5082, 5083, 5084, 5085, 5086, 5087, 5088, 5089, 5090, 5091,
     5092, 5093, 5093, 5093, 5093, 5093, 5094, 5095, 5096, 5097,

     5097, 5097, 5097, 5097, 5097, 5097, 5098, 5099, 5100, 5100,
     5100, 5100, 5100, 5100, 5100, 5100, 5100, 5101, 5101, 5102,
     5103, 5103, 5103, 5103, 5104, 5105, 5106, 5106, 5106, 5107,
     5107, 5107, 5107, 5107, 5107, 5107, 5107, 5109, 5110, 5111,
     5112, 5112, 5112, 5112, 5113, 5113, 5113, 5113, 5113, 5114,
     5114, 5114, 5115, 5116, 5116, 5116, 5117, 5117, 5117, 5117,
     5117, 5118, 5118, 5118, 5118, 5118, 5118, 5119, 5119, 5120,
     5121, 5122, 5123, 5124, 5125, 5126, 5127, 5128, 5129, 5130,
     5131, 5132, 5133, 5134, 5136, 5137, 5139, 5140, 5141, 5142,
     5142, 5142, 5143, 5144, 5145, 5145, 5145, 5145, 5145, 5146,

     5147, 5148, 5149, 5150, 5152, 5153, 5155, 5157, 5158, 5159,
     5160, 5160, 5161, 5162, 5163, 5164, 5165, 5166, 5167, 5168,
     5168, 5169, 5170, 5170, 5170, 5170, 5170, 5172, 5173, 5174,
     5175, 5176, 5177, 5178, 5179, 5180, 5181, 5181, 5181, 5181,
     5181, 5181, 5181, 5181, 5181, 5181, 5182, 5183, 5184, 5185,
     5185, 5185, 5185, 5185, 5185, 5185, 5185, 5186, 5186, 5187,
     5187, 5187, 5187, 5187, 5188, 5188, 5188, 5188, 5188, 5188,
     5188, 5191, 5192, 5193, 5193, 5193, 5194, 5194, 5195, 5196,
     5196, 5197, 5198, 5199, 5200, 5201, 5201, 5201, 5201, 5201,
     5202, 5202, 5202, 5202, 5202, 5203, 5204, 5205, 5206, 5207,

     5208, 5210, 5211, 5212, 5213, 5214, 5215, 5217, 5219, 5220,
     5221, 5222, 5223, 5224, 5224, 5224, 5224, 5225, 5225, 5225,
     5226, 5226, 5227, 5228, 5229, 5229, 5230, 5231, 5232, 5233,
     5234, 5235, 5236, 5237, 5238, 5238, 5238, 5238, 5238, 5240,
     5241, 5242, 5243, 5244, 5244, 5244, 5244, 5244, 5244, 5244,
     5244, 5244, 5244, 5244, 5244, 5244, 5244, 5244, 5244, 5245,
     5245, 5246, 5247, 5247, 5247, 5247, 5247, 5247, 5247, 5248,
     5249, 5250, 5250, 5251, 5252, 5252, 5252, 5252, 5253, 5253,
     5253, 5253, 5253, 5254, 5255, 5256, 5257, 5258, 5259, 5260,
     5261, 5262, 5263, 5263, 5263, 5263, 5263, 5263, 5263, 5264,

     5265, 5266, 5267, 5268, 5269, 5270, 5270, 5271, 5271, 5272,
     5273, 5273, 5273, 5275, 5276, 5276, 5276, 5276, 5276, 5277,
     5277, 5278, 5278, 5278, 5278, 5278, 5278, 5278, 5278, 5278,
     5278, 5278, 5279, 5279, 5280, 5280, 5281, 5281, 5281, 5282,
     5283, 5283, 5283, 5283, 5283, 5283, 5283, 5283, 5284, 5285,
     5286, 5287, 5288, 5289, 5290, 5291, 5292, 5293, 5294, 5295,
     5296, 5297, 5298, 5299, 5300, 5300, 5300, 5301, 5301, 5302,
     5303, 5304, 5305, 5306, 5307, 5307, 5309, 5310, 5311, 5312,
     5312, 5313, 5314, 5314, 5314, 5314, 5314, 5314, 5314, 5314,
     5314, 5314, 5314, 5314, 5314, 5314, 5314, 5315, 5315, 5316,

     5316, 5316, 5317, 5318, 5318, 5318, 5318, 5319, 5319, 5319,
     5320, 5321, 5322, 5323, 5324, 5325, 5326, 5327, 5328, 5329,
     5330, 5331, 5332, 5333, 5334, 5334, 5334, 5335, 5336, 5337,
     5337, 5339, 5340, 5340, 5340, 5340, 5340, 5340, 5340, 5341,
     5341, 5341, 5341, 5341, 5341, 5341, 5341, 5341, 5342, 5342,
     5343, 5344, 5344, 5345, 5346, 5346, 5346, 5346, 5347, 5348,
     5349, 5350, 5351, 5352, 5353, 5354, 5355, 5356, 5357, 5358,
     5359, 5360, 5361, 5362, 5363, 5363, 5363, 5364, 5364, 5365,
     5365, 5367, 5368, 5368, 5368, 5368, 5368, 5368, 5368, 5368,
     5368, 5368, 5368, 5368, 5368, 5369, 5369, 5370, 5371, 5372,

     5372, 5372, 5372, 5373, 5374, 5375, 5376, 5377, 5378, 5379,
     5380, 5382, 5383, 5384, 5385, 5386, 5388, 5389, 5392, 5393,
     5395, 5396, 5397, 5397, 5398, 5398, 5400, 5401, 5401, 5401,
     5401, 5401, 5401, 5401, 5401, 5402, 5402, 5403, 5404, 5405,
     5406, 5407, 5408, 5409, 5410, 5412, 5413, 5415, 5416, 5417,
     5418, 5420, 5421, 5422, 5423, 5423, 5423, 5425, 5426, 5427,
     5427, 5427, 5427, 5428, 5428, 5429, 5430, 5431, 5432, 5433,
     5434, 5436, 5437, 5438, 5440, 5442, 5442, 5442, 5442, 5444,
     5445, 5445, 5445, 5446, 5447, 5448, 5449, 5450, 5451, 5452,
     5453, 5454, 5454, 5456, 5457, 5458, 5459, 5460, 5462, 5463,

     5465, 5466, 5466, 5468, 5469, 5470, 5471, 5472, 5473, 5474,
     5474, 5474, 5475, 5477, 5478, 5479, 5480, 5481, 5483, 5485,
     5487, 5488, 5489, 5490, 5491, 5493, 5494, 5495, 5496, 5497,
     5499, 5500, 5501, 5502, 5503, 5505, 5506, 5507, 5508, 5510,
     5511, 5512, 5513, 5515, 5516, 5517, 5518, 5520, 5521, 5522,
     5523, 5525, 5526, 5527, 5528, 5530, 5531, 5532, 5533, 5535,
     5536, 5537, 5538, 5540, 5541, 5542, 5543, 5545, 5546, 5547,
     5548, 5550, 5551, 5552, 5553, 5555, 5556, 5557, 5558, 5560,
     5561, 5562, 5563, 5565, 5566, 5567, 5568, 5570, 5571, 5572,
     5573, 5575, 5576, 5577, 5578, 5580, 5581, 5582, 5583, 5585,

     5586, 5587, 5588, 5590, 5591, 5592, 5593, 5595, 5596, 5597,
     5598, 5600, 5601, 5602, 5603, 5605, 5606, 5607, 5608, 5610,
     5611, 5612, 5613, 5615, 5616, 5617, 5618, 5620, 5621, 5622,
     5623, 5625, 5626, 5627, 5628, 5630, 5631, 5632, 5633, 5635,
     5636, 5637, 5638, 5640, 5641, 5642, 5643, 5645, 5646, 5647,
     5648, 5650, 5651, 5652, 5653, 5655, 5656, 5657, 5658, 5660,
     5661, 5662, 5663, 5665, 5666, 5667, 5668, 5670, 5671, 5672,
     5673, 5675, 5676, 5677, 5678, 5680, 5681, 5682, 5683, 5685,
     5686, 5687, 5688, 5690, 5691, 5692, 5693, 5695, 5696, 5697,
     5698, 5700, 5701, 5702, 5703, 5705, 5706, 5707, 5708, 5710,

     5711, 5712, 5713, 5715, 5716, 5717, 5718, 5720, 5721, 5722,
     5723, 5725, 5726, 5727, 5728, 5730, 5731, 5732, 5733, 5735,
     5736, 5737, 5738, 5740, 5741, 5742, 5743, 5745, 5746, 5747,
     5748, 5750, 5751, 5752, 5753, 5755, 5756, 5757, 5758, 5760,
     5761, 5762, 5763, 5765, 5766, 5767, 5768, 5770, 5771, 5772,
     5773, 5775, 5776, 5777, 5778, 5780, 5781, 5781, 5781, 5782,
     5782
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   24,   24,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   41,   57,   41,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   73,   89,   90,   91,   92,    1,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93
    } ;

static yyconst flex_int32_t yy_meta[94] =
    {   0,
        1,    2,    3,    4,    2,    5,    6,    7,    8,    1,
        9,   10,   11,   12,   13,    1,   14,    1,   15,   16,
       17,   17,   17,   17,   17,   17,   18,   19,   20,   21,
       22,    1,   23,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   25,   26,   27,
       28,   24,    1,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   29,    1,
       30,   31,   32

    } ;

static yyconst flex_int32_t yy_base[5686] =
    {   0,
        0,    2,   16,   18,   32,   46,   66,    0,  158,  169,
      228,    0,  321,    0,  414,    0,  507,    0,  598,  600,
      658,    0,  172,  192,  751,    0,  842,  844,  904,    0,
      997,    0, 1089, 1100, 1110, 1128,  190,  614, 1143, 1150,
     1239,    0,  616,  858, 1332,    0, 1425,    0,  869, 1184,
     1516, 1518, 1198, 1217,  872, 1544, 1547, 1558, 1647,    0,
     1739, 1753, 1569, 1580, 1742, 1767, 1786, 1831, 1845, 1864,
     1878, 1897, 1988,    0, 1603, 1609, 1804, 1907, 2081,    0,
     2173, 2184, 2207, 2218, 2187, 2221, 1925, 2241, 2264, 2279,
     2338,    0, 2429, 2432, 2443, 2450,  632, 1789, 1936, 1956,

     2453, 2468, 2471, 2474, 1967, 2307, 2493, 2526, 2529, 2561,
     2496, 2532, 2285, 2310, 2575, 2594, 2608, 2622, 2642,    0,
     2733, 2735, 2754, 2765, 2776, 2795, 2854,    0, 2947,    0,
     3040,    0, 3133,    0, 3224, 3238, 2564, 2805, 2597, 2829,
     3329,    0, 3227, 3245, 3422,    0, 3256, 3259, 3515,    0,
     3275, 3278, 3608,    0, 3699, 3702, 3717, 3720, 3747, 3831,
     3723, 3745, 3917,    0, 4010,    0, 3763, 3784, 4103,    0,
     4196,    0, 3773, 3834, 4289,    0, 3304, 3787, 3845, 3859,
     3873, 3891, 4382,    0, 4475,    0, 4568,    0, 4661,    0,
     4754,    0, 4847,    0, 4940,    0, 5033,    0, 5126,    0,

     5219,    0, 5312,    0, 5403, 5406, 5421, 5424, 5444,    0,
     5537,    0, 5628, 5631, 3880, 5646, 5666,    0, 5757, 5759,
     5779,    0, 5872,    0, 5963, 5965, 5984, 6074, 6019, 6044,
     6165,    0, 5987, 6047, 6101, 6130, 6258,    0, 6349, 6351,
     6133, 6373, 6404,    0, 6050, 6495, 6497, 6511, 6568, 6651,
     6734, 6817, 6525, 6527, 6901,    0, 6994,    0, 6025, 6541,
     6571, 6582, 6603, 6609, 6624, 6630, 6666, 6687, 6701, 6707,
     6737, 6761, 6792, 7085, 6803, 6831, 7096, 7110, 7193,    0,
     6852, 6872, 6764, 7126, 7140, 7285, 7288, 7303, 7306, 7309,
     7324, 7327, 7342, 7364, 7382, 7409, 7438, 7462, 7472, 7478,

     7496, 7506, 7565,    0, 7155, 7658, 7751,    0, 7158, 7844,
     7516, 7537, 7540, 7935, 7953, 8034, 8117,    0, 8210,    0,
     7938, 7967, 8303,    0, 7964, 7990, 8052, 8062, 7161, 7427,
     8081, 8395, 8406, 8417, 8433, 8524,15332,40351,40351,40351,
    40351,40351,   12,40351,40351,40351,40351,40351,40351,   22,
    40351,40351,40351,40351,40351,40351,40351,   28,    0,  206,
    40351,   13, 1178,40351,40351,40351,   35,   53, 7355,  611,
     1599,  211, 8454, 7395,15302,40351, 8484,   59,  644, 5976,
      855, 2299,  891, 8468,40351,40351,  222,40351,  149,15301,
    40351,15253, 6370, 6538, 6721,40351,40351,40351,40351,    0,

    40351,  167,40351,40351,    0,    0,  614, 1113,40351,15244,
        0, 2464,    0,40351,40351,40351,40351,40351,40351,  168,
    15271, 6093,40351,   60,40351,40351,40351,    0,40351,  176,
    40351,    0,40351,40351,40351,40351,40351,40351,  589,40351,
    40351,40351,40351,40351,    0,40351,  617,    0,40351, 8019,
     8616, 8513,    0,40351,15266,40351,40351, 6644, 8545,15282,
      649,40351,40351,40351,40351,40351,40351,  635,15212,  807,
    15213,40351,15224,40351, 6757, 7403,40351,40351,40351,40351,
    40351, 7530,  833, 7986,40351,40351,40351,40351,40351, 8480,
      848, 8503,40351, 8708, 8727, 8734, 1630, 1109, 8715,  778,

       36, 8741, 1537, 8566,40351,  883,15260,15227, 8571,  609,
    40351,15219, 2202, 6726, 8793, 8821,15184,40351, 8825, 8829,
     8833, 8837, 8866, 8871, 8877, 8886, 8915, 8919, 8931, 8952,
     8963, 8935, 8967, 8981, 8971, 9002,40351,    0,40351,    0,
        0,    0, 1080, 1067, 8576, 8606, 2841, 9015,15215, 9009,
     8592, 9023, 9052, 1142,    0,40351, 9056, 1095,40351,40351,
        0,40351, 1101,40351,40351,40351,40351, 9079,40351, 2746,
     6386,40351,40351,40351,40351,40351, 1638, 1104,40351,40351,
    40351,40351,40351,40351, 1113,40351,40351,40351,40351,40351,
     1114,40351,40351, 9106,    0,    0,40351,15207, 1139, 8926,

        0,15171,15154,15150, 1129,15135,15140,15135, 1142,15123,
    40351, 2255, 9060,40351,40351,40351, 1149,40351, 9083,15126,
    15112,40351,40351,40351,40351,40351, 6006, 1175,40351,15165,
    40351,40351,40351,40351, 1213,40351,40351,    0, 5657, 2332,
     2634,40351, 1233,15135, 1507,15158,15178,40351, 5771,40351,
     1158,40351,    0,40351,40351, 9093, 9098, 9128,40351,40351,
    40351,40351,40351, 1517, 9137,40351, 9089, 9141, 6152, 9176,
    15157, 9149,    0, 1566,40351,40351, 1558,15114, 1533,15137,
    15152,40351,40351, 9190, 1617, 1589,40351,40351, 1564,  164,
     9194,40351,40351,40351,40351,40351,15130, 1565,    0,40351,

    40351,40351,40351,    0,40351, 1575,40351, 8760,40351,40351,
    40351, 1733,40351,40351,40351,15145, 1190,40351,40351,40351,
     1748, 1610,    0, 1780,    0,    0,    0,15125, 1751, 1761,
    40351, 1781, 1796, 1800, 1888, 1802,40351,40351,40351,40351,
    40351, 6396, 6555,40351,40351,40351, 1757,40351,40351,40351,
    40351,40351,    0,40351,    0,    0, 1798,40351,40351,    0,
    40351,    0,    0,    0, 1806,40351, 6891, 6895,40351,40351,
    40351,40351, 1826,40351, 7180, 7184,40351,40351,40351,40351,
     1843,    0,40351,    0,15061,15060,40351,40351,40351,40351,
    40351, 1872,40351,40351, 9156, 9161,40351,40351,40351, 1874,

    15073,    0, 7338, 7559,    0,    0,    0,15111,40351, 1898,
     1788,    0,40351, 1118,40351,    0, 9213,    0,40351, 9221,
     9226, 9231,    0,    0,40351,40351,40351,40351,40351, 1901,
    15052,15050,15036,  126,15047,40351,40351,40351,40351,40351,
    15105,40351,40351, 1909,    0, 1942,40351,40351,40351,40351,
     1937,40351,40351, 9235,40351,40351,    0,40351, 9239, 1945,
     9243,    0,40351,    0,40351,15096,    0,    0, 1957,    0,
    40351, 1594, 8100,    0,40351,    0,    0,    0,    0,    0,
    40351, 1958,    0,40351, 9247,40351, 9267,    0,    0,    0,
        0,    0,40351, 1622, 2162,40351,40351,15017,15019,15024,

    15013,15014, 1466,14989,14979,40351, 1980,    0,40351,  870,
     1751, 2174, 3707, 2710, 2488,    0,    0,40351,14997,14991,
    14989,14972,    0,    0,    0,    0,40351,    0,    0,40351,
    40351,40351,40351,    0,40351,40351,    0,    0,    0,    0,
    40351,40351,    0,    0,    0,    0,40351,40351,    0,    0,
        0,    0,40351,40351,    0,    0,    0,    0,40351,40351,
        0,    0,40351,40351,    0,    0,40351,    0,40351,40351,
        0,40351,    0, 9271, 9279, 9283, 9298,40351,14995, 9306,
    40351,    0,40351,    0,40351,    0,40351,40351,    0,    0,
    40351,    0,40351, 9310, 9314,40351,40351,14960,40351,40351,

     9318,14987, 2164, 9324,14988,14972,14965,14985,14932,14975,
    40351, 1595,40351, 9337, 9343,14912,40351, 9347, 9355, 9363,
     9371, 2232,40351, 9376, 9390, 9406, 9424,40351, 9438, 2168,
     9442,40351, 8723,40351,40351,40351,40351,40351,40351,40351,
    40351, 2185,14941, 9446,40351, 9451, 9461, 9465,40351,40351,
     9477,40351, 2230,14939, 9487,40351,40351,40351,40351,40351,
     9491, 2250,40351, 9495,14905,    0, 9507, 9513,40351,40351,
    14896,40351, 9517, 2275,14903,14945, 1779,40351,40351,40351,
    14898,14928, 1819,40351,40351,40351,40351,40351, 2291,14905,
        0,    0,    0,40351,14903,40351,40351,40351,40351,40351,

    14896, 2418,    0,40351,40351,40351,40351,40351,40351,40351,
    14894, 2428,    0,40351,40351,    0,40351,40351,    0,14853,
    40351,40351, 2444,    0,40351,40351,    0,14851, 2469,40351,
    40351,    0,40351,40351,    0,14848,40351,40351, 2470,    0,
    40351,40351,    0,14845,14882, 2472,40351,40351, 2323,40351,
     2545,40351,40351,40351,40351,40351,40351, 2491,40351, 9522,
     9526,40351,40351,40351,40351,40351, 2499,14865,14858,14793,
    40351,40351,40351,40351,    0,14821, 2571,40351,    0,40351,
    40351,40351,40351,40351,40351, 9530, 2574,40351, 9537, 9542,
    40351,40351,40351,40351,40351, 9546, 2588,40351,    0,40351,

    40351,    0,40351, 2603,    0,40351,40351,    0,    0,40351,
    40351, 2745,14811,14854, 1837,40351,40351,40351,    0,40351,
        0,    0,    0,14833, 2756, 1563, 2546, 9558,    0,40351,
        0,    0,    0, 2774, 9499,40351,40351,40351,40351, 2786,
     1827,    0,14843,    0,40351,40351,40351,40351, 2796,    0,
        0,    0,14840,    0,40351,40351,40351,40351,40351, 2803,
        0,    0,    0,    0,    0,    0,    0,14841, 2806,    0,
    40351,    0,    0,    0,14833, 2818,40351,40351,40351,40351,
     2827,40351,14747,14749,14744,14757,14737,14733,14744,14706,
    40351, 9578, 9587,40351,40351,    0,40351, 2833,40351, 9595,

    14726, 9601, 9613,    0, 9625, 9635,40351,40351,40351,40351,
     3801, 3213,14681,40351, 9639, 9647, 9651,40351,40351, 9666,
    40351,40351,40351, 3222,14715, 9674,40351, 3742,40351,40351,
    40351, 3223, 2505,14663,14669,14650,40351,40351,40351,40351,
    40351,40351, 3234,40351,40351,40351,40351, 3236,14720, 3294,
     3736,14719,14710,14709, 3257,    0, 3299,40351,    0,    0,
        0, 3254, 3255, 2726, 9628, 9641,14646,14616, 6655, 9758,
     3306,    0,40351,    0,    0,40351,    0,14678, 3688,14639,
     2129,14595,14565, 2617, 9716,40351,40351, 5417, 5639,40351,
     6067, 9678, 3743,  596, 1119,40351,14649, 9777, 9687, 9730,

    14619, 2327, 9738, 9748, 9795, 9682, 9823,    0, 9840, 9868,
     9876, 9790, 9831, 9887, 9896,40351,40351, 9903,40351,40351,
     2788, 9924, 9932, 9941, 9859, 9947,14618,40351, 9959, 9973,
    14612, 9978, 9986, 9994, 9999,    0,10007,10011,  840, 3858,
    10019,14555,10027,40351,10034,10039,10046,    0, 1137, 1624,
        0, 3755,14614,14618, 3855,14611, 6648,14559,40351,    0,
    10053,40351,40351,    0,40351,10060,14571,40351, 2825,    0,
        0,    0,    0,10065,10074,10086,40351,10095,10104, 3320,
    10180,    0,10272,40351,10114,10280,10284,10123,10288,40351,
    10145,14588,10293,14561,14578,14577,14512, 3716,14486, 1834,

    14503,14485,14553,10134,10157, 3749,10311, 3782,10376,10319,
     7089,14528, 6448,14492,14483,14475,14471, 3664,14460, 2131,
    14454,14467,14455, 5579,14461, 3739,14444, 2163,14404,14412,
     2191,14411, 1501,14415,10162,10323,10331,10345,14401,14407,
    10335,10385,    0,10370,    0,40351, 1799,10412,10460,10475,
    14437,10479,10403,10343, 6781,    0,    0,10427,14381,14383,
    40351,    0,10494,10498,10520,10524,10542,10546,10564,10572,
    14413,10577,10581,14380,10585,10632,10638,10642,10646,10652,
    10680,10686,10690,10695,10699,10727,10731,10737,10743,10748,
    10787,10792,10802,10820,10831,10835,10839,10848,10877,10884,

    10888,10922,10928,10932,10939,10967,10976,    0,    0,    0,
    14358,14369,10918,14406,10852,10869,10782,10980,    0,10988,
    11004,11016,11020,40351,11024, 8489, 8532,    0,11031, 7976,
        0,10971,11036,11050,11095,14396,11054,14328,14306,14310,
     1708,14290,14302,14288, 2560,14265,    0,11058, 1221, 6686,
    11063,11067,14273,    0,14257,14257,14252,14237,14230,14227,
    14207,14213,14194,14185,14193,11074,14189,14196,11078,11103,
    40351,    0,11083,11107, 3820,    0,11112,14250,11105,11137,
        0,14228,40351,11142,14170,11152,11163,11182,11190,14218,
    11194,11199,11203, 3829,11225,14217,11229,11237,    0,11245,

        0,11253,11259,11269,    0, 6362,11276,14222,11127, 3278,
     6847,14162,40351,11285, 3835, 6590, 3900,40351,40351,14180,
     2836,11289, 3841,40351,40351,40351,40351,11280, 6594,11308,
    11312,40351,14174, 6623,14173,14171, 2848,14169, 3306,    0,
     6562,14148,40351,40351,    0, 1820,40351, 3701, 3730, 3759,
    40351,11316,    0,    0,    0,    0,    0,    0,11320,11324,
        0,    0,14089,14075,11328,14080,14046,    0,11332,40351,
    40351,40351,14038,14037,14041, 2526,14086, 2727,11336,11340,
    11345,11359,11363,11368,11372,11377,11385,14002,    0,    0,
    14015,13994, 1853,13995,13990,13968,14042,40351, 3863,11400,

     3870,    0, 3285, 7130,    0,    0,40351,    0,    0,    0,
     3904,11404,    0,    0,    0,    0,11408,11421,14014,11416,
    11434,40351,    0, 3905,    0,    0,13944,13917,13909,13913,
     1859,13902,13902,13896,13910, 5433, 1187, 2725,13935,13930,
     6693, 6764, 5940, 5955, 6753, 6056,    0,    0,13906,  849,
    13897,13904,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,11439,13915,11443,11451,    0,11460,    0,11468,
    11472,11480,    0,    0,    0,    0,    0,    0,13910,11465,

    40351,11495, 8038,40351,40351,40351,40351,13903,13895,13853,
    11500,13826,13809,11509,11517,11527,11531,40351,11535, 6561,
    40351,11554,11569,11583,11597,11601,11605,13803,13823,11609,
    11614,13824,11622,13810,11628,11636,    0,11648,    0,11662,
    11666,11674,11678,11682,11694,40351,40351,40351,13776,40351,
        0,11700,13813,11687,11710, 3876, 5401, 5419,13817,13809,
    13759,13791,13737,40351,    0,    0,13751,13750,13746,40351,
    40351,40351,40351,40351,40351,40351,40351,    0,13745,11695,
        0,    0,    0,13738,11702,    0,13729,11710,    0,13728,
    11714,13713,11738, 6146,40351,11742,40351, 6125,13648,    0,

    13713,11727,    0,11752,40351,40351,40351,11764,11768,11772,
        0,    0,    0,40351,    0,13711,13663,    0,40351,    0,
    13627,13626, 6792,11780,11784,    0,    0,    0,13618,13604,
     6504,13598,13615,13602,13597,13588,13574, 6052,    0,    0,
    13638,    0,    0,    0,    0,    0,13622,    0,    0,    0,
        0,13626,13565,    0,    0,    0,13561,13544,    0,    0,
    13458,13431,13437,13423,13427,13423, 1886,13421,11788,11796,
    11804,13424,11809,11825,11829,40351,11833,13421,11853,11857,
    11869,11881,11889,11893,11898,11906,11914,11920,40351,11927,
    40351, 7364,    0, 7457,13453,13411,11932,13430,11940,11948,

        0,11958,    0,11966,11970,11978, 9809, 6069,13374,13353,
     6599, 5438,13348,13325,13321,13383, 6868, 7317, 1963, 7368,
    13361,13367, 3785,    0, 7299, 5927, 5617,40351,40351,40351,
     5361,13280,13348,13273,13267, 7343,13261,13276,13275,13270,
    13253,13251,13219, 7486,12062,13290,40351,12155,40351, 7175,
        0,40351,40351,40351, 8002,13221, 6575,13224,13192, 7505,
    11983,11997,12004,40351,    0, 5640, 5644,13248,12018,12023,
    12083,12039,12099,12051,12104,    0,12190,12206,12124,12128,
    12176,40351,    0, 7423,40351,13260,12222,13207,12237,12249,
    13244, 5985,40351,    0,    0,13233, 7986,12254,12202,12264,

    12140,12268,12112,    0,13244,12283,13202,13192,13151,13143,
    13141,13128,13190,40351,13189,12272, 6028, 6372, 6347, 6376,
    12345,12295,12299, 3813,13111, 6524,13119,13134,13106,13093,
    13108, 2493,13089,13070,13077, 6433, 6610,13057,13058,13035,
    13050,13023,13029, 3754,13034,13008,12977, 1096, 5697,12977,
    12979,12967,12958,12963,12929,12933,12933,12307,12313,12333,
    12942,12934,    0,12326,12379,12366,12429,12361,12396,12433,
    12965,12947, 7952, 8533, 8556, 3825, 9398, 8746, 9562, 6027,
        0,12448,12909,12902,12461,40351,12957,12465,12477,12484,
    12489,12496,12508,12520,12515,40351,12594,12527,12541,12546,

    12533,12587,12598,12886,12608,12622,12636,12650,12654,12666,
    12670,12682,12686,12699,12717,12727,12737,12748,12765,12769,
    12777,12784,12805,12816,12820,12824,12834,12862,12867,12873,
    12881,12901,12909,12917,12938,12945,12950,12966,12978,12982,
    12986,13014,13023,13028,13042,13062,12891,12880,12615,12995,
    13070,10408,11522,11820,12732,12875,12879,12859,12871,12855,
    12833,12812,12793,12799,12502,40351,    0, 7536,40351,12853,
    12602, 5961,12779,12777,12794,12929,12770,12774,12770,12766,
    12753,13032,12766,12753,12734,13080,40351,12783,13099,13111,
    13106,12800,40351,12788,13098,13131,40351,13135,    0,40351,

    12711,12730,13139,13147,13155,13161,13165, 6666, 6516,    0,
    13191,12778,40351,12772,13186,40351, 6697, 6620,12779, 6737,
     6691,12763, 7957,12744,12754,12675,12681,12677,12666,12656,
    12636,    0, 2745,13174,13210,40351,13201,12632,13219,13228,
    13236,40351,40351,12627,12627,12625,12618,40351,13240,13245,
    12665,12653,12651, 6703,40351,12659,12604,12579,12581,12598,
    12594,12596,12567,12570,12583,12554,12613,12584,12582, 7998,
     7122, 8383, 7985, 7099, 6799,12566,12557,12555,12545,12530,
        0,13249,12566,40351,12565,13244, 8755,12413,12485, 8813,
    13257,12480,12551,40351,13267,12497,12484,40351,13276,13290,

    13298,13304,40351,    0,13315,13323,40351,12514,40351,12504,
    13311, 6872, 6807,12485, 6862,12482,40351,12474,12464,40351,
    12461,13325,12459,40351,12447,13331,12446,40351,12443,13338,
    12433,40351,12427,13344,13367, 7981,12396,12346,12390,40351,
    12385,13352,12314,12307,12312,12293,40351,12297,12278,12274,
    12263,12259,12266,    0,40351,12311,40351,12295,12283,12282,
    12273,12272,12197,12198,12192,12200,12189,12176,12176,12160,
    12160,13380,13375,13396,13400,13406,13410,13414,13418,12209,
    12206,12151,    0,13424, 6845,12120,12123,12136, 6097, 7100,
     6119, 6055,12130,    0,13516,12124,12094,40351,12100,12067,

    12070,12055,12060,12071,12032,13609, 8428, 8429,12104, 6051,
     6314,12032,40351,12035,11992,13432,    0,40351,13436,13441,
        0,13469,40351,12068,40351, 7288,40351,13473,13485,40351,
    40351,12051,12048, 8491,13553,13457,13561,12032,13627,13644,
    13653,12014,13490,11951,  145,  154,  553,  573,  878,40351,
    13485, 1069, 1077,13718,13657, 1441, 1479, 1555, 7017, 1687,
     1757, 1803, 1862, 2139, 2160, 2179, 2207, 2229, 2240, 2254,
     2366, 2397, 2457, 2550, 2568, 2676, 2716, 2738, 2758, 3145,
     3176, 3193, 3195, 6467, 3248, 3712, 3660, 3705, 3739, 3747,
     3785, 5340, 5343, 5549, 5573, 5699, 5700, 5890, 7450, 5945,

     5969,13701,13744, 6039,13684,13580,13588,13729,13500,40351,
    13761,13804, 6098,13669,13812, 6118,13826,40351, 9330, 6518,
    40351, 6145, 9574,40351,10079, 7318, 6667,    0, 6274, 6281,
        0,13830,13842,13855,13867,13862,13874,13886,13893,13898,
    13880,13911,13916,13948,13952,13962,13968,13996,14002,14008,
    14012,14016,14052,14056,14060,14067,14071,14088,14099,14108,
    14116,14120,14128,14200,14136,14156,14149,14238,14219,14247,
    14251,14267,14279,14299,14309,14313,14317,14345,14350,14356,
    14360,14365,14393,14397,14401,14405,14409,14414,14443,14447,
    14451,14455,14464,14497,14501,14506,14511,14515,14543, 6305,

     6322,40351,40351, 6418, 6424,13535, 6434, 6456, 6512, 6556,
    13733, 6587, 6612, 6619, 6617, 6634, 6691,13596, 6736, 6722,
     6763, 6764, 6756,13671,40351, 6775, 6786, 6809, 7059,13924,
    14184,14191, 7471, 7084,40351,14214, 7028,    0,14548,14554,
     7082, 7107,40351,14473, 7092, 7102, 7404, 7131, 7076, 7089,
     7120, 7239, 7371, 7260, 7332,14558,40351,14283, 7274, 7285,
     7296, 7295,14580,40351, 7311,40351, 7324, 7320, 7416, 7348,
     7356, 7354, 7373,40351,    0, 7974, 7422, 8023, 8422, 8377,
     8372, 7421,40351, 7430, 7440, 7458, 7488,40351,14568, 7499,
    14591,14598,14602,14606, 7490, 7510,40351,14600, 7496,40351,

    40351, 7514,    0, 7530,40351,14613, 7534,40351,14619, 7541,
    40351,14626, 7546,40351,14632, 8085,40351, 7482, 7927,40351,
    14639, 7872, 7863, 7880,    0, 7877, 7885, 7885, 7899, 7890,
    11963,40351, 7993, 7997, 8000, 8019, 7961, 7972, 7978, 7995,
     7999, 8451, 8000, 8000, 8013,14612, 8842, 8032, 8024, 8023,
     8028,40351, 8894, 8083, 8048,40351,14672,14765, 8337,    0,
     8341, 8349, 8345, 8362, 8350, 8375, 8360,40351, 8487, 8514,
    14640, 8391, 8369,14662, 8599,14786,14802, 8740,14715,14734,
        0,14666,    0,14832,14806,14841, 8390, 8385, 8409, 8412,
     8415, 8487, 8490,40351,40351,14923,14815, 8439, 8460, 8468,

     8456, 8460, 8470, 8467, 8522, 8498, 8484, 8485, 8513, 8505,
     8518,14742, 8510, 8522, 8534, 8526, 8535, 8628, 8633, 8637,
     8658, 8645, 8658, 8669, 8658, 8683, 8681, 8687, 8695, 8777,
     8699, 8709, 8702, 8706, 8720, 8733, 8726, 8736, 8724, 8728,
     8732, 8749,40351, 8753, 8778,14861,14869,14874, 8834, 8832,
    14881,14888,40351,14897,14920, 8850, 8847,    0, 8805,40351,
    14934,14955,14959,15007,15011,15029,15036,15041,15048,15067,
    15054,15071,15082,15103,15119,15124,15131,15159,15166,15173,
    15178,15206,15210,15214,15222,15226,15243,15255,15259,15263,
    15272,15276,15293,40351,15304, 8851, 8853,15308,15312,40351,

    15322,15350,15354,15358,15362,15369,15397,15401,15405,15410,
    15440,15445,15453,15457,15486,15494,15500,15504,15533,15537,
     8810, 8803,15541,15545,15549,15553,15585,15589,15602,15623,
    15630,15634,15638,15642,15651,15671,40351, 8813, 8820, 8819,
     8837, 8839, 8842, 8826, 8833, 8841, 8843, 8863,14692,14746,
     8873, 8877, 8868, 8892,15152, 8889,14750, 8906,15139,40351,
    15060,14754,    0, 8968, 8970, 8919,40351,15449,15680,40351,
     8976, 8977, 8989,40351,14798,15075,40351,    0, 8919, 8933,
     8938, 8939, 8957,40351, 8962, 8955, 8952, 8956, 8960, 8959,
     8964, 8964, 8976, 8983, 9046, 9041, 9050, 9005, 9121, 9014,

    40351, 9059, 9066, 9076, 9041,15593, 9094, 9102,40351, 9102,
     9107, 9109, 9115, 9116, 9122, 9123, 9125, 9136,    0, 9085,
     9144, 9155, 9100, 9088,40351, 9095, 9087, 9100, 9122, 9113,
     9122, 9123, 9119, 9140, 9141, 9138, 9132, 9202, 9204, 9205,
     9206, 9154,40351, 9139, 9193, 9144, 9172, 9186, 9172, 9181,
     9197, 9190, 9181, 9291, 9618, 9193, 9482, 9418,    0, 9236,
    40351, 9199, 9192, 9212, 9227, 9220, 9286, 9268, 9227, 9253,
     9253, 9273, 9279, 9285, 9279,15684,15699,    0,15715,15725,
     9297, 9294, 9286,15187, 9295,15806,15730, 9303, 9296, 9304,
     9319, 9320, 9312, 9324, 9350, 9327, 9340,15490, 9324,15734,

    15756,15414, 9329, 9348, 9339, 9345, 9356, 9383, 9351, 9351,
     9367, 9368, 9362, 9382, 9388, 9391, 9409, 9470, 9410, 9426,
     9434, 9437, 9423, 9439, 9449,15743, 9552, 9474, 9483, 9487,
     9488, 9505, 9517,15762,15776, 9562,15772,40351, 9515,15815,
    15822,15840,15844,15891,15898,15903,15910,15922,15928,15934,
    15941,15946,15979,15986,15991,15996,16024,16028,16033,16038,
    16042,16079,16083,16090,16094,16100,16134,16138,16142,40351,
    16146,16150,16154,16182,16186, 9526, 9519,16194,16198,16233,
    16237,16244,16248,16252,16280,16284,16288,16292,16296,16324,
    16331,16335,16339,16344,16372,16376,16382,16387,16391, 9544,

     9530,16419,16423,16427,16431,16439,16468,16472,16476,16508,
    16513,40351,16517,16521,16525,16529,16559, 9530, 9560,15751,
     9557, 9550, 9579,16563, 9575, 9582, 9590, 9593,15790,16007,
     9583, 9597,16480,16567,16576,40351,16588, 9590, 9600,16592,
    16603, 9606,16612,16616, 9670,40351, 9621, 9635, 9624, 9628,
     9654, 9640,40351,40351, 9694, 9651, 9655, 9665,40351, 9708,
    40351, 9682, 9778, 9727, 9711, 9801, 9712, 9735, 9683, 9770,
     9777, 9725, 9836, 9736, 9737, 9745, 9746, 9755, 9764, 9771,
     9776, 9772, 9779, 9777, 9785, 9858, 9867, 9869, 9875, 9799,
     9820, 9812, 9829, 9824, 9839, 9821, 9827, 9828, 9837, 9852,

     9850, 9841, 9937, 9954,40351, 9846,    0, 9861, 9862, 9872,
     9870, 9880, 9926,40351, 9898, 9952, 9890, 9888, 9895, 9892,
     9909,16620,16624, 9958,40351,16650, 9917,16607, 9925,16654,
    16658,16662,16668, 9918, 9936, 9929, 9934, 9953, 9960, 9961,
     9952,10011, 9981, 9994,16676, 9989,16680, 9995,16684,10003,
    10008,16688,10010,16694,10022,10028,16702,10005,10014,16706,
    10033,10038,10036,10022,10030,16717,10049,10056,10047,10047,
    16712,16721,10065,10059,16728,10070,10051,10065,10068,10080,
    40351,10062,16752,16770,16774,16792,16799,16811,16804,16823,
    16841,16845,16849,16854,16859,16892,16896,16900,16904,16910,

    16938,16943,16947,16955,16959,16975,16994,17009,17013,10076,
    10070,17022,17026,16756,17030,10104,10088,17041,17058,17062,
    10134,17070,17075,17154,17091,17079,17110,17119,17124,17193,
    17197,17201,17205,17233,17237,17246,17250,17265,17254,17282,
    17286,17296,17314,10091,10090,10114,17303,17347,17351,17356,
    17360,40351,17364,17392,17396,10103,10096,17401,17406,17410,
    17128,10131,10190,17438,17140,17186,10203,10196,17342,10197,
    10211,10232,17442,40351,17454,17458,10234,10236,17463,17470,
    10237,17479,17483,10288,10240,10241,10245,10245,10313,10251,
    10320,10258,10253,10259,10335,10267,10326,10330,10319,10507,

        0,10328,10351,10283,10369,10390,10315,10417,10310,10319,
    10312,10346,10332,10356,10360,10353,10367,10367,10381,10369,
    10442,10449,10459,10461,10387,10400,10409,10407,10413,10414,
    10403,40351,40351,10404,10420,10427,10424,10442,10439,10438,
    10430,10448,10442,40351,10463,10467,    0,10459,10467,10460,
    10475,10463,17488,17492,17509,10475,17514,17518,17522,10484,
    10489,10490,10488,10474,10480,17526,10492,10517,10481,10481,
    17530,10487,10493,10489,17534,10490,17538,10526,10519,17548,
    17552,17556,17564,17568,17574,10529,17578,10528,10530,17582,
    17593,10540,10530,10539,17597,17608,10531,17612,17616,17620,

    10543,10533,17634,10545,10549,10586,17638,17642,17663,17667,
    17685,17690,17697,17709,17714,17721,17728,17732,17764,17775,
    17780,17784,17812,17820,17792,17831,17848,17859,17868,17876,
    17880,17887,10539,17896,17742,40351,17924,10539,10538,17929,
    17933,10656,10549,10542,10550,17937,10597,17941,17969,17980,
    17984,17988,17997,18012,18018,18025,18029,18033,18059,18063,
    18067,18071,18078,18099,18110,18114,18120,10549,10566,18124,
    18128,18156,18161,18166,18170,18174,10574,10571,18202,18206,
    18210,18214,10575,10577,10594,18218,18222,18242,18246,18258,
    18262,18269,18273,18280,10595,18288,18355,40351,    0,10602,

    10592,18294,10603,10665,    0,10610,40351,10609,10669,    0,
    10603,10641,    0,10642,10683,10637,10695,10778,18298,10622,
    10639,10640,10640,10647,10640,10660,10674,10666,10737,10742,
    10748,10752,10693,10690,10696,10705,10704,40351,40351,40351,
    10705,10693,10813,10825,10691,10706,10712,10715,40351,10720,
    10715,10740,10764,10755,18306,18314,18318,18324,18335,10768,
    10780,10773,18339,10795,10790,18343,10800,10817,10805,18347,
    18375,10801,10807,18388,18392,10826,18396,18401,18406,18410,
    10827,18422,18426,10835,10823,10831,18432,10834,10850,10827,
    10840,18436,18448,18452,10833,18456,18460,10844,18464,18474,

    10846,18478,18482,18504,18508,18523,18530,18543,18549,18555,
    18565,18583,18598,18602,18611,18617,18630,18648,18659,18713,
    18663,18667,18678,18699,18800,18805,10834,10852,18809,18813,
    18569,10912,10874,10858,10868,40351,18817,18821,18849,18853,
    18695,18894,18561,18863,18857,18914,18929,18942,18934,18946,
    18962,18995,10863,18999,18706,19003,10875,10874,19007,10874,
    10874,19011,10896,18727,18868,18769,19015,19039,19043,40351,
    19047,19055,19059,19066,19070,19075,19101,10932,10933,10956,
    10947,10981,10969,10965,11005,10968,11043,10972,11012,40351,
    10929,19083,10948,10962,11045,    0,40351,40351,    0,11008,

    11055,11056,11082,11019,11090,11117,11209,19087,11027,11040,
    11046,11046,11056,11070,11083,11153,11155,11156,11162,40351,
    11102,11104,11091,40351,40351,40351,11264,11539,11214,11093,
    11105,11111,11111,11125,11127,11140,19095,19121,19131,19136,
    11137,11154,19140,19144,11157,19152,19156,11167,19164,19168,
    19176,19180,19184,19192,19196,19202,19207,11184,11159,11161,
    19211,19222,11199,11162,19226,19230,19234,19238,19242,19249,
    19254,19261,19273,19279,19285,19304,19360,19291,19365,19370,
    19374,19410,19378,    0,19415,19305,19419,19426,19458,19295,
    11168,19462,19466,40351,11246,11177,11191,11198,19470,19474,

    19478,19490,40351,19560,11252,11264,19506,19511,19652,19516,
    19656,19521,19660,19664,19668,19672,19525,19579,40351,19700,
    19705,19715,11226,11222,11240,11230,19721,19709,19743,19747,
    40351,40351,40351,11278,11316,11280,11270,11273,19753,11289,
    11390,11391,11345,19757,11370,11489,40351,11574,40351,11310,
    11310,11314,11310,11327,11312,11407,11408,11409,11421,11362,
    11346,11358,11547,40351,11360,11375,11374,11369,11386,11371,
    19773,19777,19781,11403,19791,19799,19807,19811,19815,11401,
    19822,19826,19834,19838,19842,11434,11397,19847,19852,19856,
    11428,11421,11450,11424,19865,19873,19878,19882,19896,19903,

        0,19908,19912,19920,19940,19950,19954,19960,19968,19988,
    20001,20005,19924,11426,11443,11438,20016,11441,11434,    0,
    19996,20033,20048,20052,20056,20062,20088,20095,20099,20103,
    20108,20112,40351,20116,11441,20136,11442,11473,20146,20155,
    11469,40351,40351,20159,11479,11480,11477,11588,11815,11549,
    20163,20169,11553,11489,11480,11500,11507,11582,11584,11588,
    11589,40351,11537,11537,11543,11540,11559,11559,20177,20183,
    20187,11559,20195,20203,11595,11562,20207,20213,11594,11569,
    11595,20217,20233,20228,20246,20261,20307,20289,20293,20274,
    20321,20335,20279,11571,11592,11577,20363,20369,40351,20373,

    20377,20381,20385,20392,20405,20413,20420,11577,20433,40351,
    20441,11577,20446,20456,11579,11590,11610,11843,    0,12009,
        0,11675,20460,20468,20476,11663,20487,11678,11617,11612,
    11699,11713,11714,11720,11644,40351,11652,11651,20491,20495,
    11669,11689,20504,11708,11695,11727,20508,20513,20521,20534,
    20542,20546,20552,20580,20584,20598,20612,20616,20626,20647,
    20654,20658,20668,20686,11712,11712,20697,20705,20709,20713,
    20717,20725,20748,40351,11738,20752,20760,40351,40351,11731,
        0,    0,11791,20764,20772,20780,20784,20798,20810,20818,
    20824,20837,20845,11802,11741,11812,11833,11836,11837,11769,

    11788,20788,20851,11786,11813,20864,20871,11819,11786,20879,
    20883,20892,20901,20911,20922,20939,20950,20956,20968,20984,
    20996,21015,21025,21029,11787,11809,21043,21057,21062,11806,
    21069,21076,11800,11867,21090,21094,21110,21098,40351,21118,
    21126,21137,11854,21145,11874,11800,11882,11892,11897,11898,
    40351,11824,21149,21153,11836,11861,21163,21172,21179,21184,
    21190,21194,21241,21245,21249,21253,21261,21290,21294,21302,
    21306,21310,21322,21338,21257,11837,21358,21369,21374,11858,
    21378,21386,11859,11925,21390,21400,21409,21413,21425,21433,
    21441,21445,11926,11934,11939,11940,11947,21417,21461,21471,

    11904,21475,21479,21487,21492,21502,21507,21511,21550,21554,
    21559,21563,21567,21571,21599,21603,21607,21619,21636,21647,
    21651,40351,21655,21664,21675,21679,21686,11891,11951,21690,
    21694,21710,11952,11959,11970,11971,11977,21698,21718,21722,
    21726,21730,21736,21744,21772,21778,21784,21790,21818,21822,
    21826,21835,21839,40351,21863,21871,21877,21884,40351,11976,
    11977,11984,11987,11988,11996,21892,21896,21900,21905,21909,
    21913,21917,21953,21957,21967,21986,11925,11939,21971,21997,
    12002,12003,40351,40351,22001,22005,22009,22013,22017,22021,
    22026,11945,22054,22071,22076,22080,22089,22093,22097,22101,

    22106,22136,22151,22110,22166,22170,22174,22178,22182,22186,
    22190,40351,22210,22220,22226,22230,22236,22241,22245,22256,
    22273,22277,22283,22287,22291,22301,22315,22319,22325,22329,
    22337,22354,22358,22367,22371,22378,22395,22404,22408,22415,
    22419,22424,22430,22442,22450,22454,22458,22465,22470,22475,
    22480,22490,22495,22508,22512,22520,22525,22529,22541,22548,
    22559,22564,22568,22579,22583,22595,22600,22613,22621,22625,
    22630,22637,22651,22655,22661,22668,22681,22685,22691,22698,
    22711,22715,22721,22728,22741,22745,22751,22758,22771,22775,
    22781,22788,22801,22805,22811,22818,22831,22835,22841,22848,

    22861,22865,22871,22878,22891,22895,22901,22908,22921,22925,
    22931,22938,22951,22955,22961,22968,22981,22985,22991,22998,
    23011,23015,23021,23028,23041,23045,23051,23058,23071,23075,
    23081,23088,23101,23105,23111,23118,23131,23135,23141,23148,
    23161,23165,23171,23178,23191,23195,23201,23208,23221,23225,
    23231,23238,23251,23255,23261,23268,23281,23285,23291,23298,
    23311,23315,23321,23328,23341,23345,23351,23358,23371,23375,
    23381,23388,23401,23405,23411,23418,23431,23435,23441,23448,
    23461,23465,23471,23478,23491,23495,23501,23508,23521,23525,
    23531,23538,23551,23555,23561,23568,23581,23585,23591,23598,

    23611,23615,23621,23628,23641,23645,23651,23658,23671,23675,
    23681,23688,23701,23705,23711,23718,23731,23735,23741,23748,
    23761,23765,23771,23778,23791,23795,23801,23808,23821,23825,
    23831,23838,23851,23855,23861,23868,23881,23885,23891,23898,
    23911,23915,23921,23928,23941,23945,23951,23958,23971,23975,
    23981,23988,24001,24005,24011,40351,24018,24031,24035,40351,
    24116,24148,24180,24212,24244,24276,24308,24340,24372,24404,
    24436,24468,24500,24532,24564,24596,24628,24660,24692,24724,
    24756,24788,24820,24852,24884,24916,24948,24980,25012,25044,
    25076,25108,25140,25172,25204,25236,25268,25300,25332,25364,

    25396,25428,25460,25492,25524,25556,25588,25620,25652,25684,
    25716,25748,25780,25812,25844,25876,25908,25940,25972,26004,
    26036,26068,26100,26132,26164,26196,26228,26260,26292,26324,
    26356,26388,26420,12013,26451,26482,26513,26544,26575,26606,
    26638,26669,26700,26731,12025,12289,12073,26753,26785,12114,
    12308,12116,12328,12166,12372,26816,12188,26847,12384,26879,
    26910,26941,26972,12417,12453,27003,27035,27067,27098,27129,
    27160,12198,12535,12295,12731,27192,27224,27256,12523,27287,
    27318,27349,27380,27412,27444,27476,12529,27507,27539,27571,
    27603,27635,12534,12818,27667,12550,27685,12674,27716,12676,

    27747,12692,12875,27779,12703,27806,12769,12892,27838,12771,
    12997,27870,12816,27901,27933,12822,27949,12855,13036,12856,
    13046,12866,13063,12891,13064,12893,13129,12905,13265,12927,
    13298,12970,13554,12972,13570,13016,13737,13062,13755,13066,
    13757,13123,13787,13149,13824,13167,13915,13203,13970,27980,
    28011,28042,13264,14010,13280,14110,13339,14147,28074,28105,
    28136,28167,28198,28229,28260,28291,28323,28355,28387,13363,
    14150,13418,14313,28419,28451,28483,28515,28547,28579,28611,
    28643,28675,28707,13423,28739,14354,28771,28803,28835,28867,
    28899,13424,13459,14356,13518,14466,13528,13759,14517,13537,

    14697,28931,28963,28995,29027,29058,13549,29089,29121,29152,
    13571,29183,29214,29245,29276,29307,29338,29370,29402,29434,
    29466,29497,29528,29559,29590,29621,13572,29652,29683,29714,
    29745,29776,29808,29839,29870,13611,29901,14815,29923,13788,
    13818,29955,14881,14916,14952,29986,30017,30048,30079,13830,
    13952,14962,30111,30143,30175,30206,30237,13620,30268,30300,
    30331,30362,13653,15004,13683,30393,30425,30456,30487,13685,
    30518,15078,15270,30550,30582,30614,30646,30678,30709,30740,
    30771,15306,13720,30802,30834,30866,30898,30929,30961,30993,
    31025,31057,15352,31089,31107,14000,31138,31169,31200,31231,

    15358,31263,31290,15414,31322,15453,31354,31385,31417,31433,
    31464,15500,15772,15789,15799,15834,15837,15843,15860,15930,
    15935,15990,16032,16042,16083,16092,16096,31487,16101,13899,
    31518,16188,16190,16244,31550,31582,31614,31645,31676,31707,
    31738,31770,31801,31832,16248,13909,31863,31895,31927,31959,
    31991,32023,16286,16421,32055,32087,32119,32151,32183,32215,
    32247,32279,32311,32343,32375,32407,16333,32439,32471,32503,
    32535,32567,32599,16337,13912,16717,16472,16519,13956,17093,
    16719,32631,32663,32695,32727,32758,32789,32821,32852,32883,
    32914,32945,32976,33007,13998,16768,33038,16805,14004,33069,

    33101,33133,14138,33165,33197,33228,16894,33259,33290,33321,
    33352,16949,33383,33414,33445,33476,33508,33540,33571,33602,
    14014,14020,17201,33624,33655,33686,33717,33748,14054,17248,
    17024,33780,33811,33842,33874,33905,33936,33967,33998,34029,
    34053,34085,16951,14301,34116,34147,34178,34209,17278,34241,
    34273,34305,34337,34369,34400,34431,17297,34462,34494,17303,
    34526,14056,34544,34575,34606,34637,14407,34668,34676,17307,
    34707,34739,34771,34803,34834,34865,17360,34896,34928,34960,
    14702,34992,35024,35056,35088,35120,35152,35184,17898,18067,
    35216,35248,35279,35310,35341,17788,17786,35372,35404,35436,

    14073,35468,35500,35532,35564,17842,35595,17870,35626,35657,
    17889,35679,35710,35741,35772,35803,35834,17933,35865,35897,
    35928,35959,35990,36021,36052,36077,36108,36132,36164,14124,
    36195,36226,36257,17935,36289,36321,36353,36385,36417,36448,
    36480,17937,36512,36530,36561,14166,36577,36609,36641,36672,
    36704,36736,14273,36768,36800,36832,36864,36896,36928,36960,
    36992,37024,37055,37087,37119,37151,37183,37215,37246,37268,
    37299,17980,14275,37330,37361,37392,37423,37454,37477,37502,
    37534,37566,37597,37628,37659,17986,37691,37723,37754,37785,
    37817,37833,37865,37896,37928,37960,37992,38024,38056,38088,

    38119,18025,38150,38181,38212,38243,38266,38297,18027,38329,
    38360,18262,38392,38408,14969,38440,38472,38504,38536,38568,
    38600,38631,14843,14943,18263,38663,38695,38727,38759,38791,
    18613,18624,38823,38855,38887,38919,38951,38983,39015,39047,
    39079,39111,39143,39175,39207,14303,39238,16300,16551,39270,
    39301,39333,39365,39397,18661,18689,39429,39460,39491,39523,
    39555,39587,39619,39650,39681,39713,39745,39777,39809,39840,
    39871,39903,39935,39967,39999,40030,40062,40094,40126,40158,
    40190,40222,40254,40286,40318
    } ;

static yyconst flex_int16_t yy_def[5686] =
    {   0,
     4961, 4961, 4962, 4962, 4963, 4963, 4960,    7, 4964, 4964,
     4960,   11, 4960,   13, 4960,   15, 4960,   17, 4961, 4961,
     4960,   21, 4965, 4965, 4960,   25, 4966, 4966, 4960,   29,
     4960,   31, 4967, 4967, 4961, 4961, 4968, 4968, 4969, 4969,
     4960,   41, 4970, 4970, 4960,   45, 4960,   47, 4961, 4961,
     4961, 4961, 4971, 4971, 4972, 4972, 4973, 4973, 4960,   59,
     4974, 4974, 4975, 4975, 4976, 4976, 4977, 4977, 4977, 4977,
     4977, 4977, 4960,   73, 4978, 4978, 4961, 4961, 4960,   79,
     4979, 4979, 4979, 4979, 4961, 4961, 4980, 4980, 4980, 4980,
     4960,   91, 4981, 4981, 4982, 4982, 4961, 4961, 4983, 4983,

     4984, 4984, 4961, 4961, 4961, 4961, 4985, 4985, 4961, 4961,
     4986, 4986, 4987, 4987, 4988, 4988, 4989, 4989, 4960,  119,
     4990, 4990, 4991, 4991, 4992, 4992, 4960,  127, 4960,  129,
     4960,  131, 4960,  133, 4993, 4993, 4961, 4961, 4994, 4994,
     4960,  141, 4995, 4995, 4960,  145, 4996, 4996, 4960,  149,
     4997, 4997, 4960,  153, 4998, 4998, 4961, 4961, 4961, 4961,
     4961, 4961, 4960,  163, 4960,  165, 4961, 4961, 4960,  169,
     4960,  171, 4961, 4961, 4960,  175, 4961, 4961, 4961, 4961,
     4961, 4961, 4960,  183, 4960,  185, 4960,  187, 4960,  189,
     4960,  191, 4960,  193, 4960,  195, 4960,  197, 4960,  199,

     4960,  201, 4960,  203, 4961, 4961, 4961, 4961, 4960,  209,
     4960,  211, 4961, 4961, 4961, 4961, 4960,  217, 4961, 4961,
     4960,  221, 4960,  223, 4961, 4961, 4999, 4999, 4961, 4961,
     4960,  231, 4961, 4961, 4961, 4961, 4960,  237, 4961, 4961,
     5000, 5000, 4960,  243, 5001, 5001, 4961, 4961, 5002, 5002,
     5003, 5003, 5004, 5004, 4960,  255, 4960,  257, 5005, 5005,
     5005, 5005, 5006, 5006, 5006, 5006, 5007, 5007, 5008, 5008,
     5009, 5009, 5010, 5010, 5011, 5011, 5012, 5012, 4960,  279,
     5013, 5013, 5014, 5014, 5015, 5015, 5016, 5016, 5017, 5017,
     5017, 5017, 5018, 5018, 5003, 5003, 5019, 5019, 5020, 5020,

     5021, 5021, 4960,  303, 5022, 4960, 4960,  307, 5023, 4960,
     5024, 5024, 5025, 5025, 5026, 5026, 4960,  317, 4960,  319,
     5027, 5027, 4960,  323, 5028, 5028, 5029, 5029, 5030, 5030,
     5031, 5031, 5032, 5032, 5033, 5033, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5034, 5035,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 5036, 5037, 5038, 4960, 4960, 5039, 4960, 5040, 4960,
     5041, 4960, 5042, 5043, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5044, 5044, 5044, 4960, 4960, 4960, 4960, 5045,

     4960, 4960, 4960, 4960, 5046, 5047, 5048, 5048, 4960, 5049,
     5050, 4960, 5051, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 5052, 4960, 4960,
     4960, 5053, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 5054, 4960, 4960, 5055, 4960, 5056,
     4960, 5056, 5057, 4960, 4960, 4960, 4960, 4960, 5058, 5059,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5060, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 5061, 4960, 5062, 4960,

     4960, 5063, 4960, 4960, 4960, 4960, 5064, 4960, 4960, 4960,
     4960, 4960, 5065, 5066, 5066, 5066, 5067, 4960, 5066, 5066,
     5066, 5066, 5066, 5066, 5066, 5066, 5066, 5066, 5066, 5066,
     5066, 5066, 5066, 5066, 5066, 5066, 4960, 5068, 4960, 5068,
     5068, 5068, 5068, 4960, 4960, 4960, 5069, 5070, 4960, 5071,
     4960, 4960, 4960, 4960, 5072, 4960, 4960, 4960, 4960, 4960,
     5073, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960,  594, 5074, 4960, 4960, 4960, 4960,

     5075, 5075, 5075, 5075, 5075, 5075, 5075, 5075, 5075, 5075,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 5076, 5076, 4960,
     4960, 4960, 5077, 5078, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5079, 4960, 4960, 5080, 5080, 5080, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5081, 5082,
     4960, 5083, 5084, 5084, 4960, 4960, 4960, 5085, 4960, 4960,
     4960, 4960, 4960, 4960, 5084, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5086, 4960,

     4960, 4960, 4960, 5087, 4960, 4960, 4960, 5088, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5089, 5089, 5089, 5089, 5089, 4960, 5089, 5090,
     4960, 5090, 5090, 5090, 5090, 5090, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5091, 4960, 5091, 5091, 5091, 4960, 4960, 5092,
     4960, 5092, 5092, 5092, 5092, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 5093, 4960, 5094, 5094, 5094, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 5095, 4960, 4960, 5095, 5095, 5095, 4960, 4960, 4960,
     5095, 5096, 4960, 5097, 4960, 5098, 5099, 5100, 4960, 5101,
     4960, 4960, 5102, 5103, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     5104, 4960, 4960, 4960, 5105, 5106, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 5107, 4960, 4960, 4960,
     4960, 5108, 4960, 5109, 4960, 4960, 5109, 5109, 5109, 5110,
     4960, 4960, 4960, 5111, 4960, 5112, 5112, 5112, 5112, 5112,
     4960, 5112, 5113, 4960, 4960, 4960, 5114, 5115, 5115, 5115,
     5115, 5115, 4960, 4960, 5115, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 5116, 4960, 5117,
     5117, 5117, 5117, 5117, 5117, 5118, 5119, 4960, 4960, 4960,
     4960, 4960, 5120, 5121, 5122, 5123, 4960, 5124, 5125, 4960,
     4960, 4960, 4960, 5126, 4960, 4960, 5127, 5128, 5129, 5130,
     4960, 4960, 5131, 5132, 5133, 5134, 4960, 4960, 5135, 5136,
     5137, 5138, 4960, 4960, 5139, 5140, 5141, 5142, 4960, 4960,
     5143, 5144, 4960, 4960, 5145, 5146, 4960, 5147, 4960, 4960,
     5148, 4960, 5149, 4960, 4960, 5150, 5151, 4960, 4960, 5152,
     4960, 5153, 4960, 5154, 4960, 5155, 4960, 4960, 5156, 5157,
     4960, 5158, 4960, 4960, 4960, 4960, 4960, 5159, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 5160, 5160, 5160,
     5161, 4960, 4960, 5162, 5162, 5162, 5162, 4960, 4960, 4960,
     4960, 4960, 5163, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 5164, 4960, 4960,
     5165, 4960, 4960, 4960, 5166, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 5167, 5168, 4960, 4960, 4960, 4960,
     5169, 4960, 4960, 4960, 5168, 5168, 5168, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     5170, 5171, 5172, 4960, 5173, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 5174, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5175, 4960, 4960, 5176, 4960, 4960, 5176, 5177,
     4960, 4960, 5176, 5178, 4960, 4960, 5178, 5179, 4960, 4960,
     4960, 5180, 4960, 4960, 5180, 5181, 4960, 4960, 4960, 5182,
     4960, 4960, 5182, 5183, 4960, 4960, 4960, 4960, 5182, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 5184, 5185, 4960, 4960, 5186, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5187, 4960,

     4960, 5187, 4960, 5187, 5188, 4960, 4960, 5189, 5189, 4960,
     4960, 4960, 5189, 5189, 5189, 4960, 4960, 4960, 5190, 4960,
     5190, 5190, 5190, 4960, 5190, 4960, 5190, 4960, 5191, 4960,
     5191, 5191, 5191, 5191, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 5192, 5193, 5194, 4960, 4960, 4960, 4960, 4960, 5195,
     5196, 5197, 5198, 5199, 4960, 4960, 4960, 4960, 4960, 4960,
     5200, 5201, 5202, 5202, 5202, 5202, 5202, 5203, 5202, 5204,
     4960, 5204, 5204, 5204, 5205, 5204, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 5206, 5206, 4960, 4960, 5207, 4960, 4960, 4960, 5208,

     5209, 5210, 5210, 5211, 5212, 5213, 4960, 4960, 4960, 4960,
     5214, 4960, 4960, 4960, 4960, 4960, 5215, 4960, 4960, 5216,
     4960, 4960, 4960, 4960, 4960, 5217, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5218, 5218,
     4960, 5218, 5218, 5218, 5218, 5219, 5219, 4960, 5219, 5219,
     5219, 4960, 4960, 5219, 4960, 4960, 5219, 4960, 5219, 5220,
     4960, 5221, 4960, 5221, 5221, 4960, 5221, 4960, 4960, 4960,
     4960, 5221, 4960, 5221, 5222, 4960, 4960, 5223, 4960, 4960,
     5223, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5224,

     4960, 4960, 5225, 5225, 5226, 4960, 5225, 5227, 5228, 5224,
     5224, 5229, 5230, 5227, 4960, 4960, 4960, 5228, 4960, 4960,
     4960, 5231, 5231, 5232, 4960, 4960, 4960, 4960, 5233, 5233,
     4960, 5234, 5234, 5235, 5234, 5236, 5237, 4960, 4960, 4960,
     5236, 4960, 4960, 4960, 5237, 5237, 5237, 5238, 4960, 4960,
     5238, 5239, 4960, 5240, 5239, 5241, 5239, 5242, 4960, 5243,
     4960, 4960, 4960, 5243, 4960, 4960, 4960, 4960, 4960, 5244,
     5244, 5245, 5245, 5246, 5246, 5246, 4960, 5247, 5247, 4960,
     4960, 1481, 5246, 4960, 5247, 5247, 5248, 5249, 4960, 4960,
     4960, 5250, 5248, 4960, 5251, 5251, 5252, 4960, 4960, 4960,

     4960, 4960, 5253, 5254, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 5255, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 5256, 5256, 5257, 4960, 4960, 4960,
     4960, 5256, 5258, 5259, 5260, 4960, 4960, 5261, 5261, 4960,
     4960, 5262, 4960, 4960, 4960, 5263, 5264, 5258, 4960, 4960,
     4960, 5265, 5266, 5266, 5266, 5266, 5266, 5266, 4960, 5259,
     4960, 5259, 5259, 5255, 4960, 5259, 5259, 5259, 5259, 5259,
     5259, 5259, 5259, 5259, 5259, 5259, 5259, 5259, 5259, 5259,
     5259, 5259, 5259, 5259, 5259, 5259, 5259, 5259, 5259, 5259,

     5259, 5259, 5259, 5259, 5259, 5259, 5259, 5267, 5267, 5267,
     4960, 4960, 4960, 4960, 5268, 5268, 5269, 5268, 5270, 5271,
     5270, 4960, 5271, 4960, 4960, 4960, 4960, 5272, 4960, 4960,
     5272, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 5273, 4960, 4960, 4960,
     4960, 4960, 4960, 5273, 5273, 5273, 5273, 5273, 5273, 5273,
     5273, 5273, 5273, 5273, 5273, 4960, 4960, 4960, 4960, 4960,
     4960, 5274, 5274, 4960, 4960, 5275, 5275, 5276, 5277, 4960,
     5278, 4960, 4960, 4960, 4960, 5279, 4960, 5280, 5279, 4960,
     5279, 5279, 4960, 4960, 4960, 4960, 5281, 5281, 5282, 5281,

     5283, 5284, 5283, 5284, 5285, 5285, 4960, 5286, 5287, 4960,
     4960, 4960, 4960, 4960, 4960, 5285, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 5288, 4960, 4960,
     5288, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5289,
     5289, 4960, 4960, 4960, 5289, 5290, 4960, 5290, 5290, 5290,
     4960, 4960, 5291, 5291, 5291, 5292, 5292, 5292, 4960, 4960,
     5293, 5293, 5293, 5293, 4960, 4960, 4960, 5294, 4960, 4960,
     4960, 4960, 5294, 5294, 5294, 5295, 5296, 5295, 5297, 4960,
     5298, 5297, 5299, 4960, 5299, 5300, 4960, 4960, 5301, 5301,
     4960, 4960, 4960, 4960, 4960, 4960, 5302, 4960, 5303, 4960,

     5303, 5304, 4960, 4960, 5304, 5305, 4960, 5305, 5305, 5306,
     4960, 4960, 5306, 5307, 5307, 5307, 5308, 4960, 4960, 4960,
     5308, 4960, 5309, 4960, 5309, 5309, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 5310, 5310, 4960, 5311,
     5310, 5310, 5310, 5310, 5310, 5310, 5312, 5312, 4960, 4960,
     4960, 4960, 5313, 5313, 5314, 5314, 5315, 5315, 5316, 5316,
     5317, 5317, 5318, 5318, 5319, 5319, 5320, 5320, 5321, 5321,
     5322, 5322, 5323, 5323, 5324, 5324, 5325, 5325, 5326, 5326,
     5327, 5327, 4960, 4960, 5328, 5328, 5329, 5328, 5330, 5331,
     5330, 5331, 5332, 5332, 5333, 5333, 5334, 5334, 5335, 5336,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5337, 4960,
     4960, 4960, 4960, 5338, 5338, 5339, 4960, 4960, 5339, 4960,
     4960, 5340, 5340, 5340, 5341, 4960, 5341, 5342, 4960, 4960,
     5343, 4960, 4960, 4960, 5344, 5344, 5345, 5344, 5346, 5347,
     5346, 5347, 4960, 4960, 4960, 4960, 4960, 4960, 5348, 4960,
     5349, 4960, 5350, 5351, 4960, 4960, 4960, 4960, 5349, 5352,
     5349, 4960, 4960, 4960, 5353, 5353, 5354, 5354, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 5355, 5356, 5357,
     5355, 5355, 5358, 5359, 5360, 5361, 5362, 5363, 5364, 5365,
     5366, 4960, 5364, 4960, 4960, 4960, 4960, 4960, 4960, 5367,

     5368, 5369, 5367, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     5370, 5370, 5370, 4960, 5371, 5371, 5371, 5372, 4960, 5372,
     4960, 4960, 5372, 4960, 4960, 5373, 5373, 5373, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5374, 5375,
     5376, 5374, 5377, 5377, 5378, 5379, 5380, 5378, 5381, 5381,
     5382, 5383, 5383, 5382, 5382, 5384, 5385, 5385, 5384, 5384,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5386, 5386,
     5387, 5388, 5389, 4960, 4960, 4960, 5389, 5388, 4960, 5390,
     5390, 5391, 5392, 5393, 5391, 5391, 5394, 4960, 4960, 5393,
     4960, 4960, 5395, 4960, 5396, 4960, 4960, 4960, 5397, 5397,

     5398, 5397, 5399, 5400, 5399, 5400, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 5401, 4960, 5401, 5401, 4960,
     4960, 5401, 5401, 5402, 5402, 5402, 4960, 4960, 4960, 4960,
     5402, 5402, 5403, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 5402, 4960, 5402, 5404, 4960, 4960, 5404, 4960, 4960,
     5405, 4960, 4960, 4960, 4960, 4960, 4960, 5405, 4960, 5405,
     5406, 4960, 5406, 4960, 5407, 4960, 4960, 4960, 4960, 5408,
     5409, 4960, 5410, 5411, 5411, 5412, 5413, 5414, 4960, 5415,
     5416, 4960, 5417, 4960, 4960, 5418, 5419, 4960, 5420, 5420,
     4960, 4960, 4960, 5421, 5422, 5423, 5424, 5425, 5426, 5426,

     5427, 5427, 5428, 5429, 5430, 5427, 5431, 4960, 4960, 4960,
     4960, 4960, 5432, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5433, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5434, 4960,
     4960, 4960, 5435, 4960, 5436, 5437, 4960, 4960, 5438, 5439,
     4960, 5440, 4960, 4960, 5441, 4960, 4960, 4960, 5442, 4960,
     5443, 5433, 4960, 4960, 4960, 4960, 5444, 5445, 5445, 5445,
     5445, 5445, 5445, 5445, 5445, 4960, 5446, 5446, 5446, 5446,

     5446, 5446, 4960, 4960, 5446, 5446, 5446, 5446, 5446, 5446,
     5446, 5446, 5446, 5446, 5446, 5446, 5446, 5446, 5446, 5446,
     5446, 5446, 5446, 5446, 5446, 5446, 5446, 5446, 5446, 5446,
     5446, 5446, 5446, 5446, 5446, 5446, 5446, 5446, 5446, 5446,
     5446, 5446, 5446, 5446, 5446, 5446, 4960, 4960, 4960, 5447,
     5448, 4960, 5441, 4960, 5442, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 5441, 4960, 4960, 5442,
     4960, 4960, 5449, 5449, 5449, 5449, 5449, 5449, 5449, 5449,
     5449, 5449, 5449, 4960, 4960, 4960, 4960, 5450, 5451, 4960,
     5452, 5453, 4960, 4960, 4960, 4960, 4960, 4960, 5454, 4960,

     4960, 4960, 5455, 5455, 5456, 5456, 5456, 4960, 4960, 5457,
     5458, 5459, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 5460, 5460, 4960, 5461, 5461,
     5461, 5462, 5463, 5464, 5464, 4960, 5465, 4960, 5466, 5466,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 5441, 4960, 5442, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 5467, 5468, 4960, 5469,
     5469, 5469, 5469, 5469, 5469, 4960, 4960, 4960, 4960, 4960,
     5470, 5471, 5472, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5473, 4960, 4960, 5474, 4960, 4960, 5475, 5475,

     4960, 5476, 4960, 5477, 5478, 4960, 4960, 5479, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 5480, 4960, 5481, 5482, 4960,
     4960, 4960, 5483, 4960, 4960, 4960, 5484, 4960, 4960, 4960,
     5485, 4960, 4960, 4960, 5486, 4960, 4960, 4960, 5487, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 5488, 4960, 5489, 4960, 5490, 5491, 5491,
     5492, 5492, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 5493, 4960, 4960, 4960, 5494, 4960, 4960, 5495, 5496,
     4960, 4960, 5497, 5498, 4960, 4960, 4960, 4960, 5499, 4960,
     5499, 5500, 5500, 5501, 5502, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 5500, 4960, 5503, 4960, 4960, 5504, 4960,
     4960, 4960, 4960, 5505, 4960, 4960, 5506, 4960, 4960, 5507,
     5508, 5509, 4960, 4960, 4960, 4960, 4960, 5510, 5510, 4960,
     4960, 5511, 4960, 5512, 5513, 5514, 5513, 4960, 5515, 5516,
     5517, 5518, 5519, 4960, 4960, 4960, 4960, 4960, 5520, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 5521, 5521, 4960, 5522, 5523, 5523, 5524, 4960, 4960,
     5525, 5525, 4960, 5526, 5523, 5527, 4960, 4960, 4960, 4960,
     4960, 5528, 4960, 4960, 4960, 4960, 4960, 5529, 4960, 4960,
     5530, 5531, 5532, 5532, 5532, 5532, 5532, 5532, 5532, 5532,
     5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533,
     5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533,
     5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533,
     5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533,
     5533, 5533, 5533, 5533, 5533, 4960, 5533, 5533, 5533, 5533,
     5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533, 5533, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 5534, 5534, 5534, 4960, 5534, 5534,
     5534, 5534, 5534, 4960, 4960, 5534, 4960, 4960, 5535, 4960,
     5536, 4960, 5537, 5538, 4960, 4960, 4960, 5539, 5540, 5540,
     4960, 5541, 4960, 4960, 4960, 4960, 4960, 4960, 5542, 5542,
     4960, 5543, 5543, 5543, 5544, 5545, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 5546, 5547, 5547, 5547, 5547, 5547,
     5547, 4960, 4960, 4960, 4960, 4960, 5548, 4960, 4960, 5549,
     4960, 4960, 4960, 5550, 4960, 5551, 4960, 4960, 4960, 4960,

     4960, 5552, 5553, 5554, 4960, 4960, 5555, 4960, 4960, 5556,
     4960, 4960, 5557, 4960, 4960, 5558, 4960, 4960, 5559, 4960,
     4960, 4960, 4960, 4960, 5560, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5561, 5561, 5562, 5562, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 5563, 4960, 4960, 4960,
     4960, 4960, 5564, 5565, 5565, 4960, 5566, 5566, 4960, 5567,
     4960, 4960, 4960, 4960, 4960, 5565, 4960, 4960, 4960, 4960,
     4960, 5568, 4960, 4960, 4960, 5569, 5569, 5570, 5571, 5571,
     5572, 4960, 5573, 5573, 5574, 5575, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 5576, 4960, 5577, 4960, 5578,
     4960, 5579, 4960, 5580, 5580, 5581, 4960, 5582, 4960, 4960,
     5583, 5584, 5584, 5584, 5584, 5584, 5584, 5584, 5584, 5585,
     5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585,
     5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585,
     5585, 5585, 5585, 4960, 4960, 4960, 4960, 5585, 4960, 4960,

     5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585,
     5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585,
     4960, 4960, 5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585,
     5585, 5585, 5585, 5585, 5585, 5585, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 5586, 5586, 5586,
     5586, 5586, 5586, 5586, 5586, 5586, 4960, 4960, 4960, 4960,
     5587, 4960, 5588, 4960, 4960, 4960, 4960, 5589, 5589, 4960,
     4960, 4960, 4960, 4960, 5590, 5590, 4960, 5591, 5591, 5591,
     5591, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 5592, 5592, 5592, 4960, 4960, 4960,

     4960, 4960, 4960, 5593, 4960, 5594, 4960, 4960, 4960, 5595,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5596, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 5597, 5597, 5598,
     5598, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 5599, 4960, 5600, 5600,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 5601, 5601, 5602, 5603, 5604,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 5605, 5605, 5606, 4960, 4960, 4960, 5607,
     5607, 5607, 5607, 5607, 5607, 5607, 5607, 5607, 5608, 5608,
     5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608,
     5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 4960, 4960,
     5608, 4960, 5608, 5608, 5608, 4960, 4960, 4960, 5608, 5608,
     5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608,
     5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 4960,

     4960, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608,
     4960, 4960, 4960, 4960, 5608, 5608, 5608, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 5609, 4960, 4960,
     5609, 5609, 5609, 5609, 4960, 4960, 5609, 5609, 4960, 5610,
     4960, 4960, 5611, 5611, 4960, 4960, 5612, 5613, 5613, 5613,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5614, 5614, 4960, 5615, 4960, 5616, 4960, 5617,
     5618, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 5619, 5619, 5620, 5620, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 5621, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 5622, 4960, 4960, 4960, 5604, 4960, 4960, 4960, 4960,
     4960, 3286, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5607, 5607, 5607, 5607, 5607, 5607, 5607, 5607,
     5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608,

     5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 4960,
     4960, 5608, 4960, 4960, 5608, 4960, 4960, 5608, 5608, 4960,
     4960, 4960, 5608, 5608, 5608, 4960, 5608, 5608, 4960, 4960,
     5608, 5608, 4960, 5608, 5608, 5608, 5608, 5608, 4960, 4960,
     5608, 5608, 5608, 4960, 4960, 3624, 5608, 5608, 5608, 4960,
     4960, 4960, 5608, 5608, 5608, 4960, 4960, 5608, 5608, 5608,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5609,
     5609, 5609, 4960, 4960, 4960, 4960, 5609, 4960, 5610, 4960,
     4960, 5611, 5611, 4960, 5612, 5613, 5613, 5613, 4960, 4960,
     5623, 4960, 4960, 4960, 5624, 4960, 5614, 5614, 4960, 5615,

     5625, 4960, 5626, 4960, 5627, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     5628, 5628, 5629, 5629, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 5630, 4960, 4960, 4960,
     4960, 4960, 5604, 4960, 4960, 4960, 4960, 3286, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 5607, 5607, 5607, 5607,
     5607, 5607, 4960, 5607, 5608, 5608, 5608, 5608, 5608, 5608,
     5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608,
     5608, 4960, 4960, 5608, 4960, 4960, 5608, 4960, 4960, 5608,
     5608, 4960, 4960, 4960, 4960, 4960, 4960, 5608, 5608, 5608,
     5608, 4960, 4960, 4960, 4960, 5608, 4960, 4960, 5608, 5608,
     5608, 5608, 5608, 4960, 5608, 5608, 5608, 4960, 4960, 5608,
     4960, 4960, 4960, 5608, 4960, 5608, 4960, 4960, 5608, 4960,
     5608, 4960, 4960, 4960, 4960, 4960, 4960, 5609, 5609, 5609,
     5609, 4960, 5610, 4960, 4960, 5611, 5611, 4960, 5613, 5613,

     5613, 4960, 4960, 5623, 5631, 4960, 4960, 4960, 5624, 5632,
     4960, 4960, 5625, 4960, 5633, 4960, 5634, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5635, 5635,
     5636, 5636, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 5604, 4960, 4960, 3286, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 5607, 5607, 5607, 4960, 5607, 5607, 5607, 5608, 5608,
     5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 4960,
     5608, 5608, 5608, 4960, 5608, 5608, 4960, 4960, 5608, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 5608, 4960, 5608, 4960,
     4960, 5608, 4960, 5608, 5608, 5608, 4960, 5608, 5608, 5608,
     5608, 4960, 4960, 5608, 4960, 5608, 4960, 4960, 4960, 4960,
     4960, 5608, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5610, 4960, 4960, 5611, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     5613, 4960, 4960, 4960, 4960, 5631, 4960, 4960, 5632, 4960,

     4960, 4960, 5637, 4960, 5638, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 5639, 5639, 5640, 5640, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 5604, 4960, 3286, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 5641, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5607, 5607,
     4960, 5607, 4960, 4960, 5608, 4020, 5608, 5608, 5608, 5608,
     5608, 5608, 5608, 4020, 5608, 5608, 5608, 4960, 5608, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5608, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 5608, 5608, 5608, 5608,
     4960, 4960, 5608, 5608, 5608, 5608, 4960, 4960, 4960, 4960,
     5608, 4960, 4960, 4960, 4960, 4960, 5610, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 5613, 4960, 4960, 4960, 4960,
     4960, 4960, 5642, 4960, 5643, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 5644, 5644, 5645, 5645, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     5604, 3286, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 5641, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 5607, 4960, 4960, 5608,

     4176, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608,
     5608, 5608, 4960, 4960, 4960, 4960, 5608, 4960, 4960, 5646,
     5647, 5647, 5608, 5608, 4960, 4960, 4960, 5608, 5608, 5608,
     5608, 4960, 4960, 5608, 4960, 4960, 4960, 4960, 5610, 4960,
     5613, 4960, 4960, 4960, 4960, 4960, 4960, 5648, 5649, 5650,
     4960, 5651, 5652, 4960, 4960, 4960, 4960, 5653, 5653, 5654,
     5654, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 3286,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5607, 5608, 5608, 5608, 5608, 5608, 5608, 5608,
     5608, 5608, 4960, 4960, 4960, 4960, 4960, 5647, 4960, 5608,

     5608, 4960, 5608, 5608, 5608, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 5610, 4960, 4960, 4960, 4960, 5648, 5655, 5649,
     5656, 5657, 5651, 5658, 5651, 4960, 5659, 5660, 4960, 4960,
     5661, 5661, 5662, 5662, 4960, 4960, 4960, 4960, 3286, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5607, 5608,
     5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608,
     5608, 5608, 5608, 4960, 4960, 4960, 5608, 4960, 4960, 5608,
     5608, 4960, 4960, 4960, 4960, 5610, 4960, 4960, 4960, 4960,
     5655, 5656, 5663, 5658, 5658, 5664, 4960, 5651, 5651, 4960,
     4960, 5665, 5659, 5666, 4960, 5667, 5667, 5668, 5668, 4960,

     4960, 3286, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 5607,
     5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608,
     5608, 5608, 5608, 5608, 4960, 4960, 4960, 5608, 5608, 4960,
     5610, 4960, 4960, 5669, 4960, 5664, 5651, 4960, 4960, 5665,
     5670, 5665, 4960, 5671, 5672, 4960, 5673, 5673, 5674, 5674,
     4960, 4960, 3286, 4960, 4960, 4960, 4960, 5607, 5608, 5608,
     5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608,
     5608, 5608, 5608, 5608, 4960, 4960, 5608, 4960, 4960, 4960,
     5610, 4960, 4960, 5675, 5670, 5670, 5676, 4960, 5665, 5665,
     4960, 5671, 5677, 5678, 5678, 5679, 5679, 3286, 4960, 4960,

     4960, 4960, 4960, 4960, 5608, 5608, 5608, 5608, 5608, 5608,
     5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608,
     4960, 4960, 4960, 4960, 4960, 5610, 4960, 4960, 5680, 4960,
     5676, 5665, 5681, 5682, 5682, 5683, 5683, 3286, 4960, 4960,
     5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608, 5608,
     5608, 5608, 4960, 4960, 4960, 4960, 5610, 4960, 4960, 5684,
     5685, 4960, 4960, 4960, 4960, 3286, 4960, 5608, 5608, 5608,
     5608, 5608, 5608, 5608, 5608, 4960, 4960, 4960, 5610, 4960,
     4960, 4960, 4960, 4960, 3286, 4960, 5608, 5608, 5608, 5608,
     5608, 4960, 5610, 4960, 3286, 4960, 5608, 5608, 5608, 5608,

     5608, 4960, 5610, 4960, 3286, 4960, 5608, 5608, 5608, 4960,
     4960, 4960, 5610, 4960, 3286, 4960, 5608, 5608, 5608, 5610,
     4960, 3286, 4960, 5608, 5610, 4960, 3286, 4960, 5608, 5610,
     4960, 3286, 4960, 5608, 5610, 4960, 3286, 4960, 5610, 4960,
     3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960,
     5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960,
     3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960,
     5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960,
     3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960,
     5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960,

     3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960,
     5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960,
     3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960,
     5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960,
     3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960,
     5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960,
     3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960,
     5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960,
     3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960,
     5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960,

     3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960,
     5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960,
     3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960,
     5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960,
     3286, 4960, 5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960,
     5610, 4960, 3286, 4960, 5610, 4960, 3286, 4960, 5610,    0,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960
    } ;

static yyconst flex_int16_t yy_nxt[40445] =
    {   0,
     4960, 4960,  339, 4960,  339, 4960,  340,  341,  340,  341,
     4960,  342, 4960,  342, 1392, 1392, 1392, 1392,  345,  343,
      345,  343,  346,  347,  346,  347, 1386,  348,  349,  348,
      349, 1387, 1393, 4960,  352,  350, 1386,  350,  353,  354,
     4960, 1387, 1386,  355,  356,  357, 1547, 1387,  352, 1394,
     1547,  358,  353,  354, 1395, 1396, 1397,  355,  356,  357,
     1421, 1469, 4960, 1421, 1469,  358,  338,  338,  339,  338,
      338,  338,  340,  341,  359,  338,  338,  342,  338,  338,
      338,  338,  338,  338,  338,  343,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  360,

      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  338,  338,  338,  338,  360,  338,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  338,  338,  338,  338,  360,  362,
      363,  362,  362, 1439,  364,  365, 1720, 1721, 1440,  366,
      362,  363,  362,  362,  339,  364,  365,  367,  415,  416,
      366, 1449, 1386,  417,  418,  419, 1450, 1387,  367, 1794,
     1386,  420,  339, 1795,  339, 1387,  479,  480,  415,  416,

      421,  481,  422,  417,  418,  419,  482, 1389, 2988,  483,
     1389,  420, 1403, 1403, 1403, 1403,  368,  484, 1390, 1404,
      421, 2989,  422, 1438, 1438, 1438, 1438,  368,  338,  369,
      370,  371,  369,  372,  340,  341,  373,  338,  338,  342,
      338,  338,  338,  338,  338,  338,  374,  343,  338,  338,
      338,  338,  338,  338,  375,  376,  338,  338,  338,  338,
      338,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  338,  338,  338,  338,  377,
      338,  377,  377,  377,  377,  377,  377,  377,  377,  377,

      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  378,  338,  338,  379,
      377,  338,  380,  381,  382,  380,  383,  340,  341,  384,
      338,  385,  342,  386,  338,  385,  387,  388,  387,  338,
      389,  338,  338,  338,  338,  338,  338,  390,  385,  391,
      385,  338,  338,  392,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  386,  338,
      338,  338,  393,  338,  394,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  395,  393,  393,  393,  393,  393,  393,  378,
      338,  338,  383,  393,  396,  396,  397,  396,  396,  396,
      398,  399,  400,  396,  396,  401,  396,  396,  396,  396,
      396,  396,  396,  402,  396,  396,  396,  396,  396,  396,
      403,  404,  396,  396,  396,  396,  396,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  396,  396,  396,  396,  405,  396,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  405,  396,  396,  396,  396,  405,  396,  396,  397,
      396,  396,  396,  398,  399,  406,  396,  396,  401,  396,
      396,  396,  396,  396,  396,  396,  402,  396,  396,  396,
      396,  396,  396,  396,  404,  396,  396,  396,  396,  396,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  396,  396,  396,  396,  407,  396,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  408,  407,  407,  409,  396,  396,  396,  407,

      339, 2168,  339, 1386,  340,  341,  340,  341, 1387,  342,
     2168,  342, 1399, 1399, 1399, 1399,  339,  343,  539,  343,
      479,  480,  540,  541, 2990,  481, 1453,  542, 1559, 1400,
      482, 1386, 1454,  483,  339,  543, 1387, 1401,  340,  341,
     1560,  484, 1456,  342,  544, 1422, 1422, 1422, 1422, 1386,
     1498,  343, 1423, 1498, 1387,  410, 2991,  410,  338,  338,
      339,  338,  338,  338,  340,  341,  411,  338,  338,  342,
      338,  412,  338,  338,  338,  338,  338,  343,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  413,  413,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  338,  338,  338,  338,  413,
      338,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  338,  338,  338,  338,
      413,  423,  424,  425,  423,  424,  423,  426,  427,  428,
      423,  423,  429,  423,  423,  423,  423,  423,  423,  423,
      430,  423,  423,  423,  423,  423,  423,  423,  431,  423,
      423,  423,  423,  423,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  432,  432,  432,  433,  423,
      423,  423,  432,  423,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  434,
      423,  423,  423,  432,  339, 2182,  339, 1386,  436,  437,
      436,  437, 1387,  438, 2183,  438, 1429, 1429, 1430, 1429,
      539,  439, 1386,  439,  540,  541, 1545, 1387, 1546,  542,
      553,  552,  553,  553,  339,  340,  341,  543,  580,  581,
      342, 1431, 2477,  582,  583,  584,  544, 1500,  563, 2214,
     1501,  585, 1432, 1432, 1432, 1432, 1839, 1554, 1840, 1433,

     2478,  440, 1555,  440,  441,  441,  442,  441,  441,  441,
      443,  444,  445,  441,  441,  446,  441,  441,  441,  441,
      441,  441,  441,  447,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  441,  441,  441,  441,  448,  441,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  449,  441,  441,  441,  448,  338,  450,  451,

      452,  450,  338,  340,  341,  453,  338,  338,  342,  338,
      338,  338,  387,  454,  387,  338,  389,  338,  338,  338,
      338,  338,  338,  455,  456,  457,  338,  458,  338,  392,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  338,  460,  338,  338,  459,  338,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  461,  338,  338,  338,  459,
      463,  464,  463,  463, 1609,  465,  466, 2994, 1611, 1610,

      467,  463,  464,  463,  463, 2995,  465,  466,  468, 1629,
     1538,  467,  339, 1538, 1630, 1394,  472,  341, 1386,  468,
     1395,  473,  474, 1387, 2168, 1453,  475, 1386, 1386,  343,
      339, 1454, 1387, 1387,  472,  341, 1777,  476, 2168,  473,
      474, 1456, 2191, 1627,  475,  486, 1627,  343, 1612,  487,
      488, 2192,  486, 1649,  489,  476,  487,  488, 1650,  490,
      469,  489,  491, 1386, 1683, 2688,  490,  470, 1387,  491,
      492,  469, 2689,  471, 1539, 1540, 1777,  492,  470, 1392,
     1392, 1392, 1392, 1457,  471,  553,  552,  553,  553, 1649,
      340,  341, 1736, 1737, 1650,  342, 1658, 1393,  477,  570,

      571,  570,  570,  563,  572,  573, 1659, 1539, 1540,  574,
      575,  576, 1663, 1839,  577, 1840,  477,  578,  570,  571,
      570,  570, 1664,  572,  573, 1685, 2366, 1386,  574,  575,
      576,  493, 1387,  577, 1677, 2367,  578, 1677,  493,  338,
      494,  495,  496,  494,  497,  340,  498,  499,  500,  501,
      342,  502,  338,  501,  503,  504,  503,  505,  506,  507,
      507,  507,  507,  507,  507,  508,  509,  510,  511,  338,
      512,  513,  514,  514,  515,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  516,  514,
      514,  514,  514,  514,  514,  514,  517,  338,  338,  518,

      519,  338,  520,  514,  521,  522,  523,  524,  525,  514,
      526,  514,  527,  528,  529,  530,  514,  531,  514,  532,
      533,  534,  535,  536,  514,  514,  514,  537,  338,  338,
      497,  514,  338,  545,  546,  545,  545,  547,  340,  341,
      548,  338,  338,  342,  338,  338,  338,  338,  338,  338,
      338,  343,  338,  338,  338,  338,  338,  338,  549,  338,
      338,  338,  338,  338,  338,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  338,
      338,  338,  338,  550,  338,  550,  550,  550,  550,  550,

      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      338,  338,  338,  547,  550,  338,  551,  552,  553,  551,
      338,  340,  554,  555,  338,  338,  342,  556,  338,  338,
      338,  557,  338,  338,  558,  338,  338,  338,  338,  338,
      338,  338,  559,  338,  560,  338,  338,  338,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  562,  338,  338,  338,  561,  338,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,

      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  338,  338,  338,  338,  561,  339, 2998,
      339, 1680,  340,  564,  340,  564, 1681,  342,  565,  342,
      565, 1386,  566, 1832,  566,  343, 1387,  343, 1553, 1553,
     1553, 1553,  567,  568,  567,  568,  339, 1710, 1833,  587,
      580,  581, 1711,  588,  589,  582,  583,  584,  590, 1707,
      587, 2999, 1707,  585,  588,  589,  591, 1706, 2247,  590,
     1706,  623, 2256, 1675,  592,  624,  625,  591, 1718, 1725,
      626,  627,  623, 1719, 1726,  592,  624,  625,  628, 1710,
     1707,  626,  627, 1707, 1729, 1811,  629,  630, 1811,  628,

     1399, 1399, 1399, 1399,  566,  660,  566,  629,  630,  661,
      662,  660, 1738, 1739,  663,  661,  662, 1400, 1716, 1910,
      663, 1716,  664, 1824, 1717, 1401, 1824, 2021,  664, 2191,
      665, 1535, 1535, 1535, 1535,  593,  665, 3000, 1536, 1634,
     1634, 1634, 1634, 2191, 2022, 1908,  593,  569,  594,  595,
      594,  594,  569,  572,  573,  596,  569,  569,  574,  569,
      569,  569,  569,  597,  598,  569,  599,  569,  569,  569,
      569,  569,  569,  597,  597,  569,  600,  569,  569,  569,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,

      601,  601,  601,  601,  569,  569,  569,  569,  601,  569,
      602,  601,  603,  601,  601,  604,  601,  601,  601,  601,
      601,  601,  601,  605,  606,  601,  601,  607,  608,  609,
      601,  610,  601,  601,  601,  597,  569,  569,  569,  601,
      612,  613,  612,  612,  339,  614,  615, 1733,  632,  633,
      616, 3003, 1734,  634,  612,  613,  612,  612,  617,  614,
      615,  635, 1386, 1747,  616, 1744,  618, 1387,  619,  339,
     1745, 1386,  617,  632,  633, 2358, 1387, 1839,  634, 1840,
      618, 1741,  619, 1747, 1741, 2359,  635,  639,  640,  641,
      639,  339,  642,  643, 1742,  340,  341,  644, 1747,  636,

      342,  637, 1747, 1961, 1751,  645,  339,  620,  343, 1547,
      340,  341, 1754, 1547,  646,  342,  621, 1755,  647, 1748,
     1757,  620, 1747,  343,  636, 1758,  637,  618, 1841, 1959,
      621,  666,  639,  640,  641,  639, 3004,  642,  643, 1748,
     1386,  618,  644, 1963, 3005, 1387,  639,  640,  641,  639,
      645,  642,  643, 1773, 1748, 1774,  644, 1386, 1748,  646,
     1748, 2017, 1387,  647,  645,  639,  640,  641,  639, 1962,
      642,  643, 1775,  646,  648,  644,  649,  647, 1748,  639,
      640,  641,  639,  645,  642,  643, 1386, 2016, 1386,  644,
     1747, 1387,  646, 1387, 2037, 2038,  647,  645,  639,  640,

      641,  639, 1749,  642,  643, 2209,  646, 1750,  644,  339,
      651, 2210, 1771,  340,  341, 1386,  645, 1772,  342,  648,
     1387,  649, 2461, 1386, 2444,  646,  343,  693, 1387,  651,
     2445,  694,  695,  648,  666,  650,  696,  724,  339,  697,
      724, 2462,  725,  726,  698, 3006, 1748,  727, 1800, 2569,
      728, 1386,  648, 1800,  650,  729, 1387,  724,  339, 1803,
      724, 2570,  725,  726, 1804, 2117,  648,  727,  652,  339,
      728, 1808, 1815,  340,  341,  729, 1809, 1816,  342,  739,
      740, 1836, 2589,  699, 1836,  648,  343,  652,  338,  338,
      339,  338,  338,  338,  340,  341,  653,  338,  338,  342,

      338,  338,  338,  338,  338,  338,  338,  343,  338,  338,
      338,  338,  338,  338,  338,  654,  338,  655,  338,  338,
      338,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  338,  338,  338,  338,  656,
      338,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  657,  658,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  338,  338,  338,  338,
      656,  338,  667,  668,  667,  667,  669,  340,  341,  670,
      338,  338,  342,  338,  338,  338,  338,  338,  338,  338,

      343,  338,  338,  338,  338,  338,  338,  671,  338,  338,
      338,  338,  338,  338,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  338,  338,
      338,  338,  672,  338,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  338,
      338,  338,  669,  672,  674,  675, 1825,  674, 1902,  676,
      677, 1826, 1649, 1903,  678,  685,  675, 1650,  685,  339,
      676,  686,  679,  340,  341,  678, 2156, 2157,  342, 1386,

     1839,  680, 1840,  679, 1387,  681,  343, 2234,  674,  687,
     1562,  674,  680,  688,  677, 2235,  681, 2236,  678,  674,
      687, 3007,  674,  339,  688,  677,  689,  340,  341,  678,
     2247,  682,  342, 1920, 2248,  680, 1920,  689, 1921,  681,
      343, 3008,  682,  693, 1386, 2249,  680,  694,  695, 1387,
      681, 1842,  696, 3009, 2252,  697, 1666, 1666, 1666, 1666,
      698,  683, 2253,  684, 1386,  690,  693, 1564, 2254, 1387,
      700,  695,  683, 1565,  684,  701,  690,  691,  697, 1566,
     1567,  693, 1568,  698, 1637,  700,  695,  761, 3010, 1957,
      701,  762,  763,  697, 1958,  682,  764,  682,  698,  699,

     1426, 1426, 1426, 1426,  765, 1386,  682, 3011,  682,  339,
     1387,  691,  761,  340,  341, 3012,  762,  763,  342,  739,
      740,  764,  699, 1640, 1993, 1427,  343, 1993, 1421,  765,
     3013, 1421, 1642, 1674, 1674, 1674, 1674,  699,  682,  682,
      675,  682,  682,  682,  702,  703,  704,  682,  682,  678,
      705,  682,  682,  682,  682,  682,  682,  706,  682,  682,
      682,  682,  682,  682,  682,  707,  682,  682,  682,  682,
      681,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  682,  682,  682,  682,  708,

      682,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  709,  682,  682,  682,
      708,  675, 1971, 3014,  675,  702,  710, 1972,  702,  710,
      711,  705, 1975,  711,  705,  716,  717, 1976,  712,  718,
      719,  712,  716,  717,  720,  731,  718,  719, 1981,  732,
      733,  720,  721, 1982,  734, 1461, 1461, 1461, 1461,  721,
      731, 3015,  735,  339,  732,  733,  339,  340,  341,  734,
      340,  341,  342, 1386, 1386,  342, 1386,  735, 1387, 1387,
      343, 1387, 1462,  343,  742,  743,  742,  742,  339,  744,

      745,  722,  754,  755,  746, 1386, 2111,  756,  722, 2111,
     1387,  736,  747, 1386, 1839,  757, 1840,  713, 1387,  714,
      713,  748,  714,  749, 3016, 2112,  736,  742,  743,  742,
      742,  339,  744,  745,  339,  750,  341,  746,  754,  755,
      342,  751,  752,  756, 1777,  747, 1994, 2023,  343, 1994,
     2023,  757, 1463,  758,  748,  759,  749, 1995, 2666,  737,
     2024,  738,  737,  339,  738, 1846,  339,  750,  341, 2667,
      340,  341,  342,  751,  752,  342,  767,  768,  767,  767,
      343,  769,  770,  343, 1777, 1386,  771,  772, 1386,  758,
     1387,  759,  838, 1387,  773,  767,  768,  767,  767,  840,

      769,  770, 1386,  841,  842,  771,  772, 1387,  843,  775,
      776,  775,  775,  773,  777,  778,  844, 2012, 2160,  779,
      780, 2160, 2013,  775,  776,  775,  775,  781,  777,  778,
     2362, 2161, 3017,  779,  780, 1674, 1674, 1674, 1674, 3018,
     2363,  781,  338,  338,  339,  338,  338,  338,  340,  341,
      782,  338,  338,  342,  338,  338,  338,  338,  338,  338,
      338,  343,  338,  338,  338,  338,  338,  338,  338,  783,
      338,  338,  338,  338,  338,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  338,

      338,  338,  338,  784,  338,  784,  784,  785,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  786,  784,  784,  784,
      338,  338,  338,  338,  784,  788, 1839,  788, 1840,  789,
      790,  789,  790, 3019,  791, 1777,  791, 1632, 1632, 1632,
     1632, 1839,  792, 1840,  792,  795,  796,  795,  795, 1386,
      797,  798, 1633, 1777, 1387,  799,  795,  796,  795,  795,
     1386,  797,  798,  800, 2131, 2020,  799,  803,  804,  803,
      803, 3020,  805,  806,  800, 1777, 1845,  807, 2027, 1421,
      808, 2132, 1421, 2028,  809,  810,  803,  804,  803,  803,

     1386,  805,  806, 1777, 2131, 1387,  807,  339,  811,  808,
     1386,  340,  341,  809,  810, 1387,  342, 1386, 3021,  801,
     2054,  793, 1387,  793,  343, 2055, 1469,  811, 3022, 1469,
      801,  840, 2059,  838,  811,  841,  842, 2060, 1720, 1721,
      843, 1386, 1615, 1615, 1615, 1615, 1387, 1386,  844, 1616,
     1736, 1737, 1387,  811,  338,  338,  339,  338,  338,  338,
      340,  341,  812,  338,  338,  342,  338,  338,  338,  338,
      338,  338,  338,  343,  338,  338,  338,  338,  338,  338,
      338,  813,  338,  338,  338,  338,  338,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  338,  338,  338,  338,  814,  338,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  815,  338,  338,  338,  814,  338,  338,  339,
      338,  338,  338,  340,  341,  816,  338,  338,  342,  338,
      338,  338,  338,  338,  338,  338,  343,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  338,  338,  338,  338,  817,  338,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  338,  338,  338,  338,  817,
      338,  338,  339,  338,  338,  338,  340,  341,  818,  338,
      338,  342,  338,  338,  338,  338,  819,  338,  338,  343,
      338,  338,  338,  338,  338,  338,  338,  819,  338,  338,
      338,  338,  338,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  338,  338,  338,

      338,  820,  338,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  338,  338,
      338,  338,  820,  338,  821,  822,  821,  821,  338,  340,
      341,  823,  338,  338,  342,  338,  338,  338,  338,  819,
      338,  338,  343,  338,  338,  338,  338,  338,  338,  338,
      819,  338,  338,  338,  338,  338,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      338,  338,  338,  338,  824,  338,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  338,  338,  338,  338,  824,  826, 1386, 3023,  339,
      827,  828, 1387,  848,  849,  829, 1386, 1386,  850, 3024,
      826, 1387, 1387,  830,  827,  828,  851,  339, 1386,  829,
     1386,  848,  849, 1387,  852, 1387,  850,  830,  865, 2117,
     3025,  865,  866,  867,  851,  866,  867,  868, 2127, 2129,
      868, 2122,  852, 2128, 2130,  869, 2123,  877,  869, 3026,
      877,  878,  879, 2366,  878,  879,  880,  831,  881,  880,
     2451,  881, 2367,  832,  882, 2118, 2117,  882, 2118, 2452,

     2125,  831,  833, 2125,  834,  835,  339,  832, 1738, 1739,
      340,  341,  836, 2119,  837,  342,  833,  930,  834,  835,
     2129, 1498, 3029,  343, 1498, 2150,  836, 2126,  837,  338,
      338,  339,  338,  338,  338,  340,  341,  845,  338,  338,
      342,  338,  338,  338,  338,  338,  338,  338,  343,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  338,  338,  338,  338,
      846,  338,  846,  846,  846,  846,  846,  846,  846,  846,

      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  338,  338,  338,
      338,  846,  853,  854,  552,  854,  854,  853,  855,  856,
      857,  853,  853,  858,  853,  853,  853,  853,  859,  853,
      853,  860,  853,  853,  853,  853,  853,  853,  853,  861,
      853,  853,  853,  853,  853,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  853,
      853,  853,  853,  862,  853,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,

      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      863,  853,  853,  853,  862,  338,  338,  339,  338,  338,
      338,  340,  341,  870,  338,  338,  342,  871,  338,  338,
      338,  338,  338,  338,  343,  338,  338,  338,  338,  338,
      338,  872,  873,  338,  338,  338,  338,  338,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  338,  338,  338,  338,  874,  338,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,

      874,  874,  874,  875,  338,  338,  338,  874,  338,  338,
      339,  338,  338,  338,  340,  341,  883,  338,  338,  342,
      884,  338,  338,  338,  885,  338,  338,  343,  338,  338,
      338,  338,  338,  338,  886,  873,  338,  338,  338,  338,
      338,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  338,  338,  338,  338,  887,
      338,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  875,  338,  338,  338,

      887,  889, 2153, 1751,  889,  890,  891, 2154,  890,  891,
      892,  893,  894,  892,  893,  894, 3030, 1498,  895,  339,
     1498,  895,  339,  340,  341,  339,  340,  341,  342,  340,
      341,  342, 1747, 1839,  342, 1840,  343, 2120, 2231,  343,
     2120, 2232,  343, 2107, 3031,  896, 2107,  339,  896,  339,
      906,  340,  341,  340,  341, 2121,  342, 2166,  342, 1748,
      897, 1747, 2167, 2217,  343,  339,  343, 1453, 2218,  340,
      341, 2108,  906, 1454,  342,  339,  918, 1843, 1844,  340,
      341, 3032,  343, 1456,  342,  927,  339, 2117, 1748,  339,
      340,  341,  343,  340,  341,  342, 2219,  918,  342,  919,

      930, 2220, 2092,  343, 2591, 2092,  343, 2109, 3033, 2093,
      898, 2094,  899,  920,  921, 2094,  900, 1748,  922, 2244,
      919, 1707, 2245,  901, 1707, 2683, 2110,  902,  903, 3034,
      904, 2684,  905,  339,  920,  921,  339,  340,  341,  922,
      340,  341,  342, 2408,  897,  342,  927,  339, 2409, 2417,
      343,  340,  341,  343, 2418, 2420,  342,  931,  932, 2184,
     2421,  339, 2184, 2185,  343,  340,  341, 1453, 3035, 1800,
      342,  931,  932, 1454, 1800,  339, 1800, 2186,  343,  340,
      341, 1800,  339, 1456,  342,  933,  340,  341, 2656, 2657,
     2512,  342,  343,  339,  898, 2513,  899,  340,  341,  343,

      900, 1707,  342,  933, 1707, 1811, 1824,  901, 1811, 1824,
      343,  902,  903, 2721,  904, 2722,  905,  338,  907,  339,
      338,  907,  338,  340,  341,  908,  338,  338,  342,  909,
      338,  338,  338,  338,  338,  338,  343,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  338,  338,  338,  338,  910,  338,
      910,  910,  911,  910,  910,  910,  910,  910,  910,  910,
      910,  912,  910,  910,  910,  910,  910,  910,  913,  910,

      914,  915,  910,  910,  910,  338,  338,  338,  338,  910,
      338,  338,  339,  338,  338,  338,  340,  341,  916,  338,
      338,  342,  338,  338,  338,  338,  338,  338,  338,  343,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  338,  338,  338,
      338,  917,  338,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  338,  338,

      338,  338,  917,  338,  338,  339,  338,  338,  338,  340,
      341,  923,  338,  338,  342,  338,  338,  338,  338,  338,
      338,  338,  343,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      338,  338,  338,  338,  924,  338,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  338,  338,  338,  338,  924,  338,  338,  339,  338,

      338,  338,  340,  341,  925,  338,  338,  342,  338,  338,
      338,  338,  338,  338,  338,  343,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  338,  338,  338,  338,  926,  338,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  338,  338,  338,  338,  926,  338,
      338,  339,  338,  338,  338,  340,  341,  928,  338,  338,

      342,  338,  338,  338,  338,  338,  338,  338,  343,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  338,  338,  338,  338,
      929,  338,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  338,  338,  338,
      338,  929,  338,  338,  339,  338,  338,  338,  340,  341,
      934,  338,  338,  342,  935,  338,  338,  338,  936,  338,

      338,  343,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  338,
      338,  338,  338,  937,  338,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      338,  338,  338,  338,  937,  338,  338,  339,  338,  338,
      338,  340,  341,  938,  338,  338,  342,  338,  338,  338,
      338,  338,  338,  338,  343,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  338,  338,  338,  338,  939,  338,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  338,  338,  338,  338,  939,  338,  338,
      339,  338,  338,  338,  340,  341,  940,  338,  338,  342,
      941,  338,  338,  338,  942,  338,  338,  343,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  338,  338,  338,  338,  943,
      338,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  338,  338,  338,  338,
      943,  338,  338,  339,  338,  338,  338,  340,  341,  944,
      338,  338,  342,  338,  338,  338,  338,  338,  338,  338,
      343,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  945,  945,  945,  945,  945,  945,

      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  338,  338,
      338,  338,  945,  338,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  338,
      338,  338,  338,  945,  338,  338,  339,  338,  338,  338,
      340,  341,  946,  338,  338,  342,  947,  338,  338,  338,
      948,  338,  338,  343,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  338,  338,  338,  338,  949,  338,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  338,  338,  338,  338,  949,  338,  338,  339,
      338,  338,  338,  340,  341,  950,  338,  338,  342,  338,
      338,  338,  338,  338,  338,  338,  343,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  951,  951,  951,  338,  338,  338,  338,  951,  338,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  338,  338,  338,  338,  951,
      338,  338,  339,  338,  338,  338,  340,  341,  952,  338,
      338,  342,  953,  338,  338,  338,  954,  338,  338,  343,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  338,  338,  338,

      338,  955,  338,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  338,  338,
      338,  338,  955,  338,  338,  339,  338,  338,  338,  340,
      341,  956,  338,  338,  342,  338,  338,  338,  338,  338,
      338,  338,  343,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      338,  338,  338,  338,  957,  338,  957,  957,  957,  957,

      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  338,  338,  338,  338,  957,  338,  338,  339,  338,
      338,  338,  340,  341,  958,  338,  338,  342,  959,  338,
      338,  338,  960,  338,  338,  343,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  961,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  338,  338,  338,  338,  961,  338,  961,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,

      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  338,  338,  338,  338,  961,  338,
      338,  339,  338,  338,  338,  340,  341,  962,  338,  338,
      342,  963,  964,  338,  338,  338,  338,  338,  343,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  338,  338,  338,  338,
      965,  338,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,

      965,  965,  965,  965,  965,  965,  965,  338,  338,  338,
      338,  965,  338,  338,  339,  338,  338,  338,  340,  341,
      966,  338,  338,  342,  967,  338,  338,  338,  338,  338,
      338,  343,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  338,
      338,  338,  338,  968,  338,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,

      338,  338,  338,  338,  968,  339, 2514, 3036,  339,  340,
      341, 2592,  340,  341,  342, 2515,  969,  342, 1389,  969,
     3037, 1389,  343,  339, 2514,  343,  339,  340,  341, 1390,
      340,  341,  342,  970, 1836,  342,  970, 1836, 2514, 2585,
      343, 2592, 2585,  343,  338,  338,  339,  338,  338,  338,
      340,  341,  971,  338,  338,  342,  338,  338,  338,  338,
      972,  338,  338,  343,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,

      973,  338,  338,  338,  338,  973,  338,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  338,  338,  338,  338,  973,  338,  974,  975,
      974,  974,  976,  340,  341,  977,  338,  338,  342,  978,
      338,  338,  338,  338,  338,  338,  343,  338,  338,  338,
      338,  338,  338,  979,  338,  338,  338,  338,  338,  338,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  338,  338,  338,  338,  980,  338,

      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  338,  338,  338,  976,  980,
      339, 2127, 3038,  339,  340,  341, 2128,  340,  341,  342,
     1389,  981,  342, 1389,  981, 2168, 2240,  343,  339, 2168,
      343, 1390,  340,  341, 2168, 3039, 2241,  342, 1673, 1674,
     1674, 1673, 2242, 2168, 1675,  343,  338,  338,  339,  338,
      338,  338,  340,  341,  982,  338,  338,  342,  338,  338,
      338,  338,  983,  338,  338,  343,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  984,

      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  338,  338,  338,  338,  984,  338,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  338,  338,  338,  338,  984,  339,
     2690,  339, 3040,  340,  341,  340,  341, 3041,  342,  985,
      342,  985, 1684, 1684, 1684, 1684,  343, 2691,  343,  338,
      338,  339,  338,  338,  338,  340,  341,  986,  338,  338,
      342,  338,  987,  338,  338,  988,  338,  338,  343,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  338,  338,  338,  338,
      989,  338,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  338,  338,  338,
      338,  989,  338,  338,  339,  338,  338,  338,  340,  341,
      990,  338,  338,  342,  991,  987,  338,  338,  338,  338,
      338,  343,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  338,
      338,  338,  338,  992,  338,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      338,  338,  338,  338,  992,  339, 1839,  339, 1840,  340,
      341,  340,  341, 3042,  342, 2131,  342, 1425, 1426, 1426,
     1425, 1839,  343, 1840,  343,  994,  995,  994,  994,  339,
      996,  997, 2132,  340,  341,  998,  999, 1000,  342, 1022,

     1001, 1002, 1427, 1003, 2631, 2131,  343, 1669, 1669, 1669,
     1669, 1004, 1005, 2630, 1006, 1007, 1008, 2472, 3044, 1670,
     1014, 1015, 1014, 1014, 2473,  340,  341, 1097, 1009, 2813,
      342, 1098, 1099, 2652, 1010, 2814, 1100, 1009,  343, 1101,
     3045, 1011, 2652, 1000, 1102, 1014, 1015, 1014, 1014,  339,
      340,  341, 1057,  340,  341,  342, 1058, 1059,  342, 1022,
     2554, 1060, 1061,  343, 1402, 3046,  343, 1012, 1389, 1062,
     2111, 1389, 1013, 2111, 1000,  994,  995,  994,  994, 1390,
      996,  997, 1839, 1103, 1840,  998,  999, 1000, 1016, 2112,
     1001, 1002, 2954, 1003, 1466, 1466, 1466, 1466, 2969, 2117,

     1016, 1004, 1005,  339, 1006, 1007, 1008,  340,  341, 1017,
     3053, 2554,  342, 1016, 1023, 2721, 2591, 2728, 1009, 1467,
      343, 2117, 2954, 1468, 1010, 1016, 2536, 1009, 2969, 2536,
     2475, 1011,  339, 1000, 1017,  339,  340,  341, 2953, 1037,
     1038,  342, 2554, 1023, 1039, 1040, 1041, 1994, 2717,  343,
     1994, 2537, 1042, 1697, 1697, 1697, 1697, 1012, 1995, 3057,
     1698, 1043, 1013, 1044, 1000,  338, 1018, 1019, 1018, 1018,
      338,  340,  341, 1020,  338,  338,  342,  338,  338,  338,
      338,  338,  338,  338,  343,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338, 1021, 1021,

     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021,  338,  338,  338,  338, 1021,  338, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021,  338,  338,  338,  338, 1021,  338, 1024,
     1025, 1024, 1024,  338,  340,  341, 1026,  338, 1027,  342,
     1028,  338, 1027,  338, 1029,  338,  338, 1030,  338,  338,
      338,  338,  338,  338,  338, 1031,  338, 1032,  338,  338,
      338, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,

     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033,  338,  338,  338,  338, 1033,
      338, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033,  338,  338,  338,  338,
     1033,  339, 2653,  339, 3059,  340,  341,  340,  341, 3060,
      342, 2653,  342, 1706, 2970, 1034, 1706, 1034,  343, 1675,
      343, 1443, 1443, 1443, 1443,  339, 1035, 2652, 1035, 1037,
     1038, 2653, 1444, 3137, 1039, 1040, 1041, 1632, 1632, 1632,
     1632, 2652, 1042, 3138, 2970, 2653, 1427, 1752, 1752, 1752,

     1752, 1043, 1633, 1044, 1045, 1046, 1047, 1046, 1046, 1048,
     1049, 1050, 1051, 1045, 1045, 1052, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1053, 1045, 1045, 1045, 1045, 1045, 1045,
     1054, 1045, 1045, 1045, 1045, 1045, 1045, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1045, 1045, 1045, 1045, 1055, 1045, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1045, 1045, 1045, 1048, 1055, 1057, 2671,  339,

     3139, 1058, 1059,  340,  341, 3140, 1060, 1061,  342, 1063,
     1064, 2672, 2547,  339, 1062, 2673,  343,  340,  341, 2224,
     3141, 2841,  342, 1063, 1064, 2225, 2226, 1085, 2227, 1085,
      343, 1086, 1087, 1086, 1087, 2841, 1088, 3142, 1088, 1443,
     1443, 1443, 1443, 1097, 1089, 3027, 1089, 1098, 1099, 3028,
     1444, 1090, 1100, 1090, 1065, 1101, 1752, 1752, 1752, 1752,
     1102, 2547, 1920, 1741, 1427, 1920, 1741, 1921, 1065, 1067,
     1068, 1067, 1067, 1097, 1069, 1070, 1742, 1104, 1099, 1071,
     1072, 1073, 1105, 2613, 1097, 1101, 3143, 1074, 1104, 1099,
     1102, 1716, 2547, 1105, 1716, 2368, 1101, 1717, 2368, 1103,

     2111, 1102, 1446, 2111, 2659, 1107, 2721, 2660, 2722, 1108,
     1109, 1107, 1075, 2422, 1110, 1108, 1109, 1111, 1076, 2112,
     1110, 1075, 1112, 1111, 2423, 2845, 1107, 2423, 1112, 1103,
     1114, 1109, 1107, 3144, 2613, 1115, 1114, 1109, 1111, 2845,
     1103, 1115, 2424, 1112, 1111, 1489, 1489, 1489, 1489, 1112,
     3145, 1077, 1067, 1068, 1067, 1067, 2144, 1069, 1070, 2144,
     1453, 1113, 1071, 1072, 1073, 2613, 1454, 1113, 1117, 2145,
     1074, 2841, 1118, 1119, 2146, 3146, 1456, 1120, 1121, 1122,
     2841, 2674, 1113, 2126, 2675, 1123, 3147, 2368, 1113, 1117,
     2368, 2369, 2676, 1118, 1119, 1075, 2846, 3148, 1120, 1121,

     1122, 1076, 2845, 1125, 1075, 2370, 1123, 1126, 1127, 1125,
     2846, 2845, 1128, 1126, 1127, 2197, 3149, 2726, 1128, 1839,
     1129, 1840, 1443, 1443, 1443, 1443, 1129, 1569, 1569, 1569,
     1569, 2803, 1490, 1444, 1077, 1067, 1068, 1067, 1067, 1133,
     1069, 1070, 2846, 1134, 1135, 1071, 1072, 1427, 1136, 1137,
     1138, 2846, 1512, 1074, 1571, 2721, 1139, 2728, 1505, 1505,
     1505, 1505, 1079, 1133, 1080, 3150,  339, 1134, 1135, 2470,
     1183, 1184, 1136, 1137, 1138, 1185, 1506, 1186, 1081, 1839,
     1139, 1840, 2277, 1187, 1082, 2277, 2278, 1081, 1447, 1130,
     1839, 1131, 1840, 2023, 1141, 1130, 2023, 1131, 1142, 1143,

     2279, 3151, 3152, 1144, 1151, 1152, 2024, 1151, 1145, 1153,
     1154, 1146, 2899, 2280, 1155, 1156, 1157, 1083, 1067, 1068,
     1067, 1067, 1158, 1069, 1070, 1839, 2899, 1840, 1071, 1072,
     3153, 3154, 1151, 1152, 2474, 1151, 1074, 1153, 1154, 2280,
     2471, 3155, 1155, 1156, 1157, 1079, 2585, 1080, 2368, 2585,
     1158, 2368, 2369,  570,  571,  570,  570, 3156,  572,  573,
     3157, 1081, 2881,  574, 1180, 1181, 2370, 1082,  577, 2120,
     1081,  578, 2120,  570,  571,  570,  570, 2899,  572,  573,
     1147, 2901, 1148,  574, 1180, 1181, 2899, 2121,  577, 3158,
     2900,  578, 1759, 1759, 1759, 1759, 1759, 1759, 1759, 1759,

     1083,  338,  338,  339,  338,  338,  338,  340,  341, 1091,
      338,  338,  342,  338,  338,  338,  338,  338,  338,  338,
      343,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,  338,  338,
      338,  338, 1092,  338, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,  338,
      338,  338,  338, 1092,  338,  338,  339,  338,  338,  338,

      340,  341, 1093,  338,  338,  342,  338,  338,  338,  338,
      338,  338,  338,  343,  338,  338,  338,  338,  338,  338,
      338, 1094,  338,  338,  338,  338,  338, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095,  338,  338,  338,  338, 1095,  338, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095,  338,  338,  338,  338, 1095, 1141, 3001, 2830,
     1538, 1142, 1149, 1538, 3002, 2393, 1144, 1160, 1161, 1160,

     1160, 1145, 1162, 1163, 1146, 2952, 3166, 1164, 1165, 1166,
     3170, 1160, 1161, 1160, 1160, 1167, 1162, 1163, 2413, 2952,
     3173, 1164, 1165, 1166, 1168, 1839, 1169, 1840,  339, 1167,
     3174, 2368, 1183, 1184, 2368, 2453, 2366, 1185, 1168, 1186,
     1169, 1189, 1190, 1189, 1189, 1187, 1191, 1192, 1839, 2454,
     1840, 1193, 1194, 1195, 1539, 1540, 1196,  339, 3175, 1197,
     1256, 1246, 1247,  339, 1257, 1258, 1248, 1345, 1346, 1259,
     2880, 3176, 1347, 1147, 1249, 1148, 2608, 1260, 1170, 2608,
     1348, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 2609,
     3177, 2877, 1170, 1171, 1171, 1172, 1171, 1171, 1171, 1173,

     1174, 1175, 1171, 1171, 1176, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1177, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1178, 1171, 1171, 1171, 1171, 1171, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1171, 1171, 1171, 1171, 1179, 1171, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1178, 1171, 1171, 1171, 1179, 1189, 1190, 1189, 1189,
      339, 1191, 1192, 2182,  632,  633, 1193, 1194, 1195,  634,

     2125, 1196, 2183, 2125, 1197,  339, 3178,  635, 1200,  632,
      633, 1200, 1201, 1202,  634, 1201, 1202, 1203, 2118, 2117,
     1203, 2118,  635, 2366, 3181, 1204, 1200, 2126, 1204, 1200,
     1206, 1202, 2367, 1206, 1202, 1207, 2119, 3182, 1207, 1769,
     1769, 1769, 1769, 1204, 1200,  636, 1204, 1198, 1069, 1209,
     1777, 2598, 3183, 1071, 1210, 1211, 1398, 1399, 1399, 1398,
      636, 1212, 1198, 3184, 1205, 2092, 1200, 1205, 2092, 2120,
     1069, 1209, 2120, 1400, 2094, 1071, 1210, 1211, 2094, 3185,
     3186, 1401, 1205, 1212, 1200, 1205, 1213, 2121, 1069, 1070,
     1777, 3187, 1214, 1071, 1216, 1213, 1410, 1410, 1410, 1410,

     2598, 1212, 3188, 1411, 1507, 1507, 1507, 1507, 1213, 2366,
     1217, 1200, 1218, 1400, 1214, 1069, 1070, 1213, 2367, 3191,
     1071, 1216, 1508, 3192, 2184, 1215, 1081, 2184, 1212,  339,
     3193, 2598, 1082, 1345, 1346, 1081, 3179, 1217, 1347, 1218,
     1220, 3194, 2624, 1402, 1221, 1222, 1348, 1215, 1839, 1223,
     1840, 2699, 1224, 1081, 2699, 3180, 3043, 1225, 2092, 1082,
     3198, 2092, 1081, 1227, 1220, 1083, 1227, 2094, 1221, 1222,
     1226, 2094, 2833, 1223, 1230, 2833, 1228, 3163, 1231, 1232,
     1230, 1225, 3199, 1233, 1231, 1232, 1413, 2144, 3200, 1233,
     2144, 1234, 1083, 3189, 1226, 3201, 1226, 1234, 1220, 2484,

     2145, 3190, 1237, 1238, 1235, 2146, 2160, 1239, 1220, 2160,
     1235, 2494, 1237, 1238, 2126, 1240, 3206, 1239, 1264, 2161,
     1226, 2509, 1265, 1266, 3209, 1240, 2517, 1267, 1241, 1268,
     1235, 1505, 1505, 1505, 1505, 1269, 1235, 2368, 1241, 1264,
     2368, 2520, 1271, 1265, 1266, 2524, 1272, 1273, 1267, 1506,
     1268, 1274, 2528, 1275, 1241, 2422, 1269, 2532, 3220, 1276,
     1769, 1769, 1769, 1769, 1241,  338,  338,  339,  338,  338,
      338,  340,  341, 1242,  338,  338, 1243,  338,  338,  338,
      338,  338,  338,  338,  343,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338, 1244, 1244,

     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244,  338,  338,  338,  338, 1244,  338, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244,  338,  338,  338,  338, 1244, 1245, 1245,
      339, 1245, 1245, 1245, 1246, 1247, 1250, 1245, 1245, 1248,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1249, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,

     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1245, 1245, 1245, 1245, 1251,
     1245, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1245, 1245, 1245, 1245,
     1251,  338,  338,  339,  338,  338,  338,  340,  341, 1252,
      338,  338, 1253,  338,  338,  338,  338,  338,  338,  338,
      343,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,  338,  338,
      338,  338, 1254,  338, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,  338,
      338,  338,  338, 1254, 1255, 1255, 1256, 1255, 1255, 1255,
     1257, 1258, 1261, 1255, 1255, 1259, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1260, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1255, 1255, 1255, 1255, 1262, 1255, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1255, 1255, 1255, 1255, 1262, 1271, 2540, 3223,
      339, 1272, 1273, 3224, 1308, 1309, 1274, 2925, 1275, 1310,
     1311, 3226, 3227, 2273, 1276,  339, 2273, 1312, 2423, 1278,
     1279, 2423, 3228, 3229, 1280, 1328,  339, 3230, 1328,  339,
     1329, 1330, 1281, 1308, 1309, 1331, 2424, 2277, 1310, 1311,
     2277, 2354, 2536, 1332, 2276, 2536, 1312, 1507, 1507, 1507,
     1507, 1328,  339, 1333, 1328, 2355, 1329, 1330, 1453, 3239,

     1839, 1331, 1840, 3239, 1454, 1508, 3241, 2537, 2280, 1332,
     2276, 1839, 1282, 1840, 1456, 1313, 1283, 1284, 1285, 1333,
     1474, 1475, 1475, 1474, 1839, 3241, 1840, 1476, 1286, 1334,
     1287, 1288, 3242, 1289, 2280, 1290,  339, 2610, 3243, 2490,
     1278, 1279, 2490, 2491, 1313, 1280, 1335, 1477, 1336, 1839,
     2611, 1840, 1337, 1281,  339, 1334, 2877, 2491, 1339, 1340,
     3244, 2879, 3245, 1341,  339, 1342, 2634, 2610, 1339, 1340,
     2492, 1343, 1335, 1341, 1336, 1342, 3246, 3250, 1337, 2876,
     2611, 1343, 1350, 1351, 3251, 1350, 2916, 1352, 1353, 2916,
     1479, 3219, 1354, 1282, 3252, 3253, 2492, 1283, 1284, 1285,

     1355, 1812, 1812, 1812, 1812, 2877, 3254, 1480, 3255, 1286,
     3256, 1287, 1288, 3259, 1289, 3260, 1290, 1291, 1292, 1293,
     1292, 1292, 1291, 1294, 1295, 1296, 1291, 1291, 1297, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1298, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1299, 1291, 1291, 1291, 1291, 1291,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1301, 1291, 1291, 1291, 1300, 1291,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,

     1300, 1300, 1300, 1300, 1300, 1291, 1291, 1291, 1291, 1300,
      338, 1302, 1303, 1302, 1302,  338,  340,  341, 1304,  338,
      338,  342, 1305,  338,  338,  338,  338,  338,  338,  343,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306,  338,  338,  338,
      338, 1306,  338, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,  338,  338,

      338,  338, 1306, 1314, 1315, 1316, 1315, 1315, 1317, 1318,
     1319, 1320, 1314, 1314, 1321, 1322, 1323, 1314, 1314, 1314,
     1314, 1314, 1324, 1314, 1314, 1314, 1314, 1314, 1314, 1325,
     1314, 1314, 1314, 1314, 1314, 1314, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1314, 1314, 1314, 1314, 1326, 1314, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1314, 1314, 1314, 1317, 1326, 1350, 1351, 1839, 1350,

     1840, 1352, 1353, 1839, 2960, 1840, 1354, 1357, 1358, 1839,
     1357, 1840, 1359, 1360, 1355, 3262, 3263, 1361, 1369, 1358,
     1362, 1369, 3264, 1359, 1360, 1363, 3265, 3266, 1361, 2608,
     2608, 1370, 2608, 2608, 1364, 1373, 1371, 2966, 1365, 1374,
     1375, 1376, 2609, 2609, 1377, 1364, 3196, 1378, 1839, 1365,
     1840, 2967, 1379, 2972, 3197, 1406, 1406, 1406, 1406, 1407,
     2973, 1380, 1408, 2878, 1366, 1381, 3281, 3282, 1367, 1426,
     1426, 1426, 1426, 1435, 3283, 1366, 1436, 3284, 3285, 1367,
     1401, 1505, 1505, 1505, 1505, 1415, 1415, 1415, 1415, 3195,
     1627, 1381, 1376, 1627, 1427, 1382, 1416, 1368, 2214, 1506,

     1417, 2214, 1400, 1453, 1507, 1507, 1507, 1507, 1368, 1454,
     1401, 1419, 1420, 3288, 1475, 1475, 1475, 1475, 3247, 1456,
     3248, 1476, 1508, 3267, 1383, 1384, 1373, 3289, 1384, 3249,
     1374, 1375, 1376, 1627, 2273, 1377, 1627, 2273, 1385, 3290,
     3291, 1477, 3292, 1379, 3293, 1407, 1491, 1491, 1491, 1491,
     3294, 3268, 1380, 3267, 1539, 1540, 1381, 2719, 2978, 1435,
     2719, 3295, 3296, 1492, 3297, 2276, 3298, 1505, 1505, 1505,
     1505, 1494, 1507, 1507, 1507, 1507, 3299, 1613, 1613, 1613,
     1613, 3268, 1381, 1376, 1479, 1506, 1382, 3300, 2720, 1532,
     1508, 2276, 3302, 1625, 1392, 1392, 1625, 1539, 1540, 1626,

     3303, 4960, 1614, 1495, 2182, 3304, 3305, 1613, 1613, 1613,
     1613, 1393, 3306, 2183, 2720, 1383, 1428, 1481, 1481, 1482,
     1481, 1428, 1428, 1428, 1483, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1614, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1484, 1428, 1428, 1428, 1428, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1428, 1428, 1428, 1428, 1485, 1428, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1486, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,

     1485, 1485, 1485, 1485, 3307, 1428, 1428, 1428, 1485, 1509,
     1510, 1510, 1509, 3308, 3309, 1511, 1541, 1541, 1541, 1541,
     1542, 3310, 3311, 1543, 1926, 1926, 1926, 1926, 1510, 1510,
     1510, 1510, 3312, 3313, 1512, 1510, 1510, 1510, 1510, 3314,
     1513, 1512, 1548, 1548, 1548, 1548, 3315, 2723, 3316, 1549,
     2723, 1550, 1453, 1512, 3317, 1550, 2487, 1514, 1454, 2487,
     1512, 1730, 1730, 1730, 1730, 1515, 3318, 1551, 1456, 1516,
     3319, 1517, 3320, 1518, 1519, 1520, 3321, 3322, 2280, 1521,
     1928, 1522, 1523, 1524, 1525, 3323, 1526, 2489, 1527, 1528,
     1529, 1530, 1531, 1519, 1569, 1569, 1569, 1569, 1532, 3324,

     1519, 1550, 3326, 3327, 2280, 1532, 1542, 3328, 1533, 3325,
     3329, 1534, 3330, 2489, 2490, 1533, 3331, 2490, 1534, 1512,
     3332, 1571, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 3121, 2092, 1572, 2492, 2092, 1512, 1732, 1571,
     2093, 1512, 2094, 1571, 3333, 1512, 2094, 1571, 3122, 1512,
     3335, 1571, 3337, 1512, 3057, 1571, 3338, 1569, 1569, 1569,
     1569, 2492, 1569, 1569, 1569, 1569, 3339, 2223, 1569, 1569,
     1569, 1569, 1573, 2296, 3400, 3401, 1576, 1569, 1569, 1569,
     1569, 3418, 1512, 1577, 1571, 3257, 3258, 1512, 3257, 1571,

     3419, 3420, 3421, 1512, 1580, 1571, 3422, 1578, 1581, 3423,
     1579, 3424, 1512, 2953, 1571, 3425, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 3426, 3427, 3428, 1651, 1651, 1651,
     1651, 1582, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     3431, 1512, 1583, 1571, 1587, 1512, 1652, 1571, 3432, 3433,
     1584, 1586, 1585, 1569, 1569, 1569, 1569, 1512, 3434, 1571,
     3438, 1512, 1588, 1571, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1589, 3439, 1512, 2393,
     1571, 2393, 1569, 1569, 1569, 1569, 3442, 2413, 2413, 1512,
     1590, 1571, 1653, 1512, 3445, 1571, 3448, 1512, 1591, 1571,

     3449, 3450, 1597, 1569, 1569, 1569, 1569, 1512, 1592, 1571,
     1622, 1622, 1622, 1622, 1593, 1594, 1613, 1613, 1613, 1613,
     1618, 3451, 3452, 1619, 1392, 1392, 1392, 1392, 1512, 3453,
     1571, 3454, 3455, 3456, 1598, 1614, 3457, 1624, 1599, 3458,
     3459, 1614, 1393, 1595, 3460, 3461, 1596, 1603, 1601, 1600,
     3462, 3465, 1604, 1392, 1392, 1392, 1392, 1505, 1505, 1505,
     1505, 1666, 1666, 1666, 1666, 1605, 3467, 1839, 1602, 1840,
     2484, 1393, 1839, 1606, 1840, 1506, 1839, 2484, 1840, 1607,
     1507, 1507, 1507, 1507, 1651, 1651, 1651, 1651, 2494, 1637,
     1695, 1695, 1695, 1695, 1687, 1687, 1687, 1687, 1508, 1687,

     1687, 1687, 1687, 1652, 3469, 2509, 1618, 1635, 1635, 1635,
     1635, 1688, 2877, 2509, 2517, 1696, 1688, 3463, 2520, 1690,
     2520, 3464, 3466, 1636, 1690, 3466, 2524, 2524, 1640, 1687,
     1687, 1687, 1687, 2528, 2528, 1637, 2532, 1642, 1693, 1693,
     1693, 1693, 1695, 1695, 1695, 1695, 1688, 2532, 3472, 1653,
     1695, 1695, 1695, 1695, 1690, 2540, 1694, 1765, 1765, 1765,
     1765, 1691, 1765, 1765, 1765, 1765, 2540, 1696, 3473, 1638,
     3473, 1639, 3474, 3475, 1640, 1696, 3476, 1695, 1695, 1695,
     1695, 1700, 1641, 1642, 1701, 3477, 1643, 1644, 1645, 3478,
     1646, 1714, 1714, 1714, 1714, 1722, 1722, 1722, 1722, 3479,

     3480, 3481, 1696, 3482, 3483, 3484, 1692, 3485, 3487, 1715,
     3487, 3489, 3489, 1723, 1780, 1780, 1780, 1780, 3490, 3491,
     3495, 1766, 1784, 1784, 1784, 1784, 1766, 1787, 1787, 1787,
     1787, 1781, 1787, 1787, 1787, 1787, 1392, 1392, 1392, 1392,
     1505, 1505, 1505, 1505, 1507, 1507, 1507, 1507, 1818, 1818,
     1818, 1818, 3496, 3497, 1393, 3498, 3492, 3499, 1506, 3493,
     3500, 3501, 1508, 3502, 3506, 1819, 3507, 1700, 1820, 1820,
     1820, 1820, 1883, 1883, 1883, 1883, 3508, 3494, 3509, 1786,
     1883, 1883, 1883, 1883, 1885, 1885, 1885, 1885, 3510, 1788,
     3511, 1886, 3503, 1822, 1788, 3503, 3512, 1884, 3514, 1883,

     1883, 1883, 1883, 1888, 3515, 1884, 1889, 1883, 1883, 1883,
     1883, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1505,
     1505, 1505, 1505, 3513, 1884, 1507, 1507, 1507, 1507, 1393,
     3516, 2273, 1884, 1393, 2273, 3517, 3518, 1506, 1911, 1911,
     1911, 1911, 3519, 1508, 1911, 1911, 1911, 1911, 1914, 1914,
     1914, 1914, 3520, 3513, 3521, 1915, 1914, 1914, 1914, 1914,
     3527, 3528, 2276, 1915, 4960, 4960, 4960, 4960, 3529, 3531,
     3534, 4960, 1917, 1917, 1917, 1917, 3535, 1922, 1922, 1922,
     1922, 3536, 3537, 3540, 1923, 1918, 1924, 3538, 2276, 1888,
     1924, 1922, 1922, 1922, 1922, 3541, 3542, 3539, 1923, 2277,

     1924, 3543, 2277, 3544, 1924, 3546, 1912, 4960, 4960, 4960,
     4960, 3550, 1912, 3551, 4960, 3552, 4960, 2422, 1912, 2120,
     4960, 3553, 2120, 3554, 1912, 1922, 1922, 1922, 1922, 3557,
     2280, 3558, 1923, 3559, 1924, 3560, 3561, 2121, 1924, 1505,
     1505, 1505, 1505, 1507, 1507, 1507, 1507, 1930, 1930, 1930,
     1930, 3555, 1933, 1933, 1933, 1933, 2280, 1506, 1931, 3556,
     3562, 1508, 1933, 1933, 1933, 1933, 1935, 1935, 1935, 1935,
     3563, 3564, 1932, 1936, 3565, 3568, 1468, 1934, 1933, 1933,
     1933, 1933, 1938, 3257, 3258, 1939, 3257, 1934, 1933, 1933,
     1933, 1933, 1943, 1943, 1943, 1943, 1945, 1945, 1945, 1945,

     3569, 3570, 3571, 1934, 1944, 3572, 3573, 1946, 1952, 1952,
     1952, 1952, 3574, 1934, 1952, 1952, 1952, 1952, 1955, 1955,
     1955, 1955, 1947, 1996, 1996, 1996, 1996, 1996, 1996, 1996,
     1996, 2004, 2004, 2004, 2004, 3566, 1956, 3578, 2008, 2008,
     2008, 2008, 2005, 2008, 2008, 2008, 2008, 2010, 2010, 2010,
     2010, 3567, 1948, 2009, 3579, 3580, 3576, 2006, 2009, 2025,
     2025, 2025, 2025, 2725, 2029, 2030, 2725, 2031, 1938, 2032,
     3577, 1540, 2024, 2033, 2034, 2723, 2726, 2019, 2723, 2069,
     2069, 2069, 2069, 2035, 3581, 2036, 2070, 2007, 2069, 2069,
     2069, 2069, 3337, 3582, 2727, 2070, 2074, 2074, 2074, 2074,

     3616, 3617, 2080, 2080, 2080, 2080, 2280, 3644, 2075, 2081,
     3645, 2076, 3661, 2082, 2080, 2080, 2080, 2080, 2006, 3504,
     2727, 2081, 3504, 3662, 3663, 2082, 2085, 2085, 2085, 2085,
     3505, 3664, 2280, 2086, 3577, 2072, 2088, 2088, 2088, 2088,
     2097, 2097, 2097, 2097, 2072, 3665, 3667, 2089, 2097, 2097,
     2097, 2097, 2099, 2099, 2099, 2099, 3668, 3669, 3670, 2100,
     2133, 3671, 2091, 3672, 3677, 2098, 3678, 2097, 2097, 2097,
     2097, 2102, 3681, 2098, 2103, 2097, 2097, 2097, 2097, 1392,
     1392, 1392, 1392, 1406, 1406, 1406, 1406, 3684, 1399, 1399,
     1399, 1399, 2098, 2134, 2135, 3685, 2136, 1393, 2137, 2133,

     2098, 3686, 2138, 2139, 3687, 1400, 2134, 2135, 1401, 2136,
     3688, 2137, 2140, 1401, 2141, 2138, 2139, 2162, 2162, 2162,
     2162, 3689, 3690, 3691, 2163, 2140, 3692, 2141, 2164, 3693,
     2161, 1410, 1410, 1410, 1410, 2152, 3694, 3695, 1411, 1403,
     1403, 1403, 1403, 3696, 3699, 3702, 1404, 2494, 1400, 4960,
     4960, 4960, 4960, 1839, 3704, 1840, 4960, 2102, 2147, 2147,
     2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147,
     2147, 2147, 2148, 2147, 2147, 2147, 2147, 2128, 1398, 1399,
     1399, 1398, 2517, 3706, 2147, 2147, 2147, 2147, 2147, 2147,
     2147, 2172, 2172, 2172, 2172, 1400, 2169, 2169, 2169, 2169,

     3707, 3698, 3466, 1401, 1839, 3466, 1840, 1416, 1400, 3700,
     2107, 1417, 3709, 2107, 3710, 2147, 2147, 2147, 2147, 3711,
     2147, 1413, 1419, 1420, 1403, 1403, 1403, 1403, 3712, 3713,
     3714, 1404, 2174, 2174, 2174, 2174, 3715, 3708, 2108, 2175,
     3708, 1415, 1415, 1415, 1415, 3697, 2147, 2147, 2147, 2147,
     2147, 3716, 1416, 2554, 3717, 3718, 1417, 3719, 1400, 3720,
     1425, 1426, 1426, 1425, 3722, 1402, 1401, 1419, 1420, 1410,
     1410, 1410, 1410, 3722, 2109, 3724, 1411, 4960, 4960, 4960,
     4960, 3724, 3725, 3726, 4960, 1427, 1400, 3727, 2177, 2177,
     2177, 2177, 1407, 2110, 4960, 1408, 3728, 1415, 1415, 1415,

     1415, 3729, 3730, 3731, 1415, 1415, 1415, 1415, 1416, 3732,
     3733, 3734, 1417, 1401, 1400, 1416, 3735, 3736, 3737, 1417,
     3738, 1400, 1401, 1419, 1420, 1422, 1422, 1422, 1422, 1401,
     1419, 1420, 1423, 4960, 4960, 4960, 4960, 3739, 3503, 3740,
     4960, 3503, 2169, 2169, 2169, 2169, 3741, 1402, 1426, 1426,
     1426, 1426, 3742, 1416, 3743, 3504, 3744, 1417, 3504, 1413,
     1429, 1429, 1430, 1429, 3745, 3748, 3505, 4960, 1419, 1420,
     3749, 3750, 3751, 1427, 1429, 1429, 1430, 1429, 1407, 1432,
     1432, 1432, 1432, 3752, 1441, 1431, 1433, 4960, 4960, 4960,
     4960, 3754, 3756, 3760, 4960, 2179, 2179, 2179, 2179, 1431,

     1432, 1432, 1432, 1432, 3761, 3762, 1444, 1433, 1443, 1443,
     1443, 1443, 1438, 1438, 1438, 1438, 3763, 3746, 3764, 1444,
     2187, 2187, 2187, 2187, 1435, 3765, 3766, 1436, 1443, 1443,
     1443, 1443, 3767, 1427, 3747, 1443, 1443, 1443, 1443, 1444,
     1443, 1443, 1443, 1443, 3768, 1427, 1444, 1443, 1443, 1443,
     1443, 1444, 3769, 1427, 1461, 1461, 1461, 1461, 1444, 3770,
     1427, 1466, 1466, 1466, 1466, 1427, 1474, 1475, 1475, 1474,
     3771, 3772, 1427, 1476, 3773, 1475, 1475, 1475, 1475, 3774,
     2723, 1462, 1476, 2723, 3776, 3778, 1467, 4960, 4960, 4960,
     4960, 3779, 3782, 1477, 4960, 3783, 1491, 1491, 1491, 1491,

     3785, 3786, 1477, 3787, 3788, 1491, 1491, 1491, 1491, 2190,
     1435, 2280, 3789, 1492, 4960, 1491, 1491, 1491, 1491, 3794,
     2189, 1494, 1492, 3795, 2201, 2201, 2201, 2201, 3796, 3797,
     1494, 2202, 1492, 3800, 3801, 3656, 1479, 2280, 3802, 3803,
     1494, 1463, 3804, 3805, 3806, 1479, 1491, 1491, 1491, 1491,
     2231, 3657, 3833, 1480, 2216, 2216, 2216, 2216, 1505, 1505,
     1505, 1505, 4960, 1535, 1535, 1535, 1535, 3838, 3839, 3842,
     1536, 1494, 3868, 3869, 4960, 3870, 1506, 3877, 3878, 2200,
     1428, 1481, 1481, 1482, 1481, 1428, 1428, 1428, 1483, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 3883, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1484, 1428,
     1428, 1428, 1428, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1428, 1428, 1428,
     1428, 1485, 1428, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1486, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 3884, 1428,
     1428, 1428, 1485, 4960, 4960, 4960, 4960, 3885, 3886, 3888,
     4960, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1489,
     1489, 1489, 1489, 3889, 1491, 1491, 1491, 1491, 1492, 3890,

     4960, 3891, 1492, 3892, 3895, 3898, 1494, 3175, 3899, 3900,
     1494, 1492, 1507, 1507, 1507, 1507, 3901, 3902, 3903, 1494,
     2222, 2222, 2222, 2222, 4960, 4960, 4960, 4960, 3904, 3906,
     1508, 4960, 2258, 2258, 2258, 2258, 1541, 1541, 1541, 1541,
     3907, 3908, 1495, 3909, 2273, 1512, 1538, 2273, 2274, 1538,
     3911, 1495, 1839, 3912, 1840, 2200, 1839, 2275, 1840, 1571,
     4960, 1512, 3914, 2494, 3916, 2260, 2260, 2260, 2260, 2260,
     2260, 1569, 1569, 1569, 1569, 2276, 1490, 2221, 2222, 2222,
     2221, 2517, 3919, 1511, 3920, 1519, 1535, 1535, 1535, 1535,
     1532, 3918, 2877, 1536, 3918, 3921, 1512, 2877, 1571, 2925,

     1533, 2276, 1512, 1534, 1553, 1553, 1553, 1553, 1513, 2273,
     1539, 1540, 2273, 1548, 1548, 1548, 1548, 3922, 3708, 2925,
     1549, 3708, 1550, 2554, 3923, 1514, 1550, 3924, 2282, 2282,
     2282, 2282, 1542, 1515, 3925, 1543, 2618, 1516, 1551, 1517,
     2276, 1518, 1519, 1520, 3926, 3927, 3928, 1521, 3930, 1522,
     1523, 1524, 1525, 1512, 1526, 3930, 1527, 1528, 1529, 1530,
     1531, 4960, 4960, 4960, 4960, 3932, 2276, 3932, 4960, 3933,
     4960, 3934, 1550, 3935, 4960, 3936, 2264, 2264, 2264, 2264,
     2267, 2267, 2267, 2267, 3937, 1550, 4960, 2265, 3938, 1550,
     3939, 3940, 2268, 2269, 3941, 2285, 2285, 2285, 2285, 2285,

     2285, 2285, 2285, 3942, 3943, 2271, 2286, 2272, 4960, 3944,
     2286, 4960, 2287, 3945, 3946, 4960, 2287, 2960, 1542, 3947,
     4960, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 2960,
     3747, 3948, 2286, 3950, 3951, 1550, 2286, 3952, 2287, 3953,
     3954, 3957, 2287, 2285, 2285, 2285, 2285, 2285, 2285, 2285,
     2285, 3960, 3961, 3962, 2286, 3963, 3964, 3965, 2286, 3967,
     2287, 3968, 3969, 3970, 2287, 1569, 1569, 1569, 1569, 3972,
     3973, 3974, 2289, 1569, 1569, 1569, 1569, 3975, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 2303, 2303, 2303, 2303,
     1512, 3976, 1571, 3977, 3981, 2290, 2291, 3988, 1512, 3986,

     1571, 3989, 2292, 1512, 3990, 1571, 3991, 1512, 3995, 1571,
     3997, 3998, 4000, 2295, 4001, 3987, 1561, 2298, 2299, 2691,
     4027, 4028, 2293, 4033, 4034, 2294, 4035, 4036, 2300, 2301,
     4052, 4053, 2302, 1569, 1569, 1569, 1569, 4060, 2297, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 4061, 2304, 1569, 1569, 1569, 1569, 4064, 1512, 4065,
     1571, 4066, 4031, 4075, 1512, 4091, 1571, 3178, 1512, 4095,
     1571, 4032, 1512, 4960, 1571, 4097, 4098, 4960, 1512, 4100,
     1571, 1569, 1569, 1569, 1569, 4101, 4102, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 2494, 1569, 1569, 1569, 1569,

     1569, 1569, 1569, 1569, 4104, 2307, 1512, 2517, 1571, 2925,
     2305, 2308, 1512, 4109, 1571, 2925, 1512, 4110, 1571, 2306,
     2310, 1512, 2309, 1571, 4111, 1512, 4112, 1571, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 4113, 4114, 1569, 1569,
     1569, 1569, 4115, 4117, 1569, 1569, 1569, 1569, 4117, 1569,
     1569, 1569, 1569, 1512, 4119, 1571, 2312, 1512, 4119, 1571,
     4120, 2311, 2314, 1512, 2315, 1571, 4121, 4122, 4123, 1512,
     4124, 1571, 4125, 2313, 1512, 4126, 1571, 2316, 2960, 3918,
     4130, 2317, 3918, 2349, 2349, 2349, 2349, 2960, 1569, 1569,
     1569, 1569, 4131, 1569, 1569, 1569, 1569, 4132, 2318, 4106,

     4107, 4133, 2320, 1569, 1569, 1569, 1569, 2319, 2321, 2324,
     1624, 2322, 2325, 1512, 4127, 1571, 4134, 4127, 1512, 2323,
     1571, 1569, 1569, 1569, 1569, 4128, 4129, 4135, 1512, 4129,
     1571, 4136, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 4141, 4142, 1512, 4143, 1571, 1569,
     1569, 1569, 1569, 1615, 1615, 1615, 1615, 1512, 2327, 1571,
     1616, 1512, 4145, 1571, 4146, 1512, 4147, 1571, 3796, 2326,
     4960, 4960, 4960, 4960, 1512, 4148, 1571, 4960, 1569, 1569,
     1569, 1569, 4150, 4151, 2328, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 4154, 4157, 2329, 4158, 4159, 4160, 2332,

     4162, 4163, 2330, 1512, 4164, 1571, 4165, 2333, 2331, 4166,
     1512, 4168, 1571, 4168, 1512, 4190, 1571, 4191, 2334, 1613,
     1613, 1613, 1613, 1569, 1569, 1569, 1569, 4195, 2335, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 4196, 4197, 4198,
     1569, 1569, 1569, 1569, 1614, 4220, 2336, 2338, 1512, 2231,
     1571, 2254, 4223, 2337, 1512, 4224, 1571, 4225, 1512, 4226,
     1571, 4231, 4232, 2340, 2339, 1512, 4231, 1571, 1569, 1569,
     1569, 1569, 1632, 1632, 1632, 1632, 4232, 1569, 1569, 1569,
     1569, 1615, 1615, 1615, 1615, 4232, 4233, 1633, 1616, 1622,
     1622, 1622, 1622, 1512, 4232, 1571, 4233, 4231, 4232, 2342,

     2341, 4232, 1512, 2343, 1571, 2351, 2351, 2351, 2351, 1618,
     4232, 4236, 1619, 2344, 1614, 4237, 1624, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 1622, 1625, 1392, 1392, 1625, 4238,
     1614, 1626, 2273, 4234, 4231, 2273, 2352, 1634, 1634, 1634,
     1634, 4232, 1614, 1393, 1624, 2353, 1614, 2345, 1624, 4239,
     2346, 1634, 1634, 1634, 1634, 1651, 1651, 1651, 1651, 2365,
     2365, 2365, 2365, 2276, 1651, 1651, 1651, 1651, 2371, 2371,
     2371, 2371, 4231, 4235, 1652, 1666, 1666, 1666, 1666, 1669,
     1669, 1669, 1669, 1652, 2389, 2390, 2390, 2389, 4240, 2276,
     1675, 1670, 4241, 4242, 2494, 1618, 1635, 1635, 1635, 1635,

     4244, 4231, 2517, 1637, 2386, 2386, 2386, 2386, 2390, 2390,
     2390, 2390, 1636, 1677, 2925, 2387, 1677, 4250, 4246, 4247,
     1653, 4246, 4251, 4252, 1637, 2395, 2395, 2395, 2395, 1653,
     4253, 2388, 2391, 2391, 2391, 2391, 2391, 2391, 2396, 2397,
     2398, 2396, 1640, 1684, 1684, 1684, 1684, 2415, 2415, 2415,
     2415, 1642, 4254, 1687, 1687, 1687, 1687, 4255, 1638, 4257,
     1639, 4257, 4259, 1640, 1687, 1687, 1687, 1687, 4259, 4260,
     1688, 1641, 1642, 4261, 4262, 1643, 1644, 1645, 1690, 1646,
     2960, 1688, 4265, 2403, 2403, 2403, 2403, 4266, 4267, 1690,
     2404, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 4268,

     1687, 1687, 1687, 1687, 1693, 1693, 1693, 1693, 1688, 4269,
     4248, 4249, 1688, 4248, 4270, 4129, 1690, 1688, 4129, 4274,
     1690, 4275, 1694, 4277, 2401, 1690, 1695, 1695, 1695, 1695,
     1697, 1697, 1697, 1697, 4280, 4286, 4287, 1698, 4960, 4960,
     4960, 4960, 4288, 4293, 4294, 4960, 1697, 1697, 1697, 1697,
     4190, 1696, 4031, 1698, 1695, 1695, 1695, 1695, 4314, 2405,
     2411, 2411, 2411, 2411, 1700, 4127, 2407, 1701, 4127, 2406,
     1695, 1695, 1695, 1695, 4315, 4316, 4128, 1707, 2223, 1696,
     1707, 1730, 1730, 1730, 1730, 1696, 1714, 1714, 1714, 1714,
     1722, 1722, 1722, 1722, 2296, 1696, 2260, 2260, 2260, 2260,

     2260, 2260, 4335, 4336, 1715, 4337, 4338, 4232, 1723, 1730,
     1730, 1730, 1730, 1730, 1730, 1730, 1730, 1752, 1752, 1752,
     1752, 1759, 1759, 1759, 1759, 1760, 1760, 1760, 1760, 1765,
     1765, 1765, 1765, 1769, 1769, 1769, 1769, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 4232, 2434, 2434, 2434, 2434,
     1700, 4341, 4342, 2435, 1781, 4343, 4347, 2494, 1781, 2436,
     1780, 1780, 1780, 1780, 1784, 1784, 1784, 1784, 1732, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1781, 2439, 2439,
     2439, 2439, 2517, 4354, 4355, 2440, 1787, 1787, 1787, 1787,
     4356, 4348, 4349, 1766, 4348, 4349, 1732, 2554, 4357, 2554,

     1732, 2449, 2449, 2449, 2449, 1812, 1812, 1812, 1812, 1820,
     1820, 1820, 1820, 4359, 4359, 4361, 2450, 1820, 1820, 1820,
     1820, 1786, 1818, 1818, 1818, 1818, 1786, 4361, 4362, 4363,
     1786, 2438, 4364, 4365, 1822, 1820, 1820, 1820, 1820, 1819,
     1883, 1883, 1883, 1883, 1885, 1885, 1885, 1885, 1788, 4366,
     4367, 1886, 4960, 4960, 4960, 4960, 3747, 4368, 3747, 4960,
     1822, 1885, 1885, 1885, 1885, 1884, 4372, 3783, 1886, 1883,
     1883, 1883, 1883, 2482, 2482, 2482, 2482, 1888, 4375, 4376,
     1889, 1883, 1883, 1883, 1883, 2486, 2486, 2486, 2486, 4379,
     4246, 4247, 2455, 4246, 1884, 4380, 2487, 4381, 1884, 2487,

     2488, 1911, 1911, 1911, 1911, 4382, 1884, 4393, 4394, 2488,
     1914, 1914, 1914, 1914, 4393, 4395, 4396, 1915, 4960, 4960,
     4960, 4960, 4408, 2719, 4411, 4960, 2719, 2489, 1917, 1917,
     1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
     4263, 1918, 4412, 4263, 3899, 1918, 4415, 4416, 4263, 1918,
     2802, 4263, 4264, 2489, 2720, 1922, 1922, 1922, 1922, 4417,
     4264, 2494, 1923, 1888, 1924, 2517, 4429, 2554, 1924, 1912,
     4960, 4960, 4960, 4960, 4430, 4248, 4249, 4960, 4248, 4960,
     2720, 1912, 2554, 4960, 1922, 1922, 1922, 1922, 4432, 4348,
     4432, 1923, 4348, 1924, 4434, 4434, 4418, 1924, 1926, 1926,

     1926, 1926, 1926, 1926, 1926, 1926, 1926, 1926, 1926, 1926,
     1930, 1930, 1930, 1930, 4435, 2499, 2499, 2499, 2499, 4436,
     4437, 1931, 2500, 1933, 1933, 1933, 1933, 3747, 2501, 1935,
     1935, 1935, 1935, 4438, 3747, 1932, 1936, 4960, 4960, 4960,
     4960, 4441, 4442, 4443, 4960, 4444, 4445, 4446, 1934, 1935,
     1935, 1935, 1935, 4393, 1928, 4465, 1936, 4466, 1928, 4000,
     4475, 4478, 1928, 1933, 1933, 1933, 1933, 2505, 2505, 2505,
     2505, 1938, 4479, 4480, 1939, 1933, 1933, 1933, 1933, 1943,
     1943, 1943, 1943, 2506, 2506, 2506, 2506, 2494, 1934, 4489,
     2517, 1944, 1934, 4495, 2507, 1945, 1945, 1945, 1945, 2554,

     1934, 1952, 1952, 1952, 1952, 4497, 1946, 2511, 2511, 2511,
     2511, 1955, 1955, 1955, 1955, 2522, 2522, 2522, 2522, 4497,
     4499, 1947, 2526, 2526, 2526, 2526, 4499, 4500, 4501, 1956,
     2530, 2530, 2530, 2530, 2534, 2534, 2534, 2534, 3747, 1993,
     4504, 4505, 1993, 1996, 1996, 1996, 1996, 2542, 2542, 2542,
     2542, 1948, 4508, 2004, 2004, 2004, 2004, 1938, 2535, 2535,
     2535, 2535, 2535, 2535, 2005, 2008, 2008, 2008, 2008, 2010,
     2010, 2010, 2010, 2010, 2010, 2010, 2010, 4509, 4382, 2006,
     2009, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2069,
     2069, 2069, 2069, 4525, 2024, 4526, 2070, 4960, 4960, 4960,

     4960, 4530, 4533, 2494, 4960, 2074, 2074, 2074, 2074, 2007,
     2074, 2074, 2074, 2074, 2517, 4546, 4349, 2075, 4548, 4349,
     2076, 2723, 2075, 4420, 2723, 2076, 2074, 2074, 2074, 2074,
     2573, 2573, 2573, 2573, 2074, 2074, 2074, 2074, 2075, 4548,
     2006, 2076, 4550, 4550, 4960, 2072, 2075, 4960, 2618, 2076,
     4551, 4960, 2280, 4960, 2574, 2574, 2574, 2574, 2080, 2080,
     2080, 2080, 4552, 4555, 4443, 2081, 4556, 4557, 4575, 2082,
     4960, 4960, 4960, 4960, 4576, 4580, 4583, 4960, 2280, 2494,
     4590, 4960, 2085, 2085, 2085, 2085, 2517, 2554, 4595, 2086,
     2575, 2575, 2575, 2575, 2088, 2088, 2088, 2088, 4595, 2085,

     2085, 2085, 2085, 4597, 4597, 2089, 2086, 4960, 4960, 4960,
     4960, 3747, 4600, 4601, 4960, 2577, 2577, 2577, 2577, 4623,
     2091, 2088, 2088, 2088, 2088, 4625, 4628, 2578, 2088, 2088,
     2088, 2088, 2089, 2097, 2097, 2097, 2097, 2494, 2517, 2089,
     4635, 2099, 2099, 2099, 2099, 4635, 4637, 2091, 2100, 4960,
     4960, 4960, 4960, 4637, 2091, 4557, 4960, 4659, 2098, 2099,
     2099, 2099, 2099, 2494, 2517, 4663, 2100, 2097, 2097, 2097,
     2097, 2584, 2584, 2584, 2584, 2102, 4663, 4665, 2103, 2097,
     2097, 2097, 2097, 4665, 2162, 2162, 2162, 2162, 2494, 2517,
     4683, 2163, 2098, 4683, 4684, 2164, 2098, 2161, 2162, 2162,

     2162, 2162, 4684, 4678, 2098, 4960, 4960, 4960, 4960, 4692,
     4960, 2616, 4960, 4960, 2494, 2517, 4960, 4960, 4960, 2169,
     2169, 2169, 2169, 4702, 2169, 2169, 2169, 2169, 3231, 3232,
     1416, 2987, 1492, 3233, 1417, 1416, 1388, 3234, 3235, 1417,
     2172, 2172, 2172, 2172, 1388, 1419, 1420, 3236, 1448, 3237,
     1419, 1420, 2174, 2174, 2174, 2174, 1448, 1400, 2984, 2175,
     1453, 2102, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147,
     2147, 2147, 2147, 2147, 2147, 2147, 2606, 2147, 2147, 2147,
     2147, 2633, 2975, 2973, 2619, 2619, 2619, 2619, 2147, 2147,
     2147, 2147, 2147, 2147, 2147, 1416, 1452, 2972, 2971, 1417,

     2172, 2172, 2172, 2172, 1452, 4960, 4960, 4960, 4960, 1401,
     1419, 1420, 4960, 1491, 1491, 1491, 1491, 1400, 2609, 2147,
     2147, 2147, 2147, 2967, 2147, 2179, 2179, 2179, 2179, 2179,
     2179, 2179, 2179, 2966, 2965, 2964, 1444, 1460, 1494, 1470,
     1444, 2201, 2201, 2201, 2201, 1460, 2963, 1470, 2202, 2962,
     2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147,
     2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2148,
     2147, 2147, 2147, 2147, 2128, 2961, 2960, 1443, 1443, 1443,
     1443, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 1444, 1472,
     2959, 2177, 2177, 2177, 2177, 1407, 2955, 1472, 1408, 2951,

     2950, 2949, 1427, 1491, 1491, 1491, 1491, 2169, 2169, 2169,
     2169, 1487, 2147, 2147, 2147, 2147, 1401, 2147, 1416, 1487,
     1492, 1628, 1417, 2187, 2187, 2187, 2187, 1435, 1494, 1628,
     1436, 2948, 2947, 1419, 1420, 2581, 2945, 2944, 1443, 1443,
     1443, 1443, 2943, 2147, 2147, 2147, 2147, 2147, 1427, 1444,
     1443, 1443, 1443, 1443, 2942, 2635, 2635, 2635, 2635, 2636,
     2941, 1444, 2637, 1427, 2940, 1491, 1491, 1491, 1491, 4960,
     4960, 4960, 4960, 2939, 2938, 1427, 4960, 2937, 2936, 2936,
     2638, 1407, 1492, 2650, 2643, 2643, 2643, 2643, 2934, 2934,
     1494, 2202, 2651, 2651, 2651, 2651, 2655, 2655, 2655, 2655,

     2282, 2282, 2282, 2282, 1542, 1451, 2557, 1543, 2258, 2258,
     2258, 2258, 1451, 1435, 2258, 2258, 2258, 2258, 1647, 2628,
     1451, 1512, 2555, 2629, 1464, 1512, 1647, 2264, 2264, 2264,
     2264, 1464, 2931, 2930, 2699, 1571, 1550, 2699, 2265, 1464,
     1550, 1571, 2640, 2929, 1471, 2636, 2654, 2655, 2655, 2654,
     2928, 1471, 1511, 2260, 2260, 2260, 2260, 2260, 2260, 1471,
     2927, 1519, 2709, 2709, 2709, 2709, 1532, 2706, 2706, 2706,
     2706, 1512, 2926, 2710, 2707, 2925, 1533, 1513, 2924, 1534,
     2702, 2702, 2702, 2702, 2923, 2922, 1550, 2703, 1473, 1550,
     1542, 1497, 1551, 1550, 1514, 1473, 2540, 2711, 2711, 2711,

     2711, 2540, 1515, 1473, 2712, 2704, 1516, 1497, 1517, 2713,
     1518, 1519, 1520, 2918, 2487, 1497, 1521, 2487, 1522, 1523,
     1524, 1525, 2917, 1526, 1557, 1527, 1528, 1529, 1530, 1531,
     2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267, 2532, 1550,
     1557, 2618, 2268, 2269, 2532, 2489, 2268, 2269, 1557, 2282,
     2282, 2282, 2282, 1542, 2528, 2271, 1543, 2528, 2524, 2271,
     1563, 2272, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 2285,
     2524, 2489, 2520, 2286, 1512, 2520, 1563, 2286, 2285, 2285,
     2285, 2285, 2903, 2287, 1563, 2285, 2285, 2285, 2285, 2286,
     2285, 2285, 2285, 2285, 2517, 2287, 2286, 2285, 2285, 2285,

     2285, 2286, 2287, 2365, 2365, 2365, 2365, 2287, 2286, 2285,
     2285, 2285, 2285, 2900, 2287, 2509, 2285, 2285, 2285, 2285,
     2286, 2285, 2285, 2285, 2285, 2509, 2287, 2286, 1569, 1569,
     1569, 1569, 2286, 2287, 1569, 1569, 1569, 1569, 2287, 1542,
     2733, 1928, 1569, 1569, 1569, 1569, 1686, 1569, 1569, 1569,
     1569, 1631, 1728, 1512, 1686, 1571, 2497, 1761, 1631, 1512,
     1728, 1571, 2734, 2494, 2751, 1761, 1631, 1512, 2752, 1571,
     2728, 2735, 1512, 1776, 1571, 2722, 2484, 2484, 2736, 2737,
     2754, 1776, 2886, 2755, 2739, 2738, 2885, 2753, 1569, 1569,
     1569, 1569, 2884, 2883, 2740, 1569, 1569, 1569, 1569, 2303,

     2303, 2303, 2303, 2371, 2371, 2371, 2371, 2882, 1839, 1569,
     1569, 1569, 1569, 1512, 2469, 1571, 2349, 2349, 2349, 2349,
     1512, 2875, 1571, 1569, 1569, 1569, 1569, 2874, 2756, 2741,
     2742, 2743, 2744, 2745, 1512, 2746, 1571, 1569, 1569, 1569,
     1569, 2747, 2748, 1624, 2749, 2750, 2873, 2872, 1512, 2871,
     1571, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 2870,
     2869, 2868, 1512, 2867, 1571, 2304, 2866, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 2865, 1512, 2864, 1571, 2618,
     1512, 2802, 1571, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 2757, 1512, 2618, 1571, 2862, 1512, 1779, 1571, 1783,

     1569, 1569, 1569, 1569, 2758, 1779, 2861, 1783, 1512, 2860,
     1571, 2859, 1512, 2857, 1571, 1789, 2854, 2759, 1569, 1569,
     1569, 1569, 2853, 1789, 2760, 1512, 1799, 1571, 1569, 1569,
     1569, 1569, 2852, 2725, 1799, 2761, 2725, 2762, 1569, 1569,
     1569, 1569, 2851, 1512, 2850, 1571, 2726, 1654, 2763, 1569,
     1569, 1569, 1569, 1512, 1654, 1571, 2849, 2425, 2848, 2764,
     2803, 2765, 1654, 1512, 2727, 1571, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1512, 2766, 1571, 2847, 1569, 1569,
     1569, 1569, 2419, 2413, 2767, 1569, 1569, 1569, 1569, 2413,
     2727, 1512, 1802, 1571, 1810, 1512, 2838, 1571, 2837, 2393,

     1802, 2768, 1810, 1512, 2769, 1571, 1569, 1569, 1569, 1569,
     1512, 2393, 1571, 2830, 2828, 2770, 2827, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 2826,
     2823, 1512, 2771, 1571, 1762, 1569, 1569, 1569, 1569, 1817,
     2822, 1762, 1512, 2772, 1571, 1837, 1512, 1817, 1571, 1762,
     1512, 2821, 1571, 1837, 2820, 2774, 2819, 2817, 2816, 2773,
     1512, 2815, 1571, 1569, 1569, 1569, 1569, 2726, 1569, 1569,
     1569, 1569, 2775, 2812, 1569, 1569, 1569, 1569, 1847, 1853,
     2811, 2776, 1569, 1569, 1569, 1569, 1847, 1853, 1512, 1855,
     1571, 1790, 2810, 1512, 2778, 1571, 2809, 1855, 1790, 1512,

     2777, 1571, 1569, 1569, 1569, 1569, 1790, 1512, 1805, 1571,
     1569, 1569, 1569, 2786, 1857, 1805, 1859, 2779, 1569, 1569,
     1569, 1569, 1857, 1805, 1859, 2780, 2808, 1512, 1861, 1571,
     2818, 2818, 2818, 2818, 2781, 1512, 1861, 1571, 2807, 1569,
     1569, 1569, 1569, 1512, 2806, 1571, 1569, 1569, 1569, 1569,
     1863, 1569, 1569, 1569, 1569, 2805, 2804, 2782, 1863, 2783,
     2801, 2800, 2234, 2784, 1512, 2731, 1571, 1569, 1569, 1569,
     1569, 1512, 2730, 1571, 2729, 2785, 1512, 2717, 1571, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 2715, 1512, 1865, 1571, 1867, 2349, 2349, 2349, 2349,

     2787, 1865, 2701, 1867, 1512, 2700, 1571, 2698, 1512, 2689,
     1571, 2697, 1512, 1813, 1571, 1569, 1569, 1569, 1569, 2790,
     1813, 2789, 2788, 1624, 1569, 1569, 1569, 1569, 1813, 1569,
     1569, 1569, 1569, 2824, 2824, 2824, 2824, 2696, 2695, 1869,
     1512, 2694, 1571, 1569, 1569, 1569, 1569, 1869, 2791, 1512,
     2693, 1571, 1848, 2794, 1512, 2692, 1571, 2687, 2825, 1848,
     2793, 2792, 1854, 1569, 1569, 1569, 1569, 1848, 1512, 1854,
     1571, 2351, 2351, 2351, 2351, 1618, 2686, 1854, 1619, 1856,
     1858, 2386, 2386, 2386, 2386, 1871, 1856, 1858, 1512, 1873,
     1571, 2795, 2387, 1871, 1856, 1858, 1614, 1873, 2685, 2796,

     2831, 2832, 2832, 2831, 2682, 2681, 1675, 2833, 2388, 2835,
     2833, 2797, 2832, 2832, 2832, 2832, 2680, 2679, 2836, 2836,
     2836, 2836, 2678, 2677, 2798, 2799, 2391, 2391, 2391, 2391,
     2391, 2391, 2396, 2397, 2398, 2396, 2398, 2397, 2398, 2398,
     2403, 2403, 2403, 2403, 2670, 1860, 1875, 2404, 4960, 4960,
     4960, 4960, 1860, 2669, 1875, 4960, 1687, 1687, 1687, 1687,
     1860, 1618, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     2668, 2665, 1877, 1688, 2664, 2434, 2434, 2434, 2434, 1688,
     1877, 1690, 2435, 1688, 2663, 2662, 2661, 1690, 2436, 2658,
     1879, 1690, 2411, 2411, 2411, 2411, 1700, 2843, 1879, 1701,

     2214, 2214, 1780, 1780, 1780, 1780, 2844, 2844, 2844, 2844,
     2648, 4960, 4960, 4960, 4960, 2647, 2405, 1696, 4960, 1781,
     2439, 2439, 2439, 2439, 4960, 2646, 1881, 2440, 2839, 4960,
     4960, 4960, 4960, 1692, 1881, 2645, 4960, 2858, 2858, 2858,
     2858, 2449, 2449, 2449, 2449, 2840, 2863, 2863, 2863, 2863,
     2482, 2482, 2482, 2482, 1888, 2888, 2450, 1889, 2490, 2644,
     1495, 2490, 1492, 2633, 2889, 2889, 2889, 2889, 2891, 2891,
     2891, 2891, 2630, 2627, 2626, 1884, 2618, 2499, 2499, 2499,
     2499, 1862, 1700, 2615, 2500, 2618, 2614, 1893, 1862, 2492,
     2501, 4960, 4960, 4960, 4960, 1893, 1862, 2612, 4960, 2892,

     2892, 2892, 2892, 1895, 4960, 2893, 2893, 2893, 2893, 2607,
     2605, 1895, 2501, 2604, 1864, 2492, 2505, 2505, 2505, 2505,
     1938, 1864, 2897, 1939, 2506, 2506, 2506, 2506, 2603, 1864,
     2895, 2898, 2898, 2898, 2898, 2507, 2905, 2602, 2601, 2600,
     1888, 1934, 2908, 2599, 2597, 2906, 2906, 2906, 2906, 2911,
     2596, 2909, 2909, 2909, 2909, 2914, 2594, 2593, 2912, 2912,
     2912, 2912, 1897, 2920, 2915, 2915, 2915, 2915, 2916, 2117,
     1897, 2916, 2921, 2921, 2921, 2921, 2573, 2573, 2573, 2573,
     2590, 2074, 2074, 2074, 2074, 2117, 1965, 2535, 2535, 2535,
     2535, 2535, 2535, 2075, 1965, 2588, 2076, 2574, 2574, 2574,

     2574, 2575, 2575, 2575, 2575, 2587, 1938, 2575, 2575, 2575,
     2575, 2577, 2577, 2577, 2577, 2946, 2946, 2946, 2946, 2577,
     2577, 2577, 2577, 2578, 2586, 2584, 2584, 2584, 2584, 2102,
     2115, 2578, 2103, 2974, 2974, 2974, 2974, 2619, 2619, 2619,
     2619, 1967, 2619, 2619, 2619, 2619, 2000, 2039, 1416, 1967,
     2098, 2113, 1417, 1416, 2000, 2039, 2105, 1417, 2979, 2979,
     2979, 2979, 1401, 1419, 1420, 2980, 2041, 1401, 1419, 1420,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 2582, 2581,
     2079, 1444, 2041, 2079, 2571, 1444, 1443, 1443, 1443, 1443,
     2041, 2643, 2643, 2643, 2643, 1427, 2214, 1444, 2202, 1427,

     2568, 2709, 2709, 2709, 2709, 2993, 2993, 2993, 2993, 2567,
     2566, 1427, 2710, 2565, 2564, 2102, 2956, 2956, 2956, 2956,
     2956, 2956, 2956, 2956, 2956, 2956, 2956, 2956, 2956, 2956,
     2956, 2956, 2956, 2956, 2956, 2956, 2818, 2818, 2818, 2818,
     2563, 2043, 2956, 2956, 2956, 2956, 2956, 2956, 2956, 2043,
     2562, 2045, 2977, 2976, 2635, 2635, 2635, 2635, 2636, 2045,
     2049, 2637, 2982, 2982, 2982, 2982, 2636, 2562, 2049, 2983,
     1866, 2560, 2073, 2956, 2956, 2956, 2956, 1866, 2956, 2638,
     2073, 2706, 2706, 2706, 2706, 1866, 1868, 2638, 2707, 4960,
     4960, 4960, 4960, 1868, 2084, 2171, 4960, 2818, 2818, 2818,

     2818, 1868, 2084, 2171, 2956, 2956, 2956, 2956, 2958, 2147,
     2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147,
     2147, 2147, 2147, 2606, 2147, 2147, 2147, 2147, 2982, 2982,
     2982, 2982, 2560, 2557, 2181, 2147, 2147, 2147, 2147, 2147,
     2147, 2147, 2181, 1544, 2636, 1491, 1491, 1491, 1491, 2555,
     2553, 1544, 2636, 2638, 1491, 1491, 1491, 1491, 2997, 2997,
     2997, 2997, 1492, 2552, 2551, 2550, 2147, 2147, 2147, 2147,
     1494, 2147, 2824, 2824, 2824, 2824, 1557, 2712, 2549, 1494,
     2548, 2546, 2713, 1512, 1557, 3047, 3047, 3047, 3047, 3054,
     3054, 3054, 3054, 3054, 3054, 2545, 2544, 2147, 2147, 2147,

     2147, 2147, 2702, 2702, 2702, 2702, 1563, 2543, 1620, 2703,
     3049, 1550, 3050, 2016, 1563, 1550, 1620, 1960, 2986, 2996,
     2997, 2997, 2996, 1519, 2540, 1511, 2538, 2704, 1532, 1992,
     3051, 3051, 3051, 3051, 2824, 2824, 2824, 2824, 1533, 2532,
     2528, 1534, 2268, 1702, 1512, 4960, 4960, 4960, 4960, 2524,
     1513, 1702, 4960, 1870, 4960, 2271, 2520, 2272, 4960, 2825,
     1870, 1550, 2711, 2711, 2711, 2711, 2047, 1514, 1870, 2712,
     4960, 1872, 2518, 1874, 2713, 1515, 1969, 1969, 1872, 1516,
     1874, 1517, 2047, 1518, 1519, 1520, 1872, 1962, 1874, 1521,
     2047, 1522, 1523, 1524, 1525, 1452, 1526, 1960, 1527, 1528,

     1529, 1530, 1531, 1876, 4960, 4960, 4960, 4960, 4960, 1959,
     1876, 1452, 4960, 2702, 2702, 2702, 2702, 4960, 1876, 1452,
     2707, 2517, 1550, 1960, 2509, 2196, 1550, 3051, 3051, 3051,
     3051, 2285, 2285, 2285, 2285, 1950, 1941, 2205, 2704, 2268,
     1878, 2196, 2286, 2285, 2285, 2285, 2285, 1878, 2287, 2196,
     2503, 2498, 2271, 2205, 2286, 1878, 2285, 2285, 2285, 2285,
     2287, 2205, 2497, 2285, 2285, 2285, 2285, 2286, 2285, 2285,
     2285, 2285, 1550, 2287, 2286, 2285, 2285, 2285, 2285, 2286,
     2287, 1569, 1569, 1569, 1569, 2287, 2286, 2285, 2285, 2285,
     2285, 2495, 2287, 1913, 2285, 2285, 2285, 2285, 2286, 2285,

     2285, 2285, 2285, 1908, 2287, 2286, 1512, 2494, 1571, 1909,
     2286, 2287, 1569, 1569, 1569, 1569, 2287, 1569, 1569, 1569,
     1569, 2484, 1890, 3062, 3070, 3159, 3159, 3159, 3159, 3063,
     1890, 1880, 1940, 3065, 3064, 2041, 3160, 1512, 1880, 1571,
     1940, 1891, 1512, 2041, 1571, 2480, 1880, 2479, 3071, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 2476, 3066, 1497,
     2469, 2467, 3072, 1569, 1569, 1569, 1569, 3068, 3067, 1569,
     1569, 1569, 1569, 2466, 1512, 1497, 1571, 2465, 1512, 2047,
     1571, 3069, 2464, 1497, 2463, 3074, 1882, 2047, 1512, 2460,
     1571, 2459, 3073, 1882, 1512, 2458, 1571, 1569, 1569, 1569,

     1569, 1882, 3076, 1569, 1569, 1569, 1569, 2433, 3075, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 2095, 1512, 2433, 1571, 2457, 1894, 2104, 1512, 2095,
     1571, 2433, 2456, 1894, 1512, 2104, 1571, 1452, 1512, 3078,
     1571, 1894, 1512, 2196, 1571, 1452, 3077, 3081, 1798, 3079,
     2448, 2196, 3080, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 2447, 2446, 3082, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 2443, 2205, 1512, 2433,
     1571, 2442, 1512, 2441, 1571, 2205, 1512, 2433, 1571, 1569,
     1569, 1569, 1569, 1512, 2432, 1571, 2595, 1512, 3084, 1571,

     1569, 1569, 1569, 1569, 2595, 3083, 3086, 3085, 2431, 1569,
     1569, 1569, 1569, 2430, 1512, 2429, 1571, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1512, 1896, 1571, 2428, 1569,
     1569, 1569, 1569, 1896, 1512, 3087, 1571, 3099, 3099, 3099,
     3099, 1896, 1512, 1767, 1571, 2595, 1512, 2732, 1571, 2427,
     1569, 1569, 1569, 1569, 1512, 2732, 1571, 1569, 1569, 1569,
     1569, 2595, 1512, 1898, 1571, 2426, 1966, 1743, 3088, 2595,
     1898, 3090, 2425, 1966, 1735, 1512, 1735, 1571, 1898, 2366,
     3089, 1966, 1512, 2419, 1571, 3161, 3162, 3162, 3161, 1837,
     2416, 1675, 3162, 3162, 3162, 3162, 3092, 1837, 3091, 3093,

     3094, 3095, 3095, 3095, 3095, 3094, 3094, 3094, 3094, 3094,
     3094, 3094, 3094, 3094, 3094, 3094, 3094, 3094, 3094, 3094,
     1569, 1569, 1569, 1569, 3100, 2393, 3096, 3102, 3097, 3094,
     3094, 3094, 3094, 2413, 3165, 3165, 3165, 3165, 3101, 1569,
     1569, 1569, 1569, 1703, 1688, 1512, 2402, 1571, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 2400, 3094, 3094, 3094,
     3094, 2393, 3094, 2385, 1512, 2384, 1571, 2383, 1569, 1569,
     1569, 1569, 2382, 1512, 2381, 1571, 2380, 1512, 2379, 1571,
     1569, 1569, 1569, 1569, 2858, 2858, 2858, 2858, 3094, 3094,
     3094, 3094, 3098, 1512, 2378, 1571, 1967, 2377, 2639, 3104,

     1569, 1569, 1569, 1569, 1967, 1512, 2639, 1571, 2732, 3103,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 2376, 3105, 2732, 1512, 4321, 1571, 2375, 1968,
     1968, 3106, 2732, 2374, 4321, 1512, 1968, 1571, 2373, 1512,
     2372, 1571, 2364, 1512, 1968, 1571, 1569, 1569, 1569, 1569,
     3107, 1569, 1569, 1569, 1569, 2361, 3108, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 2360, 1569, 1569, 1569, 1569,
     2003, 1512, 2042, 1571, 1668, 3109, 1512, 2003, 1571, 2042,
     3112, 1667, 1512, 2357, 1571, 2003, 1512, 2042, 1571, 3110,
     3111, 1512, 2356, 1571, 1569, 1569, 1569, 1569, 1569, 1569,

     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1837, 1569, 1569, 1569, 1569, 1512,
     3115, 1571, 3113, 1512, 3114, 1571, 1648, 1512, 3117, 1571,
     1837, 1512, 1621, 1571, 2348, 1512, 2347, 1571, 1837, 1575,
     1512, 3116, 1571, 2296, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     3118, 2284, 2283, 2266, 3119, 1569, 1569, 1569, 1569, 1512,
     3121, 1571, 3120, 1512, 2262, 1571, 2261, 1512, 2257, 1571,
     3123, 1512, 2044, 1571, 2413, 3124, 3122, 2255, 2251, 2044,
     1512, 2250, 1571, 3172, 3172, 3172, 3172, 2044, 1569, 1569,

     1569, 1569, 1569, 1569, 1569, 1569, 3125, 1569, 1569, 1569,
     1569, 2246, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     3128, 3126, 3127, 1512, 2243, 1571, 2239, 1512, 2238, 1571,
     2237, 2233, 1512, 2048, 1571, 2230, 2229, 1512, 3129, 1571,
     2048, 1512, 1575, 1571, 1569, 1569, 1569, 1569, 2048, 1687,
     1687, 1687, 1687, 2228, 2223, 1687, 1687, 1687, 1687, 1780,
     1780, 1780, 1780, 3130, 2214, 2212, 1688, 2211, 2208, 1512,
     1495, 1571, 1688, 3131, 1690, 3133, 1781, 3132, 3134, 2484,
     1690, 2863, 2863, 2863, 2863, 4960, 1496, 2206, 3203, 3203,
     3203, 3203, 2891, 2891, 2891, 2891, 2204, 2198, 3135, 2892,

     2892, 2892, 2892, 2893, 2893, 2893, 2893, 2893, 2893, 2893,
     2893, 2509, 2501, 2946, 2946, 2946, 2946, 3169, 1459, 2195,
     3208, 3208, 3208, 3208, 2520, 3136, 2194, 2193, 2895, 3168,
     2524, 2188, 2895, 3212, 3212, 3212, 3212, 2528, 1441, 3214,
     3214, 3214, 3214, 2532, 1441, 1414, 3216, 3216, 3216, 3216,
     2540, 1396, 3218, 3218, 3218, 3218, 2159, 2158, 2155, 3222,
     3222, 3222, 3222, 2974, 2974, 2974, 2974, 2982, 2982, 2982,
     2982, 3205, 2956, 2956, 2956, 2956, 2956, 2956, 2956, 2956,
     2956, 2956, 2956, 2956, 2956, 2956, 2956, 2956, 2956, 2956,
     2956, 2956, 2638, 3429, 3429, 3429, 3429, 2152, 2956, 2956,

     2956, 2956, 2956, 2956, 2956, 3269, 3270, 2143, 2142, 1967,
     3271, 2117, 2117, 2050, 3272, 3273, 2979, 2979, 2979, 2979,
     2050, 2117, 2117, 2980, 3274, 1967, 3275, 2115, 2050, 2956,
     2956, 2956, 2956, 1967, 2956, 4960, 4960, 4960, 4960, 2114,
     2113, 2105, 4960, 3301, 3301, 3301, 3301, 3430, 3430, 3430,
     3430, 3430, 3430, 3430, 3430, 3441, 3441, 3441, 3441, 2096,
     2956, 2956, 2956, 2956, 2958, 2956, 2956, 2956, 2956, 2956,
     2956, 2956, 2956, 2956, 2956, 2956, 2956, 2956, 2956, 2956,
     2956, 2956, 2956, 2956, 2956, 2079, 2068, 1443, 1443, 1443,
     1443, 2956, 2956, 2956, 2956, 2956, 2956, 2956, 1444, 3446,

     3446, 3446, 3446, 1443, 1443, 1443, 1443, 2982, 2982, 2982,
     2982, 2067, 1427, 2066, 1444, 2065, 3287, 3287, 3287, 3287,
     2064, 2063, 2956, 2956, 2956, 2956, 2062, 2956, 1427, 2061,
     3100, 1451, 2638, 3279, 3279, 3279, 3279, 2636, 1451, 2058,
     2983, 1512, 1491, 1491, 1491, 1491, 1451, 2053, 2046, 3276,
     3905, 2040, 2019, 2956, 2956, 2956, 2956, 2958, 2638, 1492,
     1960, 2016, 3334, 3334, 3334, 3334, 3905, 1494, 3277, 2703,
     3047, 3047, 3047, 3047, 3905, 3047, 3047, 3047, 3047, 2002,
     1999, 1519, 3051, 3051, 3051, 3051, 1532, 2704, 1998, 3051,
     3051, 3051, 3051, 1997, 2268, 3049, 1533, 1464, 1992, 1534,

     3049, 2268, 3050, 1991, 1464, 2712, 1988, 2271, 3280, 1985,
     2713, 1980, 1464, 1974, 2271, 1970, 2272, 3054, 3054, 3054,
     3054, 3054, 3054, 2636, 3286, 3287, 3287, 3286, 2712, 1969,
     1511, 1964, 1471, 2713, 1960, 2285, 2285, 2285, 2285, 1471,
     3054, 3054, 3054, 3054, 3054, 3054, 2286, 1471, 1962, 1512,
     3910, 1960, 2287, 1959, 1954, 1513, 2285, 2285, 2285, 2285,
     2285, 2285, 2285, 2285, 1950, 1941, 3910, 2286, 1473, 1929,
     3701, 2286, 1514, 2287, 3910, 1473, 3701, 2287, 2207, 1913,
     1515, 1909, 1908, 1473, 1516, 2207, 1517, 2207, 1518, 1519,
     1520, 1907, 3701, 2207, 1521, 1906, 1522, 1523, 1524, 1525,

     3701, 1526, 1905, 1527, 1528, 1529, 1530, 1531, 2285, 2285,
     2285, 2285, 2285, 2285, 2285, 2285, 1904, 1901, 1900, 2286,
     2281, 1891, 1852, 2286, 1851, 2287, 3341, 2281, 1850, 2287,
     2285, 2285, 2285, 2285, 1849, 2281, 3340, 2285, 2285, 2285,
     2285, 2286, 2285, 2285, 2285, 2285, 1835, 2287, 2286, 2285,
     2285, 2285, 2285, 2286, 2287, 1569, 1569, 1569, 1569, 2287,
     2286, 3440, 3441, 3441, 3440, 1834, 2287, 1675, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 4960, 4960, 4960, 4960,
     1512, 1831, 1571, 1569, 1569, 1569, 1569, 3342, 3343, 3350,
     1830, 1829, 3344, 1512, 1631, 1571, 1828, 1512, 1827, 1571,

     3349, 1631, 1807, 3345, 1569, 1569, 1569, 1569, 1512, 1631,
     1571, 1798, 3347, 3346, 1796, 3352, 1793, 1792, 1791, 3348,
     1569, 1569, 1569, 1569, 3351, 1569, 1569, 1569, 1569, 1512,
     1770, 1571, 1569, 1569, 1569, 1569, 1767, 1764, 1763, 3353,
     3159, 3159, 3159, 3159, 1743, 1512, 3447, 1571, 1735, 1724,
     1512, 3160, 1571, 3435, 3435, 3435, 3435, 1512, 1713, 1571,
     1569, 1569, 1569, 1569, 3436, 1712, 3356, 1569, 1569, 1569,
     1569, 3354, 1709, 3355, 1569, 1569, 1569, 1569, 3357, 1569,
     1569, 1569, 1569, 1703, 1683, 1512, 1682, 1571, 3530, 3530,
     3530, 3530, 1512, 1679, 1571, 1671, 1668, 1667, 3358, 1512,

     1665, 1571, 1662, 1661, 1512, 3359, 1571, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1660,
     3360, 1657, 3361, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1656, 1512, 3437, 1571, 1655, 1512, 1648, 1571, 3362,
     1512, 1621, 1571, 1575, 1569, 1569, 1569, 1569, 1512, 1561,
     1571, 3364, 1512, 1558, 1571, 3363, 1569, 1569, 1569, 1569,
     3369, 3369, 3369, 3369, 1569, 1569, 1569, 1569, 1556, 1512,
     3365, 1571, 3366, 3372, 3372, 3372, 3372, 1569, 1569, 1569,
     1569, 1512, 1504, 1571, 1502, 1512, 1654, 1571, 1499, 1512,
     1496, 1571, 1488, 1654, 1569, 1569, 1569, 1569, 1512, 1465,

     1571, 1654, 1512, 1459, 1571, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 3099, 3099, 3099, 3099, 3367, 3368, 1512,
     1442, 1571, 2410, 3378, 3378, 3378, 3378, 1441, 1414, 2410,
     1512, 4960, 1571, 4960, 1512, 3373, 1571, 2410, 1512, 4960,
     1571, 4960, 4960, 3374, 3371, 4960, 4960, 3370, 1512, 4960,
     1571, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960, 1762, 3375,
     1569, 1569, 1569, 1569, 1790, 1762, 1512, 3376, 1571, 4960,
     1512, 1790, 1571, 1762, 1512, 4960, 1571, 4960, 1512, 1790,
     1571, 4960, 4960, 3377, 4960, 1512, 4960, 1571, 1569, 1569,

     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     4960, 1569, 1569, 1569, 1569, 3549, 3549, 3549, 3549, 3380,
     4960, 4960, 4960, 1512, 4960, 1571, 4960, 1512, 3382, 1571,
     1805, 1512, 3379, 1571, 3381, 4960, 1512, 1805, 1571, 4960,
     3383, 1569, 1569, 1569, 1569, 1805, 1569, 1569, 1569, 1569,
     1687, 1687, 1687, 1687, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 4960, 3384, 4960, 4960, 1512, 1688, 1571, 1813,
     4960, 1512, 3386, 1571, 4960, 1690, 1813, 3385, 3387, 1512,
     4960, 1571, 4960, 1512, 1813, 1571, 3388, 1569, 1569, 1569,
     1569, 3545, 3545, 3545, 3545, 1569, 1569, 1569, 1569, 4960,

     4960, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960,
     4960, 4960, 1512, 4960, 1571, 4960, 1848, 4960, 3389, 3391,
     1512, 4960, 1571, 1848, 3392, 3390, 1512, 3443, 1571, 4960,
     1512, 1848, 1571, 4960, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960, 1512,
     3393, 1571, 4960, 1512, 4960, 1571, 4960, 1512, 4960, 1571,
     4960, 1512, 3394, 1571, 4960, 1512, 4960, 1571, 3370, 1512,
     4960, 1571, 3395, 4960, 3396, 4960, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 2499, 2499, 2499, 2499, 3397, 4960,

     4960, 2500, 3398, 1569, 1569, 1569, 1569, 2501, 4960, 4960,
     3403, 1512, 4960, 1571, 4960, 1512, 4960, 1571, 3399, 4960,
     3405, 3402, 4960, 3404, 1569, 1569, 1569, 1569, 1512, 4960,
     1571, 1569, 1569, 1569, 1569, 3411, 3411, 3411, 3411, 3413,
     3413, 3413, 3413, 1569, 1569, 1569, 3414, 4960, 4960, 1512,
     3406, 1571, 1569, 1569, 1569, 1569, 1512, 4960, 1571, 4960,
     1512, 4960, 1571, 4960, 1512, 3408, 1571, 4960, 1512, 4960,
     1571, 3407, 1569, 1569, 1569, 1569, 4960, 1512, 4960, 1571,
     4960, 1687, 1687, 1687, 1687, 1443, 1443, 1443, 1443, 4960,
     3409, 4960, 4960, 3410, 4960, 4960, 1444, 1512, 1688, 1571,

     3523, 3523, 3523, 3523, 4960, 4960, 1690, 4960, 4960, 4960,
     1427, 1444, 4960, 4960, 3416, 4960, 3279, 3279, 3279, 3279,
     2636, 4960, 3412, 2983, 3415, 3524, 1491, 1491, 1491, 1491,
     4960, 3533, 3533, 3533, 3533, 3547, 3547, 3547, 3547, 4960,
     4960, 2638, 3417, 1492, 3575, 3575, 3575, 3575, 4960, 3522,
     4960, 1494, 3429, 3429, 3429, 3429, 1512, 3301, 3301, 3301,
     3301, 4960, 3444, 3334, 3334, 3334, 3334, 4960, 4960, 4960,
     2703, 4960, 4960, 3047, 3047, 3047, 3047, 2702, 2702, 2702,
     2702, 4960, 4960, 4960, 2703, 4960, 1550, 3525, 1854, 4960,
     1550, 3429, 3429, 3429, 3429, 1854, 1519, 3548, 3049, 4960,

     3526, 1532, 2704, 1854, 4960, 1856, 2636, 3532, 3533, 3533,
     3532, 1533, 1856, 1511, 1534, 1858, 2285, 2285, 2285, 2285,
     1856, 3376, 1858, 2285, 2285, 2285, 2285, 2286, 4960, 4960,
     1858, 3412, 1512, 2287, 2286, 4960, 1550, 3377, 1513, 4960,
     2287, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 4960,
     1860, 4960, 2286, 1862, 4960, 1514, 2286, 1860, 2287, 1864,
     1862, 4960, 2287, 1515, 4960, 1860, 1864, 1516, 1862, 1517,
     4960, 1518, 1519, 1520, 1864, 4960, 1866, 1521, 4960, 1522,
     1523, 1524, 1525, 1866, 1526, 4960, 1527, 1528, 1529, 1530,
     1531, 1866, 2285, 2285, 2285, 2285, 4960, 3583, 4960, 2285,

     2285, 2285, 2285, 2286, 2285, 2285, 2285, 2285, 3584, 2287,
     2286, 2285, 2285, 2285, 2285, 2286, 2287, 4960, 4960, 4960,
     3585, 2287, 2286, 2285, 2285, 2285, 2285, 4960, 2287, 1569,
     1569, 1569, 1569, 4960, 2286, 1569, 1569, 1569, 1569, 4960,
     2287, 4960, 1569, 1569, 1569, 1569, 1868, 1569, 1569, 1569,
     1569, 1870, 4960, 1868, 1512, 4960, 1571, 4960, 1870, 4960,
     1512, 1868, 1571, 3587, 4960, 4960, 1870, 1512, 3588, 1571,
     4960, 4960, 1512, 3586, 1571, 3589, 4960, 4960, 3592, 3591,
     1569, 1569, 1569, 1569, 4960, 3593, 3593, 1569, 1569, 1569,
     1569, 4960, 1569, 1569, 1569, 1569, 4960, 1569, 1569, 1569,

     1569, 4960, 3590, 4960, 4960, 1512, 1872, 1571, 3430, 3430,
     3430, 3430, 1512, 1872, 1571, 4960, 4960, 1512, 3594, 1571,
     4960, 1872, 1512, 3595, 1571, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 3597, 1569, 1569, 1569, 1569, 3596, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960, 1874, 4960,
     1512, 4960, 1571, 4960, 1512, 1874, 1571, 4960, 1876, 1512,
     4960, 1571, 4960, 1874, 1512, 1876, 1571, 4960, 1512, 3599,
     1571, 4960, 3598, 1876, 4960, 3602, 4960, 4960, 4960, 3600,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960, 4960,
     3601, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1878,

     4960, 1569, 1569, 1569, 1569, 1512, 1878, 1571, 1880, 1512,
     4960, 1571, 1882, 3603, 1878, 1880, 1512, 2481, 1571, 1882,
     1512, 4960, 1571, 1880, 2481, 3604, 1512, 1882, 1571, 4960,
     4960, 3605, 2481, 3606, 3593, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 3369, 3369, 3369, 3369, 1569, 1569, 1569,
     1569, 3372, 3372, 3372, 3372, 1569, 1569, 1569, 1569, 4960,
     1512, 4960, 1571, 4960, 1512, 4960, 1571, 4960, 1512, 4960,
     1571, 4960, 1512, 4960, 1571, 4960, 1512, 4960, 1571, 4960,
     1512, 4960, 1571, 3613, 3613, 3613, 3613, 1569, 1569, 1569,
     1569, 4960, 4960, 4960, 3614, 3378, 3378, 3378, 3378, 1569,

     1569, 1569, 1569, 3608, 1894, 3607, 1896, 1515, 1512, 4960,
     1571, 1894, 1512, 1896, 1571, 3610, 4960, 2304, 4960, 1894,
     1512, 1896, 1571, 4960, 1512, 4960, 1571, 3609, 4960, 4960,
     3612, 3611, 4960, 1530, 1569, 1569, 1569, 1569, 3620, 3620,
     3620, 3620, 4960, 3621, 4960, 3622, 3622, 3622, 3622, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960, 4960, 1512,
     1898, 1571, 4960, 1512, 2504, 1571, 4960, 1898, 3615, 3618,
     1512, 2504, 1571, 4960, 1512, 1898, 1571, 4960, 1512, 2504,
     1571, 1569, 1569, 1569, 1569, 3626, 3626, 3626, 3626, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 3629, 3629, 3629,

     3629, 4419, 1966, 4960, 3619, 4960, 1512, 4419, 1571, 1966,
     1512, 4960, 1571, 3623, 1512, 4960, 1571, 1966, 1512, 3624,
     1571, 4960, 3630, 4419, 1571, 1569, 1569, 1569, 1569, 4960,
     4960, 4419, 1569, 1569, 1569, 1569, 3633, 3633, 3633, 3633,
     1569, 1569, 1569, 1569, 4960, 1569, 1569, 1569, 1569, 2003,
     1512, 3627, 1571, 2042, 3625, 3628, 2003, 1512, 4960, 1571,
     2042, 1512, 4960, 1571, 2003, 1512, 4960, 1571, 2042, 4960,
     1512, 4960, 1571, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 4960, 4960, 1569, 1569, 1569, 1569, 4960, 3639, 3639,
     3639, 3639, 1569, 1569, 1569, 1569, 4960, 4960, 1512, 4960,

     1571, 4960, 1512, 4960, 1571, 4960, 3634, 3635, 1512, 4960,
     1571, 3631, 3632, 3640, 4960, 1571, 4960, 1512, 4960, 1571,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 3641, 1968, 1968, 3636,
     3650, 3650, 3650, 3650, 1968, 1512, 4960, 1571, 4960, 1512,
     4960, 1571, 1968, 1512, 4960, 1571, 4960, 1512, 3637, 1571,
     4960, 3643, 4960, 4960, 3638, 1512, 4960, 1571, 3642, 3651,
     3651, 3651, 3651, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 3673, 3673, 3673, 3673, 4960, 3646, 4960, 2044, 4960,
     3647, 4960, 3674, 4960, 1512, 2044, 1571, 4960, 1512, 4960,

     1571, 4960, 1512, 2044, 1571, 4960, 4960, 4960, 3648, 1569,
     1569, 1569, 1569, 3649, 3411, 3411, 3411, 3411, 3413, 3413,
     3413, 3413, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1512, 2048, 1571, 4960, 4960, 1512,
     4960, 1571, 2048, 1512, 3654, 1571, 4960, 1512, 4960, 1571,
     2048, 1512, 4421, 1571, 3653, 1512, 3652, 1571, 4421, 4960,
     1569, 1569, 1569, 1569, 3435, 3435, 3435, 3435, 3675, 3675,
     3675, 3675, 4960, 4960, 4421, 3436, 4960, 3435, 3435, 3435,
     3435, 4960, 4421, 3655, 4960, 1512, 3656, 1571, 3436, 3676,
     3676, 3676, 3676, 3679, 3680, 3680, 3679, 4960, 4960, 1675,

     4960, 4960, 3657, 3659, 3680, 3680, 3680, 3680, 3755, 3755,
     3755, 3755, 3658, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1443, 1443, 1443, 1443, 3523, 3523, 3523, 3523, 4960,
     1688, 4960, 1444, 3660, 1688, 4960, 1444, 4960, 1690, 4960,
     4960, 4960, 1690, 4960, 3666, 4960, 1427, 4960, 4960, 4960,
     3524, 1491, 1491, 1491, 1491, 3530, 3530, 3530, 3530, 3757,
     3757, 3757, 3757, 3758, 3759, 3759, 3758, 4960, 1492, 3759,
     3759, 3759, 3759, 4960, 4960, 3682, 1494, 3545, 3545, 3545,
     3545, 3547, 3547, 3547, 3547, 3549, 3549, 3549, 3549, 3775,
     3775, 3775, 3775, 3683, 1512, 3777, 3777, 3777, 3777, 4960,

     4960, 4960, 3277, 3780, 3780, 3780, 3780, 3784, 3784, 3784,
     3784, 4960, 3525, 3798, 3798, 3798, 3798, 3753, 3790, 3790,
     3790, 3790, 3799, 3799, 3799, 3799, 2556, 4960, 3781, 3575,
     3575, 3575, 3575, 2556, 1519, 2050, 4960, 1515, 4960, 1532,
     2556, 4960, 2050, 3791, 4960, 3610, 4960, 2304, 2556, 1533,
     2050, 4960, 1534, 2285, 2285, 2285, 2285, 3835, 3835, 3835,
     3835, 3611, 3836, 1530, 2286, 4960, 3792, 3836, 4960, 4960,
     2287, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 4960,
     4960, 4960, 2286, 4960, 2580, 2580, 2286, 4960, 2287, 4960,
     4960, 2580, 2287, 2285, 2285, 2285, 2285, 4960, 3793, 2580,

     2285, 2285, 2285, 2285, 2286, 3813, 3813, 3813, 3813, 3652,
     2287, 2286, 2285, 2285, 2285, 2285, 2286, 2287, 4960, 3807,
     4960, 2583, 2287, 2286, 2285, 2285, 2285, 2285, 2583, 2287,
     4960, 4960, 4960, 3808, 4960, 2286, 2583, 3809, 4960, 4960,
     4960, 2287, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 4960, 1569, 1569, 1569, 1569, 3810,
     1569, 1569, 1569, 1569, 4960, 4960, 4960, 1512, 4960, 1571,
     4960, 1512, 4960, 1571, 4960, 1512, 4960, 1571, 3816, 4960,
     1512, 3811, 1571, 4960, 4960, 1512, 4960, 1571, 3812, 4960,
     3814, 3817, 3815, 1569, 1569, 1569, 1569, 1569, 1569, 1569,

     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 3818,
     2617, 1569, 1569, 1569, 1569, 4960, 4960, 2617, 1512, 4960,
     1571, 4960, 1512, 4960, 1571, 2617, 1512, 4960, 1571, 4960,
     1512, 3820, 1571, 4960, 4960, 3819, 1512, 3821, 1571, 1569,
     1569, 1569, 1569, 3823, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 4960, 4960, 4960, 3822, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1512, 2621, 1571, 2281, 4960, 1512,
     4960, 1571, 2621, 1512, 2281, 1571, 1569, 1569, 1569, 1569,
     2621, 1512, 2281, 1571, 4960, 1512, 4960, 1571, 4960, 4960,
     4960, 3826, 4960, 3825, 4960, 1569, 1569, 1569, 1569, 3824,

     4960, 1512, 4960, 1571, 4960, 4960, 4960, 3827, 4960, 3828,
     1569, 1569, 1569, 1569, 3832, 3832, 3832, 3832, 4960, 3829,
     1512, 4960, 1571, 1569, 1569, 1569, 1569, 3613, 3613, 3613,
     3613, 1569, 1569, 1569, 1569, 1512, 4960, 1571, 3614, 1512,
     2207, 1571, 1569, 1569, 1569, 1569, 4960, 2207, 1512, 2207,
     1571, 4960, 1512, 4960, 1571, 2207, 1512, 4960, 1571, 1569,
     1569, 1569, 1569, 3620, 3620, 3620, 3620, 1512, 3621, 1571,
     4960, 3622, 3622, 3622, 3622, 3830, 3846, 3846, 3846, 3846,
     3626, 3626, 3626, 3626, 1512, 4960, 1571, 4960, 1512, 4960,
     1571, 3831, 1569, 1569, 1569, 1569, 1512, 3837, 1571, 4960,

     4960, 1512, 2558, 3847, 3834, 1512, 4960, 1571, 4960, 2558,
     4960, 1569, 1569, 1569, 1569, 4960, 2558, 1512, 3840, 1571,
     1569, 1569, 1569, 1569, 2558, 3629, 3629, 3629, 3629, 3882,
     3882, 3882, 3882, 4960, 4960, 3843, 1512, 4960, 1571, 4960,
     3841, 3675, 3675, 3675, 3675, 1512, 4960, 1571, 4960, 4960,
     3630, 3844, 1571, 3845, 3094, 3095, 3095, 3095, 3095, 3094,
     3094, 3094, 3094, 3094, 3094, 3094, 3094, 3094, 3094, 3094,
     3094, 3094, 3094, 3094, 4960, 3850, 4960, 4960, 3849, 4960,
     3096, 4960, 3097, 3094, 3094, 3094, 3094, 3676, 3676, 3676,
     3676, 4960, 4960, 3851, 3852, 3852, 3852, 3852, 3853, 3853,

     3853, 3853, 3854, 3854, 3854, 3854, 3633, 3633, 3633, 3633,
     4960, 3094, 3094, 3094, 3094, 3848, 3094, 2632, 4960, 2223,
     4960, 4960, 2632, 1512, 2632, 1571, 4960, 3640, 4960, 1571,
     4960, 1512, 2632, 1571, 3855, 3855, 3855, 3855, 1569, 1569,
     1569, 1569, 3094, 3094, 3094, 3094, 3098, 3857, 3857, 3857,
     3857, 1569, 1569, 1569, 1569, 3639, 3639, 3639, 3639, 1512,
     4960, 1571, 2642, 1512, 2642, 1571, 1569, 1569, 1569, 1569,
     4960, 2642, 3858, 4960, 1571, 4960, 1512, 4960, 1571, 2642,
     3640, 4960, 1571, 3864, 3864, 3864, 3864, 1569, 1569, 1569,
     1569, 1512, 4960, 1571, 1654, 3859, 4960, 1569, 1569, 1569,

     1569, 1654, 3856, 3792, 3871, 3871, 3871, 3871, 2223, 1654,
     4960, 4960, 1512, 2410, 1571, 1569, 1569, 1569, 1569, 1762,
     2410, 3861, 1512, 2481, 1571, 4960, 1762, 3860, 2410, 1512,
     2481, 1571, 3863, 4960, 1762, 3793, 4960, 3862, 2481, 4960,
     1512, 4960, 1571, 3887, 3887, 3887, 3887, 3865, 3872, 3872,
     3872, 3872, 1569, 1569, 1569, 1569, 4960, 3650, 3650, 3650,
     3650, 3651, 3651, 3651, 3651, 1569, 1569, 1569, 1569, 4960,
     3866, 4960, 4960, 3873, 4960, 1571, 2504, 1512, 4960, 1571,
     4960, 3867, 1512, 2504, 1571, 4960, 1512, 4960, 1571, 4960,
     1512, 2504, 1571, 3875, 3875, 3875, 3875, 1569, 1569, 1569,

     1569, 4960, 1569, 1569, 1569, 1569, 4960, 3880, 3880, 3880,
     3880, 1569, 1569, 1569, 1569, 4960, 4960, 4960, 1512, 4960,
     1571, 4960, 1512, 4960, 1571, 4960, 4960, 1512, 3874, 1571,
     4960, 3623, 1512, 4960, 1571, 4960, 1512, 4960, 1571, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 4960, 4960, 4960,
     3674, 4960, 4960, 4960, 3674, 3675, 3675, 3675, 3675, 3676,
     3676, 3676, 3676, 3876, 3893, 3894, 3894, 3893, 4960, 4960,
     1675, 3894, 3894, 3894, 3894, 4960, 4960, 3881, 4960, 3879,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 4960, 1491,
     1491, 1491, 1491, 3956, 3956, 3956, 3956, 1688, 4960, 4960,

     4960, 1688, 4960, 4960, 4960, 1690, 1492, 4960, 4960, 1690,
     3755, 3755, 3755, 3755, 1494, 3757, 3757, 3757, 3757, 3958,
     3959, 3959, 3958, 3959, 3959, 3959, 3959, 3966, 3966, 3966,
     3966, 3971, 3971, 3971, 3971, 3775, 3775, 3775, 3775, 3777,
     3777, 3777, 3777, 4960, 3896, 4960, 4960, 4960, 1512, 3780,
     3780, 3780, 3780, 3852, 3852, 3852, 3852, 3978, 3978, 3978,
     3978, 4960, 4960, 3897, 3955, 3979, 3979, 3979, 3979, 3784,
     3784, 3784, 3784, 4960, 3781, 3980, 3980, 3980, 3980, 3982,
     3982, 3982, 3982, 3790, 3790, 3790, 3790, 4960, 1519, 4960,
     3791, 4960, 4960, 1532, 3864, 3864, 3864, 3864, 3992, 3992,

     3992, 3992, 4960, 1533, 3983, 4960, 1534, 4960, 3791, 3993,
     3993, 3993, 3993, 3798, 3798, 3798, 3798, 3799, 3799, 3799,
     3799, 3996, 3996, 3996, 3996, 4960, 4960, 3984, 4960, 4960,
     4960, 3792, 4960, 4960, 3994, 3999, 3999, 3999, 3999, 2285,
     2285, 2285, 2285, 2285, 2285, 2285, 2285, 4960, 4960, 4960,
     2286, 4960, 4960, 4960, 2286, 4960, 2287, 4960, 4960, 3985,
     2287, 4960, 4960, 3793, 2285, 2285, 2285, 2285, 4005, 4005,
     4005, 4005, 4960, 4960, 4960, 2286, 4960, 4960, 4960, 2286,
     4960, 2287, 4960, 4960, 4960, 2287, 2285, 2285, 2285, 2285,
     4960, 2285, 2285, 2285, 2285, 4960, 4960, 2286, 3813, 3813,

     3813, 3813, 2286, 2287, 4960, 4960, 4960, 4003, 2287, 2286,
     2285, 2285, 2285, 2285, 4002, 1569, 1569, 1569, 1569, 4960,
     4960, 2286, 1569, 1569, 1569, 1569, 4960, 2287, 4960, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 4004, 4960, 4960,
     1512, 4960, 1571, 3835, 3835, 3835, 3835, 1512, 3836, 1571,
     4960, 4960, 4006, 3836, 1512, 4009, 1571, 4960, 1512, 4960,
     1571, 4960, 4960, 4960, 4007, 1569, 1569, 1569, 1569, 4960,
     4011, 4010, 4960, 4960, 4960, 4008, 1569, 1569, 1569, 1569,
     3593, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960,
     1512, 4960, 1571, 1569, 1569, 1569, 1569, 4012, 4960, 4960,

     4960, 1512, 2583, 1571, 2580, 2580, 1512, 4960, 1571, 2583,
     1512, 2580, 1571, 1569, 1569, 1569, 1569, 2583, 1512, 2580,
     1571, 1569, 1569, 1569, 1569, 4960, 4960, 4013, 4960, 4020,
     4014, 4960, 1569, 1569, 1569, 1569, 4015, 4960, 1512, 4960,
     1571, 4017, 4018, 4960, 4960, 4960, 1512, 4960, 1571, 1569,
     1569, 1569, 1569, 4960, 4960, 4960, 4016, 1512, 2617, 1571,
     1569, 1569, 1569, 1569, 4960, 2617, 4960, 4019, 4021, 1569,
     1569, 1569, 1569, 2617, 1512, 4960, 1571, 1569, 1569, 1569,
     1569, 4024, 4024, 4024, 4024, 1512, 2621, 1571, 3832, 3832,
     3832, 3832, 4960, 2621, 1512, 4960, 1571, 1569, 1569, 1569,

     1569, 2621, 1512, 4960, 1571, 2632, 1512, 2556, 1571, 4960,
     2632, 4022, 2632, 1512, 2556, 1571, 4960, 4960, 4960, 3648,
     2632, 2556, 1512, 4960, 1571, 1569, 1569, 1569, 1569, 2556,
     1569, 1569, 1569, 1569, 4030, 4030, 4030, 4030, 3846, 3846,
     3846, 3846, 1569, 1569, 1569, 1569, 4023, 2642, 4960, 2642,
     1512, 1654, 1571, 1762, 4960, 1512, 2642, 1571, 1654, 1512,
     1762, 1571, 4960, 1512, 2642, 3847, 1654, 1512, 1762, 1571,
     4038, 4038, 4038, 4038, 4960, 4960, 4960, 4025, 4960, 4960,
     4960, 1569, 1569, 1569, 1569, 4040, 4040, 4040, 4040, 3852,
     3852, 3852, 3852, 4960, 4960, 1512, 3278, 1571, 3853, 3853,

     3853, 3853, 1654, 3278, 4026, 4029, 1512, 4960, 1571, 1654,
     4041, 3278, 1571, 3854, 3854, 3854, 3854, 1654, 4037, 3855,
     3855, 3855, 3855, 1512, 4960, 1571, 1569, 1569, 1569, 1569,
     3857, 3857, 3857, 3857, 4043, 4043, 4043, 4043, 3640, 4960,
     1571, 3278, 4960, 1654, 1512, 4960, 1571, 4039, 3278, 4960,
     1654, 1512, 4960, 1571, 4960, 3858, 3278, 1571, 1654, 2223,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 4047, 4047, 4047, 4047, 2558, 4960, 3984, 1569,
     1569, 1569, 1569, 2558, 4960, 1512, 4960, 1571, 4960, 1512,
     2558, 1571, 4042, 1512, 4960, 1571, 4960, 1512, 2558, 1571,

     3864, 3864, 3864, 3864, 1512, 4960, 1571, 4960, 4960, 4960,
     3985, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960,
     4044, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 3871,
     3871, 3871, 3871, 4960, 4046, 4960, 1512, 4045, 1571, 4960,
     1512, 4960, 1571, 4960, 4048, 4960, 1512, 4960, 1571, 4960,
     1512, 4960, 1571, 4960, 1512, 4960, 1571, 3872, 3872, 3872,
     3872, 4049, 4055, 4055, 4055, 4055, 4960, 1569, 1569, 1569,
     1569, 3875, 3875, 3875, 3875, 4059, 4059, 4059, 4059, 4960,
     4960, 4960, 3873, 4960, 1571, 4960, 4051, 2223, 4960, 4960,
     4960, 4050, 1512, 4960, 1571, 4960, 1512, 4960, 1571, 4960,

     1512, 4054, 1571, 1569, 1569, 1569, 1569, 3880, 3880, 3880,
     3880, 3372, 3372, 3372, 3372, 3882, 3882, 3882, 3882, 4067,
     4067, 4067, 4067, 3887, 3887, 3887, 3887, 1515, 1512, 4960,
     1571, 4960, 1512, 4960, 1571, 4057, 1512, 2304, 1571, 4960,
     4960, 4960, 4056, 4068, 4068, 4068, 4068, 4069, 4069, 4069,
     4069, 3611, 4960, 1530, 4058, 4960, 4960, 4960, 4070, 4071,
     4071, 4071, 4071, 4072, 4072, 4072, 4072, 4960, 4960, 4062,
     4071, 4071, 4071, 4071, 4073, 4074, 4074, 4073, 1762, 3913,
     1675, 4074, 4074, 4074, 4074, 1762, 3913, 4960, 4063, 1687,
     1687, 1687, 1687, 1762, 3913, 4092, 4092, 4092, 4092, 4108,

     4108, 4108, 4108, 4960, 4960, 4960, 1688, 1491, 1491, 1491,
     1491, 4960, 4960, 4960, 1690, 3956, 3956, 3956, 3956, 4138,
     4138, 4138, 4138, 4960, 1492, 4139, 4140, 4140, 4139, 4960,
     4960, 4960, 1494, 4960, 4960, 4960, 4140, 4140, 4140, 4140,
     4144, 4144, 4144, 4144, 3966, 3966, 3966, 3966, 4149, 4149,
     4149, 4149, 4960, 4960, 4960, 4076, 4077, 1687, 1687, 4077,
     4078, 1512, 4960, 4093, 4079, 4080, 4960, 4960, 4960, 4081,
     4082, 4960, 4083, 1688, 4084, 4094, 3971, 3971, 3971, 3971,
     4960, 1690, 4960, 4085, 4086, 4087, 4960, 4960, 4137, 4152,
     4152, 4152, 4152, 4153, 4153, 4153, 4153, 4155, 4155, 4155,

     4155, 1519, 3978, 3978, 3978, 3978, 1532, 3979, 3979, 3979,
     3979, 3980, 3980, 3980, 3980, 4088, 1533, 4960, 4960, 1534,
     4960, 4960, 4156, 3982, 3982, 3982, 3982, 4043, 4043, 4043,
     4043, 4960, 3791, 4161, 4161, 4161, 4161, 3992, 3992, 3992,
     3992, 4960, 4960, 4960, 4089, 4960, 4090, 4960, 3983, 3993,
     3993, 3993, 3993, 4055, 4055, 4055, 4055, 3996, 3996, 3996,
     3996, 4167, 4167, 4167, 4167, 3999, 3999, 3999, 3999, 4960,
     4960, 3984, 4960, 4960, 3994, 3547, 3547, 3547, 3547, 2285,
     2285, 2285, 2285, 2285, 2285, 2285, 2285, 4960, 4960, 4960,
     2286, 4960, 4960, 4960, 2286, 4960, 2287, 4960, 4960, 4960,

     2287, 4960, 4960, 3985, 4960, 4171, 4171, 4171, 4171, 4005,
     4005, 4005, 4005, 1515, 4960, 4960, 2286, 4960, 4960, 4960,
     2286, 4057, 2287, 2304, 2285, 2285, 2285, 2285, 4960, 4960,
     4960, 4173, 4173, 4173, 4173, 2286, 4960, 3611, 4960, 1530,
     4058, 2287, 2286, 4960, 4174, 4174, 4174, 4174, 2287, 4170,
     1569, 1569, 1569, 1569, 4960, 2286, 1569, 1569, 1569, 1569,
     4169, 2287, 4043, 4043, 4043, 4043, 1569, 1569, 1569, 1569,
     4193, 4193, 4193, 4193, 4960, 1512, 4960, 1571, 4960, 4960,
     4960, 1512, 4960, 1571, 1569, 1569, 1569, 1569, 4960, 4172,
     4960, 1512, 4176, 1571, 4960, 4175, 4960, 4960, 4177, 1569,

     1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960, 4960, 1512,
     4960, 1571, 1569, 1569, 1569, 1569, 4960, 4178, 1569, 1569,
     1569, 1569, 4960, 4960, 1512, 4960, 1571, 4960, 1512, 4096,
     1571, 1569, 1569, 1569, 1569, 4960, 4096, 1512, 4960, 1571,
     4099, 4960, 4960, 1512, 4096, 1571, 4960, 4099, 4181, 1569,
     1569, 1569, 1569, 4960, 4180, 4099, 1512, 4194, 1571, 4179,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 4960, 4960, 1512, 4960, 1571, 4481, 4182, 1569,
     1569, 1569, 1569, 4960, 4481, 1512, 4960, 1571, 4960, 1512,
     4960, 1571, 4481, 1512, 4960, 1571, 4202, 4202, 4202, 4202,

     4024, 4024, 4024, 4024, 1512, 4482, 1571, 4055, 4055, 4055,
     4055, 4960, 4482, 4183, 1569, 1569, 1569, 1569, 4960, 4960,
     4482, 2223, 4960, 4186, 4185, 1512, 4960, 1571, 4068, 4068,
     4068, 4068, 4960, 4184, 4184, 4184, 4184, 4184, 4184, 1512,
     4960, 1571, 4960, 4960, 4960, 4187, 4184, 4184, 4184, 4184,
     4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184,
     4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184,
     4072, 4072, 4072, 4072, 4184, 4960, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,

     1570, 4188, 4188, 4188, 4188, 1570, 1569, 1569, 1569, 1569,
     4192, 4192, 4192, 4192, 4030, 4030, 4030, 4030, 1569, 1569,
     1569, 1569, 4038, 4038, 4038, 4038, 1512, 4960, 1571, 4960,
     4960, 1512, 4960, 1571, 4960, 1512, 4960, 1571, 4960, 1512,
     4960, 1571, 4960, 1512, 4960, 1571, 4960, 1512, 4960, 1571,
     4200, 4200, 4200, 4201, 4040, 4040, 4040, 4040, 1569, 1569,
     1569, 1569, 4960, 4960, 1569, 1569, 1569, 1569, 4960, 4069,
     4069, 4069, 4069, 4189, 4960, 1512, 4960, 1571, 4960, 4041,
     4070, 1571, 4960, 1512, 4960, 1571, 4960, 4960, 4960, 1512,
     4960, 1571, 4960, 4199, 4203, 4204, 4204, 4204, 4204, 4203,

     4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,
     4203, 4203, 4203, 4203, 4208, 1569, 1569, 1569, 1569, 4960,
     4205, 4203, 4206, 4203, 4203, 4203, 4203, 4960, 4960, 4960,
     4047, 4047, 4047, 4047, 4209, 1569, 1569, 1569, 1569, 4960,
     1512, 4960, 1571, 4211, 4211, 4211, 4211, 1569, 1569, 1569,
     1569, 4203, 4203, 4203, 4203, 1512, 4203, 1571, 4960, 4960,
     1512, 4960, 1571, 4217, 4217, 4217, 4217, 4960, 4212, 4960,
     1571, 4960, 1512, 4960, 1571, 4960, 4960, 4960, 4215, 4960,
     4960, 4960, 4203, 4203, 4203, 4203, 4207, 4960, 1512, 4960,
     1571, 4213, 4960, 4960, 4960, 4210, 4218, 4218, 4218, 4218,

     1569, 1569, 1569, 1569, 4222, 4222, 4222, 4222, 4059, 4059,
     4059, 4059, 4200, 4200, 4200, 4200, 4067, 4067, 4067, 4067,
     4960, 4960, 4960, 4214, 4960, 1512, 4960, 1571, 4216, 1512,
     4960, 1571, 4960, 1512, 4960, 1571, 4960, 1512, 4960, 1571,
     4068, 4068, 4068, 4068, 4069, 4069, 4069, 4069, 4071, 4071,
     4071, 4071, 4960, 4960, 4960, 4070, 4072, 4072, 4072, 4072,
     4227, 4228, 4228, 4227, 4960, 4960, 1675, 4228, 4228, 4228,
     4228, 4229, 4229, 4229, 4229, 4221, 4230, 4230, 4230, 4230,
     4960, 4960, 4960, 4219, 4092, 4092, 4092, 4092, 4108, 4108,
     4108, 4108, 4960, 1688, 4960, 4960, 1491, 1491, 1491, 1491,

     4960, 1690, 4077, 1687, 1687, 4077, 4078, 4960, 4960, 4960,
     4079, 4080, 4960, 1492, 4960, 4081, 4082, 4960, 4083, 1688,
     4084, 1494, 4138, 4138, 4138, 4138, 4960, 1690, 4960, 4085,
     4086, 4087, 4272, 4273, 4273, 4272, 4960, 4273, 4273, 4273,
     4273, 4276, 4276, 4276, 4276, 4144, 4144, 4144, 4144, 4960,
     4960, 4960, 4093, 4278, 4278, 4278, 4278, 4279, 4279, 4279,
     4279, 4088, 1512, 4960, 4094, 4149, 4149, 4149, 4149, 4281,
     4281, 4281, 4281, 4960, 4960, 4960, 4271, 4282, 4282, 4282,
     4282, 4152, 4152, 4152, 4152, 4153, 4153, 4153, 4153, 4960,
     4089, 4960, 4090, 4283, 4283, 4283, 4284, 4155, 4155, 4155,

     4155, 4960, 1519, 4202, 4202, 4202, 4202, 1532, 4285, 4285,
     4285, 4285, 4161, 4161, 4161, 4161, 4960, 1533, 4960, 4960,
     1534, 4960, 4156, 4289, 4289, 4289, 4289, 4295, 4295, 4295,
     4295, 4296, 4296, 4296, 4296, 4167, 4167, 4167, 4167, 4283,
     4283, 4283, 4283, 2285, 2285, 2285, 2285, 4960, 4290, 4960,
     4298, 4298, 4298, 4298, 2286, 4171, 4171, 4171, 4171, 4960,
     2287, 2286, 4299, 4299, 4299, 4299, 2286, 2287, 4960, 4960,
     4960, 4291, 4960, 2286, 4173, 4173, 4173, 4173, 4960, 2287,
     4174, 4174, 4174, 4174, 4960, 2286, 1569, 1569, 1569, 1569,
     4960, 2286, 1569, 1569, 1569, 1569, 4313, 4313, 4313, 4313,

     4960, 4960, 4960, 4292, 4960, 4297, 1569, 1569, 1569, 1569,
     4960, 1512, 4960, 1571, 4960, 4960, 4960, 1512, 4960, 1571,
     4960, 4960, 4960, 4300, 4301, 4301, 4301, 4301, 4301, 4301,
     4960, 1512, 4960, 1571, 4960, 4303, 4960, 4301, 4301, 4301,
     4301, 4301, 4301, 4301, 4301, 4301, 4301, 4301, 4301, 4301,
     4301, 4301, 4301, 4301, 4301, 4301, 4301, 4301, 4301, 4301,
     4301, 1569, 1569, 1569, 1569, 4301, 1569, 1569, 1569, 1569,
     4960, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 3100, 4960, 4960, 1512, 4960, 1571, 4960,
     4960, 1512, 4960, 1571, 4960, 4302, 1512, 4960, 1571, 4960,

     1512, 4960, 1571, 4960, 1512, 4960, 1571, 4960, 4960, 4960,
     4304, 1569, 1569, 1569, 1569, 4310, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 4306, 4960, 4305, 4188, 4188, 4188,
     4188, 4307, 4308, 4960, 4960, 4960, 1512, 4960, 1571, 4960,
     4960, 1512, 4960, 1571, 4960, 1512, 4960, 1571, 4960, 4960,
     4311, 4960, 1512, 4960, 1571, 4960, 4960, 4309, 4960, 1569,
     1569, 1569, 1569, 4192, 4192, 4192, 4192, 4193, 4193, 4193,
     4193, 1569, 1569, 1569, 1569, 4200, 4200, 4200, 4200, 4200,
     4200, 4200, 4200, 4960, 1512, 3632, 1571, 4960, 1512, 4960,
     1571, 4202, 4202, 4202, 4202, 4960, 1512, 4960, 1571, 4960,

     1512, 4960, 1571, 4960, 1512, 4960, 1571, 1569, 1569, 1569,
     1569, 4960, 1569, 1569, 1569, 1569, 4960, 4325, 4325, 4325,
     4325, 4312, 4327, 4327, 4327, 4327, 4217, 4217, 4217, 4217,
     4960, 4960, 1512, 4960, 1571, 4317, 4960, 1512, 4960, 1571,
     4960, 4960, 4326, 4318, 1571, 4960, 4960, 2223, 4960, 4960,
     4960, 1512, 4960, 1571, 4194, 4323, 4960, 4960, 4960, 4319,
     4203, 4204, 4204, 4204, 4204, 4203, 4203, 4203, 4320, 4203,
     4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,
     4218, 4218, 4218, 4218, 4960, 4960, 4205, 4203, 4206, 4203,
     4203, 4203, 4203, 4321, 4321, 4321, 4321, 4321, 4321, 4321,

     4321, 4321, 4321, 4321, 4321, 4321, 4321, 4321, 4321, 4321,
     4321, 4321, 4321, 4321, 4321, 4321, 4321, 4203, 4203, 4203,
     4203, 4321, 4203, 4321, 4321, 4321, 4321, 4321, 4321, 4321,
     4321, 4321, 4321, 4321, 4321, 4321, 4321, 4321, 4321, 4321,
     4321, 4321, 4321, 4321, 4321, 4321, 4321, 4321, 4203, 4203,
     4203, 4203, 4322, 1569, 1569, 1569, 1569, 4211, 4211, 4211,
     4211, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960, 1512, 4960,
     1571, 4960, 4212, 4960, 1571, 4960, 1512, 4960, 1571, 4960,
     1512, 4960, 1571, 4960, 1512, 4960, 1571, 4960, 1512, 4960,

     1571, 4332, 4332, 4332, 4332, 4291, 1569, 1569, 1569, 1569,
     4340, 4340, 4340, 4340, 4960, 4330, 4222, 4222, 4222, 4222,
     4960, 4328, 4339, 4340, 4340, 4339, 4960, 4960, 1675, 4960,
     4960, 1512, 4960, 1571, 4324, 4960, 4960, 4292, 4329, 4960,
     4960, 1512, 4960, 1571, 4229, 4229, 4229, 4229, 4230, 4230,
     4230, 4230, 4960, 4331, 4344, 4344, 4344, 4344, 4351, 4351,
     4351, 4351, 4960, 4960, 4960, 1688, 4960, 4960, 4960, 4352,
     4334, 4960, 4960, 1690, 4369, 4369, 4369, 4369, 4370, 4371,
     4371, 4370, 4371, 4371, 4371, 4371, 4960, 4960, 4333, 4960,
     4960, 1492, 4373, 4373, 4373, 4373, 4960, 4960, 4960, 1494,

     4276, 4276, 4276, 4276, 4960, 4960, 4960, 1512, 4374, 4374,
     4374, 4374, 4278, 4278, 4278, 4278, 4279, 4279, 4279, 4279,
     4960, 4960, 4345, 4281, 4281, 4281, 4281, 4282, 4282, 4282,
     4282, 4960, 4960, 4960, 4346, 4283, 4283, 4283, 4283, 4283,
     4283, 4283, 4283, 4285, 4285, 4285, 4285, 1519, 4377, 4377,
     4377, 4377, 1532, 4289, 4289, 4289, 4289, 4327, 4327, 4327,
     4327, 4960, 1533, 4960, 4960, 1534, 4295, 4295, 4295, 4295,
     4960, 4960, 4960, 4378, 4296, 4296, 4296, 4296, 4290, 2285,
     2285, 2285, 2285, 4298, 4298, 4298, 4298, 4960, 4960, 4960,
     2286, 4960, 4960, 4960, 2286, 4960, 2287, 4299, 4299, 4299,

     4299, 4291, 4960, 4318, 1569, 1569, 1569, 1569, 2286, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960, 4960, 4319,
     4960, 1569, 1569, 1569, 1569, 4313, 4313, 4313, 4313, 1512,
     4960, 1571, 4960, 4292, 1512, 4960, 1571, 4960, 1512, 4960,
     1571, 1569, 1569, 1569, 1569, 4384, 1512, 4960, 1571, 4385,
     3593, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960,
     4383, 1569, 1569, 1569, 1569, 4960, 1512, 4960, 1571, 1569,
     1569, 1569, 1569, 4386, 4960, 4960, 1512, 4960, 1571, 4960,
     1512, 4960, 1571, 4960, 4960, 4960, 1512, 4960, 1571, 1569,
     1569, 1569, 1569, 4960, 1512, 4960, 1571, 4397, 4397, 4397,

     4397, 4387, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     4960, 4388, 4960, 4960, 1512, 4960, 1571, 1569, 1569, 1569,
     1569, 4960, 4389, 4960, 4960, 4399, 4960, 1512, 4960, 1571,
     4960, 1512, 4960, 1571, 4397, 4397, 4397, 4397, 4390, 4960,
     4960, 4960, 1512, 4960, 1571, 4960, 4960, 4960, 4391, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 4325, 4325, 4325,
     4325, 4960, 4399, 4402, 4402, 4402, 4402, 4960, 4960, 4960,
     4392, 4960, 4960, 4960, 1512, 4960, 1571, 4960, 1512, 4960,
     1571, 4960, 4326, 2764, 1571, 4960, 4960, 4960, 2223, 4327,
     4327, 4327, 4327, 4960, 4960, 4400, 1569, 1569, 1569, 1569,

     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960, 4406,
     4406, 4406, 4406, 4332, 4332, 4332, 4332, 1569, 1569, 1569,
     1569, 1512, 4960, 1571, 4960, 1512, 4960, 1571, 4960, 1512,
     4960, 1571, 4960, 4401, 4407, 4960, 1571, 4409, 4409, 4409,
     4409, 4960, 1512, 4960, 1571, 4960, 4403, 4413, 4414, 4414,
     4413, 4960, 4960, 1675, 4960, 4405, 4414, 4414, 4414, 4414,
     4344, 4344, 4344, 4344, 4351, 4351, 4351, 4351, 4960, 4960,
     4423, 4423, 4423, 4423, 4424, 4352, 4404, 4425, 4369, 4369,
     4369, 4369, 4960, 2764, 4439, 4440, 4440, 4439, 4440, 4440,
     4440, 4440, 4960, 4960, 4960, 4426, 4373, 4373, 4373, 4373,

     4960, 4960, 4960, 1494, 4374, 4374, 4374, 4374, 4377, 4377,
     4377, 4377, 4960, 1512, 4402, 4402, 4402, 4402, 4447, 4447,
     4447, 4447, 4960, 4960, 4410, 4960, 4960, 4960, 4345, 1569,
     1569, 1569, 1569, 4378, 2285, 2285, 2285, 2285, 4960, 4960,
     4346, 4960, 4960, 4448, 4960, 2286, 4960, 1569, 1569, 1569,
     1569, 2287, 4960, 1519, 1512, 4960, 1571, 4960, 1532, 4960,
     4424, 4960, 1569, 1569, 1569, 1569, 4960, 4960, 1533, 4960,
     4960, 1534, 1512, 4960, 1571, 1569, 1569, 1569, 1569, 3593,
     4464, 4464, 4464, 4464, 4960, 4960, 4960, 1512, 4960, 1571,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960, 4960,

     1512, 4960, 1571, 4960, 4449, 4451, 4960, 4450, 1569, 1569,
     1569, 1569, 4960, 4960, 4960, 1512, 4960, 1571, 4462, 1512,
     4960, 1571, 1569, 1569, 1569, 1569, 4460, 4960, 4960, 4960,
     4461, 4960, 4960, 1512, 4960, 1571, 1569, 1569, 1569, 1569,
     4960, 4960, 4452, 4453, 4960, 4454, 4960, 1512, 4960, 1571,
     4960, 4960, 4960, 4455, 4960, 4960, 4960, 4456, 4457, 4960,
     4458, 1512, 4459, 1571, 4397, 4397, 4397, 4397, 4960, 4463,
     4397, 4397, 4397, 4397, 1569, 1569, 1569, 1569, 4468, 4468,
     4468, 4468, 4402, 4402, 4402, 4402, 1569, 1569, 1569, 1569,
     4960, 4960, 4399, 1569, 1569, 1569, 1569, 4960, 4399, 1512,

     4960, 1571, 4062, 4469, 4960, 1571, 1569, 1569, 1569, 1569,
     4960, 1512, 4960, 1571, 4406, 4406, 4406, 4406, 1512, 4960,
     1571, 4472, 4472, 4472, 4472, 4467, 4960, 4960, 4960, 4470,
     4960, 1512, 4960, 1571, 4409, 4409, 4409, 4409, 4960, 4407,
     4960, 1571, 4473, 4473, 4473, 4473, 2223, 4476, 4477, 4477,
     4476, 4960, 4960, 1675, 4960, 4960, 4331, 4477, 4477, 4477,
     4477, 4423, 4423, 4423, 4423, 4424, 4960, 4960, 4425, 4484,
     4484, 4484, 4484, 4960, 4471, 4960, 4485, 4487, 4487, 4487,
     4487, 4424, 4960, 4960, 4488, 4960, 4426, 4960, 4490, 4490,
     4490, 4490, 4502, 4503, 4503, 4502, 4503, 4503, 4503, 4503,

     4491, 4960, 4426, 4492, 4960, 4506, 4506, 4506, 4506, 4447,
     4447, 4447, 4447, 4426, 4472, 4472, 4472, 4472, 4960, 4960,
     4960, 1512, 2285, 2285, 2285, 2285, 4960, 4960, 4960, 4474,
     4507, 4960, 4960, 2286, 4448, 1569, 1569, 1569, 1569, 2287,
     4960, 4960, 4960, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 4424, 4960, 1569, 1569, 1569, 1569, 4960, 4960, 4960,
     1512, 1519, 1571, 4960, 4960, 4960, 1532, 4424, 1512, 4511,
     1571, 4960, 1512, 4960, 1571, 4960, 1533, 4960, 1512, 1534,
     1571, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 4514,
     4960, 4960, 4960, 4513, 4512, 4960, 4960, 4960, 4510, 1569,

     1569, 1569, 1569, 4960, 4960, 4960, 1512, 4960, 1571, 4960,
     1512, 4960, 1571, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 4515, 4960, 4960, 1512, 4960, 1571, 1569, 1569, 1569,
     1569, 4516, 4960, 4960, 4960, 4517, 4960, 4960, 1512, 4960,
     1571, 4960, 1512, 4960, 1571, 4960, 4960, 4518, 1569, 1569,
     1569, 1569, 1512, 4960, 1571, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 4960, 4519, 4960, 4960, 4520, 4960, 1569,
     1569, 1569, 1569, 1512, 4960, 1571, 4521, 4960, 4960, 4960,
     1512, 4960, 1571, 4960, 1512, 4960, 1571, 4464, 4464, 4464,
     4464, 4960, 4960, 4522, 1512, 4960, 1571, 4960, 1569, 1569,

     1569, 1569, 4960, 4960, 4523, 4524, 4468, 4468, 4468, 4468,
     4527, 4527, 4527, 4527, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 4960, 1512, 3593, 1571, 4472, 4472, 4472, 4472,
     4960, 4469, 4960, 1571, 4960, 2223, 4960, 4960, 4960, 1512,
     4960, 1571, 4960, 1512, 4960, 1571, 4960, 4960, 4401, 4473,
     4473, 4473, 4473, 4531, 4532, 4532, 4531, 4960, 4960, 1675,
     4528, 4532, 4532, 4532, 4532, 4484, 4484, 4484, 4484, 4960,
     4960, 4960, 4485, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4535, 4535, 4535, 4535, 4487, 4487, 4487, 4487, 4553,
     4554, 4554, 4553, 4491, 4960, 4960, 4492, 4960, 4529, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4426, 4537, 4537, 4537, 4537, 4424, 4960, 4960, 4488, 4490,
     4490, 4490, 4490, 4960, 4960, 4538, 4538, 4538, 4538, 4960,
     4960, 4491, 4960, 4960, 4492, 4960, 4426, 4960, 4540, 4540,
     4540, 4540, 4541, 4960, 4426, 4542, 4490, 4490, 4490, 4490,
     4960, 4539, 4554, 4554, 4554, 4554, 4960, 4960, 4491, 4960,
     4960, 4492, 4960, 4543, 4960, 4506, 4506, 4506, 4506, 4960,
     4960, 4426, 4527, 4527, 4527, 4527, 4960, 1512, 4960, 4960,
     2285, 2285, 2285, 2285, 1569, 1569, 1569, 1569, 4960, 4960,
     4507, 2286, 4960, 1569, 1569, 1569, 1569, 2287, 4960, 4960,

     4960, 4424, 1569, 1569, 1569, 1569, 4960, 4960, 4960, 1512,
     4960, 1571, 1569, 1569, 1569, 1569, 4960, 1519, 1512, 4960,
     1571, 4960, 1532, 1569, 1569, 1569, 1569, 1512, 4541, 1571,
     4559, 4960, 1533, 4560, 4960, 1534, 4960, 1512, 4960, 1571,
     1569, 1569, 1569, 1569, 4960, 4960, 4960, 4561, 1512, 4960,
     1571, 1569, 1569, 1569, 1569, 4558, 4960, 1569, 1569, 1569,
     1569, 4960, 4562, 4960, 4960, 1512, 4960, 1571, 4563, 1569,
     1569, 1569, 1569, 4960, 4960, 4960, 1512, 4960, 1571, 4960,
     4960, 4960, 1512, 4565, 1571, 1569, 1569, 1569, 1569, 4960,
     4960, 4564, 4960, 4960, 1512, 4960, 1571, 1569, 1569, 1569,

     1569, 4566, 4960, 4960, 4567, 4960, 4568, 4960, 4960, 4960,
     1512, 4960, 1571, 4960, 4960, 4569, 1569, 1569, 1569, 1569,
     4960, 4570, 1512, 4960, 1571, 4960, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 4960, 4960, 4960, 4571, 4960, 4960,
     4960, 1512, 4960, 1571, 4527, 4527, 4527, 4527, 4960, 4960,
     4960, 1512, 4960, 1571, 4960, 1512, 4960, 1571, 1569, 1569,
     1569, 1569, 4574, 4578, 4578, 4578, 4578, 4960, 4572, 4573,
     4581, 4582, 4582, 4581, 4960, 4960, 1675, 4582, 4582, 4582,
     4582, 4960, 4960, 1512, 4960, 1571, 4960, 4960, 4579, 4960,
     1571, 4535, 4535, 4535, 4535, 4535, 4535, 4535, 4535, 4538,

     4538, 4538, 4538, 4491, 4960, 4960, 4492, 4491, 4960, 4577,
     4492, 4537, 4537, 4537, 4537, 4424, 4960, 4960, 4488, 4540,
     4540, 4540, 4540, 4541, 4960, 4539, 4542, 4585, 4585, 4585,
     4585, 4960, 4960, 4960, 4586, 4960, 4426, 4960, 4588, 4588,
     4588, 4588, 4541, 4960, 4543, 4589, 4591, 4591, 4591, 4591,
     4598, 4599, 4599, 4598, 4599, 4599, 4599, 4599, 4491, 4960,
     4960, 4492, 4960, 4543, 4602, 4602, 4602, 4602, 4960, 4960,
     4960, 4543, 4960, 4604, 4604, 4604, 4604, 4960, 4960, 1512,
     1569, 1569, 1569, 1569, 2286, 1569, 1569, 1569, 1569, 4603,
     2287, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960,

     4960, 4424, 4960, 4960, 4960, 1512, 4960, 1571, 4960, 4541,
     1512, 4960, 1571, 4960, 4960, 4960, 1512, 4960, 1571, 1519,
     1512, 4960, 1571, 4960, 1532, 4605, 4960, 4960, 4541, 4960,
     4960, 4960, 4606, 4960, 1533, 4608, 4960, 1534, 4960, 4960,
     4960, 4607, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 4621, 4621,
     4621, 4621, 1569, 1569, 1569, 1569, 4960, 1512, 4960, 1571,
     4960, 1512, 4960, 1571, 4609, 1512, 4960, 1571, 4960, 1512,
     4960, 1571, 4960, 4960, 4960, 4611, 4610, 1512, 4960, 1571,
     4612, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 4960,

     4960, 4960, 4613, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 4960, 1512, 4960, 1571, 4960,
     1512, 4960, 1571, 1569, 1569, 1569, 1569, 4960, 1512, 4960,
     1571, 4614, 1512, 4960, 1571, 4960, 1512, 4960, 1571, 1569,
     1569, 1569, 1569, 4960, 4615, 4622, 4960, 4960, 1512, 4960,
     1571, 4960, 4616, 4960, 4960, 4618, 4960, 4960, 4617, 1569,
     1569, 1569, 1569, 4960, 1512, 4960, 1571, 4960, 4960, 4619,
     4578, 4578, 4578, 4578, 4620, 4624, 4624, 4624, 4624, 4626,
     4627, 4627, 4626, 4960, 1512, 1675, 1571, 4627, 4627, 4627,
     4627, 4585, 4585, 4585, 4585, 4579, 4960, 1571, 4586, 4960,

     2223, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4529,
     4630, 4630, 4630, 4630, 4588, 4588, 4588, 4588, 4638, 4639,
     4639, 4638, 4491, 4960, 4960, 4492, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4632, 4632, 4632, 4632, 4541, 4543,
     4960, 4589, 4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591,
     4960, 4960, 4960, 4960, 4491, 4960, 4960, 4492, 4491, 4543,
     4960, 4492, 4639, 4639, 4639, 4639, 4960, 4543, 4960, 4960,
     4960, 4543, 4640, 4640, 4640, 4640, 4602, 4602, 4602, 4602,
     4624, 4624, 4624, 4624, 4960, 4960, 4960, 1512, 4604, 4604,
     4604, 4604, 4960, 1569, 1569, 1569, 1569, 4960, 4960, 2286,

     4960, 4603, 4960, 1569, 1569, 1569, 1569, 4960, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 4960, 4960, 1512, 4960,
     1571, 4960, 4960, 4960, 4541, 4960, 4960, 1519, 1512, 4960,
     1571, 4960, 1532, 1512, 4960, 1571, 4960, 1512, 4960, 1571,
     4960, 4960, 1533, 4641, 4960, 1534, 4642, 4960, 4960, 4960,
     4644, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 4643,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1512, 4960, 1571, 4960,
     1512, 4960, 1571, 4960, 4960, 1512, 4960, 1571, 4960, 1512,
     4960, 1571, 4646, 1512, 4645, 1571, 4960, 1512, 4960, 1571,

     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 4960, 4960, 4960, 4647, 4960, 4960, 4648, 4649,
     1569, 1569, 1569, 1569, 4960, 1512, 4960, 1571, 4960, 1512,
     4960, 1571, 4960, 1512, 4960, 1571, 4650, 1569, 1569, 1569,
     1569, 4960, 4960, 4960, 4651, 1512, 4960, 1571, 1569, 1569,
     1569, 1569, 4621, 4621, 4621, 4621, 4653, 4653, 4653, 4653,
     4960, 4960, 1512, 4960, 1571, 4624, 4624, 4624, 4624, 4652,
     4960, 4960, 4960, 1512, 4960, 1571, 4655, 4655, 4655, 4655,
     4657, 4658, 4658, 4657, 4960, 4960, 1675, 4658, 4658, 4658,
     4658, 4630, 4630, 4630, 4630, 4630, 4630, 4630, 4630, 4666,

     4667, 4667, 4666, 4491, 4656, 4960, 4492, 4491, 4960, 4960,
     4492, 4632, 4632, 4632, 4632, 4541, 4960, 4960, 4589, 4667,
     4667, 4667, 4667, 4640, 4640, 4640, 4640, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 4960, 4543, 1569, 1569, 1569,
     1569, 4960, 4960, 4654, 1512, 1569, 1569, 1569, 1569, 4960,
     4960, 4960, 1512, 4960, 1571, 4960, 1512, 4960, 1571, 4960,
     4960, 4960, 1512, 4960, 1571, 4960, 4960, 3593, 4960, 4669,
     1512, 4960, 1571, 1569, 1569, 1569, 1569, 4960, 4668, 1569,
     1569, 1569, 1569, 4960, 1519, 1569, 1569, 1569, 1569, 1532,
     4670, 1569, 1569, 1569, 1569, 4960, 4960, 4960, 1512, 1533,

     1571, 4541, 1534, 4960, 1512, 4960, 1571, 4960, 4960, 4960,
     1512, 4960, 1571, 4960, 4960, 4960, 1512, 4960, 1571, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 4672, 4960, 4960, 4671, 4960, 1569, 1569, 1569, 1569,
     4653, 4653, 4653, 4653, 1512, 4960, 1571, 4960, 1512, 4960,
     1571, 4960, 1512, 4960, 1571, 4960, 4960, 4960, 4674, 4960,
     4960, 1512, 4960, 1571, 4655, 4655, 4655, 4655, 4960, 4960,
     4673, 4675, 4676, 4676, 4676, 4676, 4960, 4677, 4679, 4680,
     4680, 4679, 4677, 4960, 1675, 4680, 4680, 4680, 4680, 4960,
     4960, 4960, 4656, 4685, 4686, 4686, 4685, 4686, 4686, 4686,

     4686, 1569, 1569, 1569, 1569, 4960, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1512, 4960, 4960, 4960, 1512, 4960, 1571, 4960,
     4960, 1512, 4960, 1571, 4960, 1512, 4960, 1571, 4960, 1512,
     4960, 1571, 4689, 1512, 4960, 1571, 4960, 4960, 4960, 4678,
     4687, 4688, 4960, 4960, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1519, 4960, 4690, 4960, 4960, 1532, 1569, 1569,
     1569, 1569, 4693, 4694, 4694, 4693, 4960, 1533, 1675, 1512,
     1534, 1571, 4960, 1512, 4960, 1571, 4691, 4676, 4676, 4676,
     4676, 4960, 4677, 1512, 4960, 1571, 4960, 4677, 4694, 4694,

     4694, 4694, 4695, 4696, 4696, 4695, 4696, 4696, 4696, 4696,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 4960, 1569, 1569, 1569,
     1569, 1512, 4960, 4960, 4960, 1512, 4960, 1571, 4960, 1512,
     4960, 1571, 4960, 1512, 4960, 1571, 4960, 1512, 4960, 1571,
     4960, 4699, 1512, 4960, 1571, 4703, 4704, 4704, 4703, 4960,
     4701, 1675, 4697, 4960, 4678, 4698, 4960, 4700, 4960, 4960,
     4960, 1519, 4704, 4704, 4704, 4704, 1532, 4705, 4706, 4706,
     4705, 4706, 4706, 4706, 4706, 4960, 1533, 4960, 4960, 1534,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,

     1569, 1569, 1569, 1569, 1569, 1569, 1512, 1569, 1569, 1569,
     1569, 4714, 4714, 4714, 4714, 1512, 4960, 1571, 4960, 1512,
     4960, 1571, 4960, 1512, 4707, 1571, 4960, 1512, 4960, 1571,
     4960, 4960, 1512, 4960, 1571, 4960, 4960, 4710, 4710, 4710,
     4710, 4708, 4711, 4960, 4960, 4960, 1519, 4711, 4960, 4960,
     4709, 1532, 4713, 4714, 4714, 4713, 4960, 4960, 1675, 4960,
     4960, 1533, 4960, 4960, 1534, 4960, 4712, 4715, 4716, 4716,
     4715, 4716, 4716, 4716, 4716, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 4710, 4710, 4710,
     4710, 4710, 4710, 4710, 4710, 4960, 1512, 4960, 4960, 4960,

     1512, 4960, 1571, 4960, 1512, 4960, 1571, 4960, 1512, 4960,
     1571, 4720, 4721, 4721, 4720, 4718, 4712, 1675, 4960, 4719,
     4712, 4721, 4721, 4721, 4721, 4960, 4717, 4722, 4723, 4723,
     4722, 4723, 4723, 4723, 4723, 4960, 1519, 1569, 1569, 1569,
     1569, 1532, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     4960, 1533, 4960, 4960, 1534, 4960, 1512, 4725, 4726, 4726,
     4725, 4960, 1512, 1675, 1571, 4960, 4960, 1512, 4960, 1571,
     4960, 1512, 4960, 1571, 4726, 4726, 4726, 4726, 4727, 4728,
     4728, 4727, 4960, 4724, 4728, 4728, 4728, 4728, 1569, 1569,
     1569, 1569, 4730, 4731, 4731, 4730, 1519, 4960, 1675, 4960,

     4960, 1532, 4731, 4731, 4731, 4731, 4960, 4960, 4960, 1512,
     4960, 1533, 4960, 1512, 1534, 1571, 4732, 4733, 4733, 4732,
     4733, 4733, 4733, 4733, 4960, 4960, 1569, 1569, 1569, 1569,
     4735, 4736, 4736, 4735, 4960, 4960, 1675, 4729, 4736, 4736,
     4736, 4736, 4960, 4960, 4960, 1512, 4960, 4960, 4960, 1519,
     4960, 1512, 4960, 1571, 1532, 4737, 4738, 4738, 4737, 4738,
     4738, 4738, 4738, 4960, 1533, 4960, 4960, 1534, 1569, 1569,
     1569, 1569, 4739, 4740, 4740, 4739, 4960, 4960, 1675, 4740,
     4740, 4740, 4740, 4960, 1512, 1519, 4734, 4960, 3593, 3593,
     1532, 4960, 4960, 1512, 4960, 1571, 4741, 4742, 4742, 4741,

     1533, 4960, 4960, 1534, 4960, 4742, 4742, 4742, 4742, 4743,
     4744, 4744, 4743, 4960, 4960, 1675, 4744, 4744, 4744, 4744,
     4745, 4746, 4746, 4745, 1519, 4746, 4746, 4746, 4746, 1532,
     1512, 4747, 4748, 4748, 4747, 4960, 4960, 1675, 4960, 1533,
     4960, 4960, 1534, 4748, 4748, 4748, 4748, 4960, 4960, 4960,
     1512, 4749, 4750, 4750, 4749, 4750, 4750, 4750, 4750, 4751,
     4752, 4752, 4751, 4960, 4960, 1675, 4752, 4752, 4752, 4752,
     1519, 4753, 4754, 4754, 4753, 1532, 4754, 4754, 4754, 4754,
     1512, 4755, 4756, 4756, 4755, 1533, 4960, 1675, 1534, 4960,
     1519, 4756, 4756, 4756, 4756, 1532, 4757, 4758, 4758, 4757,

     4960, 1512, 4960, 4960, 4960, 1533, 4960, 4960, 1534, 4758,
     4758, 4758, 4758, 4759, 4760, 4760, 4759, 4960, 4960, 1675,
     1519, 4760, 4760, 4760, 4760, 1532, 4761, 4762, 4762, 4761,
     4762, 4762, 4762, 4762, 1512, 1533, 4960, 4960, 1534, 4960,
     4960, 1519, 4763, 4764, 4764, 4763, 1532, 4960, 1675, 4764,
     4764, 4764, 4764, 4960, 4960, 1512, 1533, 4960, 4960, 1534,
     4765, 4766, 4766, 4765, 4960, 4766, 4766, 4766, 4766, 4767,
     4768, 4768, 4767, 4960, 1519, 1675, 4960, 4960, 4960, 1532,
     4768, 4768, 4768, 4768, 4769, 4770, 4770, 4769, 4960, 1533,
     1512, 4960, 1534, 4960, 4960, 1519, 4770, 4770, 4770, 4770,

     1532, 4771, 4772, 4772, 4771, 4960, 4960, 1675, 4960, 4960,
     1533, 4960, 4960, 1534, 4772, 4772, 4772, 4772, 4960, 4960,
     4960, 1512, 4773, 4774, 4774, 4773, 4774, 4774, 4774, 4774,
     1519, 4775, 4776, 4776, 4775, 1532, 4960, 1675, 4776, 4776,
     4776, 4776, 4960, 4960, 4960, 1533, 4960, 4960, 1534, 4960,
     4960, 1512, 4777, 4778, 4778, 4777, 4778, 4778, 4778, 4778,
     4960, 1519, 4779, 4780, 4780, 4779, 1532, 4960, 1675, 4780,
     4780, 4780, 4780, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4781, 4782, 4782, 4781, 4782, 4782, 4782, 4782,
     4960, 1519, 4783, 4784, 4784, 4783, 1532, 4960, 1675, 4784,

     4784, 4784, 4784, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4785, 4786, 4786, 4785, 4786, 4786, 4786, 4786,
     4960, 1519, 4787, 4788, 4788, 4787, 1532, 4960, 1675, 4788,
     4788, 4788, 4788, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4789, 4790, 4790, 4789, 4790, 4790, 4790, 4790,
     4960, 1519, 4791, 4792, 4792, 4791, 1532, 4960, 1675, 4792,
     4792, 4792, 4792, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4793, 4794, 4794, 4793, 4794, 4794, 4794, 4794,
     4960, 1519, 4795, 4796, 4796, 4795, 1532, 4960, 1675, 4796,
     4796, 4796, 4796, 4960, 4960, 4960, 1533, 4960, 4960, 1534,

     4960, 1512, 4797, 4798, 4798, 4797, 4798, 4798, 4798, 4798,
     4960, 1519, 4799, 4800, 4800, 4799, 1532, 4960, 1675, 4800,
     4800, 4800, 4800, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4801, 4802, 4802, 4801, 4802, 4802, 4802, 4802,
     4960, 1519, 4803, 4804, 4804, 4803, 1532, 4960, 1675, 4804,
     4804, 4804, 4804, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4805, 4806, 4806, 4805, 4806, 4806, 4806, 4806,
     4960, 1519, 4807, 4808, 4808, 4807, 1532, 4960, 1675, 4808,
     4808, 4808, 4808, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4809, 4810, 4810, 4809, 4810, 4810, 4810, 4810,

     4960, 1519, 4811, 4812, 4812, 4811, 1532, 4960, 1675, 4812,
     4812, 4812, 4812, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4813, 4814, 4814, 4813, 4814, 4814, 4814, 4814,
     4960, 1519, 4815, 4816, 4816, 4815, 1532, 4960, 1675, 4816,
     4816, 4816, 4816, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4817, 4818, 4818, 4817, 4818, 4818, 4818, 4818,
     4960, 1519, 4819, 4820, 4820, 4819, 1532, 4960, 1675, 4820,
     4820, 4820, 4820, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4821, 4822, 4822, 4821, 4822, 4822, 4822, 4822,
     4960, 1519, 4823, 4824, 4824, 4823, 1532, 4960, 1675, 4824,

     4824, 4824, 4824, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4825, 4826, 4826, 4825, 4826, 4826, 4826, 4826,
     4960, 1519, 4827, 4828, 4828, 4827, 1532, 4960, 1675, 4828,
     4828, 4828, 4828, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4829, 4830, 4830, 4829, 4830, 4830, 4830, 4830,
     4960, 1519, 4831, 4832, 4832, 4831, 1532, 4960, 1675, 4832,
     4832, 4832, 4832, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4833, 4834, 4834, 4833, 4834, 4834, 4834, 4834,
     4960, 1519, 4835, 4836, 4836, 4835, 1532, 4960, 1675, 4836,
     4836, 4836, 4836, 4960, 4960, 4960, 1533, 4960, 4960, 1534,

     4960, 1512, 4837, 4838, 4838, 4837, 4838, 4838, 4838, 4838,
     4960, 1519, 4839, 4840, 4840, 4839, 1532, 4960, 1675, 4840,
     4840, 4840, 4840, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4841, 4842, 4842, 4841, 4842, 4842, 4842, 4842,
     4960, 1519, 4843, 4844, 4844, 4843, 1532, 4960, 1675, 4844,
     4844, 4844, 4844, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4845, 4846, 4846, 4845, 4846, 4846, 4846, 4846,
     4960, 1519, 4847, 4848, 4848, 4847, 1532, 4960, 1675, 4848,
     4848, 4848, 4848, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4849, 4850, 4850, 4849, 4850, 4850, 4850, 4850,

     4960, 1519, 4851, 4852, 4852, 4851, 1532, 4960, 1675, 4852,
     4852, 4852, 4852, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4853, 4854, 4854, 4853, 4854, 4854, 4854, 4854,
     4960, 1519, 4855, 4856, 4856, 4855, 1532, 4960, 1675, 4856,
     4856, 4856, 4856, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4857, 4858, 4858, 4857, 4858, 4858, 4858, 4858,
     4960, 1519, 4859, 4860, 4860, 4859, 1532, 4960, 1675, 4860,
     4860, 4860, 4860, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4861, 4862, 4862, 4861, 4862, 4862, 4862, 4862,
     4960, 1519, 4863, 4864, 4864, 4863, 1532, 4960, 1675, 4864,

     4864, 4864, 4864, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4865, 4866, 4866, 4865, 4866, 4866, 4866, 4866,
     4960, 1519, 4867, 4868, 4868, 4867, 1532, 4960, 1675, 4868,
     4868, 4868, 4868, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4869, 4870, 4870, 4869, 4870, 4870, 4870, 4870,
     4960, 1519, 4871, 4872, 4872, 4871, 1532, 4960, 1675, 4872,
     4872, 4872, 4872, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4873, 4874, 4874, 4873, 4874, 4874, 4874, 4874,
     4960, 1519, 4875, 4876, 4876, 4875, 1532, 4960, 1675, 4876,
     4876, 4876, 4876, 4960, 4960, 4960, 1533, 4960, 4960, 1534,

     4960, 1512, 4877, 4878, 4878, 4877, 4878, 4878, 4878, 4878,
     4960, 1519, 4879, 4880, 4880, 4879, 1532, 4960, 1675, 4880,
     4880, 4880, 4880, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4881, 4882, 4882, 4881, 4882, 4882, 4882, 4882,
     4960, 1519, 4883, 4884, 4884, 4883, 1532, 4960, 1675, 4884,
     4884, 4884, 4884, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4885, 4886, 4886, 4885, 4886, 4886, 4886, 4886,
     4960, 1519, 4887, 4888, 4888, 4887, 1532, 4960, 1675, 4888,
     4888, 4888, 4888, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4889, 4890, 4890, 4889, 4890, 4890, 4890, 4890,

     4960, 1519, 4891, 4892, 4892, 4891, 1532, 4960, 1675, 4892,
     4892, 4892, 4892, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4893, 4894, 4894, 4893, 4894, 4894, 4894, 4894,
     4960, 1519, 4895, 4896, 4896, 4895, 1532, 4960, 1675, 4896,
     4896, 4896, 4896, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4897, 4898, 4898, 4897, 4898, 4898, 4898, 4898,
     4960, 1519, 4899, 4900, 4900, 4899, 1532, 4960, 1675, 4900,
     4900, 4900, 4900, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4901, 4902, 4902, 4901, 4902, 4902, 4902, 4902,
     4960, 1519, 4903, 4904, 4904, 4903, 1532, 4960, 1675, 4904,

     4904, 4904, 4904, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4905, 4906, 4906, 4905, 4906, 4906, 4906, 4906,
     4960, 1519, 4907, 4908, 4908, 4907, 1532, 4960, 1675, 4908,
     4908, 4908, 4908, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4909, 4910, 4910, 4909, 4910, 4910, 4910, 4910,
     4960, 1519, 4911, 4912, 4912, 4911, 1532, 4960, 1675, 4912,
     4912, 4912, 4912, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4913, 4914, 4914, 4913, 4914, 4914, 4914, 4914,
     4960, 1519, 4915, 4916, 4916, 4915, 1532, 4960, 1675, 4916,
     4916, 4916, 4916, 4960, 4960, 4960, 1533, 4960, 4960, 1534,

     4960, 1512, 4917, 4918, 4918, 4917, 4918, 4918, 4918, 4918,
     4960, 1519, 4919, 4920, 4920, 4919, 1532, 4960, 1675, 4920,
     4920, 4920, 4920, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4921, 4922, 4922, 4921, 4922, 4922, 4922, 4922,
     4960, 1519, 4923, 4924, 4924, 4923, 1532, 4960, 1675, 4924,
     4924, 4924, 4924, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4925, 4926, 4926, 4925, 4926, 4926, 4926, 4926,
     4960, 1519, 4927, 4928, 4928, 4927, 1532, 4960, 1675, 4928,
     4928, 4928, 4928, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4929, 4930, 4930, 4929, 4930, 4930, 4930, 4930,

     4960, 1519, 4931, 4932, 4932, 4931, 1532, 4960, 1675, 4932,
     4932, 4932, 4932, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4933, 4934, 4934, 4933, 4934, 4934, 4934, 4934,
     4960, 1519, 4935, 4936, 4936, 4935, 1532, 4960, 1675, 4936,
     4936, 4936, 4936, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4937, 4938, 4938, 4937, 4938, 4938, 4938, 4938,
     4960, 1519, 4939, 4940, 4940, 4939, 1532, 4960, 1675, 4940,
     4940, 4940, 4940, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4941, 4942, 4942, 4941, 4942, 4942, 4942, 4942,
     4960, 1519, 4943, 4944, 4944, 4943, 1532, 4960, 1675, 4944,

     4944, 4944, 4944, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4945, 4946, 4946, 4945, 4946, 4946, 4946, 4946,
     4960, 1519, 4947, 4948, 4948, 4947, 1532, 4960, 1675, 4948,
     4948, 4948, 4948, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4949, 4950, 4950, 4949, 4950, 4950, 4950, 4950,
     4960, 1519, 4951, 4952, 4952, 4951, 1532, 4960, 1675, 4952,
     4952, 4952, 4952, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4953, 4954, 4954, 4953, 4954, 4954, 4954, 4954,
     4960, 1519, 4955, 4956, 4956, 4955, 1532, 4960, 1675, 4956,
     4956, 4956, 4956, 4960, 4960, 4960, 1533, 4960, 4960, 1534,

     4960, 1512, 4957, 4958, 4958, 4957, 4958, 4958, 4958, 4958,
     4960, 1519, 4959, 4960, 4960, 4959, 1532, 4960, 1675, 4957,
     4958, 4958, 4957, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 1512, 4958, 4958, 4958, 4958, 4959, 4960, 4960, 4959,
     4960, 1519, 1675, 4960, 4960, 4960, 1532, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 1533, 1512, 4960, 1534,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1519, 4960, 4960, 4960, 4960, 1532, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 1533, 4960, 4960, 1534,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1519, 4960, 4960,

     4960, 4960, 1532, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1533, 4960, 4960, 1534,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,

      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  435,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,

      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  631,  631,  631,  631,

      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  673,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,

      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,

      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,

      794,  794,  794,  794,  794,  794,  794,  794,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,

      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,

     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,

      631,  631,  631,  631,  631,  631,  631,  631, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,

     1219, 1219, 1219, 1219, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,

     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1277, 1277, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1391, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1391, 4960, 4960, 4960, 4960, 4960, 1391, 4960, 4960,
     4960, 4960, 4960, 4960, 1391, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1391, 1405, 1405, 1405, 4960, 4960, 4960, 1405,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 1405, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1405, 1409, 1409, 1409, 1409, 4960, 4960,
     1409, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     1409, 4960, 4960, 4960, 4960, 4960, 1409, 4960, 4960, 4960,
     4960, 4960, 4960, 1409, 1409, 1412, 1412, 1412, 4960, 4960,
     4960, 1412, 4960, 4960, 4960, 4960, 4960, 4960, 1412, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1412, 4960, 4960,
     4960, 4960, 4960, 4960, 1412, 1412, 1418, 1418, 1418, 4960,
     4960, 4960, 4960, 4960, 4960, 1418, 4960, 4960, 1418, 1418,
     4960, 1418, 1418, 1418, 1418, 4960, 4960, 4960, 1418, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 1418, 1424, 1424, 1424,
     4960, 4960, 4960, 1424, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1424,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1424, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 4960, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 4960, 1428, 1428, 1428,
     1434, 1434, 1434, 4960, 4960, 4960, 1434, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1434, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     1434, 1437, 1437, 1437, 1437, 4960, 4960, 1437, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1437, 4960, 4960,
     4960, 4960, 4960, 1437, 4960, 4960, 4960, 4960, 4960, 4960,
     1437, 1437, 1445, 1445, 1445, 4960, 4960, 4960, 4960, 4960,
     4960, 1445, 4960, 4960, 4960, 4960, 4960, 1445, 1445, 4960,
     4960, 4960, 4960, 4960, 1445, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1445, 1455, 4960, 4960, 4960, 1455, 4960, 1455,
     4960, 4960, 1455, 4960, 4960, 4960, 1455, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1455, 1458, 1458, 4960, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,

     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1478, 1478, 1478,
     4960, 4960, 4960, 1478, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 1478, 4960, 4960, 4960, 1478,
     4960, 4960, 4960, 4960, 1478, 4960, 4960, 1478, 1493, 1493,
     1493, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1493, 4960, 1493, 1493, 4960, 4960, 4960, 4960, 4960,
     1493, 4960, 1493, 4960, 4960, 4960, 4960, 4960, 1493, 1503,
     1503, 4960, 1503, 1503, 1503, 1503, 1503, 1503, 4960, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,

     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1537, 1537, 1537, 4960, 4960, 4960, 1537, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1537, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1537, 1544, 1544, 1544, 1544, 4960, 4960, 1544, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1544, 4960,
     4960, 4960, 4960, 4960, 1544, 4960, 4960, 4960, 4960, 4960,
     4960, 1544, 1544, 1552, 1552, 1552, 4960, 4960, 4960, 1552,
     1552, 4960, 4960, 4960, 1552, 4960, 4960, 4960, 4960, 1552,
     4960, 4960, 4960, 4960, 4960, 1552, 4960, 4960, 4960, 1552,

     4960, 4960, 4960, 1552, 1570, 1570, 1570, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1570,
     1570, 4960, 1570, 4960, 4960, 4960, 1570, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1570, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1608, 1608, 4960,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 4960, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1617,

     1617, 1617, 4960, 4960, 4960, 1617, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1617, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1617,
     1620, 1620, 1620, 1620, 4960, 4960, 1620, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 1620, 4960, 4960, 4960,
     4960, 4960, 1620, 4960, 4960, 4960, 4960, 4960, 4960, 1620,
     1620, 1623, 1623, 1623, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 1623, 1623, 4960, 1623,
     4960, 4960, 4960, 1623, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1623, 1672, 1672, 4960, 4960, 1672, 4960, 4960, 1672,

     1672, 4960, 1672, 1672, 1672, 1672, 1672, 4960, 1672, 1672,
     1672, 4960, 1672, 1672, 4960, 1672, 1672, 1672, 1672, 1672,
     4960, 4960, 1672, 1672, 1676, 1676, 4960, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1678, 1678, 4960, 1678,
     1678, 1678, 1678, 1678, 1678, 4960, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1689, 1689,
     1689, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 1689, 4960, 1689, 1689, 4960, 4960, 4960, 4960, 4960,
     1689, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1689, 1699,
     1699, 1699, 4960, 4960, 4960, 1699, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1699, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1699,
     1702, 1702, 1702, 1702, 4960, 4960, 1702, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 1702, 4960, 4960, 4960,
     4960, 4960, 1702, 4960, 4960, 4960, 4960, 4960, 4960, 1702,
     1702, 1704, 1704, 1704, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 1704, 1704, 4960, 4960,

     4960, 4960, 4960, 1704, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1704, 1705, 1705, 4960, 1705, 1705, 4960, 4960, 1705,
     1705, 4960, 1705, 1705, 1705, 1705, 1705, 4960, 1705, 1705,
     1705, 4960, 1705, 1705, 4960, 1705, 1705, 4960, 1705, 1705,
     4960, 4960, 1705, 1705, 1708, 1708, 4960, 1708, 1708, 1708,
     1708, 1708, 1708, 4960, 1708, 1708, 1708, 1708, 1708, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1727, 1727, 4960, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,

     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1731, 1731,
     1731, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1731, 4960, 4960, 4960, 4960, 4960, 4960,
     1731, 4960, 4960, 4960, 4960, 1731, 4960, 4960, 1731, 1740,
     1740, 4960, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 4960, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,

     1746, 1746, 1746, 1753, 1753, 4960, 1753, 1753, 4960, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 4960, 1753, 4960,
     1753, 1753, 1753, 1753, 1753, 1756, 1756, 4960, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1768, 4960, 4960,
     4960, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 4960,
     1768, 4960, 4960, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1778,

     4960, 1778, 4960, 4960, 4960, 4960, 4960, 4960, 1778, 4960,
     1778, 4960, 4960, 4960, 4960, 4960, 1778, 1782, 1782, 1782,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     1782, 4960, 1782, 4960, 4960, 4960, 4960, 4960, 4960, 1782,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1782, 1785, 1785,
     1785, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1785, 4960, 4960, 4960, 4960, 4960, 4960,
     1785, 4960, 1785, 4960, 4960, 4960, 4960, 4960, 1785, 1797,
     1797, 4960, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797,
     1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797,

     1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797,
     1797, 1801, 4960, 4960, 4960, 1801, 4960, 4960, 4960, 4960,
     4960, 4960, 1801, 4960, 4960, 4960, 4960, 4960, 4960, 1801,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1801, 1806, 1806,
     4960, 1806, 1806, 4960, 1806, 1806, 1806, 1806, 1806, 1806,
     1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
     1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
     1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814,
     1814, 4960, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814,

     1814, 1814, 1821, 1821, 1821, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1821, 1821, 4960,
     4960, 4960, 4960, 4960, 1821, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1821, 1823, 1823, 1823, 1823, 1823, 1823, 1823,
     1823, 1823, 1823, 4960, 4960, 1823, 1823, 1823, 1823, 1823,
     1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823,
     1823, 1823, 1823, 1823, 1823, 1838, 1838, 4960, 1838, 4960,
     4960, 4960, 1838, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     1838, 1887, 1887, 1887, 4960, 4960, 4960, 1887, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 1887, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1887, 1890, 1890, 1890, 1890, 4960, 4960, 1890, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1890, 4960,
     4960, 4960, 4960, 4960, 1890, 4960, 4960, 4960, 4960, 4960,
     4960, 1890, 1890, 1892, 1892, 1892, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1892, 1892,
     4960, 4960, 4960, 4960, 4960, 1892, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1892, 1899, 1899, 4960, 1899, 1899, 1899,
     1899, 1899, 1899, 4960, 1899, 1899, 1899, 1899, 1899, 1899,
     1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899,

     1899, 1899, 1899, 1899, 1899, 1899, 1916, 1916, 1916, 4960,
     4960, 4960, 1916, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1916, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 1916, 1919, 1919, 1919,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1919, 4960,
     4960, 4960, 1919, 4960, 4960, 4960, 4960, 4960, 4960, 1919,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1919, 1925, 1925,
     1925, 4960, 4960, 4960, 1925, 1925, 4960, 4960, 4960, 1925,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     1925, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1925, 1927,

     1927, 1927, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1927, 4960, 4960, 4960, 4960, 4960,
     4960, 1927, 1927, 4960, 4960, 4960, 4960, 4960, 4960, 1927,
     1937, 1937, 1937, 4960, 4960, 4960, 1937, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1937, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     1937, 1940, 1940, 1940, 1940, 4960, 4960, 1940, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1940, 4960, 4960,
     4960, 4960, 4960, 1940, 4960, 4960, 4960, 4960, 4960, 4960,
     1940, 1940, 1942, 1942, 1942, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1942, 1942, 4960,
     4960, 4960, 4960, 4960, 1942, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1942, 1949, 1949, 4960, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1951, 4960, 4960, 4960, 1951,
     4960, 4960, 1951, 1951, 4960, 4960, 4960, 1951, 1951, 1951,
     4960, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1953, 1953, 4960,
     1953, 1953, 1953, 1953, 1953, 1953, 4960, 1953, 1953, 1953,

     1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953,
     1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953, 1973,
     1973, 4960, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973,
     1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973,
     1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973,
     1973, 1977, 1977, 4960, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1978, 1978, 4960, 1978, 1978, 4960, 1978,
     1978, 1978, 4960, 4960, 4960, 1978, 1978, 1978, 1978, 1978,

     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1979, 1979, 4960, 1979, 1979,
     1979, 1979, 1979, 1979, 4960, 1979, 1979, 1979, 1979, 1979,
     1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979,
     1979, 1979, 1979, 1979, 1979, 1979, 1979, 1983, 1983, 4960,
     1983, 1983, 4960, 1983, 1983, 1983, 4960, 1983, 1983, 1983,
     1983, 1983, 4960, 1983, 1983, 1983, 1983, 1983, 1983, 1983,
     1983, 1983, 1983, 1983, 1983, 4960, 4960, 1983, 1983, 1984,
     1984, 4960, 1984, 1984, 1984, 1984, 1984, 1984, 4960, 1984,
     1984, 1984, 1984, 1984, 1984, 1984, 1984, 1984, 1984, 1984,

     1984, 1984, 1984, 1984, 1984, 1984, 1984, 1984, 1984, 1984,
     1984, 1986, 1986, 4960, 1986, 1986, 4960, 1986, 1986, 1986,
     4960, 4960, 4960, 1986, 1986, 1986, 4960, 1986, 1986, 1986,
     1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986,
     1986, 1986, 1986, 1987, 1987, 4960, 1987, 1987, 1987, 1987,
     1987, 1987, 4960, 1987, 1987, 1987, 1987, 1987, 1987, 1987,
     1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987,
     1987, 1987, 1987, 1987, 1987, 1989, 1989, 4960, 1989, 1989,
     4960, 1989, 1989, 1989, 4960, 1989, 1989, 1989, 4960, 1989,
     4960, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989,

     1989, 1989, 1989, 4960, 4960, 1989, 1989, 1990, 1990, 4960,
     1990, 1990, 1990, 1990, 1990, 1990, 4960, 1990, 1990, 1990,
     1990, 1990, 1990, 1990, 1990, 1990, 1990, 1990, 1990, 1990,
     1990, 1990, 1990, 1990, 1990, 1990, 1990, 1990, 1990, 2001,
     2001, 4960, 2001, 2001, 2001, 2001, 2001, 2001, 4960, 2001,
     2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001,
     2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001,
     2001, 2011, 2011, 4960, 2011, 2011, 4960, 2011, 2011, 2011,
     4960, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011,
     2011, 2011, 2011, 2011, 2011, 2011, 4960, 2011, 2011, 2011,

     2011, 2011, 2011, 2014, 2014, 4960, 2014, 2014, 2014, 2014,
     2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014,
     2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014,
     2014, 2014, 2014, 2014, 2014, 2015, 2015, 4960, 2015, 2015,
     4960, 2015, 2015, 2015, 4960, 4960, 4960, 2015, 2015, 2015,
     4960, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
     2015, 2015, 2015, 2015, 2015, 2015, 2015, 2018, 2018, 4960,
     2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 4960,
     2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 4960,
     2018, 2018, 4960, 2018, 2018, 2018, 2018, 2018, 2018, 2026,

     2026, 4960, 2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026,
     2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026,
     2026, 4960, 2026, 2026, 4960, 2026, 2026, 2026, 2026, 2026,
     2026, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051,
     2051, 2051, 4960, 2051, 2051, 2051, 2051, 2051, 2051, 2051,
     2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051,
     2051, 2051, 2051, 2052, 4960, 2052, 2052, 2052, 2052, 2052,
     2052, 2052, 2052, 4960, 4960, 2052, 2052, 2052, 2052, 2052,
     2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 4960, 2052,
     2052, 2052, 2052, 2052, 2052, 2056, 2056, 4960, 2056, 2056,

     2056, 2056, 2056, 2056, 2056, 2056, 4960, 2056, 2056, 2056,
     2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056,
     2056, 2056, 2056, 2056, 2056, 2056, 2056, 2057, 4960, 2057,
     2057, 2057, 2057, 2057, 2057, 2057, 2057, 4960, 4960, 2057,
     2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057,
     2057, 2057, 4960, 2057, 2057, 2057, 2057, 2057, 2057, 2071,
     2071, 2071, 4960, 4960, 4960, 2071, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 2071, 2071, 4960, 4960, 4960, 4960, 4960, 4960, 2071,
     2077, 2077, 2077, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     2077, 4960, 2077, 4960, 4960, 2077, 4960, 4960, 4960, 4960,
     4960, 4960, 2077, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     2077, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078,
     2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078,
     2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078,
     2078, 2078, 2078, 2083, 2083, 2083, 4960, 4960, 4960, 2083,
     4960, 4960, 2083, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2083, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 2083, 2087, 2087, 2087, 4960, 4960, 4960,
     2087, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 2087, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 2087, 2090, 2090, 2090, 4960, 4960,
     4960, 4960, 4960, 4960, 2090, 4960, 4960, 4960, 4960, 4960,
     2090, 4960, 2090, 4960, 4960, 4960, 4960, 2090, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2090, 2095, 4960, 4960, 4960,
     4960, 4960, 2095, 2095, 4960, 4960, 4960, 2095, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2095, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 2095, 2101, 2101, 2101,
     4960, 4960, 4960, 2101, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2101,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2101, 2104, 2104,
     2104, 2104, 4960, 4960, 2104, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 2104, 4960, 4960, 4960, 4960, 4960,
     2104, 4960, 4960, 4960, 4960, 4960, 4960, 2104, 2104, 2106,
     2106, 2106, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 2106, 2106, 4960, 4960, 4960, 4960,
     4960, 2106, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2106,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,

     2116, 2116, 2124, 2124, 4960, 2124, 2124, 2124, 2124, 2124,
     2124, 2124, 2124, 2124, 4960, 2124, 2124, 4960, 2124, 2124,
     2124, 2124, 2124, 2124, 4960, 2124, 2124, 4960, 2124, 2124,
     2124, 2124, 4960, 2124, 2149, 2149, 2149, 2149, 2149, 2149,
     2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149,
     2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149,
     2149, 2149, 2149, 2149, 2149, 2149, 2151, 2151, 4960, 2151,
     2151, 2151, 2151, 4960, 2151, 2151, 2151, 2151, 4960, 2151,
     2151, 4960, 2151, 2151, 2151, 4960, 2151, 2151, 4960, 2151,
     2151, 4960, 4960, 2151, 2151, 2151, 4960, 2151, 2165, 2165,

     2165, 4960, 4960, 4960, 2165, 4960, 4960, 2165, 4960, 2165,
     4960, 4960, 2165, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     2165, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2165, 1391,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1391, 4960,
     4960, 4960, 4960, 4960, 1391, 4960, 4960, 4960, 4960, 4960,
     4960, 1391, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1391,
     1412, 1412, 1412, 4960, 4960, 4960, 1412, 4960, 4960, 4960,
     4960, 4960, 4960, 1412, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1412, 4960, 4960, 4960, 4960, 4960, 4960, 1412,
     1412, 1405, 1405, 1405, 4960, 4960, 4960, 1405, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1405, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1405, 2170, 2170, 2170, 4960, 4960, 4960, 4960, 4960,
     4960, 2170, 4960, 4960, 2170, 4960, 4960, 2170, 4960, 2170,
     2170, 4960, 4960, 4960, 2170, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 2170, 1418, 1418, 1418, 4960, 4960, 4960, 4960,
     4960, 4960, 1418, 4960, 4960, 1418, 1418, 4960, 1418, 1418,
     1418, 1418, 4960, 4960, 4960, 1418, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1418, 2173, 2173, 2173, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2173, 4960, 2173,

     4960, 4960, 4960, 4960, 4960, 4960, 2173, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 2173, 2176, 2176, 2176, 4960, 4960,
     4960, 2176, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2176, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2176, 1424, 1424, 1424, 4960,
     4960, 4960, 1424, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1424, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 1424, 2178, 2178, 2178,
     4960, 4960, 4960, 4960, 4960, 4960, 2178, 4960, 4960, 2178,
     4960, 4960, 2178, 4960, 2178, 2178, 4960, 4960, 4960, 2178,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2178, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 4960, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 4960, 1428, 1428, 1428,
     1434, 1434, 1434, 4960, 4960, 4960, 1434, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1434, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     1434, 2180, 2180, 2180, 4960, 4960, 4960, 4960, 4960, 4960,
     2180, 4960, 4960, 4960, 4960, 4960, 2180, 4960, 4960, 4960,
     4960, 4960, 4960, 2180, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 2180, 1445, 1445, 1445, 4960, 4960, 4960, 4960, 4960,
     4960, 1445, 4960, 4960, 4960, 4960, 4960, 1445, 1445, 4960,
     4960, 4960, 4960, 4960, 1445, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1445, 1455, 4960, 4960, 4960, 1455, 4960, 1455,
     4960, 4960, 1455, 4960, 4960, 4960, 1455, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1455, 1458, 1458, 4960, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1478, 1478, 1478,
     4960, 4960, 4960, 1478, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 1478, 4960, 4960, 4960, 1478,
     4960, 4960, 4960, 4960, 1478, 4960, 4960, 1478, 2199, 2199,
     2199, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 2199, 4960, 2199, 2199, 4960, 4960, 4960, 4960, 4960,
     2199, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2199, 1493,
     1493, 1493, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1493, 4960, 1493, 1493, 4960, 4960, 4960, 4960,
     4960, 1493, 4960, 1493, 4960, 4960, 4960, 4960, 4960, 1493,
     2203, 2203, 2203, 4960, 4960, 4960, 2203, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 2203, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     2203, 2213, 2213, 4960, 2213, 2213, 2213, 2213, 2213, 2213,
     2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213,
     2213, 2213, 2213, 2213, 2213, 2213, 4960, 2213, 2213, 2213,
     2213, 2213, 2213, 2215, 2215, 4960, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2215, 2215, 2215, 2215, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1537, 1537, 1537,
     4960, 4960, 4960, 1537, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1537,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1537, 2259, 2259,
     2259, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 2259, 4960, 4960, 2259, 4960, 4960, 4960,
     2259, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2259, 1570,
     1570, 1570, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1570, 1570, 4960, 1570, 4960, 4960,
     4960, 1570, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1570,

     2263, 2263, 4960, 2263, 2263, 2263, 2263, 2263, 2263, 2263,
     2263, 2263, 2263, 2263, 2263, 2263, 2263, 2263, 2263, 2263,
     2263, 2263, 2263, 2263, 2263, 2263, 2263, 2263, 2263, 2263,
     2263, 2263, 1552, 1552, 1552, 4960, 4960, 4960, 1552, 1552,
     4960, 4960, 4960, 1552, 4960, 4960, 4960, 4960, 1552, 4960,
     4960, 4960, 4960, 4960, 1552, 4960, 4960, 4960, 1552, 4960,
     4960, 4960, 1552, 2270, 2270, 2270, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 2270, 2270, 4960, 4960, 4960, 2270, 2270,
     4960, 2270, 4960, 4960, 4960, 2270, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 2270, 2288, 2288, 2288, 4960, 4960, 4960,

     4960, 4960, 4960, 2288, 4960, 4960, 4960, 2288, 4960, 2288,
     4960, 4960, 4960, 4960, 4960, 4960, 2288, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 2288, 1608, 1608, 4960, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 4960, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1617, 1617, 1617,
     4960, 4960, 4960, 1617, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1617,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1617, 2350, 2350,
     2350, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 2350, 4960, 4960, 2350, 4960, 4960, 4960,
     2350, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2350, 1623,
     1623, 1623, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1623, 1623, 4960, 1623, 4960, 4960,
     4960, 1623, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1623,
     1672, 1672, 4960, 4960, 1672, 4960, 4960, 1672, 1672, 4960,
     1672, 1672, 1672, 1672, 1672, 4960, 1672, 1672, 1672, 4960,
     1672, 1672, 4960, 1672, 1672, 1672, 1672, 1672, 4960, 4960,
     1672, 1672, 1676, 1676, 4960, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,

     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 2392, 2392, 4960, 2392, 2392, 2392,
     2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
     2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392, 4960,
     2392, 2392, 2392, 2392, 2392, 2392, 2394, 2394, 4960, 2394,
     2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394,
     2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394,
     2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2399, 2399,
     4960, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399,
     2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399,

     2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399,
     1689, 1689, 1689, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1689, 4960, 1689, 1689, 4960, 4960, 4960,
     4960, 4960, 1689, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     1689, 1686, 1686, 1686, 4960, 4960, 4960, 1686, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1686, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1686, 1699, 1699, 1699, 4960, 4960, 4960, 1699, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1699, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 1699, 1704, 1704, 1704, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1704, 1704,
     4960, 4960, 4960, 4960, 4960, 1704, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1704, 1705, 1705, 4960, 1705, 1705, 4960,
     4960, 1705, 1705, 4960, 1705, 1705, 1705, 1705, 1705, 4960,
     1705, 1705, 1705, 4960, 1705, 1705, 4960, 1705, 1705, 4960,
     1705, 1705, 4960, 4960, 1705, 1705, 2412, 2412, 4960, 2412,
     2412, 2412, 2412, 2412, 2412, 2412, 2412, 2412, 2412, 2412,
     2412, 2412, 2412, 2412, 2412, 2412, 2412, 2412, 2412, 2412,
     2412, 4960, 2412, 2412, 2412, 2412, 2412, 2412, 2414, 2414,

     4960, 2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414,
     2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414,
     2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414,
     1731, 1731, 1731, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 1731, 4960, 4960, 4960, 4960,
     4960, 4960, 1731, 4960, 4960, 4960, 4960, 1731, 4960, 4960,
     1731, 1740, 1740, 4960, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 4960, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1746, 1746, 1746, 1746, 1746, 1746, 1746,

     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1746, 1753, 1753, 4960, 1753, 1753,
     4960, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 4960,
     1753, 4960, 1753, 1753, 1753, 1753, 1753, 1756, 1756, 4960,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1768,
     4960, 4960, 4960, 1768, 1768, 1768, 1768, 1768, 1768, 1768,

     1768, 4960, 1768, 4960, 4960, 1768, 1768, 1768, 1768, 1768,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1778, 4960, 1778, 4960, 4960, 4960, 4960, 4960, 4960,
     1778, 4960, 1778, 4960, 4960, 4960, 4960, 4960, 1778, 1782,
     1782, 1782, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1782, 4960, 1782, 4960, 4960, 4960, 4960, 4960,
     4960, 1782, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1782,
     2437, 2437, 2437, 4960, 4960, 4960, 2437, 4960, 4960, 4960,
     4960, 2437, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 2437, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     2437, 1785, 1785, 1785, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 1785, 4960, 4960, 4960,
     4960, 4960, 4960, 1785, 4960, 1785, 4960, 4960, 4960, 4960,
     4960, 1785, 1783, 1783, 1783, 4960, 4960, 4960, 1783, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1783, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1783, 1797, 1797, 4960, 1797, 1797, 1797, 1797,
     1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797,
     1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797,
     1797, 1797, 1797, 1797, 1797, 1801, 4960, 4960, 4960, 1801,

     4960, 4960, 4960, 4960, 4960, 4960, 1801, 4960, 4960, 4960,
     4960, 4960, 4960, 1801, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1801, 1806, 1806, 4960, 1806, 1806, 4960, 1806, 1806,
     1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
     1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
     1806, 1806, 1806, 1806, 1814, 1814, 1814, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 4960, 1814, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1821, 1821, 1821, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 1821, 1821, 4960, 4960, 4960, 4960, 4960, 1821, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 1821, 1823, 1823, 1823,
     1823, 1823, 1823, 1823, 1823, 1823, 1823, 4960, 4960, 1823,
     1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823,
     1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823, 1838,
     1838, 4960, 1838, 4960, 4960, 4960, 1838, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1838, 2468, 4960, 4960, 4960, 4960,
     4960, 4960, 2468, 4960, 4960, 4960, 2468, 2468, 4960, 4960,
     2468, 2468, 4960, 4960, 4960, 2468, 4960, 2468, 1887, 1887,
     1887, 4960, 4960, 4960, 1887, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     1887, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1887, 1892,
     1892, 1892, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1892, 1892, 4960, 4960, 4960, 4960,
     4960, 1892, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1892,
     2483, 2483, 4960, 2483, 2483, 2483, 2483, 2483, 2483, 2483,
     2483, 2483, 2483, 2483, 2483, 2483, 2483, 2483, 2483, 2483,
     2483, 2483, 2483, 2483, 2483, 4960, 2483, 2483, 2483, 2483,
     2483, 2483, 2485, 2485, 4960, 2485, 2485, 2485, 2485, 2485,
     2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485,

     2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485,
     2485, 2485, 2485, 2485, 2493, 4960, 2493, 2493, 2493, 2493,
     2493, 2493, 2493, 2493, 2493, 4960, 2493, 2493, 2493, 2493,
     2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493, 4960,
     2493, 2493, 2493, 2493, 2493, 2493, 1916, 1916, 1916, 4960,
     4960, 4960, 1916, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1916, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 1916, 1919, 1919, 1919,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1919, 4960,
     4960, 4960, 1919, 4960, 4960, 4960, 4960, 4960, 4960, 1919,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1919, 1925, 1925,
     1925, 4960, 4960, 4960, 1925, 1925, 4960, 4960, 4960, 1925,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     1925, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1925, 1927,
     1927, 1927, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1927, 4960, 4960, 4960, 4960, 4960,
     4960, 1927, 1927, 4960, 4960, 4960, 4960, 4960, 4960, 1927,
     2496, 2496, 4960, 2496, 2496, 2496, 2496, 2496, 2496, 2496,
     2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496,
     2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496,

     2496, 2496, 2502, 2502, 2502, 4960, 4960, 4960, 2502, 4960,
     4960, 4960, 4960, 2502, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 2502, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 2502, 1937, 1937, 1937, 4960, 4960, 4960, 1937,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 1937, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1937, 1942, 1942, 1942, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1942,
     1942, 4960, 4960, 4960, 4960, 4960, 1942, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1942, 1949, 1949, 4960, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1951, 4960, 4960,
     4960, 1951, 4960, 4960, 1951, 1951, 4960, 4960, 4960, 1951,
     1951, 1951, 4960, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 2508,
     2508, 4960, 2508, 2508, 2508, 2508, 2508, 2508, 2508, 2508,
     2508, 2508, 2508, 2508, 2508, 2508, 2508, 2508, 2508, 2508,
     2508, 2508, 2508, 2508, 4960, 2508, 2508, 2508, 2508, 2508,
     2508, 2510, 2510, 4960, 2510, 2510, 2510, 2510, 2510, 2510,

     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2516, 4960, 2516, 2516, 2516, 2516, 2516,
     2516, 2516, 2516, 2516, 4960, 2516, 2516, 2516, 2516, 2516,
     2516, 2516, 2516, 2516, 2516, 2516, 2516, 2516, 4960, 2516,
     2516, 2516, 2516, 2516, 2516, 1978, 1978, 4960, 1978, 1978,
     4960, 1978, 1978, 1978, 4960, 4960, 4960, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 2519, 2519, 4960,
     2519, 2519, 2519, 2519, 2519, 2519, 2519, 2519, 2519, 2519,

     2519, 2519, 2519, 2519, 2519, 2519, 2519, 2519, 2519, 2519,
     2519, 2519, 4960, 2519, 2519, 2519, 2519, 2519, 2519, 2521,
     2521, 4960, 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521,
     2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521,
     2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521,
     2521, 1983, 1983, 4960, 1983, 1983, 4960, 1983, 1983, 1983,
     4960, 1983, 1983, 1983, 1983, 1983, 4960, 1983, 1983, 1983,
     1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 4960,
     4960, 1983, 1983, 2523, 2523, 4960, 2523, 2523, 2523, 2523,
     2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523,

     2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523, 4960, 2523,
     2523, 2523, 2523, 2523, 2523, 2525, 2525, 4960, 2525, 2525,
     2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525,
     2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525,
     2525, 2525, 2525, 2525, 2525, 2525, 2525, 1986, 1986, 4960,
     1986, 1986, 4960, 1986, 1986, 1986, 4960, 4960, 4960, 1986,
     1986, 1986, 4960, 1986, 1986, 1986, 1986, 1986, 1986, 1986,
     1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986, 2527,
     2527, 4960, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 4960, 2527, 2527, 2527, 2527, 2527,
     2527, 2529, 2529, 4960, 2529, 2529, 2529, 2529, 2529, 2529,
     2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529,
     2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529,
     2529, 2529, 2529, 1989, 1989, 4960, 1989, 1989, 4960, 1989,
     1989, 1989, 4960, 1989, 1989, 1989, 4960, 1989, 4960, 1989,
     1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989,
     1989, 4960, 4960, 1989, 1989, 2531, 2531, 4960, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     4960, 2531, 2531, 2531, 2531, 2531, 2531, 2533, 2533, 4960,
     2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533,
     2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533,
     2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2539,
     2539, 4960, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539,
     2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539,
     2539, 2539, 2539, 2539, 4960, 2539, 2539, 2539, 2539, 2539,
     2539, 2541, 2541, 4960, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,

     2541, 2541, 2541, 2011, 2011, 4960, 2011, 2011, 4960, 2011,
     2011, 2011, 4960, 2011, 2011, 2011, 2011, 2011, 2011, 2011,
     2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 4960, 2011,
     2011, 2011, 2011, 2011, 2011, 2015, 2015, 4960, 2015, 2015,
     4960, 2015, 2015, 2015, 4960, 4960, 4960, 2015, 2015, 2015,
     4960, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
     2015, 2015, 2015, 2015, 2015, 2015, 2015, 2018, 2018, 4960,
     2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 4960,
     2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 4960,
     2018, 2018, 4960, 2018, 2018, 2018, 2018, 2018, 2018, 2026,

     2026, 4960, 2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026,
     2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026,
     2026, 4960, 2026, 2026, 4960, 2026, 2026, 2026, 2026, 2026,
     2026, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051,
     2051, 2051, 4960, 2051, 2051, 2051, 2051, 2051, 2051, 2051,
     2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051,
     2051, 2051, 2051, 2559, 4960, 2559, 2559, 2559, 2559, 2559,
     2559, 2559, 2559, 4960, 4960, 2559, 2559, 2559, 2559, 2559,
     2559, 2559, 2559, 2559, 2559, 2559, 2559, 2559, 4960, 2559,
     2559, 2559, 2559, 2559, 2559, 2056, 2056, 4960, 2056, 2056,

     2056, 2056, 2056, 2056, 2056, 2056, 4960, 2056, 2056, 2056,
     2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056,
     2056, 2056, 2056, 2056, 2056, 2056, 2056, 2561, 4960, 2561,
     2561, 2561, 2561, 2561, 2561, 2561, 2561, 4960, 4960, 2561,
     2561, 2561, 2561, 2561, 2561, 2561, 2561, 2561, 2561, 2561,
     2561, 2561, 4960, 2561, 2561, 2561, 2561, 2561, 2561, 2071,
     2071, 2071, 4960, 4960, 4960, 2071, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 2071, 2071, 4960, 4960, 4960, 4960, 4960, 4960, 2071,
     2572, 2572, 2572, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     2572, 4960, 2572, 4960, 4960, 2572, 4960, 4960, 4960, 4960,
     4960, 4960, 2572, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     2572, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078,
     2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078,
     2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078,
     2078, 2078, 2078, 2077, 2077, 2077, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 2077, 4960, 2077, 4960, 4960, 2077, 4960,
     4960, 4960, 4960, 4960, 4960, 2077, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 2077, 2083, 2083, 2083, 4960, 4960, 4960,
     2083, 4960, 4960, 2083, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 2083, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 2083, 2087, 2087, 2087, 4960, 4960,
     4960, 2087, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2087, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2087, 2576, 2576, 2576, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 2576, 4960, 4960, 4960, 4960, 4960, 4960, 2576, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 2576, 2090, 2090, 2090,
     4960, 4960, 4960, 4960, 4960, 4960, 2090, 4960, 4960, 4960,
     4960, 4960, 2090, 4960, 2090, 4960, 4960, 4960, 4960, 2090,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2090, 2579, 2579,
     2579, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2579, 4960,
     4960, 4960, 4960, 2579, 4960, 4960, 4960, 4960, 4960, 4960,
     2579, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2579, 2101,
     2101, 2101, 4960, 4960, 4960, 2101, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 2101, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2101,
     2106, 2106, 2106, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2106, 2106, 4960, 4960, 4960,
     4960, 4960, 2106, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     2106, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2124, 2124, 4960, 2124, 2124, 2124, 2124,
     2124, 2124, 2124, 2124, 2124, 4960, 2124, 2124, 4960, 2124,
     2124, 2124, 2124, 2124, 2124, 4960, 2124, 2124, 4960, 2124,
     2124, 2124, 2124, 4960, 2124, 2149, 2149, 2149, 2149, 2149,
     2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149,
     4960, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149,
     2149, 2149, 2149, 2149, 2149, 2149, 2149, 2151, 2151, 4960,

     2151, 2151, 2151, 2151, 4960, 2151, 2151, 2151, 2151, 4960,
     2151, 2151, 4960, 2151, 2151, 2151, 4960, 2151, 2151, 4960,
     2151, 2151, 4960, 4960, 2151, 2151, 2151, 4960, 2151, 2165,
     2165, 2165, 4960, 4960, 4960, 2165, 4960, 4960, 2165, 4960,
     2165, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 2165, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2165,
     2170, 2170, 2170, 4960, 4960, 4960, 4960, 4960, 4960, 2170,
     4960, 4960, 2170, 4960, 4960, 2170, 4960, 2170, 2170, 4960,
     4960, 4960, 2170, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     2170, 2620, 2620, 2620, 4960, 4960, 4960, 4960, 4960, 4960,

     2620, 4960, 4960, 2620, 4960, 4960, 2620, 2620, 2620, 2620,
     4960, 4960, 4960, 2620, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 2620, 2173, 2173, 2173, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2173, 4960, 2173, 4960, 4960,
     4960, 4960, 4960, 4960, 2173, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 2173, 2176, 2176, 2176, 4960, 4960, 4960, 2176,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2176, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 2176, 2171, 2171, 2171, 2171, 4960, 4960,
     2171, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     2171, 4960, 4960, 4960, 4960, 4960, 2171, 4960, 4960, 4960,
     4960, 4960, 4960, 2171, 2171, 2178, 2178, 2178, 4960, 4960,
     4960, 4960, 4960, 4960, 2178, 4960, 4960, 2178, 4960, 4960,
     2178, 4960, 2178, 2178, 4960, 4960, 4960, 2178, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2178, 2180, 2180, 2180, 4960,
     4960, 4960, 4960, 4960, 4960, 2180, 4960, 4960, 4960, 4960,
     4960, 2180, 4960, 4960, 4960, 4960, 4960, 4960, 2180, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 2180, 2622, 2622, 2622,
     4960, 4960, 4960, 4960, 4960, 4960, 2622, 4960, 4960, 4960,
     4960, 4960, 2622, 2622, 4960, 4960, 4960, 4960, 4960, 2622,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2622, 2623, 2623,
     2623, 2623, 2623, 2623, 2623, 2623, 2623, 2623, 2623, 2623,
     4960, 2623, 2623, 4960, 2623, 2623, 2623, 2623, 2623, 2623,
     2623, 2623, 2623, 2623, 2623, 2623, 2623, 2623, 2623, 2623,
     2625, 2625, 2625, 2625, 2625, 2625, 2625, 2625, 2625, 2625,
     2625, 2625, 2625, 2625, 2625, 4960, 2625, 2625, 2625, 2625,
     2625, 2625, 2625, 2625, 2625, 2625, 2625, 2625, 2625, 2625,
     2625, 2625, 2181, 2181, 2181, 2181, 4960, 4960, 2181, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2181, 4960,
     4960, 4960, 4960, 4960, 2181, 4960, 4960, 4960, 4960, 4960,

     4960, 2181, 2181, 1445, 1445, 1445, 4960, 4960, 4960, 4960,
     4960, 4960, 1445, 4960, 4960, 4960, 4960, 4960, 1445, 1445,
     4960, 4960, 4960, 4960, 4960, 1445, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1445, 1455, 4960, 4960, 4960, 1455, 4960,
     1455, 4960, 4960, 1455, 4960, 4960, 4960, 1455, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 1455, 2639, 2639, 2639, 2639,
     4960, 4960, 2639, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 2639, 4960, 4960, 4960, 4960, 4960, 2639, 4960,
     4960, 4960, 4960, 4960, 4960, 2639, 2639, 2199, 2199, 2199,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     2199, 4960, 2199, 2199, 4960, 4960, 4960, 4960, 4960, 2199,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2199, 2203, 2203,
     2203, 4960, 4960, 4960, 2203, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     2203, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2203, 2641,
     2641, 2641, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 2641, 2641, 4960, 4960, 4960, 4960,
     4960, 2641, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2641,
     2649, 2649, 4960, 2649, 2649, 2649, 2649, 2649, 2649, 2649,
     2649, 2649, 2649, 2649, 2649, 2649, 2649, 2649, 2649, 2649,

     2649, 2649, 2649, 2649, 2649, 4960, 2649, 2649, 2649, 2649,
     2649, 2649, 1544, 1544, 1544, 1544, 4960, 4960, 1544, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1544, 4960,
     4960, 4960, 4960, 4960, 1544, 4960, 4960, 4960, 4960, 4960,
     4960, 1544, 1544, 2259, 2259, 2259, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2259, 4960,
     4960, 2259, 4960, 4960, 4960, 2259, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 2259, 2263, 2263, 4960, 2263, 2263, 2263,
     2263, 2263, 2263, 2263, 2263, 2263, 2263, 2263, 2263, 2263,
     2263, 2263, 2263, 2263, 2263, 2263, 2263, 2263, 2263, 2263,

     2263, 2263, 2263, 2263, 2263, 2263, 2705, 2705, 2705, 4960,
     4960, 4960, 2705, 2705, 4960, 4960, 4960, 2705, 4960, 4960,
     4960, 4960, 2705, 4960, 4960, 4960, 4960, 4960, 2705, 4960,
     4960, 4960, 2705, 4960, 4960, 4960, 2705, 2708, 2708, 2708,
     4960, 4960, 4960, 2708, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 2708, 4960, 4960, 4960, 4960, 4960, 2708,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2708, 2714, 2714,
     2714, 4960, 4960, 4960, 2714, 4960, 4960, 4960, 2714, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     2714, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2714, 2270,

     2270, 2270, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2270,
     2270, 4960, 4960, 4960, 2270, 2270, 4960, 2270, 4960, 4960,
     4960, 2270, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2270,
     2716, 4960, 4960, 4960, 4960, 4960, 4960, 2716, 4960, 4960,
     4960, 2716, 2716, 4960, 4960, 2716, 2716, 4960, 4960, 4960,
     2716, 4960, 2716, 2718, 2718, 2718, 2718, 2718, 2718, 2718,
     2718, 2718, 2718, 2718, 2718, 4960, 2718, 2718, 4960, 2718,
     2718, 2718, 2718, 2718, 2718, 2718, 2718, 2718, 2718, 2718,
     2718, 2718, 2718, 2718, 2718, 2724, 2724, 2724, 2724, 2724,
     2724, 2724, 2724, 2724, 2724, 2724, 2724, 2724, 2724, 2724,

     4960, 2724, 2724, 2724, 2724, 2724, 2724, 2724, 2724, 2724,
     2724, 2724, 2724, 2724, 2724, 2724, 2724, 2288, 2288, 2288,
     4960, 4960, 4960, 4960, 4960, 4960, 2288, 4960, 4960, 4960,
     2288, 4960, 2288, 4960, 4960, 4960, 4960, 4960, 4960, 2288,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2288, 1570, 1570,
     1570, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1570, 1570, 4960, 1570, 4960, 4960, 4960,
     1570, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1570, 2350,
     2350, 2350, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 2350, 4960, 4960, 2350, 4960, 4960,

     4960, 2350, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2350,
     1620, 1620, 1620, 1620, 4960, 4960, 1620, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 1620, 4960, 4960, 4960,
     4960, 4960, 1620, 4960, 4960, 4960, 4960, 4960, 4960, 1620,
     1620, 2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829,
     2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829,
     2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829,
     2829, 2829, 2829, 1672, 1672, 1672, 1672, 1672, 4960, 1672,
     1672, 1672, 4960, 1672, 1672, 1672, 1672, 1672, 4960, 1672,
     1672, 1672, 4960, 1672, 1672, 4960, 1672, 1672, 1672, 1672,

     1672, 4960, 4960, 1672, 1672, 1676, 1676, 4960, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 2834, 2834, 4960,
     2834, 2834, 2834, 2834, 2834, 2834, 2834, 2834, 2834, 2834,
     2834, 2834, 2834, 2834, 2834, 2834, 2834, 2834, 2834, 2834,
     2834, 2834, 4960, 2834, 2834, 2834, 2834, 2834, 2834, 2399,
     2399, 4960, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399,
     2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399,
     2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399,

     2399, 1686, 1686, 1686, 4960, 4960, 4960, 1686, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1686, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1686, 1689, 1689, 1689, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 1689, 4960, 1689, 1689, 4960,
     4960, 4960, 4960, 4960, 1689, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1689, 1702, 1702, 1702, 1702, 4960, 4960, 1702,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1702,
     4960, 4960, 4960, 4960, 4960, 1702, 4960, 4960, 4960, 4960,
     4960, 4960, 1702, 1702, 2842, 2842, 4960, 2842, 2842, 2842,

     2842, 2842, 2842, 2842, 2842, 2842, 2842, 2842, 2842, 2842,
     2842, 2842, 2842, 2842, 2842, 2842, 2842, 2842, 2842, 4960,
     2842, 2842, 2842, 2842, 2842, 2842, 1768, 4960, 4960, 4960,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 4960, 1768,
     4960, 4960, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 2855, 4960,
     2855, 4960, 4960, 4960, 4960, 4960, 4960, 2855, 4960, 2855,
     4960, 4960, 4960, 4960, 4960, 2855, 2437, 2437, 2437, 4960,
     4960, 4960, 2437, 4960, 4960, 4960, 4960, 2437, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2437, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 2437, 2856, 2856, 2856,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     2856, 4960, 2856, 4960, 4960, 4960, 4960, 4960, 4960, 2856,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2856, 1783, 1783,
     1783, 4960, 4960, 4960, 1783, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     1783, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1783, 2468,
     4960, 4960, 4960, 4960, 4960, 4960, 2468, 4960, 4960, 4960,
     2468, 2468, 4960, 4960, 2468, 2468, 4960, 4960, 4960, 2468,
     4960, 2468, 1838, 1838, 4960, 1838, 4960, 4960, 4960, 1838,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1838, 1890, 1890,
     1890, 1890, 4960, 4960, 1890, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1890, 4960, 4960, 4960, 4960, 4960,
     1890, 4960, 4960, 4960, 4960, 4960, 4960, 1890, 1890, 2887,
     2887, 4960, 2887, 2887, 2887, 2887, 2887, 2887, 2887, 2887,
     2887, 2887, 2887, 2887, 2887, 2887, 2887, 2887, 2887, 2887,
     2887, 2887, 2887, 2887, 4960, 2887, 2887, 2887, 2887, 2887,
     2887, 2890, 4960, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 4960, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2890, 4960, 2890, 2890, 2890,

     2890, 2890, 2890, 2496, 2496, 4960, 2496, 2496, 2496, 2496,
     2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496,
     2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496,
     2496, 2496, 2496, 2496, 2496, 2502, 2502, 2502, 4960, 4960,
     4960, 2502, 4960, 4960, 4960, 4960, 2502, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2502, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2502, 2894, 2894, 2894, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 2894, 2894, 4960, 4960, 4960, 4960, 4960, 2894, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 2894, 1940, 1940, 1940,

     1940, 4960, 4960, 1940, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1940, 4960, 4960, 4960, 4960, 4960, 1940,
     4960, 4960, 4960, 4960, 4960, 4960, 1940, 1940, 2896, 2896,
     4960, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 4960, 2896, 2896, 2896, 2896, 2896, 2896,
     2902, 4960, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 4960, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 4960, 2902, 2902, 2902, 2902,
     2902, 2902, 2904, 2904, 4960, 2904, 2904, 2904, 2904, 2904,

     2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904,
     2904, 2904, 2904, 2904, 2904, 2904, 2904, 4960, 2904, 2904,
     2904, 2904, 2904, 2904, 2907, 2907, 4960, 2907, 2907, 2907,
     2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907,
     2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 4960,
     2907, 2907, 2907, 2907, 2907, 2907, 2910, 2910, 4960, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 4960, 2910, 2910, 2910, 2910, 2910, 2910, 2913, 2913,
     4960, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913,

     2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913,
     2913, 2913, 2913, 4960, 2913, 2913, 2913, 2913, 2913, 2913,
     1989, 1989, 4960, 1989, 1989, 4960, 1989, 1989, 1989, 4960,
     1989, 1989, 1989, 4960, 1989, 4960, 1989, 1989, 1989, 1989,
     1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 4960, 4960,
     1989, 1989, 2919, 2919, 4960, 2919, 2919, 2919, 2919, 2919,
     2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919,
     2919, 2919, 2919, 2919, 2919, 2919, 2919, 4960, 2919, 2919,
     2919, 2919, 2919, 2919, 2932, 2932, 2932, 2932, 2932, 2932,
     2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932,

     4960, 2932, 2932, 2932, 2932, 2932, 2932, 4960, 2932, 2932,
     2932, 2932, 2932, 2932, 2932, 2932, 2933, 4960, 2933, 2933,
     2933, 2933, 2933, 2933, 2933, 2933, 4960, 4960, 2933, 2933,
     2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933,
     2933, 4960, 2933, 2933, 2933, 2933, 2933, 2933, 2935, 4960,
     2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 4960, 4960,
     2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935,
     2935, 2935, 2935, 4960, 2935, 2935, 2935, 2935, 2935, 2935,
     2572, 2572, 2572, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     2572, 4960, 2572, 4960, 4960, 2572, 4960, 4960, 4960, 4960,

     4960, 4960, 2572, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     2572, 2576, 2576, 2576, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 2576, 4960, 4960, 4960,
     4960, 4960, 4960, 2576, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 2576, 2579, 2579, 2579, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 2579, 4960, 4960, 4960, 4960, 2579, 4960, 4960,
     4960, 4960, 4960, 4960, 2579, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 2579, 2104, 2104, 2104, 2104, 4960, 4960, 2104,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2104,
     4960, 4960, 4960, 4960, 4960, 2104, 4960, 4960, 4960, 4960,

     4960, 4960, 2104, 2104, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2124, 2124, 4960, 2124,
     2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 4960, 2124,
     2124, 4960, 2124, 2124, 2124, 2124, 2124, 2124, 4960, 2124,
     2124, 4960, 2124, 2124, 2124, 2124, 4960, 2124, 2957, 2957,
     2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957,
     2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957,
     2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957,

     2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149,
     2149, 2149, 2149, 2149, 2149, 4960, 2149, 2149, 2149, 2149,
     2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149,
     2149, 2149, 2968, 2968, 2968, 2968, 2968, 2968, 2968, 2968,
     2968, 2968, 2968, 2968, 2968, 2968, 2968, 4960, 4960, 2968,
     2968, 2968, 2968, 2968, 2968, 4960, 2968, 2968, 2968, 2968,
     2968, 2968, 2968, 2968, 2151, 2151, 4960, 2151, 2151, 2151,
     2151, 4960, 2151, 2151, 2151, 2151, 4960, 2151, 2151, 4960,
     2151, 2151, 2151, 4960, 2151, 2151, 4960, 2151, 2151, 4960,
     4960, 2151, 2151, 2151, 4960, 2151, 2620, 2620, 2620, 4960,

     4960, 4960, 4960, 4960, 4960, 2620, 4960, 4960, 2620, 4960,
     4960, 2620, 2620, 2620, 2620, 4960, 4960, 4960, 2620, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 2620, 2622, 2622, 2622,
     4960, 4960, 4960, 4960, 4960, 4960, 2622, 4960, 4960, 4960,
     4960, 4960, 2622, 2622, 4960, 4960, 4960, 4960, 4960, 2622,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2622, 1445, 1445,
     1445, 4960, 4960, 4960, 4960, 4960, 4960, 1445, 4960, 4960,
     4960, 4960, 4960, 1445, 1445, 4960, 4960, 4960, 4960, 4960,
     1445, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1445, 1455,
     4960, 4960, 4960, 1455, 4960, 1455, 4960, 4960, 1455, 4960,

     4960, 4960, 1455, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     1455, 2639, 2639, 2639, 2639, 4960, 4960, 2639, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2639, 4960, 4960,
     4960, 4960, 4960, 2639, 4960, 4960, 4960, 4960, 4960, 4960,
     2639, 2639, 2981, 2981, 2981, 4960, 4960, 4960, 2981, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 2981, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 2981, 2985, 2985, 2985, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2985, 2985,
     4960, 4960, 4960, 4960, 4960, 2985, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 2985, 2199, 2199, 2199, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2199, 4960, 2199,
     2199, 4960, 4960, 4960, 4960, 4960, 2199, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 2199, 2641, 2641, 2641, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     2641, 2641, 4960, 4960, 4960, 4960, 4960, 2641, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2641, 2203, 2203, 2203, 4960,
     4960, 4960, 2203, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2203, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 2203, 2992, 2992, 4960,

     2992, 2992, 2992, 2992, 2992, 2992, 2992, 2992, 2992, 2992,
     2992, 2992, 2992, 2992, 2992, 2992, 2992, 2992, 2992, 2992,
     2992, 2992, 4960, 2992, 2992, 2992, 2992, 2992, 2992, 2705,
     2705, 2705, 4960, 4960, 4960, 2705, 2705, 4960, 4960, 4960,
     2705, 4960, 4960, 4960, 4960, 2705, 4960, 4960, 4960, 4960,
     4960, 2705, 4960, 4960, 4960, 2705, 4960, 4960, 4960, 2705,
     3048, 3048, 3048, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 3048, 3048, 4960, 3048, 4960,
     4960, 4960, 3048, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     3048, 2708, 2708, 2708, 4960, 4960, 4960, 2708, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 2708, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 2708, 3052, 3052, 3052, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 3052, 4960, 4960, 4960, 4960, 3052, 3052, 4960,
     3052, 4960, 4960, 4960, 3052, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 3052, 2714, 2714, 2714, 4960, 4960, 4960, 2714,
     4960, 4960, 4960, 2714, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2714, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 2714, 3055, 4960, 4960, 4960, 3055, 4960,
     4960, 4960, 4960, 3055, 4960, 4960, 4960, 4960, 4960, 4960,

     3055, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 3055, 2716,
     4960, 4960, 4960, 4960, 4960, 4960, 2716, 4960, 4960, 4960,
     2716, 2716, 4960, 4960, 2716, 2716, 4960, 4960, 4960, 2716,
     4960, 2716, 3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056,
     3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056,
     3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056,
     3056, 3056, 3056, 3056, 3058, 3058, 4960, 3058, 3058, 3058,
     3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058,
     3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058,
     3058, 3058, 3058, 3058, 3058, 3058, 3061, 3061, 3061, 4960,

     4960, 4960, 4960, 4960, 4960, 3061, 4960, 4960, 4960, 3061,
     4960, 3061, 4960, 4960, 4960, 4960, 4960, 4960, 3061, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 3061, 2288, 2288, 2288,
     4960, 4960, 4960, 4960, 4960, 4960, 2288, 4960, 4960, 4960,
     2288, 4960, 2288, 4960, 4960, 4960, 4960, 4960, 4960, 2288,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2288, 1570, 1570,
     1570, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1570, 1570, 4960, 1570, 4960, 4960, 4960,
     1570, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1570, 2829,
     2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829,

     2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829,
     2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829, 2829,
     2829, 1672, 1672, 1672, 1672, 1672, 4960, 1672, 1672, 1672,
     4960, 1672, 1672, 1672, 1672, 1672, 4960, 1672, 1672, 1672,
     4960, 1672, 1672, 4960, 1672, 1672, 1672, 1672, 1672, 4960,
     4960, 1672, 1672, 1676, 1676, 4960, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 3164, 3164, 4960, 3164, 3164,
     3164, 3164, 3164, 3164, 3164, 3164, 3164, 3164, 3164, 3164,

     3164, 3164, 3164, 3164, 3164, 3164, 3164, 3164, 3164, 3164,
     4960, 3164, 3164, 3164, 3164, 3164, 3164, 3167, 3167, 3167,
     3167, 3167, 3167, 3167, 3167, 3167, 3167, 3167, 3167, 3167,
     3167, 3167, 3167, 4960, 3167, 3167, 3167, 3167, 3167, 3167,
     4960, 3167, 3167, 3167, 3167, 3167, 3167, 3167, 3167, 1689,
     1689, 1689, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1689, 4960, 1689, 1689, 4960, 4960, 4960, 4960,
     4960, 1689, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1689,
     3171, 3171, 4960, 3171, 3171, 3171, 3171, 3171, 3171, 3171,
     3171, 3171, 3171, 3171, 3171, 3171, 3171, 3171, 3171, 3171,

     3171, 3171, 3171, 3171, 3171, 4960, 3171, 3171, 3171, 3171,
     3171, 3171, 1768, 4960, 4960, 4960, 1768, 1768, 1768, 1768,
     1768, 1768, 1768, 1768, 4960, 1768, 4960, 4960, 1768, 1768,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1768, 1768, 1768, 2855, 4960, 2855, 4960, 4960, 4960,
     4960, 4960, 4960, 2855, 4960, 2855, 4960, 4960, 4960, 4960,
     4960, 2855, 2856, 2856, 2856, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2856, 4960, 2856, 4960, 4960,
     4960, 4960, 4960, 4960, 2856, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 2856, 1838, 1838, 4960, 1838, 4960, 4960, 4960,

     1838, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1838, 3202,
     3202, 4960, 3202, 3202, 3202, 3202, 3202, 3202, 3202, 3202,
     3202, 3202, 3202, 3202, 3202, 3202, 3202, 3202, 3202, 3202,
     3202, 3202, 3202, 3202, 4960, 3202, 3202, 3202, 3202, 3202,
     3202, 3204, 4960, 3204, 3204, 3204, 3204, 3204, 3204, 3204,
     3204, 3204, 4960, 3204, 3204, 3204, 3204, 3204, 3204, 3204,
     3204, 3204, 3204, 3204, 3204, 3204, 4960, 3204, 3204, 3204,
     3204, 3204, 3204, 2894, 2894, 2894, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2894, 2894,
     4960, 4960, 4960, 4960, 4960, 2894, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 2894, 3207, 3207, 4960, 3207, 3207, 3207,
     3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207,
     3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 4960,
     3207, 3207, 3207, 3207, 3207, 3207, 3210, 4960, 3210, 3210,
     3210, 3210, 3210, 3210, 3210, 3210, 3210, 4960, 3210, 3210,
     3210, 3210, 3210, 3210, 3210, 3210, 3210, 3210, 3210, 3210,
     3210, 4960, 3210, 3210, 3210, 3210, 3210, 3210, 3211, 3211,
     4960, 3211, 3211, 3211, 3211, 3211, 3211, 3211, 3211, 3211,
     3211, 3211, 3211, 3211, 3211, 3211, 3211, 3211, 3211, 3211,
     3211, 3211, 3211, 4960, 3211, 3211, 3211, 3211, 3211, 3211,

     3213, 3213, 4960, 3213, 3213, 3213, 3213, 3213, 3213, 3213,
     3213, 3213, 3213, 3213, 3213, 3213, 3213, 3213, 3213, 3213,
     3213, 3213, 3213, 3213, 3213, 4960, 3213, 3213, 3213, 3213,
     3213, 3213, 3215, 3215, 4960, 3215, 3215, 3215, 3215, 3215,
     3215, 3215, 3215, 3215, 3215, 3215, 3215, 3215, 3215, 3215,
     3215, 3215, 3215, 3215, 3215, 3215, 3215, 4960, 3215, 3215,
     3215, 3215, 3215, 3215, 3217, 3217, 4960, 3217, 3217, 3217,
     3217, 3217, 3217, 3217, 3217, 3217, 3217, 3217, 3217, 3217,
     3217, 3217, 3217, 3217, 3217, 3217, 3217, 3217, 3217, 4960,
     3217, 3217, 3217, 3217, 3217, 3217, 1989, 1989, 4960, 1989,

     1989, 1989, 1989, 1989, 1989, 4960, 1989, 1989, 1989, 4960,
     1989, 4960, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989,
     1989, 1989, 1989, 1989, 4960, 4960, 1989, 1989, 3221, 3221,
     4960, 3221, 3221, 3221, 3221, 3221, 3221, 3221, 3221, 3221,
     3221, 3221, 3221, 3221, 3221, 3221, 3221, 3221, 3221, 3221,
     3221, 3221, 3221, 4960, 3221, 3221, 3221, 3221, 3221, 3221,
     3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225,
     3225, 3225, 3225, 3225, 3225, 3225, 4960, 3225, 3225, 3225,
     3225, 3225, 3225, 4960, 3225, 3225, 3225, 3225, 3225, 3225,
     3225, 3225, 3238, 4960, 3238, 3238, 3238, 3238, 3238, 3238,

     3238, 3238, 4960, 4960, 3238, 3238, 3238, 3238, 3238, 3238,
     3238, 3238, 3238, 3238, 3238, 3238, 3238, 4960, 3238, 3238,
     3238, 3238, 3238, 3238, 3240, 4960, 3240, 3240, 3240, 3240,
     3240, 3240, 3240, 3240, 4960, 4960, 3240, 3240, 3240, 3240,
     3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 4960,
     3240, 3240, 3240, 3240, 3240, 3240, 2095, 4960, 4960, 4960,
     4960, 4960, 2095, 2095, 4960, 4960, 4960, 2095, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2095, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 2095, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,

     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2124,
     2124, 4960, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,
     2124, 4960, 2124, 2124, 4960, 2124, 2124, 2124, 2124, 2124,
     2124, 4960, 2124, 2124, 4960, 2124, 2124, 2124, 2124, 4960,
     2124, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957,
     2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957,
     2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957,
     2957, 2957, 2957, 3261, 3261, 3261, 3261, 3261, 3261, 3261,
     3261, 3261, 3261, 3261, 3261, 3261, 3261, 3261, 3261, 4960,

     3261, 3261, 3261, 3261, 3261, 3261, 4960, 3261, 3261, 3261,
     3261, 3261, 3261, 3261, 3261, 2151, 2151, 4960, 2151, 2151,
     2151, 2151, 4960, 2151, 2151, 2151, 2151, 4960, 2151, 2151,
     4960, 2151, 2151, 2151, 4960, 2151, 2151, 4960, 2151, 2151,
     4960, 4960, 2151, 2151, 2151, 4960, 2151, 1445, 1445, 1445,
     4960, 4960, 4960, 4960, 4960, 4960, 1445, 4960, 4960, 4960,
     4960, 4960, 1445, 1445, 4960, 4960, 4960, 4960, 4960, 1445,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 1445, 1455, 4960,
     4960, 4960, 1455, 4960, 1455, 4960, 4960, 1455, 4960, 4960,
     4960, 1455, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1455,

     2981, 2981, 2981, 4960, 4960, 4960, 2981, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 2981, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     2981, 2985, 2985, 2985, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 2985, 2985, 4960, 4960,
     4960, 4960, 4960, 2985, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 2985, 2199, 2199, 2199, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2199, 4960, 2199, 2199, 4960,
     4960, 4960, 4960, 4960, 2199, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 2199, 2705, 2705, 2705, 4960, 4960, 4960, 2705,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2705,
     4960, 4960, 4960, 4960, 4960, 2705, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 2705, 3048, 3048, 3048, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 3048,
     3048, 4960, 3048, 4960, 4960, 4960, 3048, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 3048, 3336, 4960, 4960, 4960, 4960,
     4960, 4960, 3336, 4960, 4960, 4960, 3336, 3336, 4960, 4960,
     3336, 3336, 4960, 4960, 4960, 3336, 4960, 3336, 3052, 3052,
     3052, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 3052, 4960,
     4960, 4960, 4960, 3052, 3052, 4960, 3052, 4960, 4960, 4960,

     3052, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 3052, 3055,
     4960, 4960, 4960, 3055, 4960, 4960, 4960, 4960, 3055, 4960,
     4960, 4960, 4960, 4960, 4960, 3055, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 3055, 3056, 3056, 3056, 3056, 3056, 3056,
     3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056,
     3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056,
     3056, 3056, 3056, 3056, 3056, 3056, 3058, 3058, 4960, 3058,
     3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058,
     3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058,
     3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3061, 3061,

     3061, 4960, 4960, 4960, 4960, 4960, 4960, 3061, 4960, 4960,
     4960, 3061, 4960, 3061, 4960, 4960, 4960, 4960, 4960, 4960,
     3061, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 3061, 2288,
     2288, 2288, 4960, 4960, 4960, 4960, 4960, 4960, 2288, 4960,
     4960, 4960, 2288, 4960, 2288, 4960, 4960, 4960, 4960, 4960,
     4960, 2288, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2288,
     1570, 1570, 1570, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 1570, 1570, 4960, 1570, 4960,
     4960, 4960, 1570, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     1570, 1672, 1672, 1672, 1672, 1672, 4960, 1672, 1672, 1672,

     4960, 1672, 1672, 1672, 1672, 1672, 4960, 1672, 1672, 1672,
     4960, 1672, 1672, 4960, 1672, 1672, 1672, 1672, 1672, 4960,
     4960, 1672, 1672, 1676, 1676, 4960, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1689, 1689, 1689, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1689, 4960,
     1689, 1689, 4960, 4960, 4960, 4960, 4960, 1689, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 1689, 1762, 1762, 1762, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 1762, 4960, 4960, 4960, 4960, 4960, 4960, 1762, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 1762, 1768, 4960, 4960,
     4960, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 4960,
     1768, 4960, 4960, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1838,
     1838, 4960, 1838, 4960, 4960, 4960, 1838, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1838, 3468, 4960, 3468, 3468, 3468,
     3468, 3468, 3468, 3468, 3468, 3468, 4960, 3468, 3468, 3468,
     3468, 3468, 3468, 3468, 3468, 3468, 3468, 3468, 3468, 3468,
     4960, 3468, 3468, 3468, 3468, 3468, 3468, 2502, 2502, 2502,

     4960, 4960, 4960, 2502, 4960, 4960, 4960, 4960, 2502, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 2502,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2502, 3470, 4960,
     3470, 3470, 3470, 3470, 3470, 3470, 3470, 3470, 3470, 4960,
     3470, 3470, 3470, 3470, 3470, 3470, 3470, 3470, 3470, 3470,
     3470, 3470, 3470, 4960, 3470, 3470, 3470, 3470, 3470, 3470,
     3471, 3471, 4960, 3471, 3471, 4960, 3471, 3471, 3471, 3471,
     3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471,
     3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471,
     3471, 3471, 3486, 4960, 3486, 3486, 3486, 3486, 3486, 3486,

     3486, 3486, 4960, 4960, 3486, 3486, 3486, 3486, 3486, 3486,
     3486, 3486, 3486, 3486, 3486, 3486, 3486, 4960, 3486, 3486,
     3486, 3486, 3486, 3486, 3488, 4960, 3488, 3488, 3488, 3488,
     3488, 3488, 3488, 3488, 4960, 4960, 3488, 3488, 3488, 3488,
     3488, 3488, 3488, 3488, 3488, 3488, 3488, 3488, 3488, 4960,
     3488, 3488, 3488, 3488, 3488, 3488, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
     2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2124, 2124,
     4960, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,

     4960, 2124, 2124, 4960, 2124, 2124, 2124, 2124, 2124, 2124,
     4960, 2124, 2124, 4960, 2124, 2124, 2124, 2124, 4960, 2124,
     1445, 1445, 1445, 4960, 4960, 4960, 4960, 4960, 4960, 1445,
     4960, 4960, 4960, 4960, 4960, 1445, 1445, 4960, 4960, 4960,
     4960, 4960, 1445, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     1445, 2639, 2639, 2639, 2639, 4960, 4960, 2639, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2639, 4960, 4960,
     4960, 4960, 4960, 2639, 4960, 4960, 4960, 4960, 4960, 4960,
     2639, 2639, 2199, 2199, 2199, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2199, 4960, 2199, 2199, 4960,

     4960, 4960, 4960, 4960, 2199, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 2199, 2705, 2705, 2705, 4960, 4960, 4960, 2705,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 2705, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 2705, 3336, 4960, 4960, 4960, 4960, 4960,
     4960, 3336, 4960, 4960, 4960, 3336, 3336, 4960, 4960, 3336,
     3336, 4960, 4960, 4960, 3336, 4960, 3336, 2288, 2288, 2288,
     4960, 4960, 4960, 4960, 4960, 4960, 2288, 4960, 4960, 4960,
     2288, 4960, 2288, 4960, 4960, 4960, 4960, 4960, 4960, 2288,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 2288, 1570, 1570,

     1570, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 1570, 1570, 4960, 1570, 4960, 4960, 4960,
     1570, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1570, 1672,
     1672, 1672, 1672, 1672, 4960, 1672, 1672, 1672, 4960, 1672,
     1672, 1672, 1672, 1672, 4960, 1672, 1672, 1672, 4960, 1672,
     1672, 4960, 1672, 1672, 1672, 1672, 1672, 4960, 4960, 1672,
     1672, 1689, 1689, 1689, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 1689, 4960, 1689, 1689, 4960, 4960,
     4960, 4960, 4960, 1689, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 1689, 1768, 4960, 4960, 4960, 1768, 1768, 1768, 1768,

     1768, 1768, 1768, 1768, 4960, 1768, 4960, 4960, 1768, 1768,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1768, 1768, 1768, 1838, 1838, 4960, 1838, 4960, 4960,
     4960, 1838, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 1838,
     3703, 4960, 3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703,
     3703, 4960, 3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703,
     3703, 3703, 3703, 3703, 3703, 4960, 3703, 3703, 3703, 3703,
     3703, 3703, 3705, 4960, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 4960, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 4960, 3705, 3705,

     3705, 3705, 3705, 3705, 3471, 3471, 4960, 3471, 3471, 3471,
     3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471,
     3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471,
     3471, 3471, 3471, 3471, 3471, 3471, 3721, 4960, 3721, 3721,
     3721, 3721, 3721, 3721, 3721, 3721, 4960, 4960, 3721, 3721,
     3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721,
     3721, 4960, 3721, 3721, 3721, 3721, 3721, 3721, 3723, 4960,
     3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723, 4960, 4960,
     3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723,
     3723, 3723, 3723, 4960, 3723, 3723, 3723, 3723, 3723, 3723,

     2124, 2124, 4960, 2124, 2124, 2124, 2124, 2124, 2124, 2124,
     2124, 2124, 4960, 2124, 2124, 4960, 2124, 2124, 2124, 2124,
     2124, 2124, 4960, 2124, 2124, 4960, 2124, 2124, 2124, 2124,
     4960, 2124, 1445, 1445, 1445, 4960, 4960, 4960, 4960, 4960,
     4960, 1445, 4960, 4960, 4960, 4960, 4960, 1445, 1445, 4960,
     4960, 4960, 4960, 4960, 1445, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 1445, 3915, 4960, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 4960, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 4960, 3915,
     3915, 3915, 3915, 3915, 3915, 3917, 4960, 3917, 3917, 3917,

     3917, 3917, 3917, 3917, 3917, 3917, 4960, 3917, 3917, 3917,
     3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917,
     4960, 3917, 3917, 3917, 3917, 3917, 3917, 3929, 4960, 3929,
     3929, 3929, 3929, 3929, 3929, 3929, 3929, 4960, 4960, 3929,
     3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929,
     3929, 3929, 4960, 3929, 3929, 3929, 3929, 3929, 3929, 3931,
     4960, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 4960,
     4960, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931,
     3931, 3931, 3931, 3931, 4960, 3931, 3931, 3931, 3931, 3931,
     3931, 3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949,

     3949, 3949, 3949, 3949, 3949, 3949, 3949, 4960, 3949, 3949,
     3949, 3949, 3949, 3949, 4960, 3949, 3949, 3949, 3949, 3949,
     3949, 3949, 3949, 4103, 4960, 4103, 4103, 4103, 4103, 4103,
     4103, 4103, 4103, 4103, 4960, 4103, 4103, 4103, 4103, 4103,
     4103, 4103, 4103, 4103, 4103, 4103, 4103, 4103, 4960, 4103,
     4103, 4103, 4103, 4103, 4103, 4105, 4960, 4105, 4105, 4105,
     4105, 4105, 4105, 4105, 4105, 4105, 4960, 4105, 4105, 4105,
     4105, 4105, 4105, 4105, 4105, 4105, 4105, 4105, 4105, 4105,
     4960, 4105, 4105, 4105, 4105, 4105, 4105, 4116, 4960, 4116,
     4116, 4116, 4116, 4116, 4116, 4116, 4116, 4960, 4960, 4116,

     4116, 4116, 4116, 4116, 4116, 4116, 4116, 4116, 4116, 4116,
     4116, 4116, 4960, 4116, 4116, 4116, 4116, 4116, 4116, 4118,
     4960, 4118, 4118, 4118, 4118, 4118, 4118, 4118, 4118, 4960,
     4960, 4118, 4118, 4118, 4118, 4118, 4118, 4118, 4118, 4118,
     4118, 4118, 4118, 4118, 4960, 4118, 4118, 4118, 4118, 4118,
     4118, 4243, 4960, 4243, 4243, 4243, 4243, 4243, 4243, 4243,
     4243, 4243, 4960, 4243, 4243, 4243, 4243, 4243, 4243, 4243,
     4243, 4243, 4243, 4243, 4243, 4243, 4960, 4243, 4243, 4243,
     4243, 4243, 4243, 4245, 4960, 4245, 4245, 4245, 4245, 4245,
     4245, 4245, 4245, 4245, 4960, 4245, 4245, 4245, 4245, 4245,

     4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245, 4960, 4245,
     4245, 4245, 4245, 4245, 4245, 4256, 4960, 4256, 4256, 4256,
     4256, 4256, 4256, 4256, 4256, 4960, 4960, 4256, 4256, 4256,
     4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256,
     4960, 4256, 4256, 4256, 4256, 4256, 4256, 4258, 4960, 4258,
     4258, 4258, 4258, 4258, 4258, 4258, 4258, 4960, 4960, 4258,
     4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258,
     4258, 4258, 4960, 4258, 4258, 4258, 4258, 4258, 4258, 4203,
     4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,
     4203, 4203, 4203, 4203, 4203, 4960, 4203, 4203, 4203, 4203,

     4203, 4203, 4960, 4203, 4203, 4203, 4203, 4203, 4203, 4203,
     4203, 4350, 4960, 4350, 4350, 4350, 4350, 4350, 4350, 4350,
     4350, 4350, 4960, 4350, 4350, 4350, 4350, 4350, 4350, 4350,
     4350, 4350, 4350, 4350, 4350, 4350, 4960, 4350, 4350, 4350,
     4350, 4350, 4350, 4353, 4960, 4353, 4353, 4353, 4353, 4353,
     4353, 4353, 4353, 4353, 4960, 4353, 4353, 4353, 4353, 4353,
     4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353, 4960, 4353,
     4353, 4353, 4353, 4353, 4353, 4358, 4960, 4358, 4358, 4358,
     4358, 4358, 4358, 4358, 4358, 4960, 4960, 4358, 4358, 4358,
     4358, 4358, 4358, 4358, 4358, 4358, 4358, 4358, 4358, 4358,

     4960, 4358, 4358, 4358, 4358, 4358, 4358, 4360, 4960, 4360,
     4360, 4360, 4360, 4360, 4360, 4360, 4360, 4960, 4960, 4360,
     4360, 4360, 4360, 4360, 4360, 4360, 4360, 4360, 4360, 4360,
     4360, 4360, 4960, 4360, 4360, 4360, 4360, 4360, 4360, 4398,
     4398, 4398, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4398, 4960, 4960, 4960, 4398, 4960,
     4960, 4398, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4398,
     4422, 4960, 4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422,
     4422, 4960, 4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422,
     4422, 4422, 4422, 4422, 4422, 4960, 4422, 4422, 4422, 4422,

     4422, 4422, 4427, 4427, 4427, 4427, 4960, 4960, 4427, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4427, 4960,
     4960, 4960, 4960, 4960, 4427, 4960, 4960, 4960, 4960, 4960,
     4960, 4427, 4427, 4428, 4960, 4428, 4428, 4428, 4428, 4428,
     4428, 4428, 4428, 4428, 4960, 4428, 4428, 4428, 4428, 4428,
     4428, 4428, 4428, 4428, 4428, 4428, 4428, 4428, 4960, 4428,
     4428, 4428, 4428, 4428, 4428, 4431, 4960, 4431, 4431, 4431,
     4431, 4431, 4431, 4431, 4431, 4960, 4960, 4431, 4431, 4431,
     4431, 4431, 4431, 4431, 4431, 4431, 4431, 4431, 4431, 4431,
     4960, 4431, 4431, 4431, 4431, 4431, 4431, 4433, 4960, 4433,

     4433, 4433, 4433, 4433, 4433, 4433, 4433, 4960, 4960, 4433,
     4433, 4433, 4433, 4433, 4433, 4433, 4433, 4433, 4433, 4433,
     4433, 4433, 4960, 4433, 4433, 4433, 4433, 4433, 4433, 4483,
     4960, 4483, 4483, 4483, 4483, 4483, 4483, 4483, 4483, 4483,
     4960, 4483, 4483, 4483, 4483, 4483, 4483, 4483, 4483, 4483,
     4483, 4483, 4483, 4483, 4960, 4483, 4483, 4483, 4483, 4483,
     4483, 4486, 4486, 4486, 4960, 4960, 4960, 4486, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4486, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4486, 4493, 4493, 4493, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4493, 4960, 4493, 4960, 4960, 4493, 4493, 4960,
     4960, 4960, 4960, 4960, 4493, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4493, 4494, 4960, 4494, 4494, 4494, 4494, 4494,
     4494, 4494, 4494, 4494, 4960, 4494, 4494, 4494, 4494, 4494,
     4494, 4494, 4494, 4494, 4494, 4494, 4494, 4494, 4960, 4494,
     4494, 4494, 4494, 4494, 4494, 4496, 4960, 4496, 4496, 4496,
     4496, 4496, 4496, 4496, 4496, 4960, 4960, 4496, 4496, 4496,
     4496, 4496, 4496, 4496, 4496, 4496, 4496, 4496, 4496, 4496,
     4960, 4496, 4496, 4496, 4496, 4496, 4496, 4498, 4960, 4498,
     4498, 4498, 4498, 4498, 4498, 4498, 4498, 4960, 4960, 4498,

     4498, 4498, 4498, 4498, 4498, 4498, 4498, 4498, 4498, 4498,
     4498, 4498, 4960, 4498, 4498, 4498, 4498, 4498, 4498, 4534,
     4960, 4534, 4534, 4534, 4534, 4534, 4534, 4534, 4534, 4534,
     4960, 4534, 4534, 4534, 4534, 4534, 4534, 4534, 4534, 4534,
     4534, 4534, 4534, 4534, 4960, 4534, 4534, 4534, 4534, 4534,
     4534, 4536, 4536, 4536, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4536, 4960, 4536, 4960, 4960, 4536, 4960, 4960, 4960,
     4960, 4960, 4960, 4536, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4536, 4544, 4544, 4544, 4544, 4960, 4960, 4544, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4544, 4960,

     4960, 4960, 4960, 4960, 4544, 4960, 4960, 4960, 4960, 4960,
     4960, 4544, 4544, 4545, 4960, 4545, 4545, 4545, 4545, 4545,
     4545, 4545, 4545, 4545, 4960, 4545, 4545, 4545, 4545, 4545,
     4545, 4545, 4545, 4545, 4545, 4545, 4545, 4545, 4960, 4545,
     4545, 4545, 4545, 4545, 4545, 4547, 4960, 4547, 4547, 4547,
     4547, 4547, 4547, 4547, 4547, 4960, 4960, 4547, 4547, 4547,
     4547, 4547, 4547, 4547, 4547, 4547, 4547, 4547, 4547, 4547,
     4960, 4547, 4547, 4547, 4547, 4547, 4547, 4549, 4960, 4549,
     4549, 4549, 4549, 4549, 4549, 4549, 4549, 4960, 4960, 4549,
     4549, 4549, 4549, 4549, 4549, 4549, 4549, 4549, 4549, 4549,

     4549, 4549, 4960, 4549, 4549, 4549, 4549, 4549, 4549, 4584,
     4960, 4584, 4584, 4584, 4584, 4584, 4584, 4584, 4584, 4584,
     4960, 4584, 4584, 4584, 4584, 4584, 4584, 4584, 4584, 4584,
     4584, 4584, 4584, 4584, 4960, 4584, 4584, 4584, 4584, 4584,
     4584, 4587, 4587, 4587, 4960, 4960, 4960, 4587, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4587, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4587, 4592, 4592, 4592, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4592, 4960, 4592, 4960, 4960, 4592, 4592, 4960,
     4960, 4960, 4960, 4960, 4592, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4592, 4593, 4960, 4593, 4593, 4593, 4593, 4593,
     4593, 4593, 4593, 4593, 4960, 4593, 4593, 4593, 4593, 4593,
     4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4960, 4593,
     4593, 4593, 4593, 4593, 4593, 4594, 4960, 4594, 4594, 4594,
     4594, 4594, 4594, 4594, 4594, 4960, 4960, 4594, 4594, 4594,
     4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594,
     4960, 4594, 4594, 4594, 4594, 4594, 4594, 4596, 4960, 4596,
     4596, 4596, 4596, 4596, 4596, 4596, 4596, 4960, 4960, 4596,
     4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596,
     4596, 4596, 4960, 4596, 4596, 4596, 4596, 4596, 4596, 4629,

     4960, 4629, 4629, 4629, 4629, 4629, 4629, 4629, 4629, 4629,
     4960, 4629, 4629, 4629, 4629, 4629, 4629, 4629, 4629, 4629,
     4629, 4629, 4629, 4629, 4960, 4629, 4629, 4629, 4629, 4629,
     4629, 4631, 4631, 4631, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4631, 4960, 4631, 4960, 4960, 4631, 4960, 4960, 4960,
     4960, 4960, 4960, 4631, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4631, 4633, 4960, 4633, 4633, 4633, 4633, 4633, 4633,
     4633, 4633, 4633, 4960, 4633, 4633, 4633, 4633, 4633, 4633,
     4633, 4633, 4633, 4633, 4633, 4633, 4633, 4960, 4633, 4633,
     4633, 4633, 4633, 4633, 4634, 4960, 4634, 4634, 4634, 4634,

     4634, 4634, 4634, 4634, 4960, 4960, 4634, 4634, 4634, 4634,
     4634, 4634, 4634, 4634, 4634, 4634, 4634, 4634, 4634, 4960,
     4634, 4634, 4634, 4634, 4634, 4634, 4636, 4960, 4636, 4636,
     4636, 4636, 4636, 4636, 4636, 4636, 4960, 4960, 4636, 4636,
     4636, 4636, 4636, 4636, 4636, 4636, 4636, 4636, 4636, 4636,
     4636, 4960, 4636, 4636, 4636, 4636, 4636, 4636, 4660, 4960,
     4660, 4660, 4660, 4660, 4660, 4660, 4660, 4660, 4660, 4960,
     4660, 4660, 4660, 4660, 4660, 4660, 4660, 4660, 4660, 4660,
     4660, 4660, 4660, 4960, 4660, 4660, 4660, 4660, 4660, 4660,
     4661, 4960, 4661, 4661, 4661, 4661, 4661, 4661, 4661, 4661,

     4661, 4960, 4661, 4661, 4661, 4661, 4661, 4661, 4661, 4661,
     4661, 4661, 4661, 4661, 4661, 4960, 4661, 4661, 4661, 4661,
     4661, 4661, 4662, 4960, 4662, 4662, 4662, 4662, 4662, 4662,
     4662, 4662, 4960, 4960, 4662, 4662, 4662, 4662, 4662, 4662,
     4662, 4662, 4662, 4662, 4662, 4662, 4662, 4960, 4662, 4662,
     4662, 4662, 4662, 4662, 4664, 4960, 4664, 4664, 4664, 4664,
     4664, 4664, 4664, 4664, 4960, 4960, 4664, 4664, 4664, 4664,
     4664, 4664, 4664, 4664, 4664, 4664, 4664, 4664, 4664, 4960,
     4664, 4664, 4664, 4664, 4664, 4664, 4681, 4960, 4681, 4681,
     4681, 4681, 4681, 4681, 4681, 4681, 4681, 4960, 4681, 4681,

     4681, 4681, 4681, 4681, 4681, 4681, 4681, 4681, 4681, 4681,
     4681, 4960, 4681, 4681, 4681, 4681, 4681, 4681, 4682, 4960,
     4682, 4682, 4682, 4682, 4682, 4682, 4682, 4682, 4682, 4960,
     4682, 4682, 4682, 4682, 4682, 4682, 4682, 4682, 4682, 4682,
     4682, 4682, 4682, 4960, 4682, 4682, 4682, 4682, 4682, 4682,
      337, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960
    } ;

static yyconst flex_int16_t yy_chk[40445] =
    {   0,
        0,    0,    1,    0,    2,    0,    1,    1,    2,    2,
        0,    1,    0,    2,  362,  362,  362,  362,    3,    1,
        4,    2,    3,    3,    4,    4,  343,    3,    3,    4,
        4,  343,  362,    0,    5,    3,  350,    4,    5,    5,
        0,  350,  358,    5,    5,    5,  501,  358,    6,  367,
      501,    5,    6,    6,  367,  368,  368,    6,    6,    6,
      378,  424,    0,  378,  424,    6,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    9,
        9,    9,    9,  389,    9,    9,  690,  690,  389,    9,
       10,   10,   10,   10,   23,   10,   10,    9,   23,   23,
       10,  402,  420,   23,   23,   23,  402,  420,   10,  834,
      430,   23,   37,  834,   24,  430,   37,   37,   24,   24,

       23,   37,   23,   24,   24,   24,   37,  360, 2645,   37,
      360,   24,  372,  372,  372,  372,    9,   37,  360,  372,
       24, 2646,   24,  387,  387,  387,  387,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       19, 1394,   20,  439,   19,   19,   20,   20,  439,   19,
     1394,   20,  370,  370,  370,  370,   38,   19,   43,   20,
       38,   38,   43,   43, 2647,   38,  407,   43,  510,  370,
       38,  447,  407,   38,   97,   43,  447,  370,   97,   97,
      510,   38,  407,   97,   43,  379,  379,  379,  379,  468,
      461,   97,  379,  461,  468,   19, 2648,   20,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   27, 1439,   28,  483,   27,   27,
       28,   28,  483,   27, 1439,   28,  381,  381,  381,  381,
       44,   27,  491,   28,   44,   44,  500,  491,  500,   44,
       49,   49,   49,   49,   55,   49,   49,   44,   55,   55,
       49,  381, 1850,   55,   55,   55,   44,  470,   49, 2649,
      470,   55,  383,  383,  383,  383,  910,  506,  910,  383,

     1850,   27,  506,   28,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       33,   33,   33,   33,  543,   33,   33, 2652,  544,  543,

       33,   34,   34,   34,   34, 2653,   34,   34,   33,  558,
      498,   34,   35,  498,  558,  563,   35,   35,  578,   34,
      563,   35,   35,  578, 1395,  408,   35,  585,  591,   35,
       36,  408,  585,  591,   36,   36,  814,   35, 1395,   36,
       36,  408, 1449,  554,   36,   39,  554,   36,  544,   39,
       39, 1449,   40,  599,   39,   36,   40,   40,  599,   39,
       33,   40,   39,  617,  651, 2248,   40,   33,  617,   40,
       39,   34, 2248,   33,  498,  498,  814,   40,   34,  363,
      363,  363,  363,  408,   34,   50,   50,   50,   50,  628,
       50,   50,  717,  717,  628,   50,  605,  363,   35,   53,

       53,   53,   53,   50,   53,   53,  605,  554,  554,   53,
       53,   53,  609, 1837,   53, 1837,   36,   53,   54,   54,
       54,   54,  609,   54,   54,  651, 1649,  635,   54,   54,
       54,   39,  635,   54,  643, 1649,   54,  643,   40,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   51, 2656,
       52,  645,   51,   51,   52,   52,  645,   51,   51,   52,
       52,  664,   51,  903,   52,   51,  664,   52,  503,  503,
      503,  503,   51,   51,   52,   52,   56,  679,  903,   57,
       56,   56,  679,   57,   57,   56,   56,   56,   57,  677,
       58, 2657,  677,   56,   58,   58,   57,  674, 1533,   58,
      674,   63, 1533,  674,   57,   63,   63,   58,  689,  698,
       63,   63,   64,  689,  698,   58,   64,   64,   63,  706,
      686,   64,   64,  686,  706,  872,   63,   63,  872,   64,

      371,  371,  371,  371,   51,   75,   52,   64,   64,   75,
       75,   76,  722,  722,   75,   76,   76,  371,  685, 1012,
       76,  685,   75,  894,  685,  371,  894, 1226,   76, 1450,
       75,  497,  497,  497,  497,   57,   76, 2658,  497,  577,
      577,  577,  577, 1450, 1226, 1012,   58,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       61,   61,   61,   61,   65,   61,   61,  712,   65,   65,
       61, 2660,  712,   65,   62,   62,   62,   62,   61,   62,
       62,   65,  721,  730,   62,  729,   61,  721,   61,   66,
      729,  747,   62,   66,   66, 1641,  747,  911,   66,  911,
       62,  724,   62,  732,  724, 1641,   66,   67,   67,   67,
       67,   98,   67,   67,  724,   98,   98,   67,  733,   65,

       98,   65,  734, 1077,  736,   67,   77,   61,   98, 1547,
       77,   77,  757, 1547,   67,   77,   61,  757,   67,  730,
      765,   62, 1746,   77,   66,  765,   66,   61,  911, 1077,
       62,   77,   68,   68,   68,   68, 2661,   68,   68,  732,
      773,   62,   68, 1083, 2662,  773,   69,   69,   69,   69,
       68,   69,   69,  811,  733,  811,   69,  781,  734,   68,
      736, 1215,  781,   68,   69,   70,   70,   70,   70, 1083,
       70,   70,  811,   69,   67,   70,   67,   69, 1746,   71,
       71,   71,   71,   70,   71,   71,  792, 1215,  800,   71,
      735,  792,   70,  800, 1241, 1241,   70,   71,   72,   72,

       72,   72,  735,   72,   72, 1500,   71,  735,   72,   78,
       71, 1500,  810,   78,   78,  830,   72,  810,   78,   68,
      830,   68, 1831,  844, 1793,   72,   78,   87,  844,   72,
     1793,   87,   87,   69,   78,   69,   87,   99,   99,   87,
       99, 1831,   99,   99,   87, 2663,  735,   99,  846, 2067,
       99,  851,   70,  846,   70,   99,  851,  100,  100,  860,
      100, 2067,  100,  100,  860, 2119,   71,  100,   71,  105,
      100,  869,  882,  105,  105,  100,  869,  882,  105,  105,
      105,  907, 2119,   87,  907,   72,  105,   72,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   81,   81,  895,   81, 1003,   81,
       81,  895, 1030, 1003,   81,   82,   82, 1030,   82,   85,
       82,   82,   81,   85,   85,   82, 1381, 1381,   85, 1042,

      912,   81,  912,   82, 1042,   81,   85, 1520,   83,   83,
      513,   83,   82,   83,   83, 1520,   82, 1520,   83,   84,
       84, 2664,   84,   86,   84,   84,   83,   86,   86,   84,
     1528,   81,   86, 1022, 1528,   83, 1022,   84, 1022,   83,
       86, 2665,   82,   88, 1053, 1528,   84,   88,   88, 1053,
       84,  912,   88, 2666, 1531,   88,  612,  612,  612,  612,
       88,   81, 1531,   81, 1062,   83,   89,  513, 1531, 1062,
       89,   89,   82,  513,   82,   89,   84,   85,   89,  513,
      513,   90,  513,   89,  612,   90,   90,  113, 2667, 1074,
       90,  113,  113,   90, 1074,   83,  113,   83,   90,   88,

      382,  382,  382,  382,  113, 1089,   84, 2668,   84,  106,
     1089,   86,  114,  106,  106, 2669,  114,  114,  106,  106,
      106,  114,   89,  612, 1149,  382,  106, 1149, 1402,  114,
     2670, 1402,  612,  640,  640,  640,  640,   90,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   93, 1102, 2671,   94,   93,   93, 1102,   94,   94,
       93,   93, 1112,   94,   94,   95,   95, 1112,   93,   95,
       95,   94,   96,   96,   95,  101,   96,   96, 1123,  101,
      101,   96,   95, 1123,  101,  412,  412,  412,  412,   96,
      102, 2672,  101,  103,  102,  102,  104,  103,  103,  102,
      104,  104,  103, 1129, 1139,  104, 1146,  102, 1129, 1139,
      103, 1146,  412,  104,  107,  107,  107,  107,  111,  107,

      107,   95,  111,  111,  107, 1158, 1333,  111,   96, 1333,
     1158,  101,  107, 1167,  915,  111,  915,   93, 1167,   93,
       94,  107,   94,  107, 2673, 1333,  102,  108,  108,  108,
      108,  109,  108,  108,  112,  109,  109,  108,  112,  112,
      109,  109,  109,  112, 1776,  108, 1151, 1227,  109, 1151,
     1227,  112,  412,  111,  108,  111,  108, 1151, 2232,  103,
     1227,  103,  104,  110,  104,  915,  137,  110,  110, 2232,
      137,  137,  110,  110,  110,  137,  115,  115,  115,  115,
      110,  115,  115,  137, 1776, 1177,  115,  115, 1187,  112,
     1177,  112,  137, 1187,  115,  116,  116,  116,  116,  139,

      116,  116, 1197,  139,  139,  116,  116, 1197,  139,  117,
      117,  117,  117,  116,  117,  117,  139, 1204, 1384,  117,
      117, 1384, 1204,  118,  118,  118,  118,  117,  118,  118,
     1645, 1384, 2674,  118,  118,  641,  641,  641,  641, 2675,
     1645,  118,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  121,  914,  122,  914,  121,
      121,  122,  122, 2676,  121, 1778,  122,  570,  570,  570,
      570, 1838,  121, 1838,  122,  123,  123,  123,  123, 1212,
      123,  123,  570, 2433, 1212,  123,  124,  124,  124,  124,
     1225,  124,  124,  123, 1364, 1225,  124,  125,  125,  125,
      125, 2677,  125,  125,  124, 1778,  914,  125, 1234, 1421,
      125, 1364, 1421, 1234,  125,  125,  126,  126,  126,  126,

     1240,  126,  126, 2433, 1364, 1240,  126,  138,  125,  126,
     1249,  138,  138,  126,  126, 1249,  138, 1260, 2678,  123,
     1269,  121, 1260,  122,  138, 1269, 1469,  126, 2679, 1469,
      124,  140, 1276,  138,  125,  140,  140, 1276, 1721, 1721,
      140, 1281,  547,  547,  547,  547, 1281, 1298,  140,  547,
     1737, 1737, 1298,  126,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  135, 1312, 2680,  143,
      135,  135, 1312,  143,  143,  135, 1324, 1332,  143, 2681,
      136, 1324, 1332,  135,  136,  136,  143,  144, 1343,  136,
     1348,  144,  144, 1343,  143, 1348,  144,  136,  147, 1355,
     2682,  148,  147,  147,  144,  148,  148,  147, 1362, 1363,
      148, 1355,  144, 1362, 1363,  147, 1355,  151,  148, 2683,
      152,  151,  151, 1710,  152,  152,  151,  135,  151,  152,
     1803,  152, 1710,  135,  151, 1350, 1350,  152, 1350, 1803,

     1357,  136,  135, 1357,  135,  135,  177,  136, 1739, 1739,
      177,  177,  135, 1350,  135,  177,  136,  177,  136,  136,
     1371, 1480, 2685,  177, 1480, 1371,  136, 1357,  136,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,

      153,  155, 1379, 1748,  156,  155,  155, 1379,  156,  156,
      155,  155,  155,  156,  156,  156, 2686, 1498,  155,  157,
     1498,  156,  158,  157,  157,  161,  158,  158,  157,  161,
      161,  158, 1749,  913,  161,  913,  157, 1351, 1518,  158,
     1351, 1518,  161, 1328, 2687,  157, 1328,  162,  158,  159,
      161,  162,  162,  159,  159, 1351,  162, 1393,  159, 1748,
      159, 1750, 1393, 1506,  162,  167,  159, 1452, 1506,  167,
      167, 1328,  162, 1452,  167,  173,  167,  913,  913,  173,
      173, 2688,  167, 1452,  173,  173,  168, 2123, 1749,  178,
      168,  168,  173,  178,  178,  168, 1508,  168,  178,  167,

      178, 1508, 1311,  168, 2123, 1311,  178, 1328, 2689, 1311,
      159, 1311,  159,  167,  167, 1311,  159, 1750,  167, 1526,
      168, 1675, 1526,  159, 1675, 2244, 1328,  159,  159, 2690,
      159, 2244,  159,  160,  168,  168,  174,  160,  160,  168,
      174,  174,  160, 1694,  160,  174,  174,  179, 1694, 1715,
      160,  179,  179,  174, 1715, 1723,  179,  179,  179, 1440,
     1723,  180, 1440, 1440,  179,  180,  180, 1455, 2691, 1799,
      180,  180,  180, 1455, 1799,  181, 1801, 1440,  180,  181,
      181, 1801,  215, 1455,  181,  181,  215,  215, 2224, 2224,
     1956,  215,  181,  182,  160, 1956,  160,  182,  182,  215,

      160, 1717,  182,  182, 1717, 1811, 1824,  160, 1811, 1824,
      182,  160,  160, 2276,  160, 2276,  160,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,

      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,

      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,

      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,

      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,

      203,  203,  203,  203,  203,  205, 1957, 2692,  206,  205,
      205, 2131,  206,  206,  205, 1957,  205,  206, 1388,  206,
     2693, 1388,  205,  207, 1958,  206,  208,  207,  207, 1388,
      208,  208,  207,  207, 1836,  208,  208, 1836, 1958, 2112,
      207, 2131, 2112,  208,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,

      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      213, 2127, 2694,  214,  213,  213, 2127,  214,  214,  213,
     1389,  213,  214, 1389,  214, 2166, 1524,  213,  216, 2167,
      214, 1389,  216,  216, 2166, 2695, 1524,  216,  639,  639,
      639,  639, 1524, 2167,  639,  216,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  219,
     2249,  220, 2696,  219,  219,  220,  220, 2697,  219,  219,
      220,  220,  649,  649,  649,  649,  219, 2249,  220,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  225, 1843,  226, 1843,  225,
      225,  226,  226, 2698,  225, 2126,  226,  380,  380,  380,
      380, 1844,  225, 1844,  226,  227,  227,  227,  227,  233,
      227,  227, 2126,  233,  233,  227,  227,  227,  233,  233,

      227,  227,  380,  227, 2192, 2126,  233,  627,  627,  627,
      627,  227,  227, 2192,  227,  227,  227, 1843, 2700,  627,
      229,  229,  229,  229, 1844,  229,  229,  259,  227, 2372,
      229,  259,  259, 2217,  227, 2372,  259,  227,  229,  259,
     2701,  227, 2217,  227,  259,  230,  230,  230,  230,  234,
      230,  230,  245,  234,  234,  230,  245,  245,  234,  234,
     2038,  245,  245,  230,  380, 2704,  234,  227, 1391,  245,
     2108, 1391,  227, 2108,  227,  228,  228,  228,  228, 1391,
      228,  228, 1846,  259, 1846,  228,  228,  228,  229, 2108,
      228,  228, 2592,  228,  422,  422,  422,  422, 2610, 2589,

      229,  228,  228,  235,  228,  228,  228,  235,  235,  229,
     2713, 2038,  235,  230,  235, 2280, 2589, 2280,  228,  422,
      235, 2591, 2592,  422,  228,  230, 1998,  228, 2610, 1998,
     1846,  228,  236,  228,  230,  241,  236,  236, 2591,  241,
      241,  236, 2038,  236,  241,  241,  241, 1994, 2716,  236,
     1994, 1998,  241,  669,  669,  669,  669,  228, 1994, 2722,
      669,  241,  228,  241,  228,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  239, 2219,  240, 2729,  239,  239,  240,  240, 2730,
      239, 2219,  240, 1706, 2611,  239, 1706,  240,  239, 1706,
      240,  393,  393,  393,  393,  242,  239, 2218,  240,  242,
      242, 2220,  393, 2800,  242,  242,  242,  571,  571,  571,
      571, 2218,  242, 2801, 2611, 2220,  393,  742,  742,  742,

      742,  242,  571,  242,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  246, 2236,  247,

     2804,  246,  246,  247,  247, 2805,  246,  246,  247,  247,
      247, 2236, 2031,  248,  246, 2236,  247,  248,  248, 1513,
     2807, 2409,  248,  248,  248, 1513, 1513,  253, 1513,  254,
      248,  253,  253,  254,  254, 2409,  253, 2808,  254,  394,
      394,  394,  394,  260,  253, 2684,  254,  260,  260, 2684,
      394,  253,  260,  254,  247,  260,  743,  743,  743,  743,
      260, 2031, 1920, 1741,  394, 1920, 1741, 1920,  248,  249,
      249,  249,  249,  261,  249,  249, 1741,  261,  261,  249,
      249,  249,  261, 2157,  262,  261, 2809,  249,  262,  262,
      261, 1716, 2031,  262, 1716, 1729,  262, 1716, 1729,  260,

     2111,  262,  394, 2111, 2226,  263, 2720, 2226, 2720,  263,
      263,  264,  249, 1729,  263,  264,  264,  263,  249, 2111,
      264,  249,  263,  264, 1734, 2418,  265, 1734,  264,  261,
      265,  265,  266, 2810, 2157,  265,  266,  266,  265, 2418,
      262,  266, 1734,  265,  266,  458,  458,  458,  458,  266,
     2812,  249,  250,  250,  250,  250, 1369,  250,  250, 1369,
     1457,  263,  250,  250,  250, 2157, 1457,  264,  267, 1369,
      250, 2408,  267,  267, 1369, 2813, 1457,  267,  267,  267,
     2408, 2237,  265, 1369, 2237,  267, 2814, 1650,  266,  268,
     1650, 1650, 2237,  268,  268,  250, 2421, 2815,  268,  268,

      268,  250, 2417,  269,  250, 1650,  268,  269,  269,  270,
     2421, 2417,  269,  270,  270, 1457, 2816, 2454,  270, 1841,
      269, 1841,  395,  395,  395,  395,  270,  514,  514,  514,
      514, 2454,  458,  395,  250,  251,  251,  251,  251,  271,
      251,  251, 2420,  271,  271,  251,  251,  395,  271,  271,
      271, 2420,  514,  251,  514, 2727,  271, 2727,  475,  475,
      475,  475,  251,  272,  251, 2817,  283,  272,  272, 1841,
      283,  283,  272,  272,  272,  283,  475,  283,  251, 1845,
      272, 1845, 1555,  283,  251, 1555, 1555,  251,  395,  269,
     1842,  269, 1842, 2023,  273,  270, 2023,  270,  273,  273,

     1555, 2819, 2820,  273,  275,  275, 2023,  275,  273,  275,
      275,  273, 2513, 1555,  275,  275,  275,  251,  252,  252,
      252,  252,  275,  252,  252, 2475, 2513, 2475,  252,  252,
     2821, 2822,  276,  276, 1845,  276,  252,  276,  276, 1555,
     1842, 2823,  276,  276,  276,  252, 2585,  252, 1711, 2585,
      276, 1711, 1711,  281,  281,  281,  281, 2826,  281,  281,
     2827,  252, 2475,  281,  281,  281, 1711,  252,  281, 2117,
      252,  281, 2117,  282,  282,  282,  282, 2512,  282,  282,
      273, 2515,  273,  282,  282,  282, 2512, 2117,  282, 2828,
     2515,  282,  767,  767,  767,  767,  768,  768,  768,  768,

      252,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  257,  257,  257,  257,  257,  257,

      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  274, 2659, 2829,
     1511,  274,  274, 1511, 2659, 2834,  274,  277,  277,  277,

      277,  274,  277,  277,  274, 2590, 2837,  277,  277,  277,
     2841,  278,  278,  278,  278,  277,  278,  278, 2842, 2590,
     2845,  278,  278,  278,  277, 2474,  277, 2474,  284,  278,
     2846, 1804,  284,  284, 1804, 1804, 2848,  284,  278,  284,
      278,  285,  285,  285,  285,  284,  285,  285, 2471, 1804,
     2471,  285,  285,  285, 1511, 1511,  285,  305, 2849,  285,
      309,  305,  305,  329,  309,  309,  305,  329,  329,  309,
     2474, 2850,  329,  274,  305,  274, 2150,  309,  277, 2150,
      329,  775,  775,  775,  775,  776,  776,  776,  776, 2150,
     2851, 2471,  278,  279,  279,  279,  279,  279,  279,  279,

      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  286,  286,  286,  286,
      287,  286,  286, 2626,  287,  287,  286,  286,  286,  287,

     2125,  286, 2626, 2125,  286,  288, 2852,  287,  289,  288,
      288,  290,  289,  289,  288,  290,  290,  289, 2118, 2118,
      290, 2118,  288, 2726, 2854,  289,  291, 2125,  290,  292,
      291,  291, 2726,  292,  292,  291, 2118, 2859,  292,  803,
      803,  803,  803,  291,  293,  287,  292,  287,  293,  293,
     2855, 2136, 2860,  293,  293,  293,  369,  369,  369,  369,
      288,  293,  288, 2861,  289, 2092,  294,  290, 2092, 2120,
      294,  294, 2120,  369, 2092,  294,  294,  294, 2092, 2862,
     2865,  369,  291,  294,  295,  292,  293, 2120,  295,  295,
     2855, 2867,  293,  295,  295,  293,  374,  374,  374,  374,

     2136,  295, 2868,  374,  476,  476,  476,  476,  294, 2847,
      295,  296,  295,  374,  294,  296,  296,  294, 2847, 2870,
      296,  296,  476, 2871, 2184,  293,  295, 2184,  296,  330,
     2872, 2136,  295,  330,  330,  295, 2853,  296,  330,  296,
      297, 2873, 2184,  369,  297,  297,  330,  294, 2877,  297,
     2877, 2699,  297,  296, 2699, 2853, 2699,  297, 2094,  296,
     2882, 2094,  296,  298,  298,  295,  298, 2094,  298,  298,
      297, 2094, 2833,  298,  299, 2833,  298, 2833,  299,  299,
      300,  298, 2884,  299,  300,  300,  374, 2144, 2885,  300,
     2144,  299,  296, 2869,  298, 2886,  297,  300,  301, 2887,

     2144, 2869,  301,  301,  299, 2144, 2160,  301,  302, 2160,
      300, 2890,  302,  302, 2144,  301, 2895,  302,  311, 2160,
      298, 2896,  311,  311, 2899,  302, 2902,  311,  301,  311,
      299,  482,  482,  482,  482,  311,  300, 2368,  302,  312,
     2368, 2904,  313,  312,  312, 2907,  313,  313,  312,  482,
      312,  313, 2910,  313,  301, 2368,  312, 2913, 2918,  313,
      804,  804,  804,  804,  302,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,

      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,

      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  314, 2919, 2922,
      321,  314,  314, 2923,  321,  321,  314, 2924,  314,  321,
      321, 2926, 2927, 2273,  314,  315, 2273,  321, 2423,  315,
      315, 2423, 2928, 2929,  315,  325,  325, 2930,  325,  322,
      325,  325,  315,  322,  322,  325, 2423, 1630,  322,  322,
     1630, 1630, 2536,  325, 2273, 2536,  322,  484,  484,  484,
      484,  326,  326,  325,  326, 1630,  326,  326, 2197, 2933,

     2876,  326, 2876, 2934, 2197,  484, 2935, 2536, 1630,  326,
     2273, 2473,  315, 2473, 2197,  321,  315,  315,  315,  326,
      450,  450,  450,  450, 2470, 2936, 2470,  450,  315,  325,
      315,  315, 2937,  315, 1630,  315,  316, 2155, 2938, 1903,
      316,  316, 1903, 1903,  322,  316,  325,  450,  325, 2878,
     2155, 2878,  325,  316,  327,  326, 2876, 1903,  327,  327,
     2939, 2473, 2940,  327,  328,  327, 2197, 2155,  328,  328,
     1903,  327,  326,  328,  326,  328, 2941, 2943,  326, 2470,
     2155,  328,  331,  331, 2944,  331, 2916,  331,  331, 2916,
      450, 2916,  331,  316, 2945, 2948, 1903,  316,  316,  316,

      331,  873,  873,  873,  873, 2878, 2949,  450, 2950,  316,
     2951,  316,  316, 2954,  316, 2955,  316,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,

      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,

      319,  319,  319,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  332,  332, 2881,  332,

     2881,  332,  332, 2880, 2959, 2880,  332,  333,  333, 2472,
      333, 2472,  333,  333,  332, 2961, 2962,  333,  334,  334,
      333,  334, 2963,  334,  334,  333, 2964, 2965,  334, 2607,
     2608,  334, 2607, 2608,  333,  335,  334, 2966,  333,  335,
      335,  335, 2607, 2608,  335,  334, 2880,  335, 2879,  334,
     2879, 2967,  335, 2972, 2881,  373,  373,  373,  373,  373,
     2973,  335,  373, 2472,  333,  335, 2987, 2988,  333,  384,
      384,  384,  384,  384, 2989,  334,  384, 2990, 2991,  334,
      373,  490,  490,  490,  490,  377,  377,  377,  377, 2879,
     1626,  335,  335, 1626,  384,  335,  377,  333, 2992,  490,

      377, 2993,  377, 2634,  492,  492,  492,  492,  334, 2634,
      377,  377,  377, 2998,  452,  452,  452,  452, 2942, 2634,
     2942,  452,  492, 2969,  335,  336,  336, 2999,  336, 2942,
      336,  336,  336, 1627, 2274,  336, 1627, 2274,  336, 3000,
     3001,  452, 3002,  336, 3003,  373,  459,  459,  459,  459,
     3004, 2970,  336, 2969, 1626, 1626,  336, 2275, 2634,  384,
     2275, 3005, 3006,  459, 3007, 2274, 3008,  504,  504,  504,
      504,  459,  509,  509,  509,  509, 3009,  545,  545,  545,
      545, 2970,  336,  336,  452,  504,  336, 3010, 2275, 3011,
      509, 2274, 3013,  551,  551,  551,  551, 1627, 1627,  551,

     3014,  452,  545,  459, 2975, 3015, 3016,  546,  546,  546,
      546,  551, 3017, 2975, 2275,  336,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  546,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451, 3018,  451,  451,  451,  451,  494,
      494,  494,  494, 3019, 3020,  494,  499,  499,  499,  499,
      499, 3021, 3022,  499, 1033, 1033, 1033, 1033,  495,  495,
      495,  495, 3023, 3024,  494,  496,  496,  496,  496, 3025,
      494,  499,  502,  502,  502,  502, 3026, 2278, 3027,  502,
     2278,  502, 2978,  495, 3028,  502, 2487,  494, 2978, 2487,
      496,  708,  708,  708,  708,  494, 3029,  502, 2978,  494,
     3031,  494, 3032,  494,  494,  494, 3033, 3034, 2278,  494,
     1033,  494,  494,  494,  494, 3035,  494, 2487,  494,  494,
      494,  494,  494,  495,  515,  515,  515,  515,  495, 3036,

      496,  502, 3037, 3038, 2278,  496,  499, 3039,  495, 3036,
     3040,  495, 3041, 2487, 2490,  496, 3042, 2490,  496,  515,
     3044,  515,  516,  516,  516,  516,  519,  519,  519,  519,
      520,  520,  520,  520,  521,  521,  521,  521,  522,  522,
      522,  522, 3030, 2947,  515, 2490, 2947,  516,  708,  516,
     2947,  519, 2947,  519, 3045,  520, 2947,  520, 3030,  521,
     3049,  521, 3050,  522, 3056,  522, 3057,  523,  523,  523,
      523, 2490,  524,  524,  524,  524, 3059, 3096,  525,  525,
      525,  525,  516, 3097, 3121, 3122,  519,  526,  526,  526,
      526, 3138,  523,  520,  523, 2953, 2953,  524, 2953,  524,

     3139, 3140, 3141,  525,  522,  525, 3142,  521,  522, 3143,
      521, 3144,  526, 2953,  526, 3145,  527,  527,  527,  527,
      528,  528,  528,  528, 3146, 3147, 3148,  600,  600,  600,
      600,  523,  529,  529,  529,  529,  532,  532,  532,  532,
     3151,  527,  523,  527,  525,  528,  600,  528, 3152, 3153,
      523,  524,  523,  530,  530,  530,  530,  529, 3154,  529,
     3156,  532,  526,  532,  531,  531,  531,  531,  533,  533,
      533,  533,  535,  535,  535,  535,  527, 3158,  530, 3164,
      530, 3165,  534,  534,  534,  534, 3166, 3171, 3172,  531,
      528,  531,  600,  533, 3173,  533, 3179,  535,  529,  535,

     3180, 3181,  532,  536,  536,  536,  536,  534,  529,  534,
      550,  550,  550,  550,  529,  530,  548,  548,  548,  548,
      548, 3182, 3183,  548,  552,  552,  552,  552,  536, 3185,
      536, 3186, 3187, 3188,  533,  550, 3189,  550,  533, 3190,
     3191,  548,  552,  531, 3192, 3193,  531,  535,  534,  533,
     3194, 3198,  535,  553,  553,  553,  553,  557,  557,  557,
      557,  613,  613,  613,  613,  536, 3200, 3196,  534, 3196,
     3202,  553, 3195,  536, 3195,  557, 3197, 3203, 3197,  536,
      568,  568,  568,  568,  619,  619,  619,  619, 3204,  613,
      667,  667,  667,  667,  656,  656,  656,  656,  568,  657,

      657,  657,  657,  619, 3205, 3207,  548,  594,  594,  594,
      594,  656, 3195, 3208, 3210,  667,  657, 3196, 3211,  656,
     3212, 3197, 3199,  594,  657, 3199, 3213, 3214,  613,  658,
      658,  658,  658, 3215, 3216,  594, 3217,  613,  665,  665,
      665,  665,  668,  668,  668,  668,  658, 3218, 3220,  619,
      672,  672,  672,  672,  658, 3221,  665,  795,  795,  795,
      795,  657,  796,  796,  796,  796, 3222,  668, 3223,  594,
     3224,  594, 3226, 3227,  594,  672, 3228,  670,  670,  670,
      670,  670,  594,  594,  670, 3229,  594,  594,  594, 3230,
      594,  684,  684,  684,  684,  691,  691,  691,  691, 3231,

     3232, 3233,  670, 3234, 3235, 3236,  658, 3237, 3238,  684,
     3239, 3240, 3241,  691,  817,  817,  817,  817, 3242, 3244,
     3246,  795,  820,  820,  820,  820,  796,  821,  821,  821,
      821,  817,  822,  822,  822,  822,  854,  854,  854,  854,
      859,  859,  859,  859,  861,  861,  861,  861,  885,  885,
      885,  885, 3247, 3248,  854, 3249, 3245, 3250,  859, 3245,
     3251, 3252,  861, 3253, 3256,  885, 3260,  670,  887,  887,
      887,  887,  974,  974,  974,  974, 3262, 3245, 3263,  820,
      975,  975,  975,  975,  976,  976,  976,  976, 3264,  821,
     3265,  976, 3254,  887,  822, 3254, 3266,  974, 3268,  977,

      977,  977,  977,  977, 3269,  975,  977,  980,  980,  980,
      980,  994,  994,  994,  994,  995,  995,  995,  995, 1001,
     1001, 1001, 1001, 3267,  977, 1004, 1004, 1004, 1004,  994,
     3270, 2719,  980,  995, 2719, 3271, 3272, 1001, 1014, 1014,
     1014, 1014, 3273, 1004, 1015, 1015, 1015, 1015, 1018, 1018,
     1018, 1018, 3274, 3267, 3275, 1018, 1019, 1019, 1019, 1019,
     3281, 3282, 2719, 1019, 1020, 1020, 1020, 1020, 3283, 3285,
     3288, 1020, 1021, 1021, 1021, 1021, 3289, 1024, 1024, 1024,
     1024, 3290, 3291, 3293, 1024, 1021, 1024, 3292, 2719,  977,
     1024, 1025, 1025, 1025, 1025, 3294, 3295, 3292, 1025, 2277,

     1025, 3296, 2277, 3297, 1025, 3299, 1014, 1026, 1026, 1026,
     1026, 3303, 1015, 3304, 1026, 3305, 1026, 2277, 1014, 3258,
     1026, 3306, 3258, 3307, 1015, 1027, 1027, 1027, 1027, 3309,
     2277, 3310, 1027, 3311, 1027, 3312, 3313, 3258, 1027, 1029,
     1029, 1029, 1029, 1031, 1031, 1031, 1031, 1044, 1044, 1044,
     1044, 3308, 1046, 1046, 1046, 1046, 2277, 1029, 1044, 3308,
     3314, 1031, 1047, 1047, 1047, 1047, 1048, 1048, 1048, 1048,
     3315, 3316, 1044, 1048, 3317, 3319, 1044, 1046, 1051, 1051,
     1051, 1051, 1051, 3257, 3257, 1051, 3257, 1047, 1055, 1055,
     1055, 1055, 1061, 1061, 1061, 1061, 1064, 1064, 1064, 1064,

     3320, 3321, 3322, 1051, 1061, 3323, 3324, 1064, 1067, 1067,
     1067, 1067, 3325, 1055, 1068, 1068, 1068, 1068, 1073, 1073,
     1073, 1073, 1064, 1160, 1160, 1160, 1160, 1161, 1161, 1161,
     1161, 1186, 1186, 1186, 1186, 3318, 1073, 3328, 1189, 1189,
     1189, 1189, 1186, 1190, 1190, 1190, 1190, 1196, 1196, 1196,
     1196, 3318, 1064, 1189, 3329, 3330, 3327, 1186, 1190, 1228,
     1228, 1228, 1228, 2279, 1235, 1235, 2279, 1235, 1051, 1235,
     3331, 3332, 1228, 1235, 1235, 2723, 2279, 1228, 2723, 1292,
     1292, 1292, 1292, 1235, 3333, 1235, 1292, 1186, 1293, 1293,
     1293, 1293, 3336, 3339, 2279, 1293, 1300, 1300, 1300, 1300,

     3376, 3377, 1302, 1302, 1302, 1302, 2723, 3400, 1300, 1302,
     3401, 1300, 3418, 1302, 1303, 1303, 1303, 1303, 1186, 3255,
     2279, 1303, 3255, 3419, 3421, 1303, 1305, 1305, 1305, 1305,
     3255, 3422, 2723, 1305, 3327, 1292, 1306, 1306, 1306, 1306,
     1315, 1315, 1315, 1315, 1293, 3423, 3425, 1306, 1316, 1316,
     1316, 1316, 1317, 1317, 1317, 1317, 3426, 3427, 3428, 1317,
     1365, 3431, 1306, 3432, 3438, 1315, 3439, 1320, 1320, 1320,
     1320, 1320, 3442, 1316, 1320, 1326, 1326, 1326, 1326, 1392,
     1392, 1392, 1392, 1406, 1406, 1406, 1406, 3445, 1399, 1399,
     1399, 1399, 1320, 1365, 1365, 3447, 1365, 1392, 1365, 1366,

     1326, 3448, 1365, 1365, 3449, 1399, 1366, 1366, 1406, 1366,
     3450, 1366, 1365, 1399, 1365, 1366, 1366, 1385, 1385, 1385,
     1385, 3451, 3452, 3455, 1385, 1366, 3456, 1366, 1385, 3457,
     1385, 1400, 1400, 1400, 1400, 1385, 3458, 3460, 1400, 1403,
     1403, 1403, 1403, 3462, 3465, 3467, 1403, 3468, 1400, 1404,
     1404, 1404, 1404, 3464, 3469, 3464, 1404, 1320, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1398, 1398,
     1398, 1398, 3470, 3471, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1412, 1412, 1412, 1412, 1398, 1405, 1405, 1405, 1405,

     3472, 3464, 3466, 1398, 3463, 3466, 3463, 1405, 1412, 3466,
     2107, 1405, 3474, 2107, 3475, 1370, 1370, 1370, 1370, 3476,
     1370, 1400, 1405, 1405, 1407, 1407, 1407, 1407, 3477, 3478,
     3479, 1407, 1413, 1413, 1413, 1413, 3480, 3473, 2107, 1413,
     3473, 1409, 1409, 1409, 1409, 3463, 1370, 1370, 1370, 1370,
     1370, 3481, 1409, 3480, 3482, 3483, 1409, 3484, 1409, 3485,
     1425, 1425, 1425, 1425, 3486, 1398, 1409, 1409, 1409, 1410,
     1410, 1410, 1410, 3487, 2107, 3488, 1410, 1411, 1411, 1411,
     1411, 3489, 3490, 3491, 1411, 1425, 1410, 3492, 1414, 1414,
     1414, 1414, 1414, 2107, 1411, 1414, 3493, 1415, 1415, 1415,

     1415, 3494, 3495, 3496, 1418, 1418, 1418, 1418, 1415, 3497,
     3498, 3499, 1415, 1414, 1415, 1418, 3500, 3501, 3502, 1418,
     3506, 1418, 1415, 1415, 1415, 1422, 1422, 1422, 1422, 1418,
     1418, 1418, 1422, 1423, 1423, 1423, 1423, 3508, 3503, 3509,
     1423, 3503, 1424, 1424, 1424, 1424, 3510, 1425, 1426, 1426,
     1426, 1426, 3511, 1424, 3512, 3504, 3513, 1424, 3504, 1410,
     1429, 1429, 1429, 1429, 3515, 3517, 3504, 1411, 1424, 1424,
     3518, 3519, 3520, 1426, 1430, 1430, 1430, 1430, 1414, 1432,
     1432, 1432, 1432, 3521, 3524, 1429, 1432, 1433, 1433, 1433,
     1433, 3527, 3529, 3534, 1433, 1434, 1434, 1434, 1434, 1430,

     1435, 1435, 1435, 1435, 3535, 3536, 1434, 1435, 1437, 1437,
     1437, 1437, 1438, 1438, 1438, 1438, 3537, 3516, 3538, 1437,
     1441, 1441, 1441, 1441, 1441, 3539, 3540, 1441, 1443, 1443,
     1443, 1443, 3541, 1437, 3516, 1445, 1445, 1445, 1445, 1443,
     1446, 1446, 1446, 1446, 3542, 1441, 1445, 1447, 1447, 1447,
     1447, 1446, 3543, 1443, 1461, 1461, 1461, 1461, 1447, 3544,
     1445, 1466, 1466, 1466, 1466, 1446, 1474, 1474, 1474, 1474,
     3546, 3548, 1447, 1474, 3550, 1475, 1475, 1475, 1475, 3551,
     2725, 1461, 1475, 2725, 3553, 3555, 1466, 1476, 1476, 1476,
     1476, 3556, 3558, 1474, 1476, 3559, 1478, 1478, 1478, 1478,

     3561, 3562, 1475, 3563, 3564, 1479, 1479, 1479, 1479, 1447,
     1441, 2725, 3565, 1478, 1476, 1485, 1485, 1485, 1485, 3567,
     1446, 1478, 1479, 3568, 1488, 1488, 1488, 1488, 3569, 3570,
     1479, 1488, 1485, 3573, 3574, 3576, 1474, 2725, 3577, 3578,
     1485, 1461, 3579, 3580, 3582, 1475, 1491, 1491, 1491, 1491,
     3610, 3576, 3611, 1474, 1504, 1504, 1504, 1504, 1505, 1505,
     1505, 1505, 1475, 1535, 1535, 1535, 1535, 3616, 3617, 3621,
     1535, 1491, 3644, 3645, 1476, 3646, 1505, 3656, 3657, 1479,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 3662, 1481, 1481, 1481,

     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 3663, 1481,
     1481, 1481, 1481, 1483, 1483, 1483, 1483, 3667, 3668, 3670,
     1483, 1486, 1486, 1486, 1486, 1487, 1487, 1487, 1487, 1489,
     1489, 1489, 1489, 3671, 1493, 1493, 1493, 1493, 1486, 3672,

     1483, 3677, 1487, 3678, 3681, 3684, 1486, 3685, 3686, 3687,
     1487, 1493, 1507, 1507, 1507, 1507, 3688, 3689, 3690, 1493,
     1510, 1510, 1510, 1510, 1536, 1536, 1536, 1536, 3691, 3692,
     1507, 1536, 1537, 1537, 1537, 1537, 1541, 1541, 1541, 1541,
     3693, 3694, 1487, 3695, 1554, 1510, 1538, 1554, 1554, 1538,
     3696, 1493, 3697, 3699, 3697, 1486, 3698, 1554, 3698, 1537,
     1483, 1541, 3702, 3703, 3704, 1538, 1538, 1538, 1538, 1538,
     1538, 1544, 1544, 1544, 1544, 1554, 1489, 1509, 1509, 1509,
     1509, 3705, 3707, 1509, 3709, 1510, 1542, 1542, 1542, 1542,
     1510, 3706, 3697, 1542, 3706, 3710, 1544, 3698, 1544, 3711,

     1510, 1554, 1509, 1510, 1553, 1553, 1553, 1553, 1509, 2352,
     1538, 1538, 2352, 1548, 1548, 1548, 1548, 3712, 3708, 3713,
     1548, 3708, 1548, 3714, 3715, 1509, 1548, 3716, 1558, 1558,
     1558, 1558, 1558, 1509, 3717, 1558, 2352, 1509, 1548, 1509,
     2352, 1509, 1509, 1509, 3718, 3719, 3720, 1509, 3721, 1509,
     1509, 1509, 1509, 1558, 1509, 3722, 1509, 1509, 1509, 1509,
     1509, 1549, 1549, 1549, 1549, 3723, 2352, 3724, 1549, 3725,
     1549, 3726, 1548, 3727, 1549, 3728, 1550, 1550, 1550, 1550,
     1552, 1552, 1552, 1552, 3729, 1550, 1549, 1550, 3730, 1550,
     3731, 3734, 1552, 1552, 3735, 1563, 1563, 1563, 1563, 1564,

     1564, 1564, 1564, 3736, 3737, 1552, 1563, 1552, 3700, 3738,
     1564, 3700, 1563, 3739, 3740, 3700, 1564, 3741, 1558, 3742,
     1549, 1565, 1565, 1565, 1565, 1566, 1566, 1566, 1566, 3743,
     3745, 3746, 1565, 3748, 3749, 1550, 1566, 3750, 1565, 3751,
     3752, 3756, 1566, 1567, 1567, 1567, 1567, 1568, 1568, 1568,
     1568, 3760, 3761, 3762, 1567, 3763, 3764, 3765, 1568, 3767,
     1567, 3768, 3769, 3770, 1568, 1569, 1569, 1569, 1569, 3772,
     3773, 3774, 1564, 1570, 1570, 1570, 1570, 3776, 1572, 1572,
     1572, 1572, 1573, 1573, 1573, 1573, 1575, 1575, 1575, 1575,
     1569, 3778, 1569, 3779, 3786, 1565, 1565, 3789, 1570, 3788,

     1570, 3792, 1566, 1572, 3793, 1572, 3794, 1573, 3797, 1573,
     3801, 3802, 3804, 1568, 3805, 3788, 3806, 1573, 1573, 3833,
     3838, 3839, 1567, 3843, 3844, 1567, 3845, 3847, 1573, 1573,
     3868, 3869, 1573, 1576, 1576, 1576, 1576, 3877, 1572, 1577,
     1577, 1577, 1577, 1578, 1578, 1578, 1578, 1579, 1579, 1579,
     1579, 3878, 1575, 1580, 1580, 1580, 1580, 3883, 1576, 3884,
     1576, 3885, 3842, 3895, 1577, 3900, 1577, 3901, 1578, 3903,
     1578, 3842, 1579, 3904, 1579, 3906, 3908, 3909, 1580, 3911,
     1580, 1581, 1581, 1581, 1581, 3912, 3914, 1582, 1582, 1582,
     1582, 1583, 1583, 1583, 1583, 3915, 1584, 1584, 1584, 1584,

     1585, 1585, 1585, 1585, 3916, 1578, 1581, 3917, 1581, 3920,
     1576, 1579, 1582, 3921, 1582, 3922, 1583, 3923, 1583, 1577,
     1580, 1584, 1579, 1584, 3924, 1585, 3925, 1585, 1586, 1586,
     1586, 1586, 1587, 1587, 1587, 1587, 3926, 3927, 1588, 1588,
     1588, 1588, 3928, 3929, 1589, 1589, 1589, 1589, 3930, 1590,
     1590, 1590, 1590, 1586, 3931, 1586, 1582, 1587, 3932, 1587,
     3933, 1581, 1584, 1588, 1585, 1588, 3934, 3935, 3936, 1589,
     3937, 1589, 3941, 1583, 1590, 3942, 1590, 1585, 3945, 3918,
     3946, 1585, 3918, 1617, 1617, 1617, 1617, 3947, 1591, 1591,
     1591, 1591, 3948, 1592, 1592, 1592, 1592, 3950, 1586, 3918,

     3918, 3951, 1588, 1593, 1593, 1593, 1593, 1587, 1588, 1589,
     1617, 1588, 1590, 1591, 3943, 1591, 3952, 3943, 1592, 1588,
     1592, 1594, 1594, 1594, 1594, 3943, 3944, 3953, 1593, 3944,
     1593, 3954, 1595, 1595, 1595, 1595, 1596, 1596, 1596, 1596,
     1597, 1597, 1597, 1597, 3960, 3961, 1594, 3962, 1594, 1598,
     1598, 1598, 1598, 1615, 1615, 1615, 1615, 1595, 1592, 1595,
     1615, 1596, 3964, 1596, 3965, 1597, 3967, 1597, 3968, 1591,
     1616, 1616, 1616, 1616, 1598, 3969, 1598, 1616, 1599, 1599,
     1599, 1599, 3972, 3973, 1593, 1600, 1600, 1600, 1600, 1601,
     1601, 1601, 1601, 3976, 3981, 1594, 3984, 3985, 3986, 1596,

     3988, 3989, 1595, 1599, 3990, 1599, 3991, 1597, 1595, 3995,
     1600, 3998, 1600, 4001, 1601, 4027, 1601, 4028, 1597, 1613,
     1613, 1613, 1613, 1602, 1602, 1602, 1602, 4032, 1598, 1603,
     1603, 1603, 1603, 1604, 1604, 1604, 1604, 4033, 4034, 4035,
     1605, 1605, 1605, 1605, 1613, 4053, 1599, 1600, 1602, 4057,
     1602, 4058, 4057, 1599, 1603, 4060, 1603, 4061, 1604, 4063,
     1604, 4078, 4079, 1601, 1600, 1605, 4080, 1605, 1606, 1606,
     1606, 1606, 1632, 1632, 1632, 1632, 4081, 1607, 1607, 1607,
     1607, 1618, 1618, 1618, 1618, 4080, 4083, 1632, 1618, 1620,
     1620, 1620, 1620, 1606, 4084, 1606, 4082, 4086, 4083, 1603,

     1602, 4088, 1607, 1604, 1607, 1621, 1621, 1621, 1621, 1621,
     4082, 4091, 1621, 1605, 1620, 4093, 1620, 1622, 1622, 1622,
     1622, 1623, 1623, 1623, 1623, 1625, 1625, 1625, 1625, 4094,
     1621, 1625, 1629, 4085, 4085, 1629, 1629, 1633, 1633, 1633,
     1633, 4089, 1622, 1625, 1622, 1629, 1623, 1606, 1623, 4095,
     1607, 1634, 1634, 1634, 1634, 1637, 1637, 1637, 1637, 1648,
     1648, 1648, 1648, 1629, 1651, 1651, 1651, 1651, 1652, 1652,
     1652, 1652, 4087, 4087, 1637, 1666, 1666, 1666, 1666, 1669,
     1669, 1669, 1669, 1651, 1673, 1673, 1673, 1673, 4100, 1629,
     1673, 1669, 4101, 4102, 4103, 1621, 1635, 1635, 1635, 1635,

     4104, 4089, 4105, 1666, 1670, 1670, 1670, 1670, 1674, 1674,
     1674, 1674, 1635, 1677, 4109, 1670, 1677, 4110, 4106, 4106,
     1637, 4106, 4111, 4112, 1635, 1679, 1679, 1679, 1679, 1651,
     4113, 1670, 1677, 1677, 1677, 1677, 1677, 1677, 1680, 1680,
     1680, 1680, 1666, 1684, 1684, 1684, 1684, 1709, 1709, 1709,
     1709, 1666, 4114, 1686, 1686, 1686, 1686, 4115, 1635, 4116,
     1635, 4117, 4118, 1635, 1687, 1687, 1687, 1687, 4119, 4121,
     1686, 1635, 1635, 4122, 4123, 1635, 1635, 1635, 1686, 1635,
     4130, 1687, 4131, 1688, 1688, 1688, 1688, 4132, 4133, 1687,
     1688, 1689, 1689, 1689, 1689, 1691, 1691, 1691, 1691, 4134,

     1692, 1692, 1692, 1692, 1693, 1693, 1693, 1693, 1689, 4135,
     4107, 4107, 1691, 4107, 4136, 4129, 1689, 1692, 4129, 4141,
     1691, 4142, 1693, 4145, 1684, 1692, 1695, 1695, 1695, 1695,
     1697, 1697, 1697, 1697, 4148, 4158, 4159, 1697, 1698, 1698,
     1698, 1698, 4160, 4163, 4164, 1698, 1700, 1700, 1700, 1700,
     4191, 1695, 4195, 1700, 1702, 1702, 1702, 1702, 4196, 1688,
     1703, 1703, 1703, 1703, 1703, 4127, 1692, 1703, 4127, 1691,
     1704, 1704, 1704, 1704, 4197, 4198, 4127, 1707, 4205, 1702,
     1707, 1728, 1728, 1728, 1728, 1703, 1714, 1714, 1714, 1714,
     1722, 1722, 1722, 1722, 4206, 1704, 1707, 1707, 1707, 1707,

     1707, 1707, 4223, 4224, 1714, 4225, 4226, 4234, 1722, 1730,
     1730, 1730, 1730, 1731, 1731, 1731, 1731, 1752, 1752, 1752,
     1752, 1759, 1759, 1759, 1759, 1760, 1760, 1760, 1760, 1765,
     1765, 1765, 1765, 1769, 1769, 1769, 1769, 1779, 1779, 1779,
     1779, 1780, 1780, 1780, 1780, 4235, 1781, 1781, 1781, 1781,
     1703, 4236, 4237, 1781, 1779, 4238, 4240, 4243, 1780, 1781,
     1782, 1782, 1782, 1782, 1783, 1783, 1783, 1783, 1728, 1784,
     1784, 1784, 1784, 1785, 1785, 1785, 1785, 1782, 1786, 1786,
     1786, 1786, 4245, 4250, 4251, 1786, 1787, 1787, 1787, 1787,
     4252, 4241, 4242, 1765, 4241, 4242, 1730, 4253, 4254, 4255,

     1731, 1800, 1800, 1800, 1800, 1812, 1812, 1812, 1812, 1817,
     1817, 1817, 1817, 4256, 4257, 4258, 1800, 1820, 1820, 1820,
     1820, 1783, 1818, 1818, 1818, 1818, 1784, 4259, 4260, 4261,
     1785, 1784, 4262, 4265, 1817, 1821, 1821, 1821, 1821, 1818,
     1883, 1883, 1883, 1883, 1885, 1885, 1885, 1885, 1787, 4266,
     4267, 1885, 1886, 1886, 1886, 1886, 4268, 4269, 4270, 1886,
     1821, 1888, 1888, 1888, 1888, 1883, 4274, 4280, 1888, 1890,
     1890, 1890, 1890, 1891, 1891, 1891, 1891, 1891, 4286, 4287,
     1891, 1892, 1892, 1892, 1892, 1900, 1900, 1900, 1900, 4291,
     4246, 4246, 1812, 4246, 1890, 4292, 1902, 4293, 1891, 1902,

     1902, 1911, 1911, 1911, 1911, 4294, 1892, 4314, 4315, 1902,
     1914, 1914, 1914, 1914, 4316, 4318, 4319, 1914, 1915, 1915,
     1915, 1915, 4335, 2353, 4337, 1915, 2353, 1902, 1916, 1916,
     1916, 1916, 1917, 1917, 1917, 1917, 1919, 1919, 1919, 1919,
     4128, 1916, 4338, 4128, 4341, 1917, 4345, 4346, 4263, 1919,
     2353, 4263, 4128, 1902, 2353, 1922, 1922, 1922, 1922, 4347,
     4263, 4350, 1922, 1891, 1922, 4353, 4354, 4355, 1922, 1911,
     1923, 1923, 1923, 1923, 4356, 4248, 4248, 1923, 4248, 1923,
     2353, 1911, 4357, 1923, 1924, 1924, 1924, 1924, 4358, 4348,
     4359, 1924, 4348, 1924, 4360, 4361, 4348, 1924, 1925, 1925,

     1925, 1925, 1926, 1926, 1926, 1926, 1927, 1927, 1927, 1927,
     1930, 1930, 1930, 1930, 4363, 1931, 1931, 1931, 1931, 4364,
     4365, 1930, 1931, 1933, 1933, 1933, 1933, 4366, 1931, 1935,
     1935, 1935, 1935, 4367, 4368, 1930, 1935, 1936, 1936, 1936,
     1936, 4372, 4375, 4376, 1936, 4379, 4380, 4381, 1933, 1938,
     1938, 1938, 1938, 4394, 1925, 4395, 1938, 4396, 1926, 4408,
     4412, 4415, 1927, 1940, 1940, 1940, 1940, 1941, 1941, 1941,
     1941, 1941, 4416, 4417, 1941, 1942, 1942, 1942, 1942, 1943,
     1943, 1943, 1943, 1944, 1944, 1944, 1944, 4422, 1940, 4426,
     4428, 1943, 1941, 4429, 1944, 1945, 1945, 1945, 1945, 4430,

     1942, 1952, 1952, 1952, 1952, 4431, 1945, 1954, 1954, 1954,
     1954, 1955, 1955, 1955, 1955, 1980, 1980, 1980, 1980, 4432,
     4433, 1945, 1985, 1985, 1985, 1985, 4434, 4435, 4437, 1955,
     1988, 1988, 1988, 1988, 1991, 1991, 1991, 1991, 4438, 1993,
     4441, 4442, 1993, 1996, 1996, 1996, 1996, 2002, 2002, 2002,
     2002, 1945, 4444, 2004, 2004, 2004, 2004, 1941, 1993, 1993,
     1993, 1993, 1993, 1993, 2004, 2008, 2008, 2008, 2008, 2009,
     2009, 2009, 2009, 2010, 2010, 2010, 2010, 4445, 4446, 2004,
     2008, 2024, 2024, 2024, 2024, 2025, 2025, 2025, 2025, 2069,
     2069, 2069, 2069, 4465, 2024, 4466, 2069, 2070, 2070, 2070,

     2070, 4475, 4480, 4483, 2070, 2071, 2071, 2071, 2071, 2004,
     2073, 2073, 2073, 2073, 4494, 4495, 4349, 2071, 4496, 4349,
     2071, 2354, 2073, 4349, 2354, 2073, 2074, 2074, 2074, 2074,
     2075, 2075, 2075, 2075, 2077, 2077, 2077, 2077, 2074, 4497,
     2004, 2074, 4498, 4499, 4418, 2069, 2077, 4418, 2354, 2077,
     4500, 4418, 2354, 2070, 2079, 2079, 2079, 2079, 2080, 2080,
     2080, 2080, 4501, 4504, 4505, 2080, 4508, 4509, 4525, 2080,
     2081, 2081, 2081, 2081, 4526, 4530, 4533, 2081, 2354, 4534,
     4543, 2081, 2082, 2082, 2082, 2082, 4545, 4546, 4547, 2082,
     2083, 2083, 2083, 2083, 2084, 2084, 2084, 2084, 4548, 2085,

     2085, 2085, 2085, 4549, 4550, 2084, 2085, 2086, 2086, 2086,
     2086, 4552, 4555, 4556, 2086, 2087, 2087, 2087, 2087, 4576,
     2084, 2088, 2088, 2088, 2088, 4580, 4583, 2087, 2090, 2090,
     2090, 2090, 2088, 2097, 2097, 2097, 2097, 4584, 4593, 2090,
     4594, 2099, 2099, 2099, 2099, 4595, 4596, 2088, 2099, 2100,
     2100, 2100, 2100, 4597, 2090, 4601, 2100, 4628, 2097, 2102,
     2102, 2102, 2102, 4629, 4633, 4634, 2102, 2104, 2104, 2104,
     2104, 2105, 2105, 2105, 2105, 2105, 4635, 4636, 2105, 2106,
     2106, 2106, 2106, 4637, 2161, 2161, 2161, 2161, 4660, 4661,
     4662, 2161, 2104, 4663, 4664, 2161, 2105, 2161, 2162, 2162,

     2162, 2162, 4665, 4677, 2106, 2163, 2163, 2163, 2163, 4678,
     4420, 2162, 2163, 4420, 4681, 4682, 2163, 4420, 2163, 2169,
     2169, 2169, 2169, 4692, 2170, 2170, 2170, 2170, 2931, 2931,
     2169, 2644, 2642, 2931, 2169, 2170, 5034, 2931, 2931, 2170,
     2172, 2172, 2172, 2172, 5034, 2169, 2169, 2931, 5045, 2931,
     2170, 2170, 2174, 2174, 2174, 2174, 5045, 2172, 2638, 2174,
     2633, 2105, 2145, 2145, 2145, 2145, 2145, 2145, 2145, 2145,
     2145, 2145, 2145, 2145, 2145, 2145, 2145, 2145, 2145, 2145,
     2145, 2632, 2624, 2615, 2171, 2171, 2171, 2171, 2145, 2145,
     2145, 2145, 2145, 2145, 2145, 2171, 5047, 2614, 2612, 2171,

     2173, 2173, 2173, 2173, 5047, 2175, 2175, 2175, 2175, 2171,
     2171, 2171, 2175, 2203, 2203, 2203, 2203, 2173, 2609, 2145,
     2145, 2145, 2145, 2605, 2145, 2179, 2179, 2179, 2179, 2180,
     2180, 2180, 2180, 2604, 2603, 2602, 2179, 5050, 2203, 5052,
     2180, 2201, 2201, 2201, 2201, 5050, 2601, 5052, 2201, 2600,
     2145, 2145, 2145, 2145, 2145, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2599, 2597, 2181, 2181, 2181,
     2181, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2181, 5054,
     2596, 2177, 2177, 2177, 2177, 2177, 2593, 5054, 2177, 2588,

     2587, 2586, 2181, 2199, 2199, 2199, 2199, 2178, 2178, 2178,
     2178, 5057, 2148, 2148, 2148, 2148, 2177, 2148, 2178, 5057,
     2199, 5072, 2178, 2187, 2187, 2187, 2187, 2187, 2199, 5072,
     2187, 2582, 2581, 2178, 2178, 2580, 2571, 2570, 2189, 2189,
     2189, 2189, 2569, 2148, 2148, 2148, 2148, 2148, 2187, 2189,
     2190, 2190, 2190, 2190, 2568, 2198, 2198, 2198, 2198, 2198,
     2567, 2190, 2198, 2189, 2566, 2200, 2200, 2200, 2200, 2202,
     2202, 2202, 2202, 2565, 2564, 2190, 2202, 2563, 2562, 2561,
     2198, 2177, 2200, 2216, 2206, 2206, 2206, 2206, 2560, 2559,
     2200, 2206, 2216, 2216, 2216, 2216, 2222, 2222, 2222, 2222,

     2223, 2223, 2223, 2223, 2223, 5046, 2558, 2223, 2258, 2258,
     2258, 2258, 5046, 2187, 2259, 2259, 2259, 2259, 5074, 2189,
     5046, 2222, 2556, 2190, 5051, 2223, 5074, 2264, 2264, 2264,
     2264, 5051, 2553, 2552, 2260, 2258, 2264, 2260, 2264, 5051,
     2264, 2259, 2200, 2551, 5053, 2198, 2221, 2221, 2221, 2221,
     2550, 5053, 2221, 2260, 2260, 2260, 2260, 2260, 2260, 5053,
     2549, 2222, 2268, 2268, 2268, 2268, 2222, 2266, 2266, 2266,
     2266, 2221, 2548, 2268, 2266, 2546, 2222, 2221, 2545, 2222,
     2265, 2265, 2265, 2265, 2544, 2543, 2264, 2265, 5055, 2265,
     2223, 5059, 2266, 2265, 2221, 5055, 2541, 2269, 2269, 2269,

     2269, 2539, 2221, 5055, 2269, 2265, 2221, 5059, 2221, 2269,
     2221, 2221, 2221, 2538, 2488, 5059, 2221, 2488, 2221, 2221,
     2221, 2221, 2537, 2221, 5064, 2221, 2221, 2221, 2221, 2221,
     2267, 2267, 2267, 2267, 2270, 2270, 2270, 2270, 2533, 2265,
     5064, 2488, 2267, 2267, 2531, 2488, 2270, 2270, 5064, 2282,
     2282, 2282, 2282, 2282, 2529, 2267, 2282, 2527, 2525, 2270,
     5065, 2270, 2285, 2285, 2285, 2285, 2288, 2288, 2288, 2288,
     2523, 2488, 2521, 2285, 2282, 2519, 5065, 2288, 2289, 2289,
     2289, 2289, 2518, 2288, 5065, 2290, 2290, 2290, 2290, 2289,
     2291, 2291, 2291, 2291, 2516, 2289, 2290, 2292, 2292, 2292,

     2292, 2291, 2290, 2365, 2365, 2365, 2365, 2291, 2292, 2293,
     2293, 2293, 2293, 2514, 2292, 2510, 2295, 2295, 2295, 2295,
     2293, 2294, 2294, 2294, 2294, 2508, 2293, 2295, 2298, 2298,
     2298, 2298, 2294, 2295, 2301, 2301, 2301, 2301, 2294, 2282,
     2289, 2497, 2299, 2299, 2299, 2299, 5079, 2300, 2300, 2300,
     2300, 5073, 5087, 2298, 5079, 2298, 2496, 5093, 5073, 2301,
     5087, 2301, 2290, 2493, 2298, 5093, 5073, 2299, 2298, 2299,
     2492, 2291, 2300, 5096, 2300, 2489, 2485, 2483, 2292, 2293,
     2300, 5096, 2480, 2301, 2294, 2293, 2479, 2299, 2302, 2302,
     2302, 2302, 2478, 2477, 2295, 2297, 2297, 2297, 2297, 2303,

     2303, 2303, 2303, 2371, 2371, 2371, 2371, 2476, 2469, 2305,
     2305, 2305, 2305, 2302, 2468, 2302, 2349, 2349, 2349, 2349,
     2297, 2467, 2297, 2306, 2306, 2306, 2306, 2466, 2302, 2297,
     2297, 2297, 2297, 2297, 2305, 2297, 2305, 2307, 2307, 2307,
     2307, 2297, 2297, 2349, 2297, 2297, 2465, 2464, 2306, 2463,
     2306, 2308, 2308, 2308, 2308, 2309, 2309, 2309, 2309, 2462,
     2461, 2460, 2307, 2459, 2307, 2303, 2458, 2310, 2310, 2310,
     2310, 2311, 2311, 2311, 2311, 2457, 2308, 2456, 2308, 2453,
     2309, 2452, 2309, 2312, 2312, 2312, 2312, 2313, 2313, 2313,
     2313, 2305, 2310, 2451, 2310, 2447, 2311, 5098, 2311, 5100,

     2314, 2314, 2314, 2314, 2306, 5098, 2446, 5100, 2312, 2445,
     2312, 2444, 2313, 2438, 2313, 5102, 2431, 2307, 2315, 2315,
     2315, 2315, 2430, 5102, 2308, 2314, 5105, 2314, 2316, 2316,
     2316, 2316, 2429, 2355, 5105, 2309, 2355, 2310, 2317, 2317,
     2317, 2317, 2428, 2315, 2427, 2315, 2355, 5075, 2311, 2318,
     2318, 2318, 2318, 2316, 5075, 2316, 2426, 2425, 2424, 2312,
     2355, 2313, 5075, 2317, 2355, 2317, 2319, 2319, 2319, 2319,
     2320, 2320, 2320, 2320, 2318, 2314, 2318, 2422, 2321, 2321,
     2321, 2321, 2419, 2414, 2315, 2322, 2322, 2322, 2322, 2412,
     2355, 2319, 5107, 2319, 5110, 2320, 2402, 2320, 2401, 2394,

     5107, 2316, 5110, 2321, 2317, 2321, 2323, 2323, 2323, 2323,
     2322, 2392, 2322, 2388, 2385, 2318, 2384, 2324, 2324, 2324,
     2324, 2325, 2325, 2325, 2325, 2326, 2326, 2326, 2326, 2383,
     2381, 2323, 2319, 2323, 5094, 2327, 2327, 2327, 2327, 5113,
     2380, 5094, 2324, 2320, 2324, 5116, 2325, 5113, 2325, 5094,
     2326, 2379, 2326, 5116, 2378, 2322, 2377, 2375, 2374, 2321,
     2327, 2373, 2327, 2328, 2328, 2328, 2328, 2370, 2329, 2329,
     2329, 2329, 2323, 2364, 2330, 2330, 2330, 2330, 5118, 5120,
     2363, 2324, 2331, 2331, 2331, 2331, 5118, 5120, 2328, 5122,
     2328, 5103, 2362, 2329, 2326, 2329, 2361, 5122, 5103, 2330,

     2325, 2330, 2332, 2332, 2332, 2332, 5103, 2331, 5108, 2331,
     2333, 2333, 2333, 2333, 5124, 5108, 5126, 2327, 2334, 2334,
     2334, 2334, 5124, 5108, 5126, 2328, 2360, 2332, 5128, 2332,
     2376, 2376, 2376, 2376, 2329, 2333, 5128, 2333, 2359, 2335,
     2335, 2335, 2335, 2334, 2358, 2334, 2336, 2336, 2336, 2336,
     5130, 2337, 2337, 2337, 2337, 2357, 2356, 2330, 5130, 2331,
     2348, 2347, 2304, 2331, 2335, 2287, 2335, 2338, 2338, 2338,
     2338, 2336, 2284, 2336, 2283, 2332, 2337, 2272, 2337, 2339,
     2339, 2339, 2339, 2340, 2340, 2340, 2340, 2341, 2341, 2341,
     2341, 2271, 2338, 5132, 2338, 5134, 2350, 2350, 2350, 2350,

     2334, 5132, 2262, 5134, 2339, 2261, 2339, 2257, 2340, 2256,
     2340, 2255, 2341, 5111, 2341, 2342, 2342, 2342, 2342, 2337,
     5111, 2336, 2335, 2350, 2343, 2343, 2343, 2343, 5111, 2344,
     2344, 2344, 2344, 2382, 2382, 2382, 2382, 2254, 2253, 5136,
     2342, 2252, 2342, 2345, 2345, 2345, 2345, 5136, 2338, 2343,
     2251, 2343, 5119, 2341, 2344, 2250, 2344, 2247, 2382, 5119,
     2340, 2339, 5121, 2346, 2346, 2346, 2346, 5119, 2345, 5121,
     2345, 2351, 2351, 2351, 2351, 2351, 2246, 5121, 2351, 5123,
     5125, 2386, 2386, 2386, 2386, 5138, 5123, 5125, 2346, 5140,
     2346, 2342, 2386, 5138, 5123, 5125, 2351, 5140, 2245, 2343,

     2389, 2389, 2389, 2389, 2243, 2242, 2389, 2391, 2386, 2395,
     2391, 2344, 2390, 2390, 2390, 2390, 2241, 2240, 2395, 2395,
     2395, 2395, 2239, 2238, 2345, 2346, 2391, 2391, 2391, 2391,
     2391, 2391, 2396, 2396, 2396, 2396, 2398, 2398, 2398, 2398,
     2403, 2403, 2403, 2403, 2235, 5127, 5142, 2403, 2404, 2404,
     2404, 2404, 5127, 2234, 5142, 2404, 2405, 2405, 2405, 2405,
     5127, 2351, 2406, 2406, 2406, 2406, 2407, 2407, 2407, 2407,
     2233, 2231, 5144, 2405, 2230, 2434, 2434, 2434, 2434, 2406,
     5144, 2405, 2434, 2407, 2229, 2228, 2227, 2406, 2434, 2225,
     5146, 2407, 2411, 2411, 2411, 2411, 2411, 2415, 5146, 2411,

     2215, 2213, 2437, 2437, 2437, 2437, 2415, 2415, 2415, 2415,
     2212, 2435, 2435, 2435, 2435, 2211, 2403, 2411, 2435, 2437,
     2439, 2439, 2439, 2439, 2435, 2210, 5148, 2439, 2406, 2440,
     2440, 2440, 2440, 2405, 5148, 2209, 2440, 2441, 2441, 2441,
     2441, 2449, 2449, 2449, 2449, 2407, 2450, 2450, 2450, 2450,
     2482, 2482, 2482, 2482, 2482, 2486, 2449, 2482, 2491, 2208,
     2207, 2491, 2205, 2196, 2486, 2486, 2486, 2486, 2495, 2495,
     2495, 2495, 2191, 2188, 2186, 2482, 2168, 2499, 2499, 2499,
     2499, 5129, 2411, 2159, 2499, 2491, 2158, 5153, 5129, 2491,
     2499, 2500, 2500, 2500, 2500, 5153, 5129, 2156, 2500, 2501,

     2501, 2501, 2501, 5155, 2500, 2502, 2502, 2502, 2502, 2146,
     2143, 5155, 2501, 2142, 5131, 2491, 2505, 2505, 2505, 2505,
     2505, 5131, 2511, 2505, 2506, 2506, 2506, 2506, 2141, 5131,
     2502, 2511, 2511, 2511, 2511, 2506, 2522, 2140, 2139, 2138,
     2482, 2505, 2526, 2137, 2135, 2522, 2522, 2522, 2522, 2530,
     2134, 2526, 2526, 2526, 2526, 2534, 2133, 2132, 2530, 2530,
     2530, 2530, 5157, 2542, 2534, 2534, 2534, 2534, 2535, 2122,
     5157, 2535, 2542, 2542, 2542, 2542, 2573, 2573, 2573, 2573,
     2121, 2572, 2572, 2572, 2572, 2116, 5170, 2535, 2535, 2535,
     2535, 2535, 2535, 2572, 5170, 2115, 2572, 2574, 2574, 2574,

     2574, 2575, 2575, 2575, 2575, 2114, 2505, 2576, 2576, 2576,
     2576, 2577, 2577, 2577, 2577, 2578, 2578, 2578, 2578, 2579,
     2579, 2579, 2579, 2577, 2113, 2584, 2584, 2584, 2584, 2584,
     2110, 2579, 2584, 2616, 2616, 2616, 2616, 2619, 2619, 2619,
     2619, 5172, 2620, 2620, 2620, 2620, 5184, 5192, 2619, 5172,
     2584, 2109, 2619, 2620, 5184, 5192, 2098, 2620, 2636, 2636,
     2636, 2636, 2619, 2619, 2619, 2636, 5193, 2620, 2620, 2620,
     2622, 2622, 2622, 2622, 2628, 2628, 2628, 2628, 2096, 2095,
     2078, 2622, 5193, 2072, 2068, 2628, 2629, 2629, 2629, 2629,
     5193, 2643, 2643, 2643, 2643, 2622, 2651, 2629, 2643, 2628,

     2066, 2709, 2709, 2709, 2709, 2651, 2651, 2651, 2651, 2065,
     2064, 2629, 2709, 2063, 2062, 2584, 2595, 2595, 2595, 2595,
     2595, 2595, 2595, 2595, 2595, 2595, 2595, 2595, 2595, 2595,
     2595, 2595, 2595, 2595, 2595, 2595, 2806, 2806, 2806, 2806,
     2061, 5195, 2595, 2595, 2595, 2595, 2595, 2595, 2595, 5195,
     2058, 5197, 2629, 2628, 2635, 2635, 2635, 2635, 2635, 5197,
     5200, 2635, 2637, 2637, 2637, 2637, 2637, 2057, 5200, 2637,
     5133, 2053, 5207, 2595, 2595, 2595, 2595, 5133, 2595, 2635,
     5207, 2706, 2706, 2706, 2706, 5133, 5135, 2637, 2706, 2707,
     2707, 2707, 2707, 5135, 5211, 5227, 2707, 2818, 2818, 2818,

     2818, 5135, 5211, 5227, 2595, 2595, 2595, 2595, 2595, 2606,
     2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606,
     2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2639, 2639,
     2639, 2639, 2052, 2047, 5236, 2606, 2606, 2606, 2606, 2606,
     2606, 2606, 5236, 5258, 2635, 2640, 2640, 2640, 2640, 2041,
     2037, 5258, 2637, 2639, 2641, 2641, 2641, 2641, 2655, 2655,
     2655, 2655, 2640, 2036, 2035, 2034, 2606, 2606, 2606, 2606,
     2640, 2606, 2824, 2824, 2824, 2824, 5263, 2714, 2033, 2641,
     2032, 2030, 2714, 2655, 5263, 2705, 2705, 2705, 2705, 2714,
     2714, 2714, 2714, 2714, 2714, 2029, 2022, 2606, 2606, 2606,

     2606, 2606, 2702, 2702, 2702, 2702, 5265, 2021, 5270, 2702,
     2705, 2702, 2705, 2017, 5265, 2702, 5270, 2016, 2640, 2654,
     2654, 2654, 2654, 2655, 2001, 2654, 1999, 2702, 2655, 1992,
     2708, 2708, 2708, 2708, 2811, 2811, 2811, 2811, 2655, 1990,
     1987, 2655, 2708, 5283, 2654, 2703, 2703, 2703, 2703, 1984,
     2654, 5283, 2703, 5137, 2703, 2708, 1979, 2708, 2703, 2811,
     5137, 2702, 2711, 2711, 2711, 2711, 5198, 2654, 5137, 2711,
     2703, 5139, 1969, 5141, 2711, 2654, 1968, 1967, 5139, 2654,
     5141, 2654, 5198, 2654, 2654, 2654, 5139, 1963, 5141, 2654,
     5198, 2654, 2654, 2654, 2654, 5240, 2654, 1962, 2654, 2654,

     2654, 2654, 2654, 5143, 2703, 2712, 2712, 2712, 2712, 1961,
     5143, 5240, 2712, 2715, 2715, 2715, 2715, 2712, 5143, 5240,
     2715, 1960, 2715, 1959, 1953, 5241, 2715, 2717, 2717, 2717,
     2717, 2732, 2732, 2732, 2732, 1949, 1934, 5250, 2715, 2717,
     5145, 5241, 2732, 2733, 2733, 2733, 2733, 5145, 2732, 5241,
     1932, 1929, 2717, 5250, 2733, 5145, 2734, 2734, 2734, 2734,
     2733, 5250, 1928, 2736, 2736, 2736, 2736, 2734, 2735, 2735,
     2735, 2735, 2715, 2734, 2736, 2737, 2737, 2737, 2737, 2735,
     2736, 2741, 2741, 2741, 2741, 2735, 2737, 2738, 2738, 2738,
     2738, 1913, 2737, 1912, 2739, 2739, 2739, 2739, 2738, 2740,

     2740, 2740, 2740, 1910, 2738, 2739, 2741, 1909, 2741, 1908,
     2740, 2739, 2742, 2742, 2742, 2742, 2740, 2743, 2743, 2743,
     2743, 1899, 5330, 2733, 2741, 2830, 2830, 2830, 2830, 2734,
     5330, 5147, 5346, 2736, 2735, 5375, 2830, 2742, 5147, 2742,
     5346, 1884, 2743, 5375, 2743, 1852, 5147, 1851, 2742, 2744,
     2744, 2744, 2744, 2745, 2745, 2745, 2745, 1849, 2737, 5251,
     1840, 1839, 2743, 2746, 2746, 2746, 2746, 2739, 2738, 2747,
     2747, 2747, 2747, 1835, 2744, 5251, 2744, 1834, 2745, 5379,
     2745, 2740, 1833, 5251, 1832, 2745, 5149, 5379, 2746, 1830,
     2746, 1829, 2744, 5149, 2747, 1828, 2747, 2748, 2748, 2748,

     2748, 5149, 2747, 2749, 2749, 2749, 2749, 5296, 2746, 2750,
     2750, 2750, 2750, 2751, 2751, 2751, 2751, 2752, 2752, 2752,
     2752, 5395, 2748, 5296, 2748, 1827, 5154, 5399, 2749, 5395,
     2749, 5296, 1819, 5154, 2750, 5399, 2750, 5421, 2751, 2749,
     2751, 5154, 2752, 5422, 2752, 5421, 2748, 2751, 1797, 2750,
     1796, 5422, 2750, 2753, 2753, 2753, 2753, 2754, 2754, 2754,
     2754, 2755, 2755, 2755, 2755, 1795, 1794, 2752, 2756, 2756,
     2756, 2756, 2757, 2757, 2757, 2757, 1792, 5429, 2753, 5462,
     2753, 1791, 2754, 1788, 2754, 5429, 2755, 5462, 2755, 2758,
     2758, 2758, 2758, 2756, 1777, 2756, 5501, 2757, 2754, 2757,

     2759, 2759, 2759, 2759, 5501, 2753, 2756, 2755, 1775, 2760,
     2760, 2760, 2760, 1774, 2758, 1773, 2758, 2761, 2761, 2761,
     2761, 2762, 2762, 2762, 2762, 2759, 5156, 2759, 1767, 2763,
     2763, 2763, 2763, 5156, 2760, 2757, 2760, 2765, 2765, 2765,
     2765, 5156, 2761, 1766, 2761, 5403, 2762, 5530, 2762, 1764,
     2767, 2767, 2767, 2767, 2763, 5530, 2763, 2766, 2766, 2766,
     2766, 5403, 2765, 5158, 2765, 1763, 5171, 1742, 2758, 5403,
     5158, 2760, 1738, 5171, 1736, 2767, 1735, 2767, 5158, 1733,
     2759, 5171, 2766, 1720, 2766, 2831, 2831, 2831, 2831, 5546,
     1712, 2831, 2832, 2832, 2832, 2832, 2762, 5546, 2761, 2763,

     2764, 2764, 2764, 2764, 2764, 2764, 2764, 2764, 2764, 2764,
     2764, 2764, 2764, 2764, 2764, 2764, 2764, 2764, 2764, 2764,
     2769, 2769, 2769, 2769, 2765, 2836, 2764, 2767, 2764, 2764,
     2764, 2764, 2764, 1708, 2836, 2836, 2836, 2836, 2766, 2768,
     2768, 2768, 2768, 1696, 1690, 2769, 1685, 2769, 2770, 2770,
     2770, 2770, 2771, 2771, 2771, 2771, 1682, 2764, 2764, 2764,
     2764, 1678, 2764, 1668, 2768, 1667, 2768, 1665, 2772, 2772,
     2772, 2772, 1664, 2770, 1663, 2770, 1662, 2771, 1661, 2771,
     2773, 2773, 2773, 2773, 2858, 2858, 2858, 2858, 2764, 2764,
     2764, 2764, 2764, 2772, 1660, 2772, 5553, 1659, 5573, 2769,

     2774, 2774, 2774, 2774, 5553, 2773, 5573, 2773, 5444, 2768,
     2775, 2775, 2775, 2775, 2776, 2776, 2776, 2776, 2777, 2777,
     2777, 2777, 1658, 2770, 5444, 2774, 5646, 2774, 1657, 5173,
     5173, 2771, 5444, 1656, 5646, 2775, 5173, 2775, 1655, 2776,
     1653, 2776, 1646, 2777, 5173, 2777, 2778, 2778, 2778, 2778,
     2772, 2779, 2779, 2779, 2779, 1644, 2773, 2780, 2780, 2780,
     2780, 2781, 2781, 2781, 2781, 1643, 2782, 2782, 2782, 2782,
     5186, 2778, 5194, 2778, 1642, 2774, 2779, 5186, 2779, 5194,
     2777, 1640, 2780, 1639, 2780, 5186, 2781, 5194, 2781, 2775,
     2776, 2782, 1638, 2782, 2783, 2783, 2783, 2783, 2784, 2784,

     2784, 2784, 2785, 2785, 2785, 2785, 2786, 2786, 2786, 2786,
     2787, 2787, 2787, 2787, 5467, 2788, 2788, 2788, 2788, 2783,
     2780, 2783, 2778, 2784, 2779, 2784, 1636, 2785, 2782, 2785,
     5467, 2786, 1614, 2786, 1612, 2787, 1611, 2787, 5467, 1574,
     2788, 2781, 2788, 1571, 2789, 2789, 2789, 2789, 2790, 2790,
     2790, 2790, 2791, 2791, 2791, 2791, 2792, 2792, 2792, 2792,
     2783, 1560, 1559, 1551, 2784, 2793, 2793, 2793, 2793, 2789,
     2786, 2789, 2785, 2790, 1540, 2790, 1539, 2791, 1534, 2791,
     2787, 2792, 5196, 2792, 2844, 2788, 2786, 1532, 1530, 5196,
     2793, 1529, 2793, 2844, 2844, 2844, 2844, 5196, 2794, 2794,

     2794, 2794, 2795, 2795, 2795, 2795, 2789, 2796, 2796, 2796,
     2796, 1527, 2797, 2797, 2797, 2797, 2798, 2798, 2798, 2798,
     2792, 2790, 2791, 2794, 1525, 2794, 1523, 2795, 1522, 2795,
     1521, 1519, 2796, 5199, 2796, 1517, 1516, 2797, 2793, 2797,
     5199, 2798, 1515, 2798, 2799, 2799, 2799, 2799, 5199, 2839,
     2839, 2839, 2839, 1514, 1512, 2840, 2840, 2840, 2840, 2856,
     2856, 2856, 2856, 2794, 1503, 1502, 2839, 1501, 1499, 2799,
     1497, 2799, 2840, 2794, 2839, 2796, 2856, 2795, 2797, 2889,
     2840, 2863, 2863, 2863, 2863, 1496, 1495, 1494, 2889, 2889,
     2889, 2889, 2891, 2891, 2891, 2891, 1492, 1467, 2798, 2892,

     2892, 2892, 2892, 2893, 2893, 2893, 2893, 2894, 2894, 2894,
     2894, 2898, 2892, 2946, 2946, 2946, 2946, 2840, 1458, 1456,
     2898, 2898, 2898, 2898, 2906, 2799, 1454, 1453, 2893, 2839,
     2909, 1442, 2894, 2906, 2906, 2906, 2906, 2912, 1431, 2909,
     2909, 2909, 2909, 2915, 1427, 1401, 2912, 2912, 2912, 2912,
     2921, 1397, 2915, 2915, 2915, 2915, 1383, 1382, 1380, 2921,
     2921, 2921, 2921, 2974, 2974, 2974, 2974, 2982, 2982, 2982,
     2982, 2891, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957,
     2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957,
     2957, 2957, 2982, 3149, 3149, 3149, 3149, 1378, 2957, 2957,

     2957, 2957, 2957, 2957, 2957, 2971, 2971, 1368, 1367, 5481,
     2971, 1354, 1353, 5201, 2971, 2971, 2979, 2979, 2979, 2979,
     5201, 1352, 1349, 2979, 2971, 5481, 2971, 1336, 5201, 2957,
     2957, 2957, 2957, 5481, 2957, 2980, 2980, 2980, 2980, 1335,
     1334, 1325, 2980, 3012, 3012, 3012, 3012, 3150, 3150, 3150,
     3150, 3157, 3157, 3157, 3157, 3162, 3162, 3162, 3162, 1313,
     2957, 2957, 2957, 2957, 2957, 2958, 2958, 2958, 2958, 2958,
     2958, 2958, 2958, 2958, 2958, 2958, 2958, 2958, 2958, 2958,
     2958, 2958, 2958, 2958, 2958, 1301, 1290, 2976, 2976, 2976,
     2976, 2958, 2958, 2958, 2958, 2958, 2958, 2958, 2976, 3175,

     3175, 3175, 3175, 2977, 2977, 2977, 2977, 2985, 2985, 2985,
     2985, 1289, 2976, 1288, 2977, 1287, 2997, 2997, 2997, 2997,
     1286, 1285, 2958, 2958, 2958, 2958, 1284, 2958, 2977, 1283,
     3012, 5238, 2985, 2984, 2984, 2984, 2984, 2984, 5238, 1275,
     2984, 2997, 2986, 2986, 2986, 2986, 5238, 1268, 1253, 2976,
     5623, 1243, 1224, 2958, 2958, 2958, 2958, 2958, 2984, 2986,
     1214, 1213, 3046, 3046, 3046, 3046, 5623, 2986, 2977, 3046,
     3047, 3047, 3047, 3047, 5623, 3048, 3048, 3048, 3048, 1176,
     1170, 2997, 3051, 3051, 3051, 3051, 2997, 3046, 1169, 3052,
     3052, 3052, 3052, 1168, 3051, 3047, 2997, 5243, 1145, 2997,

     3048, 3052, 3048, 1144, 5243, 3054, 1136, 3051, 2986, 1128,
     3054, 1120, 5243, 1111, 3052, 1101, 3052, 3054, 3054, 3054,
     3054, 3054, 3054, 2984, 2996, 2996, 2996, 2996, 3055, 1095,
     2996, 1090, 5244, 3055, 1082, 3061, 3061, 3061, 3061, 5244,
     3055, 3055, 3055, 3055, 3055, 3055, 3061, 5244, 1081, 2996,
     5624, 1076, 3061, 1075, 1071, 2996, 3062, 3062, 3062, 3062,
     3063, 3063, 3063, 3063, 1065, 1054, 5624, 3062, 5245, 1043,
     5615, 3063, 2996, 3062, 5624, 5245, 5615, 3063, 5252, 1016,
     2996, 1010, 1009, 5245, 2996, 5252, 2996, 5252, 2996, 2996,
     2996, 1008, 5615, 5252, 2996, 1007, 2996, 2996, 2996, 2996,

     5615, 2996, 1006, 2996, 2996, 2996, 2996, 2996, 3064, 3064,
     3064, 3064, 3065, 3065, 3065, 3065, 1005, 1002,  998, 3064,
     5264,  979,  922, 3065,  921, 3064, 3063, 5264,  920, 3065,
     3066, 3066, 3066, 3066,  919, 5264, 3062, 3067, 3067, 3067,
     3067, 3066, 3068, 3068, 3068, 3068,  905, 3066, 3067, 3069,
     3069, 3069, 3069, 3068, 3067, 3071, 3071, 3071, 3071, 3068,
     3069, 3161, 3161, 3161, 3161,  904, 3069, 3161, 3070, 3070,
     3070, 3070, 3072, 3072, 3072, 3072, 3176, 3176, 3176, 3176,
     3071,  902, 3071, 3073, 3073, 3073, 3073, 3064, 3065, 3071,
      901,  900, 3066, 3070, 5272, 3070,  899, 3072,  898, 3072,

     3070, 5272,  866, 3067, 3074, 3074, 3074, 3074, 3073, 5272,
     3073,  841, 3068, 3067,  835, 3073,  833,  832,  831, 3069,
     3075, 3075, 3075, 3075, 3072, 3076, 3076, 3076, 3076, 3074,
      808, 3074, 3077, 3077, 3077, 3077,  801,  786,  785, 3074,
     3159, 3159, 3159, 3159,  728, 3075, 3176, 3075,  716,  697,
     3076, 3159, 3076, 3155, 3155, 3155, 3155, 3077,  681, 3077,
     3078, 3078, 3078, 3078, 3155,  680, 3076, 3079, 3079, 3079,
     3079, 3075,  678, 3075, 3080, 3080, 3080, 3080, 3077, 3081,
     3081, 3081, 3081,  671,  647, 3078,  646, 3078, 3284, 3284,
     3284, 3284, 3079,  644, 3079,  630,  621,  620, 3078, 3080,

      610, 3080,  608,  607, 3081, 3079, 3081, 3082, 3082, 3082,
     3082, 3083, 3083, 3083, 3083, 3084, 3084, 3084, 3084,  606,
     3080,  604, 3081, 3085, 3085, 3085, 3085, 3086, 3086, 3086,
     3086,  603, 3082, 3155, 3082,  602, 3083,  598, 3083, 3082,
     3084,  549, 3084,  517, 3087, 3087, 3087, 3087, 3085,  512,
     3085, 3084, 3086,  508, 3086, 3083, 3088, 3088, 3088, 3088,
     3089, 3089, 3089, 3089, 3090, 3090, 3090, 3090,  507, 3087,
     3085, 3087, 3086, 3091, 3091, 3091, 3091, 3092, 3092, 3092,
     3092, 3088,  473, 3088,  471, 3089, 5273, 3089,  469, 3090,
      460, 3090,  455, 5273, 3093, 3093, 3093, 3093, 3091,  421,

     3091, 5273, 3092,  410, 3092, 3095, 3095, 3095, 3095, 3098,
     3098, 3098, 3098, 3099, 3099, 3099, 3099, 3087, 3088, 3093,
      392, 3093, 5282, 3101, 3101, 3101, 3101,  390,  375, 5282,
     3095,  337, 3095,    0, 3098, 3091, 3098, 5282, 3099,    0,
     3099,    0,    0, 3092, 3090,    0,    0, 3089, 3101,    0,
     3101, 3102, 3102, 3102, 3102, 3103, 3103, 3103, 3103, 3104,
     3104, 3104, 3104, 3105, 3105, 3105, 3105,    0, 5293, 3093,
     3106, 3106, 3106, 3106, 5301, 5293, 3102, 3099, 3102,    0,
     3103, 5301, 3103, 5293, 3104,    0, 3104,    0, 3105, 5301,
     3105,    0,    0, 3099,    0, 3106,    0, 3106, 3107, 3107,

     3107, 3107, 3108, 3108, 3108, 3108, 3109, 3109, 3109, 3109,
        0, 3110, 3110, 3110, 3110, 3302, 3302, 3302, 3302, 3103,
        0,    0,    0, 3107,    0, 3107,    0, 3108, 3105, 3108,
     5304, 3109, 3102, 3109, 3104,    0, 3110, 5304, 3110,    0,
     3106, 3111, 3111, 3111, 3111, 5304, 3112, 3112, 3112, 3112,
     3168, 3168, 3168, 3168, 3113, 3113, 3113, 3113, 3114, 3114,
     3114, 3114,    0, 3107,    0,    0, 3111, 3168, 3111, 5306,
        0, 3112, 3109, 3112,    0, 3168, 5306, 3108, 3110, 3113,
        0, 3113,    0, 3114, 5306, 3114, 3110, 3115, 3115, 3115,
     3115, 3298, 3298, 3298, 3298, 3116, 3116, 3116, 3116,    0,

        0, 3117, 3117, 3117, 3117, 3118, 3118, 3118, 3118,    0,
        0,    0, 3115,    0, 3115,    0, 5312,    0, 3111, 3113,
     3116,    0, 3116, 5312, 3114, 3112, 3117, 3168, 3117,    0,
     3118, 5312, 3118,    0, 3119, 3119, 3119, 3119, 3120, 3120,
     3120, 3120, 3123, 3123, 3123, 3123, 3124, 3124, 3124, 3124,
     3125, 3125, 3125, 3125, 3126, 3126, 3126, 3126,    0, 3119,
     3115, 3119,    0, 3120,    0, 3120,    0, 3123,    0, 3123,
        0, 3124, 3116, 3124,    0, 3125,    0, 3125, 3298, 3126,
        0, 3126, 3117,    0, 3118,    0, 3127, 3127, 3127, 3127,
     3128, 3128, 3128, 3128, 3206, 3206, 3206, 3206, 3119,    0,

        0, 3206, 3120, 3129, 3129, 3129, 3129, 3206,    0,    0,
     3124, 3127,    0, 3127,    0, 3128,    0, 3128, 3120,    0,
     3126, 3123,    0, 3125, 3130, 3130, 3130, 3130, 3129,    0,
     3129, 3131, 3131, 3131, 3131, 3132, 3132, 3132, 3132, 3133,
     3133, 3133, 3133, 3134, 3134, 3134, 3134,    0,    0, 3130,
     3127, 3130, 3135, 3135, 3135, 3135, 3131,    0, 3131,    0,
     3132,    0, 3132,    0, 3133, 3129, 3133,    0, 3134,    0,
     3134, 3128, 3136, 3136, 3136, 3136,    0, 3135,    0, 3135,
        0, 3169, 3169, 3169, 3169, 3276, 3276, 3276, 3276,    0,
     3130,    0,    0, 3131,    0,    0, 3276, 3136, 3169, 3136,

     3277, 3277, 3277, 3277,    0,    0, 3169,    0,    0,    0,
     3276, 3277,    0,    0, 3135,    0, 3279, 3279, 3279, 3279,
     3279,    0, 3132, 3279, 3134, 3277, 3280, 3280, 3280, 3280,
        0, 3287, 3287, 3287, 3287, 3300, 3300, 3300, 3300,    0,
        0, 3279, 3136, 3280, 3326, 3326, 3326, 3326,    0, 3276,
        0, 3280, 3420, 3420, 3420, 3420, 3287, 3301, 3301, 3301,
     3301,    0, 3169, 3334, 3334, 3334, 3334,    0,    0,    0,
     3334,    0,    0, 3337, 3337, 3337, 3337, 3335, 3335, 3335,
     3335,    0,    0,    0, 3335,    0, 3335, 3277, 5313,    0,
     3335, 3429, 3429, 3429, 3429, 5313, 3287, 3300, 3337,    0,

     3280, 3287, 3335, 5313,    0, 5314, 3279, 3286, 3286, 3286,
     3286, 3287, 5314, 3286, 3287, 5315, 3340, 3340, 3340, 3340,
     5314, 3301, 5315, 3341, 3341, 3341, 3341, 3340,    0,    0,
     5315, 3326, 3286, 3340, 3341,    0, 3335, 3301, 3286,    0,
     3341, 3342, 3342, 3342, 3342, 3343, 3343, 3343, 3343,    0,
     5316,    0, 3342, 5317,    0, 3286, 3343, 5316, 3342, 5318,
     5317,    0, 3343, 3286,    0, 5316, 5318, 3286, 5317, 3286,
        0, 3286, 3286, 3286, 5318,    0, 5319, 3286,    0, 3286,
     3286, 3286, 3286, 5319, 3286,    0, 3286, 3286, 3286, 3286,
     3286, 5319, 3344, 3344, 3344, 3344,    0, 3341,    0, 3345,

     3345, 3345, 3345, 3344, 3346, 3346, 3346, 3346, 3342, 3344,
     3345, 3347, 3347, 3347, 3347, 3346, 3345,    0,    0,    0,
     3343, 3346, 3347, 3348, 3348, 3348, 3348,    0, 3347, 3349,
     3349, 3349, 3349,    0, 3348, 3350, 3350, 3350, 3350,    0,
     3348,    0, 3351, 3351, 3351, 3351, 5320, 3352, 3352, 3352,
     3352, 5321,    0, 5320, 3349,    0, 3349,    0, 5321,    0,
     3350, 5320, 3350, 3345,    0,    0, 5321, 3351, 3346, 3351,
        0,    0, 3352, 3344, 3352, 3347,    0,    0, 3350, 3349,
     3353, 3353, 3353, 3353,    0, 3352, 3351, 3354, 3354, 3354,
     3354,    0, 3355, 3355, 3355, 3355,    0, 3356, 3356, 3356,

     3356,    0, 3348,    0,    0, 3353, 5322, 3353, 3430, 3430,
     3430, 3430, 3354, 5322, 3354,    0,    0, 3355, 3353, 3355,
        0, 5322, 3356, 3354, 3356, 3357, 3357, 3357, 3357, 3358,
     3358, 3358, 3358, 3356, 3359, 3359, 3359, 3359, 3355, 3360,
     3360, 3360, 3360, 3361, 3361, 3361, 3361,    0, 5323,    0,
     3357,    0, 3357,    0, 3358, 5323, 3358,    0, 5324, 3359,
        0, 3359,    0, 5323, 3360, 5324, 3360,    0, 3361, 3358,
     3361,    0, 3357, 5324,    0, 3361,    0,    0,    0, 3359,
     3362, 3362, 3362, 3362, 3363, 3363, 3363, 3363,    0,    0,
     3360, 3364, 3364, 3364, 3364, 3365, 3365, 3365, 3365, 5325,

        0, 3366, 3366, 3366, 3366, 3362, 5325, 3362, 5326, 3363,
        0, 3363, 5327, 3362, 5325, 5326, 3364, 5329, 3364, 5327,
     3365,    0, 3365, 5326, 5329, 3364, 3366, 5327, 3366,    0,
        0, 3365, 5329, 3366, 3363, 3367, 3367, 3367, 3367, 3368,
     3368, 3368, 3368, 3369, 3369, 3369, 3369, 3371, 3371, 3371,
     3371, 3372, 3372, 3372, 3372, 3373, 3373, 3373, 3373,    0,
     3367,    0, 3367,    0, 3368,    0, 3368,    0, 3369,    0,
     3369,    0, 3371,    0, 3371,    0, 3372,    0, 3372,    0,
     3373,    0, 3373, 3374, 3374, 3374, 3374, 3375, 3375, 3375,
     3375,    0,    0,    0, 3374, 3378, 3378, 3378, 3378, 3379,

     3379, 3379, 3379, 3368, 5332, 3367, 5333, 3372, 3374,    0,
     3374, 5332, 3375, 5333, 3375, 3372,    0, 3372,    0, 5332,
     3378, 5333, 3378,    0, 3379,    0, 3379, 3371,    0,    0,
     3373, 3372,    0, 3372, 3380, 3380, 3380, 3380, 3381, 3381,
     3381, 3381,    0, 3381,    0, 3382, 3382, 3382, 3382, 3383,
     3383, 3383, 3383, 3384, 3384, 3384, 3384,    0,    0, 3380,
     5334, 3380,    0, 3381, 5345, 3381,    0, 5334, 3375, 3379,
     3382, 5345, 3382,    0, 3383, 5334, 3383,    0, 3384, 5345,
     3384, 3385, 3385, 3385, 3385, 3386, 3386, 3386, 3386, 3387,
     3387, 3387, 3387, 3388, 3388, 3388, 3388, 3389, 3389, 3389,

     3389, 5648, 5353,    0, 3380,    0, 3385, 5648, 3385, 5353,
     3386,    0, 3386, 3383, 3387,    0, 3387, 5353, 3388, 3384,
     3388,    0, 3389, 5648, 3389, 3390, 3390, 3390, 3390,    0,
        0, 5648, 3391, 3391, 3391, 3391, 3392, 3392, 3392, 3392,
     3393, 3393, 3393, 3393,    0, 3394, 3394, 3394, 3394, 5367,
     3390, 3387, 3390, 5374, 3385, 3388, 5367, 3391,    0, 3391,
     5374, 3392,    0, 3392, 5367, 3393,    0, 3393, 5374,    0,
     3394,    0, 3394, 3395, 3395, 3395, 3395, 3396, 3396, 3396,
     3396,    0,    0, 3397, 3397, 3397, 3397,    0, 3398, 3398,
     3398, 3398, 3399, 3399, 3399, 3399,    0,    0, 3395,    0,

     3395,    0, 3396,    0, 3396,    0, 3393, 3394, 3397,    0,
     3397, 3390, 3391, 3398,    0, 3398,    0, 3399,    0, 3399,
     3402, 3402, 3402, 3402, 3403, 3403, 3403, 3403, 3404, 3404,
     3404, 3404, 3405, 3405, 3405, 3405, 3398, 5354, 5354, 3395,
     3406, 3406, 3406, 3406, 5354, 3402,    0, 3402,    0, 3403,
        0, 3403, 5354, 3404,    0, 3404,    0, 3405, 3396, 3405,
        0, 3399,    0,    0, 3397, 3406,    0, 3406, 3398, 3407,
     3407, 3407, 3407, 3408, 3408, 3408, 3408, 3409, 3409, 3409,
     3409, 3433, 3433, 3433, 3433,    0, 3402,    0, 5377,    0,
     3403,    0, 3433,    0, 3407, 5377, 3407,    0, 3408,    0,

     3408,    0, 3409, 5377, 3409,    0,    0,    0, 3404, 3410,
     3410, 3410, 3410, 3405, 3411, 3411, 3411, 3411, 3413, 3413,
     3413, 3413, 3414, 3414, 3414, 3414, 3415, 3415, 3415, 3415,
     3416, 3416, 3416, 3416, 3410, 5378, 3410,    0,    0, 3411,
        0, 3411, 5378, 3413, 3409, 3413,    0, 3414,    0, 3414,
     5378, 3415, 5649, 3415, 3408, 3416, 3407, 3416, 5649,    0,
     3417, 3417, 3417, 3417, 3424, 3424, 3424, 3424, 3434, 3434,
     3434, 3434,    0,    0, 5649, 3424,    0, 3435, 3435, 3435,
     3435,    0, 5649, 3410,    0, 3417, 3414, 3417, 3435, 3437,
     3437, 3437, 3437, 3440, 3440, 3440, 3440,    0,    0, 3440,

        0,    0, 3414, 3416, 3441, 3441, 3441, 3441, 3528, 3528,
     3528, 3528, 3415, 3443, 3443, 3443, 3443, 3444, 3444, 3444,
     3444, 3522, 3522, 3522, 3522, 3523, 3523, 3523, 3523,    0,
     3443,    0, 3522, 3417, 3444,    0, 3523,    0, 3443,    0,
        0,    0, 3444,    0, 3424,    0, 3522,    0,    0,    0,
     3523, 3526, 3526, 3526, 3526, 3530, 3530, 3530, 3530, 3531,
     3531, 3531, 3531, 3532, 3532, 3532, 3532,    0, 3526, 3533,
     3533, 3533, 3533,    0,    0, 3443, 3526, 3545, 3545, 3545,
     3545, 3547, 3547, 3547, 3547, 3549, 3549, 3549, 3549, 3552,
     3552, 3552, 3552, 3444, 3533, 3554, 3554, 3554, 3554,    0,

        0,    0, 3522, 3557, 3557, 3557, 3557, 3560, 3560, 3560,
     3560,    0, 3523, 3571, 3571, 3571, 3571, 3526, 3566, 3566,
     3566, 3566, 3572, 3572, 3572, 3572, 5376,    0, 3557, 3575,
     3575, 3575, 3575, 5376, 3533, 5381,    0, 3547,    0, 3533,
     5376,    0, 5381, 3566,    0, 3547,    0, 3547, 5376, 3533,
     5381,    0, 3533, 3583, 3583, 3583, 3583, 3614, 3614, 3614,
     3614, 3547, 3614, 3547, 3583,    0, 3566, 3614,    0,    0,
     3583, 3584, 3584, 3584, 3584, 3585, 3585, 3585, 3585,    0,
        0,    0, 3584,    0, 5396, 5396, 3585,    0, 3584,    0,
        0, 5396, 3585, 3586, 3586, 3586, 3586,    0, 3566, 5396,

     3587, 3587, 3587, 3587, 3586, 3589, 3589, 3589, 3589, 3572,
     3586, 3587, 3588, 3588, 3588, 3588, 3589, 3587,    0, 3583,
        0, 5398, 3589, 3588, 3590, 3590, 3590, 3590, 5398, 3588,
        0,    0,    0, 3584,    0, 3590, 5398, 3585,    0,    0,
        0, 3590, 3591, 3591, 3591, 3591, 3592, 3592, 3592, 3592,
     3593, 3593, 3593, 3593,    0, 3594, 3594, 3594, 3594, 3586,
     3595, 3595, 3595, 3595,    0,    0,    0, 3591,    0, 3591,
        0, 3592,    0, 3592,    0, 3593,    0, 3593, 3592,    0,
     3594, 3587, 3594,    0,    0, 3595,    0, 3595, 3588,    0,
     3590, 3594, 3591, 3596, 3596, 3596, 3596, 3597, 3597, 3597,

     3597, 3598, 3598, 3598, 3598, 3599, 3599, 3599, 3599, 3595,
     5407, 3600, 3600, 3600, 3600,    0,    0, 5407, 3596,    0,
     3596,    0, 3597,    0, 3597, 5407, 3598,    0, 3598,    0,
     3599, 3597, 3599,    0,    0, 3596, 3600, 3598, 3600, 3601,
     3601, 3601, 3601, 3600, 3602, 3602, 3602, 3602, 3603, 3603,
     3603, 3603,    0,    0,    0, 3599, 3604, 3604, 3604, 3604,
     3605, 3605, 3605, 3605, 3601, 5412, 3601, 5443,    0, 3602,
        0, 3602, 5412, 3603, 5443, 3603, 3606, 3606, 3606, 3606,
     5412, 3604, 5443, 3604,    0, 3605,    0, 3605,    0,    0,
        0, 3603,    0, 3602,    0, 3607, 3607, 3607, 3607, 3601,

        0, 3606,    0, 3606,    0,    0,    0, 3604,    0, 3605,
     3608, 3608, 3608, 3608, 3609, 3609, 3609, 3609,    0, 3606,
     3607,    0, 3607, 3612, 3612, 3612, 3612, 3613, 3613, 3613,
     3613, 3615, 3615, 3615, 3615, 3608,    0, 3608, 3613, 3609,
     5431, 3609, 3618, 3618, 3618, 3618,    0, 5431, 3612, 5431,
     3612,    0, 3613,    0, 3613, 5431, 3615,    0, 3615, 3619,
     3619, 3619, 3619, 3620, 3620, 3620, 3620, 3618, 3620, 3618,
        0, 3622, 3622, 3622, 3622, 3607, 3623, 3623, 3623, 3623,
     3626, 3626, 3626, 3626, 3619,    0, 3619,    0, 3620,    0,
     3620, 3608, 3625, 3625, 3625, 3625, 3622, 3615, 3622,    0,

        0, 3623, 5380, 3623, 3612, 3626,    0, 3626,    0, 5380,
        0, 3627, 3627, 3627, 3627,    0, 5380, 3625, 3618, 3625,
     3628, 3628, 3628, 3628, 5380, 3629, 3629, 3629, 3629, 3661,
     3661, 3661, 3661,    0,    0, 3622, 3627,    0, 3627,    0,
     3619, 3665, 3665, 3665, 3665, 3628,    0, 3628,    0,    0,
     3629, 3622, 3629, 3622, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624,    0, 3627,    0,    0, 3625,    0,
     3624,    0, 3624, 3624, 3624, 3624, 3624, 3666, 3666, 3666,
     3666,    0,    0, 3628, 3630, 3630, 3630, 3630, 3631, 3631,

     3631, 3631, 3632, 3632, 3632, 3632, 3633, 3633, 3633, 3633,
        0, 3624, 3624, 3624, 3624, 3624, 3624, 5423,    0, 3630,
        0,    0, 5423, 3631, 5423, 3631,    0, 3632,    0, 3632,
        0, 3633, 5423, 3633, 3634, 3634, 3634, 3634, 3635, 3635,
     3635, 3635, 3624, 3624, 3624, 3624, 3624, 3636, 3636, 3636,
     3636, 3637, 3637, 3637, 3637, 3639, 3639, 3639, 3639, 3634,
        0, 3634, 5430, 3635, 5430, 3635, 3638, 3638, 3638, 3638,
        0, 5430, 3636,    0, 3636,    0, 3637,    0, 3637, 5430,
     3639,    0, 3639, 3640, 3640, 3640, 3640, 3641, 3641, 3641,
     3641, 3638,    0, 3638, 5449, 3636,    0, 3642, 3642, 3642,

     3642, 5449, 3635, 3639, 3647, 3647, 3647, 3647, 3640, 5449,
        0,    0, 3641, 5457, 3641, 3643, 3643, 3643, 3643, 5460,
     5457, 3637, 3642, 5470, 3642,    0, 5460, 3636, 5457, 3647,
     5470, 3647, 3638,    0, 5460, 3639,    0, 3637, 5470,    0,
     3643,    0, 3643, 3669, 3669, 3669, 3669, 3641, 3648, 3648,
     3648, 3648, 3649, 3649, 3649, 3649,    0, 3650, 3650, 3650,
     3650, 3651, 3651, 3651, 3651, 3653, 3653, 3653, 3653,    0,
     3642,    0,    0, 3648,    0, 3648, 5477, 3649,    0, 3649,
        0, 3643, 3650, 5477, 3650,    0, 3651,    0, 3651,    0,
     3653, 5477, 3653, 3654, 3654, 3654, 3654, 3655, 3655, 3655,

     3655,    0, 3658, 3658, 3658, 3658,    0, 3659, 3659, 3659,
     3659, 3660, 3660, 3660, 3660,    0,    0,    0, 3654,    0,
     3654,    0, 3655,    0, 3655,    0,    0, 3658, 3649, 3658,
        0, 3653, 3659,    0, 3659,    0, 3660,    0, 3660, 3664,
     3664, 3664, 3664, 3673, 3673, 3673, 3673,    0,    0,    0,
     3664,    0,    0,    0, 3673, 3675, 3675, 3675, 3675, 3676,
     3676, 3676, 3676, 3655, 3679, 3679, 3679, 3679,    0,    0,
     3679, 3680, 3680, 3680, 3680,    0,    0, 3660,    0, 3658,
     3682, 3682, 3682, 3682, 3683, 3683, 3683, 3683,    0, 3753,
     3753, 3753, 3753, 3754, 3754, 3754, 3754, 3682,    0,    0,

        0, 3683,    0,    0,    0, 3682, 3753,    0,    0, 3683,
     3755, 3755, 3755, 3755, 3753, 3757, 3757, 3757, 3757, 3758,
     3758, 3758, 3758, 3759, 3759, 3759, 3759, 3766, 3766, 3766,
     3766, 3771, 3771, 3771, 3771, 3775, 3775, 3775, 3775, 3777,
     3777, 3777, 3777,    0, 3682,    0,    0,    0, 3759, 3780,
     3780, 3780, 3780, 3781, 3781, 3781, 3781, 3782, 3782, 3782,
     3782,    0,    0, 3683, 3753, 3783, 3783, 3783, 3783, 3784,
     3784, 3784, 3784,    0, 3780, 3785, 3785, 3785, 3785, 3787,
     3787, 3787, 3787, 3790, 3790, 3790, 3790,    0, 3759,    0,
     3783,    0,    0, 3759, 3791, 3791, 3791, 3791, 3795, 3795,

     3795, 3795,    0, 3759, 3787,    0, 3759,    0, 3790, 3796,
     3796, 3796, 3796, 3798, 3798, 3798, 3798, 3799, 3799, 3799,
     3799, 3800, 3800, 3800, 3800,    0,    0, 3787,    0,    0,
        0, 3790,    0,    0, 3796, 3803, 3803, 3803, 3803, 3807,
     3807, 3807, 3807, 3808, 3808, 3808, 3808,    0,    0,    0,
     3807,    0,    0,    0, 3808,    0, 3807,    0,    0, 3787,
     3808,    0,    0, 3790, 3809, 3809, 3809, 3809, 3810, 3810,
     3810, 3810,    0,    0,    0, 3809,    0,    0,    0, 3810,
        0, 3809,    0,    0,    0, 3810, 3811, 3811, 3811, 3811,
        0, 3812, 3812, 3812, 3812,    0,    0, 3811, 3813, 3813,

     3813, 3813, 3812, 3811,    0,    0,    0, 3808, 3812, 3813,
     3814, 3814, 3814, 3814, 3807, 3815, 3815, 3815, 3815,    0,
        0, 3814, 3816, 3816, 3816, 3816,    0, 3814,    0, 3817,
     3817, 3817, 3817, 3818, 3818, 3818, 3818, 3809,    0,    0,
     3815,    0, 3815, 3835, 3835, 3835, 3835, 3816, 3835, 3816,
        0,    0, 3811, 3835, 3817, 3815, 3817,    0, 3818,    0,
     3818,    0,    0,    0, 3812, 3819, 3819, 3819, 3819,    0,
     3818, 3816,    0,    0,    0, 3814, 3820, 3820, 3820, 3820,
     3817, 3821, 3821, 3821, 3821, 3822, 3822, 3822, 3822,    0,
     3819,    0, 3819, 3825, 3825, 3825, 3825, 3819,    0,    0,

        0, 3820, 5497, 3820, 5496, 5496, 3821,    0, 3821, 5497,
     3822, 5496, 3822, 3823, 3823, 3823, 3823, 5497, 3825, 5496,
     3825, 3824, 3824, 3824, 3824,    0,    0, 3820,    0, 3825,
     3821,    0, 3826, 3826, 3826, 3826, 3822,    0, 3823,    0,
     3823, 3824, 3824,    0,    0,    0, 3824,    0, 3824, 3827,
     3827, 3827, 3827,    0,    0,    0, 3823, 3826, 5506, 3826,
     3828, 3828, 3828, 3828,    0, 5506,    0, 3824, 3826, 3829,
     3829, 3829, 3829, 5506, 3827,    0, 3827, 3830, 3830, 3830,
     3830, 3831, 3831, 3831, 3831, 3828, 5508, 3828, 3832, 3832,
     3832, 3832,    0, 5508, 3829,    0, 3829, 3834, 3834, 3834,

     3834, 5508, 3830,    0, 3830, 5511, 3831, 5489, 3831,    0,
     5511, 3828, 5511, 3832, 5489, 3832,    0,    0,    0, 3829,
     5511, 5489, 3834,    0, 3834, 3837, 3837, 3837, 3837, 5489,
     3840, 3840, 3840, 3840, 3841, 3841, 3841, 3841, 3846, 3846,
     3846, 3846, 3848, 3848, 3848, 3848, 3830, 5518,    0, 5518,
     3837, 5534, 3837, 5542,    0, 3840, 5518, 3840, 5534, 3841,
     5542, 3841,    0, 3846, 5518, 3846, 5534, 3848, 5542, 3848,
     3849, 3849, 3849, 3849,    0,    0,    0, 3834,    0,    0,
        0, 3850, 3850, 3850, 3850, 3851, 3851, 3851, 3851, 3852,
     3852, 3852, 3852,    0,    0, 3849, 5572, 3849, 3853, 3853,

     3853, 3853, 5586, 5572, 3837, 3840, 3850,    0, 3850, 5586,
     3851, 5572, 3851, 3854, 3854, 3854, 3854, 5586, 3848, 3855,
     3855, 3855, 3855, 3853,    0, 3853, 3856, 3856, 3856, 3856,
     3857, 3857, 3857, 3857, 3858, 3858, 3858, 3858, 3854,    0,
     3854, 5602,    0, 5609, 3855,    0, 3855, 3850, 5602,    0,
     5609, 3856,    0, 3856,    0, 3857, 5602, 3857, 5609, 3858,
     3859, 3859, 3859, 3859, 3860, 3860, 3860, 3860, 3861, 3861,
     3861, 3861, 3862, 3862, 3862, 3862, 5490,    0, 3857, 3863,
     3863, 3863, 3863, 5490,    0, 3859,    0, 3859,    0, 3860,
     5490, 3860, 3856, 3861,    0, 3861,    0, 3862, 5490, 3862,

     3864, 3864, 3864, 3864, 3863,    0, 3863,    0,    0,    0,
     3857, 3865, 3865, 3865, 3865, 3866, 3866, 3866, 3866,    0,
     3859, 3867, 3867, 3867, 3867, 3870, 3870, 3870, 3870, 3871,
     3871, 3871, 3871,    0, 3861,    0, 3865, 3860, 3865,    0,
     3866,    0, 3866,    0, 3863,    0, 3867,    0, 3867,    0,
     3870,    0, 3870,    0, 3871,    0, 3871, 3872, 3872, 3872,
     3872, 3865, 3873, 3873, 3873, 3873,    0, 3874, 3874, 3874,
     3874, 3875, 3875, 3875, 3875, 3876, 3876, 3876, 3876,    0,
        0,    0, 3872,    0, 3872,    0, 3867, 3873,    0,    0,
        0, 3866, 3874,    0, 3874,    0, 3875,    0, 3875,    0,

     3876, 3870, 3876, 3879, 3879, 3879, 3879, 3880, 3880, 3880,
     3880, 3881, 3881, 3881, 3881, 3882, 3882, 3882, 3882, 3886,
     3886, 3886, 3886, 3887, 3887, 3887, 3887, 3875, 3879,    0,
     3879,    0, 3880,    0, 3880, 3875, 3881, 3875, 3881,    0,
        0,    0, 3874, 3888, 3888, 3888, 3888, 3889, 3889, 3889,
     3889, 3875,    0, 3875, 3875,    0,    0,    0, 3889, 3890,
     3890, 3890, 3890, 3891, 3891, 3891, 3891,    0,    0, 3879,
     3892, 3892, 3892, 3892, 3893, 3893, 3893, 3893, 5612, 5625,
     3893, 3894, 3894, 3894, 3894, 5612, 5625,    0, 3882, 3896,
     3896, 3896, 3896, 5612, 5625, 3902, 3902, 3902, 3902, 3919,

     3919, 3919, 3919,    0,    0,    0, 3896, 3955, 3955, 3955,
     3955,    0,    0,    0, 3896, 3956, 3956, 3956, 3956, 3957,
     3957, 3957, 3957,    0, 3955, 3958, 3958, 3958, 3958,    0,
        0,    0, 3955,    0,    0,    0, 3959, 3959, 3959, 3959,
     3963, 3963, 3963, 3963, 3966, 3966, 3966, 3966, 3970, 3970,
     3970, 3970,    0,    0,    0, 3896, 3897, 3897, 3897, 3897,
     3897, 3959,    0, 3902, 3897, 3897,    0,    0,    0, 3897,
     3897,    0, 3897, 3897, 3897, 3902, 3971, 3971, 3971, 3971,
        0, 3897,    0, 3897, 3897, 3897,    0,    0, 3955, 3974,
     3974, 3974, 3974, 3975, 3975, 3975, 3975, 3977, 3977, 3977,

     3977, 3959, 3978, 3978, 3978, 3978, 3959, 3979, 3979, 3979,
     3979, 3980, 3980, 3980, 3980, 3897, 3959,    0,    0, 3959,
        0,    0, 3977, 3982, 3982, 3982, 3982, 3983, 3983, 3983,
     3983,    0, 3979, 3987, 3987, 3987, 3987, 3992, 3992, 3992,
     3992,    0,    0,    0, 3897,    0, 3897,    0, 3982, 3993,
     3993, 3993, 3993, 3994, 3994, 3994, 3994, 3996, 3996, 3996,
     3996, 3997, 3997, 3997, 3997, 3999, 3999, 3999, 3999,    0,
        0, 3982,    0,    0, 3993, 4000, 4000, 4000, 4000, 4002,
     4002, 4002, 4002, 4003, 4003, 4003, 4003,    0,    0,    0,
     4002,    0,    0,    0, 4003,    0, 4002,    0,    0,    0,

     4003,    0,    0, 3982,    0, 4004, 4004, 4004, 4004, 4005,
     4005, 4005, 4005, 3996,    0,    0, 4004,    0,    0,    0,
     4005, 3996, 4004, 3996, 4006, 4006, 4006, 4006,    0,    0,
        0, 4007, 4007, 4007, 4007, 4006,    0, 3996,    0, 3996,
     3996, 4006, 4007,    0, 4008, 4008, 4008, 4008, 4007, 4003,
     4009, 4009, 4009, 4009,    0, 4008, 4010, 4010, 4010, 4010,
     4002, 4008, 4043, 4043, 4043, 4043, 4011, 4011, 4011, 4011,
     4031, 4031, 4031, 4031,    0, 4009,    0, 4009,    0,    0,
        0, 4010,    0, 4010, 4012, 4012, 4012, 4012,    0, 4006,
        0, 4011, 4010, 4011,    0, 4009,    0,    0, 4011, 4013,

     4013, 4013, 4013, 4014, 4014, 4014, 4014,    0,    0, 4012,
        0, 4012, 4015, 4015, 4015, 4015,    0, 4012, 4016, 4016,
     4016, 4016,    0,    0, 4013,    0, 4013,    0, 4014, 5631,
     4014, 4017, 4017, 4017, 4017,    0, 5631, 4015,    0, 4015,
     5632,    0,    0, 4016, 5631, 4016,    0, 5632, 4015, 4018,
     4018, 4018, 4018,    0, 4014, 5632, 4017, 4031, 4017, 4013,
     4019, 4019, 4019, 4019, 4021, 4021, 4021, 4021, 4022, 4022,
     4022, 4022,    0,    0, 4018,    0, 4018, 5655, 4016, 4023,
     4023, 4023, 4023,    0, 5655, 4019,    0, 4019,    0, 4021,
        0, 4021, 5655, 4022,    0, 4022, 4041, 4041, 4041, 4041,

     4024, 4024, 4024, 4024, 4023, 5656, 4023, 4055, 4055, 4055,
     4055,    0, 5656, 4019, 4020, 4020, 4020, 4020,    0,    0,
     5656, 4041,    0, 4022, 4021, 4024,    0, 4024, 4064, 4064,
     4064, 4064,    0, 4020, 4020, 4020, 4020, 4020, 4020, 4020,
        0, 4020,    0,    0,    0, 4023, 4020, 4020, 4020, 4020,
     4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020,
     4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020,
     4066, 4066, 4066, 4066, 4020,    0, 4020, 4020, 4020, 4020,
     4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020,
     4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020,

     4020, 4025, 4025, 4025, 4025, 4020, 4026, 4026, 4026, 4026,
     4029, 4029, 4029, 4029, 4030, 4030, 4030, 4030, 4037, 4037,
     4037, 4037, 4038, 4038, 4038, 4038, 4025,    0, 4025,    0,
        0, 4026,    0, 4026,    0, 4029,    0, 4029,    0, 4030,
        0, 4030,    0, 4037,    0, 4037,    0, 4038,    0, 4038,
     4039, 4039, 4039, 4039, 4040, 4040, 4040, 4040, 4045, 4045,
     4045, 4045,    0,    0, 4044, 4044, 4044, 4044,    0, 4065,
     4065, 4065, 4065, 4026,    0, 4039,    0, 4039,    0, 4040,
     4065, 4040,    0, 4045,    0, 4045,    0,    0,    0, 4044,
        0, 4044,    0, 4037, 4042, 4042, 4042, 4042, 4042, 4042,

     4042, 4042, 4042, 4042, 4042, 4042, 4042, 4042, 4042, 4042,
     4042, 4042, 4042, 4042, 4044, 4046, 4046, 4046, 4046,    0,
     4042, 4042, 4042, 4042, 4042, 4042, 4042,    0,    0,    0,
     4047, 4047, 4047, 4047, 4045, 4049, 4049, 4049, 4049,    0,
     4046,    0, 4046, 4048, 4048, 4048, 4048, 4050, 4050, 4050,
     4050, 4042, 4042, 4042, 4042, 4047, 4042, 4047,    0,    0,
     4049,    0, 4049, 4051, 4051, 4051, 4051,    0, 4048,    0,
     4048,    0, 4050,    0, 4050,    0,    0,    0, 4049,    0,
        0,    0, 4042, 4042, 4042, 4042, 4042,    0, 4051,    0,
     4051, 4048,    0,    0,    0, 4046, 4052, 4052, 4052, 4052,

     4054, 4054, 4054, 4054, 4056, 4056, 4056, 4056, 4059, 4059,
     4059, 4059, 4062, 4062, 4062, 4062, 4067, 4067, 4067, 4067,
        0,    0,    0, 4048,    0, 4054,    0, 4054, 4050, 4056,
        0, 4056,    0, 4059,    0, 4059,    0, 4062,    0, 4062,
     4068, 4068, 4068, 4068, 4069, 4069, 4069, 4069, 4071, 4071,
     4071, 4071,    0,    0,    0, 4069, 4072, 4072, 4072, 4072,
     4073, 4073, 4073, 4073,    0,    0, 4073, 4074, 4074, 4074,
     4074, 4075, 4075, 4075, 4075, 4054, 4076, 4076, 4076, 4076,
        0,    0,    0, 4052, 4092, 4092, 4092, 4092, 4108, 4108,
     4108, 4108,    0, 4076,    0,    0, 4137, 4137, 4137, 4137,

        0, 4076, 4077, 4077, 4077, 4077, 4077,    0,    0,    0,
     4077, 4077,    0, 4137,    0, 4077, 4077,    0, 4077, 4077,
     4077, 4137, 4138, 4138, 4138, 4138,    0, 4077,    0, 4077,
     4077, 4077, 4139, 4139, 4139, 4139,    0, 4140, 4140, 4140,
     4140, 4143, 4143, 4143, 4143, 4144, 4144, 4144, 4144,    0,
        0,    0, 4092, 4146, 4146, 4146, 4146, 4147, 4147, 4147,
     4147, 4077, 4140,    0, 4092, 4149, 4149, 4149, 4149, 4150,
     4150, 4150, 4150,    0,    0,    0, 4137, 4151, 4151, 4151,
     4151, 4152, 4152, 4152, 4152, 4153, 4153, 4153, 4153,    0,
     4077,    0, 4077, 4154, 4154, 4154, 4154, 4155, 4155, 4155,

     4155,    0, 4140, 4156, 4156, 4156, 4156, 4140, 4157, 4157,
     4157, 4157, 4161, 4161, 4161, 4161,    0, 4140,    0,    0,
     4140,    0, 4155, 4162, 4162, 4162, 4162, 4165, 4165, 4165,
     4165, 4166, 4166, 4166, 4166, 4167, 4167, 4167, 4167, 4168,
     4168, 4168, 4168, 4169, 4169, 4169, 4169,    0, 4162,    0,
     4170, 4170, 4170, 4170, 4169, 4171, 4171, 4171, 4171,    0,
     4169, 4170, 4172, 4172, 4172, 4172, 4171, 4170,    0,    0,
        0, 4162,    0, 4172, 4173, 4173, 4173, 4173,    0, 4172,
     4174, 4174, 4174, 4174,    0, 4173, 4175, 4175, 4175, 4175,
        0, 4174, 4178, 4178, 4178, 4178, 4190, 4190, 4190, 4190,

        0,    0,    0, 4162,    0, 4169, 4186, 4186, 4186, 4186,
        0, 4175,    0, 4175,    0,    0,    0, 4178,    0, 4178,
        0,    0,    0, 4175, 4176, 4176, 4176, 4176, 4176, 4176,
        0, 4186,    0, 4186,    0, 4178,    0, 4176, 4176, 4176,
     4176, 4176, 4176, 4176, 4176, 4176, 4176, 4176, 4176, 4176,
     4176, 4176, 4176, 4176, 4176, 4176, 4176, 4176, 4176, 4176,
     4176, 4177, 4177, 4177, 4177, 4176, 4179, 4179, 4179, 4179,
        0, 4180, 4180, 4180, 4180, 4181, 4181, 4181, 4181, 4183,
     4183, 4183, 4183, 4190,    0,    0, 4177,    0, 4177,    0,
        0, 4179,    0, 4179,    0, 4177, 4180,    0, 4180,    0,

     4181,    0, 4181,    0, 4183,    0, 4183,    0,    0,    0,
     4179, 4182, 4182, 4182, 4182, 4183, 4185, 4185, 4185, 4185,
     4187, 4187, 4187, 4187, 4181,    0, 4180, 4188, 4188, 4188,
     4188, 4182, 4182,    0,    0,    0, 4182,    0, 4182,    0,
        0, 4185,    0, 4185,    0, 4187,    0, 4187,    0,    0,
     4185,    0, 4188,    0, 4188,    0,    0, 4182,    0, 4189,
     4189, 4189, 4189, 4192, 4192, 4192, 4192, 4193, 4193, 4193,
     4193, 4199, 4199, 4199, 4199, 4200, 4200, 4200, 4200, 4201,
     4201, 4201, 4201,    0, 4189, 4187, 4189,    0, 4192,    0,
     4192, 4202, 4202, 4202, 4202,    0, 4199,    0, 4199,    0,

     4200,    0, 4200,    0, 4201,    0, 4201, 4207, 4207, 4207,
     4207,    0, 4208, 4208, 4208, 4208,    0, 4210, 4210, 4210,
     4210, 4189, 4212, 4212, 4212, 4212, 4217, 4217, 4217, 4217,
        0,    0, 4207,    0, 4207, 4199,    0, 4208,    0, 4208,
        0,    0, 4210, 4201, 4210,    0,    0, 4212,    0,    0,
        0, 4217,    0, 4217, 4193, 4208,    0,    0,    0, 4201,
     4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204,
     4218, 4218, 4218, 4218,    0,    0, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204,

     4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4209, 4209, 4209, 4209, 4211, 4211, 4211,
     4211, 4213, 4213, 4213, 4213, 4214, 4214, 4214, 4214, 4215,
     4215, 4215, 4215, 4216, 4216, 4216, 4216,    0, 4209,    0,
     4209,    0, 4211,    0, 4211,    0, 4213,    0, 4213,    0,
     4214,    0, 4214,    0, 4215,    0, 4215,    0, 4216,    0,

     4216, 4220, 4220, 4220, 4220, 4211, 4221, 4221, 4221, 4221,
     4228, 4228, 4228, 4228,    0, 4215, 4222, 4222, 4222, 4222,
        0, 4213, 4227, 4227, 4227, 4227,    0,    0, 4227,    0,
        0, 4221,    0, 4221, 4209,    0,    0, 4211, 4214,    0,
        0, 4222,    0, 4222, 4229, 4229, 4229, 4229, 4230, 4230,
     4230, 4230,    0, 4216, 4239, 4239, 4239, 4239, 4244, 4244,
     4244, 4244,    0,    0,    0, 4230,    0,    0,    0, 4244,
     4221,    0,    0, 4230, 4271, 4271, 4271, 4271, 4272, 4272,
     4272, 4272, 4273, 4273, 4273, 4273,    0,    0, 4220,    0,
        0, 4271, 4275, 4275, 4275, 4275,    0,    0,    0, 4271,

     4276, 4276, 4276, 4276,    0,    0,    0, 4273, 4277, 4277,
     4277, 4277, 4278, 4278, 4278, 4278, 4279, 4279, 4279, 4279,
        0,    0, 4239, 4281, 4281, 4281, 4281, 4282, 4282, 4282,
     4282,    0,    0,    0, 4239, 4283, 4283, 4283, 4283, 4284,
     4284, 4284, 4284, 4285, 4285, 4285, 4285, 4273, 4288, 4288,
     4288, 4288, 4273, 4289, 4289, 4289, 4289, 4290, 4290, 4290,
     4290,    0, 4273,    0,    0, 4273, 4295, 4295, 4295, 4295,
        0,    0,    0, 4288, 4296, 4296, 4296, 4296, 4289, 4297,
     4297, 4297, 4297, 4298, 4298, 4298, 4298,    0,    0,    0,
     4297,    0,    0,    0, 4298,    0, 4297, 4299, 4299, 4299,

     4299, 4289,    0, 4284, 4300, 4300, 4300, 4300, 4299, 4302,
     4302, 4302, 4302, 4303, 4303, 4303, 4303,    0,    0, 4284,
        0, 4304, 4304, 4304, 4304, 4313, 4313, 4313, 4313, 4300,
        0, 4300,    0, 4289, 4302,    0, 4302,    0, 4303,    0,
     4303, 4305, 4305, 4305, 4305, 4302, 4304,    0, 4304, 4303,
     4300, 4306, 4306, 4306, 4306, 4307, 4307, 4307, 4307,    0,
     4297, 4308, 4308, 4308, 4308,    0, 4305,    0, 4305, 4309,
     4309, 4309, 4309, 4304,    0,    0, 4306,    0, 4306,    0,
     4307,    0, 4307,    0,    0,    0, 4308,    0, 4308, 4310,
     4310, 4310, 4310,    0, 4309,    0, 4309, 4321, 4321, 4321,

     4321, 4305, 4311, 4311, 4311, 4311, 4312, 4312, 4312, 4312,
        0, 4306,    0,    0, 4310,    0, 4310, 4317, 4317, 4317,
     4317,    0, 4309,    0,    0, 4321,    0, 4311,    0, 4311,
        0, 4312,    0, 4312, 4322, 4322, 4322, 4322, 4310,    0,
        0,    0, 4317,    0, 4317,    0,    0,    0, 4311, 4323,
     4323, 4323, 4323, 4324, 4324, 4324, 4324, 4325, 4325, 4325,
     4325,    0, 4322, 4326, 4326, 4326, 4326,    0,    0,    0,
     4312,    0,    0,    0, 4323,    0, 4323,    0, 4324,    0,
     4324,    0, 4325, 4317, 4325,    0,    0,    0, 4326, 4327,
     4327, 4327, 4327,    0,    0, 4323, 4328, 4328, 4328, 4328,

     4329, 4329, 4329, 4329, 4330, 4330, 4330, 4330,    0, 4331,
     4331, 4331, 4331, 4332, 4332, 4332, 4332, 4334, 4334, 4334,
     4334, 4328,    0, 4328,    0, 4329,    0, 4329,    0, 4330,
        0, 4330,    0, 4324, 4331,    0, 4331, 4336, 4336, 4336,
     4336,    0, 4334,    0, 4334,    0, 4328, 4339, 4339, 4339,
     4339,    0,    0, 4339,    0, 4330, 4340, 4340, 4340, 4340,
     4344, 4344, 4344, 4344, 4351, 4351, 4351, 4351,    0,    0,
     4352, 4352, 4352, 4352, 4352, 4351, 4329, 4352, 4369, 4369,
     4369, 4369,    0, 4334, 4370, 4370, 4370, 4370, 4371, 4371,
     4371, 4371,    0,    0,    0, 4352, 4373, 4373, 4373, 4373,

        0,    0,    0, 4369, 4374, 4374, 4374, 4374, 4377, 4377,
     4377, 4377,    0, 4371, 4378, 4378, 4378, 4378, 4382, 4382,
     4382, 4382,    0,    0, 4336,    0,    0,    0, 4344, 4384,
     4384, 4384, 4384, 4377, 4383, 4383, 4383, 4383,    0,    0,
     4344,    0,    0, 4382,    0, 4383,    0, 4385, 4385, 4385,
     4385, 4383,    0, 4371, 4384,    0, 4384,    0, 4371,    0,
     4352,    0, 4386, 4386, 4386, 4386,    0,    0, 4371,    0,
        0, 4371, 4385,    0, 4385, 4390, 4390, 4390, 4390, 4384,
     4393, 4393, 4393, 4393,    0,    0,    0, 4386,    0, 4386,
     4388, 4388, 4388, 4388, 4389, 4389, 4389, 4389,    0,    0,

     4390,    0, 4390,    0, 4383, 4386,    0, 4385, 4387, 4387,
     4387, 4387,    0,    0,    0, 4388,    0, 4388, 4390, 4389,
        0, 4389, 4391, 4391, 4391, 4391, 4388,    0,    0,    0,
     4389,    0,    0, 4387,    0, 4387, 4392, 4392, 4392, 4392,
        0,    0, 4387, 4387,    0, 4387,    0, 4391,    0, 4391,
        0,    0,    0, 4387,    0,    0,    0, 4387, 4387,    0,
     4387, 4392, 4387, 4392, 4397, 4397, 4397, 4397,    0, 4391,
     4398, 4398, 4398, 4398, 4400, 4400, 4400, 4400, 4401, 4401,
     4401, 4401, 4402, 4402, 4402, 4402, 4403, 4403, 4403, 4403,
        0,    0, 4397, 4404, 4404, 4404, 4404,    0, 4398, 4400,

        0, 4400, 4392, 4401,    0, 4401, 4405, 4405, 4405, 4405,
        0, 4403,    0, 4403, 4406, 4406, 4406, 4406, 4404,    0,
     4404, 4407, 4407, 4407, 4407, 4400,    0,    0,    0, 4403,
        0, 4405,    0, 4405, 4409, 4409, 4409, 4409,    0, 4406,
        0, 4406, 4411, 4411, 4411, 4411, 4407, 4413, 4413, 4413,
     4413,    0,    0, 4413,    0,    0, 4405, 4414, 4414, 4414,
     4414, 4423, 4423, 4423, 4423, 4423,    0,    0, 4423, 4424,
     4424, 4424, 4424,    0, 4404,    0, 4424, 4425, 4425, 4425,
     4425, 4425,    0,    0, 4425,    0, 4423,    0, 4427, 4427,
     4427, 4427, 4439, 4439, 4439, 4439, 4440, 4440, 4440, 4440,

     4427,    0, 4425, 4427,    0, 4443, 4443, 4443, 4443, 4447,
     4447, 4447, 4447, 4427, 4448, 4448, 4448, 4448,    0,    0,
        0, 4440, 4449, 4449, 4449, 4449,    0,    0,    0, 4411,
     4443,    0,    0, 4449, 4447, 4450, 4450, 4450, 4450, 4449,
        0,    0,    0, 4451, 4451, 4451, 4451, 4452, 4452, 4452,
     4452, 4423,    0, 4453, 4453, 4453, 4453,    0,    0,    0,
     4450, 4440, 4450,    0,    0,    0, 4440, 4425, 4451, 4450,
     4451,    0, 4452,    0, 4452,    0, 4440,    0, 4453, 4440,
     4453, 4454, 4454, 4454, 4454, 4455, 4455, 4455, 4455, 4453,
        0,    0,    0, 4452, 4451,    0,    0,    0, 4449, 4456,

     4456, 4456, 4456,    0,    0,    0, 4454,    0, 4454,    0,
     4455,    0, 4455, 4457, 4457, 4457, 4457, 4458, 4458, 4458,
     4458, 4454,    0,    0, 4456,    0, 4456, 4459, 4459, 4459,
     4459, 4455,    0,    0,    0, 4456,    0,    0, 4457,    0,
     4457,    0, 4458,    0, 4458,    0,    0, 4457, 4460, 4460,
     4460, 4460, 4459,    0, 4459, 4461, 4461, 4461, 4461, 4462,
     4462, 4462, 4462,    0, 4457,    0,    0, 4458,    0, 4463,
     4463, 4463, 4463, 4460,    0, 4460, 4459,    0,    0,    0,
     4461,    0, 4461,    0, 4462,    0, 4462, 4464, 4464, 4464,
     4464,    0,    0, 4460, 4463,    0, 4463,    0, 4467, 4467,

     4467, 4467,    0,    0, 4461, 4462, 4468, 4468, 4468, 4468,
     4469, 4469, 4469, 4469, 4470, 4470, 4470, 4470, 4471, 4471,
     4471, 4471,    0, 4467, 4463, 4467, 4472, 4472, 4472, 4472,
        0, 4468,    0, 4468,    0, 4469,    0,    0,    0, 4470,
        0, 4470,    0, 4471,    0, 4471,    0,    0, 4467, 4473,
     4473, 4473, 4473, 4476, 4476, 4476, 4476,    0,    0, 4476,
     4470, 4477, 4477, 4477, 4477, 4484, 4484, 4484, 4484,    0,
        0,    0, 4484, 4485, 4485, 4485, 4485,    0,    0,    0,
     4485, 4486, 4486, 4486, 4486, 4487, 4487, 4487, 4487, 4502,
     4502, 4502, 4502, 4486,    0,    0, 4486,    0, 4471, 4488,

     4488, 4488, 4488, 4488,    0,    0, 4488,    0,    0,    0,
     4487, 4489, 4489, 4489, 4489, 4489,    0,    0, 4489, 4490,
     4490, 4490, 4490,    0, 4488, 4491, 4491, 4491, 4491,    0,
        0, 4490,    0,    0, 4490,    0, 4489,    0, 4492, 4492,
     4492, 4492, 4492,    0, 4490, 4492, 4493, 4493, 4493, 4493,
        0, 4491, 4503, 4503, 4503, 4503,    0,    0, 4493,    0,
        0, 4493,    0, 4492,    0, 4506, 4506, 4506, 4506,    0,
        0, 4493, 4507, 4507, 4507, 4507,    0, 4503,    0,    0,
     4510, 4510, 4510, 4510, 4511, 4511, 4511, 4511,    0, 4488,
     4506, 4510,    0, 4512, 4512, 4512, 4512, 4510,    0,    0,

        0, 4489, 4513, 4513, 4513, 4513,    0,    0,    0, 4511,
        0, 4511, 4514, 4514, 4514, 4514,    0, 4503, 4512,    0,
     4512,    0, 4503, 4515, 4515, 4515, 4515, 4513, 4492, 4513,
     4511,    0, 4503, 4512,    0, 4503,    0, 4514,    0, 4514,
     4516, 4516, 4516, 4516,    0,    0,    0, 4513, 4515,    0,
     4515, 4517, 4517, 4517, 4517, 4510,    0, 4518, 4518, 4518,
     4518,    0, 4514,    0,    0, 4516,    0, 4516, 4515, 4519,
     4519, 4519, 4519,    0,    0,    0, 4517,    0, 4517,    0,
        0,    0, 4518, 4517, 4518, 4520, 4520, 4520, 4520,    0,
        0, 4516,    0,    0, 4519,    0, 4519, 4521, 4521, 4521,

     4521, 4517,    0,    0, 4517,    0, 4518,    0,    0,    0,
     4520,    0, 4520,    0,    0, 4519, 4522, 4522, 4522, 4522,
        0, 4520, 4521,    0, 4521,    0, 4523, 4523, 4523, 4523,
     4524, 4524, 4524, 4524,    0,    0,    0, 4521,    0,    0,
        0, 4522,    0, 4522, 4527, 4527, 4527, 4527,    0,    0,
        0, 4523,    0, 4523,    0, 4524,    0, 4524, 4528, 4528,
     4528, 4528, 4524, 4529, 4529, 4529, 4529,    0, 4522, 4523,
     4531, 4531, 4531, 4531,    0,    0, 4531, 4532, 4532, 4532,
     4532,    0,    0, 4528,    0, 4528,    0,    0, 4529,    0,
     4529, 4535, 4535, 4535, 4535, 4536, 4536, 4536, 4536, 4538,

     4538, 4538, 4538, 4535,    0,    0, 4535, 4536,    0, 4528,
     4536, 4537, 4537, 4537, 4537, 4537,    0,    0, 4537, 4540,
     4540, 4540, 4540, 4540,    0, 4538, 4540, 4541, 4541, 4541,
     4541,    0,    0,    0, 4541,    0, 4537,    0, 4542, 4542,
     4542, 4542, 4542,    0, 4540, 4542, 4544, 4544, 4544, 4544,
     4553, 4553, 4553, 4553, 4554, 4554, 4554, 4554, 4544,    0,
        0, 4544,    0, 4542, 4557, 4557, 4557, 4557,    0,    0,
        0, 4544,    0, 4558, 4558, 4558, 4558,    0,    0, 4554,
     4559, 4559, 4559, 4559, 4558, 4560, 4560, 4560, 4560, 4557,
     4558, 4561, 4561, 4561, 4561, 4562, 4562, 4562, 4562,    0,

        0, 4537,    0,    0,    0, 4559,    0, 4559,    0, 4540,
     4560,    0, 4560,    0,    0,    0, 4561,    0, 4561, 4554,
     4562,    0, 4562,    0, 4554, 4559,    0,    0, 4542,    0,
        0,    0, 4560,    0, 4554, 4562,    0, 4554,    0,    0,
        0, 4561, 4563, 4563, 4563, 4563, 4564, 4564, 4564, 4564,
     4565, 4565, 4565, 4565, 4566, 4566, 4566, 4566, 4575, 4575,
     4575, 4575, 4567, 4567, 4567, 4567,    0, 4563,    0, 4563,
        0, 4564,    0, 4564, 4563, 4565,    0, 4565,    0, 4566,
        0, 4566,    0,    0,    0, 4565, 4564, 4567,    0, 4567,
     4566, 4568, 4568, 4568, 4568, 4569, 4569, 4569, 4569,    0,

        0,    0, 4567, 4570, 4570, 4570, 4570, 4571, 4571, 4571,
     4571, 4572, 4572, 4572, 4572,    0, 4568,    0, 4568,    0,
     4569,    0, 4569, 4573, 4573, 4573, 4573,    0, 4570,    0,
     4570, 4568, 4571,    0, 4571,    0, 4572,    0, 4572, 4574,
     4574, 4574, 4574,    0, 4569, 4575,    0,    0, 4573,    0,
     4573,    0, 4570,    0,    0, 4572,    0,    0, 4571, 4577,
     4577, 4577, 4577,    0, 4574,    0, 4574,    0,    0, 4573,
     4578, 4578, 4578, 4578, 4574, 4579, 4579, 4579, 4579, 4581,
     4581, 4581, 4581,    0, 4577, 4581, 4577, 4582, 4582, 4582,
     4582, 4585, 4585, 4585, 4585, 4578,    0, 4578, 4585,    0,

     4579, 4586, 4586, 4586, 4586,    0,    0,    0, 4586, 4577,
     4587, 4587, 4587, 4587, 4588, 4588, 4588, 4588, 4598, 4598,
     4598, 4598, 4587,    0,    0, 4587, 4589, 4589, 4589, 4589,
     4589,    0,    0, 4589, 4590, 4590, 4590, 4590, 4590, 4588,
        0, 4590, 4591, 4591, 4591, 4591, 4592, 4592, 4592, 4592,
        0, 4589,    0,    0, 4591,    0,    0, 4591, 4592, 4590,
        0, 4592, 4599, 4599, 4599, 4599,    0, 4591,    0,    0,
        0, 4592, 4600, 4600, 4600, 4600, 4602, 4602, 4602, 4602,
     4603, 4603, 4603, 4603,    0,    0,    0, 4599, 4604, 4604,
     4604, 4604,    0, 4605, 4605, 4605, 4605,    0,    0, 4604,

        0, 4602,    0, 4606, 4606, 4606, 4606,    0, 4607, 4607,
     4607, 4607, 4608, 4608, 4608, 4608, 4589,    0, 4605,    0,
     4605,    0,    0,    0, 4590,    0,    0, 4599, 4606,    0,
     4606,    0, 4599, 4607,    0, 4607,    0, 4608,    0, 4608,
        0,    0, 4599, 4605,    0, 4599, 4606,    0,    0,    0,
     4608, 4609, 4609, 4609, 4609, 4610, 4610, 4610, 4610, 4607,
     4611, 4611, 4611, 4611, 4612, 4612, 4612, 4612, 4613, 4613,
     4613, 4613, 4614, 4614, 4614, 4614, 4609,    0, 4609,    0,
     4610,    0, 4610,    0,    0, 4611,    0, 4611,    0, 4612,
        0, 4612, 4610, 4613, 4609, 4613,    0, 4614,    0, 4614,

     4615, 4615, 4615, 4615, 4616, 4616, 4616, 4616, 4617, 4617,
     4617, 4617,    0,    0,    0, 4612,    0,    0, 4613, 4614,
     4618, 4618, 4618, 4618,    0, 4615,    0, 4615,    0, 4616,
        0, 4616,    0, 4617,    0, 4617, 4615, 4619, 4619, 4619,
     4619,    0,    0,    0, 4617, 4618,    0, 4618, 4620, 4620,
     4620, 4620, 4621, 4621, 4621, 4621, 4623, 4623, 4623, 4623,
        0,    0, 4619,    0, 4619, 4624, 4624, 4624, 4624, 4619,
        0,    0,    0, 4620,    0, 4620, 4625, 4625, 4625, 4625,
     4626, 4626, 4626, 4626,    0,    0, 4626, 4627, 4627, 4627,
     4627, 4630, 4630, 4630, 4630, 4631, 4631, 4631, 4631, 4638,

     4638, 4638, 4638, 4630, 4625,    0, 4630, 4631,    0,    0,
     4631, 4632, 4632, 4632, 4632, 4632,    0,    0, 4632, 4639,
     4639, 4639, 4639, 4640, 4640, 4640, 4640, 4641, 4641, 4641,
     4641, 4642, 4642, 4642, 4642,    0, 4632, 4643, 4643, 4643,
     4643,    0,    0, 4623, 4639, 4644, 4644, 4644, 4644,    0,
        0,    0, 4641,    0, 4641,    0, 4642,    0, 4642,    0,
        0,    0, 4643,    0, 4643,    0,    0, 4642,    0, 4643,
     4644,    0, 4644, 4645, 4645, 4645, 4645,    0, 4641, 4646,
     4646, 4646, 4646,    0, 4639, 4647, 4647, 4647, 4647, 4639,
     4644, 4648, 4648, 4648, 4648,    0,    0,    0, 4645, 4639,

     4645, 4632, 4639,    0, 4646,    0, 4646,    0,    0,    0,
     4647,    0, 4647,    0,    0,    0, 4648,    0, 4648, 4649,
     4649, 4649, 4649, 4650, 4650, 4650, 4650, 4651, 4651, 4651,
     4651, 4648,    0,    0, 4646,    0, 4652, 4652, 4652, 4652,
     4653, 4653, 4653, 4653, 4649,    0, 4649,    0, 4650,    0,
     4650,    0, 4651,    0, 4651,    0,    0,    0, 4650,    0,
        0, 4652,    0, 4652, 4655, 4655, 4655, 4655,    0,    0,
     4649, 4652, 4656, 4656, 4656, 4656,    0, 4656, 4657, 4657,
     4657, 4657, 4656,    0, 4657, 4658, 4658, 4658, 4658,    0,
        0,    0, 4655, 4666, 4666, 4666, 4666, 4667, 4667, 4667,

     4667, 4668, 4668, 4668, 4668,    0, 4669, 4669, 4669, 4669,
     4670, 4670, 4670, 4670, 4671, 4671, 4671, 4671, 4672, 4672,
     4672, 4672, 4667,    0,    0,    0, 4668,    0, 4668,    0,
        0, 4669,    0, 4669,    0, 4670,    0, 4670,    0, 4671,
        0, 4671, 4670, 4672,    0, 4672,    0,    0,    0, 4656,
     4668, 4669,    0,    0, 4673, 4673, 4673, 4673, 4674, 4674,
     4674, 4674, 4667,    0, 4672,    0,    0, 4667, 4675, 4675,
     4675, 4675, 4679, 4679, 4679, 4679,    0, 4667, 4679, 4673,
     4667, 4673,    0, 4674,    0, 4674, 4673, 4676, 4676, 4676,
     4676,    0, 4676, 4675,    0, 4675,    0, 4676, 4680, 4680,

     4680, 4680, 4685, 4685, 4685, 4685, 4686, 4686, 4686, 4686,
     4687, 4687, 4687, 4687, 4688, 4688, 4688, 4688, 4689, 4689,
     4689, 4689, 4690, 4690, 4690, 4690,    0, 4691, 4691, 4691,
     4691, 4686,    0,    0,    0, 4687,    0, 4687,    0, 4688,
        0, 4688,    0, 4689,    0, 4689,    0, 4690,    0, 4690,
        0, 4689, 4691,    0, 4691, 4693, 4693, 4693, 4693,    0,
     4691, 4693, 4687,    0, 4676, 4688,    0, 4690,    0,    0,
        0, 4686, 4694, 4694, 4694, 4694, 4686, 4695, 4695, 4695,
     4695, 4696, 4696, 4696, 4696,    0, 4686,    0,    0, 4686,
     4697, 4697, 4697, 4697, 4698, 4698, 4698, 4698, 4699, 4699,

     4699, 4699, 4700, 4700, 4700, 4700, 4696, 4701, 4701, 4701,
     4701, 4704, 4704, 4704, 4704, 4697,    0, 4697,    0, 4698,
        0, 4698,    0, 4699, 4697, 4699,    0, 4700,    0, 4700,
        0,    0, 4701,    0, 4701,    0,    0, 4702, 4702, 4702,
     4702, 4699, 4702,    0,    0,    0, 4696, 4702,    0,    0,
     4701, 4696, 4703, 4703, 4703, 4703,    0,    0, 4703,    0,
        0, 4696,    0,    0, 4696,    0, 4702, 4705, 4705, 4705,
     4705, 4706, 4706, 4706, 4706, 4707, 4707, 4707, 4707, 4708,
     4708, 4708, 4708, 4709, 4709, 4709, 4709, 4710, 4710, 4710,
     4710, 4711, 4711, 4711, 4711,    0, 4706,    0,    0,    0,

     4707,    0, 4707,    0, 4708,    0, 4708,    0, 4709,    0,
     4709, 4713, 4713, 4713, 4713, 4708, 4710, 4713,    0, 4709,
     4711, 4714, 4714, 4714, 4714,    0, 4707, 4715, 4715, 4715,
     4715, 4716, 4716, 4716, 4716,    0, 4706, 4717, 4717, 4717,
     4717, 4706, 4718, 4718, 4718, 4718, 4719, 4719, 4719, 4719,
        0, 4706,    0,    0, 4706,    0, 4716, 4720, 4720, 4720,
     4720,    0, 4717, 4720, 4717,    0,    0, 4718,    0, 4718,
        0, 4719,    0, 4719, 4721, 4721, 4721, 4721, 4722, 4722,
     4722, 4722,    0, 4717, 4723, 4723, 4723, 4723, 4724, 4724,
     4724, 4724, 4725, 4725, 4725, 4725, 4716,    0, 4725,    0,

        0, 4716, 4726, 4726, 4726, 4726,    0,    0,    0, 4723,
        0, 4716,    0, 4724, 4716, 4724, 4727, 4727, 4727, 4727,
     4728, 4728, 4728, 4728,    0,    0, 4729, 4729, 4729, 4729,
     4730, 4730, 4730, 4730,    0,    0, 4730, 4724, 4731, 4731,
     4731, 4731,    0,    0,    0, 4728,    0,    0,    0, 4723,
        0, 4729,    0, 4729, 4723, 4732, 4732, 4732, 4732, 4733,
     4733, 4733, 4733,    0, 4723,    0,    0, 4723, 4734, 4734,
     4734, 4734, 4735, 4735, 4735, 4735,    0,    0, 4735, 4736,
     4736, 4736, 4736,    0, 4733, 4728, 4729,    0, 4734, 4734,
     4728,    0,    0, 4734,    0, 4734, 4737, 4737, 4737, 4737,

     4728,    0,    0, 4728,    0, 4738, 4738, 4738, 4738, 4739,
     4739, 4739, 4739,    0,    0, 4739, 4740, 4740, 4740, 4740,
     4741, 4741, 4741, 4741, 4733, 4742, 4742, 4742, 4742, 4733,
     4738, 4743, 4743, 4743, 4743,    0,    0, 4743,    0, 4733,
        0,    0, 4733, 4744, 4744, 4744, 4744,    0,    0,    0,
     4742, 4745, 4745, 4745, 4745, 4746, 4746, 4746, 4746, 4747,
     4747, 4747, 4747,    0,    0, 4747, 4748, 4748, 4748, 4748,
     4738, 4749, 4749, 4749, 4749, 4738, 4750, 4750, 4750, 4750,
     4746, 4751, 4751, 4751, 4751, 4738,    0, 4751, 4738,    0,
     4742, 4752, 4752, 4752, 4752, 4742, 4753, 4753, 4753, 4753,

        0, 4750,    0,    0,    0, 4742,    0,    0, 4742, 4754,
     4754, 4754, 4754, 4755, 4755, 4755, 4755,    0,    0, 4755,
     4746, 4756, 4756, 4756, 4756, 4746, 4757, 4757, 4757, 4757,
     4758, 4758, 4758, 4758, 4754, 4746,    0,    0, 4746,    0,
        0, 4750, 4759, 4759, 4759, 4759, 4750,    0, 4759, 4760,
     4760, 4760, 4760,    0,    0, 4758, 4750,    0,    0, 4750,
     4761, 4761, 4761, 4761,    0, 4762, 4762, 4762, 4762, 4763,
     4763, 4763, 4763,    0, 4754, 4763,    0,    0,    0, 4754,
     4764, 4764, 4764, 4764, 4765, 4765, 4765, 4765,    0, 4754,
     4762,    0, 4754,    0,    0, 4758, 4766, 4766, 4766, 4766,

     4758, 4767, 4767, 4767, 4767,    0,    0, 4767,    0,    0,
     4758,    0,    0, 4758, 4768, 4768, 4768, 4768,    0,    0,
        0, 4766, 4769, 4769, 4769, 4769, 4770, 4770, 4770, 4770,
     4762, 4771, 4771, 4771, 4771, 4762,    0, 4771, 4772, 4772,
     4772, 4772,    0,    0,    0, 4762,    0,    0, 4762,    0,
        0, 4770, 4773, 4773, 4773, 4773, 4774, 4774, 4774, 4774,
        0, 4766, 4775, 4775, 4775, 4775, 4766,    0, 4775, 4776,
     4776, 4776, 4776,    0,    0,    0, 4766,    0,    0, 4766,
        0, 4774, 4777, 4777, 4777, 4777, 4778, 4778, 4778, 4778,
        0, 4770, 4779, 4779, 4779, 4779, 4770,    0, 4779, 4780,

     4780, 4780, 4780,    0,    0,    0, 4770,    0,    0, 4770,
        0, 4778, 4781, 4781, 4781, 4781, 4782, 4782, 4782, 4782,
        0, 4774, 4783, 4783, 4783, 4783, 4774,    0, 4783, 4784,
     4784, 4784, 4784,    0,    0,    0, 4774,    0,    0, 4774,
        0, 4782, 4785, 4785, 4785, 4785, 4786, 4786, 4786, 4786,
        0, 4778, 4787, 4787, 4787, 4787, 4778,    0, 4787, 4788,
     4788, 4788, 4788,    0,    0,    0, 4778,    0,    0, 4778,
        0, 4786, 4789, 4789, 4789, 4789, 4790, 4790, 4790, 4790,
        0, 4782, 4791, 4791, 4791, 4791, 4782,    0, 4791, 4792,
     4792, 4792, 4792,    0,    0,    0, 4782,    0,    0, 4782,

        0, 4790, 4793, 4793, 4793, 4793, 4794, 4794, 4794, 4794,
        0, 4786, 4795, 4795, 4795, 4795, 4786,    0, 4795, 4796,
     4796, 4796, 4796,    0,    0,    0, 4786,    0,    0, 4786,
        0, 4794, 4797, 4797, 4797, 4797, 4798, 4798, 4798, 4798,
        0, 4790, 4799, 4799, 4799, 4799, 4790,    0, 4799, 4800,
     4800, 4800, 4800,    0,    0,    0, 4790,    0,    0, 4790,
        0, 4798, 4801, 4801, 4801, 4801, 4802, 4802, 4802, 4802,
        0, 4794, 4803, 4803, 4803, 4803, 4794,    0, 4803, 4804,
     4804, 4804, 4804,    0,    0,    0, 4794,    0,    0, 4794,
        0, 4802, 4805, 4805, 4805, 4805, 4806, 4806, 4806, 4806,

        0, 4798, 4807, 4807, 4807, 4807, 4798,    0, 4807, 4808,
     4808, 4808, 4808,    0,    0,    0, 4798,    0,    0, 4798,
        0, 4806, 4809, 4809, 4809, 4809, 4810, 4810, 4810, 4810,
        0, 4802, 4811, 4811, 4811, 4811, 4802,    0, 4811, 4812,
     4812, 4812, 4812,    0,    0,    0, 4802,    0,    0, 4802,
        0, 4810, 4813, 4813, 4813, 4813, 4814, 4814, 4814, 4814,
        0, 4806, 4815, 4815, 4815, 4815, 4806,    0, 4815, 4816,
     4816, 4816, 4816,    0,    0,    0, 4806,    0,    0, 4806,
        0, 4814, 4817, 4817, 4817, 4817, 4818, 4818, 4818, 4818,
        0, 4810, 4819, 4819, 4819, 4819, 4810,    0, 4819, 4820,

     4820, 4820, 4820,    0,    0,    0, 4810,    0,    0, 4810,
        0, 4818, 4821, 4821, 4821, 4821, 4822, 4822, 4822, 4822,
        0, 4814, 4823, 4823, 4823, 4823, 4814,    0, 4823, 4824,
     4824, 4824, 4824,    0,    0,    0, 4814,    0,    0, 4814,
        0, 4822, 4825, 4825, 4825, 4825, 4826, 4826, 4826, 4826,
        0, 4818, 4827, 4827, 4827, 4827, 4818,    0, 4827, 4828,
     4828, 4828, 4828,    0,    0,    0, 4818,    0,    0, 4818,
        0, 4826, 4829, 4829, 4829, 4829, 4830, 4830, 4830, 4830,
        0, 4822, 4831, 4831, 4831, 4831, 4822,    0, 4831, 4832,
     4832, 4832, 4832,    0,    0,    0, 4822,    0,    0, 4822,

        0, 4830, 4833, 4833, 4833, 4833, 4834, 4834, 4834, 4834,
        0, 4826, 4835, 4835, 4835, 4835, 4826,    0, 4835, 4836,
     4836, 4836, 4836,    0,    0,    0, 4826,    0,    0, 4826,
        0, 4834, 4837, 4837, 4837, 4837, 4838, 4838, 4838, 4838,
        0, 4830, 4839, 4839, 4839, 4839, 4830,    0, 4839, 4840,
     4840, 4840, 4840,    0,    0,    0, 4830,    0,    0, 4830,
        0, 4838, 4841, 4841, 4841, 4841, 4842, 4842, 4842, 4842,
        0, 4834, 4843, 4843, 4843, 4843, 4834,    0, 4843, 4844,
     4844, 4844, 4844,    0,    0,    0, 4834,    0,    0, 4834,
        0, 4842, 4845, 4845, 4845, 4845, 4846, 4846, 4846, 4846,

        0, 4838, 4847, 4847, 4847, 4847, 4838,    0, 4847, 4848,
     4848, 4848, 4848,    0,    0,    0, 4838,    0,    0, 4838,
        0, 4846, 4849, 4849, 4849, 4849, 4850, 4850, 4850, 4850,
        0, 4842, 4851, 4851, 4851, 4851, 4842,    0, 4851, 4852,
     4852, 4852, 4852,    0,    0,    0, 4842,    0,    0, 4842,
        0, 4850, 4853, 4853, 4853, 4853, 4854, 4854, 4854, 4854,
        0, 4846, 4855, 4855, 4855, 4855, 4846,    0, 4855, 4856,
     4856, 4856, 4856,    0,    0,    0, 4846,    0,    0, 4846,
        0, 4854, 4857, 4857, 4857, 4857, 4858, 4858, 4858, 4858,
        0, 4850, 4859, 4859, 4859, 4859, 4850,    0, 4859, 4860,

     4860, 4860, 4860,    0,    0,    0, 4850,    0,    0, 4850,
        0, 4858, 4861, 4861, 4861, 4861, 4862, 4862, 4862, 4862,
        0, 4854, 4863, 4863, 4863, 4863, 4854,    0, 4863, 4864,
     4864, 4864, 4864,    0,    0,    0, 4854,    0,    0, 4854,
        0, 4862, 4865, 4865, 4865, 4865, 4866, 4866, 4866, 4866,
        0, 4858, 4867, 4867, 4867, 4867, 4858,    0, 4867, 4868,
     4868, 4868, 4868,    0,    0,    0, 4858,    0,    0, 4858,
        0, 4866, 4869, 4869, 4869, 4869, 4870, 4870, 4870, 4870,
        0, 4862, 4871, 4871, 4871, 4871, 4862,    0, 4871, 4872,
     4872, 4872, 4872,    0,    0,    0, 4862,    0,    0, 4862,

        0, 4870, 4873, 4873, 4873, 4873, 4874, 4874, 4874, 4874,
        0, 4866, 4875, 4875, 4875, 4875, 4866,    0, 4875, 4876,
     4876, 4876, 4876,    0,    0,    0, 4866,    0,    0, 4866,
        0, 4874, 4877, 4877, 4877, 4877, 4878, 4878, 4878, 4878,
        0, 4870, 4879, 4879, 4879, 4879, 4870,    0, 4879, 4880,
     4880, 4880, 4880,    0,    0,    0, 4870,    0,    0, 4870,
        0, 4878, 4881, 4881, 4881, 4881, 4882, 4882, 4882, 4882,
        0, 4874, 4883, 4883, 4883, 4883, 4874,    0, 4883, 4884,
     4884, 4884, 4884,    0,    0,    0, 4874,    0,    0, 4874,
        0, 4882, 4885, 4885, 4885, 4885, 4886, 4886, 4886, 4886,

        0, 4878, 4887, 4887, 4887, 4887, 4878,    0, 4887, 4888,
     4888, 4888, 4888,    0,    0,    0, 4878,    0,    0, 4878,
        0, 4886, 4889, 4889, 4889, 4889, 4890, 4890, 4890, 4890,
        0, 4882, 4891, 4891, 4891, 4891, 4882,    0, 4891, 4892,
     4892, 4892, 4892,    0,    0,    0, 4882,    0,    0, 4882,
        0, 4890, 4893, 4893, 4893, 4893, 4894, 4894, 4894, 4894,
        0, 4886, 4895, 4895, 4895, 4895, 4886,    0, 4895, 4896,
     4896, 4896, 4896,    0,    0,    0, 4886,    0,    0, 4886,
        0, 4894, 4897, 4897, 4897, 4897, 4898, 4898, 4898, 4898,
        0, 4890, 4899, 4899, 4899, 4899, 4890,    0, 4899, 4900,

     4900, 4900, 4900,    0,    0,    0, 4890,    0,    0, 4890,
        0, 4898, 4901, 4901, 4901, 4901, 4902, 4902, 4902, 4902,
        0, 4894, 4903, 4903, 4903, 4903, 4894,    0, 4903, 4904,
     4904, 4904, 4904,    0,    0,    0, 4894,    0,    0, 4894,
        0, 4902, 4905, 4905, 4905, 4905, 4906, 4906, 4906, 4906,
        0, 4898, 4907, 4907, 4907, 4907, 4898,    0, 4907, 4908,
     4908, 4908, 4908,    0,    0,    0, 4898,    0,    0, 4898,
        0, 4906, 4909, 4909, 4909, 4909, 4910, 4910, 4910, 4910,
        0, 4902, 4911, 4911, 4911, 4911, 4902,    0, 4911, 4912,
     4912, 4912, 4912,    0,    0,    0, 4902,    0,    0, 4902,

        0, 4910, 4913, 4913, 4913, 4913, 4914, 4914, 4914, 4914,
        0, 4906, 4915, 4915, 4915, 4915, 4906,    0, 4915, 4916,
     4916, 4916, 4916,    0,    0,    0, 4906,    0,    0, 4906,
        0, 4914, 4917, 4917, 4917, 4917, 4918, 4918, 4918, 4918,
        0, 4910, 4919, 4919, 4919, 4919, 4910,    0, 4919, 4920,
     4920, 4920, 4920,    0,    0,    0, 4910,    0,    0, 4910,
        0, 4918, 4921, 4921, 4921, 4921, 4922, 4922, 4922, 4922,
        0, 4914, 4923, 4923, 4923, 4923, 4914,    0, 4923, 4924,
     4924, 4924, 4924,    0,    0,    0, 4914,    0,    0, 4914,
        0, 4922, 4925, 4925, 4925, 4925, 4926, 4926, 4926, 4926,

        0, 4918, 4927, 4927, 4927, 4927, 4918,    0, 4927, 4928,
     4928, 4928, 4928,    0,    0,    0, 4918,    0,    0, 4918,
        0, 4926, 4929, 4929, 4929, 4929, 4930, 4930, 4930, 4930,
        0, 4922, 4931, 4931, 4931, 4931, 4922,    0, 4931, 4932,
     4932, 4932, 4932,    0,    0,    0, 4922,    0,    0, 4922,
        0, 4930, 4933, 4933, 4933, 4933, 4934, 4934, 4934, 4934,
        0, 4926, 4935, 4935, 4935, 4935, 4926,    0, 4935, 4936,
     4936, 4936, 4936,    0,    0,    0, 4926,    0,    0, 4926,
        0, 4934, 4937, 4937, 4937, 4937, 4938, 4938, 4938, 4938,
        0, 4930, 4939, 4939, 4939, 4939, 4930,    0, 4939, 4940,

     4940, 4940, 4940,    0,    0,    0, 4930,    0,    0, 4930,
        0, 4938, 4941, 4941, 4941, 4941, 4942, 4942, 4942, 4942,
        0, 4934, 4943, 4943, 4943, 4943, 4934,    0, 4943, 4944,
     4944, 4944, 4944,    0,    0,    0, 4934,    0,    0, 4934,
        0, 4942, 4945, 4945, 4945, 4945, 4946, 4946, 4946, 4946,
        0, 4938, 4947, 4947, 4947, 4947, 4938,    0, 4947, 4948,
     4948, 4948, 4948,    0,    0,    0, 4938,    0,    0, 4938,
        0, 4946, 4949, 4949, 4949, 4949, 4950, 4950, 4950, 4950,
        0, 4942, 4951, 4951, 4951, 4951, 4942,    0, 4951, 4952,
     4952, 4952, 4952,    0,    0,    0, 4942,    0,    0, 4942,

        0, 4950, 4953, 4953, 4953, 4953, 4954, 4954, 4954, 4954,
        0, 4946, 4955, 4955, 4955, 4955, 4946,    0, 4955, 4957,
     4957, 4957, 4957,    0,    0,    0, 4946,    0,    0, 4946,
        0, 4954, 4958, 4958, 4958, 4958, 4959, 4959, 4959, 4959,
        0, 4950, 4959,    0,    0,    0, 4950,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4950, 4958,    0, 4950,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4954,    0,    0,    0,    0, 4954,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4954,    0,    0, 4954,
        0,    0,    0,    0,    0,    0,    0, 4958,    0,    0,

        0,    0, 4958,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4958,    0,    0, 4958, 4961, 4961, 4961, 4961,
     4961, 4961, 4961, 4961, 4961, 4961, 4961, 4961, 4961, 4961,
     4961, 4961, 4961, 4961, 4961, 4961, 4961, 4961, 4961, 4961,
     4961, 4961, 4961, 4961, 4961, 4961, 4961, 4961, 4962, 4962,
     4962, 4962, 4962, 4962, 4962, 4962, 4962, 4962, 4962, 4962,
     4962, 4962, 4962, 4962, 4962, 4962, 4962, 4962, 4962, 4962,
     4962, 4962, 4962, 4962, 4962, 4962, 4962, 4962, 4962, 4962,
     4963, 4963, 4963, 4963, 4963, 4963, 4963, 4963, 4963, 4963,
     4963, 4963, 4963, 4963, 4963, 4963, 4963, 4963, 4963, 4963,

     4963, 4963, 4963, 4963, 4963, 4963, 4963, 4963, 4963, 4963,
     4963, 4963, 4964, 4964, 4964, 4964, 4964, 4964, 4964, 4964,
     4964, 4964, 4964, 4964, 4964, 4964, 4964, 4964, 4964, 4964,
     4964, 4964, 4964, 4964, 4964, 4964, 4964, 4964, 4964, 4964,
     4964, 4964, 4964, 4964, 4965, 4965, 4965, 4965, 4965, 4965,
     4965, 4965, 4965, 4965, 4965, 4965, 4965, 4965, 4965, 4965,
     4965, 4965, 4965, 4965, 4965, 4965, 4965, 4965, 4965, 4965,
     4965, 4965, 4965, 4965, 4965, 4965, 4966, 4966, 4966, 4966,
     4966, 4966, 4966, 4966, 4966, 4966, 4966, 4966, 4966, 4966,
     4966, 4966, 4966, 4966, 4966, 4966, 4966, 4966, 4966, 4966,

     4966, 4966, 4966, 4966, 4966, 4966, 4966, 4966, 4967, 4967,
     4967, 4967, 4967, 4967, 4967, 4967, 4967, 4967, 4967, 4967,
     4967, 4967, 4967, 4967, 4967, 4967, 4967, 4967, 4967, 4967,
     4967, 4967, 4967, 4967, 4967, 4967, 4967, 4967, 4967, 4967,
     4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968,
     4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968,
     4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968,
     4968, 4968, 4969, 4969, 4969, 4969, 4969, 4969, 4969, 4969,
     4969, 4969, 4969, 4969, 4969, 4969, 4969, 4969, 4969, 4969,
     4969, 4969, 4969, 4969, 4969, 4969, 4969, 4969, 4969, 4969,

     4969, 4969, 4969, 4969, 4970, 4970, 4970, 4970, 4970, 4970,
     4970, 4970, 4970, 4970, 4970, 4970, 4970, 4970, 4970, 4970,
     4970, 4970, 4970, 4970, 4970, 4970, 4970, 4970, 4970, 4970,
     4970, 4970, 4970, 4970, 4970, 4970, 4971, 4971, 4971, 4971,
     4971, 4971, 4971, 4971, 4971, 4971, 4971, 4971, 4971, 4971,
     4971, 4971, 4971, 4971, 4971, 4971, 4971, 4971, 4971, 4971,
     4971, 4971, 4971, 4971, 4971, 4971, 4971, 4971, 4972, 4972,
     4972, 4972, 4972, 4972, 4972, 4972, 4972, 4972, 4972, 4972,
     4972, 4972, 4972, 4972, 4972, 4972, 4972, 4972, 4972, 4972,
     4972, 4972, 4972, 4972, 4972, 4972, 4972, 4972, 4972, 4972,

     4973, 4973, 4973, 4973, 4973, 4973, 4973, 4973, 4973, 4973,
     4973, 4973, 4973, 4973, 4973, 4973, 4973, 4973, 4973, 4973,
     4973, 4973, 4973, 4973, 4973, 4973, 4973, 4973, 4973, 4973,
     4973, 4973, 4974, 4974, 4974, 4974, 4974, 4974, 4974, 4974,
     4974, 4974, 4974, 4974, 4974, 4974, 4974, 4974, 4974, 4974,
     4974, 4974, 4974, 4974, 4974, 4974, 4974, 4974, 4974, 4974,
     4974, 4974, 4974, 4974, 4975, 4975, 4975, 4975, 4975, 4975,
     4975, 4975, 4975, 4975, 4975, 4975, 4975, 4975, 4975, 4975,
     4975, 4975, 4975, 4975, 4975, 4975, 4975, 4975, 4975, 4975,
     4975, 4975, 4975, 4975, 4975, 4975, 4976, 4976, 4976, 4976,

     4976, 4976, 4976, 4976, 4976, 4976, 4976, 4976, 4976, 4976,
     4976, 4976, 4976, 4976, 4976, 4976, 4976, 4976, 4976, 4976,
     4976, 4976, 4976, 4976, 4976, 4976, 4976, 4976, 4977, 4977,
     4977, 4977, 4977, 4977, 4977, 4977, 4977, 4977, 4977, 4977,
     4977, 4977, 4977, 4977, 4977, 4977, 4977, 4977, 4977, 4977,
     4977, 4977, 4977, 4977, 4977, 4977, 4977, 4977, 4977, 4977,
     4978, 4978, 4978, 4978, 4978, 4978, 4978, 4978, 4978, 4978,
     4978, 4978, 4978, 4978, 4978, 4978, 4978, 4978, 4978, 4978,
     4978, 4978, 4978, 4978, 4978, 4978, 4978, 4978, 4978, 4978,
     4978, 4978, 4979, 4979, 4979, 4979, 4979, 4979, 4979, 4979,

     4979, 4979, 4979, 4979, 4979, 4979, 4979, 4979, 4979, 4979,
     4979, 4979, 4979, 4979, 4979, 4979, 4979, 4979, 4979, 4979,
     4979, 4979, 4979, 4979, 4980, 4980, 4980, 4980, 4980, 4980,
     4980, 4980, 4980, 4980, 4980, 4980, 4980, 4980, 4980, 4980,
     4980, 4980, 4980, 4980, 4980, 4980, 4980, 4980, 4980, 4980,
     4980, 4980, 4980, 4980, 4980, 4980, 4981, 4981, 4981, 4981,
     4981, 4981, 4981, 4981, 4981, 4981, 4981, 4981, 4981, 4981,
     4981, 4981, 4981, 4981, 4981, 4981, 4981, 4981, 4981, 4981,
     4981, 4981, 4981, 4981, 4981, 4981, 4981, 4981, 4982, 4982,
     4982, 4982, 4982, 4982, 4982, 4982, 4982, 4982, 4982, 4982,

     4982, 4982, 4982, 4982, 4982, 4982, 4982, 4982, 4982, 4982,
     4982, 4982, 4982, 4982, 4982, 4982, 4982, 4982, 4982, 4982,
     4983, 4983, 4983, 4983, 4983, 4983, 4983, 4983, 4983, 4983,
     4983, 4983, 4983, 4983, 4983, 4983, 4983, 4983, 4983, 4983,
     4983, 4983, 4983, 4983, 4983, 4983, 4983, 4983, 4983, 4983,
     4983, 4983, 4984, 4984, 4984, 4984, 4984, 4984, 4984, 4984,
     4984, 4984, 4984, 4984, 4984, 4984, 4984, 4984, 4984, 4984,
     4984, 4984, 4984, 4984, 4984, 4984, 4984, 4984, 4984, 4984,
     4984, 4984, 4984, 4984, 4985, 4985, 4985, 4985, 4985, 4985,
     4985, 4985, 4985, 4985, 4985, 4985, 4985, 4985, 4985, 4985,

     4985, 4985, 4985, 4985, 4985, 4985, 4985, 4985, 4985, 4985,
     4985, 4985, 4985, 4985, 4985, 4985, 4986, 4986, 4986, 4986,
     4986, 4986, 4986, 4986, 4986, 4986, 4986, 4986, 4986, 4986,
     4986, 4986, 4986, 4986, 4986, 4986, 4986, 4986, 4986, 4986,
     4986, 4986, 4986, 4986, 4986, 4986, 4986, 4986, 4987, 4987,
     4987, 4987, 4987, 4987, 4987, 4987, 4987, 4987, 4987, 4987,
     4987, 4987, 4987, 4987, 4987, 4987, 4987, 4987, 4987, 4987,
     4987, 4987, 4987, 4987, 4987, 4987, 4987, 4987, 4987, 4987,
     4988, 4988, 4988, 4988, 4988, 4988, 4988, 4988, 4988, 4988,
     4988, 4988, 4988, 4988, 4988, 4988, 4988, 4988, 4988, 4988,

     4988, 4988, 4988, 4988, 4988, 4988, 4988, 4988, 4988, 4988,
     4988, 4988, 4989, 4989, 4989, 4989, 4989, 4989, 4989, 4989,
     4989, 4989, 4989, 4989, 4989, 4989, 4989, 4989, 4989, 4989,
     4989, 4989, 4989, 4989, 4989, 4989, 4989, 4989, 4989, 4989,
     4989, 4989, 4989, 4989, 4990, 4990, 4990, 4990, 4990, 4990,
     4990, 4990, 4990, 4990, 4990, 4990, 4990, 4990, 4990, 4990,
     4990, 4990, 4990, 4990, 4990, 4990, 4990, 4990, 4990, 4990,
     4990, 4990, 4990, 4990, 4990, 4990, 4991, 4991, 4991, 4991,
     4991, 4991, 4991, 4991, 4991, 4991, 4991, 4991, 4991, 4991,
     4991, 4991, 4991, 4991, 4991, 4991, 4991, 4991, 4991, 4991,

     4991, 4991, 4991, 4991, 4991, 4991, 4991, 4991, 4992, 4992,
     4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992,
     4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992,
     4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992,
     4993, 4993, 4993, 4993, 4993, 4993, 4993, 4993, 4993, 4993,
     4993, 4993, 4993, 4993, 4993, 4993, 4993, 4993, 4993, 4993,
     4993, 4993, 4993, 4993, 4993, 4993, 4993, 4993, 4993, 4993,
     4993, 4993, 4994, 4994, 4994, 4994, 4994, 4994, 4994, 4994,
     4994, 4994, 4994, 4994, 4994, 4994, 4994, 4994, 4994, 4994,
     4994, 4994, 4994, 4994, 4994, 4994, 4994, 4994, 4994, 4994,

     4994, 4994, 4994, 4994, 4995, 4995, 4995, 4995, 4995, 4995,
     4995, 4995, 4995, 4995, 4995, 4995, 4995, 4995, 4995, 4995,
     4995, 4995, 4995, 4995, 4995, 4995, 4995, 4995, 4995, 4995,
     4995, 4995, 4995, 4995, 4995, 4995, 4996, 4996, 4996, 4996,
     4996, 4996, 4996, 4996, 4996, 4996, 4996, 4996, 4996, 4996,
     4996, 4996, 4996, 4996, 4996, 4996, 4996, 4996, 4996, 4996,
     4996, 4996, 4996, 4996, 4996, 4996, 4996, 4996, 4997, 4997,
     4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997,
     4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997,
     4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997,

     4998, 4998, 4998, 4998, 4998, 4998, 4998, 4998, 4998, 4998,
     4998, 4998, 4998, 4998, 4998, 4998, 4998, 4998, 4998, 4998,
     4998, 4998, 4998, 4998, 4998, 4998, 4998, 4998, 4998, 4998,
     4998, 4998, 4999, 4999, 4999, 4999, 4999, 4999, 4999, 4999,
     4999, 4999, 4999, 4999, 4999, 4999, 4999, 4999, 4999, 4999,
     4999, 4999, 4999, 4999, 4999, 4999, 4999, 4999, 4999, 4999,
     4999, 4999, 4999, 4999, 5000, 5000, 5000, 5000, 5000, 5000,
     5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000,
     5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000,
     5000, 5000, 5000, 5000, 5000, 5000, 5001, 5001, 5001, 5001,

     5001, 5001, 5001, 5001, 5001, 5001, 5001, 5001, 5001, 5001,
     5001, 5001, 5001, 5001, 5001, 5001, 5001, 5001, 5001, 5001,
     5001, 5001, 5001, 5001, 5001, 5001, 5001, 5001, 5002, 5002,
     5002, 5002, 5002, 5002, 5002, 5002, 5002, 5002, 5002, 5002,
     5002, 5002, 5002, 5002, 5002, 5002, 5002, 5002, 5002, 5002,
     5002, 5002, 5002, 5002, 5002, 5002, 5002, 5002, 5002, 5002,
     5003, 5003, 5003, 5003, 5003, 5003, 5003, 5003, 5003, 5003,
     5003, 5003, 5003, 5003, 5003, 5003, 5003, 5003, 5003, 5003,
     5003, 5003, 5003, 5003, 5003, 5003, 5003, 5003, 5003, 5003,
     5003, 5003, 5004, 5004, 5004, 5004, 5004, 5004, 5004, 5004,

     5004, 5004, 5004, 5004, 5004, 5004, 5004, 5004, 5004, 5004,
     5004, 5004, 5004, 5004, 5004, 5004, 5004, 5004, 5004, 5004,
     5004, 5004, 5004, 5004, 5005, 5005, 5005, 5005, 5005, 5005,
     5005, 5005, 5005, 5005, 5005, 5005, 5005, 5005, 5005, 5005,
     5005, 5005, 5005, 5005, 5005, 5005, 5005, 5005, 5005, 5005,
     5005, 5005, 5005, 5005, 5005, 5005, 5006, 5006, 5006, 5006,
     5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006,
     5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006,
     5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006, 5007, 5007,
     5007, 5007, 5007, 5007, 5007, 5007, 5007, 5007, 5007, 5007,

     5007, 5007, 5007, 5007, 5007, 5007, 5007, 5007, 5007, 5007,
     5007, 5007, 5007, 5007, 5007, 5007, 5007, 5007, 5007, 5007,
     5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008,
     5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008,
     5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008,
     5008, 5008, 5009, 5009, 5009, 5009, 5009, 5009, 5009, 5009,
     5009, 5009, 5009, 5009, 5009, 5009, 5009, 5009, 5009, 5009,
     5009, 5009, 5009, 5009, 5009, 5009, 5009, 5009, 5009, 5009,
     5009, 5009, 5009, 5009, 5010, 5010, 5010, 5010, 5010, 5010,
     5010, 5010, 5010, 5010, 5010, 5010, 5010, 5010, 5010, 5010,

     5010, 5010, 5010, 5010, 5010, 5010, 5010, 5010, 5010, 5010,
     5010, 5010, 5010, 5010, 5010, 5010, 5011, 5011, 5011, 5011,
     5011, 5011, 5011, 5011, 5011, 5011, 5011, 5011, 5011, 5011,
     5011, 5011, 5011, 5011, 5011, 5011, 5011, 5011, 5011, 5011,
     5011, 5011, 5011, 5011, 5011, 5011, 5011, 5011, 5012, 5012,
     5012, 5012, 5012, 5012, 5012, 5012, 5012, 5012, 5012, 5012,
     5012, 5012, 5012, 5012, 5012, 5012, 5012, 5012, 5012, 5012,
     5012, 5012, 5012, 5012, 5012, 5012, 5012, 5012, 5012, 5012,
     5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013,
     5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013,

     5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013,
     5013, 5013, 5014, 5014, 5014, 5014, 5014, 5014, 5014, 5014,
     5014, 5014, 5014, 5014, 5014, 5014, 5014, 5014, 5014, 5014,
     5014, 5014, 5014, 5014, 5014, 5014, 5014, 5014, 5014, 5014,
     5014, 5014, 5014, 5014, 5015, 5015, 5015, 5015, 5015, 5015,
     5015, 5015, 5015, 5015, 5015, 5015, 5015, 5015, 5015, 5015,
     5015, 5015, 5015, 5015, 5015, 5015, 5015, 5015, 5015, 5015,
     5015, 5015, 5015, 5015, 5015, 5015, 5016, 5016, 5016, 5016,
     5016, 5016, 5016, 5016, 5016, 5016, 5016, 5016, 5016, 5016,
     5016, 5016, 5016, 5016, 5016, 5016, 5016, 5016, 5016, 5016,

     5016, 5016, 5016, 5016, 5016, 5016, 5016, 5016, 5017, 5017,
     5017, 5017, 5017, 5017, 5017, 5017, 5017, 5017, 5017, 5017,
     5017, 5017, 5017, 5017, 5017, 5017, 5017, 5017, 5017, 5017,
     5017, 5017, 5017, 5017, 5017, 5017, 5017, 5017, 5017, 5017,
     5018, 5018, 5018, 5018, 5018, 5018, 5018, 5018, 5018, 5018,
     5018, 5018, 5018, 5018, 5018, 5018, 5018, 5018, 5018, 5018,
     5018, 5018, 5018, 5018, 5018, 5018, 5018, 5018, 5018, 5018,
     5018, 5018, 5019, 5019, 5019, 5019, 5019, 5019, 5019, 5019,
     5019, 5019, 5019, 5019, 5019, 5019, 5019, 5019, 5019, 5019,
     5019, 5019, 5019, 5019, 5019, 5019, 5019, 5019, 5019, 5019,

     5019, 5019, 5019, 5019, 5020, 5020, 5020, 5020, 5020, 5020,
     5020, 5020, 5020, 5020, 5020, 5020, 5020, 5020, 5020, 5020,
     5020, 5020, 5020, 5020, 5020, 5020, 5020, 5020, 5020, 5020,
     5020, 5020, 5020, 5020, 5020, 5020, 5021, 5021, 5021, 5021,
     5021, 5021, 5021, 5021, 5021, 5021, 5021, 5021, 5021, 5021,
     5021, 5021, 5021, 5021, 5021, 5021, 5021, 5021, 5021, 5021,
     5021, 5021, 5021, 5021, 5021, 5021, 5021, 5021, 5022, 5022,
     5022, 5022, 5022, 5022, 5022, 5022, 5022, 5022, 5022, 5022,
     5022, 5022, 5022, 5022, 5022, 5022, 5022, 5022, 5022, 5022,
     5022, 5022, 5022, 5022, 5022, 5022, 5022, 5022, 5022, 5022,

     5023, 5023, 5023, 5023, 5023, 5023, 5023, 5023, 5023, 5023,
     5023, 5023, 5023, 5023, 5023, 5023, 5023, 5023, 5023, 5023,
     5023, 5023, 5023, 5023, 5023, 5023, 5023, 5023, 5023, 5023,
     5023, 5023, 5024, 5024, 5024, 5024, 5024, 5024, 5024, 5024,
     5024, 5024, 5024, 5024, 5024, 5024, 5024, 5024, 5024, 5024,
     5024, 5024, 5024, 5024, 5024, 5024, 5024, 5024, 5024, 5024,
     5024, 5024, 5024, 5024, 5025, 5025, 5025, 5025, 5025, 5025,
     5025, 5025, 5025, 5025, 5025, 5025, 5025, 5025, 5025, 5025,
     5025, 5025, 5025, 5025, 5025, 5025, 5025, 5025, 5025, 5025,
     5025, 5025, 5025, 5025, 5025, 5025, 5026, 5026, 5026, 5026,

     5026, 5026, 5026, 5026, 5026, 5026, 5026, 5026, 5026, 5026,
     5026, 5026, 5026, 5026, 5026, 5026, 5026, 5026, 5026, 5026,
     5026, 5026, 5026, 5026, 5026, 5026, 5026, 5026, 5027, 5027,
     5027, 5027, 5027, 5027, 5027, 5027, 5027, 5027, 5027, 5027,
     5027, 5027, 5027, 5027, 5027, 5027, 5027, 5027, 5027, 5027,
     5027, 5027, 5027, 5027, 5027, 5027, 5027, 5027, 5027, 5027,
     5028, 5028, 5028, 5028, 5028, 5028, 5028, 5028, 5028, 5028,
     5028, 5028, 5028, 5028, 5028, 5028, 5028, 5028, 5028, 5028,
     5028, 5028, 5028, 5028, 5028, 5028, 5028, 5028, 5028, 5028,
     5028, 5028, 5029, 5029, 5029, 5029, 5029, 5029, 5029, 5029,

     5029, 5029, 5029, 5029, 5029, 5029, 5029, 5029, 5029, 5029,
     5029, 5029, 5029, 5029, 5029, 5029, 5029, 5029, 5029, 5029,
     5029, 5029, 5029, 5029, 5030, 5030, 5030, 5030, 5030, 5030,
     5030, 5030, 5030, 5030, 5030, 5030, 5030, 5030, 5030, 5030,
     5030, 5030, 5030, 5030, 5030, 5030, 5030, 5030, 5030, 5030,
     5030, 5030, 5030, 5030, 5030, 5030, 5031, 5031, 5031, 5031,
     5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031,
     5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031,
     5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5032, 5032,
     5032, 5032, 5032, 5032, 5032, 5032, 5032, 5032, 5032, 5032,

     5032, 5032, 5032, 5032, 5032, 5032, 5032, 5032, 5032, 5032,
     5032, 5032, 5032, 5032, 5032, 5032, 5032, 5032, 5032, 5032,
     5033, 5033, 5033, 5033, 5033, 5033, 5033, 5033, 5033, 5033,
     5033, 5033, 5033, 5033, 5033, 5033, 5033, 5033, 5033, 5033,
     5033, 5033, 5033, 5033, 5033, 5033, 5033, 5033, 5033, 5033,
     5033, 5033, 5035,    0,    0,    0,    0,    0,    0,    0,
        0, 5035,    0,    0,    0,    0,    0, 5035,    0,    0,
        0,    0,    0,    0, 5035,    0,    0,    0,    0,    0,
        0,    0, 5035, 5036, 5036, 5036,    0,    0,    0, 5036,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 5036,    0,    0,    0,    0,
        0,    0,    0, 5036, 5037, 5037, 5037, 5037,    0,    0,
     5037,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     5037,    0,    0,    0,    0,    0, 5037,    0,    0,    0,
        0,    0,    0, 5037, 5037, 5038, 5038, 5038,    0,    0,
        0, 5038,    0,    0,    0,    0,    0,    0, 5038,    0,
        0,    0,    0,    0,    0,    0,    0, 5038,    0,    0,
        0,    0,    0,    0, 5038, 5038, 5039, 5039, 5039,    0,
        0,    0,    0,    0,    0, 5039,    0,    0, 5039, 5039,
        0, 5039, 5039, 5039, 5039,    0,    0,    0, 5039,    0,

        0,    0,    0,    0,    0,    0, 5039, 5040, 5040, 5040,
        0,    0,    0, 5040,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 5040,
        0,    0,    0,    0,    0,    0,    0, 5040, 5041, 5041,
     5041, 5041, 5041, 5041, 5041, 5041, 5041, 5041, 5041, 5041,
     5041,    0, 5041, 5041, 5041, 5041, 5041, 5041, 5041, 5041,
     5041, 5041, 5041, 5041, 5041, 5041,    0, 5041, 5041, 5041,
     5042, 5042, 5042,    0,    0,    0, 5042,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 5042,    0,    0,    0,    0,    0,    0,    0,

     5042, 5043, 5043, 5043, 5043,    0,    0, 5043,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 5043,    0,    0,
        0,    0,    0, 5043,    0,    0,    0,    0,    0,    0,
     5043, 5043, 5044, 5044, 5044,    0,    0,    0,    0,    0,
        0, 5044,    0,    0,    0,    0,    0, 5044, 5044,    0,
        0,    0,    0,    0, 5044,    0,    0,    0,    0,    0,
        0,    0, 5044, 5048,    0,    0,    0, 5048,    0, 5048,
        0,    0, 5048,    0,    0,    0, 5048,    0,    0,    0,
        0,    0,    0,    0, 5048, 5049, 5049,    0, 5049, 5049,
     5049, 5049, 5049, 5049, 5049, 5049, 5049, 5049, 5049, 5049,

     5049, 5049, 5049, 5049, 5049, 5049, 5049, 5049, 5049, 5049,
     5049, 5049, 5049, 5049, 5049, 5049, 5049, 5056, 5056, 5056,
        0,    0,    0, 5056,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5056,    0,    0,    0, 5056,
        0,    0,    0,    0, 5056,    0,    0, 5056, 5058, 5058,
     5058,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 5058,    0, 5058, 5058,    0,    0,    0,    0,    0,
     5058,    0, 5058,    0,    0,    0,    0,    0, 5058, 5060,
     5060,    0, 5060, 5060, 5060, 5060, 5060, 5060,    0, 5060,
     5060, 5060, 5060, 5060, 5060, 5060, 5060, 5060, 5060, 5060,

     5060, 5060, 5060, 5060, 5060, 5060, 5060, 5060, 5060, 5060,
     5060, 5061, 5061, 5061,    0,    0,    0, 5061,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5061,    0,    0,    0,    0,    0,    0,
        0, 5061, 5062, 5062, 5062, 5062,    0,    0, 5062,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5062,    0,
        0,    0,    0,    0, 5062,    0,    0,    0,    0,    0,
        0, 5062, 5062, 5063, 5063, 5063,    0,    0,    0, 5063,
     5063,    0,    0,    0, 5063,    0,    0,    0,    0, 5063,
        0,    0,    0,    0,    0, 5063,    0,    0,    0, 5063,

        0,    0,    0, 5063, 5066, 5066, 5066,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 5066,
     5066,    0, 5066,    0,    0,    0, 5066,    0,    0,    0,
        0,    0,    0,    0, 5066, 5067, 5067, 5067, 5067, 5067,
     5067, 5067, 5067, 5067, 5067, 5067, 5067, 5067, 5067, 5067,
     5067, 5067, 5067, 5067, 5067, 5067, 5067, 5067, 5067, 5067,
     5067, 5067, 5067, 5067, 5067, 5067, 5067, 5068, 5068,    0,
     5068, 5068, 5068, 5068, 5068, 5068, 5068, 5068, 5068, 5068,
     5068, 5068, 5068, 5068, 5068, 5068,    0, 5068, 5068, 5068,
     5068, 5068, 5068, 5068, 5068, 5068, 5068, 5068, 5068, 5069,

     5069, 5069,    0,    0,    0, 5069,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 5069,    0,    0,    0,    0,    0,    0,    0, 5069,
     5070, 5070, 5070, 5070,    0,    0, 5070,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 5070,    0,    0,    0,
        0,    0, 5070,    0,    0,    0,    0,    0,    0, 5070,
     5070, 5071, 5071, 5071,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 5071, 5071,    0, 5071,
        0,    0,    0, 5071,    0,    0,    0,    0,    0,    0,
        0, 5071, 5076, 5076,    0,    0, 5076,    0,    0, 5076,

     5076,    0, 5076, 5076, 5076, 5076, 5076,    0, 5076, 5076,
     5076,    0, 5076, 5076,    0, 5076, 5076, 5076, 5076, 5076,
        0,    0, 5076, 5076, 5077, 5077,    0, 5077, 5077, 5077,
     5077, 5077, 5077, 5077, 5077, 5077, 5077, 5077, 5077, 5077,
     5077, 5077, 5077, 5077, 5077, 5077, 5077, 5077, 5077, 5077,
     5077, 5077, 5077, 5077, 5077, 5077, 5078, 5078,    0, 5078,
     5078, 5078, 5078, 5078, 5078,    0, 5078, 5078, 5078, 5078,
     5078, 5078, 5078, 5078, 5078, 5078, 5078, 5078, 5078, 5078,
     5078, 5078, 5078, 5078, 5078, 5078, 5078, 5078, 5080, 5080,
     5080,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 5080,    0, 5080, 5080,    0,    0,    0,    0,    0,
     5080,    0,    0,    0,    0,    0,    0,    0, 5080, 5081,
     5081, 5081,    0,    0,    0, 5081,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 5081,    0,    0,    0,    0,    0,    0,    0, 5081,
     5082, 5082, 5082, 5082,    0,    0, 5082,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 5082,    0,    0,    0,
        0,    0, 5082,    0,    0,    0,    0,    0,    0, 5082,
     5082, 5083, 5083, 5083,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 5083, 5083,    0,    0,

        0,    0,    0, 5083,    0,    0,    0,    0,    0,    0,
        0, 5083, 5084, 5084,    0, 5084, 5084,    0,    0, 5084,
     5084,    0, 5084, 5084, 5084, 5084, 5084,    0, 5084, 5084,
     5084,    0, 5084, 5084,    0, 5084, 5084,    0, 5084, 5084,
        0,    0, 5084, 5084, 5085, 5085,    0, 5085, 5085, 5085,
     5085, 5085, 5085,    0, 5085, 5085, 5085, 5085, 5085, 5085,
     5085, 5085, 5085, 5085, 5085, 5085, 5085, 5085, 5085, 5085,
     5085, 5085, 5085, 5085, 5085, 5085, 5086, 5086,    0, 5086,
     5086, 5086, 5086, 5086, 5086, 5086, 5086, 5086, 5086, 5086,
     5086, 5086, 5086, 5086, 5086, 5086, 5086, 5086, 5086, 5086,

     5086, 5086, 5086, 5086, 5086, 5086, 5086, 5086, 5088, 5088,
     5088,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5088,    0,    0,    0,    0,    0,    0,
     5088,    0,    0,    0,    0, 5088,    0,    0, 5088, 5089,
     5089,    0, 5089, 5089, 5089, 5089, 5089, 5089, 5089, 5089,
     5089,    0, 5089, 5089, 5089, 5089, 5089, 5089, 5089, 5089,
     5089, 5089, 5089, 5089, 5089, 5089, 5089, 5089, 5089, 5089,
     5089, 5090, 5090, 5090, 5090, 5090, 5090, 5090, 5090, 5090,
     5090, 5090, 5090, 5090, 5090, 5090, 5090, 5090, 5090, 5090,
     5090, 5090, 5090, 5090, 5090, 5090, 5090, 5090, 5090, 5090,

     5090, 5090, 5090, 5091, 5091,    0, 5091, 5091,    0, 5091,
     5091, 5091, 5091, 5091, 5091, 5091, 5091, 5091, 5091, 5091,
     5091, 5091, 5091, 5091, 5091, 5091, 5091,    0, 5091,    0,
     5091, 5091, 5091, 5091, 5091, 5092, 5092,    0, 5092, 5092,
     5092, 5092, 5092, 5092, 5092, 5092, 5092, 5092, 5092, 5092,
     5092, 5092, 5092, 5092, 5092, 5092, 5092, 5092, 5092, 5092,
     5092, 5092, 5092, 5092, 5092, 5092, 5092, 5095,    0,    0,
        0, 5095, 5095, 5095, 5095, 5095, 5095, 5095, 5095,    0,
     5095,    0,    0, 5095, 5095, 5095, 5095, 5095, 5095, 5095,
     5095, 5095, 5095, 5095, 5095, 5095, 5095, 5095, 5095, 5097,

        0, 5097,    0,    0,    0,    0,    0,    0, 5097,    0,
     5097,    0,    0,    0,    0,    0, 5097, 5099, 5099, 5099,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     5099,    0, 5099,    0,    0,    0,    0,    0,    0, 5099,
        0,    0,    0,    0,    0,    0,    0, 5099, 5101, 5101,
     5101,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5101,    0,    0,    0,    0,    0,    0,
     5101,    0, 5101,    0,    0,    0,    0,    0, 5101, 5104,
     5104,    0, 5104, 5104, 5104, 5104, 5104, 5104, 5104, 5104,
     5104, 5104, 5104, 5104, 5104, 5104, 5104, 5104, 5104, 5104,

     5104, 5104, 5104, 5104, 5104, 5104, 5104, 5104, 5104, 5104,
     5104, 5106,    0,    0,    0, 5106,    0,    0,    0,    0,
        0,    0, 5106,    0,    0,    0,    0,    0,    0, 5106,
        0,    0,    0,    0,    0,    0,    0, 5106, 5109, 5109,
        0, 5109, 5109,    0, 5109, 5109, 5109, 5109, 5109, 5109,
     5109, 5109, 5109, 5109, 5109, 5109, 5109, 5109, 5109, 5109,
     5109, 5109, 5109, 5109, 5109, 5109, 5109, 5109, 5109, 5109,
     5112, 5112, 5112, 5112, 5112, 5112, 5112, 5112, 5112, 5112,
     5112,    0, 5112, 5112, 5112, 5112, 5112, 5112, 5112, 5112,
     5112, 5112, 5112, 5112, 5112, 5112, 5112, 5112, 5112, 5112,

     5112, 5112, 5114, 5114, 5114,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 5114, 5114,    0,
        0,    0,    0,    0, 5114,    0,    0,    0,    0,    0,
        0,    0, 5114, 5115, 5115, 5115, 5115, 5115, 5115, 5115,
     5115, 5115, 5115,    0,    0, 5115, 5115, 5115, 5115, 5115,
     5115, 5115, 5115, 5115, 5115, 5115, 5115, 5115, 5115, 5115,
     5115, 5115, 5115, 5115, 5115, 5117, 5117,    0, 5117,    0,
        0,    0, 5117,    0,    0,    0,    0,    0,    0,    0,
     5117, 5150, 5150, 5150,    0,    0,    0, 5150,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 5150,    0,    0,    0,    0,    0,    0,
        0, 5150, 5151, 5151, 5151, 5151,    0,    0, 5151,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5151,    0,
        0,    0,    0,    0, 5151,    0,    0,    0,    0,    0,
        0, 5151, 5151, 5152, 5152, 5152,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5152, 5152,
        0,    0,    0,    0,    0, 5152,    0,    0,    0,    0,
        0,    0,    0, 5152, 5159, 5159,    0, 5159, 5159, 5159,
     5159, 5159, 5159,    0, 5159, 5159, 5159, 5159, 5159, 5159,
     5159, 5159, 5159, 5159, 5159, 5159, 5159, 5159, 5159, 5159,

     5159, 5159, 5159, 5159, 5159, 5159, 5160, 5160, 5160,    0,
        0,    0, 5160,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5160,    0,
        0,    0,    0,    0,    0,    0, 5160, 5161, 5161, 5161,
        0,    0,    0,    0,    0,    0,    0,    0, 5161,    0,
        0,    0, 5161,    0,    0,    0,    0,    0,    0, 5161,
        0,    0,    0,    0,    0,    0,    0, 5161, 5162, 5162,
     5162,    0,    0,    0, 5162, 5162,    0,    0,    0, 5162,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     5162,    0,    0,    0,    0,    0,    0,    0, 5162, 5163,

     5163, 5163,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5163,    0,    0,    0,    0,    0,
        0, 5163, 5163,    0,    0,    0,    0,    0,    0, 5163,
     5164, 5164, 5164,    0,    0,    0, 5164,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 5164,    0,    0,    0,    0,    0,    0,    0,
     5164, 5165, 5165, 5165, 5165,    0,    0, 5165,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 5165,    0,    0,
        0,    0,    0, 5165,    0,    0,    0,    0,    0,    0,
     5165, 5165, 5166, 5166, 5166,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 5166, 5166,    0,
        0,    0,    0,    0, 5166,    0,    0,    0,    0,    0,
        0,    0, 5166, 5167, 5167,    0, 5167, 5167, 5167, 5167,
     5167, 5167, 5167, 5167, 5167, 5167, 5167, 5167, 5167, 5167,
     5167, 5167, 5167, 5167, 5167, 5167, 5167, 5167, 5167, 5167,
     5167, 5167, 5167, 5167, 5167, 5168,    0,    0,    0, 5168,
        0,    0, 5168, 5168,    0,    0,    0, 5168, 5168, 5168,
        0, 5168, 5168, 5168, 5168, 5168, 5168, 5168, 5168, 5168,
     5168, 5168, 5168, 5168, 5168, 5168, 5168, 5169, 5169,    0,
     5169, 5169, 5169, 5169, 5169, 5169,    0, 5169, 5169, 5169,

     5169, 5169, 5169, 5169, 5169, 5169, 5169, 5169, 5169, 5169,
     5169, 5169, 5169, 5169, 5169, 5169, 5169, 5169, 5169, 5174,
     5174,    0, 5174, 5174, 5174, 5174, 5174, 5174, 5174, 5174,
     5174, 5174, 5174, 5174, 5174, 5174, 5174, 5174, 5174, 5174,
     5174, 5174, 5174, 5174, 5174, 5174, 5174, 5174, 5174, 5174,
     5174, 5175, 5175,    0, 5175, 5175, 5175, 5175, 5175, 5175,
     5175, 5175, 5175, 5175, 5175, 5175, 5175, 5175, 5175, 5175,
     5175, 5175, 5175, 5175, 5175, 5175, 5175, 5175, 5175, 5175,
     5175, 5175, 5175, 5176, 5176,    0, 5176, 5176,    0, 5176,
     5176, 5176,    0,    0,    0, 5176, 5176, 5176, 5176, 5176,

     5176, 5176, 5176, 5176, 5176, 5176, 5176, 5176, 5176, 5176,
     5176, 5176, 5176, 5176, 5176, 5177, 5177,    0, 5177, 5177,
     5177, 5177, 5177, 5177,    0, 5177, 5177, 5177, 5177, 5177,
     5177, 5177, 5177, 5177, 5177, 5177, 5177, 5177, 5177, 5177,
     5177, 5177, 5177, 5177, 5177, 5177, 5177, 5178, 5178,    0,
     5178, 5178,    0, 5178, 5178, 5178,    0, 5178, 5178, 5178,
     5178, 5178,    0, 5178, 5178, 5178, 5178, 5178, 5178, 5178,
     5178, 5178, 5178, 5178, 5178,    0,    0, 5178, 5178, 5179,
     5179,    0, 5179, 5179, 5179, 5179, 5179, 5179,    0, 5179,
     5179, 5179, 5179, 5179, 5179, 5179, 5179, 5179, 5179, 5179,

     5179, 5179, 5179, 5179, 5179, 5179, 5179, 5179, 5179, 5179,
     5179, 5180, 5180,    0, 5180, 5180,    0, 5180, 5180, 5180,
        0,    0,    0, 5180, 5180, 5180,    0, 5180, 5180, 5180,
     5180, 5180, 5180, 5180, 5180, 5180, 5180, 5180, 5180, 5180,
     5180, 5180, 5180, 5181, 5181,    0, 5181, 5181, 5181, 5181,
     5181, 5181,    0, 5181, 5181, 5181, 5181, 5181, 5181, 5181,
     5181, 5181, 5181, 5181, 5181, 5181, 5181, 5181, 5181, 5181,
     5181, 5181, 5181, 5181, 5181, 5182, 5182,    0, 5182, 5182,
        0, 5182, 5182, 5182,    0, 5182, 5182, 5182,    0, 5182,
        0, 5182, 5182, 5182, 5182, 5182, 5182, 5182, 5182, 5182,

     5182, 5182, 5182,    0,    0, 5182, 5182, 5183, 5183,    0,
     5183, 5183, 5183, 5183, 5183, 5183,    0, 5183, 5183, 5183,
     5183, 5183, 5183, 5183, 5183, 5183, 5183, 5183, 5183, 5183,
     5183, 5183, 5183, 5183, 5183, 5183, 5183, 5183, 5183, 5185,
     5185,    0, 5185, 5185, 5185, 5185, 5185, 5185,    0, 5185,
     5185, 5185, 5185, 5185, 5185, 5185, 5185, 5185, 5185, 5185,
     5185, 5185, 5185, 5185, 5185, 5185, 5185, 5185, 5185, 5185,
     5185, 5187, 5187,    0, 5187, 5187,    0, 5187, 5187, 5187,
        0, 5187, 5187, 5187, 5187, 5187, 5187, 5187, 5187, 5187,
     5187, 5187, 5187, 5187, 5187, 5187,    0, 5187, 5187, 5187,

     5187, 5187, 5187, 5188, 5188,    0, 5188, 5188, 5188, 5188,
     5188, 5188, 5188, 5188, 5188, 5188, 5188, 5188, 5188, 5188,
     5188, 5188, 5188, 5188, 5188, 5188, 5188, 5188, 5188, 5188,
     5188, 5188, 5188, 5188, 5188, 5189, 5189,    0, 5189, 5189,
        0, 5189, 5189, 5189,    0,    0,    0, 5189, 5189, 5189,
        0, 5189, 5189, 5189, 5189, 5189, 5189, 5189, 5189, 5189,
     5189, 5189, 5189, 5189, 5189, 5189, 5189, 5190, 5190,    0,
     5190, 5190, 5190, 5190, 5190, 5190, 5190, 5190, 5190,    0,
     5190, 5190, 5190, 5190, 5190, 5190, 5190, 5190, 5190,    0,
     5190, 5190,    0, 5190, 5190, 5190, 5190, 5190, 5190, 5191,

     5191,    0, 5191, 5191, 5191, 5191, 5191, 5191, 5191, 5191,
     5191, 5191, 5191, 5191, 5191, 5191, 5191, 5191, 5191, 5191,
     5191,    0, 5191, 5191,    0, 5191, 5191, 5191, 5191, 5191,
     5191, 5202, 5202, 5202, 5202, 5202, 5202, 5202, 5202, 5202,
     5202, 5202,    0, 5202, 5202, 5202, 5202, 5202, 5202, 5202,
     5202, 5202, 5202, 5202, 5202, 5202, 5202, 5202, 5202, 5202,
     5202, 5202, 5202, 5203,    0, 5203, 5203, 5203, 5203, 5203,
     5203, 5203, 5203,    0,    0, 5203, 5203, 5203, 5203, 5203,
     5203, 5203, 5203, 5203, 5203, 5203, 5203, 5203,    0, 5203,
     5203, 5203, 5203, 5203, 5203, 5204, 5204,    0, 5204, 5204,

     5204, 5204, 5204, 5204, 5204, 5204,    0, 5204, 5204, 5204,
     5204, 5204, 5204, 5204, 5204, 5204, 5204, 5204, 5204, 5204,
     5204, 5204, 5204, 5204, 5204, 5204, 5204, 5205,    0, 5205,
     5205, 5205, 5205, 5205, 5205, 5205, 5205,    0,    0, 5205,
     5205, 5205, 5205, 5205, 5205, 5205, 5205, 5205, 5205, 5205,
     5205, 5205,    0, 5205, 5205, 5205, 5205, 5205, 5205, 5206,
     5206, 5206,    0,    0,    0, 5206,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 5206, 5206,    0,    0,    0,    0,    0,    0, 5206,
     5208, 5208, 5208,    0,    0,    0,    0,    0,    0,    0,

     5208,    0, 5208,    0,    0, 5208,    0,    0,    0,    0,
        0,    0, 5208,    0,    0,    0,    0,    0,    0,    0,
     5208, 5209, 5209, 5209, 5209, 5209, 5209, 5209, 5209, 5209,
     5209, 5209, 5209, 5209, 5209, 5209, 5209, 5209, 5209, 5209,
     5209, 5209, 5209, 5209, 5209, 5209, 5209, 5209, 5209, 5209,
     5209, 5209, 5209, 5210, 5210, 5210,    0,    0,    0, 5210,
        0,    0, 5210,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5210,    0,    0,    0,    0,
        0,    0,    0, 5210, 5212, 5212, 5212,    0,    0,    0,
     5212,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 5212,    0,    0,    0,
        0,    0,    0,    0, 5212, 5213, 5213, 5213,    0,    0,
        0,    0,    0,    0, 5213,    0,    0,    0,    0,    0,
     5213,    0, 5213,    0,    0,    0,    0, 5213,    0,    0,
        0,    0,    0,    0,    0, 5213, 5214,    0,    0,    0,
        0,    0, 5214, 5214,    0,    0,    0, 5214,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5214,    0,
        0,    0,    0,    0,    0,    0, 5214, 5215, 5215, 5215,
        0,    0,    0, 5215,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 5215,

        0,    0,    0,    0,    0,    0,    0, 5215, 5216, 5216,
     5216, 5216,    0,    0, 5216,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5216,    0,    0,    0,    0,    0,
     5216,    0,    0,    0,    0,    0,    0, 5216, 5216, 5217,
     5217, 5217,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5217, 5217,    0,    0,    0,    0,
        0, 5217,    0,    0,    0,    0,    0,    0,    0, 5217,
     5218, 5218, 5218, 5218, 5218, 5218, 5218, 5218, 5218, 5218,
     5218, 5218, 5218, 5218, 5218, 5218, 5218, 5218, 5218, 5218,
     5218, 5218, 5218, 5218, 5218, 5218, 5218, 5218, 5218, 5218,

     5218, 5218, 5219, 5219,    0, 5219, 5219, 5219, 5219, 5219,
     5219, 5219, 5219, 5219,    0, 5219, 5219,    0, 5219, 5219,
     5219, 5219, 5219, 5219,    0, 5219, 5219,    0, 5219, 5219,
     5219, 5219,    0, 5219, 5220, 5220, 5220, 5220, 5220, 5220,
     5220, 5220, 5220, 5220, 5220, 5220, 5220, 5220, 5220, 5220,
     5220, 5220, 5220, 5220, 5220, 5220, 5220, 5220, 5220, 5220,
     5220, 5220, 5220, 5220, 5220, 5220, 5221, 5221,    0, 5221,
     5221, 5221, 5221,    0, 5221, 5221, 5221, 5221,    0, 5221,
     5221,    0, 5221, 5221, 5221,    0, 5221, 5221,    0, 5221,
     5221,    0,    0, 5221, 5221, 5221,    0, 5221, 5222, 5222,

     5222,    0,    0,    0, 5222,    0,    0, 5222,    0, 5222,
        0,    0, 5222,    0,    0,    0,    0,    0,    0,    0,
     5222,    0,    0,    0,    0,    0,    0,    0, 5222, 5223,
        0,    0,    0,    0,    0,    0,    0,    0, 5223,    0,
        0,    0,    0,    0, 5223,    0,    0,    0,    0,    0,
        0, 5223,    0,    0,    0,    0,    0,    0,    0, 5223,
     5224, 5224, 5224,    0,    0,    0, 5224,    0,    0,    0,
        0,    0,    0, 5224,    0,    0,    0,    0,    0,    0,
        0,    0, 5224,    0,    0,    0,    0,    0,    0, 5224,
     5224, 5225, 5225, 5225,    0,    0,    0, 5225,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5225,    0,    0,    0,    0,    0,    0,
        0, 5225, 5226, 5226, 5226,    0,    0,    0,    0,    0,
        0, 5226,    0,    0, 5226,    0,    0, 5226,    0, 5226,
     5226,    0,    0,    0, 5226,    0,    0,    0,    0,    0,
        0,    0, 5226, 5228, 5228, 5228,    0,    0,    0,    0,
        0,    0, 5228,    0,    0, 5228, 5228,    0, 5228, 5228,
     5228, 5228,    0,    0,    0, 5228,    0,    0,    0,    0,
        0,    0,    0, 5228, 5229, 5229, 5229,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 5229,    0, 5229,

        0,    0,    0,    0,    0,    0, 5229,    0,    0,    0,
        0,    0,    0,    0, 5229, 5230, 5230, 5230,    0,    0,
        0, 5230,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 5230,    0,    0,
        0,    0,    0,    0,    0, 5230, 5231, 5231, 5231,    0,
        0,    0, 5231,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5231,    0,
        0,    0,    0,    0,    0,    0, 5231, 5232, 5232, 5232,
        0,    0,    0,    0,    0,    0, 5232,    0,    0, 5232,
        0,    0, 5232,    0, 5232, 5232,    0,    0,    0, 5232,

        0,    0,    0,    0,    0,    0,    0, 5232, 5233, 5233,
     5233, 5233, 5233, 5233, 5233, 5233, 5233, 5233, 5233, 5233,
     5233,    0, 5233, 5233, 5233, 5233, 5233, 5233, 5233, 5233,
     5233, 5233, 5233, 5233, 5233, 5233,    0, 5233, 5233, 5233,
     5234, 5234, 5234,    0,    0,    0, 5234,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 5234,    0,    0,    0,    0,    0,    0,    0,
     5234, 5235, 5235, 5235,    0,    0,    0,    0,    0,    0,
     5235,    0,    0,    0,    0,    0, 5235,    0,    0,    0,
        0,    0,    0, 5235,    0,    0,    0,    0,    0,    0,

        0, 5235, 5237, 5237, 5237,    0,    0,    0,    0,    0,
        0, 5237,    0,    0,    0,    0,    0, 5237, 5237,    0,
        0,    0,    0,    0, 5237,    0,    0,    0,    0,    0,
        0,    0, 5237, 5239,    0,    0,    0, 5239,    0, 5239,
        0,    0, 5239,    0,    0,    0, 5239,    0,    0,    0,
        0,    0,    0,    0, 5239, 5242, 5242,    0, 5242, 5242,
     5242, 5242, 5242, 5242, 5242, 5242, 5242, 5242, 5242, 5242,
     5242, 5242, 5242, 5242, 5242, 5242, 5242, 5242, 5242, 5242,
     5242, 5242, 5242, 5242, 5242, 5242, 5242, 5246, 5246, 5246,
        0,    0,    0, 5246,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 5246,    0,    0,    0, 5246,
        0,    0,    0,    0, 5246,    0,    0, 5246, 5247, 5247,
     5247,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 5247,    0, 5247, 5247,    0,    0,    0,    0,    0,
     5247,    0,    0,    0,    0,    0,    0,    0, 5247, 5248,
     5248, 5248,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 5248,    0, 5248, 5248,    0,    0,    0,    0,
        0, 5248,    0, 5248,    0,    0,    0,    0,    0, 5248,
     5249, 5249, 5249,    0,    0,    0, 5249,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 5249,    0,    0,    0,    0,    0,    0,    0,
     5249, 5253, 5253,    0, 5253, 5253, 5253, 5253, 5253, 5253,
     5253, 5253, 5253, 5253, 5253, 5253, 5253, 5253, 5253, 5253,
     5253, 5253, 5253, 5253, 5253, 5253,    0, 5253, 5253, 5253,
     5253, 5253, 5253, 5254, 5254,    0, 5254, 5254, 5254, 5254,
     5254, 5254, 5254, 5254, 5254, 5254, 5254, 5254, 5254, 5254,
     5254, 5254, 5254, 5254, 5254, 5254, 5254, 5254, 5254, 5254,
     5254, 5254, 5254, 5254, 5254, 5255, 5255, 5255, 5255, 5255,
     5255, 5255, 5255, 5255, 5255, 5255, 5255, 5255, 5255, 5255,
     5255, 5255, 5255, 5255, 5255, 5255, 5255, 5255, 5255, 5255,

     5255, 5255, 5255, 5255, 5255, 5255, 5255, 5256, 5256, 5256,
        0,    0,    0, 5256,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 5256,
        0,    0,    0,    0,    0,    0,    0, 5256, 5257, 5257,
     5257,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5257,    0,    0, 5257,    0,    0,    0,
     5257,    0,    0,    0,    0,    0,    0,    0, 5257, 5259,
     5259, 5259,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5259, 5259,    0, 5259,    0,    0,
        0, 5259,    0,    0,    0,    0,    0,    0,    0, 5259,

     5260, 5260,    0, 5260, 5260, 5260, 5260, 5260, 5260, 5260,
     5260, 5260, 5260, 5260, 5260, 5260, 5260, 5260, 5260, 5260,
     5260, 5260, 5260, 5260, 5260, 5260, 5260, 5260, 5260, 5260,
     5260, 5260, 5261, 5261, 5261,    0,    0,    0, 5261, 5261,
        0,    0,    0, 5261,    0,    0,    0,    0, 5261,    0,
        0,    0,    0,    0, 5261,    0,    0,    0, 5261,    0,
        0,    0, 5261, 5262, 5262, 5262,    0,    0,    0,    0,
        0,    0,    0, 5262, 5262,    0,    0,    0, 5262, 5262,
        0, 5262,    0,    0,    0, 5262,    0,    0,    0,    0,
        0,    0,    0, 5262, 5266, 5266, 5266,    0,    0,    0,

        0,    0,    0, 5266,    0,    0,    0, 5266,    0, 5266,
        0,    0,    0,    0,    0,    0, 5266,    0,    0,    0,
        0,    0,    0,    0, 5266, 5267, 5267,    0, 5267, 5267,
     5267, 5267, 5267, 5267, 5267, 5267, 5267, 5267, 5267, 5267,
     5267, 5267, 5267, 5267,    0, 5267, 5267, 5267, 5267, 5267,
     5267, 5267, 5267, 5267, 5267, 5267, 5267, 5268, 5268, 5268,
        0,    0,    0, 5268,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 5268,
        0,    0,    0,    0,    0,    0,    0, 5268, 5269, 5269,
     5269,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 5269,    0,    0, 5269,    0,    0,    0,
     5269,    0,    0,    0,    0,    0,    0,    0, 5269, 5271,
     5271, 5271,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5271, 5271,    0, 5271,    0,    0,
        0, 5271,    0,    0,    0,    0,    0,    0,    0, 5271,
     5274, 5274,    0,    0, 5274,    0,    0, 5274, 5274,    0,
     5274, 5274, 5274, 5274, 5274,    0, 5274, 5274, 5274,    0,
     5274, 5274,    0, 5274, 5274, 5274, 5274, 5274,    0,    0,
     5274, 5274, 5275, 5275,    0, 5275, 5275, 5275, 5275, 5275,
     5275, 5275, 5275, 5275, 5275, 5275, 5275, 5275, 5275, 5275,

     5275, 5275, 5275, 5275, 5275, 5275, 5275, 5275, 5275, 5275,
     5275, 5275, 5275, 5275, 5276, 5276,    0, 5276, 5276, 5276,
     5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276,
     5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276,    0,
     5276, 5276, 5276, 5276, 5276, 5276, 5277, 5277,    0, 5277,
     5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277,
     5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277,
     5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5278, 5278,
        0, 5278, 5278, 5278, 5278, 5278, 5278, 5278, 5278, 5278,
     5278, 5278, 5278, 5278, 5278, 5278, 5278, 5278, 5278, 5278,

     5278, 5278, 5278, 5278, 5278, 5278, 5278, 5278, 5278, 5278,
     5279, 5279, 5279,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5279,    0, 5279, 5279,    0,    0,    0,
        0,    0, 5279,    0,    0,    0,    0,    0,    0,    0,
     5279, 5280, 5280, 5280,    0,    0,    0, 5280,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5280,    0,    0,    0,    0,    0,    0,
        0, 5280, 5281, 5281, 5281,    0,    0,    0, 5281,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5281,    0,    0,    0,    0,    0,

        0,    0, 5281, 5284, 5284, 5284,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5284, 5284,
        0,    0,    0,    0,    0, 5284,    0,    0,    0,    0,
        0,    0,    0, 5284, 5285, 5285,    0, 5285, 5285,    0,
        0, 5285, 5285,    0, 5285, 5285, 5285, 5285, 5285,    0,
     5285, 5285, 5285,    0, 5285, 5285,    0, 5285, 5285,    0,
     5285, 5285,    0,    0, 5285, 5285, 5286, 5286,    0, 5286,
     5286, 5286, 5286, 5286, 5286, 5286, 5286, 5286, 5286, 5286,
     5286, 5286, 5286, 5286, 5286, 5286, 5286, 5286, 5286, 5286,
     5286,    0, 5286, 5286, 5286, 5286, 5286, 5286, 5287, 5287,

        0, 5287, 5287, 5287, 5287, 5287, 5287, 5287, 5287, 5287,
     5287, 5287, 5287, 5287, 5287, 5287, 5287, 5287, 5287, 5287,
     5287, 5287, 5287, 5287, 5287, 5287, 5287, 5287, 5287, 5287,
     5288, 5288, 5288,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5288,    0,    0,    0,    0,
        0,    0, 5288,    0,    0,    0,    0, 5288,    0,    0,
     5288, 5289, 5289,    0, 5289, 5289, 5289, 5289, 5289, 5289,
     5289, 5289, 5289,    0, 5289, 5289, 5289, 5289, 5289, 5289,
     5289, 5289, 5289, 5289, 5289, 5289, 5289, 5289, 5289, 5289,
     5289, 5289, 5289, 5290, 5290, 5290, 5290, 5290, 5290, 5290,

     5290, 5290, 5290, 5290, 5290, 5290, 5290, 5290, 5290, 5290,
     5290, 5290, 5290, 5290, 5290, 5290, 5290, 5290, 5290, 5290,
     5290, 5290, 5290, 5290, 5290, 5291, 5291,    0, 5291, 5291,
        0, 5291, 5291, 5291, 5291, 5291, 5291, 5291, 5291, 5291,
     5291, 5291, 5291, 5291, 5291, 5291, 5291, 5291, 5291,    0,
     5291,    0, 5291, 5291, 5291, 5291, 5291, 5292, 5292,    0,
     5292, 5292, 5292, 5292, 5292, 5292, 5292, 5292, 5292, 5292,
     5292, 5292, 5292, 5292, 5292, 5292, 5292, 5292, 5292, 5292,
     5292, 5292, 5292, 5292, 5292, 5292, 5292, 5292, 5292, 5294,
        0,    0,    0, 5294, 5294, 5294, 5294, 5294, 5294, 5294,

     5294,    0, 5294,    0,    0, 5294, 5294, 5294, 5294, 5294,
     5294, 5294, 5294, 5294, 5294, 5294, 5294, 5294, 5294, 5294,
     5294, 5295,    0, 5295,    0,    0,    0,    0,    0,    0,
     5295,    0, 5295,    0,    0,    0,    0,    0, 5295, 5297,
     5297, 5297,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 5297,    0, 5297,    0,    0,    0,    0,    0,
        0, 5297,    0,    0,    0,    0,    0,    0,    0, 5297,
     5298, 5298, 5298,    0,    0,    0, 5298,    0,    0,    0,
        0, 5298,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 5298,    0,    0,    0,    0,    0,    0,    0,

     5298, 5299, 5299, 5299,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 5299,    0,    0,    0,
        0,    0,    0, 5299,    0, 5299,    0,    0,    0,    0,
        0, 5299, 5300, 5300, 5300,    0,    0,    0, 5300,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5300,    0,    0,    0,    0,    0,
        0,    0, 5300, 5302, 5302,    0, 5302, 5302, 5302, 5302,
     5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302,
     5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302,
     5302, 5302, 5302, 5302, 5302, 5303,    0,    0,    0, 5303,

        0,    0,    0,    0,    0,    0, 5303,    0,    0,    0,
        0,    0,    0, 5303,    0,    0,    0,    0,    0,    0,
        0, 5303, 5305, 5305,    0, 5305, 5305,    0, 5305, 5305,
     5305, 5305, 5305, 5305, 5305, 5305, 5305, 5305, 5305, 5305,
     5305, 5305, 5305, 5305, 5305, 5305, 5305, 5305, 5305, 5305,
     5305, 5305, 5305, 5305, 5307, 5307, 5307, 5307, 5307, 5307,
     5307, 5307, 5307, 5307, 5307,    0, 5307, 5307, 5307, 5307,
     5307, 5307, 5307, 5307, 5307, 5307, 5307, 5307, 5307, 5307,
     5307, 5307, 5307, 5307, 5307, 5307, 5308, 5308, 5308,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 5308, 5308,    0,    0,    0,    0,    0, 5308,    0,
        0,    0,    0,    0,    0,    0, 5308, 5309, 5309, 5309,
     5309, 5309, 5309, 5309, 5309, 5309, 5309,    0,    0, 5309,
     5309, 5309, 5309, 5309, 5309, 5309, 5309, 5309, 5309, 5309,
     5309, 5309, 5309, 5309, 5309, 5309, 5309, 5309, 5309, 5310,
     5310,    0, 5310,    0,    0,    0, 5310,    0,    0,    0,
        0,    0,    0,    0, 5310, 5311,    0,    0,    0,    0,
        0,    0, 5311,    0,    0,    0, 5311, 5311,    0,    0,
     5311, 5311,    0,    0,    0, 5311,    0, 5311, 5328, 5328,
     5328,    0,    0,    0, 5328,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     5328,    0,    0,    0,    0,    0,    0,    0, 5328, 5331,
     5331, 5331,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5331, 5331,    0,    0,    0,    0,
        0, 5331,    0,    0,    0,    0,    0,    0,    0, 5331,
     5335, 5335,    0, 5335, 5335, 5335, 5335, 5335, 5335, 5335,
     5335, 5335, 5335, 5335, 5335, 5335, 5335, 5335, 5335, 5335,
     5335, 5335, 5335, 5335, 5335,    0, 5335, 5335, 5335, 5335,
     5335, 5335, 5336, 5336,    0, 5336, 5336, 5336, 5336, 5336,
     5336, 5336, 5336, 5336, 5336, 5336, 5336, 5336, 5336, 5336,

     5336, 5336, 5336, 5336, 5336, 5336, 5336, 5336, 5336, 5336,
     5336, 5336, 5336, 5336, 5337,    0, 5337, 5337, 5337, 5337,
     5337, 5337, 5337, 5337, 5337,    0, 5337, 5337, 5337, 5337,
     5337, 5337, 5337, 5337, 5337, 5337, 5337, 5337, 5337,    0,
     5337, 5337, 5337, 5337, 5337, 5337, 5338, 5338, 5338,    0,
        0,    0, 5338,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5338,    0,
        0,    0,    0,    0,    0,    0, 5338, 5339, 5339, 5339,
        0,    0,    0,    0,    0,    0,    0,    0, 5339,    0,
        0,    0, 5339,    0,    0,    0,    0,    0,    0, 5339,

        0,    0,    0,    0,    0,    0,    0, 5339, 5340, 5340,
     5340,    0,    0,    0, 5340, 5340,    0,    0,    0, 5340,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     5340,    0,    0,    0,    0,    0,    0,    0, 5340, 5341,
     5341, 5341,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5341,    0,    0,    0,    0,    0,
        0, 5341, 5341,    0,    0,    0,    0,    0,    0, 5341,
     5342, 5342,    0, 5342, 5342, 5342, 5342, 5342, 5342, 5342,
     5342, 5342, 5342, 5342, 5342, 5342, 5342, 5342, 5342, 5342,
     5342, 5342, 5342, 5342, 5342, 5342, 5342, 5342, 5342, 5342,

     5342, 5342, 5343, 5343, 5343,    0,    0,    0, 5343,    0,
        0,    0,    0, 5343,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5343,    0,    0,    0,    0,    0,
        0,    0, 5343, 5344, 5344, 5344,    0,    0,    0, 5344,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5344,    0,    0,    0,    0,
        0,    0,    0, 5344, 5347, 5347, 5347,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 5347,
     5347,    0,    0,    0,    0,    0, 5347,    0,    0,    0,
        0,    0,    0,    0, 5347, 5348, 5348,    0, 5348, 5348,

     5348, 5348, 5348, 5348, 5348, 5348, 5348, 5348, 5348, 5348,
     5348, 5348, 5348, 5348, 5348, 5348, 5348, 5348, 5348, 5348,
     5348, 5348, 5348, 5348, 5348, 5348, 5348, 5349,    0,    0,
        0, 5349,    0,    0, 5349, 5349,    0,    0,    0, 5349,
     5349, 5349,    0, 5349, 5349, 5349, 5349, 5349, 5349, 5349,
     5349, 5349, 5349, 5349, 5349, 5349, 5349, 5349, 5349, 5350,
     5350,    0, 5350, 5350, 5350, 5350, 5350, 5350, 5350, 5350,
     5350, 5350, 5350, 5350, 5350, 5350, 5350, 5350, 5350, 5350,
     5350, 5350, 5350, 5350,    0, 5350, 5350, 5350, 5350, 5350,
     5350, 5351, 5351,    0, 5351, 5351, 5351, 5351, 5351, 5351,

     5351, 5351, 5351, 5351, 5351, 5351, 5351, 5351, 5351, 5351,
     5351, 5351, 5351, 5351, 5351, 5351, 5351, 5351, 5351, 5351,
     5351, 5351, 5351, 5352,    0, 5352, 5352, 5352, 5352, 5352,
     5352, 5352, 5352, 5352,    0, 5352, 5352, 5352, 5352, 5352,
     5352, 5352, 5352, 5352, 5352, 5352, 5352, 5352,    0, 5352,
     5352, 5352, 5352, 5352, 5352, 5355, 5355,    0, 5355, 5355,
        0, 5355, 5355, 5355,    0,    0,    0, 5355, 5355, 5355,
     5355, 5355, 5355, 5355, 5355, 5355, 5355, 5355, 5355, 5355,
     5355, 5355, 5355, 5355, 5355, 5355, 5355, 5356, 5356,    0,
     5356, 5356, 5356, 5356, 5356, 5356, 5356, 5356, 5356, 5356,

     5356, 5356, 5356, 5356, 5356, 5356, 5356, 5356, 5356, 5356,
     5356, 5356,    0, 5356, 5356, 5356, 5356, 5356, 5356, 5357,
     5357,    0, 5357, 5357, 5357, 5357, 5357, 5357, 5357, 5357,
     5357, 5357, 5357, 5357, 5357, 5357, 5357, 5357, 5357, 5357,
     5357, 5357, 5357, 5357, 5357, 5357, 5357, 5357, 5357, 5357,
     5357, 5358, 5358,    0, 5358, 5358,    0, 5358, 5358, 5358,
        0, 5358, 5358, 5358, 5358, 5358,    0, 5358, 5358, 5358,
     5358, 5358, 5358, 5358, 5358, 5358, 5358, 5358, 5358,    0,
        0, 5358, 5358, 5359, 5359,    0, 5359, 5359, 5359, 5359,
     5359, 5359, 5359, 5359, 5359, 5359, 5359, 5359, 5359, 5359,

     5359, 5359, 5359, 5359, 5359, 5359, 5359, 5359,    0, 5359,
     5359, 5359, 5359, 5359, 5359, 5360, 5360,    0, 5360, 5360,
     5360, 5360, 5360, 5360, 5360, 5360, 5360, 5360, 5360, 5360,
     5360, 5360, 5360, 5360, 5360, 5360, 5360, 5360, 5360, 5360,
     5360, 5360, 5360, 5360, 5360, 5360, 5360, 5361, 5361,    0,
     5361, 5361,    0, 5361, 5361, 5361,    0,    0,    0, 5361,
     5361, 5361,    0, 5361, 5361, 5361, 5361, 5361, 5361, 5361,
     5361, 5361, 5361, 5361, 5361, 5361, 5361, 5361, 5361, 5362,
     5362,    0, 5362, 5362, 5362, 5362, 5362, 5362, 5362, 5362,
     5362, 5362, 5362, 5362, 5362, 5362, 5362, 5362, 5362, 5362,

     5362, 5362, 5362, 5362,    0, 5362, 5362, 5362, 5362, 5362,
     5362, 5363, 5363,    0, 5363, 5363, 5363, 5363, 5363, 5363,
     5363, 5363, 5363, 5363, 5363, 5363, 5363, 5363, 5363, 5363,
     5363, 5363, 5363, 5363, 5363, 5363, 5363, 5363, 5363, 5363,
     5363, 5363, 5363, 5364, 5364,    0, 5364, 5364,    0, 5364,
     5364, 5364,    0, 5364, 5364, 5364,    0, 5364,    0, 5364,
     5364, 5364, 5364, 5364, 5364, 5364, 5364, 5364, 5364, 5364,
     5364,    0,    0, 5364, 5364, 5365, 5365,    0, 5365, 5365,
     5365, 5365, 5365, 5365, 5365, 5365, 5365, 5365, 5365, 5365,
     5365, 5365, 5365, 5365, 5365, 5365, 5365, 5365, 5365, 5365,

        0, 5365, 5365, 5365, 5365, 5365, 5365, 5366, 5366,    0,
     5366, 5366, 5366, 5366, 5366, 5366, 5366, 5366, 5366, 5366,
     5366, 5366, 5366, 5366, 5366, 5366, 5366, 5366, 5366, 5366,
     5366, 5366, 5366, 5366, 5366, 5366, 5366, 5366, 5366, 5368,
     5368,    0, 5368, 5368, 5368, 5368, 5368, 5368, 5368, 5368,
     5368, 5368, 5368, 5368, 5368, 5368, 5368, 5368, 5368, 5368,
     5368, 5368, 5368, 5368,    0, 5368, 5368, 5368, 5368, 5368,
     5368, 5369, 5369,    0, 5369, 5369, 5369, 5369, 5369, 5369,
     5369, 5369, 5369, 5369, 5369, 5369, 5369, 5369, 5369, 5369,
     5369, 5369, 5369, 5369, 5369, 5369, 5369, 5369, 5369, 5369,

     5369, 5369, 5369, 5370, 5370,    0, 5370, 5370,    0, 5370,
     5370, 5370,    0, 5370, 5370, 5370, 5370, 5370, 5370, 5370,
     5370, 5370, 5370, 5370, 5370, 5370, 5370, 5370,    0, 5370,
     5370, 5370, 5370, 5370, 5370, 5371, 5371,    0, 5371, 5371,
        0, 5371, 5371, 5371,    0,    0,    0, 5371, 5371, 5371,
        0, 5371, 5371, 5371, 5371, 5371, 5371, 5371, 5371, 5371,
     5371, 5371, 5371, 5371, 5371, 5371, 5371, 5372, 5372,    0,
     5372, 5372, 5372, 5372, 5372, 5372, 5372, 5372, 5372,    0,
     5372, 5372, 5372, 5372, 5372, 5372, 5372, 5372, 5372,    0,
     5372, 5372,    0, 5372, 5372, 5372, 5372, 5372, 5372, 5373,

     5373,    0, 5373, 5373, 5373, 5373, 5373, 5373, 5373, 5373,
     5373, 5373, 5373, 5373, 5373, 5373, 5373, 5373, 5373, 5373,
     5373,    0, 5373, 5373,    0, 5373, 5373, 5373, 5373, 5373,
     5373, 5382, 5382, 5382, 5382, 5382, 5382, 5382, 5382, 5382,
     5382, 5382,    0, 5382, 5382, 5382, 5382, 5382, 5382, 5382,
     5382, 5382, 5382, 5382, 5382, 5382, 5382, 5382, 5382, 5382,
     5382, 5382, 5382, 5383,    0, 5383, 5383, 5383, 5383, 5383,
     5383, 5383, 5383,    0,    0, 5383, 5383, 5383, 5383, 5383,
     5383, 5383, 5383, 5383, 5383, 5383, 5383, 5383,    0, 5383,
     5383, 5383, 5383, 5383, 5383, 5384, 5384,    0, 5384, 5384,

     5384, 5384, 5384, 5384, 5384, 5384,    0, 5384, 5384, 5384,
     5384, 5384, 5384, 5384, 5384, 5384, 5384, 5384, 5384, 5384,
     5384, 5384, 5384, 5384, 5384, 5384, 5384, 5385,    0, 5385,
     5385, 5385, 5385, 5385, 5385, 5385, 5385,    0,    0, 5385,
     5385, 5385, 5385, 5385, 5385, 5385, 5385, 5385, 5385, 5385,
     5385, 5385,    0, 5385, 5385, 5385, 5385, 5385, 5385, 5386,
     5386, 5386,    0,    0,    0, 5386,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 5386, 5386,    0,    0,    0,    0,    0,    0, 5386,
     5387, 5387, 5387,    0,    0,    0,    0,    0,    0,    0,

     5387,    0, 5387,    0,    0, 5387,    0,    0,    0,    0,
        0,    0, 5387,    0,    0,    0,    0,    0,    0,    0,
     5387, 5388, 5388, 5388, 5388, 5388, 5388, 5388, 5388, 5388,
     5388, 5388, 5388, 5388, 5388, 5388, 5388, 5388, 5388, 5388,
     5388, 5388, 5388, 5388, 5388, 5388, 5388, 5388, 5388, 5388,
     5388, 5388, 5388, 5389, 5389, 5389,    0,    0,    0,    0,
        0,    0,    0, 5389,    0, 5389,    0,    0, 5389,    0,
        0,    0,    0,    0,    0, 5389,    0,    0,    0,    0,
        0,    0,    0, 5389, 5390, 5390, 5390,    0,    0,    0,
     5390,    0,    0, 5390,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 5390,    0,    0,    0,
        0,    0,    0,    0, 5390, 5391, 5391, 5391,    0,    0,
        0, 5391,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 5391,    0,    0,
        0,    0,    0,    0,    0, 5391, 5392, 5392, 5392,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 5392,    0,    0,    0,    0,    0,    0, 5392,    0,
        0,    0,    0,    0,    0,    0, 5392, 5393, 5393, 5393,
        0,    0,    0,    0,    0,    0, 5393,    0,    0,    0,
        0,    0, 5393,    0, 5393,    0,    0,    0,    0, 5393,

        0,    0,    0,    0,    0,    0,    0, 5393, 5394, 5394,
     5394,    0,    0,    0,    0,    0,    0,    0, 5394,    0,
        0,    0,    0, 5394,    0,    0,    0,    0,    0,    0,
     5394,    0,    0,    0,    0,    0,    0,    0, 5394, 5397,
     5397, 5397,    0,    0,    0, 5397,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 5397,    0,    0,    0,    0,    0,    0,    0, 5397,
     5400, 5400, 5400,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5400, 5400,    0,    0,    0,
        0,    0, 5400,    0,    0,    0,    0,    0,    0,    0,

     5400, 5401, 5401, 5401, 5401, 5401, 5401, 5401, 5401, 5401,
     5401, 5401, 5401, 5401, 5401, 5401, 5401, 5401, 5401, 5401,
     5401, 5401, 5401, 5401, 5401, 5401, 5401, 5401, 5401, 5401,
     5401, 5401, 5401, 5402, 5402,    0, 5402, 5402, 5402, 5402,
     5402, 5402, 5402, 5402, 5402,    0, 5402, 5402,    0, 5402,
     5402, 5402, 5402, 5402, 5402,    0, 5402, 5402,    0, 5402,
     5402, 5402, 5402,    0, 5402, 5404, 5404, 5404, 5404, 5404,
     5404, 5404, 5404, 5404, 5404, 5404, 5404, 5404, 5404, 5404,
        0, 5404, 5404, 5404, 5404, 5404, 5404, 5404, 5404, 5404,
     5404, 5404, 5404, 5404, 5404, 5404, 5404, 5405, 5405,    0,

     5405, 5405, 5405, 5405,    0, 5405, 5405, 5405, 5405,    0,
     5405, 5405,    0, 5405, 5405, 5405,    0, 5405, 5405,    0,
     5405, 5405,    0,    0, 5405, 5405, 5405,    0, 5405, 5406,
     5406, 5406,    0,    0,    0, 5406,    0,    0, 5406,    0,
     5406,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 5406,    0,    0,    0,    0,    0,    0,    0, 5406,
     5408, 5408, 5408,    0,    0,    0,    0,    0,    0, 5408,
        0,    0, 5408,    0,    0, 5408,    0, 5408, 5408,    0,
        0,    0, 5408,    0,    0,    0,    0,    0,    0,    0,
     5408, 5409, 5409, 5409,    0,    0,    0,    0,    0,    0,

     5409,    0,    0, 5409,    0,    0, 5409, 5409, 5409, 5409,
        0,    0,    0, 5409,    0,    0,    0,    0,    0,    0,
        0, 5409, 5410, 5410, 5410,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5410,    0, 5410,    0,    0,
        0,    0,    0,    0, 5410,    0,    0,    0,    0,    0,
        0,    0, 5410, 5411, 5411, 5411,    0,    0,    0, 5411,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5411,    0,    0,    0,    0,
        0,    0,    0, 5411, 5413, 5413, 5413, 5413,    0,    0,
     5413,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     5413,    0,    0,    0,    0,    0, 5413,    0,    0,    0,
        0,    0,    0, 5413, 5413, 5414, 5414, 5414,    0,    0,
        0,    0,    0,    0, 5414,    0,    0, 5414,    0,    0,
     5414,    0, 5414, 5414,    0,    0,    0, 5414,    0,    0,
        0,    0,    0,    0,    0, 5414, 5415, 5415, 5415,    0,
        0,    0,    0,    0,    0, 5415,    0,    0,    0,    0,
        0, 5415,    0,    0,    0,    0,    0,    0, 5415,    0,
        0,    0,    0,    0,    0,    0, 5415, 5416, 5416, 5416,
        0,    0,    0,    0,    0,    0, 5416,    0,    0,    0,
        0,    0, 5416, 5416,    0,    0,    0,    0,    0, 5416,

        0,    0,    0,    0,    0,    0,    0, 5416, 5417, 5417,
     5417, 5417, 5417, 5417, 5417, 5417, 5417, 5417, 5417, 5417,
        0, 5417, 5417,    0, 5417, 5417, 5417, 5417, 5417, 5417,
     5417, 5417, 5417, 5417, 5417, 5417, 5417, 5417, 5417, 5417,
     5418, 5418, 5418, 5418, 5418, 5418, 5418, 5418, 5418, 5418,
     5418, 5418, 5418, 5418, 5418,    0, 5418, 5418, 5418, 5418,
     5418, 5418, 5418, 5418, 5418, 5418, 5418, 5418, 5418, 5418,
     5418, 5418, 5419, 5419, 5419, 5419,    0,    0, 5419,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5419,    0,
        0,    0,    0,    0, 5419,    0,    0,    0,    0,    0,

        0, 5419, 5419, 5420, 5420, 5420,    0,    0,    0,    0,
        0,    0, 5420,    0,    0,    0,    0,    0, 5420, 5420,
        0,    0,    0,    0,    0, 5420,    0,    0,    0,    0,
        0,    0,    0, 5420, 5424,    0,    0,    0, 5424,    0,
     5424,    0,    0, 5424,    0,    0,    0, 5424,    0,    0,
        0,    0,    0,    0,    0, 5424, 5425, 5425, 5425, 5425,
        0,    0, 5425,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 5425,    0,    0,    0,    0,    0, 5425,    0,
        0,    0,    0,    0,    0, 5425, 5425, 5426, 5426, 5426,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     5426,    0, 5426, 5426,    0,    0,    0,    0,    0, 5426,
        0,    0,    0,    0,    0,    0,    0, 5426, 5427, 5427,
     5427,    0,    0,    0, 5427,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     5427,    0,    0,    0,    0,    0,    0,    0, 5427, 5428,
     5428, 5428,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5428, 5428,    0,    0,    0,    0,
        0, 5428,    0,    0,    0,    0,    0,    0,    0, 5428,
     5432, 5432,    0, 5432, 5432, 5432, 5432, 5432, 5432, 5432,
     5432, 5432, 5432, 5432, 5432, 5432, 5432, 5432, 5432, 5432,

     5432, 5432, 5432, 5432, 5432,    0, 5432, 5432, 5432, 5432,
     5432, 5432, 5433, 5433, 5433, 5433,    0,    0, 5433,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5433,    0,
        0,    0,    0,    0, 5433,    0,    0,    0,    0,    0,
        0, 5433, 5433, 5434, 5434, 5434,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5434,    0,
        0, 5434,    0,    0,    0, 5434,    0,    0,    0,    0,
        0,    0,    0, 5434, 5435, 5435,    0, 5435, 5435, 5435,
     5435, 5435, 5435, 5435, 5435, 5435, 5435, 5435, 5435, 5435,
     5435, 5435, 5435, 5435, 5435, 5435, 5435, 5435, 5435, 5435,

     5435, 5435, 5435, 5435, 5435, 5435, 5436, 5436, 5436,    0,
        0,    0, 5436, 5436,    0,    0,    0, 5436,    0,    0,
        0,    0, 5436,    0,    0,    0,    0,    0, 5436,    0,
        0,    0, 5436,    0,    0,    0, 5436, 5437, 5437, 5437,
        0,    0,    0, 5437,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5437,    0,    0,    0,    0,    0, 5437,
        0,    0,    0,    0,    0,    0,    0, 5437, 5438, 5438,
     5438,    0,    0,    0, 5438,    0,    0,    0, 5438,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     5438,    0,    0,    0,    0,    0,    0,    0, 5438, 5439,

     5439, 5439,    0,    0,    0,    0,    0,    0,    0, 5439,
     5439,    0,    0,    0, 5439, 5439,    0, 5439,    0,    0,
        0, 5439,    0,    0,    0,    0,    0,    0,    0, 5439,
     5440,    0,    0,    0,    0,    0,    0, 5440,    0,    0,
        0, 5440, 5440,    0,    0, 5440, 5440,    0,    0,    0,
     5440,    0, 5440, 5441, 5441, 5441, 5441, 5441, 5441, 5441,
     5441, 5441, 5441, 5441, 5441,    0, 5441, 5441,    0, 5441,
     5441, 5441, 5441, 5441, 5441, 5441, 5441, 5441, 5441, 5441,
     5441, 5441, 5441, 5441, 5441, 5442, 5442, 5442, 5442, 5442,
     5442, 5442, 5442, 5442, 5442, 5442, 5442, 5442, 5442, 5442,

        0, 5442, 5442, 5442, 5442, 5442, 5442, 5442, 5442, 5442,
     5442, 5442, 5442, 5442, 5442, 5442, 5442, 5445, 5445, 5445,
        0,    0,    0,    0,    0,    0, 5445,    0,    0,    0,
     5445,    0, 5445,    0,    0,    0,    0,    0,    0, 5445,
        0,    0,    0,    0,    0,    0,    0, 5445, 5446, 5446,
     5446,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5446, 5446,    0, 5446,    0,    0,    0,
     5446,    0,    0,    0,    0,    0,    0,    0, 5446, 5447,
     5447, 5447,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5447,    0,    0, 5447,    0,    0,

        0, 5447,    0,    0,    0,    0,    0,    0,    0, 5447,
     5448, 5448, 5448, 5448,    0,    0, 5448,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 5448,    0,    0,    0,
        0,    0, 5448,    0,    0,    0,    0,    0,    0, 5448,
     5448, 5450, 5450, 5450, 5450, 5450, 5450, 5450, 5450, 5450,
     5450, 5450, 5450, 5450, 5450, 5450, 5450, 5450, 5450, 5450,
     5450, 5450, 5450, 5450, 5450, 5450, 5450, 5450, 5450, 5450,
     5450, 5450, 5450, 5451, 5451, 5451, 5451, 5451,    0, 5451,
     5451, 5451,    0, 5451, 5451, 5451, 5451, 5451,    0, 5451,
     5451, 5451,    0, 5451, 5451,    0, 5451, 5451, 5451, 5451,

     5451,    0,    0, 5451, 5451, 5452, 5452,    0, 5452, 5452,
     5452, 5452, 5452, 5452, 5452, 5452, 5452, 5452, 5452, 5452,
     5452, 5452, 5452, 5452, 5452, 5452, 5452, 5452, 5452, 5452,
     5452, 5452, 5452, 5452, 5452, 5452, 5452, 5453, 5453,    0,
     5453, 5453, 5453, 5453, 5453, 5453, 5453, 5453, 5453, 5453,
     5453, 5453, 5453, 5453, 5453, 5453, 5453, 5453, 5453, 5453,
     5453, 5453,    0, 5453, 5453, 5453, 5453, 5453, 5453, 5454,
     5454,    0, 5454, 5454, 5454, 5454, 5454, 5454, 5454, 5454,
     5454, 5454, 5454, 5454, 5454, 5454, 5454, 5454, 5454, 5454,
     5454, 5454, 5454, 5454, 5454, 5454, 5454, 5454, 5454, 5454,

     5454, 5455, 5455, 5455,    0,    0,    0, 5455,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5455,    0,    0,    0,    0,    0,    0,
        0, 5455, 5456, 5456, 5456,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5456,    0, 5456, 5456,    0,
        0,    0,    0,    0, 5456,    0,    0,    0,    0,    0,
        0,    0, 5456, 5458, 5458, 5458, 5458,    0,    0, 5458,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 5458,
        0,    0,    0,    0,    0, 5458,    0,    0,    0,    0,
        0,    0, 5458, 5458, 5459, 5459,    0, 5459, 5459, 5459,

     5459, 5459, 5459, 5459, 5459, 5459, 5459, 5459, 5459, 5459,
     5459, 5459, 5459, 5459, 5459, 5459, 5459, 5459, 5459,    0,
     5459, 5459, 5459, 5459, 5459, 5459, 5461,    0,    0,    0,
     5461, 5461, 5461, 5461, 5461, 5461, 5461, 5461,    0, 5461,
        0,    0, 5461, 5461, 5461, 5461, 5461, 5461, 5461, 5461,
     5461, 5461, 5461, 5461, 5461, 5461, 5461, 5461, 5463,    0,
     5463,    0,    0,    0,    0,    0,    0, 5463,    0, 5463,
        0,    0,    0,    0,    0, 5463, 5464, 5464, 5464,    0,
        0,    0, 5464,    0,    0,    0,    0, 5464,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5464,    0,

        0,    0,    0,    0,    0,    0, 5464, 5465, 5465, 5465,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     5465,    0, 5465,    0,    0,    0,    0,    0,    0, 5465,
        0,    0,    0,    0,    0,    0,    0, 5465, 5466, 5466,
     5466,    0,    0,    0, 5466,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     5466,    0,    0,    0,    0,    0,    0,    0, 5466, 5468,
        0,    0,    0,    0,    0,    0, 5468,    0,    0,    0,
     5468, 5468,    0,    0, 5468, 5468,    0,    0,    0, 5468,
        0, 5468, 5469, 5469,    0, 5469,    0,    0,    0, 5469,

        0,    0,    0,    0,    0,    0,    0, 5469, 5471, 5471,
     5471, 5471,    0,    0, 5471,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5471,    0,    0,    0,    0,    0,
     5471,    0,    0,    0,    0,    0,    0, 5471, 5471, 5472,
     5472,    0, 5472, 5472, 5472, 5472, 5472, 5472, 5472, 5472,
     5472, 5472, 5472, 5472, 5472, 5472, 5472, 5472, 5472, 5472,
     5472, 5472, 5472, 5472,    0, 5472, 5472, 5472, 5472, 5472,
     5472, 5473,    0, 5473, 5473, 5473, 5473, 5473, 5473, 5473,
     5473, 5473,    0, 5473, 5473, 5473, 5473, 5473, 5473, 5473,
     5473, 5473, 5473, 5473, 5473, 5473,    0, 5473, 5473, 5473,

     5473, 5473, 5473, 5474, 5474,    0, 5474, 5474, 5474, 5474,
     5474, 5474, 5474, 5474, 5474, 5474, 5474, 5474, 5474, 5474,
     5474, 5474, 5474, 5474, 5474, 5474, 5474, 5474, 5474, 5474,
     5474, 5474, 5474, 5474, 5474, 5475, 5475, 5475,    0,    0,
        0, 5475,    0,    0,    0,    0, 5475,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 5475,    0,    0,
        0,    0,    0,    0,    0, 5475, 5476, 5476, 5476,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 5476, 5476,    0,    0,    0,    0,    0, 5476,    0,
        0,    0,    0,    0,    0,    0, 5476, 5478, 5478, 5478,

     5478,    0,    0, 5478,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5478,    0,    0,    0,    0,    0, 5478,
        0,    0,    0,    0,    0,    0, 5478, 5478, 5479, 5479,
        0, 5479, 5479, 5479, 5479, 5479, 5479, 5479, 5479, 5479,
     5479, 5479, 5479, 5479, 5479, 5479, 5479, 5479, 5479, 5479,
     5479, 5479, 5479,    0, 5479, 5479, 5479, 5479, 5479, 5479,
     5480,    0, 5480, 5480, 5480, 5480, 5480, 5480, 5480, 5480,
     5480,    0, 5480, 5480, 5480, 5480, 5480, 5480, 5480, 5480,
     5480, 5480, 5480, 5480, 5480,    0, 5480, 5480, 5480, 5480,
     5480, 5480, 5482, 5482,    0, 5482, 5482, 5482, 5482, 5482,

     5482, 5482, 5482, 5482, 5482, 5482, 5482, 5482, 5482, 5482,
     5482, 5482, 5482, 5482, 5482, 5482, 5482,    0, 5482, 5482,
     5482, 5482, 5482, 5482, 5483, 5483,    0, 5483, 5483, 5483,
     5483, 5483, 5483, 5483, 5483, 5483, 5483, 5483, 5483, 5483,
     5483, 5483, 5483, 5483, 5483, 5483, 5483, 5483, 5483,    0,
     5483, 5483, 5483, 5483, 5483, 5483, 5484, 5484,    0, 5484,
     5484, 5484, 5484, 5484, 5484, 5484, 5484, 5484, 5484, 5484,
     5484, 5484, 5484, 5484, 5484, 5484, 5484, 5484, 5484, 5484,
     5484,    0, 5484, 5484, 5484, 5484, 5484, 5484, 5485, 5485,
        0, 5485, 5485, 5485, 5485, 5485, 5485, 5485, 5485, 5485,

     5485, 5485, 5485, 5485, 5485, 5485, 5485, 5485, 5485, 5485,
     5485, 5485, 5485,    0, 5485, 5485, 5485, 5485, 5485, 5485,
     5486, 5486,    0, 5486, 5486,    0, 5486, 5486, 5486,    0,
     5486, 5486, 5486,    0, 5486,    0, 5486, 5486, 5486, 5486,
     5486, 5486, 5486, 5486, 5486, 5486, 5486, 5486,    0,    0,
     5486, 5486, 5487, 5487,    0, 5487, 5487, 5487, 5487, 5487,
     5487, 5487, 5487, 5487, 5487, 5487, 5487, 5487, 5487, 5487,
     5487, 5487, 5487, 5487, 5487, 5487, 5487,    0, 5487, 5487,
     5487, 5487, 5487, 5487, 5488, 5488, 5488, 5488, 5488, 5488,
     5488, 5488, 5488, 5488, 5488, 5488, 5488, 5488, 5488, 5488,

        0, 5488, 5488, 5488, 5488, 5488, 5488,    0, 5488, 5488,
     5488, 5488, 5488, 5488, 5488, 5488, 5491,    0, 5491, 5491,
     5491, 5491, 5491, 5491, 5491, 5491,    0,    0, 5491, 5491,
     5491, 5491, 5491, 5491, 5491, 5491, 5491, 5491, 5491, 5491,
     5491,    0, 5491, 5491, 5491, 5491, 5491, 5491, 5492,    0,
     5492, 5492, 5492, 5492, 5492, 5492, 5492, 5492,    0,    0,
     5492, 5492, 5492, 5492, 5492, 5492, 5492, 5492, 5492, 5492,
     5492, 5492, 5492,    0, 5492, 5492, 5492, 5492, 5492, 5492,
     5493, 5493, 5493,    0,    0,    0,    0,    0,    0,    0,
     5493,    0, 5493,    0,    0, 5493,    0,    0,    0,    0,

        0,    0, 5493,    0,    0,    0,    0,    0,    0,    0,
     5493, 5494, 5494, 5494,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 5494,    0,    0,    0,
        0,    0,    0, 5494,    0,    0,    0,    0,    0,    0,
        0, 5494, 5495, 5495, 5495,    0,    0,    0,    0,    0,
        0,    0, 5495,    0,    0,    0,    0, 5495,    0,    0,
        0,    0,    0,    0, 5495,    0,    0,    0,    0,    0,
        0,    0, 5495, 5498, 5498, 5498, 5498,    0,    0, 5498,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 5498,
        0,    0,    0,    0,    0, 5498,    0,    0,    0,    0,

        0,    0, 5498, 5498, 5499, 5499, 5499, 5499, 5499, 5499,
     5499, 5499, 5499, 5499, 5499, 5499, 5499, 5499, 5499, 5499,
     5499, 5499, 5499, 5499, 5499, 5499, 5499, 5499, 5499, 5499,
     5499, 5499, 5499, 5499, 5499, 5499, 5500, 5500,    0, 5500,
     5500, 5500, 5500, 5500, 5500, 5500, 5500, 5500,    0, 5500,
     5500,    0, 5500, 5500, 5500, 5500, 5500, 5500,    0, 5500,
     5500,    0, 5500, 5500, 5500, 5500,    0, 5500, 5502, 5502,
     5502, 5502, 5502, 5502, 5502, 5502, 5502, 5502, 5502, 5502,
     5502, 5502, 5502, 5502, 5502, 5502, 5502, 5502, 5502, 5502,
     5502, 5502, 5502, 5502, 5502, 5502, 5502, 5502, 5502, 5502,

     5503, 5503, 5503, 5503, 5503, 5503, 5503, 5503, 5503, 5503,
     5503, 5503, 5503, 5503, 5503,    0, 5503, 5503, 5503, 5503,
     5503, 5503, 5503, 5503, 5503, 5503, 5503, 5503, 5503, 5503,
     5503, 5503, 5504, 5504, 5504, 5504, 5504, 5504, 5504, 5504,
     5504, 5504, 5504, 5504, 5504, 5504, 5504,    0,    0, 5504,
     5504, 5504, 5504, 5504, 5504,    0, 5504, 5504, 5504, 5504,
     5504, 5504, 5504, 5504, 5505, 5505,    0, 5505, 5505, 5505,
     5505,    0, 5505, 5505, 5505, 5505,    0, 5505, 5505,    0,
     5505, 5505, 5505,    0, 5505, 5505,    0, 5505, 5505,    0,
        0, 5505, 5505, 5505,    0, 5505, 5507, 5507, 5507,    0,

        0,    0,    0,    0,    0, 5507,    0,    0, 5507,    0,
        0, 5507, 5507, 5507, 5507,    0,    0,    0, 5507,    0,
        0,    0,    0,    0,    0,    0, 5507, 5509, 5509, 5509,
        0,    0,    0,    0,    0,    0, 5509,    0,    0,    0,
        0,    0, 5509, 5509,    0,    0,    0,    0,    0, 5509,
        0,    0,    0,    0,    0,    0,    0, 5509, 5510, 5510,
     5510,    0,    0,    0,    0,    0,    0, 5510,    0,    0,
        0,    0,    0, 5510, 5510,    0,    0,    0,    0,    0,
     5510,    0,    0,    0,    0,    0,    0,    0, 5510, 5512,
        0,    0,    0, 5512,    0, 5512,    0,    0, 5512,    0,

        0,    0, 5512,    0,    0,    0,    0,    0,    0,    0,
     5512, 5513, 5513, 5513, 5513,    0,    0, 5513,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 5513,    0,    0,
        0,    0,    0, 5513,    0,    0,    0,    0,    0,    0,
     5513, 5513, 5514, 5514, 5514,    0,    0,    0, 5514,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5514,    0,    0,    0,    0,    0,
        0,    0, 5514, 5515, 5515, 5515,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5515, 5515,
        0,    0,    0,    0,    0, 5515,    0,    0,    0,    0,

        0,    0,    0, 5515, 5516, 5516, 5516,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 5516,    0, 5516,
     5516,    0,    0,    0,    0,    0, 5516,    0,    0,    0,
        0,    0,    0,    0, 5516, 5517, 5517, 5517,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     5517, 5517,    0,    0,    0,    0,    0, 5517,    0,    0,
        0,    0,    0,    0,    0, 5517, 5519, 5519, 5519,    0,
        0,    0, 5519,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5519,    0,
        0,    0,    0,    0,    0,    0, 5519, 5520, 5520,    0,

     5520, 5520, 5520, 5520, 5520, 5520, 5520, 5520, 5520, 5520,
     5520, 5520, 5520, 5520, 5520, 5520, 5520, 5520, 5520, 5520,
     5520, 5520,    0, 5520, 5520, 5520, 5520, 5520, 5520, 5521,
     5521, 5521,    0,    0,    0, 5521, 5521,    0,    0,    0,
     5521,    0,    0,    0,    0, 5521,    0,    0,    0,    0,
        0, 5521,    0,    0,    0, 5521,    0,    0,    0, 5521,
     5522, 5522, 5522,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5522, 5522,    0, 5522,    0,
        0,    0, 5522,    0,    0,    0,    0,    0,    0,    0,
     5522, 5523, 5523, 5523,    0,    0,    0, 5523,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5523,    0,    0,    0,    0,    0,    0,
        0, 5523, 5524, 5524, 5524,    0,    0,    0,    0,    0,
        0,    0, 5524,    0,    0,    0,    0, 5524, 5524,    0,
     5524,    0,    0,    0, 5524,    0,    0,    0,    0,    0,
        0,    0, 5524, 5525, 5525, 5525,    0,    0,    0, 5525,
        0,    0,    0, 5525,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5525,    0,    0,    0,    0,
        0,    0,    0, 5525, 5526,    0,    0,    0, 5526,    0,
        0,    0,    0, 5526,    0,    0,    0,    0,    0,    0,

     5526,    0,    0,    0,    0,    0,    0,    0, 5526, 5527,
        0,    0,    0,    0,    0,    0, 5527,    0,    0,    0,
     5527, 5527,    0,    0, 5527, 5527,    0,    0,    0, 5527,
        0, 5527, 5528, 5528, 5528, 5528, 5528, 5528, 5528, 5528,
     5528, 5528, 5528, 5528, 5528, 5528, 5528, 5528, 5528, 5528,
     5528, 5528, 5528, 5528, 5528, 5528, 5528, 5528, 5528, 5528,
     5528, 5528, 5528, 5528, 5529, 5529,    0, 5529, 5529, 5529,
     5529, 5529, 5529, 5529, 5529, 5529, 5529, 5529, 5529, 5529,
     5529, 5529, 5529, 5529, 5529, 5529, 5529, 5529, 5529, 5529,
     5529, 5529, 5529, 5529, 5529, 5529, 5531, 5531, 5531,    0,

        0,    0,    0,    0,    0, 5531,    0,    0,    0, 5531,
        0, 5531,    0,    0,    0,    0,    0,    0, 5531,    0,
        0,    0,    0,    0,    0,    0, 5531, 5532, 5532, 5532,
        0,    0,    0,    0,    0,    0, 5532,    0,    0,    0,
     5532,    0, 5532,    0,    0,    0,    0,    0,    0, 5532,
        0,    0,    0,    0,    0,    0,    0, 5532, 5533, 5533,
     5533,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5533, 5533,    0, 5533,    0,    0,    0,
     5533,    0,    0,    0,    0,    0,    0,    0, 5533, 5535,
     5535, 5535, 5535, 5535, 5535, 5535, 5535, 5535, 5535, 5535,

     5535, 5535, 5535, 5535, 5535, 5535, 5535, 5535, 5535, 5535,
     5535, 5535, 5535, 5535, 5535, 5535, 5535, 5535, 5535, 5535,
     5535, 5536, 5536, 5536, 5536, 5536,    0, 5536, 5536, 5536,
        0, 5536, 5536, 5536, 5536, 5536,    0, 5536, 5536, 5536,
        0, 5536, 5536,    0, 5536, 5536, 5536, 5536, 5536,    0,
        0, 5536, 5536, 5537, 5537,    0, 5537, 5537, 5537, 5537,
     5537, 5537, 5537, 5537, 5537, 5537, 5537, 5537, 5537, 5537,
     5537, 5537, 5537, 5537, 5537, 5537, 5537, 5537, 5537, 5537,
     5537, 5537, 5537, 5537, 5537, 5538, 5538,    0, 5538, 5538,
     5538, 5538, 5538, 5538, 5538, 5538, 5538, 5538, 5538, 5538,

     5538, 5538, 5538, 5538, 5538, 5538, 5538, 5538, 5538, 5538,
        0, 5538, 5538, 5538, 5538, 5538, 5538, 5539, 5539, 5539,
     5539, 5539, 5539, 5539, 5539, 5539, 5539, 5539, 5539, 5539,
     5539, 5539, 5539,    0, 5539, 5539, 5539, 5539, 5539, 5539,
        0, 5539, 5539, 5539, 5539, 5539, 5539, 5539, 5539, 5540,
     5540, 5540,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 5540,    0, 5540, 5540,    0,    0,    0,    0,
        0, 5540,    0,    0,    0,    0,    0,    0,    0, 5540,
     5541, 5541,    0, 5541, 5541, 5541, 5541, 5541, 5541, 5541,
     5541, 5541, 5541, 5541, 5541, 5541, 5541, 5541, 5541, 5541,

     5541, 5541, 5541, 5541, 5541,    0, 5541, 5541, 5541, 5541,
     5541, 5541, 5543,    0,    0,    0, 5543, 5543, 5543, 5543,
     5543, 5543, 5543, 5543,    0, 5543,    0,    0, 5543, 5543,
     5543, 5543, 5543, 5543, 5543, 5543, 5543, 5543, 5543, 5543,
     5543, 5543, 5543, 5543, 5544,    0, 5544,    0,    0,    0,
        0,    0,    0, 5544,    0, 5544,    0,    0,    0,    0,
        0, 5544, 5545, 5545, 5545,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5545,    0, 5545,    0,    0,
        0,    0,    0,    0, 5545,    0,    0,    0,    0,    0,
        0,    0, 5545, 5547, 5547,    0, 5547,    0,    0,    0,

     5547,    0,    0,    0,    0,    0,    0,    0, 5547, 5548,
     5548,    0, 5548, 5548, 5548, 5548, 5548, 5548, 5548, 5548,
     5548, 5548, 5548, 5548, 5548, 5548, 5548, 5548, 5548, 5548,
     5548, 5548, 5548, 5548,    0, 5548, 5548, 5548, 5548, 5548,
     5548, 5549,    0, 5549, 5549, 5549, 5549, 5549, 5549, 5549,
     5549, 5549,    0, 5549, 5549, 5549, 5549, 5549, 5549, 5549,
     5549, 5549, 5549, 5549, 5549, 5549,    0, 5549, 5549, 5549,
     5549, 5549, 5549, 5550, 5550, 5550,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5550, 5550,
        0,    0,    0,    0,    0, 5550,    0,    0,    0,    0,

        0,    0,    0, 5550, 5551, 5551,    0, 5551, 5551, 5551,
     5551, 5551, 5551, 5551, 5551, 5551, 5551, 5551, 5551, 5551,
     5551, 5551, 5551, 5551, 5551, 5551, 5551, 5551, 5551,    0,
     5551, 5551, 5551, 5551, 5551, 5551, 5552,    0, 5552, 5552,
     5552, 5552, 5552, 5552, 5552, 5552, 5552,    0, 5552, 5552,
     5552, 5552, 5552, 5552, 5552, 5552, 5552, 5552, 5552, 5552,
     5552,    0, 5552, 5552, 5552, 5552, 5552, 5552, 5554, 5554,
        0, 5554, 5554, 5554, 5554, 5554, 5554, 5554, 5554, 5554,
     5554, 5554, 5554, 5554, 5554, 5554, 5554, 5554, 5554, 5554,
     5554, 5554, 5554,    0, 5554, 5554, 5554, 5554, 5554, 5554,

     5555, 5555,    0, 5555, 5555, 5555, 5555, 5555, 5555, 5555,
     5555, 5555, 5555, 5555, 5555, 5555, 5555, 5555, 5555, 5555,
     5555, 5555, 5555, 5555, 5555,    0, 5555, 5555, 5555, 5555,
     5555, 5555, 5556, 5556,    0, 5556, 5556, 5556, 5556, 5556,
     5556, 5556, 5556, 5556, 5556, 5556, 5556, 5556, 5556, 5556,
     5556, 5556, 5556, 5556, 5556, 5556, 5556,    0, 5556, 5556,
     5556, 5556, 5556, 5556, 5557, 5557,    0, 5557, 5557, 5557,
     5557, 5557, 5557, 5557, 5557, 5557, 5557, 5557, 5557, 5557,
     5557, 5557, 5557, 5557, 5557, 5557, 5557, 5557, 5557,    0,
     5557, 5557, 5557, 5557, 5557, 5557, 5558, 5558,    0, 5558,

     5558, 5558, 5558, 5558, 5558,    0, 5558, 5558, 5558,    0,
     5558,    0, 5558, 5558, 5558, 5558, 5558, 5558, 5558, 5558,
     5558, 5558, 5558, 5558,    0,    0, 5558, 5558, 5559, 5559,
        0, 5559, 5559, 5559, 5559, 5559, 5559, 5559, 5559, 5559,
     5559, 5559, 5559, 5559, 5559, 5559, 5559, 5559, 5559, 5559,
     5559, 5559, 5559,    0, 5559, 5559, 5559, 5559, 5559, 5559,
     5560, 5560, 5560, 5560, 5560, 5560, 5560, 5560, 5560, 5560,
     5560, 5560, 5560, 5560, 5560, 5560,    0, 5560, 5560, 5560,
     5560, 5560, 5560,    0, 5560, 5560, 5560, 5560, 5560, 5560,
     5560, 5560, 5561,    0, 5561, 5561, 5561, 5561, 5561, 5561,

     5561, 5561,    0,    0, 5561, 5561, 5561, 5561, 5561, 5561,
     5561, 5561, 5561, 5561, 5561, 5561, 5561,    0, 5561, 5561,
     5561, 5561, 5561, 5561, 5562,    0, 5562, 5562, 5562, 5562,
     5562, 5562, 5562, 5562,    0,    0, 5562, 5562, 5562, 5562,
     5562, 5562, 5562, 5562, 5562, 5562, 5562, 5562, 5562,    0,
     5562, 5562, 5562, 5562, 5562, 5562, 5563,    0,    0,    0,
        0,    0, 5563, 5563,    0,    0,    0, 5563,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5563,    0,
        0,    0,    0,    0,    0,    0, 5563, 5564, 5564, 5564,
     5564, 5564, 5564, 5564, 5564, 5564, 5564, 5564, 5564, 5564,

     5564, 5564, 5564, 5564, 5564, 5564, 5564, 5564, 5564, 5564,
     5564, 5564, 5564, 5564, 5564, 5564, 5564, 5564, 5564, 5565,
     5565,    0, 5565, 5565, 5565, 5565, 5565, 5565, 5565, 5565,
     5565,    0, 5565, 5565,    0, 5565, 5565, 5565, 5565, 5565,
     5565,    0, 5565, 5565,    0, 5565, 5565, 5565, 5565,    0,
     5565, 5566, 5566, 5566, 5566, 5566, 5566, 5566, 5566, 5566,
     5566, 5566, 5566, 5566, 5566, 5566, 5566, 5566, 5566, 5566,
     5566, 5566, 5566, 5566, 5566, 5566, 5566, 5566, 5566, 5566,
     5566, 5566, 5566, 5567, 5567, 5567, 5567, 5567, 5567, 5567,
     5567, 5567, 5567, 5567, 5567, 5567, 5567, 5567, 5567,    0,

     5567, 5567, 5567, 5567, 5567, 5567,    0, 5567, 5567, 5567,
     5567, 5567, 5567, 5567, 5567, 5568, 5568,    0, 5568, 5568,
     5568, 5568,    0, 5568, 5568, 5568, 5568,    0, 5568, 5568,
        0, 5568, 5568, 5568,    0, 5568, 5568,    0, 5568, 5568,
        0,    0, 5568, 5568, 5568,    0, 5568, 5569, 5569, 5569,
        0,    0,    0,    0,    0,    0, 5569,    0,    0,    0,
        0,    0, 5569, 5569,    0,    0,    0,    0,    0, 5569,
        0,    0,    0,    0,    0,    0,    0, 5569, 5570,    0,
        0,    0, 5570,    0, 5570,    0,    0, 5570,    0,    0,
        0, 5570,    0,    0,    0,    0,    0,    0,    0, 5570,

     5571, 5571, 5571,    0,    0,    0, 5571,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 5571,    0,    0,    0,    0,    0,    0,    0,
     5571, 5574, 5574, 5574,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 5574, 5574,    0,    0,
        0,    0,    0, 5574,    0,    0,    0,    0,    0,    0,
        0, 5574, 5575, 5575, 5575,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5575,    0, 5575, 5575,    0,
        0,    0,    0,    0, 5575,    0,    0,    0,    0,    0,
        0,    0, 5575, 5576, 5576, 5576,    0,    0,    0, 5576,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 5576,
        0,    0,    0,    0,    0, 5576,    0,    0,    0,    0,
        0,    0,    0, 5576, 5577, 5577, 5577,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 5577,
     5577,    0, 5577,    0,    0,    0, 5577,    0,    0,    0,
        0,    0,    0,    0, 5577, 5578,    0,    0,    0,    0,
        0,    0, 5578,    0,    0,    0, 5578, 5578,    0,    0,
     5578, 5578,    0,    0,    0, 5578,    0, 5578, 5579, 5579,
     5579,    0,    0,    0,    0,    0,    0,    0, 5579,    0,
        0,    0,    0, 5579, 5579,    0, 5579,    0,    0,    0,

     5579,    0,    0,    0,    0,    0,    0,    0, 5579, 5580,
        0,    0,    0, 5580,    0,    0,    0,    0, 5580,    0,
        0,    0,    0,    0,    0, 5580,    0,    0,    0,    0,
        0,    0,    0, 5580, 5581, 5581, 5581, 5581, 5581, 5581,
     5581, 5581, 5581, 5581, 5581, 5581, 5581, 5581, 5581, 5581,
     5581, 5581, 5581, 5581, 5581, 5581, 5581, 5581, 5581, 5581,
     5581, 5581, 5581, 5581, 5581, 5581, 5582, 5582,    0, 5582,
     5582, 5582, 5582, 5582, 5582, 5582, 5582, 5582, 5582, 5582,
     5582, 5582, 5582, 5582, 5582, 5582, 5582, 5582, 5582, 5582,
     5582, 5582, 5582, 5582, 5582, 5582, 5582, 5582, 5583, 5583,

     5583,    0,    0,    0,    0,    0,    0, 5583,    0,    0,
        0, 5583,    0, 5583,    0,    0,    0,    0,    0,    0,
     5583,    0,    0,    0,    0,    0,    0,    0, 5583, 5584,
     5584, 5584,    0,    0,    0,    0,    0,    0, 5584,    0,
        0,    0, 5584,    0, 5584,    0,    0,    0,    0,    0,
        0, 5584,    0,    0,    0,    0,    0,    0,    0, 5584,
     5585, 5585, 5585,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5585, 5585,    0, 5585,    0,
        0,    0, 5585,    0,    0,    0,    0,    0,    0,    0,
     5585, 5587, 5587, 5587, 5587, 5587,    0, 5587, 5587, 5587,

        0, 5587, 5587, 5587, 5587, 5587,    0, 5587, 5587, 5587,
        0, 5587, 5587,    0, 5587, 5587, 5587, 5587, 5587,    0,
        0, 5587, 5587, 5588, 5588,    0, 5588, 5588, 5588, 5588,
     5588, 5588, 5588, 5588, 5588, 5588, 5588, 5588, 5588, 5588,
     5588, 5588, 5588, 5588, 5588, 5588, 5588, 5588, 5588, 5588,
     5588, 5588, 5588, 5588, 5588, 5589, 5589, 5589,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5589,    0,
     5589, 5589,    0,    0,    0,    0,    0, 5589,    0,    0,
        0,    0,    0,    0,    0, 5589, 5590, 5590, 5590,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 5590,    0,    0,    0,    0,    0,    0, 5590,    0,
        0,    0,    0,    0,    0,    0, 5590, 5591,    0,    0,
        0, 5591, 5591, 5591, 5591, 5591, 5591, 5591, 5591,    0,
     5591,    0,    0, 5591, 5591, 5591, 5591, 5591, 5591, 5591,
     5591, 5591, 5591, 5591, 5591, 5591, 5591, 5591, 5591, 5592,
     5592,    0, 5592,    0,    0,    0, 5592,    0,    0,    0,
        0,    0,    0,    0, 5592, 5593,    0, 5593, 5593, 5593,
     5593, 5593, 5593, 5593, 5593, 5593,    0, 5593, 5593, 5593,
     5593, 5593, 5593, 5593, 5593, 5593, 5593, 5593, 5593, 5593,
        0, 5593, 5593, 5593, 5593, 5593, 5593, 5594, 5594, 5594,

        0,    0,    0, 5594,    0,    0,    0,    0, 5594,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 5594,
        0,    0,    0,    0,    0,    0,    0, 5594, 5595,    0,
     5595, 5595, 5595, 5595, 5595, 5595, 5595, 5595, 5595,    0,
     5595, 5595, 5595, 5595, 5595, 5595, 5595, 5595, 5595, 5595,
     5595, 5595, 5595,    0, 5595, 5595, 5595, 5595, 5595, 5595,
     5596, 5596,    0, 5596, 5596,    0, 5596, 5596, 5596, 5596,
     5596, 5596, 5596, 5596, 5596, 5596, 5596, 5596, 5596, 5596,
     5596, 5596, 5596, 5596, 5596, 5596, 5596, 5596, 5596, 5596,
     5596, 5596, 5597,    0, 5597, 5597, 5597, 5597, 5597, 5597,

     5597, 5597,    0,    0, 5597, 5597, 5597, 5597, 5597, 5597,
     5597, 5597, 5597, 5597, 5597, 5597, 5597,    0, 5597, 5597,
     5597, 5597, 5597, 5597, 5598,    0, 5598, 5598, 5598, 5598,
     5598, 5598, 5598, 5598,    0,    0, 5598, 5598, 5598, 5598,
     5598, 5598, 5598, 5598, 5598, 5598, 5598, 5598, 5598,    0,
     5598, 5598, 5598, 5598, 5598, 5598, 5599, 5599, 5599, 5599,
     5599, 5599, 5599, 5599, 5599, 5599, 5599, 5599, 5599, 5599,
     5599, 5599, 5599, 5599, 5599, 5599, 5599, 5599, 5599, 5599,
     5599, 5599, 5599, 5599, 5599, 5599, 5599, 5599, 5600, 5600,
        0, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600,

        0, 5600, 5600,    0, 5600, 5600, 5600, 5600, 5600, 5600,
        0, 5600, 5600,    0, 5600, 5600, 5600, 5600,    0, 5600,
     5601, 5601, 5601,    0,    0,    0,    0,    0,    0, 5601,
        0,    0,    0,    0,    0, 5601, 5601,    0,    0,    0,
        0,    0, 5601,    0,    0,    0,    0,    0,    0,    0,
     5601, 5603, 5603, 5603, 5603,    0,    0, 5603,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 5603,    0,    0,
        0,    0,    0, 5603,    0,    0,    0,    0,    0,    0,
     5603, 5603, 5604, 5604, 5604,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5604,    0, 5604, 5604,    0,

        0,    0,    0,    0, 5604,    0,    0,    0,    0,    0,
        0,    0, 5604, 5605, 5605, 5605,    0,    0,    0, 5605,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5605,    0,    0,    0,    0,
        0,    0,    0, 5605, 5606,    0,    0,    0,    0,    0,
        0, 5606,    0,    0,    0, 5606, 5606,    0,    0, 5606,
     5606,    0,    0,    0, 5606,    0, 5606, 5607, 5607, 5607,
        0,    0,    0,    0,    0,    0, 5607,    0,    0,    0,
     5607,    0, 5607,    0,    0,    0,    0,    0,    0, 5607,
        0,    0,    0,    0,    0,    0,    0, 5607, 5608, 5608,

     5608,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5608, 5608,    0, 5608,    0,    0,    0,
     5608,    0,    0,    0,    0,    0,    0,    0, 5608, 5610,
     5610, 5610, 5610, 5610,    0, 5610, 5610, 5610,    0, 5610,
     5610, 5610, 5610, 5610,    0, 5610, 5610, 5610,    0, 5610,
     5610,    0, 5610, 5610, 5610, 5610, 5610,    0,    0, 5610,
     5610, 5611, 5611, 5611,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5611,    0, 5611, 5611,    0,    0,
        0,    0,    0, 5611,    0,    0,    0,    0,    0,    0,
        0, 5611, 5613,    0,    0,    0, 5613, 5613, 5613, 5613,

     5613, 5613, 5613, 5613,    0, 5613,    0,    0, 5613, 5613,
     5613, 5613, 5613, 5613, 5613, 5613, 5613, 5613, 5613, 5613,
     5613, 5613, 5613, 5613, 5614, 5614,    0, 5614,    0,    0,
        0, 5614,    0,    0,    0,    0,    0,    0,    0, 5614,
     5616,    0, 5616, 5616, 5616, 5616, 5616, 5616, 5616, 5616,
     5616,    0, 5616, 5616, 5616, 5616, 5616, 5616, 5616, 5616,
     5616, 5616, 5616, 5616, 5616,    0, 5616, 5616, 5616, 5616,
     5616, 5616, 5617,    0, 5617, 5617, 5617, 5617, 5617, 5617,
     5617, 5617, 5617,    0, 5617, 5617, 5617, 5617, 5617, 5617,
     5617, 5617, 5617, 5617, 5617, 5617, 5617,    0, 5617, 5617,

     5617, 5617, 5617, 5617, 5618, 5618,    0, 5618, 5618, 5618,
     5618, 5618, 5618, 5618, 5618, 5618, 5618, 5618, 5618, 5618,
     5618, 5618, 5618, 5618, 5618, 5618, 5618, 5618, 5618, 5618,
     5618, 5618, 5618, 5618, 5618, 5618, 5619,    0, 5619, 5619,
     5619, 5619, 5619, 5619, 5619, 5619,    0,    0, 5619, 5619,
     5619, 5619, 5619, 5619, 5619, 5619, 5619, 5619, 5619, 5619,
     5619,    0, 5619, 5619, 5619, 5619, 5619, 5619, 5620,    0,
     5620, 5620, 5620, 5620, 5620, 5620, 5620, 5620,    0,    0,
     5620, 5620, 5620, 5620, 5620, 5620, 5620, 5620, 5620, 5620,
     5620, 5620, 5620,    0, 5620, 5620, 5620, 5620, 5620, 5620,

     5621, 5621,    0, 5621, 5621, 5621, 5621, 5621, 5621, 5621,
     5621, 5621,    0, 5621, 5621,    0, 5621, 5621, 5621, 5621,
     5621, 5621,    0, 5621, 5621,    0, 5621, 5621, 5621, 5621,
        0, 5621, 5622, 5622, 5622,    0,    0,    0,    0,    0,
        0, 5622,    0,    0,    0,    0,    0, 5622, 5622,    0,
        0,    0,    0,    0, 5622,    0,    0,    0,    0,    0,
        0,    0, 5622, 5626,    0, 5626, 5626, 5626, 5626, 5626,
     5626, 5626, 5626, 5626,    0, 5626, 5626, 5626, 5626, 5626,
     5626, 5626, 5626, 5626, 5626, 5626, 5626, 5626,    0, 5626,
     5626, 5626, 5626, 5626, 5626, 5627,    0, 5627, 5627, 5627,

     5627, 5627, 5627, 5627, 5627, 5627,    0, 5627, 5627, 5627,
     5627, 5627, 5627, 5627, 5627, 5627, 5627, 5627, 5627, 5627,
        0, 5627, 5627, 5627, 5627, 5627, 5627, 5628,    0, 5628,
     5628, 5628, 5628, 5628, 5628, 5628, 5628,    0,    0, 5628,
     5628, 5628, 5628, 5628, 5628, 5628, 5628, 5628, 5628, 5628,
     5628, 5628,    0, 5628, 5628, 5628, 5628, 5628, 5628, 5629,
        0, 5629, 5629, 5629, 5629, 5629, 5629, 5629, 5629,    0,
        0, 5629, 5629, 5629, 5629, 5629, 5629, 5629, 5629, 5629,
     5629, 5629, 5629, 5629,    0, 5629, 5629, 5629, 5629, 5629,
     5629, 5630, 5630, 5630, 5630, 5630, 5630, 5630, 5630, 5630,

     5630, 5630, 5630, 5630, 5630, 5630, 5630,    0, 5630, 5630,
     5630, 5630, 5630, 5630,    0, 5630, 5630, 5630, 5630, 5630,
     5630, 5630, 5630, 5633,    0, 5633, 5633, 5633, 5633, 5633,
     5633, 5633, 5633, 5633,    0, 5633, 5633, 5633, 5633, 5633,
     5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633,    0, 5633,
     5633, 5633, 5633, 5633, 5633, 5634,    0, 5634, 5634, 5634,
     5634, 5634, 5634, 5634, 5634, 5634,    0, 5634, 5634, 5634,
     5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634,
        0, 5634, 5634, 5634, 5634, 5634, 5634, 5635,    0, 5635,
     5635, 5635, 5635, 5635, 5635, 5635, 5635,    0,    0, 5635,

     5635, 5635, 5635, 5635, 5635, 5635, 5635, 5635, 5635, 5635,
     5635, 5635,    0, 5635, 5635, 5635, 5635, 5635, 5635, 5636,
        0, 5636, 5636, 5636, 5636, 5636, 5636, 5636, 5636,    0,
        0, 5636, 5636, 5636, 5636, 5636, 5636, 5636, 5636, 5636,
     5636, 5636, 5636, 5636,    0, 5636, 5636, 5636, 5636, 5636,
     5636, 5637,    0, 5637, 5637, 5637, 5637, 5637, 5637, 5637,
     5637, 5637,    0, 5637, 5637, 5637, 5637, 5637, 5637, 5637,
     5637, 5637, 5637, 5637, 5637, 5637,    0, 5637, 5637, 5637,
     5637, 5637, 5637, 5638,    0, 5638, 5638, 5638, 5638, 5638,
     5638, 5638, 5638, 5638,    0, 5638, 5638, 5638, 5638, 5638,

     5638, 5638, 5638, 5638, 5638, 5638, 5638, 5638,    0, 5638,
     5638, 5638, 5638, 5638, 5638, 5639,    0, 5639, 5639, 5639,
     5639, 5639, 5639, 5639, 5639,    0,    0, 5639, 5639, 5639,
     5639, 5639, 5639, 5639, 5639, 5639, 5639, 5639, 5639, 5639,
        0, 5639, 5639, 5639, 5639, 5639, 5639, 5640,    0, 5640,
     5640, 5640, 5640, 5640, 5640, 5640, 5640,    0,    0, 5640,
     5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640, 5640,
     5640, 5640,    0, 5640, 5640, 5640, 5640, 5640, 5640, 5641,
     5641, 5641, 5641, 5641, 5641, 5641, 5641, 5641, 5641, 5641,
     5641, 5641, 5641, 5641, 5641,    0, 5641, 5641, 5641, 5641,

     5641, 5641,    0, 5641, 5641, 5641, 5641, 5641, 5641, 5641,
     5641, 5642,    0, 5642, 5642, 5642, 5642, 5642, 5642, 5642,
     5642, 5642,    0, 5642, 5642, 5642, 5642, 5642, 5642, 5642,
     5642, 5642, 5642, 5642, 5642, 5642,    0, 5642, 5642, 5642,
     5642, 5642, 5642, 5643,    0, 5643, 5643, 5643, 5643, 5643,
     5643, 5643, 5643, 5643,    0, 5643, 5643, 5643, 5643, 5643,
     5643, 5643, 5643, 5643, 5643, 5643, 5643, 5643,    0, 5643,
     5643, 5643, 5643, 5643, 5643, 5644,    0, 5644, 5644, 5644,
     5644, 5644, 5644, 5644, 5644,    0,    0, 5644, 5644, 5644,
     5644, 5644, 5644, 5644, 5644, 5644, 5644, 5644, 5644, 5644,

        0, 5644, 5644, 5644, 5644, 5644, 5644, 5645,    0, 5645,
     5645, 5645, 5645, 5645, 5645, 5645, 5645,    0,    0, 5645,
     5645, 5645, 5645, 5645, 5645, 5645, 5645, 5645, 5645, 5645,
     5645, 5645,    0, 5645, 5645, 5645, 5645, 5645, 5645, 5647,
     5647, 5647,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5647,    0,    0,    0, 5647,    0,
        0, 5647,    0,    0,    0,    0,    0,    0,    0, 5647,
     5650,    0, 5650, 5650, 5650, 5650, 5650, 5650, 5650, 5650,
     5650,    0, 5650, 5650, 5650, 5650, 5650, 5650, 5650, 5650,
     5650, 5650, 5650, 5650, 5650,    0, 5650, 5650, 5650, 5650,

     5650, 5650, 5651, 5651, 5651, 5651,    0,    0, 5651,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5651,    0,
        0,    0,    0,    0, 5651,    0,    0,    0,    0,    0,
        0, 5651, 5651, 5652,    0, 5652, 5652, 5652, 5652, 5652,
     5652, 5652, 5652, 5652,    0, 5652, 5652, 5652, 5652, 5652,
     5652, 5652, 5652, 5652, 5652, 5652, 5652, 5652,    0, 5652,
     5652, 5652, 5652, 5652, 5652, 5653,    0, 5653, 5653, 5653,
     5653, 5653, 5653, 5653, 5653,    0,    0, 5653, 5653, 5653,
     5653, 5653, 5653, 5653, 5653, 5653, 5653, 5653, 5653, 5653,
        0, 5653, 5653, 5653, 5653, 5653, 5653, 5654,    0, 5654,

     5654, 5654, 5654, 5654, 5654, 5654, 5654,    0,    0, 5654,
     5654, 5654, 5654, 5654, 5654, 5654, 5654, 5654, 5654, 5654,
     5654, 5654,    0, 5654, 5654, 5654, 5654, 5654, 5654, 5657,
        0, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 5657,
        0, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 5657,
     5657, 5657, 5657, 5657,    0, 5657, 5657, 5657, 5657, 5657,
     5657, 5658, 5658, 5658,    0,    0,    0, 5658,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5658,    0,    0,    0,    0,    0,    0,
        0, 5658, 5659, 5659, 5659,    0,    0,    0,    0,    0,

        0,    0, 5659,    0, 5659,    0,    0, 5659, 5659,    0,
        0,    0,    0,    0, 5659,    0,    0,    0,    0,    0,
        0,    0, 5659, 5660,    0, 5660, 5660, 5660, 5660, 5660,
     5660, 5660, 5660, 5660,    0, 5660, 5660, 5660, 5660, 5660,
     5660, 5660, 5660, 5660, 5660, 5660, 5660, 5660,    0, 5660,
     5660, 5660, 5660, 5660, 5660, 5661,    0, 5661, 5661, 5661,
     5661, 5661, 5661, 5661, 5661,    0,    0, 5661, 5661, 5661,
     5661, 5661, 5661, 5661, 5661, 5661, 5661, 5661, 5661, 5661,
        0, 5661, 5661, 5661, 5661, 5661, 5661, 5662,    0, 5662,
     5662, 5662, 5662, 5662, 5662, 5662, 5662,    0,    0, 5662,

     5662, 5662, 5662, 5662, 5662, 5662, 5662, 5662, 5662, 5662,
     5662, 5662,    0, 5662, 5662, 5662, 5662, 5662, 5662, 5663,
        0, 5663, 5663, 5663, 5663, 5663, 5663, 5663, 5663, 5663,
        0, 5663, 5663, 5663, 5663, 5663, 5663, 5663, 5663, 5663,
     5663, 5663, 5663, 5663,    0, 5663, 5663, 5663, 5663, 5663,
     5663, 5664, 5664, 5664,    0,    0,    0,    0,    0,    0,
        0, 5664,    0, 5664,    0,    0, 5664,    0,    0,    0,
        0,    0,    0, 5664,    0,    0,    0,    0,    0,    0,
        0, 5664, 5665, 5665, 5665, 5665,    0,    0, 5665,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 5665,    0,

        0,    0,    0,    0, 5665,    0,    0,    0,    0,    0,
        0, 5665, 5665, 5666,    0, 5666, 5666, 5666, 5666, 5666,
     5666, 5666, 5666, 5666,    0, 5666, 5666, 5666, 5666, 5666,
     5666, 5666, 5666, 5666, 5666, 5666, 5666, 5666,    0, 5666,
     5666, 5666, 5666, 5666, 5666, 5667,    0, 5667, 5667, 5667,
     5667, 5667, 5667, 5667, 5667,    0,    0, 5667, 5667, 5667,
     5667, 5667, 5667, 5667, 5667, 5667, 5667, 5667, 5667, 5667,
        0, 5667, 5667, 5667, 5667, 5667, 5667, 5668,    0, 5668,
     5668, 5668, 5668, 5668, 5668, 5668, 5668,    0,    0, 5668,
     5668, 5668, 5668, 5668, 5668, 5668, 5668, 5668, 5668, 5668,

     5668, 5668,    0, 5668, 5668, 5668, 5668, 5668, 5668, 5669,
        0, 5669, 5669, 5669, 5669, 5669, 5669, 5669, 5669, 5669,
        0, 5669, 5669, 5669, 5669, 5669, 5669, 5669, 5669, 5669,
     5669, 5669, 5669, 5669,    0, 5669, 5669, 5669, 5669, 5669,
     5669, 5670, 5670, 5670,    0,    0,    0, 5670,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 5670,    0,    0,    0,    0,    0,    0,
        0, 5670, 5671, 5671, 5671,    0,    0,    0,    0,    0,
        0,    0, 5671,    0, 5671,    0,    0, 5671, 5671,    0,
        0,    0,    0,    0, 5671,    0,    0,    0,    0,    0,

        0,    0, 5671, 5672,    0, 5672, 5672, 5672, 5672, 5672,
     5672, 5672, 5672, 5672,    0, 5672, 5672, 5672, 5672, 5672,
     5672, 5672, 5672, 5672, 5672, 5672, 5672, 5672,    0, 5672,
     5672, 5672, 5672, 5672, 5672, 5673,    0, 5673, 5673, 5673,
     5673, 5673, 5673, 5673, 5673,    0,    0, 5673, 5673, 5673,
     5673, 5673, 5673, 5673, 5673, 5673, 5673, 5673, 5673, 5673,
        0, 5673, 5673, 5673, 5673, 5673, 5673, 5674,    0, 5674,
     5674, 5674, 5674, 5674, 5674, 5674, 5674,    0,    0, 5674,
     5674, 5674, 5674, 5674, 5674, 5674, 5674, 5674, 5674, 5674,
     5674, 5674,    0, 5674, 5674, 5674, 5674, 5674, 5674, 5675,

        0, 5675, 5675, 5675, 5675, 5675, 5675, 5675, 5675, 5675,
        0, 5675, 5675, 5675, 5675, 5675, 5675, 5675, 5675, 5675,
     5675, 5675, 5675, 5675,    0, 5675, 5675, 5675, 5675, 5675,
     5675, 5676, 5676, 5676,    0,    0,    0,    0,    0,    0,
        0, 5676,    0, 5676,    0,    0, 5676,    0,    0,    0,
        0,    0,    0, 5676,    0,    0,    0,    0,    0,    0,
        0, 5676, 5677,    0, 5677, 5677, 5677, 5677, 5677, 5677,
     5677, 5677, 5677,    0, 5677, 5677, 5677, 5677, 5677, 5677,
     5677, 5677, 5677, 5677, 5677, 5677, 5677,    0, 5677, 5677,
     5677, 5677, 5677, 5677, 5678,    0, 5678, 5678, 5678, 5678,

     5678, 5678, 5678, 5678,    0,    0, 5678, 5678, 5678, 5678,
     5678, 5678, 5678, 5678, 5678, 5678, 5678, 5678, 5678,    0,
     5678, 5678, 5678, 5678, 5678, 5678, 5679,    0, 5679, 5679,
     5679, 5679, 5679, 5679, 5679, 5679,    0,    0, 5679, 5679,
     5679, 5679, 5679, 5679, 5679, 5679, 5679, 5679, 5679, 5679,
     5679,    0, 5679, 5679, 5679, 5679, 5679, 5679, 5680,    0,
     5680, 5680, 5680, 5680, 5680, 5680, 5680, 5680, 5680,    0,
     5680, 5680, 5680, 5680, 5680, 5680, 5680, 5680, 5680, 5680,
     5680, 5680, 5680,    0, 5680, 5680, 5680, 5680, 5680, 5680,
     5681,    0, 5681, 5681, 5681, 5681, 5681, 5681, 5681, 5681,

     5681,    0, 5681, 5681, 5681, 5681, 5681, 5681, 5681, 5681,
     5681, 5681, 5681, 5681, 5681,    0, 5681, 5681, 5681, 5681,
     5681, 5681, 5682,    0, 5682, 5682, 5682, 5682, 5682, 5682,
     5682, 5682,    0,    0, 5682, 5682, 5682, 5682, 5682, 5682,
     5682, 5682, 5682, 5682, 5682, 5682, 5682,    0, 5682, 5682,
     5682, 5682, 5682, 5682, 5683,    0, 5683, 5683, 5683, 5683,
     5683, 5683, 5683, 5683,    0,    0, 5683, 5683, 5683, 5683,
     5683, 5683, 5683, 5683, 5683, 5683, 5683, 5683, 5683,    0,
     5683, 5683, 5683, 5683, 5683, 5683, 5684,    0, 5684, 5684,
     5684, 5684, 5684, 5684, 5684, 5684, 5684,    0, 5684, 5684,

     5684, 5684, 5684, 5684, 5684, 5684, 5684, 5684, 5684, 5684,
     5684,    0, 5684, 5684, 5684, 5684, 5684, 5684, 5685,    0,
     5685, 5685, 5685, 5685, 5685, 5685, 5685, 5685, 5685,    0,
     5685, 5685, 5685, 5685, 5685, 5685, 5685, 5685, 5685, 5685,
     5685, 5685, 5685,    0, 5685, 5685, 5685, 5685, 5685, 5685,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,

     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960, 4960,
     4960, 4960, 4960, 4960
    } ;

extern int scannerYY_flex_debug;
int scannerYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *scannerYYtext;
#line 1 "scanner.l"
/************************************************************************
 *
 *
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 *
 *
*************************************************************************/
#line 10 "scanner.l"

#include <QFile>
#include <QHash>
#include <QStack>
#include <QVector>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>
#include <unistd.h>

#include <arguments.h>
#include <config.h>
#include <commentscan.h>
#include <code.h>
#include <doxy_globals.h>
#include <entry.h>
#include <message.h>
#include <defargs.h>
#include <language.h>
#include <parser_clang.h>
#include <parser_cstyle.h>
#include <util.h>

#define YY_NEVER_INTERACTIVE 1
#define YY_NO_INPUT 1

static ParserInterface *g_thisParser;
static const char *     inputString;
static int              inputPosition;
static QFile            inputFile;
static int              lastContext;
static int              lastCContext;
static int              lastDocContext;
static int              lastCPPContext;
static int              lastSkipSharpContext;
static int              lastSkipRoundContext;
static int              lastStringContext;
static int              lastCurlyContext;
static int              lastRoundContext;
static int              lastSquareContext;
static int              lastInitializerContext;
static int              lastClassTemplSpecContext;
static int              lastPreLineCtrlContext;
static int              lastSkipVerbStringContext;
static int              lastCommentInArgContext;
static int              lastRawStringContext;
static int              lastCSConstraint;
static int              lastHereDocContext;
static int              lastDefineContext;
static int              lastAlignAsContext;
static Protection       protection;
static Protection       baseProt;

static int sharpCount   = 0;
static int roundCount   = 0;
static int curlyCount   = 0;
static int squareCount  = 0;
static int padCount     = 0;

static QSharedPointer<Entry> current_root;
static QSharedPointer<Entry> global_root;
static QSharedPointer<Entry> current;
static QSharedPointer<Entry> previous;
static QSharedPointer<Entry> tempEntry;
static QSharedPointer<Entry> firstTypedefEntry;
static QSharedPointer<Entry> memspecEntry;

static int yyLineNr     = 1 ;
static int yyBegLineNr  = yyLineNr ;
static int yyColNr      = 1 ;
static int yyBegColNr   = yyColNr ;
static int anonCount    = 0 ;
static int anonNSCount  = 0 ;

static QByteArray       yyFileName;
static MethodTypes      mtype;
static bool             gstat;
static bool             removeSlashes;
static Specifier        virt;
static Specifier        baseVirt;

static QByteArray       msType, msName, msArgs;
static bool             isTypedef;
static int              tmpDocType;
static QByteArray       sectionLabel;
static QByteArray       sectionTitle;
static QByteArray       funcPtrType;
static QByteArray       templateStr;
static QByteArray       aliasName;
static QByteArray       baseName;
static QByteArray      *specName;
static QByteArray       formulaText;
static bool             useOverrideCommands = FALSE;

static SrcLangExt       language;
static bool             insideIDL    = FALSE;       //!< processing IDL code?
static bool             insideJava   = FALSE;       //!< processing Java code?
static bool             insideCSharp = FALSE;       //!< processing C# code?
static bool             insideD      = FALSE;       //!< processing D code?
static bool             insidePHP    = FALSE;       //!< processing PHP code?
static bool             insideObjC   = FALSE;       //!< processing Objective C code?
static bool             insideCli    = FALSE;       //!< processing C++/CLI code?
static bool             insideJS     = FALSE;       //!< processing JavaScript code?
static bool             insideCpp    = TRUE;        //!< processing C/C++ code

static bool             insideCppQuote     = false;
static bool             insideProtocolList = false;

static bool             s_clangParser = false;

static int              argRoundCount;
static int              argSharpCount;
static int              currentArgumentContext;
static int              lastCopyArgStringContext;
static int              lastCopyArgContext;

static QByteArray         *copyArgString;
static QByteArray         fullArgString;
static ArgumentList       *currentArgumentList;
static char               lastCopyArgChar;

static QByteArray         *pCopyQuotedString;
static QByteArray         *pCopyRoundString;
static QByteArray         *pCopyCurlyString;
static QByteArray         *pCopyRawString;

static QByteArray         *pCopyCurlyGString;
static QByteArray         *pCopyRoundGString;
static QByteArray         *pCopyQuotedGString;
static QByteArray         *pCopyHereDocGString;
static QByteArray         *pCopyRawGString;
static QByteArray         *pSkipVerbString;
static QStack<Grouping *>  autoGroupStack;

static bool                insideFormula;
static bool                insideTryBlock = FALSE;
static bool                insideCode;
static bool                needsSemi;
static int                 initBracketCount;

static QByteArray       oldStyleArgType;
static QByteArray       docBackup;
static QByteArray       briefBackup;

static int              docBlockContext;
static QByteArray       docBlock;
static QByteArray       docBlockName;
static bool             docBlockInBody;
static bool             docBlockAutoBrief;
static char             docBlockTerm;

static QByteArray       idlAttr;
static QByteArray       idlProp;
static bool             odlProp;

static bool             g_lexInit = FALSE;
static bool             externC;

static QByteArray       g_delimiter;

static int              g_column;
static int              g_fencedSize = 0;
static bool             g_nestedComment = 0;

static void initParser()
{
  sectionLabel.resize(0);
  sectionTitle.resize(0);
  baseName.resize(0);
  formulaText.resize(0);

  protection = Public;
  baseProt   = Public;
  sharpCount = 0;
  roundCount = 0;
  curlyCount = 0;
  mtype      = MethodTypes::Method;
  gstat      = FALSE;
  virt       = Normal;
  baseVirt   = Normal;
  isTypedef  = FALSE;

  autoGroupStack.clear();
  insideTryBlock = FALSE;
  insideFormula  = FALSE;
  insideCode     = FALSE;

   insideCli = Config::getBool("cpp-cli-support");

   firstTypedefEntry = QSharedPointer<Entry>();
   previous          = QSharedPointer<Entry>();
   tempEntry         = QSharedPointer<Entry>();
   memspecEntry      = QSharedPointer<Entry>();
}

static void initEntry()
{
  if (insideJava)  {
    protection = (current_root->m_specFlags.spec & (Entry::Interface | Entry::Enum)) ? Public : Package;
  }
  current->protection = protection;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  current->lang       = language;

  initGroupInfo(current);
  isTypedef = FALSE;
}

///// remove any automatic grouping and add new one (if given)
//static void setCurrentGroup( QCString *newgroup, Grouping::GroupPri_t pri )
//{
//   /* remove auto group name from current entry and discard it */
//   Grouping *g = current->groups->first();
//   int i=0;
//   while (g)
//   {
//     if (g->pri <= Grouping::GROUPING_AUTO_DEF)
//     {
//       current->groups->remove(i);
//       i--;
//     }
//     g=current->groups->next();
//     i++;
//   }
//
//   /* use new group name instead? */
//   if ( newgroup )
//   {
//      current->groups->append(new Grouping(*newgroup, pri));
//   }
//}
//
//static int newMemberGroupId()
//{
//  static int curGroupId=0;
//  return curGroupId++;
//}
//
// forward declarations
//static void startGroupInDoc();
//static void endGroup();


static void lineCount()
{
  static int tabSize = Config::getInt("tab-size");
  const char *p;
  for (p = scannerYYtext ; *p ; ++p )
  {
    if (*p=='\n')
    {
      yyLineNr++,g_column=0,yyColNr=1;
    }
    else if (*p=='\t')
    {
      g_column+=tabSize - (g_column%tabSize);
    }
    else
    {
      g_column++,yyColNr++;
    }
  }
}

static inline int computeIndent(const char *s,int startIndent)
{
  int col=startIndent;
  static int tabSize = Config::getInt("tab-size");
  const char *p=s;
  char c;
  while ((c=*p++))

  {
    if (c=='\t') col+=tabSize-(col%tabSize);
    else if (c=='\n') col=0;
    else col++;
  }
  return col;
}

static void addType(QSharedPointer<Entry> current)
{
    uint tl = current->type.length();

    if (tl > 0 && ! current->name.isEmpty() && current->type.at(tl-1) != '.')  {
      current->type += ' ' ;
    }

    current->type += current->name;
    current->name.resize(0) ;

    tl = current->type.length();

    if( tl>0 && ! current->args.isEmpty() && current->type.at(tl-1)!='.')  {
      current->type += ' ' ;
    }

    current->type += current->args ;
    current->args.resize(0) ;
    current->argList.clear();
}


static QByteArray stripQuotes(const char *s)
{
  QByteArray name;
  if (s==0 || *s==0) return name;
  name=s;

  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

static void startCommentBlock(bool);
static void handleCommentBlock(const QByteArray &doc,bool brief);
static void handleParametersCommentBlocks(ArgumentList *al);

static bool nameIsOperator(QByteArray &name)
{
   int i = name.indexOf("operator");

   if (i == -1) {
      return FALSE;
   }

   if (i == 0) {
     int len = name.length();

     if (len == 8 || ! isId(name.at(8))) {
         // case operator ::X
         return TRUE;
      }
   }

   if (i > 0) {
      int len = name.length();

      if ( (len == (i + 8)) || (! isId(name.at(i - 1)) && ! isId(name.at(i + 8)))  ) {
         // case X::operator
         return TRUE;
      }
   }

   // case TEXToperatorTEXT

  return FALSE;
}

static void setContext()
{
  QByteArray fileName = yyFileName;

  language     = getLanguageFromFileName(fileName);
  insideIDL    = language==SrcLangExt_IDL;
  insideJava   = language==SrcLangExt_Java;
  insideCSharp = language==SrcLangExt_CSharp;
  insideD      = language==SrcLangExt_D;
  insidePHP    = language==SrcLangExt_PHP;
  insideObjC   = language==SrcLangExt_ObjC;
  insideJS     = language==SrcLangExt_JS;
  insideCpp    = language==SrcLangExt_Cpp;

  if ( insidePHP )
  {
    useOverrideCommands = TRUE;
  }
}

static void prependScope()
{
   if (current_root->section & Entry::SCOPE_MASK) {
      current->name.prepend(current_root->name + "::");

      if (current_root->tArgLists) {

         if (current->tArgLists == 0) {
            current->tArgLists = new QList<ArgumentList>;
         }

         *current->tArgLists = *current_root->tArgLists;
      }
   }
}

/*! Returns TRUE iff the current entry could be a K&R style C function */
static bool checkForKnRstyleC()
{
   if (((QByteArray)yyFileName).right(2).toLower() != ".c") {
      return FALSE;   // must be a C file
   }

   if (current->argList.isEmpty()) {
      return FALSE;   // must have arguments
   }

   for (auto a : current->argList) {
      // in K&R style argument do not have a type, but DoxyPress expects a type
      // so it will think the argument has no name
      if (a.type.isEmpty() || ! a.name.isEmpty()) {
         return FALSE;
      }
   }

  return TRUE;
}

static void splitKnRArg(QByteArray &oldStyleArgPtr, QByteArray &oldStyleArgName)
{
   int si = current->args.length();

   if (oldStyleArgType.isEmpty()) {
      // new argument
      static QRegExp re("\\([^)]*\\)");

      int bi1 = re.lastIndexIn(current->args);
      int bi2 = bi1 != -1 ? re.lastIndexIn(current->args, bi1 - 1) : -1;
      char c;

      if (bi1 != -1 && bi2 != -1) { // found something like "int (*func)(int arg)"
         int s = bi2 + 1;
         oldStyleArgType = current->args.left(s);

         int i = s;

         while (i < si && ((c = current->args.at(i)) == '*' || isspace((uchar)c))) {
            i++;
         }
         oldStyleArgType += current->args.mid(s, i - s);
         s = i;

         while (i < si && isId(current->args.at(i))) {
            i++;
         }

         oldStyleArgName = current->args.mid(s, i - s);
         oldStyleArgType += current->args.mid(i);

      } else if (bi1 != -1) { // redundant braces like in "int (*var)"
         int s = bi1;
         oldStyleArgType = current->args.left(s);
         s++;
         int i = s + 1;
         while (i < si && ((c = current->args.at(i)) == '*' || isspace((uchar)c))) {
            i++;
         }
         oldStyleArgType += current->args.mid(s, i - s);
         s = i;
         while (i < si && isId(current->args.at(i))) {
            i++;
         }
         oldStyleArgName = current->args.mid(s, i - s);
      } else { // normal "int *var"
         int l = si, i = l - 1, j;
         char c;
         // look for start of name in "type *name"
         while (i >= 0 && isId(current->args.at(i))) {
            i--;
         }
         j = i + 1;
         // look for start of *'s
         while (i >= 0 && ((c = current->args.at(i)) == '*' || isspace((uchar)c))) {
            i--;
         }
         i++;
         if (i != l) {
            oldStyleArgType = current->args.left(i);
            oldStyleArgPtr = current->args.mid(i, j - i);
            oldStyleArgName = current->args.mid(j).trimmed();
         } else {
            oldStyleArgName = current->args.trimmed();
         }
      }

   } else { // continuation like *arg2 in "int *args,*arg2"
      int l = si, j = 0;
      char c;

      while (j < l && ((c = current->args.at(j)) == '*' || isspace((uchar)c))) {
         j++;
      }

      if (j > 0) {
         oldStyleArgPtr = current->args.left(j);
         oldStyleArgName = current->args.mid(j).trimmed();

      } else {
         oldStyleArgName = current->args.trimmed();
      }
   }
}


/*! Update the argument \a name with additional \a type info. For K&R style
 *  function the type is found \e after the argument list, so this routine
 *  in needed to fix up.
 */
static void addKnRArgInfo(const QByteArray &type, const QByteArray &name,
                          const QByteArray &brief, const QByteArray &docs)
{
   for (auto a : current->argList) {
      if (a.type == name) {
         a.type = type.trimmed();

         if (a.type.left(9) == "register ") { // strip keyword
            a.type = a.type.mid(9);
         }

         a.name = name.trimmed();

         if (! brief.isEmpty() && !docs.isEmpty()) {
            a.docs = brief + "\n\n" + docs;
         } else if (!brief.isEmpty()) {
            a.docs = brief;
         } else {
            a.docs = docs;
         }
      }
   }
}

void fixArgumentListForJavaScript(ArgumentList *al)
{
   if (al == 0) {
      return;
   }

   for (auto a : *al) {
      if (! a.type.isEmpty() && a.name.isEmpty()) {
         // a->type is actually the (typeless) parameter name, so move it
         a.name = a.type;
         a.type.resize(0);
      }
   }
}

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
      *buf = inputString[inputPosition++] ;
      c++; buf++;
    }
    return c;
}

/* start command character */
/* language parsing states */































































































































































/* prototype scanner states */





/* comment parsing states */



#line 12566 "<stdout>"

#define INITIAL 0
#define AlignAs 1
#define AlignAsEnd 2
#define Define 3
#define DefineEnd 4
#define CompoundName 5
#define ClassVar 6
#define CSConstraintName 7
#define CSConstraintType 8
#define CSIndexer 9
#define ClassCategory 10
#define ClassTemplSpec 11
#define CliPropertyType 12
#define CliPropertyIndex 13
#define CliOverride 14
#define Bases 15
#define BasesProt 16
#define NextSemi 17
#define BitFields 18
#define EnumBaseType 19
#define FindMembers 20
#define FindMembersPHP 21
#define FindMemberName 22
#define FindFields 23
#define FindFieldArg 24
#define Function 25
#define FuncRound 26
#define ExcpRound 27
#define ExcpList 28
#define FuncQual 29
#define TrailingReturn 30
#define Operator 31
#define Array 32
#define ReadBody 33
#define ReadNSBody 34
#define ReadBodyIntf 35
#define Using 36
#define UsingAlias 37
#define UsingAliasEnd 38
#define UsingDirective 39
#define SkipCurly 40
#define SkipCurlyCpp 41
#define SkipCurlyEndDoc 42
#define SkipString 43
#define SkipPHPString 44
#define SkipInits 45
#define SkipC11Inits 46
#define SkipCPP 47
#define SkipCPPBlock 48
#define SkipComment 49
#define SkipCxxComment 50
#define SkipCurlyBlock 51
#define SkipRoundBlock 52
#define Sharp 53
#define SkipRound 54
#define SkipSquare 55
#define SkipRemainder 56
#define StaticAssert 57
#define DeclType 58
#define TypedefName 59
#define TryFunctionBlock 60
#define TryFunctionBlockEnd 61
#define Comment 62
#define PackageName 63
#define JavaImport 64
#define PHPUse 65
#define PHPUseAs 66
#define CSAccessorDecl 67
#define CSGeneric 68
#define PreLineCtrl 69
#define DefinePHP 70
#define DefinePHPEnd 71
#define OldStyleArgs 72
#define SkipVerbString 73
#define ObjCMethod 74
#define ObjCReturnType 75
#define ObjCParams 76
#define ObjCParamType 77
#define ObjCProtocolList 78
#define ObjCPropAttr 79
#define ObjCSkipStatement 80
#define QtPropType 81
#define QtPropName 82
#define QtPropAttr 83
#define QtPropRead 84
#define QtPropWrite 85
#define CsObject 86
#define CsObjectName 87
#define CsObjectClose 88
#define CsIgnore 89
#define CsRegEnum 90
#define CsPropReadVar 91
#define CsPropReadMethod 92
#define CsPropWriteVar 93
#define CsPropWriteMethod 94
#define CsPropResetVar 95
#define CsPropResetMethod 96
#define CsPropNotifyVar 97
#define CsPropNotifyMethod 98
#define CsPropVar 99
#define CsPropMethod 100
#define CsPropJustVar 101
#define CsPropClose 102
#define CsSignal 103
#define CsSignalProtection 104
#define CsSignalSlotMethod 105
#define CsSignalSlotClose 106
#define CsSlot 107
#define CsSlotProtection 108
#define CsSignalSlot2 109
#define CsSignalSlot2Name 110
#define CsSignalSlot2Extra 111
#define CsSignalSlot2Close 112
#define ReadInitializer 113
#define UNOIDLAttributeBlock 114
#define GetCallType 115
#define CppQuote 116
#define EndCppQuote 117
#define MemberSpec 118
#define MemberSpecSkip 119
#define EndTemplate 120
#define FuncPtr 121
#define FuncPtrOperator 122
#define EndFuncPtr 123
#define ReadFuncArgType 124
#define ReadTempArgs 125
#define IDLUnionCase 126
#define NSAliasName 127
#define NSAliasArg 128
#define CopyString 129
#define CopyPHPString 130
#define CopyGString 131
#define CopyPHPGString 132
#define CopyRound 133
#define CopyCurly 134
#define GCopyRound 135
#define GCopyCurly 136
#define SkipUnionSwitch 137
#define Specialization 138
#define FuncPtrInit 139
#define FuncFunc 140
#define FuncFuncEnd 141
#define FuncFuncType 142
#define FuncFuncArray 143
#define CopyArgString 144
#define CopyArgPHPString 145
#define CopyArgRound 146
#define CopyArgSharp 147
#define CopyArgComment 148
#define CopyArgCommentLine 149
#define CopyArgVerbatim 150
#define HereDoc 151
#define HereDocEnd 152
#define CopyHereDoc 153
#define CopyHereDocEnd 154
#define RawString 155
#define RawGString 156
#define IDLAttribute 157
#define IDLProp 158
#define IDLPropName 159
#define Prototype 160
#define PrototypePtr 161
#define PrototypeQual 162
#define PrototypeExc 163
#define PrototypeSkipLine 164
#define DocLine 165
#define DocBlock 166
#define DocCopyBlock 167

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int scannerYYlex_destroy (void );

int scannerYYget_debug (void );

void scannerYYset_debug (int debug_flag  );

YY_EXTRA_TYPE scannerYYget_extra (void );

void scannerYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *scannerYYget_in (void );

void scannerYYset_in  (FILE * in_str  );

FILE *scannerYYget_out (void );

void scannerYYset_out  (FILE * out_str  );

int scannerYYget_leng (void );

char *scannerYYget_text (void );

int scannerYYget_lineno (void );

void scannerYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int scannerYYwrap (void );
#else
extern int scannerYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( scannerYYtext, scannerYYleng, 1, scannerYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( scannerYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( scannerYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, scannerYYin))==0 && ferror(scannerYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(scannerYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int scannerYYlex (void);

#define YY_DECL int scannerYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after scannerYYtext and scannerYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( scannerYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(scannerYYtext[scannerYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 779 "scanner.l"


#line 12926 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)scannerYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in scannerYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! scannerYYin )
			scannerYYin = stdin;

		if ( ! scannerYYout )
			scannerYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			scannerYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				scannerYY_create_buffer(scannerYYin,YY_BUF_SIZE );
		}

		scannerYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of scannerYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 4961 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 40351 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 781 "scanner.l"
{
                    curlyCount=0;
                 needsSemi = TRUE;
                    BEGIN(SkipCurlyBlock);
               }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 786 "scanner.l"
{
                    roundCount=0;
                    BEGIN(SkipRoundBlock);
                  }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 790 "scanner.l"
{
                 ++roundCount;
                  }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 793 "scanner.l"
{
                    if (roundCount != 0)
                   --roundCount;
                 else
                   BEGIN( NextSemi ) ;
                  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 799 "scanner.l"
{
                    ++curlyCount ;
               }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 802 "scanner.l"
{
                         if( curlyCount )
                 {
                   --curlyCount ;
                 }
                 else if (needsSemi)
                 {
                   BEGIN( NextSemi );
                 }
                 else
                 {
                   BEGIN( FindMembers );
                 }
               }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 816 "scanner.l"
{
                    if (insidePHP)
                 {
                   lastStringContext=NextSemi;
                   BEGIN(SkipPHPString);
                 }
                  }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 823 "scanner.l"
{ if (insidePHP) REJECT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 824 "scanner.l"
{
                    lastStringContext=NextSemi;
                 BEGIN(SkipString);
                  }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 828 "scanner.l"
{
                    unput(*scannerYYtext);
                    BEGIN( FindMembers );
               }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 832 "scanner.l"
{
                    unput(*scannerYYtext);
                 BEGIN( FindMembers );
                  }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 836 "scanner.l"
{
                 current->args = current->args.simplified();
                 unput(*scannerYYtext);
                 BEGIN( ClassVar );
                                        }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 841 "scanner.l"
{ // PHP code with unsupported extension?
                                          insidePHP = TRUE;
                  }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 844 "scanner.l"
{ // PHP code start
                                           BEGIN( FindMembers );
               }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 847 "scanner.l"
{ // PHP code start
                 lineCount() ;
                                          BEGIN( FindMembers );
               }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 851 "scanner.l"
{ // Non-PHP code text, ignore
                  }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 853 "scanner.l"
{ // Non-PHP code text, ignore
                                          lineCount();
                  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 856 "scanner.l"
{ // Non-PHP code text, ignore
                    }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 858 "scanner.l"
{ // PHP code end
                 if (insidePHP)
                   BEGIN( FindMembersPHP );
                 else
                   REJECT;
                                        }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 864 "scanner.l"
{ if (insidePHP)
                   BEGIN( NextSemi );
                 else
                   REJECT;
               }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 869 "scanner.l"
{ // Mozilla XPIDL lang-specific block
                 if (!insideIDL)
                   REJECT;
               }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 873 "scanner.l"
{ // Mozilla XPIDL lang-specific block end
                 if (!insideIDL)
                   REJECT;
               }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 877 "scanner.l"
{ // IDL or Borland C++ builder property
                 current->mtype = mtype = MethodTypes::Property;
                 current->protection = protection = Public ;
                 current->type.resize(0);
                 current->name.resize(0);
                 current->args.resize(0);
                 current->argList.clear();
                 lineCount() ;
               }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 887 "scanner.l"
{
                 current->mtype = mtype = MethodTypes::DCOP;
                 current->protection = protection = Public ;
                 current->type.resize(0);
                 current->name.resize(0);
                 current->args.resize(0);
                 current->argList.clear();
                 lineCount() ;
               }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 897 "scanner.l"
{
                 current->mtype = mtype = MethodTypes::Signal;
                 current->protection = protection = Public ;
                 current->type.resize(0);
                 current->name.resize(0);
                 current->args.resize(0);
                 current->argList.clear();
                 lineCount() ;
               }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 907 "scanner.l"
{
                 current->mtype = mtype = MethodTypes::Slot;
                 current->protection = protection = Public ;
                 current->type.resize(0);
                 current->name.resize(0);
                 current->args.resize(0);
                 current->argList.clear();
                 lineCount();
               }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 917 "scanner.l"
{
                 current->protection = protection = Protected ;
                 current->mtype = mtype = MethodTypes::Slot;
                 current->type.resize(0);
                 current->name.resize(0);
                 current->args.resize(0);
                 current->argList.clear();
                 lineCount();
               }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 927 "scanner.l"
{
                 current->protection = protection = Private ;
                 current->mtype = mtype = MethodTypes::Slot;
                 current->type.resize(0);
                 current->name.resize(0);
                 current->args.resize(0);
                 current->argList.clear();
                 lineCount();
               }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 936 "scanner.l"
{
                 current->protection = protection = Public ;
                 current->mtype = mtype = MethodTypes::Method;
                 current->type.resize(0);
                 current->name.resize(0);
                 current->args.resize(0);
                 current->argList.clear();
                 lineCount() ;
               }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 945 "scanner.l"
{  // for now treat C++/CLI's internal as package...
                    if (insideCli)
                 {
                   current->protection = protection = Package ;
                   current->mtype = mtype = MethodTypes::Method;
                   current->type.resize(0);
                   current->name.resize(0);
                   current->args.resize(0);
                   current->argList.clear();
                   lineCount() ;
                 }
                 else
                 {
                   REJECT;
                 }
                  }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 961 "scanner.l"
{
                    current->protection = protection = Protected ;
                 current->mtype = mtype = MethodTypes::Method;
                 current->type.resize(0);
                 current->name.resize(0);
                 current->args.resize(0);
                 current->argList.clear();
                 lineCount() ;
               }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 970 "scanner.l"
{
                    current->protection = protection = Private ;
                 current->mtype = mtype = MethodTypes::Method;
                 current->type.resize(0);
                 current->name.resize(0);
                 current->args.resize(0);
                 current->argList.clear();
                 lineCount() ;
               }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 979 "scanner.l"
{
                    if (insideCli)
                 {
                   // C++/CLI event
                   lineCount() ;
                      current->mtype = mtype = MethodTypes::Event;
                   current->bodyLine = yyLineNr;
                   curlyCount=0;
                   BEGIN( CliPropertyType );
                 }
                 else if (insideCSharp)
                 {
                   lineCount() ;
                      current->mtype = MethodTypes::Event;
                   current->bodyLine = yyLineNr;
                 }
                 else
                 {
                   REJECT;
                 }
                                        }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 1000 "scanner.l"
{
                     if (insideCli)
                  {
                    // C++/CLI property
                    lineCount() ;
                       current->mtype = mtype = MethodTypes::Property;
                    current->bodyLine = yyLineNr;
                    curlyCount=0;
                    BEGIN( CliPropertyType );
                  }
                  else
                  {
                    REJECT;
                  }
               }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1015 "scanner.l"
{
                    addType( current );
                    current->name = scannerYYtext;
                  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1019 "scanner.l"
{ // C++/CLI indexed property
                    current->name += scannerYYtext;
                 BEGIN( CliPropertyIndex );
                  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1023 "scanner.l"
{
                 curlyCount=0;
                 //printf("event: '%s' '%s'\n",current->type.data(),current->name.data());
                    BEGIN( CSAccessorDecl );
                  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1028 "scanner.l"
{
                    unput(*scannerYYtext);
                 BEGIN( FindMembers );
                  }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 1032 "scanner.l"
{
                                          lineCount();
                  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1035 "scanner.l"
{
                  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1037 "scanner.l"
{
                    addType( current );
                    current->type += scannerYYtext;
                  }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1041 "scanner.l"
{
                                          BEGIN( CliPropertyType );
                    current->name+=scannerYYtext;
                  }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 1045 "scanner.l"
{
                    current->name+=scannerYYtext;
                  }
	YY_BREAK
/*
<FindMembers>{B}*"property"{BN}+        {
                                          if (!current->type.isEmpty())
                 {
                   REJECT;
                                          }
                 else
                 {
                                            current->mtype = mtype = MethodTypes::Property;
                                            lineCount();
                 }
                                        }
  */
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 1061 "scanner.l"
{
                    current->protection = protection = Private ;
                 current->mtype = mtype = MethodTypes::Method;
                 current->type.resize(0);
                 current->name.resize(0);
                 current->args.resize(0);
                 current->argList.clear();
                 lineCount() ;
                  }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1070 "scanner.l"
{
                    current->protection = protection = Protected ;
                 current->mtype = mtype = MethodTypes::Method;
                 current->type.resize(0);
                 current->name.resize(0);
                 current->args.resize(0);
                 current->argList.clear();
                 lineCount() ;
                  }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1079 "scanner.l"
{
                 current->protection = protection = Public ;
                 current->mtype = mtype = MethodTypes::Method;
                 current->type.resize(0);
                 current->name.resize(0);
                 current->args.resize(0);
                 current->argList.clear();
                 lineCount() ;
                  }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 1088 "scanner.l"
{
                 if (!insideObjC)
                 {
                   REJECT;
                 }
                 else
                 {
                   lineCount();
                   current->fileName  = yyFileName;
                   current->startLine = yyLineNr;
                   current->startColumn = yyColNr;
                   current->bodyLine  = yyLineNr;
                   current->section = Entry::FUNCTION_SEC;
                   current->protection = protection = Public ;
                   language = current->lang = SrcLangExt_ObjC;
                   insideObjC = TRUE;
                   current->virt = Virtual;
                   current->stat=scannerYYtext[0]=='+';
                   current->mtype = mtype = MethodTypes::Method;
                   current->type.resize(0);
                   current->name.resize(0);
                   current->args.resize(0);
                   current->argList.clear();
                   BEGIN( ObjCMethod );
                 }
                  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1114 "scanner.l"
{ // start of method's return type
                    BEGIN( ObjCReturnType );
                  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1117 "scanner.l"
{ // found method name
                 if (current->type.isEmpty())
                 {
                   current->type = "id";
                 }
                 current->name = scannerYYtext;
                                          if (insideCpp || insideObjC)
                                          {
                                            current->id = ClangParser::instance()->lookup(yyLineNr,scannerYYtext);
                                          }
                  }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1128 "scanner.l"
{ // start of parameter list
                    current->name += ':';

                 Argument temp;
                 current->argList.append(temp);

                    BEGIN( ObjCParams );
                  }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1136 "scanner.l"
{ // TODO: check if nested braches are possible.
                    current->type = scannerYYtext;
                  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1139 "scanner.l"
{
                    BEGIN( ObjCMethod );
                  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1142 "scanner.l"
{ // Keyword of parameter
                 QByteArray keyw = scannerYYtext;
                 keyw=keyw.left(keyw.length()-1); // strip :
                 if (keyw.isEmpty())
                 {
                   current->name += " :";
                 }
                 else
                 {
                   current->name += keyw + ":";
                 }
                 if (current->argList.last().type.isEmpty())
                 {
                   current->argList.last().type="id";
                 }
                 Argument a;
                 a.attrib=(QByteArray)"["+keyw+"]";
                 current->argList.append(a);
                  }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1161 "scanner.l"
{ // name of parameter
                    lineCount();
                    current->argList.last().name=QByteArray(scannerYYtext).trimmed();
                  }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1165 "scanner.l"
{ // name of parameter
                 lineCount();
                 // do we want the comma as part of the name?
                 //current->name += ",";
                 Argument a;
                 a.attrib="[,]";
                 a.type="...";
                 current->argList.append(a);
                  }
	YY_BREAK
/*
<ObjCParams>":"            {
                 current->name += ':';
               }
   */
case 56:
YY_RULE_SETUP
#line 1179 "scanner.l"
{
                 roundCount=0;
                 current->argList.last().type.resize(0);
                 BEGIN( ObjCParamType );
               }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 1184 "scanner.l"
{
                                          roundCount++;
                    current->argList.last().type+=scannerYYtext;
                                        }
	YY_BREAK
case 58:
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 1188 "scanner.l"
{
                                          if (roundCount<=0)
                                          {
                                            BEGIN( ObjCParams );
                                          }
                                          else
                                          {
                                            current->argList.last().type+=scannerYYtext;
                                            roundCount--;
                                          }
               }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1199 "scanner.l"
{
                       current->argList.last().type+=QByteArray(scannerYYtext).trimmed();
                  }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 1202 "scanner.l"
{ // end of method declaration
                 if (! current->argList.isEmpty() && current->argList.last().type.isEmpty())
                 {
                   current->argList.last().type="id";
                 }
                    current->args = argListToString(&current->argList);
                 //printf("argList=%s\n",current->args.data());
                    unput(';');
                    BEGIN( Function );
                                        }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1212 "scanner.l"
{ // start of a method body
                    lineCount();
                                          //printf("Type=%s Name=%s args=%s\n",
                 //    current->type.data(),current->name.data(),argListToString(current->argList).data()
                 //    );
                 if (! current->argList.isEmpty() && current->argList.last().type.isEmpty())
                 {
                   current->argList.last().type = "id";
                 }
                    current->args = argListToString(&current->argList);
                 unput('{');
                    BEGIN( Function );
                  }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1225 "scanner.l"
{
                    lineCount();
                  }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1228 "scanner.l"
{
                    if (insideJava) // Java annotation
                 {
                   lineCount();
                   lastSkipRoundContext = YY_START;
                   roundCount=0;
                   BEGIN( SkipRound );
                 }
                 else if (qstrncmp(scannerYYtext,"@property",9)==0) // ObjC 2.0 property
                 {
                      current->mtype = mtype = MethodTypes::Property;
                   current->m_specFlags.m_isReadable = true;
                   current->m_specFlags.m_isWritable = true;
                   current->m_specFlags.m_isAssign = true;

                   current->protection = Public ;
                   unput('(');
                   BEGIN( ObjCPropAttr );
                 }
                 else
                 {
                   REJECT;
                 }
                                        }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1252 "scanner.l"
{
                                          current->m_read = scannerYYtext+7;
               }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1255 "scanner.l"
{
                                          current->m_write = scannerYYtext+7;
               }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1258 "scanner.l"
{
                 current->m_specFlags.m_isWritable = false;
                  }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1261 "scanner.l"
{ // default
                  }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1263 "scanner.l"
{ // default
                  }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1265 "scanner.l"
{
                 current->m_specFlags.m_isAssign  = false;
                 current->m_specFlags.spec |=Entry::Unretained;
                                        }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1269 "scanner.l"
{
                 current->m_specFlags.m_isAssign  = false;
                 current->m_specFlags.spec |=Entry::Retain;
                  }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1273 "scanner.l"
{
                 current->m_specFlags.m_isAssign  = false;
                 current->m_specFlags.spec |=Entry::Copy;
                  }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1277 "scanner.l"
{
                 current->m_specFlags.m_isAssign  = false;
                 current->m_specFlags.spec |=Entry::Weak;
                                        }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1281 "scanner.l"
{
                 current->m_specFlags.m_isAssign  = false;
                 current->m_specFlags.spec |=Entry::Strong;
                                        }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1285 "scanner.l"
{
                 current->m_specFlags.spec |= Entry::NonAtomic;
                  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1288 "scanner.l"
{
                    BEGIN(FindMembers);
                  }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1291 "scanner.l"
{
                    if (insideJava) // Java annotation
                 {
                   // skip annotation
                 }
                 else if (qstrcmp(scannerYYtext,"@property")==0) // ObjC 2.0 property
                 {
                      current->mtype = mtype = MethodTypes::Property;

                   current->m_specFlags.m_isReadable = true;
                   current->m_specFlags.m_isWritable = true;

                   current->protection = Public ;
                 }
                 else if (qstrcmp(scannerYYtext,"@synthesize")==0)
                 {
                   BEGIN( ObjCSkipStatement );
                 }
                 else if (qstrcmp(scannerYYtext,"@dynamic")==0)
                 {
                   BEGIN( ObjCSkipStatement );
                 }
                 else
                 {
                   REJECT;
                 }
                  }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1318 "scanner.l"
{
                    BEGIN(FindMembers);
                  }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1321 "scanner.l"
{
                    isTypedef=FALSE;
                 //printf("Found namespace %s lang=%d\n",scannerYYtext,current->lang);
                 current->name = scannerYYtext;
                 current->name = substitute(current->name,".","::");
                 current->name = substitute(current->name,"\\","::");
                 current->section = Entry::NAMESPACE_SEC;
                 current->type = "namespace" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 lineCount();
                  }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1335 "scanner.l"
{
                 current_root->addSubEntry(current, current_root);
                 current_root = current ;

                 current = QMakeShared<Entry>();
                 initEntry();
                    BEGIN(FindMembers);
                  }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1343 "scanner.l"
{
                 curlyCount=0;
                 BEGIN( ReadNSBody );
                  }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1347 "scanner.l"
{
                    current->type += " initonly ";
                 if (insideCli) current->m_specFlags.spec |= Entry::Initonly;
                 lineCount();
                  }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1352 "scanner.l"
{ current->type += " static ";
                    current->stat = TRUE;
                 lineCount();
               }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1356 "scanner.l"
{
                    current->stat = FALSE;
                 current->explicitExternal = TRUE;
                 lineCount();
                  }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1361 "scanner.l"
{ current->type += " virtual ";
                 current->virt = Virtual;
                 lineCount();
               }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1365 "scanner.l"
{ // UNO IDL published keyword
                 if (insideIDL)
                 {
                   lineCount();
                   current->m_specFlags.spec |= Entry::Published;
                 }
                 else
                 {
                   REJECT;
                 }
               }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1376 "scanner.l"
{
                                          if (!insidePHP)
                 {
                   current->type += " abstract ";
                   if (!insideJava)
                   {
                        current->virt = Pure;
                   }
                   else
                   {
                        current->m_specFlags.spec |= Entry::Abstract;
                   }
                 }
                 else
                 {
                   current->m_specFlags.spec |= Entry::Abstract;
                 }
                 lineCount();
               }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1395 "scanner.l"
{ current->m_specFlags.spec |=Entry::Inline;
                                          lineCount();
                                    }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1398 "scanner.l"
{ current->m_specFlags.spec |=Entry::Mutable;
                                          lineCount();
                                    }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1401 "scanner.l"
{ current->m_specFlags.spec |=Entry::Explicit;
                                          lineCount();
                                    }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1404 "scanner.l"
{ // Objective C 2.0 protocol required section
                                          current->m_specFlags.spec = (current->m_specFlags.spec & ~Entry::Optional) | Entry::Required;
                                          lineCount();
                                    }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1408 "scanner.l"
{  // Objective C 2.0 protocol optional section
                                          current->m_specFlags.spec = (current->m_specFlags.spec & ~Entry::Required) | Entry::Optional;
                                          lineCount();
                                    }
	YY_BREAK
/*
<FindMembers>{B}*"import"{BN}+      { // IDL import keyword
                    BEGIN( NextSemi );
                  }
  */
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1417 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 93:
/* rule 93 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 1418 "scanner.l"
{
                    isTypedef=FALSE;
                 current->section = Entry::NAMESPACE_SEC;
                 current->type = "namespace" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 lineCount();
                 if (insidePHP)
                 {
                   BEGIN( PackageName );
                 }
                 else
                 {
                      BEGIN( CompoundName );
                 }
               }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1436 "scanner.l"
{
                 lineCount();
                                          if (insideIDL)
                 {
                      isTypedef=FALSE;
                   current->section = Entry::NAMESPACE_SEC;
                   current->type = "module" ;
                   current->fileName  = yyFileName;
                   current->startLine = yyLineNr;
                   current->startColumn = yyColNr;
                   current->bodyLine  = yyLineNr;
                      BEGIN( CompoundName );
                 }
                 else if (insideD)
                 {
                   lineCount();
                   BEGIN(PackageName);
                 }
                 else
                 {
                   addType( current ) ;
                   current->name = QByteArray(scannerYYtext).trimmed();
                 }
               }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1460 "scanner.l"
{
                 lineCount();
                                          if (insideIDL)
                 {
                      isTypedef=FALSE;
                   current->section = Entry::NAMESPACE_SEC;
                   current->type = "library" ;
                   current->fileName  = yyFileName;
                   current->startLine = yyLineNr;
                   current->startColumn = yyColNr;
                   current->bodyLine  = yyLineNr;
                      BEGIN( CompoundName );
                 }
                 else
                 {
                   addType( current ) ;
                   current->name = QByteArray(scannerYYtext).trimmed();
                 }
               }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1479 "scanner.l"
{  // UNO IDL constant group
                 lineCount();
                 if (insideIDL)
                 {
                   isTypedef=FALSE;
                   current->section = Entry::NAMESPACE_SEC;
                   current->type = "constants";
                   current->fileName  = yyFileName;
                   current->startLine = yyLineNr;
                   current->startColumn = yyColNr;
                   current->bodyLine  = yyLineNr;
                   BEGIN( CompoundName );
                 }
                 else
                 {
                   addType( current ) ;
                   current->name = QByteArray(scannerYYtext).trimmed();
                 }
               }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1498 "scanner.l"
{ // UNO IDL service
                 lineCount();
                 if (insideIDL)
                 {
                   isTypedef=FALSE;
                   current->section = Entry::CLASS_SEC;
                   current->m_specFlags.spec = Entry::Service |
                     // preserve UNO IDL [optional] or published
                     (current->m_specFlags.spec & (Entry::Optional|Entry::Published));
                   addType( current ) ;
                   current->type += " service " ;
                   current->fileName  = yyFileName;
                   current->startLine = yyLineNr;
                   current->bodyLine  = yyLineNr;
                   BEGIN( CompoundName );
                 }
                 else // TODO is addType right? just copy/pasted
                 {
                   addType( current ) ;
                   current->name = QByteArray(scannerYYtext).trimmed();
                 }
               }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 1520 "scanner.l"
{ // UNO IDL singleton
                 lineCount();
                 if (insideIDL)
                 {
                   isTypedef=FALSE;
                   current->section = Entry::CLASS_SEC;
                   current->m_specFlags.spec = Entry::Singleton | (current->m_specFlags.spec & Entry::Published); // preserve
                   addType( current ) ;
                   current->type += " singleton " ;
                   current->fileName  = yyFileName;
                   current->startLine = yyLineNr;
                   current->bodyLine  = yyLineNr;
                   BEGIN( CompoundName );
                 }
                 else // TODO is addType right? just copy/pasted
                 {
                   addType( current ) ;
                   current->name = QByteArray(scannerYYtext).trimmed();
                 }
               }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1540 "scanner.l"
{ // M$/Corba/UNO IDL/Java interface
                 lineCount();
                                          if (insideIDL || insideJava || insideCSharp || insideD || insidePHP)
                 {
                      isTypedef=FALSE;
                   current->section = Entry::CLASS_SEC;
                   current->m_specFlags.spec = Entry::Interface |
                          // preserve UNO IDL [optional] or published
                          (current->m_specFlags.spec & (Entry::Optional|Entry::Published));
                   addType( current ) ;
                   current->type += " interface" ;
                   current->fileName  = yyFileName;
                   current->startLine = yyLineNr;
                   current->startColumn = yyColNr;
                   current->bodyLine  = yyLineNr;
                   BEGIN( CompoundName );
                 }
                 else
                 {
                   addType( current ) ;
                   current->name = QByteArray(scannerYYtext).trimmed();
                 }
                  }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1563 "scanner.l"
{ // Objective-C class implementation
                 lineCount();
                    isTypedef=FALSE;
                 current->section = Entry::OBJCIMPL_SEC;
                 language = current->lang = SrcLangExt_ObjC;
                 insideObjC = TRUE;
                 current->protection = protection = Public ;
                 addType( current ) ;
                 current->type += " implementation" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->bodyLine  = yyLineNr;
                 BEGIN( CompoundName );
                  }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1577 "scanner.l"
{ // Objective-C class interface, or Java attribute
                 lineCount();
                    isTypedef=FALSE;
                 current->section = Entry::CLASS_SEC;
                                          current->m_specFlags.spec = Entry::Interface;
                 if (!insideJava)
                 {
                   language = current->lang = SrcLangExt_ObjC;
                   insideObjC = TRUE;
                 }
                 current->protection = protection = Public ;
                 addType( current ) ;
                 current->type += " interface" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 BEGIN( CompoundName );
                  }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 1596 "scanner.l"
{ // Objective-C protocol definition
                 lineCount();
                    isTypedef=FALSE;
                 current->section = Entry::CLASS_SEC;
                 current->m_specFlags.spec = Entry::Protocol;
                 language = current->lang = SrcLangExt_ObjC;
                 insideObjC = TRUE;
                 current->protection = protection = Public ;
                 addType( current ) ;
                 current->type += " protocol" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 BEGIN( CompoundName );
                  }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1612 "scanner.l"
{ // Corba IDL exception
                 isTypedef=FALSE;
                 current->section = Entry::CLASS_SEC;
                 current->m_specFlags.spec = Entry::Exception | (current->m_specFlags.spec & Entry::Published); // preserve UNO IDL
                 addType( current ) ;
                 current->type += " exception" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 lineCount();
                 BEGIN( CompoundName );
                  }
	YY_BREAK
case 104:
#line 1626 "scanner.l"
case 105:
/* rule 105 can match eol */
#line 1627 "scanner.l"
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 1627 "scanner.l"
{
                                          QByteArray decl = scannerYYtext;
                 isTypedef=decl.indexOf("typedef")!=-1;
                                          bool isConst=decl.indexOf("const")!=-1;
                                          bool isVolatile=decl.indexOf("volatile")!=-1;
                 current->section = Entry::CLASS_SEC;
                 addType( current ) ;
                                          if (isConst)
                                          {
                                            current->type += " const";
                                          }
                                          else if (isVolatile)
                                          {
                                            current->type += " volatile";
                                          }
                 current->type += " class" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 if (scannerYYtext[0]=='@')
                 {
                   language = current->lang = SrcLangExt_ObjC;
                   insideObjC = TRUE;
                 }
                 lineCount() ;
                 if (scannerYYtext[scannerYYleng-1]=='{') unput('{');

                 if (insidePHP && current->m_specFlags.spec & Entry::Abstract)
                 {
                   // convert Abstract to AbstractClass

                   current->m_specFlags.m_isAbstractClass = true;
                   current->m_specFlags.spec = current->m_specFlags.spec & ~Entry::Abstract;
                 }
                 BEGIN( CompoundName ) ;
               }
	YY_BREAK
case 107:
#line 1665 "scanner.l"
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1665 "scanner.l"
{
                    isTypedef=FALSE;
                    current->section = Entry::CLASS_SEC;
                    current->m_specFlags.spec = Entry::Value;
                 addType( current ) ;
                 current->type += " value class" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 lineCount() ;
                 if (scannerYYtext[scannerYYleng-1]=='{') unput('{');
                 BEGIN( CompoundName ) ;
                  }
	YY_BREAK
case 109:
#line 1680 "scanner.l"
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 1680 "scanner.l"
{
                    isTypedef=FALSE;
                    current->section = Entry::CLASS_SEC;
                                          current->m_specFlags.spec = Entry::Ref;
                 addType( current ) ;
                 current->type += " ref class" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 lineCount() ;
                 if (scannerYYtext[scannerYYleng-1]=='{') unput('{');
                 BEGIN( CompoundName ) ;
                  }
	YY_BREAK
case 111:
#line 1695 "scanner.l"
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1695 "scanner.l"
{
                 isTypedef = FALSE;
                 current->section = Entry::CLASS_SEC;
                 current->m_specFlags.spec = Entry::Interface;
                 addType( current ) ;
                 current->type += " interface class" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 lineCount() ;
                 if (scannerYYtext[scannerYYleng-1]=='{') unput('{');
                 BEGIN( CompoundName ) ;
                  }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 1709 "scanner.l"
{
                    if (insideIDL)
                 {
                   isTypedef=FALSE;
                   current->section = Entry::CLASS_SEC;
                   addType( current ) ;
                   current->type += " coclass" ;
                   current->fileName  = yyFileName;
                   current->startLine = yyLineNr;
                   current->startColumn = yyColNr;
                   current->bodyLine  = yyLineNr;
                   lineCount() ;
                   BEGIN( CompoundName ) ;
                 }
                 else
                 {
                      addType(current);
                   current->name = scannerYYtext;
                   current->name = current->name.trimmed();
                   lineCount();
                 }
                  }
	YY_BREAK
case 114:
/* rule 114 can match eol */
#line 1732 "scanner.l"
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1732 "scanner.l"
{
                 QByteArray decl = scannerYYtext;
                 isTypedef=decl.indexOf("typedef")!=-1;
                 bool isConst=decl.indexOf("const")!=-1;
                 bool isVolatile=decl.indexOf("volatile")!=-1;
                 current->section = Entry::CLASS_SEC;
                 current->m_specFlags.spec = Entry::Struct | (current->m_specFlags.spec & Entry::Published);

                 // preserve UNO IDL
                 // bug 582676: can be a struct nested in an interface so keep insideObjC state
                 //current->objc    = insideObjC = FALSE;

                 addType( current ) ;
                                          if (isConst)
                                          {
                                            current->type += " const";
                                          }
                                          else if (isVolatile)
                                          {
                                            current->type += " volatile";
                                          }
                 current->type += " struct" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 lineCount() ;
                 if (scannerYYtext[scannerYYleng-1]=='{') unput('{');
                 BEGIN( CompoundName ) ;
               }
	YY_BREAK
case 116:
#line 1763 "scanner.l"
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 1763 "scanner.l"
{
                 isTypedef=FALSE;
                 current->section = Entry::CLASS_SEC;
                 current->m_specFlags.spec  = Entry::Struct | Entry::Value;
                 addType( current ) ;
                 current->type += " value struct" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 lineCount() ;
                 if (scannerYYtext[scannerYYleng-1]=='{') unput('{');
                 BEGIN( CompoundName ) ;
                  }
	YY_BREAK
case 118:
#line 1778 "scanner.l"
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 1778 "scanner.l"
{
                 isTypedef=FALSE;
                 current->section = Entry::CLASS_SEC;
                 current->m_specFlags.spec = Entry::Struct | Entry::Ref;
                 addType( current ) ;
                 current->type += " ref struct" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 lineCount() ;
                 if (scannerYYtext[scannerYYleng-1]=='{') unput('{');
                 BEGIN( CompoundName ) ;
                  }
	YY_BREAK
case 120:
#line 1793 "scanner.l"
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 1793 "scanner.l"
{
                 isTypedef=FALSE;
                 current->section = Entry::CLASS_SEC;
                 current->m_specFlags.spec = Entry::Struct | Entry::Interface;
                 addType( current ) ;
                 current->type += " interface struct";
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 lineCount() ;
                 if (scannerYYtext[scannerYYleng-1]=='{') unput('{');
                 BEGIN( CompoundName ) ;
                  }
	YY_BREAK
case 122:
/* rule 122 can match eol */
#line 1808 "scanner.l"
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1808 "scanner.l"
{
                    QByteArray decl=scannerYYtext;
                    isTypedef=decl.indexOf("typedef")!=-1;
                    bool isConst=decl.indexOf("const")!=-1;
                    bool isVolatile=decl.indexOf("volatile")!=-1;
                    current->section = Entry::CLASS_SEC;
                    current->m_specFlags.spec = Entry::Union;
                 // bug 582676: can be a struct nested in an interface so keep insideObjC state
                 //current->objc    = insideObjC = FALSE;
                 addType( current ) ;
                                          if (isConst)
                                          {
                                            current->type += " const";
                                          }
                                          else if (isVolatile)
                                          {
                                            current->type += " volatile";
                                          }
                 current->type += " union" ;
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 lineCount() ;
                 if (scannerYYtext[scannerYYleng-1]=='{') unput('{');
                 BEGIN( CompoundName ) ;
               }
	YY_BREAK
case 124:
/* rule 124 can match eol */
#line 1836 "scanner.l"
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 1836 "scanner.l"
{ // for IDL: typedef [something] enum
                 QByteArray text = scannerYYtext;
                 isTypedef = text.indexOf("typedef")!=-1;

                 bool isStrongEnum = text.indexOf("struct") != -1 || text.indexOf("class") != -1 || insideCSharp;

                 if (insideJava) {
                   current->section = Entry::CLASS_SEC;
                   current->m_specFlags.spec = Entry::Enum;
                 } else {
                   current->section = Entry::ENUM_SEC ;
                 }
                 addType( current ) ;
                 current->type += " enum";
                 if (isStrongEnum) {
                   current->m_specFlags.spec |= Entry::Strong;
                 }
                 current->fileName  = yyFileName;
                 current->startLine = yyLineNr;
                 current->startColumn = yyColNr;
                 current->bodyLine  = yyLineNr;
                 lineCount() ;
                 if (scannerYYtext[scannerYYleng-1]=='{') unput('{');
                 BEGIN( CompoundName ) ;
               }
	YY_BREAK
case 126:
/* rule 126 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 1861 "scanner.l"
{  // A::operator()<int>(int arg)
                    lineCount();
                 current->name += "()";
                 BEGIN( FindMembers );
               }
	YY_BREAK
case 127:
/* rule 127 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 1866 "scanner.l"
{
                    lineCount();
                 current->name += scannerYYtext ;
                 current->name = current->name.simplified();
                 BEGIN( FindMembers ) ;
                  }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1872 "scanner.l"
{ // can occur when importing members
                    unput(';');
                 BEGIN( FindMembers ) ;
                  }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1876 "scanner.l"
{
                 lineCount();
                 current->name += *scannerYYtext ;
               }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1880 "scanner.l"
{ /* skip guided templ specifiers */ }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1881 "scanner.l"
{
                 current->name = current->name.simplified();
                 unput(*scannerYYtext);
                 BEGIN( FindMembers ) ;
               }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1886 "scanner.l"
{  // generic is a C++/CLI extension
               lineCount();
               if (current->tArgLists==0) {
                   current->tArgLists = new QList<ArgumentList>;
               }

               ArgumentList temp;
               current->tArgLists->append(temp);

               ArgumentList *al = &current->tArgLists->last();

               currentArgumentList = al;
               templateStr = "<";

               fullArgString = templateStr;
               copyArgString = &templateStr;
               currentArgumentContext = FindMembers;

               BEGIN( ReadTempArgs );
            }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1906 "scanner.l"
{ // namespace alias
                 lineCount();
                 BEGIN( NSAliasName );
            }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1910 "scanner.l"
{
                 aliasName = scannerYYtext;
                 BEGIN( NSAliasArg );
            }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1914 "scanner.l"
{
                 //if (current_root->name.isEmpty())
                 //{
                     // TODO: namespace aliases are now treated as global entities
                     // while they should be aware of the scope they are in
                     Doxy_Globals::namespaceAliasDict.insert(aliasName, scannerYYtext);
                 //}
                 //else
                 //{
                 //  Doxy_Globals::namespaceAliasDict.insert(current_root->name+"::"+aliasName,
                 //  new QByteArray(current_root->name+"::"+scannerYYtext));
                 //}
            }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1927 "scanner.l"
{
                    BEGIN( FindMembers );
                  }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1930 "scanner.l"
{
                    lineCount();
                 aliasName=scannerYYtext;
                 BEGIN(PHPUseAs);
               }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1935 "scanner.l"
{
                    lineCount();
                 current->name=removeRedundantWhiteSpace(substitute(scannerYYtext,"\\","::"));
                    //printf("PHP: adding use relation: %s\n",current->name.data());
                 current->fileName = yyFileName;

                 // add a using declaraton
                    current->section=Entry::USINGDECL_SEC;
                 current_root->addSubEntry(current, current_root);
                 current = QMakeShared<Entry>(*current);

                 // also add it as a using directive
                 current->section=Entry::USINGDIR_SEC;
                 current_root->addSubEntry(current, current_root);
                 current = QMakeShared<Entry>();
                 initEntry();
                 aliasName.resize(0);
               }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1953 "scanner.l"
{
                    lineCount();
                  }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1956 "scanner.l"
{
                    //printf("PHP: adding use as relation: %s->%s\n",scannerYYtext,aliasName.data());
                 Doxy_Globals::namespaceAliasDict.insert(scannerYYtext,
                      removeRedundantWhiteSpace(substitute(aliasName,"\\","::")));
                 aliasName.resize(0);
                  }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1962 "scanner.l"
{
                 if (*scannerYYtext==',')
                 {
                   BEGIN(PHPUse);
                 }
                 else
                 {
                      BEGIN(FindMembers);
                 }
                  }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 1972 "scanner.l"
{ // package import => add as a using directive
                    lineCount();
                    QByteArray scope=scannerYYtext;
                 current->name=removeRedundantWhiteSpace(
substitute(scope.left(scope.length()-1),".","::"));

                 current->fileName = yyFileName;
                    current->section=Entry::USINGDIR_SEC;
                 current_root->addSubEntry(current, current_root);
                 current = QMakeShared<Entry>();
                 initEntry();
                 BEGIN(Using);
                  }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1985 "scanner.l"
{ // class import => add as a using declaration
                                          lineCount();
                    QByteArray scope=scannerYYtext;
                 current->name=removeRedundantWhiteSpace(substitute(scope,".","::"));
                 current->fileName = yyFileName;
                 if (insideD)
                 {
                   current->section=Entry::USINGDIR_SEC;
                 }
                 else
                 {
                   //printf("import name = %s -> %s\n",scannerYYtext,current->name.data());
                   current->section=Entry::USINGDECL_SEC;
                 }
                 current_root->addSubEntry(current, current_root);
                 current = QMakeShared<Entry>();
                 initEntry();
                 BEGIN(Using);
                  }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 2004 "scanner.l"
{
                 current->startLine=yyLineNr;
                 current->startColumn = yyColNr;
                                          lineCount();
                                          BEGIN(Using);
                                        }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 2010 "scanner.l"
{ lineCount(); BEGIN(UsingDirective); }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 2011 "scanner.l"
{
                                          lineCount();
                    current->name=scannerYYtext;
                 current->fileName = yyFileName;
                    current->section=Entry::USINGDECL_SEC;
                 current->startLine = yyLineNr;
                 current_root->addSubEntry(current, current_root);

                 previous = current;
                 current = QMakeShared<Entry>();

                 if (insideCSharp) /* Hack: in C# a using declaration and
                        directive have the same syntax, so we
                        also add it as a using directive here
                      */
                 {
                   current->name=scannerYYtext;
                   current->fileName = yyFileName;
                   current->startLine = yyLineNr;
                   current->startColumn = yyColNr;
                   current->section=Entry::USINGDIR_SEC;
                   current_root->addSubEntry(current, current_root);
                   current = QMakeShared<Entry>();
                 }
                 initEntry();
                 BEGIN(Using);
                  }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 2038 "scanner.l"
{ // C++11 style template alias?
                                          BEGIN(UsingAlias);
                                        }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 2041 "scanner.l"
{
                 previous->section=Entry::VARIABLE_SEC;
                 previous->type = "typedef "+previous->args;
                 previous->type=previous->type.simplified();
                 previous->args.resize(0);
                 previous->name=previous->name.trimmed();
                 previous->bodyLine = yyLineNr;
                 previous->m_specFlags.spec |= Entry::Alias;
                 BEGIN(FindMembers);
                                        }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 2051 "scanner.l"
{
                 docBlockContext   = UsingAliasEnd;
                 docBlockInBody    = FALSE;
                 docBlockAutoBrief = ( scannerYYtext[scannerYYleng-2]=='*' && Config::getBool("javadoc-auto-brief") ) ||
                                     ( scannerYYtext[scannerYYleng-2]=='!' && Config::getBool("qt-auto-brief") );
                                          QByteArray indent;
                                          indent.fill(' ',computeIndent(scannerYYtext,g_column));
                                          docBlock=indent;
                    lineCount();

                 docBlockTerm = ';';
                 if (scannerYYtext[scannerYYleng-3]=='/')
                 {
                   startCommentBlock(TRUE);
                   BEGIN( DocLine );
                 }
                 else
                 {
                   startCommentBlock(FALSE);
                   BEGIN( DocBlock );
                 }
                  }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 2073 "scanner.l"
{
                                          previous->args+=scannerYYtext;
                                        }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 2076 "scanner.l"
{
                                          previous->args+=scannerYYtext;
                                          lineCount();
                                        }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 2080 "scanner.l"
{
                                          previous->doc   = current->doc;
                                          previous->brief = current->brief;
                                          current->doc.resize(0);
                                          current->brief.resize(0);
                                          unput(';');
                                          BEGIN(UsingAlias);
                                        }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 2088 "scanner.l"
{ current->name=removeRedundantWhiteSpace(scannerYYtext);
                 current->fileName = yyFileName;
                 current->section=Entry::USINGDIR_SEC;
                 current_root->addSubEntry(current, current_root);
                 current = QMakeShared<Entry>();
                 initEntry();
                 BEGIN(Using);
                  }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 2096 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 2097 "scanner.l"
{ // guided template decl
                 QByteArray n=scannerYYtext;
                 addType( current );
                 current->name=n.left(n.length()-2);
               }
	YY_BREAK
case 156:
/* rule 156 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 2102 "scanner.l"
{ // Note: this could be a return type
                                          roundCount=0;
                 sharpCount=0;
                 lineCount();
                 addType( current );
                    current->name=scannerYYtext;
                 current->name=current->name.trimmed();
                 //current->scopeSpec.resize(0);
                 // currentTemplateSpec = &current->scopeSpec;
                 if (nameIsOperator(current->name))
                   BEGIN( Operator );
                 else
                   BEGIN( EndTemplate );
               }
	YY_BREAK
case 157:
/* rule 157 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 2116 "scanner.l"
{
                 sharpCount=0;
                 roundCount=0;
                 lineCount();
                 current->name+=((QByteArray)scannerYYtext).trimmed();
                 // current->memberSpec.resize(0);
                 // currentTemplateSpec = &current->memberSpec;
                 if (nameIsOperator(current->name))
                   BEGIN( Operator );
                 else
                   BEGIN( EndTemplate );
                  }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 2128 "scanner.l"
{
                    if (!insidePHP)
                 {
                   REJECT;
                 }
                 else
                 {
                                            lastHereDocContext = YY_START;
                   BEGIN(HereDoc);
                 }
                  }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 2139 "scanner.l"
{
                    current->name+=scannerYYtext;
                    // *currentTemplateSpec+=scannerYYtext;
                  }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 2143 "scanner.l"
{
                                          if (roundCount==0)
                                          {
                      // *currentTemplateSpec+='<';
                   sharpCount++;
                                          }
                    current->name+=scannerYYtext;
               }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 2151 "scanner.l"
{
                    if (insideJava || insideCSharp || insideCli || roundCount==0)
                 {
                   unput('>');
                   unput(' ');
                   unput('>');
                 }
                 else
                 {
                      current->name+=scannerYYtext;
                 }
                    // *currentTemplateSpec+=scannerYYtext;
                  }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 2164 "scanner.l"
{
                    current->name+='>';
                 // *currentTemplateSpec+='>';
                 if (roundCount==0 && --sharpCount<=0)
                 {
                   //printf("Found %s\n",current->name.data());
                   BEGIN(FindMembers);
                 }
               }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 2173 "scanner.l"
{
                    lineCount();
                    current->name+='>';
                 // *currentTemplateSpec+='>';
                 if (roundCount==0 && --sharpCount<=0)
                 {
                   current->bodyLine = yyLineNr;
                   current->args = "(";
                   currentArgumentContext = FuncQual;
                   fullArgString = current->args;
                   copyArgString = &current->args;
                   BEGIN( ReadFuncArgType ) ;
                 }
               }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 2187 "scanner.l"
{ // function pointer returning a template instance
                    lineCount();
                    current->name+='>';
                                          if (roundCount==0)
                                          {
                   BEGIN(FindMembers);
                                          }
                  }
	YY_BREAK
case 165:
/* rule 165 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 2195 "scanner.l"
{
                    lineCount();
                    current->name+='>';
                    // *currentTemplateSpec+='>';
                 if (roundCount==0 && --sharpCount<=0)
                 {
                   BEGIN(FindMemberName);
                 }
                  }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 2204 "scanner.l"
{ current->name+=*scannerYYtext;
                                          roundCount++;
                                        }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 2207 "scanner.l"
{ current->name+=*scannerYYtext;
                                          if (roundCount>0) roundCount--;
                                        }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 2210 "scanner.l"
{
                    current->name+=*scannerYYtext;
                    // *currentTemplateSpec+=*scannerYYtext;
               }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 2214 "scanner.l"
{
                 if (insidePHP)
                 {
                   current->bodyLine = yyLineNr;
                   BEGIN( DefinePHP );
                 }
                 else
                   REJECT;
               }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 2223 "scanner.l"
{ // PHP heredoc
                    g_delimiter = scannerYYtext;
                                          *pCopyHereDocGString += scannerYYtext;
                 BEGIN(CopyHereDocEnd);
                                        }
	YY_BREAK
case 171:
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 2228 "scanner.l"
{ // PHP nowdoc
                 g_delimiter = &scannerYYtext[1];
                 *pCopyHereDocGString += scannerYYtext;
                 BEGIN(CopyHereDocEnd);
                                        }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 2233 "scanner.l"
{ // PHP heredoc
                 g_delimiter = scannerYYtext;
                 BEGIN(HereDocEnd);
                  }
	YY_BREAK
case 173:
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 2237 "scanner.l"
{ // PHP nowdoc
                  g_delimiter = &scannerYYtext[1];
                 BEGIN(HereDocEnd);
                  }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 2241 "scanner.l"
{ // id at start of the line could mark the end of the block
                    if (g_delimiter==scannerYYtext) // it is the end marker
                 {
                      BEGIN(lastHereDocContext);
                 }
                  }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 2247 "scanner.l"
{ }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2248 "scanner.l"
{ // id at start of the line could mark the end of the block
                 *pCopyHereDocGString += scannerYYtext;
                    if (g_delimiter==scannerYYtext) // it is the end marker
                 {
                      BEGIN(lastHereDocContext);
                 }
                  }
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 2255 "scanner.l"
{
                 *pCopyHereDocGString += scannerYYtext;
               }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 2258 "scanner.l"
{
                 *pCopyHereDocGString += scannerYYtext;
               }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2261 "scanner.l"
{ // Q_object, ignore
                  }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 2263 "scanner.l"
{ // Q_enum, ignore
                  }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 2265 "scanner.l"
{ // Q_property
                 current->protection = Public;
                 current->mtype = MethodTypes::Property;
                 current->type.resize(0);
                 BEGIN(QtPropType);
                  }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 2271 "scanner.l"
{ // start of property arguments
                  }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2273 "scanner.l"
{ // end of property arguments
                 unput(';');
                 BEGIN(FindMembers);
                  }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2277 "scanner.l"
{
                 current->type+=scannerYYtext;
                  }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2280 "scanner.l"
{
                 current->type+=scannerYYtext;
                  }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 2283 "scanner.l"
{
                 current->type+=scannerYYtext;
                 BEGIN(QtPropName);
                  }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2287 "scanner.l"
{
                  current->name=scannerYYtext;
                  BEGIN(QtPropAttr);
                  }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2291 "scanner.l"
{
                 current->m_specFlags.m_isReadable = true;
                 BEGIN(QtPropRead);
                  }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 2295 "scanner.l"
{
                 current->m_specFlags.m_isWritable = true;
                 BEGIN(QtPropWrite);
                  }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 2299 "scanner.l"
{ // reset method => not supported yet
                  }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 2301 "scanner.l"
{ // scriptable property => not supported yet
                  }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2303 "scanner.l"
{ // designable property => not supported yet
                  }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 2305 "scanner.l"
{
                 current->m_read = scannerYYtext;
                 BEGIN(QtPropAttr);
                  }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 2309 "scanner.l"
{
                 current->m_write = scannerYYtext;
                 BEGIN(QtPropAttr);
                  }
	YY_BREAK
/* begin CopperSpice specific parsing */
case 195:
YY_RULE_SETUP
#line 2315 "scanner.l"
{ // cs_object
                 BEGIN(CsObject);
               }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 2318 "scanner.l"
{
                 BEGIN(CsObjectName);
               }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 2321 "scanner.l"
{
                 // class name, do nothing
                 BEGIN(CsObjectClose);
               }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2325 "scanner.l"
{ // end of cs_object
                 BEGIN(FindMembers);
               }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 2328 "scanner.l"
{ // ignore this macro
                 roundCount = 0;
                 BEGIN(CsIgnore);
               }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 2332 "scanner.l"
{
                 ++roundCount;
               }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 2335 "scanner.l"
{ // end of macro ignore
                 --roundCount;

                 if (roundCount == 0)  {
                    BEGIN(FindMembers);
                 }
               }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 2342 "scanner.l"
{ // cs_register_enum
                 BEGIN(CsRegEnum);
               }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 2345 "scanner.l"
{
                 BEGIN(FindMembers);
               }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 2348 "scanner.l"
{ // end property
                 lineCount();
                 current->fileName    = yyFileName;
                 current->startLine   = yyLineNr;
                 current->startColumn = yyColNr;

                 current->name        = current->name.trimmed();
                 current->section     = Entry::VARIABLE_SEC;

                 // unknown data type, decipher later on
                 // current->type = "";

                 current_root->addSubEntry(current, current_root);
                 current = QMakeShared<Entry>();
                 initEntry();
                 BEGIN(FindMembers);
                  }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 2365 "scanner.l"
{
                 current->protection    = Public;
                 current->mtype = MethodTypes::Property;
                 current->m_specFlags.m_isReadable = true;
                 current->type.resize(0);
                 BEGIN(CsPropReadVar);
                  }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 2372 "scanner.l"
{
                  }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 2374 "scanner.l"
{   // cs property read name
                 current->name = scannerYYtext;
               }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 2377 "scanner.l"
{
                 BEGIN(CsPropReadMethod);
                  }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 2380 "scanner.l"
{
                 // cs property read method
                 current->m_read = scannerYYtext;
                 BEGIN(CsPropClose);
                  }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 2385 "scanner.l"
{
                 current->protection    = Public;
                 current->mtype = MethodTypes::Property;
                 current->m_specFlags.m_isWritable = true;
                 current->type.resize(0);
                 BEGIN(CsPropWriteVar);
                  }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 2392 "scanner.l"
{
                  }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 2394 "scanner.l"
{
                 // cs property write name
                 current->name = scannerYYtext;
                  }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 2398 "scanner.l"
{
                 BEGIN(CsPropWriteMethod);
                  }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 2401 "scanner.l"
{
                 current->m_write = scannerYYtext;
                 BEGIN(CsPropClose);
                  }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 2405 "scanner.l"
{
                 current->protection    = Public;
                 current->mtype = MethodTypes::Property;
                 current->m_specFlags.m_isReset = true;
                 current->type.resize(0);
                 BEGIN(CsPropResetVar);
                  }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 2412 "scanner.l"
{
                  }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 2414 "scanner.l"
{
                 current->name = scannerYYtext;
                  }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 2417 "scanner.l"
{
                 BEGIN(CsPropResetMethod);
                  }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 2420 "scanner.l"
{
                 current->m_reset = scannerYYtext;
                 BEGIN(CsPropClose);
                  }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 2424 "scanner.l"
{
                 current->protection    = Public;
                 current->mtype = MethodTypes::Property;
                 current->m_specFlags.m_isNotify = true;
                 current->type.resize(0);
                 BEGIN(CsPropNotifyVar);
                  }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 2431 "scanner.l"
{
                  }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 2433 "scanner.l"
{
                 current->name = scannerYYtext;
                  }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 2436 "scanner.l"
{
                 BEGIN(CsPropNotifyMethod);
                  }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 2439 "scanner.l"
{
                 current->m_notify = scannerYYtext;
                 BEGIN(CsPropClose);
                  }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 2443 "scanner.l"
{
                 current->protection    = Public;
                 current->mtype = MethodTypes::Property;
                 current->m_specFlags.m_isRevision = true;
                 current->type.resize(0);
                 BEGIN(CsPropVar);
                  }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 2450 "scanner.l"
{
                 current->protection     = Public;
                 current->mtype = MethodTypes::Property;
                 current->m_specFlags.m_isDesignable = true;
                 current->type.resize(0);
                 BEGIN(CsPropVar);
                  }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 2457 "scanner.l"
{
                 current->protection    = Public;
                 current->mtype = MethodTypes::Property;
                 current->m_specFlags.m_isScriptable = true;
                 current->type.resize(0);
                 BEGIN(CsPropVar);
                 }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 2464 "scanner.l"
{
                 current->protection    = Public;
                 current->mtype = MethodTypes::Property;
                 current->m_specFlags.m_isStored = true;
                 current->type.resize(0);
                 BEGIN(CsPropVar);
                 }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 2471 "scanner.l"
{
                 current->protection    = Public;
                 current->mtype = MethodTypes::Property;
                 current->m_specFlags.m_isUser  = true;
                 current->type.resize(0);
                 BEGIN(CsPropVar);
                 }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 2478 "scanner.l"
{
                 current->protection    = Public;
                 current->mtype = MethodTypes::Property;
                 current->m_specFlags.m_isConstant  = true;
                 current->type.resize(0);
                 BEGIN(CsPropJustVar);
                 }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 2485 "scanner.l"
{
                 current->protection    = Public;
                 current->mtype = MethodTypes::Property;
                 current->m_specFlags.m_isFinal = true;
                 current->type.resize(0);
                 BEGIN(CsPropJustVar);
                }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 2492 "scanner.l"
{
                 roundCount = 1;
                }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 2495 "scanner.l"
{
                 current->name = scannerYYtext;
                }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 2498 "scanner.l"
{
                 BEGIN(CsPropMethod);
                }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 2501 "scanner.l"
{
                }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 2503 "scanner.l"
{
                 ++roundCount;
                }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 2506 "scanner.l"
{
                 --roundCount;

                 if (roundCount == 0)  {
                    lineCount();
                    current->fileName    = yyFileName;
                    current->startLine   = yyLineNr;
                    current->startColumn = yyColNr;

                    current->name        = current->name.trimmed();
                    current->section     = Entry::VARIABLE_SEC;

                    current_root->addSubEntry(current, current_root);
                    current = QMakeShared<Entry>();
                    initEntry();
                    BEGIN(FindMembers);
                 }
           }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 2524 "scanner.l"
{
                }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 2526 "scanner.l"
{
                 current->name = scannerYYtext;
                 BEGIN(CsPropClose);
                }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 2530 "scanner.l"
{
                  current->mtype = MethodTypes::Signal;
                  current->type.resize(0);
                  BEGIN(CsSignal);
               }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 2535 "scanner.l"
{
                  BEGIN(CsSignalProtection);
                }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 2538 "scanner.l"
{
                  Protection visibility = getProtection(scannerYYtext);
                  current->protection = visibility;
                }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 2542 "scanner.l"
{
                  BEGIN(CsSignalSlotMethod);
                }
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 2545 "scanner.l"
{
                  yyBegColNr  = yyColNr;
                  yyBegLineNr = yyLineNr;
                  lineCount();

                  if (qstrcmp(scannerYYtext,"decltype") == 0) {
                     // C++11 decltype(x)
                     current->type += scannerYYtext;
                     BEGIN(DeclType);

                  } else {
                     addType(current);
                     current->name += scannerYYtext;

                     if (current->name.startsWith("static ")){
                        current->stat = true;
                        current->name = current->name.mid(7);

                     } else if (current->name.startsWith("inline ") ) {

                        if (current->type.isEmpty()) {
                           current->type ="inline";
                        } else {
                           current->type +="inline ";
                        }

                        current->name = current->name.mid(7);

                     } else if (current->name.startsWith("const ") ) {

                        if (current->type.isEmpty()) {
                           current->type = "const";

                        } else {
                           current->type += "const ";
                        }

                        current->name = current->name.mid(6);
                     }

                     QByteArray tmp = scannerYYtext;

                     if (nameIsOperator(tmp)) {
                        // BEGIN(Operator);    BROOM - resolve later on

                     } else {
                        BEGIN(CsSignalSlotMethod);
                     }
                  }
             }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 2595 "scanner.l"
{
                 if (! current->name.isEmpty()) {
                   current->args     = scannerYYtext;
                   current->bodyLine = yyLineNr;
                   fullArgString     = current->args;
                   copyArgString     = &current->args;
                   currentArgumentContext = CsSignalSlotClose;
                   BEGIN(ReadFuncArgType);
                 }
               }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 2605 "scanner.l"
{  // end of cs signal
                 lineCount();
                 current->fileName    = yyFileName;
                 current->startLine   = yyLineNr;
                 current->startColumn = yyColNr;

                 current->name        = current->name.trimmed();
                 current->section     = Entry::FUNCTION_SEC;

                 currentArgumentContext = FindMembers;
                 current_root->addSubEntry(current, current_root);
                 current = QMakeShared<Entry>();
                 initEntry();

                 BEGIN(FindMembers);
               }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 2621 "scanner.l"
{  // cs_signal_2, do nothing
                 BEGIN(CsSignalSlot2);
               }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 2624 "scanner.l"
{  // cs_slot_2, do nothing
                 BEGIN(CsSignalSlot2);
               }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 2627 "scanner.l"
{  // cs_signal_overload, do nothing
                 BEGIN(CsSignalSlot2);
               }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 2630 "scanner.l"
{  // cs_slot_overload, do nothing
                 BEGIN(CsSignalSlot2);
               }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 2633 "scanner.l"
{
                  roundCount = 1;
                  BEGIN(CsSignalSlot2Name);
                }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 2637 "scanner.l"
{
                  current->name += scannerYYtext;
                }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 2640 "scanner.l"
{
                  BEGIN(CsSignalSlot2Extra);
                }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 2643 "scanner.l"
{
                 ++roundCount;
               }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 2646 "scanner.l"
{
               }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 2648 "scanner.l"
{ // end of signal2 or slot2 or overload
                 --roundCount;

                 if (roundCount == 0)  {
                    current = QMakeShared<Entry>();
                    initEntry();
                    BEGIN(FindMembers);
                 }
           }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 2657 "scanner.l"
{
                  current->mtype = MethodTypes::Slot;
                  current->type.resize(0);
                  BEGIN(CsSlotProtection);
               }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 2662 "scanner.l"
{
                  Protection visibility = getProtection(scannerYYtext);
                  current->protection = visibility;
               }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 2666 "scanner.l"
{
                  BEGIN(CsSignalSlotMethod);
               }
	YY_BREAK
/* end CopperSpice specific parsing */
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 2672 "scanner.l"
{
                 current->name=scannerYYtext;
                 BEGIN(FindMembers);
               }
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 2676 "scanner.l"
{
                 if (insideCpp || insideObjC)  {
                     current->id = ClangParser::instance()->lookup(yyLineNr,scannerYYtext);
                 }

                 yyBegColNr=yyColNr;
                 yyBegLineNr=yyLineNr;
                 lineCount();

                 if (insideIDL && scannerYYleng==9 && qstrcmp(scannerYYtext,"cpp_quote") == 0) {
                   BEGIN(CppQuote);
                 } else if ((insideIDL || insideJava || insideD) && scannerYYleng==6 && qstrcmp(scannerYYtext,"import")==0) {
                   if (insideIDL)
                     BEGIN(NextSemi);
                   else // insideJava or insideD
                     BEGIN(JavaImport);
                 }
                 else if (insidePHP && qstrcmp(scannerYYtext,"use")==0)
                 {
                   BEGIN(PHPUse);
                 }
                 else if (insideJava && qstrcmp(scannerYYtext,"package")==0)
                 {
                   lineCount();
                   BEGIN(PackageName);
                 }
                 else if (insideIDL && qstrcmp(scannerYYtext,"case")==0)
                 {
                   BEGIN(IDLUnionCase);
                 }
                 else if (insideTryBlock && qstrcmp(scannerYYtext,"catch")==0)
                 {
                   insideTryBlock=FALSE;
                   BEGIN(TryFunctionBlock);
                 } else if (insideCpp && qstrcmp(scannerYYtext,"alignas")==0) {
                   lastAlignAsContext = YY_START;
                   BEGIN(AlignAs);
                 }
                 else if (insideJS && qstrcmp(scannerYYtext,"var")==0)
                 { // javascript variable
                   current->type="var";
                 }
                 else if (insideJS && qstrcmp(scannerYYtext,"function")==0)
                 { // javascript function
                   current->type="function";
                 }
                 else if (insideCSharp && qstrcmp(scannerYYtext,"this")==0)
                 {
                   // C# indexer
                   addType( current ) ;
                   current->name="this";
                   BEGIN(CSIndexer);
                 }
                 else if (insideCpp && qstrcmp(scannerYYtext,"static_assert")==0)
                 {
                    // C++11 static_assert
                    BEGIN(StaticAssert);
                 }
                    else if (insideCpp && qstrcmp(scannerYYtext,"decltype")==0)
                 {
                    // C++11 decltype(x)
                    current->type+=scannerYYtext;
                    BEGIN(DeclType);
                 }
                 else
                 {
                   if (YY_START == FindMembers) {
                     addType(current) ;
                   }

                   bool javaLike = insideJava || insideCSharp || insideD || insidePHP || insideJS;
                   if (javaLike && qstrcmp(scannerYYtext,"public")==0)
                   {
                     current->protection = Public;
                   }
                   else if (javaLike && qstrcmp(scannerYYtext,"protected")==0)
                   {
                     current->protection = Protected;
                   }
                   else if (javaLike && qstrcmp(scannerYYtext,"internal")==0)
                   {
                     current->protection = Package;
                   }
                   else if (javaLike && qstrcmp(scannerYYtext,"private")==0)
                   {
                     current->protection = Private;
                   }
                   else if (javaLike && qstrcmp(scannerYYtext,"static")==0)
                   {
                     if (YY_START==FindMembers)
                       current->name  = scannerYYtext;
                     else
                       current->name += scannerYYtext;
                       current->stat = TRUE;
                   }
                   else
                   {
                     if (YY_START==FindMembers)
                       current->name  = scannerYYtext;
                     else
                       current->name += scannerYYtext;
                     if (current->name.left(7)=="static ")
                     {
                  current->stat = TRUE;
                  current->name= current->name.mid(7);
                     }
                     else if (current->name.left(7)=="inline ")
                     {
                  if (current->type.isEmpty())
                  {
                    current->type="inline";
                  }
                  else
                  {
                    current->type+="inline ";
                  }
                  current->name= current->name.mid(7);
                     }
                     else if (current->name.left(6)=="const ")
                     {
                  if (current->type.isEmpty())
                  {
                    current->type="const";
                  }
                  else
                  {
                    current->type+="const ";
                  }
                  current->name=current->name.mid(6);
                     }
                   }
                   QByteArray tmp=scannerYYtext;
                   if (nameIsOperator(tmp)) {
                     BEGIN(Operator);
                   } else {
                     BEGIN(FindMembers);
                   }
                 }
               }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 2815 "scanner.l"
{
                 lastSkipRoundContext = FindMembers;
                 roundCount=0;
                                          BEGIN(SkipRound);
                                        }
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 2820 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 2821 "scanner.l"
{ // variable with static_assert as name?
                                          unput(*scannerYYtext);
                                          BEGIN(FindMembers);
                                        }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 2825 "scanner.l"
{
                 current->type+=scannerYYtext;
                    lastRoundContext=FindMembers;
                    pCopyRoundString=&current->type;
                 roundCount=0;
                                          BEGIN(CopyRound);
                                        }
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 2832 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 2833 "scanner.l"
{
                                          unput(*scannerYYtext);
                                          BEGIN(FindMembers);
                                        }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 2837 "scanner.l"
{
                    current->name+=removeRedundantWhiteSpace(scannerYYtext);
                    BEGIN(FindMembers);
                  }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 2841 "scanner.l"
{ // some number where we did not expect one
                  }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 2843 "scanner.l"
{
                    if (insideJava || insideCSharp || insideD)
                 {
                   current->name+=".";
                 }
                  }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 2849 "scanner.l"
{
                 current->name+=scannerYYtext;
                  }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 2852 "scanner.l"
{
                    insideCppQuote=TRUE;
                    BEGIN(FindMembers);
                  }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 2856 "scanner.l"

	YY_BREAK
case 274:
YY_RULE_SETUP
#line 2857 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 2858 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 2859 "scanner.l"

	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 2860 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 2861 "scanner.l"
{
                 curlyCount=0;
                 lastCurlyContext = TryFunctionBlockEnd ;
                    BEGIN( SkipCurly );
               }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 2866 "scanner.l"

	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 2867 "scanner.l"
{ lineCount(); BEGIN(TryFunctionBlock); // {BN}* added to fix bug 611193
               }
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 2869 "scanner.l"
{ unput(*scannerYYtext); // rule added to fix bug id 601138
                    BEGIN( FindMembers );
               }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 2872 "scanner.l"
{ unput(*scannerYYtext);
                    BEGIN( FindMembers );
               }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 2875 "scanner.l"
{
                    insideCppQuote=FALSE;
                 BEGIN(FindMembers);
                  }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 2879 "scanner.l"
{ if (insidePHP)
                   REJECT;
                 lastCPPContext = YY_START;
                 BEGIN( SkipCPP ) ;
               }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 2884 "scanner.l"
{
                    if (insidePHP)
                   REJECT;
                    current->bodyLine = yyLineNr;
                                          lastDefineContext = YY_START;
                    BEGIN( Define );
                  }
	YY_BREAK
case 286:
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 2891 "scanner.l"
{ /* line control directive */
                                          yyLineNr = atoi(&scannerYYtext[1]);
                 //printf("setting line number to %d\n",yyLineNr);
                 lastPreLineCtrlContext = YY_START;
                 if (YY_START==ReadBody ||
                     YY_START==ReadNSBody ||
                     YY_START==ReadBodyIntf)
                 {
                      current->program+=scannerYYtext;
                 }
                    BEGIN( PreLineCtrl );
                  }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 2903 "scanner.l"
{
                      yyFileName = stripQuotes(scannerYYtext);
                 if (lastPreLineCtrlContext==ReadBody ||
                     lastPreLineCtrlContext==ReadNSBody ||
                     lastPreLineCtrlContext==ReadBodyIntf)
                 {
                   current->program+=scannerYYtext;
                 }
                  }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 2912 "scanner.l"
{
                 if (lastPreLineCtrlContext==ReadBody ||
                     lastPreLineCtrlContext==ReadNSBody ||
                     lastPreLineCtrlContext==ReadBodyIntf)
                 {
                      current->program+=scannerYYtext;
                 }
                                        }
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 2920 "scanner.l"
{
                 if (lastPreLineCtrlContext==ReadBody ||
                     lastPreLineCtrlContext==ReadNSBody ||
                     lastPreLineCtrlContext==ReadBodyIntf)
                 {
                      current->program+=scannerYYtext;
                 }
                                          lineCount();
                    BEGIN( lastPreLineCtrlContext );
                  }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 2930 "scanner.l"

	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 2931 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 2932 "scanner.l"
{ lineCount();
                 BEGIN( lastCPPContext) ;
               }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 2935 "scanner.l"
{
                    current->name = scannerYYtext;
                 current->name = current->name.left(current->name.length()-1).trimmed();
                 current->args = "(";
                    current->bodyLine = yyLineNr;
                 currentArgumentContext = DefineEnd;
                 fullArgString=current->args;
                 copyArgString=&current->args;
                 BEGIN( ReadFuncArgType ) ;
                  }
	YY_BREAK
/*
<DefineArg>")"             {
                    //printf("Define with args\n");
                    current->args += ')';
                    BEGIN( DefineEnd );
                  }
<DefineArg>.            {
                    current->args += *scannerYYtext;
                  }
  */
case 294:
YY_RULE_SETUP
#line 2955 "scanner.l"
{
                    //printf("Define `%s' without args\n",scannerYYtext);
                                          if (insideCpp || insideObjC)
                                          {
                                            current->id = ClangParser::instance()->lookup(yyLineNr,scannerYYtext);
                                          }
                    current->bodyLine = yyLineNr;
                    current->name = scannerYYtext;
                 BEGIN(DefineEnd);
                  }
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 2965 "scanner.l"
{
                    //printf("End define: doc=%s docFile=%s docLine=%d\n",current->doc.data(),current->docFile.data(),current->docLine);
                 lineCount();
                 current->fileName   = yyFileName;
                 current->startLine  = yyLineNr;
                 current->startColumn = yyColNr;
                 current->type.resize(0);
                    current->args       = current->args.simplified();
                    current->name       = current->name.trimmed();
                 current->section    = Entry::DEFINE_SEC;
                 current_root->addSubEntry(current, current_root);
                 current = QMakeShared<Entry>();
                 initEntry();
                 BEGIN(lastDefineContext);
                  }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 2980 "scanner.l"
{
                    //printf("End define\n");
                 current->fileName   = yyFileName;
                 current->startLine  = yyLineNr;
                 current->startColumn = yyColNr;
                 current->type.resize(0);
                 current->type       = "const";

                 QByteArray init = current->initializer.data();
                    init = init.simplified();
                    init = init.left(init.length()-1);

                 current->initializer = init;
                    current->name       = current->name.trimmed();
                 current->section    = Entry::VARIABLE_SEC;
                 current_root->addSubEntry(current, current_root);
                 current = QMakeShared<Entry>();
                 initEntry();
                 BEGIN(FindMembers);
                  }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 3000 "scanner.l"

	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 3001 "scanner.l"
{
                                          lineCount();
                  }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 3004 "scanner.l"
{
                 if (insideIDL && insideCppQuote)
                 {
                   BEGIN(EndCppQuote);
                 }
                 else
                 {
                   lastStringContext=DefineEnd;
                   BEGIN(SkipString);
                 }
                  }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 3015 "scanner.l"

	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 3016 "scanner.l"
{
                    current->name = scannerYYtext;
                 current->name = current->name.trimmed();
                 current->name = current->name.left(current->name.length()-1).trimmed();
                 current->name = current->name.left(current->name.length()-1);
                    current->bodyLine = yyLineNr;
                    lastRoundContext = DefinePHPEnd;
                    pCopyRoundGString = &current->initializer;
                 roundCount = 0;
                    BEGIN( GCopyRound );
               }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 3028 "scanner.l"
{  // ^ and % are C++/CLI extensions
                    if (insideCli)
                 {
                      addType( current );
                                            current->name = scannerYYtext ;
                 }
                 else
                 {
                   REJECT;
                 }
                  }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 3039 "scanner.l"
{
                                          current->name += scannerYYtext ;
                    addType( current );
               }
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 3043 "scanner.l"
{
                 if (current->bodyLine==-1)
                 {
                   current->bodyLine=yyLineNr;
                 }
                 docBlockContext   = YY_START;
                 docBlockInBody    = FALSE;
                 docBlockAutoBrief = ( scannerYYtext[scannerYYleng-2]=='*' && Config::getBool("javadoc-auto-brief") ) ||
                                     ( scannerYYtext[scannerYYleng-2]=='!' && Config::getBool("qt-auto-brief")  );

                 QByteArray indent;
                 indent.fill(' ',computeIndent(scannerYYtext,g_column));
                 docBlock=indent;

                 lineCount();
                 docBlockTerm = ';';
                                          if (YY_START==EnumBaseType && current->section==Entry::ENUM_SEC)
                                          {
                                            current->bitfields = ":"+current->args;
                                            current->args.resize(0);
                                            current->section=Entry::VARIABLE_SEC;
                                          }
                 if (scannerYYtext[scannerYYleng-3]=='/')
                 {
                   startCommentBlock(TRUE);
                   BEGIN( DocLine );
                 }
                 else
                 {
                   startCommentBlock(FALSE);
                   BEGIN( DocBlock );
                 }
                  }
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 3076 "scanner.l"
{
                 docBlockContext   = YY_START;
                 docBlockInBody    = FALSE;
                 docBlockAutoBrief = ( scannerYYtext[scannerYYleng-2]=='*' && Config::getBool("javadoc-auto-brief") ) ||
                                     ( scannerYYtext[scannerYYleng-2]=='!' && Config::getBool("qt-auto-brief")  );

                                          QByteArray indent;
                                          indent.fill(' ',computeIndent(scannerYYtext,g_column));
                                          docBlock=indent;
                    lineCount();

                 docBlockTerm = ',';
                                          if (YY_START==EnumBaseType && current->section==Entry::ENUM_SEC)
                                          {
                                            current->bitfields = ":"+current->args;
                                            current->args.resize(0);
                                            current->section=Entry::VARIABLE_SEC;
                                          }
                 if (scannerYYtext[scannerYYleng-3]=='/')
                 {
                   startCommentBlock(TRUE);
                   BEGIN( DocLine );
                 }
                 else
                 {
                   startCommentBlock(FALSE);
                   BEGIN( DocBlock );
                 }
                  }
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 3105 "scanner.l"
{
                 if (current->bodyLine==-1)
                 {
                   current->bodyLine=yyLineNr;
                 }
                 docBlockContext   = YY_START;
                 docBlockInBody    = FALSE;
                 docBlockAutoBrief = ( scannerYYtext[scannerYYleng-2]=='*' && Config::getBool("javadoc-auto-brief") ) ||
                                     ( scannerYYtext[scannerYYleng-2]=='!' && Config::getBool("qt-auto-brief") );
                                          QByteArray indent;
                                          indent.fill(' ',computeIndent(scannerYYtext,g_column));
                                          docBlock=indent;
                    lineCount();

                 docBlockTerm = 0;
                 if (scannerYYtext[scannerYYleng-3]=='/')
                 {
                   startCommentBlock(TRUE);
                   BEGIN( DocLine );
                 }
                 else
                 {
                   startCommentBlock(FALSE);
                   BEGIN( DocBlock );
                 }
                  }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 3132 "scanner.l"
{
                    //handleGroupStartCommand(current->name);
                                          if (previous && previous->section==Entry::GROUPDOC_SEC)
                 {
                   // link open command to the group defined in the previous entry
                   openGroup(previous,yyFileName,yyLineNr);
                 }
                 else
                 {
                   // link open command to the current entry
                   openGroup(current,yyFileName,yyLineNr);
                 }
                 //current = tmp;
                 initEntry();
                 if (scannerYYtext[1]=='/')
                 {
                   if (scannerYYtext[2]=='!' || scannerYYtext[2]=='/')
                   {
                     docBlockContext   = YY_START;
                     docBlockInBody    = FALSE;
                     docBlockAutoBrief = FALSE;
                     docBlock.resize(0);
                     docBlockTerm = 0;
                     startCommentBlock(TRUE);
                     BEGIN(DocLine);
                   }
                   else
                   {
                     lastCContext=YY_START;
                     BEGIN(SkipCxxComment);
                   }
                 }
                 else
                 {
                   if (scannerYYtext[2]=='!' || scannerYYtext[2]=='*')
                   {
                     docBlockContext   = YY_START;
                     docBlockInBody    = FALSE;
                     docBlock.resize(0);
                     docBlockAutoBrief = ( scannerYYtext[scannerYYleng-2]=='*' && Config::getBool("javadoc-auto-brief") ) ||
                                         ( scannerYYtext[scannerYYleng-2]=='!' && Config::getBool("qt-auto-brief") );
                     docBlockTerm = 0;
                     startCommentBlock(FALSE);
                     BEGIN(DocBlock);
                   }
                   else
                   {
                     lastCContext=YY_START;
                     BEGIN(SkipComment);
                   }
                 }
                  }
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 3184 "scanner.l"
{
                    closeGroup(current,yyFileName,yyLineNr);
                  }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 3187 "scanner.l"
{ // in PHP code this could also be due to "<?="
                    current->bodyLine = yyLineNr;
                                          current->initializer = scannerYYtext;
                 lastInitializerContext = YY_START;
                 initBracketCount=0;
                 BEGIN(ReadInitializer);
                  }
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 3194 "scanner.l"
{
                 lineCount();
                 current->exception += " ";
                 current->exception += removeRedundantWhiteSpace(scannerYYtext);
               }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 3199 "scanner.l"
{
                 current->exception += " }";
                 BEGIN(FindMembers);
               }
	YY_BREAK
/* Read initializer rules */
case 312:
YY_RULE_SETUP
#line 3204 "scanner.l"
{
                    lastRoundContext=YY_START;
                    pCopyRoundGString=&current->initializer;
                 roundCount=0;
                    current->initializer+=*scannerYYtext;
                    BEGIN(GCopyRound);
                  }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 3211 "scanner.l"
{
                    lastCurlyContext=YY_START;
                    pCopyCurlyGString=&current->initializer;
                 curlyCount=0;
                    current->initializer+=*scannerYYtext;
                    BEGIN(GCopyCurly);
                  }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 3218 "scanner.l"
{
                    //printf(">> initializer `%s' <<\n",current->initializer.data());
                 if (*scannerYYtext==';' && (current_root->m_specFlags.spec & Entry::Enum))
                 {
                   current->fileName    = yyFileName;
                   current->startLine   = yyLineNr;
                   current->startColumn = yyColNr;
                   current->args        = current->args.simplified();
                   current->name        = current->name.trimmed();
                   current->section     = Entry::VARIABLE_SEC;
                   current_root->addSubEntry(current, current_root);
                   current = QMakeShared<Entry>();
                   initEntry();
                   BEGIN(FindMembers);
                 }
                 else if (*scannerYYtext==';' || (lastInitializerContext==FindFields && initBracketCount==0)) // initBracketCount==0 was added for bug 665778
                 {
                      unput(*scannerYYtext);
                      BEGIN(lastInitializerContext);
                 }
                 else if (*scannerYYtext==',' && initBracketCount==0) // for "int a=0,b=0"
                 {
                      unput(*scannerYYtext);
                      BEGIN(lastInitializerContext);
                 }
                 else
                 {
                      current->initializer+=*scannerYYtext;
                 }
                  }
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 3248 "scanner.l"
{ // C++11 raw string
                                          if (!insideCpp)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            QByteArray text=scannerYYtext;
                                            current->initializer+=text;
                                            int i=text.indexOf('"');
                                            g_delimiter = scannerYYtext+i+1;
                                            g_delimiter=g_delimiter.left(g_delimiter.length()-1);
                                            lastRawStringContext = YY_START;
                                            pCopyRawGString = &current->initializer;
                                            BEGIN(RawGString);
                                            //printf("RawGString delimiter='%s'\n",delimiter.data());
                                          }
                                        }
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 3266 "scanner.l"
{
                                          *pCopyRawGString+=scannerYYtext;
                                          QByteArray delimiter = scannerYYtext+1;
                                          delimiter=delimiter.left(delimiter.length()-1);
                                          if (delimiter==g_delimiter)
                                          {
                                            BEGIN(lastRawStringContext);
                                          }
                                        }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 3275 "scanner.l"
{
                                          *pCopyRawGString+=scannerYYtext;
                                        }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 3278 "scanner.l"
{
                                          *pCopyRawGString+=scannerYYtext;
                                        }
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 3281 "scanner.l"
{
                                          *pCopyRawGString+=scannerYYtext;
                                          lineCount();
                                        }
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 3285 "scanner.l"
{
                                          *pCopyRawString+=scannerYYtext;
                    fullArgString+=scannerYYtext;
                                          QByteArray delimiter = scannerYYtext+1;
                                          delimiter=delimiter.left(delimiter.length()-1);
                                          if (delimiter==g_delimiter)
                                          {
                                            BEGIN(lastRawStringContext);
                                          }
                                        }
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 3295 "scanner.l"
{
                                          *pCopyRawString+=scannerYYtext;
                    fullArgString+=scannerYYtext;
                                        }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 3299 "scanner.l"
{
                                          *pCopyRawString+=scannerYYtext;
                    fullArgString+=scannerYYtext;
                                        }
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 3303 "scanner.l"
{
                                          *pCopyRawString+=scannerYYtext;
                    fullArgString+=scannerYYtext;
                                          lineCount();
                                        }
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 3308 "scanner.l"
{
                 if (insideIDL && insideCppQuote)
                    {
                   BEGIN(EndCppQuote);
                 }
                 else
                 {
                                            lastStringContext=YY_START;
                      current->initializer+=scannerYYtext;
                      pCopyQuotedGString=&current->initializer;
                   BEGIN(CopyGString);
                 }
               }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 3321 "scanner.l"
{
                    current->initializer+=scannerYYtext;
               }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 3324 "scanner.l"
{
                    current->initializer+=scannerYYtext;
               }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 3327 "scanner.l"
{
                    current->initializer+=scannerYYtext;
                  }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 3330 "scanner.l"
{
                    initBracketCount++;
                    current->initializer+=*scannerYYtext;
                  }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 3334 "scanner.l"
{
                    initBracketCount--;
                    current->initializer+=*scannerYYtext;
                  }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 3338 "scanner.l"
{
                    if (insidePHP)
                 {
                   current->initializer+=scannerYYtext;
                                            pCopyQuotedGString = &current->initializer;
                                            lastStringContext=YY_START;
                   BEGIN(CopyPHPGString);
                 }
                 else
                 {
                   current->initializer+=scannerYYtext;
                 }
                  }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 3351 "scanner.l"
{
                                          if (insidePHP)
                 {
                   REJECT;
                 }
                 else
                 {
                   current->initializer+=scannerYYtext;
                 }
                                        }
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 3361 "scanner.l"
{
                    current->initializer+=*scannerYYtext;
                                          lineCount();
                  }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 3365 "scanner.l"
{
                    //printf("insideCSharp=%d\n",insideCSharp);
                    current->initializer+=scannerYYtext;
                                          if (!insideCSharp && !insideObjC)
                 {
                   REJECT;
                 }
                 else
                 {
                   // C#/ObjC verbatim string
                   lastSkipVerbStringContext=YY_START;
                   pSkipVerbString=&current->initializer;
                   BEGIN(SkipVerbString);
                 }
               }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 3380 "scanner.l"
{
                 *pSkipVerbString+=scannerYYtext;
               }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 3383 "scanner.l"
{ // quote escape
                 *pSkipVerbString+=scannerYYtext;
               }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 3386 "scanner.l"
{
                 *pSkipVerbString+=*scannerYYtext;
                 BEGIN(lastSkipVerbStringContext);
               }
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 3390 "scanner.l"
{
                 *pSkipVerbString+=*scannerYYtext;
                                          lineCount();
                  }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 3394 "scanner.l"
{
                 *pSkipVerbString+=*scannerYYtext;
                  }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 3397 "scanner.l"
{
                 if (insidePHP)
                   BEGIN( FindMembersPHP );
                 else
                   current->initializer+=scannerYYtext;
                  }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 3403 "scanner.l"
{
                    current->initializer+=*scannerYYtext;
               }
	YY_BREAK
/* generic quoted string copy rules */
case 341:
YY_RULE_SETUP
#line 3408 "scanner.l"
{
                    *pCopyQuotedString+=scannerYYtext;
                  }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 3411 "scanner.l"
{
                    *pCopyQuotedString+=*scannerYYtext;
                    BEGIN( lastStringContext );
               }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 3415 "scanner.l"
{
                    *pCopyQuotedString+=*scannerYYtext;
                    BEGIN( lastStringContext );
               }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 3419 "scanner.l"
{
                    *pCopyQuotedString+=scannerYYtext;
                  }
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 3422 "scanner.l"
{
                    *pCopyQuotedString+=*scannerYYtext;
                                          lineCount();
                  }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 3426 "scanner.l"
{
                    *pCopyQuotedString+=*scannerYYtext;
                  }
	YY_BREAK
/* generic quoted growable string copy rules */
case 347:
YY_RULE_SETUP
#line 3431 "scanner.l"
{
                    *pCopyQuotedGString+=scannerYYtext;
                  }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 3434 "scanner.l"
{
                    *pCopyQuotedGString+=*scannerYYtext;
                    BEGIN( lastStringContext );
               }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 3438 "scanner.l"
{
                    *pCopyQuotedGString+=*scannerYYtext;
                    BEGIN( lastStringContext );
               }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 3442 "scanner.l"
{
                    *pCopyQuotedGString+=scannerYYtext;
                  }
	YY_BREAK
case 351:
/* rule 351 can match eol */
YY_RULE_SETUP
#line 3445 "scanner.l"
{
                    *pCopyQuotedGString+=*scannerYYtext;
                                          lineCount();
                  }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 3449 "scanner.l"
{
                    *pCopyQuotedGString+=*scannerYYtext;
                  }
	YY_BREAK
/* generic round bracket list copy rules */
case 353:
YY_RULE_SETUP
#line 3454 "scanner.l"
{
                 *pCopyRoundString+=*scannerYYtext;
                    pCopyQuotedString=pCopyRoundString;
                 lastStringContext=YY_START;
                 BEGIN(CopyString);
               }
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 3460 "scanner.l"
{
                    *pCopyRoundString+=*scannerYYtext;
                    roundCount++;
                  }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 3464 "scanner.l"
{
                    *pCopyRoundString+=*scannerYYtext;
                 if (--roundCount<0)
                   BEGIN(lastRoundContext);
                  }
	YY_BREAK
case 356:
/* rule 356 can match eol */
YY_RULE_SETUP
#line 3469 "scanner.l"
{
                                          lineCount();
                    *pCopyRoundString+=*scannerYYtext;
                  }
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 3473 "scanner.l"
{
                    if (insidePHP)
                 {
                   current->initializer+=scannerYYtext;
                                            pCopyQuotedString = pCopyRoundString;
                                            lastStringContext=YY_START;
                   BEGIN(CopyPHPString);
                 }
                 else
                 {
                   *pCopyRoundString+=scannerYYtext;
                 }
                  }
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 3486 "scanner.l"
{
                                          if (insidePHP)
                 {
                   REJECT;
                 }
                 else
                 {
                                            *pCopyRoundString+=scannerYYtext;
                 }
                                        }
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 3496 "scanner.l"
{
                    *pCopyRoundString+=scannerYYtext;
                  }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 3499 "scanner.l"
{
                    *pCopyRoundString+=*scannerYYtext;
                  }
	YY_BREAK
/* generic round bracket list copy rules for growable strings */
case 361:
YY_RULE_SETUP
#line 3504 "scanner.l"
{
                 *pCopyRoundGString+=*scannerYYtext;
                    pCopyQuotedGString=pCopyRoundGString;
                 lastStringContext=YY_START;
                 BEGIN(CopyGString);
               }
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 3510 "scanner.l"
{
                    *pCopyRoundGString+=*scannerYYtext;
                    roundCount++;
                  }
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 3514 "scanner.l"
{
                    *pCopyRoundGString+=*scannerYYtext;
                 if (--roundCount<0)
                   BEGIN(lastRoundContext);
                  }
	YY_BREAK
case 364:
/* rule 364 can match eol */
YY_RULE_SETUP
#line 3519 "scanner.l"
{
                                          lineCount();
                    *pCopyRoundGString+=*scannerYYtext;
                  }
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 3523 "scanner.l"
{
                    if (insidePHP)
                 {
                   current->initializer+=scannerYYtext;
                                            pCopyQuotedGString = pCopyRoundGString;
                                            lastStringContext=YY_START;
                   BEGIN(CopyPHPGString);
                 }
                 else
                 {
                   *pCopyRoundGString+=scannerYYtext;
                 }
                  }
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 3536 "scanner.l"
{
                                          if (insidePHP)
                 {
                   REJECT;
                 }
                 else
                 {
                                            *pCopyRoundGString+=scannerYYtext;
                 }
                                        }
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 3546 "scanner.l"
{
                    *pCopyRoundGString+=scannerYYtext;
                  }
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 3549 "scanner.l"
{
                    *pCopyRoundGString+=*scannerYYtext;
                  }
	YY_BREAK
/* generic curly bracket list copy rules */
case 369:
YY_RULE_SETUP
#line 3554 "scanner.l"
{
                 *pCopyCurlyString+=*scannerYYtext;
                    pCopyQuotedString=pCopyCurlyString;
                 lastStringContext=YY_START;
                 BEGIN(CopyString);
               }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 3560 "scanner.l"
{
                 *pCopyCurlyString+=*scannerYYtext;
                    if (insidePHP)
                 {
                   pCopyQuotedString=pCopyCurlyString;
                   lastStringContext=YY_START;
                   BEGIN(CopyPHPString);
                 }
               }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 3569 "scanner.l"
{
                    *pCopyCurlyString+=*scannerYYtext;
                 curlyCount++;
                  }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 3573 "scanner.l"
{
                 *pCopyCurlyString+=*scannerYYtext;
                 if (--curlyCount<0)
                   BEGIN(lastCurlyContext);
                  }
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 3578 "scanner.l"
{ if (insidePHP)
                                          {
                   REJECT;
                 }
                 else
                 {
                   *pCopyCurlyString+=scannerYYtext;
                 }
                                        }
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 3587 "scanner.l"
{
                    *pCopyCurlyString+=scannerYYtext;
                  }
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 3590 "scanner.l"
{ *pCopyCurlyString+=scannerYYtext; }
	YY_BREAK
case 376:
/* rule 376 can match eol */
YY_RULE_SETUP
#line 3591 "scanner.l"
{
                                          lineCount();
                 *pCopyCurlyString+=*scannerYYtext;
                  }
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 3595 "scanner.l"
{
                 *pCopyCurlyString+=*scannerYYtext;
                  }
	YY_BREAK
/* generic curly bracket list copy rules for growable strings */
case 378:
/* rule 378 can match eol */
YY_RULE_SETUP
#line 3600 "scanner.l"
{ // start of included file marker
                                        }
	YY_BREAK
case 379:
/* rule 379 can match eol */
YY_RULE_SETUP
#line 3602 "scanner.l"
{ // end of included file marker
                 QByteArray line = QByteArray(scannerYYtext);
                 int s = line.indexOf(' ');
                 int e = line.indexOf('"',s);
                 yyLineNr = line.mid(s,e-s).toInt();
                 if (scannerYYtext[scannerYYleng-1]=='\n')
                 {
                                            lineCount();
                                            g_column=0;
                 }
                  }
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 3613 "scanner.l"
{
                 *pCopyCurlyGString+=*scannerYYtext;
                    pCopyQuotedGString=pCopyCurlyGString;
                 lastStringContext=YY_START;
                 BEGIN(CopyGString);
               }
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 3619 "scanner.l"
{
                 *pCopyCurlyGString+=*scannerYYtext;
                    if (insidePHP)
                 {
                   pCopyQuotedGString=pCopyCurlyGString;
                   lastStringContext=YY_START;
                   BEGIN(CopyPHPGString);
                 }
               }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 3628 "scanner.l"
{
                    *pCopyCurlyGString+=*scannerYYtext;
                 curlyCount++;
                  }
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 3632 "scanner.l"
{
                 *pCopyCurlyGString+=*scannerYYtext;
                 if (--curlyCount<0)
                   BEGIN(lastCurlyContext);
                  }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 3637 "scanner.l"
{ if (insidePHP)
                                          {
                   REJECT;
                 }
                 else
                 {
                   *pCopyCurlyGString+=scannerYYtext;
                 }
                                        }
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 3646 "scanner.l"
{
                    *pCopyCurlyGString+=scannerYYtext;
                  }
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 3649 "scanner.l"
{
                    *pCopyCurlyGString+=scannerYYtext;
                  }
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 3652 "scanner.l"
{ *pCopyCurlyGString+=scannerYYtext; }
	YY_BREAK
case 388:
/* rule 388 can match eol */
YY_RULE_SETUP
#line 3653 "scanner.l"
{
                                          lineCount();
                 *pCopyCurlyGString+=*scannerYYtext;
                  }
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 3657 "scanner.l"
{
                 *pCopyCurlyGString+=*scannerYYtext;
                  }
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 3660 "scanner.l"
{
                 if (current->type.isEmpty() && current->name=="enum")  {
                   // see bug 69041, C++11 style anon enum: 'enum : unsigned int {...}'

                   current->section=Entry::ENUM_SEC;
                   current->name.resize(0);
                   current->args.resize(0);
                   BEGIN(EnumBaseType);
                 }
                                          else
                                          {
                                            if (current->type.isEmpty()) // anonymous padding field, e.g. "int :7;"
                   {
                     addType(current);
                     current->name = QString("__pad%1__").arg(padCount++).toUtf8();
                   }

                      BEGIN(BitFields);
                   current->bitfields+=":";
                                          }
                  }
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 3681 "scanner.l"
{
                    current->bitfields+=*scannerYYtext;
                  }
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 3684 "scanner.l"
{
                    current->args+=*scannerYYtext;
                  }
	YY_BREAK
case 393:
/* rule 393 can match eol */
YY_RULE_SETUP
#line 3687 "scanner.l"
{
                                          lineCount();
                    current->args+=' ';
                  }
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 3691 "scanner.l"
{
                 QByteArray oldType = current->type;
                 if (current->bodyLine==-1)
                 {
                   current->bodyLine = yyLineNr;
                 }
                 if ( insidePHP && current->type.left(3) == "var" )
                 {
                    current->type = current->type.mid(3);
                 }
                 if (isTypedef && current->type.left(8)!="typedef ")
                 {
                   current->type.prepend("typedef ");
                 }
                 bool needNewCurrent=FALSE;
                 if (! current->name.isEmpty() && current->section != Entry::ENUM_SEC)
                 {
                   current->type=current->type.simplified();
                   current->args=removeRedundantWhiteSpace(current->args);
                   current->name=current->name.trimmed();
                   if (current->section==Entry::CLASS_SEC) // remove spec for "struct Bla bla;"
                   {
                     current->m_specFlags = Entry::SpecifierFlags{};
                   }
                   current->section = Entry::VARIABLE_SEC;
                   current->fileName = yyFileName;
                   current->startLine = yyBegLineNr;
                   current->startColumn = yyBegColNr;
                   current_root->addSubEntry( current, current_root);
                   needNewCurrent=TRUE;
                 }
                 if ( *scannerYYtext == ',')
                 {
                   bool stat = current->stat;
                   if (needNewCurrent) {
                     current = QMakeShared<Entry>(*current);
                     initEntry();
                   }
                   current->stat = stat; // the static attribute holds for all variables
                   current->name.resize(0);
                   current->args.resize(0);
                   current->brief.resize(0);
                   current->doc.resize(0);
                   current->initializer.resize(0);
                   current->bitfields.resize(0);
                   int i=oldType.length();

                   while (i>0 && (oldType[i-1]=='*' || oldType[i-1]=='&' || oldType[i-1]==' ')) i--;
                   current->type = oldType.left(i);

                 } else {
                   mtype = MethodTypes::Method;
                   virt  = Normal;

                   if (needNewCurrent) {
                     current = QMakeShared<Entry>();

                   } else if (current->groups) {
                     current->groups->clear();

                   }

                   initEntry();
                 }
               }
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 3757 "scanner.l"
{
                 if (! insideCSharp && (current->name.isEmpty() ||  current->name=="typedef"))  {
                    // IDL function property
                   squareCount=1;
                   lastSquareContext = YY_START;
                   idlAttr.resize(0);
                   idlProp.resize(0);
                   current->mtype = mtype;

                   if (Config::getBool("idl-support") && current->mtype == Property) {
					       // inside the properties section of a dispinterface
					      odlProp = true;
					      current->m_specFlags.spec |= Entry::Gettable;
					      current->m_specFlags.spec |= Entry::Settable;
					    }

                   BEGIN( IDLAttribute );

                 } else if (insideCSharp && current->name.isEmpty()) {
                                          
                     squareCount=1;
                     lastSquareContext = YY_START;
                     // Skip the C# attribute for this member
                     current->args.resize(0);
                     BEGIN( SkipSquare );

                 } else {
                   current->args += scannerYYtext ;
                   squareCount=1;
                   BEGIN( Array ) ;
                 }
               }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 3789 "scanner.l"
{
                    // end of IDL function attribute
                 if (--squareCount<=0)
                 {
                   lineCount();
                   if (current->mtype == MethodTypes::Property)
                     BEGIN( IDLPropName );
                   else
                     BEGIN( lastSquareContext );
                 }
               }
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 3800 "scanner.l"
{
                 if (Config::getBool("idl-support")) {
                   current->mtype = MethodTypes::Property;
                 }
                 current->m_specFlags.spec |= Entry::Settable;
               }
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 3806 "scanner.l"
{
                 if (Config::getBool("idl-support")) {
                   current->mtype = MethodTypes::Property;
                 }
                 current->m_specFlags.spec |= Entry::Gettable;
               }
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 3812 "scanner.l"
{ // UNO IDL property
                 current->m_specFlags.spec |= Entry::Property;
               }
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 3815 "scanner.l"
{ // UNO IDL attribute
                 current->m_specFlags.spec |= Entry::Attribute;
               }
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 3818 "scanner.l"
{ // on UNO IDL interface/service/attribute/property
                 current->m_specFlags.spec |= Entry::Optional;
               }
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 3821 "scanner.l"
{ // on UNO IDL attribute or property
                 if (Config::getBool("idl-support") && odlProp) {
					    current->m_specFlags.spec ^= Entry::Settable;
					  } else {
					   current->m_specFlags.spec |= Entry::Readonly;
					  }                 
               }
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 3828 "scanner.l"
{ // on UNO IDL attribute or property
                 current->m_specFlags.spec |= Entry::Bound;
               }
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 3831 "scanner.l"
{ // on UNO IDL property
                 current->m_specFlags.spec |= Entry::Removable;
               }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 3834 "scanner.l"
{ // on UNO IDL property
                 current->m_specFlags.spec |= Entry::Constrained;
               }
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 3837 "scanner.l"
{ // on UNO IDL property
                 current->m_specFlags.spec |= Entry::Transient;
               }
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 3840 "scanner.l"
{ // on UNO IDL property
                 current->m_specFlags.spec |= Entry::MaybeVoid;
               }
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 3843 "scanner.l"
{ // on UNO IDL property
                 current->m_specFlags.spec |= Entry::MaybeDefault;
               }
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 3846 "scanner.l"
{ // on UNO IDL property
                 current->m_specFlags.spec |= Entry::MaybeAmbiguous;
               }
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 3849 "scanner.l"
{
               }
	YY_BREAK
case 411:
/* rule 411 can match eol */
YY_RULE_SETUP
#line 3851 "scanner.l"
{
                 // return type (probably HRESULT) - skip it

                 if (odlProp) {
                   // property type
					    idlProp = scannerYYtext;
					  }
               }
	YY_BREAK
case 412:
/* rule 412 can match eol */
YY_RULE_SETUP
#line 3859 "scanner.l"
{
                 current->name = scannerYYtext;
                 current->name = current->name.left(current->name.length()-1).trimmed();
                 current->startLine   = yyLineNr;
                 current->startColumn = yyColNr;
                 BEGIN( IDLProp );
               }
	YY_BREAK
case 413:
/* rule 413 can match eol */
YY_RULE_SETUP
#line 3866 "scanner.l"
{
					   if (odlProp) {
					     idlProp += scannerYYtext;
					   }
					}
	YY_BREAK
case 414:
/* rule 414 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 3871 "scanner.l"
{
					   if (odlProp) {
					     current->name = scannerYYtext;
					     idlProp = idlProp.trimmed();
					     odlProp = false;

					     BEGIN( IDLProp );
					   }
					}
	YY_BREAK
case 415:
/* rule 415 can match eol */
YY_RULE_SETUP
#line 3880 "scanner.l"
{  // attribute of a parameter
                  idlAttr = scannerYYtext;
                  idlAttr=idlAttr.trimmed();
               }
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 3884 "scanner.l"
{  // property type
                  idlProp = scannerYYtext;
               }
	YY_BREAK
case 417:
/* rule 417 can match eol */
YY_RULE_SETUP
#line 3887 "scanner.l"
{  // Rare: Another parameter ([propput] HRESULT Item(int index, [in] Type theRealProperty);)
                 if (current->args.isEmpty())
                   current->args = "(";
                 else
                   current->args += ", ";
                 current->args += idlAttr;
                 current->args += " ";
                 current->args += idlProp;   // prop was actually type of extra parameter
                 current->args += " ";
                 current->args += scannerYYtext;
                 current->args = current->args.left(current->args.length() - 1);    // strip comma
                 idlProp.resize(0);
                 idlAttr.resize(0);
                 BEGIN( IDLProp );
               }
	YY_BREAK
case 418:
/* rule 418 can match eol */
YY_RULE_SETUP
#line 3902 "scanner.l"
{
                 // the parameter name for the property - just skip.
               }
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 3905 "scanner.l"
{
                 current->fileName   = yyFileName;
                 current->type       = idlProp;
                    current->args       = current->args.simplified();

                    if (! current->args.isEmpty())
                      current->args += ")";

                    current->name       = current->name.trimmed();
                 current->section    = Entry::VARIABLE_SEC;
                 current_root->addSubEntry(current, current_root);

                 current = QMakeShared<Entry>();
                 initEntry();
                 BEGIN( FindMembers );
               }
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 3921 "scanner.l"
{ // spaces, *, or other stuff
                    //idlProp+=scannerYYtext;
               }
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 3924 "scanner.l"
{ current->args += *scannerYYtext ;
                 if (--squareCount<=0)
                                        BEGIN( FindMembers ) ;
               }
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 3928 "scanner.l"
{ current->args += *scannerYYtext ;
                 if (--squareCount<=0)
                                        BEGIN( Function ) ;
               }
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 3932 "scanner.l"
{ current->args += *scannerYYtext ;
                 squareCount++;
               }
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 3935 "scanner.l"
{ current->args += *scannerYYtext ; }
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 3936 "scanner.l"
{ squareCount++; }
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 3937 "scanner.l"
{
                 if (--squareCount<=0)
                 BEGIN( lastSquareContext );
               }
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 3941 "scanner.l"
{
                 lastStringContext=YY_START;
                 BEGIN( SkipString );
               }
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 3945 "scanner.l"

	YY_BREAK
case 429:
YY_RULE_SETUP
#line 3946 "scanner.l"
{ addType( current ) ;
                 current->type += scannerYYtext ;
                 BEGIN( Sharp ) ;
               }
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 3950 "scanner.l"
{ 
                 current->type += *scannerYYtext ;
                 if (--sharpCount<=0)
                                        BEGIN( FindMembers ) ;
               }
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 3955 "scanner.l"
{ current->type += *scannerYYtext ;
                 sharpCount++;
               }
	YY_BREAK
case 432:
/* rule 432 can match eol */
YY_RULE_SETUP
#line 3958 "scanner.l"
{
                    current->type += ' ';
                    lineCount();
               }
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 3962 "scanner.l"
{ current->type += *scannerYYtext ; }
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 3963 "scanner.l"
{
                   if (insideCpp || insideObjC)  {
                      current->id = ClangParser::instance()->lookup(yyLineNr,scannerYYtext);
                   }
                   current->bodyLine = yyLineNr;
                   current->name     = scannerYYtext;
               }
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 3970 "scanner.l"
{
                    // Java enum initializer
                    unput('(');
                    lastInitializerContext = YY_START;
                 initBracketCount=0;
                                          current->initializer = "=";
                    BEGIN(ReadInitializer);
                  }
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 3978 "scanner.l"
{
                    lastInitializerContext = YY_START;
                 initBracketCount=0;
                                          current->initializer = scannerYYtext;
                    BEGIN(ReadInitializer);
                  }
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 3984 "scanner.l"
{
                    if (insideJava)  // last enum field in Java class
                 {
                   if (!current->name.isEmpty())
                   {
                     current->fileName   = yyFileName;
                     current->startLine  = yyLineNr;
                     current->startColumn = yyColNr;
                     current->type       = "@"; // enum marker
                     current->args       = current->args.simplified();
                     current->name       = current->name.trimmed();
                     current->section    = Entry::VARIABLE_SEC;
                     current_root->addSubEntry(current, current_root);
                     current = QMakeShared<Entry>();
                     initEntry();
                   }

                   BEGIN( FindMembers );
                 }
                 else
                 {
                   REJECT;
                 }
                  }
	YY_BREAK
case 438:
/* rule 438 can match eol */
YY_RULE_SETUP
#line 4008 "scanner.l"
{
                         lineCount();
                      }
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 4011 "scanner.l"

	YY_BREAK
case 440:
YY_RULE_SETUP
#line 4012 "scanner.l"
{
                   if (! current->name.isEmpty()) {

                      current->fileName    = yyFileName;
                      current->startLine   = yyLineNr;
                      current->startColumn = yyColNr;

                      if (! (current_root->m_specFlags.spec & Entry::Enum)) {
                         // enum marker (this might be Java-style enums
                         current->type     = "@";
                      }

                      current->args    = current->args.simplified();
                      current->name    = current->name.trimmed();
                      current->section = Entry::VARIABLE_SEC;

                      // add enum value to the enum data type
                      current_root->addSubEntry(current, current_root);

                     if (! insideCSharp && ! insideJava && ! (current_root->m_specFlags.spec & Entry::Strong))  {
                                  // for C# and Java 1.5+ enum values always have to be explicitly qualified,
                                  // same for C++11 style enums (enum class Name {})

                        current = QMakeShared<Entry>(*current);

                       // add enum value to the enum data type parent (usually the class the enum belongs to)
                       current_root->parent()->addSubEntry(current, current_root->parent());
                     }

                     current = QMakeShared<Entry>();
                     initEntry();

                 }  else  {
                   // probably a redundant ","
                   current->reset();
                   initEntry();
                 }
              }
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 4050 "scanner.l"
{ // attribute list in IDL
                 squareCount=1;
                 lastSquareContext = YY_START;
                 BEGIN(SkipSquare);
                  }
	YY_BREAK
/*
<FindFieldArg>","          { unput(*scannerYYtext); BEGIN(FindFields); }
  */
case 442:
YY_RULE_SETUP
#line 4058 "scanner.l"
{ current->program += scannerYYtext ; }
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 4059 "scanner.l"
{ current->program += scannerYYtext ; }
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 4060 "scanner.l"
{ if (!insidePHP)
                   REJECT;
                 // append PHP comment.
                 current->program += scannerYYtext ;
               }
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 4065 "scanner.l"
{ current->program += scannerYYtext ;
                                          pSkipVerbString = &current->program;
                                          lastSkipVerbStringContext=YY_START;
                                          BEGIN( SkipVerbString );
               }
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 4070 "scanner.l"
{ if (insidePHP)
                                          {
                                            current->program += scannerYYtext ;
                                            pCopyHereDocGString = &current->program;
                                            lastHereDocContext=YY_START;
                                            BEGIN( CopyHereDoc );
                                          }
                                          else
                                          {
                                            REJECT;
                                          }
               }
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 4082 "scanner.l"
{ current->program += scannerYYtext ;
                                          pCopyQuotedGString = &current->program;
                                          lastStringContext=YY_START;
                                          BEGIN( CopyGString );
               }
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 4087 "scanner.l"
{ current->program += scannerYYtext ;
                 lastContext = YY_START ;
                 BEGIN( Comment ) ;
               }
	YY_BREAK
case 449:
/* rule 449 can match eol */
YY_RULE_SETUP
#line 4091 "scanner.l"
{ current->program += scannerYYtext ;
                 ++yyLineNr ;
                 lastContext = YY_START ;
                 BEGIN( Comment ) ;
               }
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 4096 "scanner.l"
{
                    if (!insidePHP)
                 {
                   current->program += scannerYYtext;
                 }
                 else
                 { // begin of single quoted string
                   current->program += scannerYYtext;
                                            pCopyQuotedGString = &current->program;
                                            lastStringContext=YY_START;
                   BEGIN(CopyPHPGString);
                 }
                  }
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 4109 "scanner.l"
{
                                              if (insidePHP)
                     {
                  REJECT; // for PHP code single quotes
                               // are used for strings of arbitrary length
                     }
                     else
                     {
                                                current->program += scannerYYtext;
                     }
                                            }
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 4120 "scanner.l"
{ current->program += scannerYYtext ;
                 ++curlyCount ;
               }
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 4123 "scanner.l"
{
                 current->program += scannerYYtext ;
                 --curlyCount ;
                  }
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 4127 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
                    if ( curlyCount>0 )
                 {
                   current->program += scannerYYtext ;
                   --curlyCount ;
                 }
                 else
                 {
                   current->endBodyLine = yyLineNr;
                   QByteArray &cn = current->name;
                   QByteArray rn = current_root->name;

                   if (!cn.isEmpty() && !rn.isEmpty())
                   {
                     prependScope();
                   }
                   if (isTypedef && cn.isEmpty())
                   {
                     //printf("Typedef Name\n");
                     BEGIN( TypedefName );
                   }
                   else
                   {
                     if ((current->section == Entry::ENUM_SEC) || (current->m_specFlags.spec & Entry::Enum))
                     {
                       current->program+=','; // add field terminator
                     }
                     // add compound definition to the tree
                     current->args=removeRedundantWhiteSpace(current->args);
                               // was: current->args.simplified();
                        current->type = current->type.simplified();
                        current->name = current->name.trimmed();
                     //printf("adding `%s' `%s' `%s' brief=%s insideObjC=%d %x\n",current->type.data(),current->name.data(),current->args.data(),current->brief.data(),insideObjC,current->section);
                     if (insideObjC &&
                    ((current->m_specFlags.spec & Entry::Interface) || (current->m_specFlags.spec == Entry::Category))
                   ) // method definition follows
                     {
                            BEGIN( ReadBodyIntf ) ;
                     }
                     else
                     {
                       current_root->addSubEntry( current , current_root);
                       memspecEntry = current;
                  current = QMakeShared<Entry>(*current);
                  if (current->section == Entry::NAMESPACE_SEC || (current->m_specFlags.spec == Entry::Interface) ||
                      insideJava || insidePHP || insideCSharp || insideD || insideJS
                     )
                  { // namespaces and interfaces and java classes ends with a closing bracket without semicolon
                    current->reset();
                    initEntry();

                    memspecEntry = QSharedPointer<Entry>();

                    BEGIN( FindMembers ) ;
                  }
                  else
                  {
                    static QRegExp re("@[0-9]+$");
                    if (! isTypedef && memspecEntry &&
                                re.indexIn(memspecEntry->name) == -1)
                    // not typedef or anonymous type (see bug691071)
                    {
                      // enabled the next two lines for bug 623424
                      current->doc.resize(0);
                      current->brief.resize(0);
                    }
                    BEGIN( MemberSpec ) ;
                  }
                     }
                   }
                 }
               }
	YY_BREAK
case 455:
/* rule 455 can match eol */
YY_RULE_SETUP
#line 4199 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
                 lineCount();
                    if ( curlyCount>0 )
                 {
                   current->program += scannerYYtext ;
                   --curlyCount ;
                 }
                 else
                 {
                   isTypedef = TRUE;
                   current->endBodyLine = yyLineNr;
                   QByteArray &cn = current->name;
                   QByteArray rn = current_root->name;
                   if (!cn.isEmpty() && !rn.isEmpty())
                   {
                     prependScope();
                   }
                   BEGIN( TypedefName );
                 }
               }
	YY_BREAK
case 456:
/* rule 456 can match eol */
YY_RULE_SETUP
#line 4219 "scanner.l"
{ // late "const" or "volatile" keyword
                 lineCount();
                    current->type.prepend(scannerYYtext);
                  }
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 4223 "scanner.l"
{
                 if ((current->section == Entry::ENUM_SEC) || (current->m_specFlags.spec & Entry::Enum))
                 {
                   current->program += ","; // add field terminator
                 }
                         current->name=scannerYYtext;
                 prependScope();
                    current->args = current->args.simplified();
                    current->type = current->type.simplified();
                 //printf("Adding compound %s %s %s\n",current->type.data(),current->name.data(),current->args.data());
                 current_root->addSubEntry( current , current_root);
                 if (!firstTypedefEntry)
                 {
                   firstTypedefEntry = current;
                 }
                 current = QMakeShared<Entry>();
                 initEntry();
                 isTypedef=TRUE; // to undo reset by initEntry()
                    BEGIN(MemberSpecSkip);
                  }
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 4243 "scanner.l"
{ /* typedef of anonymous type */
                 current->name = QString("@%1").arg(anonCount++).toUtf8();

                 if ((current->section == Entry::ENUM_SEC) || (current->m_specFlags.spec & Entry::Enum))
                 {
                   current->program+=','; // add field terminator
                 }
                 // add compound definition to the tree
                    current->args = current->args.simplified();
                    current->type = current->type.simplified();
                 current_root->addSubEntry( current , current_root);
                 memspecEntry = current;
                 current = QMakeShared<Entry>(*current);
                 initEntry();
                 unput(';');
                 BEGIN( MemberSpec ) ;
                  }
	YY_BREAK
case 459:
/* rule 459 can match eol */
YY_RULE_SETUP
#line 4260 "scanner.l"
{ // the [] part could be improved.
                    lineCount();
                    int i=0,l=(int)scannerYYleng,j;
                 while (i<l && (!isId(scannerYYtext[i]))) i++;
                 msName = QByteArray(scannerYYtext).right(l-i).trimmed();
                 j=msName.indexOf("[");
                 if (j!=-1)
                 {
                   msArgs=msName.right(msName.length()-j);
                   msName=msName.left(j);
                 }
                 msType=QByteArray(scannerYYtext).left(i);

                 // handle *pName in: typedef { ... } name, *pName;
                 if (firstTypedefEntry)
                 {
                   if (firstTypedefEntry->m_specFlags.spec & Entry::Struct)
                   {
                     msType.prepend("struct "+firstTypedefEntry->name);
                   }
                   else if (firstTypedefEntry->m_specFlags.spec & Entry::Union)
                   {
                     msType.prepend("union "+firstTypedefEntry->name);
                   }
                   else if (firstTypedefEntry->section==Entry::ENUM_SEC)
                   {
                     msType.prepend("enum "+firstTypedefEntry->name);
                   }
                   else
                   {
                     msType.prepend(firstTypedefEntry->name);
                   }
                 }
               }
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 4294 "scanner.l"
{ // function with struct return type
                 addType(current);
                 current->name = msName;
                 current->m_specFlags = Entry::SpecifierFlags{};

                 unput('(');
                 BEGIN(FindMembers);
                  }
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 4302 "scanner.l"
{
                    if (msName.isEmpty() && !current->name.isEmpty())
                 {
                   // see if the compound does not have a name or is inside another
                   // anonymous compound. If so we insert a
                   // special `anonymous' variable.
                   // Entry *p=current_root;
                   // Entry *p=current;

                   QSharedPointer<Entry> p = current;

                   while (p)
                   {
                     // only look for class scopes, not namespace scopes
                     if ((p->section & Entry::COMPOUND_MASK) && !p->name.isEmpty())
                     {
                  //printf("Trying scope `%s'\n",p->name.data());
                  int i=p->name.lastIndexOf("::");
                  int pi = (i==-1) ? 0 : i+2;
                  if (p->name.at(pi)=='@')
                  {
                    // anonymous compound inside -> insert dummy variable name
                    //printf("Adding anonymous variable for scope %s\n",p->name.data());

                    msName = QString("@%1").arg(anonCount++).toUtf8();
                    break;
                  }
                     }
                     //p=p->parent;
                     if (p==current) p=current_root; else p=p->parent();
                   }
                 }
                 //printf("msName=%s current->name=%s\n",msName.data(),current->name.data());
                 if (!msName.isEmpty()
                     /*&& msName!=current->name*/) // skip typedef T {} T;, removed due to bug608493
                 {
                   static bool typedefHidesStruct =  Config::getBool("use-typedef-name");

                   // case 1: typedef struct _S { ... } S_t;
                   // -> omit typedef and use S_t as the struct name

                   if (typedefHidesStruct &&  isTypedef &&
                     ((current->m_specFlags.spec & (Entry::Struct|Entry::Union)) ||
                      current->section == Entry::ENUM_SEC ) && msType.trimmed().isEmpty() && memspecEntry)
                   {
                     memspecEntry->name=msName;
                   }
                   else // case 2: create a typedef field
                   {
                     QSharedPointer<Entry> varEntry = QMakeShared<Entry>();
                     varEntry->lang = language;
                     varEntry->protection = current->protection ;
                     varEntry->mtype = current->mtype;
                     varEntry->virt = current->virt;
                     varEntry->stat = current->stat;
                     varEntry->section = Entry::VARIABLE_SEC;
                     varEntry->name = msName.trimmed();
                     varEntry->type = current->type.simplified()+" ";
                     varEntry->args = msArgs;
                     if (isTypedef)
                     {
                  varEntry->type.prepend("typedef ");
                  //  //printf("current->name = %s %s\n",current->name.data(),msName.data());
                     }
                     if (typedefHidesStruct && isTypedef && (current->m_specFlags.spec & (Entry::Struct|Entry::Union)) && memspecEntry)
                     // case 1: use S_t as type for pS_t in "typedef struct _S {} S_t, *pS_t;"
                     {
                        varEntry->type+=memspecEntry->name+msType;
                     }
                     else // case 2: use _S as type for for pS_t
                     {
                  varEntry->type+=current->name+msType;
                     }
                     varEntry->fileName = yyFileName;
                     varEntry->startLine = yyLineNr;
                     varEntry->startColumn = yyColNr;
                     varEntry->doc = current->doc;
                     varEntry->brief = current->brief;
                     varEntry->mGrpId = current->mGrpId;
                                              varEntry->initializer = current->initializer;

                     // deep copy group list
                     for (auto g : *current->groups) {
                        varEntry->groups->append(g);
                     }

                     if (current->sli) { // copy special list items
                        for (auto lii : *current->sli) {
                           varEntry->addSpecialListItem(lii.type, lii.itemId);
                        }
                     }

                     current_root->addSubEntry(varEntry, current_root);
                   }
                 }
                 if (*scannerYYtext==';') // end of a struct/class ...
                 {
                   if (!isTypedef && msName.isEmpty() && memspecEntry && (current->section&Entry::COMPOUND_MASK))
                   { // case where a class/struct has a doc block after it
                     if (!current->doc.isEmpty())
                     {
                       memspecEntry->doc += current->doc;
                     }
                     if (!current->brief.isEmpty())
                     {
                       memspecEntry->brief += current->brief;
                     }
                      }
                   msType.resize(0);
                   msName.resize(0);
                   msArgs.resize(0);
                   isTypedef=FALSE;

                   firstTypedefEntry = QSharedPointer<Entry>();
                   memspecEntry = QSharedPointer<Entry>();

                   current->reset();
                   initEntry();
                   BEGIN( FindMembers );
                 }
                 else
                 {
                   current->doc.resize(0);
                   current->brief.resize(0);
                 }

                  }
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 4429 "scanner.l"
{
                    lastInitializerContext=YY_START;
                 initBracketCount=0;
                                          current->initializer = scannerYYtext;
                    BEGIN(ReadInitializer);
                    /* BEGIN(MemberSpecSkip); */
               }
	YY_BREAK
/*
<MemberSpecSkip>"{"        {
                    curlyCount=0;
                 lastCurlyContext = MemberSpecSkip;
                 previous = current;
                    BEGIN(SkipCurly);
                  }
  */
case 463:
YY_RULE_SETUP
#line 4444 "scanner.l"
{ BEGIN(MemberSpec); }
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 4445 "scanner.l"
{ unput(';'); BEGIN(MemberSpec); }
	YY_BREAK
case 465:
/* rule 465 can match eol */
YY_RULE_SETUP
#line 4446 "scanner.l"
{ current->program += scannerYYtext ;
                 lineCount() ;
               }
	YY_BREAK
case 466:
/* rule 466 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 4449 "scanner.l"
{ // end of Objective C block
                 current_root->addSubEntry( current, current_root);
                    current = QMakeShared<Entry>();
                 initEntry();
                 insideObjC=FALSE;
                 BEGIN( FindMembers );
                  }
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 4456 "scanner.l"
{ current->program += scannerYYtext ; }
	YY_BREAK
case 468:
/* rule 468 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
#line 4459 "scanner.l"
case 469:
/* rule 469 can match eol */
YY_RULE_SETUP
#line 4459 "scanner.l"
{   /* typedef void (A::*ptr_t)(args...) or int (*func(int))[], the ^ is for Obj-C blocks */
                    if (insidePHP) // reference parameter
                 {
                   REJECT
                 }
                 else
                 {
                   current->bodyLine = yyLineNr;
                   lineCount();
                   addType(current);
                   funcPtrType=scannerYYtext;
                   roundCount=0;
                   //current->type += scannerYYtext;
                   BEGIN( FuncPtr );
                 }
                  }
	YY_BREAK
case 470:
/* rule 470 can match eol */
YY_RULE_SETUP
#line 4475 "scanner.l"
{
                    current->name = scannerYYtext;
                 if (nameIsOperator(current->name))
                 {
                   BEGIN( FuncPtrOperator );
                 }
                 else
                 {
                   if (current->name=="const" || current->name=="volatile")
                   {
                     funcPtrType += current->name;
                   }
                   else
                   {
                     BEGIN( EndFuncPtr );
                   }
                 }
                  }
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 4493 "scanner.l"
{
                    //printf("error: FuncPtr `%c' unexpected at line %d of %s\n",*scannerYYtext,yyLineNr,yyFileName);
                  }
	YY_BREAK
case 472:
/* rule 472 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 4496 "scanner.l"
{
                    current->name += scannerYYtext;
                 current->name = current->name.simplified();
                 lineCount();
                  }
	YY_BREAK
case 473:
/* rule 473 can match eol */
YY_RULE_SETUP
#line 4501 "scanner.l"
{
                                          lineCount();
                    current->name += *scannerYYtext;
                  }
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 4505 "scanner.l"
{
                    unput(*scannerYYtext);
                 BEGIN( EndFuncPtr );
                                        }
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 4509 "scanner.l"
{
                    current->name += *scannerYYtext;
                  }
	YY_BREAK
case 476:
/* rule 476 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 4512 "scanner.l"
{ // a variable with extra braces
                 lineCount();
                 current->type+=funcPtrType.data()+1;
                 BEGIN(FindMembers);
                  }
	YY_BREAK
case 477:
/* rule 477 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 4517 "scanner.l"
{ // a function pointer
                 lineCount();
                 current->type+=funcPtrType+")";
                 BEGIN(FindMembers);
                  }
	YY_BREAK
case 478:
/* rule 478 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 4522 "scanner.l"
{ // an array of variables
                    lineCount();
                 current->type+=funcPtrType.data();
                 current->args += ")";
                 BEGIN(FindMembers);
                  }
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 4528 "scanner.l"
{ // a function returning a function or
                                          // a function returning a pointer to an array
                 current->args += *scannerYYtext ;
                 //roundCount=0;
                 //BEGIN( FuncFunc );
                 current->bodyLine = yyLineNr;
                 currentArgumentContext = FuncFuncEnd;
                 fullArgString=current->args;
                 copyArgString=&current->args;
                 BEGIN( ReadFuncArgType ) ;
                  }
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 4539 "scanner.l"
{
                    funcPtrType+=scannerYYtext;
                  }
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 4542 "scanner.l"
{
                    BEGIN(FindMembers);
                  }
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 4545 "scanner.l"
{
                    current->args += *scannerYYtext ;
                    ++roundCount;
               }
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 4549 "scanner.l"
{
                    current->args += *scannerYYtext ;
                    if ( roundCount )
                   --roundCount;
                 else
                 {
                   BEGIN(FuncFuncEnd);
                 }
                  }
	YY_BREAK
case 484:
/* rule 484 can match eol */
YY_RULE_SETUP
#line 4558 "scanner.l"
{
                    lineCount();
                 current->type+=funcPtrType+")(";
                 BEGIN(FuncFuncType);
                  }
	YY_BREAK
case 485:
/* rule 485 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 4563 "scanner.l"
{
                    lineCount();
                 current->type+=funcPtrType.data()+1;
                    BEGIN(Function);
                  }
	YY_BREAK
case 486:
/* rule 486 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 4568 "scanner.l"
{ // function returning a pointer to an array
                                          lineCount();
                 current->type+=funcPtrType;
                 current->args+=")";
                 BEGIN(FuncFuncArray);
                  }
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 4574 "scanner.l"
{
                    current->args += *scannerYYtext;
                  }
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 4577 "scanner.l"
{
                    current->type += *scannerYYtext;
                 roundCount++;
                  }
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 4581 "scanner.l"
{
                    current->type += *scannerYYtext;
                    if (roundCount)
                   --roundCount;
                 else
                   BEGIN(Function);
               }
	YY_BREAK
case 490:
/* rule 490 can match eol */
YY_RULE_SETUP
#line 4588 "scanner.l"
{ lineCount() ; current->type += ", " ; }
	YY_BREAK
case 491:
/* rule 491 can match eol */
YY_RULE_SETUP
#line 4589 "scanner.l"
{ lineCount() ; current->type += ' ' ; }
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 4590 "scanner.l"
{
                    current->type += *scannerYYtext;
                  }
	YY_BREAK
case 493:
/* rule 493 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 4593 "scanner.l"
{ // for catching typedef void (__stdcall *f)() like definitions
                                          if (current->type.left(7)=="typedef" && current->bodyLine==-1)
                   // the bodyLine check is to prevent this guard to be true more than once
                 {
                      current->bodyLine = yyLineNr;
                   BEGIN( GetCallType );
                 }
                 else if (!current->name.isEmpty()) // normal function
                 {
                   current->args = scannerYYtext;
                   current->bodyLine = yyLineNr;
                   currentArgumentContext = FuncQual;
                   fullArgString=current->args;
                   copyArgString=&current->args;
                   BEGIN( ReadFuncArgType ) ;
                   //printf(">>> Read function arguments\n");
                 }
               }
	YY_BREAK
case 494:
/* rule 494 can match eol */
YY_RULE_SETUP
#line 4611 "scanner.l"
{
                    lineCount();
                    addType(current);
                 funcPtrType="(";
                 funcPtrType+=scannerYYtext;
                 roundCount=0;
                 BEGIN( FuncPtr );
                  }
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 4619 "scanner.l"
{
                 if (! current->name.isEmpty())
                 {
                   current->args = scannerYYtext;
                   current->bodyLine = yyLineNr;
                   currentArgumentContext = FuncQual;
                   fullArgString=current->args;
                   copyArgString=&current->args;
                   BEGIN( ReadFuncArgType ) ;
                   //printf(">>> Read function arguments current->argListcount()=%d\n",current->argListcount());
                 }
               }
	YY_BREAK
/*
<FindMembers>"("{BN}*("void"{BN}*)?")"    {
                    lineCount();
                    current->args = "()";
                    BEGIN( FuncQual );
                  }
  */
/*- Function argument reading rules ---------------------------------------*/
case 496:
YY_RULE_SETUP
#line 4641 "scanner.l"
{ *copyArgString+=scannerYYtext;
                    fullArgString+=scannerYYtext;
                  }
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 4644 "scanner.l"
{ *copyArgString+=scannerYYtext;
                 fullArgString+=scannerYYtext;
               }
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 4647 "scanner.l"
{
                    *copyArgString+=scannerYYtext;
                    fullArgString+=scannerYYtext;
                  }
	YY_BREAK
case 499:
/* rule 499 can match eol */
YY_RULE_SETUP
#line 4651 "scanner.l"
{
                    *copyArgString+=" ";
                    fullArgString+=" ";
                    lineCount();
                  }
	YY_BREAK
case 500:
/* rule 500 can match eol */
YY_RULE_SETUP
#line 4656 "scanner.l"
{
                 g_delimiter = scannerYYtext+2;
                 g_delimiter=g_delimiter.left(g_delimiter.length()-1);
                 lastRawStringContext = YY_START;
                 pCopyRawString = copyArgString;
                 *pCopyRawString+=scannerYYtext;
                    fullArgString+=scannerYYtext;
                 BEGIN(RawString);
               }
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 4665 "scanner.l"
{
                    *copyArgString+=*scannerYYtext;
                    fullArgString+=*scannerYYtext;
                 lastCopyArgStringContext = YY_START;
                    BEGIN(CopyArgString);
                  }
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 4671 "scanner.l"
{
                    *copyArgString+=*scannerYYtext;
                    fullArgString+=*scannerYYtext;
                    argRoundCount=0;
                 lastCopyArgContext = YY_START;
                 BEGIN(CopyArgRound);
                  }
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 4678 "scanner.l"
{
                    *copyArgString+=*scannerYYtext;
                    fullArgString+=*scannerYYtext;
                 stringToArgumentList(fullArgString, &current->argList);

                 if (insideJS) {
                   fixArgumentListForJavaScript(&current->argList);
                 }

                 handleParametersCommentBlocks(&current->argList);

                 // save the current documentation block
                 docBackup   = current->doc;
                 briefBackup = current->brief;

                 // go back to the saved state
                 BEGIN(currentArgumentContext);
               }
	YY_BREAK
/* a special comment */
case 504:
YY_RULE_SETUP
#line 4697 "scanner.l"
{
                 if (currentArgumentContext==DefineEnd)
                 {
                   // for defines we interpret a comment
                   // as documentation for the define
                   int i;for (i=(int)scannerYYleng-1;i>=0;i--)
                   {
                     unput(scannerYYtext[i]);
                   }
                   stringToArgumentList(fullArgString, &current->argList);
                                            handleParametersCommentBlocks(&current->argList);
                   BEGIN(currentArgumentContext);
                 }
                 else // not a define
                 {
                   // for functions we interpret a comment
                   // as documentation for the argument
                   fullArgString+=scannerYYtext;
                   lastCopyArgChar=0;
                   lastCommentInArgContext=YY_START;
                   if (scannerYYtext[1]=='/')
                     BEGIN(CopyArgCommentLine);
                   else
                     BEGIN(CopyArgComment);
                 }
                  }
	YY_BREAK
/* a non-special comment */
case 505:
YY_RULE_SETUP
#line 4724 "scanner.l"
{ /* empty comment */ }
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 4725 "scanner.l"
{
                    lastCContext = YY_START;
                 BEGIN( SkipComment );
                  }
	YY_BREAK
case 507:
YY_RULE_SETUP
#line 4729 "scanner.l"
{
                    lastCContext = YY_START;
                 BEGIN( SkipCxxComment );
                  }
	YY_BREAK
/*
<ReadFuncArgType,ReadTempArgs>"'#"  { if (insidePHP)
                                            REJECT;
                    *copyArgString+=scannerYYtext;
                    fullArgString+=scannerYYtext;
               }
<ReadFuncArgType,ReadTempArgs>"#"   {
                    if (!insidePHP)
                      REJECT;
                    lastCContext = YY_START;
                 BEGIN( SkipCxxComment );
                  }
  */
/* `)' followed by a special comment */
case 508:
/* rule 508 can match eol */
YY_RULE_SETUP
#line 4747 "scanner.l"
{
                    lineCount();
                                          if (currentArgumentContext==DefineEnd)
                 {
                   // for defines we interpret a comment
                   // as documentation for the define
                   int i;for (i=(int)scannerYYleng-1;i>0;i--)
                   {
                     unput(scannerYYtext[i]);
                   }
                   *copyArgString+=*scannerYYtext;
                   fullArgString+=*scannerYYtext;
                   stringToArgumentList(fullArgString, &current->argList);
                                            handleParametersCommentBlocks(&current->argList);
                   BEGIN( currentArgumentContext );
                 }
                 else
                 {
                   // for functions we interpret a comment
                   // as documentation for the last argument
                   lastCopyArgChar=*scannerYYtext;
                   QByteArray text=&scannerYYtext[1];
                   text=text.trimmed();
                   lastCommentInArgContext=YY_START;
                   fullArgString+=text;
                   if (text.indexOf("//")!=-1)
                     BEGIN( CopyArgCommentLine );
                   else
                     BEGIN( CopyArgComment );
                 }
                  }
	YY_BREAK
case 509:
/* rule 509 can match eol */
YY_RULE_SETUP
#line 4778 "scanner.l"

	YY_BREAK
case 510:
YY_RULE_SETUP
#line 4779 "scanner.l"
{ fullArgString+=scannerYYtext; }
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 4780 "scanner.l"
{ fullArgString+=scannerYYtext;
                    if (lastCopyArgChar!=0)
                   unput(lastCopyArgChar);
                                          BEGIN( lastCommentInArgContext );
               }
	YY_BREAK
case 512:
/* rule 512 can match eol */
YY_RULE_SETUP
#line 4785 "scanner.l"
{ fullArgString+=scannerYYtext;
                                          lineCount();
                    if (lastCopyArgChar!=0)
                   unput(lastCopyArgChar);
                 BEGIN( lastCommentInArgContext );
                  }
	YY_BREAK
case 513:
/* rule 513 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 4791 "scanner.l"
{ // verbatim command (which could contain nested comments!)
                      docBlockName=&scannerYYtext[1];
                    fullArgString+=scannerYYtext;
                 BEGIN(CopyArgVerbatim);
                  }
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 4796 "scanner.l"
{
                      docBlockName=&scannerYYtext[1];
                 if (docBlockName.at(1)=='[')
                 {
                        docBlockName[1] ='}';
                 }
                 if (docBlockName.at(1)=='{')
                 {
                        docBlockName[1] ='}';
                 }
                    fullArgString+=scannerYYtext;
                    BEGIN(CopyArgVerbatim);
                                        }
	YY_BREAK
case 515:
/* rule 515 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 4809 "scanner.l"
{ // end of verbatim block
                    fullArgString+=scannerYYtext;
                      if (scannerYYtext[1]=='f') // end of formula
                      {
                        BEGIN(CopyArgCommentLine);
                      }
                 if (&scannerYYtext[4]==docBlockName)
                 {
                      BEGIN(CopyArgCommentLine);
                 }
                  }
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 4820 "scanner.l"
{ fullArgString+=scannerYYtext; }
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 4821 "scanner.l"
{ fullArgString+=*scannerYYtext; }
	YY_BREAK
case 518:
/* rule 518 can match eol */
YY_RULE_SETUP
#line 4822 "scanner.l"
{ fullArgString+=*scannerYYtext; lineCount(); }
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 4823 "scanner.l"
{ fullArgString+=*scannerYYtext; }
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 4824 "scanner.l"
{
                    warn(yyFileName,yyLineNr,
                     "Ignoring %cbrief command inside argument documentation",*scannerYYtext
                    );
                                          fullArgString+=' ';
                                        }
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 4830 "scanner.l"
{
                 *copyArgString+=*scannerYYtext;
                 fullArgString+=*scannerYYtext;
                 argSharpCount=1;
                 BEGIN( CopyArgSharp );
               }
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 4836 "scanner.l"
{
                 *copyArgString+=*scannerYYtext;
                 fullArgString+=*scannerYYtext;
                 //printf("end template list %s\n",copyArgString->data());
                 stringToArgumentList(fullArgString,currentArgumentList);
                 BEGIN( currentArgumentContext );
               }
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 4843 "scanner.l"
{
                    argRoundCount++;
                 *copyArgString+=*scannerYYtext;
                 fullArgString+=*scannerYYtext;
                  }
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 4848 "scanner.l"
{
                 *copyArgString+=*scannerYYtext;
                 fullArgString+=*scannerYYtext;
                 if (argRoundCount>0)
                   argRoundCount--;
                 else
                   BEGIN( lastCopyArgContext );
                  }
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 4856 "scanner.l"
{
                    *copyArgString+=*scannerYYtext;
                    fullArgString+=*scannerYYtext;
                    argRoundCount=0;
                 lastCopyArgContext = YY_START;
                 BEGIN( CopyArgRound );
                                        }
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 4863 "scanner.l"
{
                    argSharpCount++;
                 //printf("argSharpCount++=%d  copy\n",argSharpCount);
                 *copyArgString+=*scannerYYtext;
                 fullArgString+=*scannerYYtext;
                  }
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 4869 "scanner.l"
{
                    *copyArgString+=*scannerYYtext;
                    fullArgString+=*scannerYYtext;
                 argSharpCount--;
                 if (argSharpCount>0)
                 {
                   //printf("argSharpCount--=%d copy\n",argSharpCount);
                 }
                 else
                 {
                   BEGIN( ReadTempArgs );
                   //printf("end of argSharpCount\n");
                 }
                  }
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 4883 "scanner.l"
{
                    *copyArgString+=scannerYYtext;
                    fullArgString+=scannerYYtext;
                  }
	YY_BREAK
case 529:
YY_RULE_SETUP
#line 4887 "scanner.l"
{
                    *copyArgString+=*scannerYYtext;
                    fullArgString+=*scannerYYtext;
                 BEGIN( lastCopyArgStringContext );
                  }
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 4892 "scanner.l"
{
                    *copyArgString+=*scannerYYtext;
                    fullArgString+=*scannerYYtext;
                 BEGIN( lastCopyArgStringContext );
                  }
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 4897 "scanner.l"
{
                 if (insidePHP)
                 {
                   REJECT;
                 }
                 else
                 {
                      *copyArgString+=scannerYYtext;
                      fullArgString+=scannerYYtext;
                 }
               }
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 4908 "scanner.l"
{
                    *copyArgString+=scannerYYtext;
                    fullArgString+=scannerYYtext;
                 if (insidePHP)
                 {
                   lastCopyArgStringContext=YY_START;
                   BEGIN(CopyArgPHPString);
                 }
                  }
	YY_BREAK
case 533:
/* rule 533 can match eol */
YY_RULE_SETUP
#line 4917 "scanner.l"
{
                 lineCount();
                 *copyArgString+=*scannerYYtext;
                 fullArgString+=*scannerYYtext;
               }
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 4922 "scanner.l"
{
                    *copyArgString+=*scannerYYtext;
                    fullArgString+=*scannerYYtext;
               }
	YY_BREAK
/*------------------------------------------------------------------------*/
case 535:
YY_RULE_SETUP
#line 4932 "scanner.l"
{ current->args += *scannerYYtext ;
                 ++roundCount ;
               }
	YY_BREAK
case 536:
YY_RULE_SETUP
#line 4935 "scanner.l"
{ current->args += *scannerYYtext ;
                 if ( roundCount )
                   --roundCount ;
                      else
                   BEGIN( FuncQual ) ;
               }
	YY_BREAK
/*
<FuncQual>"#"  { if (insidePHP)
                    REJECT;
                    lastCPPContext = YY_START;
                    BEGIN(SkipCPP);
               }
  */
case 537:
YY_RULE_SETUP
#line 4948 "scanner.l"
{
                      if ( qstrcmp(scannerYYtext,";") == 0 && insidePHP &&  ! containsWord(current->type,"function") )
                        {
                          current->reset();
                          initEntry();
                          BEGIN( FindMembers );
                        }
                        else
                        {
                          unput(*scannerYYtext);
                          BEGIN( Function );
                        }
                      }
	YY_BREAK
case 538:
/* rule 538 can match eol */
YY_RULE_SETUP
#line 4961 "scanner.l"
{ // pure virtual member function
                                          lineCount() ;
                                          current->virt = Pure;
                                          current->args += " override ";
                                        }
	YY_BREAK
case 539:
/* rule 539 can match eol */
YY_RULE_SETUP
#line 4966 "scanner.l"
{ // C++11 overridden virtual member function
                                          lineCount() ;
                                          current->m_specFlags.spec |= Entry::Override;
                                          current->args += " override ";
                                          BEGIN(FuncQual);
                                        }
	YY_BREAK
case 540:
/* rule 540 can match eol */
YY_RULE_SETUP
#line 4972 "scanner.l"
{ // C++11 final method
                                          lineCount() ;
                                          current->m_specFlags.m_isFinal = true;
                                          current->args += " final ";
                                          BEGIN(FuncQual);
                                        }
	YY_BREAK
case 541:
/* rule 541 can match eol */
YY_RULE_SETUP
#line 4978 "scanner.l"
{ // sealed member function
                                          lineCount() ;
                                          current->m_specFlags.spec |= Entry::Sealed;
                                          current->args += " sealed ";
                                        }
	YY_BREAK
case 542:
/* rule 542 can match eol */
YY_RULE_SETUP
#line 4983 "scanner.l"
{ // new member function
                                          lineCount() ;
                                          current->m_specFlags.spec |= Entry::New;
                                          current->args += " new ";
                                        }
	YY_BREAK
case 543:
/* rule 543 can match eol */
YY_RULE_SETUP
#line 4988 "scanner.l"
{ // const member function
                 lineCount() ;
                 current->args += " const ";
                 current->argList.constSpecifier=TRUE;
               }
	YY_BREAK
case 544:
/* rule 544 can match eol */
YY_RULE_SETUP
#line 4993 "scanner.l"
{ // volatile member function
                    lineCount() ;
                    current->args += " volatile ";
                 current->argList.volatileSpecifier=TRUE;
               }
	YY_BREAK
case 545:
/* rule 545 can match eol */
YY_RULE_SETUP
#line 4998 "scanner.l"
{ // noexcept qualifier
                    lineCount() ;
                    current->args += " noexcept ";
                 current->m_specFlags.spec |= Entry::NoExcept;
               }
	YY_BREAK
case 546:
/* rule 546 can match eol */
YY_RULE_SETUP
#line 5003 "scanner.l"
{ // noexcept expression
                 lineCount() ;
                 current->args += " noexcept(";
                 current->m_specFlags.spec |= Entry::NoExcept;
                 lastRoundContext=FuncQual;
                 pCopyRoundString=&current->args;
                 roundCount=0;
                                          BEGIN(CopyRound);
                                        }
	YY_BREAK
case 547:
/* rule 547 can match eol */
YY_RULE_SETUP
#line 5012 "scanner.l"
{ // pure virtual member function
                 lineCount() ;
                 current->args += " = 0";
                 current->virt = Pure;
                 current->argList.pureSpecifier=TRUE;
                                          BEGIN(FuncQual);
               }
	YY_BREAK
case 548:
/* rule 548 can match eol */
YY_RULE_SETUP
#line 5019 "scanner.l"
{ // C++11 explicitly delete member
                                          lineCount();
                                          current->args += " = delete";
                 current->m_specFlags.spec |= Entry::Delete;
                                          BEGIN(FuncQual);
                                        }
	YY_BREAK
case 549:
/* rule 549 can match eol */
YY_RULE_SETUP
#line 5025 "scanner.l"
{ // C++11 explicitly defaulted constructor/assignment operator
                                          lineCount();
                                          current->args += " = default";
                 current->m_specFlags.spec |= Entry::Default;
                                          BEGIN(FuncQual);
                                        }
	YY_BREAK
case 550:
/* rule 550 can match eol */
YY_RULE_SETUP
#line 5031 "scanner.l"
{
                                          lineCount();
                                          current->argList.trailingReturnType = " -> ";
                                          current->args += " -> ";
                                          BEGIN(TrailingReturn);
                                        }
	YY_BREAK
case 551:
YY_RULE_SETUP
#line 5037 "scanner.l"
{
                                          unput(*scannerYYtext);
                                          BEGIN(FuncQual);
                                        }
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 5041 "scanner.l"
{
                                          current->argList.trailingReturnType+=scannerYYtext;
                                          current->args+=scannerYYtext;
                                        }
	YY_BREAK
case 553:
/* rule 553 can match eol */
YY_RULE_SETUP
#line 5045 "scanner.l"
{
                                          lineCount();
                                          current->argList.trailingReturnType+=scannerYYtext;
                                          current->args+=' ';
                                        }
	YY_BREAK
case 554:
/* rule 554 can match eol */
YY_RULE_SETUP
#line 5050 "scanner.l"
{
                    lineCount() ;
                 current->args += ", " ;
               }
	YY_BREAK
case 555:
/* rule 555 can match eol */
YY_RULE_SETUP
#line 5054 "scanner.l"
{
                    lineCount() ;
                 current->args += ' ' ;
               }
	YY_BREAK
case 556:
YY_RULE_SETUP
#line 5058 "scanner.l"
{ if (insidePHP)
                      REJECT;
                    lastCPPContext = YY_START;
                    BEGIN(SkipCPP);
               }
	YY_BREAK
case 557:
YY_RULE_SETUP
#line 5063 "scanner.l"
{
                                          if (insideCli &&
                     (current_root->section&Entry::COMPOUND_MASK)
                    )
                 {
                   BEGIN(CliOverride);
                 }
                 else
                 {
                                            // typically an initialized function pointer
                      lastInitializerContext=YY_START;
                   initBracketCount=0;
                                            current->initializer = scannerYYtext;
                      BEGIN(ReadInitializer);
                 }
                  }
	YY_BREAK
case 558:
YY_RULE_SETUP
#line 5079 "scanner.l"
{
                  }
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 5081 "scanner.l"
{
                    unput(*scannerYYtext);
                 BEGIN(FuncQual);
                  }
	YY_BREAK
case 560:
/* rule 560 can match eol */
YY_RULE_SETUP
#line 5085 "scanner.l"
{
                                          lineCount();
                  }
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 5088 "scanner.l"
{
                  }
	YY_BREAK
case 562:
YY_RULE_SETUP
#line 5090 "scanner.l"
{
                    unput(*scannerYYtext);
                 BEGIN(FuncQual);
                  }
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 5094 "scanner.l"
{
                                          current->args += *scannerYYtext;
                    pCopyQuotedString=&current->args;
                 lastStringContext=FuncPtrInit;
                 BEGIN(CopyString);
               }
	YY_BREAK
case 564:
YY_RULE_SETUP
#line 5100 "scanner.l"
{
                                          current->args += *scannerYYtext;
                 if (insidePHP)
                 {
                   pCopyQuotedString=&current->args;
                   lastStringContext=FuncPtrInit;
                   BEGIN(CopyPHPString);
                 }
               }
	YY_BREAK
case 565:
YY_RULE_SETUP
#line 5109 "scanner.l"
{
                                          if (insidePHP)
                 {
                   REJECT;
                 }
                 else
                 {
                                            current->args += scannerYYtext;
                 }
                  }
	YY_BREAK
case 566:
YY_RULE_SETUP
#line 5119 "scanner.l"
{
                                          current->args += scannerYYtext;
               }
	YY_BREAK
case 567:
YY_RULE_SETUP
#line 5122 "scanner.l"
{
                                          current->args += *scannerYYtext;
                  }
	YY_BREAK
case 568:
/* rule 568 can match eol */
YY_RULE_SETUP
#line 5125 "scanner.l"
{
                                          current->args += *scannerYYtext;
                                          lineCount();
                  }
	YY_BREAK
case 569:
YY_RULE_SETUP
#line 5129 "scanner.l"
{ // typically a K&R style C function
                 if (insideCSharp && qstrcmp(scannerYYtext,"where")==0)
                 {
                   // type contraint for a method

                   current->typeConstr = ArgumentList();
                   current->typeConstr.append(Argument());
                   lastCSConstraint = YY_START;
                   BEGIN( CSConstraintName );
                 }
                 else if (checkForKnRstyleC())
                 {
                                            current->args = scannerYYtext;
                   oldStyleArgType.resize(0);
                   BEGIN(OldStyleArgs);
                 }
                 else
                 {
                                            current->args += scannerYYtext;
                 }
                  }
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 5150 "scanner.l"
{
                    QByteArray oldStyleArgPtr;
                    QByteArray oldStyleArgName;
                 splitKnRArg(oldStyleArgPtr,oldStyleArgName);
                 QByteArray doc,brief;
                 if (current->doc!=docBackup)
                 {
                                            doc=current->doc;
                   current->doc=docBackup;
                 }
                 if (current->brief!=briefBackup)
                 {
                                            brief=current->brief;
                   current->brief=briefBackup;
                 }
                 addKnRArgInfo(oldStyleArgType+oldStyleArgPtr,
                               oldStyleArgName,brief,doc);
                 current->args.resize(0);
                 if (*scannerYYtext==';') oldStyleArgType.resize(0);
                  }
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 5170 "scanner.l"
{ current->args += scannerYYtext; }
	YY_BREAK
case 572:
YY_RULE_SETUP
#line 5171 "scanner.l"
{
                    current->args = argListToString(&current->argList);
                    unput('{');
                 BEGIN(FuncQual);
                  }
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 5176 "scanner.l"
{ current->args += *scannerYYtext; }
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 5177 "scanner.l"
{ current->args += *scannerYYtext; }
	YY_BREAK
case 575:
/* rule 575 can match eol */
#line 5179 "scanner.l"
case 576:
/* rule 576 can match eol */
YY_RULE_SETUP
#line 5179 "scanner.l"
{ /* try-function-block */
                 insideTryBlock=TRUE;
                 lineCount();
                    if (scannerYYtext[scannerYYleng-1]==':')
                 {
                   unput(':');
                   BEGIN( Function );
                 }
               }
	YY_BREAK
case 577:
/* rule 577 can match eol */
YY_RULE_SETUP
#line 5188 "scanner.l"
{ // C++ style throw clause
                    current->exception = " throw (" ;
                 roundCount=0;
                 lineCount() ;
                 BEGIN( ExcpRound ) ;
               }
	YY_BREAK
case 578:
/* rule 578 can match eol */
YY_RULE_SETUP
#line 5194 "scanner.l"
{
                    current->exception = " raises (" ;
                 lineCount() ;
                 roundCount=0;
                 BEGIN( ExcpRound ) ;
                  }
	YY_BREAK
case 579:
/* rule 579 can match eol */
YY_RULE_SETUP
#line 5200 "scanner.l"
{ // Java style throw clause
                    current->exception = " throws " ;
                 lineCount() ;
                 BEGIN( ExcpList );
                  }
	YY_BREAK
case 580:
YY_RULE_SETUP
#line 5205 "scanner.l"
{ current->exception += *scannerYYtext ;
                 ++roundCount ;
               }
	YY_BREAK
case 581:
YY_RULE_SETUP
#line 5208 "scanner.l"
{ current->exception += *scannerYYtext ;
                 if ( roundCount )
                   --roundCount ;
                      else
                   BEGIN( FuncQual ) ;
               }
	YY_BREAK
case 582:
YY_RULE_SETUP
#line 5214 "scanner.l"
{
                    current->exception += *scannerYYtext;
                  }
	YY_BREAK
case 583:
YY_RULE_SETUP
#line 5217 "scanner.l"
{
                    unput('{'); BEGIN( FuncQual );
                  }
	YY_BREAK
case 584:
YY_RULE_SETUP
#line 5220 "scanner.l"
{
                    unput(';'); BEGIN( FuncQual );
                  }
	YY_BREAK
case 585:
/* rule 585 can match eol */
YY_RULE_SETUP
#line 5223 "scanner.l"
{
                    current->exception += ' ';
                                          lineCount();
                  }
	YY_BREAK
case 586:
YY_RULE_SETUP
#line 5227 "scanner.l"
{
                    current->exception += *scannerYYtext;
                  }
	YY_BREAK
case 587:
YY_RULE_SETUP
#line 5230 "scanner.l"
{ current->type += current->name ;
                 current->name  = current->args ;
                 current->args  = scannerYYtext ;
                 roundCount=0;
                 BEGIN( FuncRound ) ;
               }
	YY_BREAK
case 588:
YY_RULE_SETUP
#line 5236 "scanner.l"
{
                 if (! insidePHP) {
                    BEGIN(SkipInits);
                 } 
               }
	YY_BREAK
case 589:
YY_RULE_SETUP
#line 5241 "scanner.l"
{
                 current->name = current->name.simplified();
                 current->type = current->type.simplified();
                 current->args = removeRedundantWhiteSpace(current->args);
                 // was: current->args.simplified();

                 current->fileName    = yyFileName;
                 current->startLine   = yyBegLineNr;
                 current->startColumn = yyBegColNr;

                 static QRegExp re("\\([^)]*[*&][^)]*\\)");       // (...*...)     

                 if (*scannerYYtext!=';' || (current_root->section&Entry::COMPOUND_MASK) ) {
                   int tempArg = current->name.indexOf('<');

                   int ts = current->type.indexOf('<');
                   int te = current->type.lastIndexOf('>');
                   int ti = re.indexIn(current->type, 0);

                   // bug677315: A<int(void *, char *)> get(); is not a function pointer
                   // not a (...*...) pattern
                   // (...*...) is part of a template argument list

                   bool isFunction = (ti == -1) || (ts != -1 && ts < te && ts < ti && ti < te); 

                   QByteArray tempName;
                   if (tempArg == -1) {
                      tempName = current->name; 

                   } else {
                      tempName = current->name.left(tempArg);
                   } 
      
                   if (! current->type.isEmpty() && (! isFunction || current->type.startsWith("typedef ")) )  {
                                      
                     if (isTypedef && ! current->type.startsWith("typedef ")) {
                        current->type.prepend("typedef ");
                     }

                     current->section = Entry::VARIABLE_SEC;

                   } else {
                     current->section = Entry::FUNCTION_SEC;
                     current->proto   = (*scannerYYtext == ';');
                   }

                 } else  {
                  // a global function prototype or function variable
                 
                   if (!current->type.isEmpty() && (re.indexIn(current->type, 0) !=-1 || current->type.left(8)=="typedef ")) {
                   
                     if (isTypedef && current->type.left(8)!="typedef ") {
                        current->type.prepend("typedef ");
                     }
                     
                     current->section = Entry::VARIABLE_SEC;

                   } else {
                     current->section = Entry::FUNCTION_SEC;
                     current->proto = TRUE;
                   }
                 }

                 if ( insidePHP)
                 {
                   if (findAndRemoveWord(current->type,"final"))
                   {
                      current->m_specFlags.m_isFinal = true;
                   }

                   if (findAndRemoveWord(current->type,"abstract"))
                   {
                     current->m_specFlags.spec |= Entry::Abstract;
                   }
                 }

                 if ( insidePHP && !containsWord(current->type,"function"))
                 {
                   initEntry();
                   if ( *scannerYYtext == '{' )
                   {
                     lastCurlyContext = FindMembers;
                     curlyCount=0;
                     BEGIN( SkipCurly );
                   }
                   else
                   {
                     BEGIN( FindMembers );
                   }

                 } else {
                   if ( insidePHP)
                   {
                     findAndRemoveWord(current->type,"function");
                   }

                   previous = current;
                   current_root->addSubEntry(current, current_root);
                   current = QMakeShared<Entry>();
                   initEntry();

                   // Objective C 2.0: Required/Optional section
                   if (previous->m_specFlags.spec & (Entry::Optional | Entry::Required))
                   {
                     current->m_specFlags.spec |= previous->m_specFlags.spec & (Entry::Optional|Entry::Required);
                   }

                   lastCurlyContext = FindMembers;

                   if ( *scannerYYtext == ',' )
                   {
                     current->type = previous->type;
                     // we need to strip any trailing * and & (see bugs 623023 and 649103 for test cases)
                     int i=current->type.length();
                     while (i > 0 && (current->type[i-1]=='*' || current->type[i-1]=='&' || current->type[i-1]==' ')) i--;
                     current->type = current->type.left(i);
                   }

                   if ( *scannerYYtext == '{' )
                   {
                     if ( !insidePHP && (current_root->section & Entry::COMPOUND_MASK) )
                     {
                        previous->m_specFlags.spec |= Entry::Inline;
                     }

                     curlyCount=0;
                     BEGIN( SkipCurly ) ;

                   } else {
                     if (previous->section != Entry::VARIABLE_SEC) {
                        previous->bodyLine=-1; // a function/member declaration
                     }   
                     BEGIN( FindMembers ) ;
                   }
                 }
               }
	YY_BREAK
case 590:
/* rule 590 can match eol */
YY_RULE_SETUP
#line 5378 "scanner.l"
{ // C++11 style initializer (see bug 688647)
                 lineCount();
                 curlyCount = 1;
                 BEGIN(SkipC11Inits);
               }
	YY_BREAK
case 591:
YY_RULE_SETUP
#line 5383 "scanner.l"
{
                 ++curlyCount;
               }
	YY_BREAK
case 592:
YY_RULE_SETUP
#line 5386 "scanner.l"
{
  					  if (--curlyCount <= 0) {
                    BEGIN(SkipInits);
                 }
               }
	YY_BREAK
case 593:
YY_RULE_SETUP
#line 5391 "scanner.l"
{ // C++11 style initializer
                 unput('{');
                 BEGIN( Function );
               }
	YY_BREAK
case 594:
YY_RULE_SETUP
#line 5395 "scanner.l"
{
                 //addToBody(scannerYYtext);
                 ++curlyCount ;
               }
	YY_BREAK
case 595:
/* rule 595 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
#line 5400 "scanner.l"
case 596:
/* rule 596 can match eol */
YY_RULE_SETUP
#line 5400 "scanner.l"
{
                         //addToBody(scannerYYtext);
                    if( curlyCount )
                 {
                   --curlyCount ;
                 }
                 else
                 {
                   if (current->sli && previous) // copy special list items
                  {
                     for (auto lii : *current->sli) {
                        previous->addSpecialListItem(lii.type, lii.itemId);
                     }
                     delete current->sli;
                     current->sli = 0;
                  }
                   if (previous) previous->endBodyLine=yyLineNr;
                   BEGIN( lastCurlyContext ) ;
                 }
               }
	YY_BREAK
case 597:
/* rule 597 can match eol */
YY_RULE_SETUP
#line 5420 "scanner.l"
{
                 lineCount();
                    if ( curlyCount )
                 {
                   //addToBody(scannerYYtext);
                   --curlyCount ;
                 }
                 else
                 {
                   current->endBodyLine=yyLineNr;

                   tempEntry = current; // temporarily switch to the previous entry
                   current = previous;
                   previous = QSharedPointer<Entry>();

                   docBlockContext   = SkipCurlyEndDoc;
                   docBlockInBody    = FALSE;
                   docBlockAutoBrief = ( scannerYYtext[scannerYYleng-2]=='*' && Config::getBool("javadoc-auto-brief") ) ||
                                       ( scannerYYtext[scannerYYleng-2]=='!' && Config::getBool("qt-auto-brief") );
                   docBlock.resize(0);
                   docBlockTerm = '}';
                   if (scannerYYtext[scannerYYleng-3]=='/')
                   {
                     startCommentBlock(TRUE);
                     BEGIN( DocLine );
                   }
                   else
                   {
                     startCommentBlock(FALSE);
                     BEGIN( DocBlock );
                   }
                 }
               }
	YY_BREAK
case 598:
/* rule 598 can match eol */
YY_RULE_SETUP
#line 5453 "scanner.l"
{ // desc is followed by another one
                 docBlockContext   = SkipCurlyEndDoc;
                 docBlockInBody    = FALSE;
                 docBlockAutoBrief = ( scannerYYtext[scannerYYleng-2]=='*' && Config::getBool("javadoc-auto-brief") ) ||
                                     ( scannerYYtext[scannerYYleng-2]=='!' && Config::getBool("qt-auto-brief") );
                 docBlock.resize(0);
                 docBlockTerm = '}';
                 if (scannerYYtext[scannerYYleng-3]=='/')
                 {
                   startCommentBlock(TRUE);
                   BEGIN( DocLine );
                 }
                 else
                 {
                   startCommentBlock(FALSE);
                   BEGIN( DocBlock );
                 }
                  }
	YY_BREAK
case 599:
YY_RULE_SETUP
#line 5471 "scanner.l"
{
                         //addToBody("}");
                                          if (tempEntry) // we can only switch back to current if no new item was created
                 {
                   current = tempEntry;
                    tempEntry = QSharedPointer<Entry>();
                 }
                    BEGIN( lastCurlyContext );
                  }
	YY_BREAK
case 600:
YY_RULE_SETUP
#line 5480 "scanner.l"
{
                         //addToBody(scannerYYtext);
                    lastStringContext=SkipCurly;
                         BEGIN( SkipString );
               }
	YY_BREAK
case 601:
YY_RULE_SETUP
#line 5485 "scanner.l"
{
                    if (insidePHP) {
                           REJECT;
                    } 
                    //addToBody(scannerYYtext);
                    BEGIN( SkipCurlyCpp );
               }
	YY_BREAK
case 602:
/* rule 602 can match eol */
YY_RULE_SETUP
#line 5492 "scanner.l"
{
                    lineCount();
                    //addToBody(scannerYYtext);
                  }
	YY_BREAK
case 603:
YY_RULE_SETUP
#line 5496 "scanner.l"
{
                    if (!insidePHP)
                 {
                   REJECT;
                 }
                 else
                 {
                                            lastHereDocContext = YY_START;
                   BEGIN(HereDoc);
                 }
                  }
	YY_BREAK
case 604:
YY_RULE_SETUP
#line 5507 "scanner.l"
{
                                          lineCount();  // for g_column updates
                         //addToBody(scannerYYtext);
                  }
	YY_BREAK
case 605:
/* rule 605 can match eol */
YY_RULE_SETUP
#line 5511 "scanner.l"
{
                         //addToBody(scannerYYtext);
                                          lineCount();
                    lastCurlyContext = FindMembers;
                    BEGIN( SkipCurly );
               }
	YY_BREAK
case 606:
/* rule 606 can match eol */
YY_RULE_SETUP
#line 5517 "scanner.l"
{
                    //addToBody(scannerYYtext);
                                          lineCount();
               }
	YY_BREAK
case 607:
YY_RULE_SETUP
#line 5521 "scanner.l"
{
                    //addToBody(scannerYYtext);
                    lastCContext = YY_START;
                    BEGIN(SkipComment);
                  }
	YY_BREAK
case 608:
YY_RULE_SETUP
#line 5526 "scanner.l"
{
                    //addToBody(scannerYYtext);
                    lastCContext = YY_START;
                    BEGIN(SkipCxxComment);
                  }
	YY_BREAK
case 609:
YY_RULE_SETUP
#line 5531 "scanner.l"
{
                   roundCount=0;
                   lastSkipRoundContext=YY_START;
                   BEGIN(SkipRound);
                 }
	YY_BREAK
case 610:
YY_RULE_SETUP
#line 5536 "scanner.l"
{
                    lastStringContext=YY_START;
                    BEGIN( SkipString );
               }
	YY_BREAK
case 611:
YY_RULE_SETUP
#line 5540 "scanner.l"
{
                 warn(yyFileName, yyLineNr, "Found a ';' while parsing an initializer list. "
                   "Some macros which are used without semicolons may not be parsed accurately.\n");

                 BEGIN( FindMembers );
                  }
	YY_BREAK
case 612:
YY_RULE_SETUP
#line 5546 "scanner.l"
{
                 if (!insidePHP) {
                    REJECT;
                 }    
                 //addToBody(scannerYYtext);
                 lastCContext = YY_START;
                 BEGIN(SkipCxxComment);
                  }
	YY_BREAK
case 613:
YY_RULE_SETUP
#line 5554 "scanner.l"
{
                 if (! insideCSharp) REJECT;
                 // C# verbatim string
                 lastSkipVerbStringContext=YY_START;
                 pSkipVerbString=&current->initializer;
                 BEGIN(SkipVerbString);
                  }
	YY_BREAK
case 614:
YY_RULE_SETUP
#line 5561 "scanner.l"
{
                                          if (insidePHP) REJECT;
                                        }
	YY_BREAK
case 615:
YY_RULE_SETUP
#line 5564 "scanner.l"
{
                 if (insidePHP) {
                   lastStringContext=YY_START;
                   BEGIN(SkipPHPString);
                 }
               }
	YY_BREAK
case 616:
YY_RULE_SETUP
#line 5570 "scanner.l"
{ 
               }
	YY_BREAK
case 617:
YY_RULE_SETUP
#line 5572 "scanner.l"
{ 
               }
	YY_BREAK
case 618:
YY_RULE_SETUP
#line 5574 "scanner.l"
{
                  BEGIN( lastStringContext );
               }
	YY_BREAK
case 619:
YY_RULE_SETUP
#line 5577 "scanner.l"
{
                  BEGIN( lastStringContext );
               }
	YY_BREAK
case 620:
YY_RULE_SETUP
#line 5580 "scanner.l"
{ }
	YY_BREAK
case 621:
/* rule 621 can match eol */
YY_RULE_SETUP
#line 5581 "scanner.l"
{
                                          lineCount();
                  }
	YY_BREAK
case 622:
YY_RULE_SETUP
#line 5584 "scanner.l"
{ }
	YY_BREAK
case 623:
YY_RULE_SETUP
#line 5585 "scanner.l"
{ // for "class : public base {} var;" construct, see bug 608359
                    unput(':');
                 BEGIN(ClassVar);
                  }
	YY_BREAK
case 624:
YY_RULE_SETUP
#line 5589 "scanner.l"
{
                 current->section = Entry::EMPTY_SEC ;
                 current->type.resize(0) ;
                 current->name.resize(0) ;
                 current->args.resize(0) ;
                 current->argList.clear();
                 BEGIN( FindMembers ) ;
               }
	YY_BREAK
case 625:
YY_RULE_SETUP
#line 5597 "scanner.l"
{
                 if (insideIDL && (current->m_specFlags.spec & (Entry::Singleton | Entry::Service)))
                 {
                   // in UNO IDL a service or singleton may be defined
                   // completely like this: "service Foo : XFoo;"
                   if (!current->name.isEmpty() && !current_root->name.isEmpty())
                   {
                     prependScope();
                   }
                   current->name = current->name.trimmed();
                   // there can be only one base class here
                   if (! baseName.isEmpty())
                   {
                     current->extends.append(BaseInfo(baseName, Public, Normal));
                     baseName.resize(0);
                   }
                   current_root->addSubEntry( current, current_root);
                   current = QMakeShared<Entry>();
                 }
                 else
                 {
                   current->section = Entry::EMPTY_SEC ;
                   current->type.resize(0) ;
                   current->name.resize(0) ;
                   current->args.resize(0) ;
                   current->argList.clear();
                 }
                 BEGIN( FindMembers ) ;
               }
	YY_BREAK
case 626:
/* rule 626 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 5626 "scanner.l"
{
                    sharpCount = 0;
                    current->name = scannerYYtext ;
                 if (current->m_specFlags.spec & Entry::Protocol)
                 {
                   current->name+="-p";
                 }
                 lineCount();
                 lastClassTemplSpecContext = ClassVar;
                 if (insideObjC) // protocol list
                 {
                   BEGIN( ObjCProtocolList );
                 }
                 else if (insideCSharp) // C# generic class
                 {
                                            //current->name+="-g";
                   BEGIN( CSGeneric );
                 }
                 else // C++ template specialization
                 {
                   roundCount=0;
                   BEGIN( ClassTemplSpec );
                 }
               }
	YY_BREAK
case 627:
YY_RULE_SETUP
#line 5650 "scanner.l"
{
                 if (current->tArgLists==0)
                 {
                   current->tArgLists = new QList<ArgumentList>;
                   // current->tArgLists->setAutoDelete(TRUE);
                 }

                 // check bug 612858 before enabling the next line
                 //current->spec |= Entry::Template;

                 current->tArgLists->append(ArgumentList());
                 ArgumentList *al = &current->tArgLists->last();

                 currentArgumentList = al;

                 templateStr="<";
                 current->name += "<";
                 fullArgString = templateStr;
                 copyArgString = &current->name;

                 //copyArgString = &templateStr;
                 currentArgumentContext = ClassVar;
                 BEGIN( ReadTempArgs );
                  }
	YY_BREAK
case 628:
YY_RULE_SETUP
#line 5674 "scanner.l"
{
                    insideProtocolList=TRUE;
                    BEGIN( Bases );
                  }
	YY_BREAK
case 629:
/* rule 629 can match eol */
YY_RULE_SETUP
#line 5678 "scanner.l"
{
                 current->name += scannerYYtext;
                 lineCount();
                    if (--sharpCount<=0)
                 {
                   current->name = removeRedundantWhiteSpace(current->name);
                   if (current->m_specFlags.spec & Entry::Protocol)
                   { // Objective-C protocol
                     unput('{'); // fake start of body
                     BEGIN( ClassVar );
                   }
                   else
                   {
                     BEGIN( lastClassTemplSpecContext );
                   }
                 }
               }
	YY_BREAK
case 630:
YY_RULE_SETUP
#line 5695 "scanner.l"
{
                    current->name += scannerYYtext;
                    sharpCount++;
                  }
	YY_BREAK
case 631:
YY_RULE_SETUP
#line 5699 "scanner.l"
{
                    current->name += scannerYYtext;
               }
	YY_BREAK
case 632:
/* rule 632 can match eol */
YY_RULE_SETUP
#line 5702 "scanner.l"
{ // forward declaration
                                          if (current->tArgLists && current->tArgLists->count()>0)
                                          {
                                            // found a forward template declaration, this has
                                            // a purpose of its own
                                            current->name = scannerYYtext;
                                            current->name=current->name.left(current->name.length()-1).trimmed();
                                            //printf("template class declaration for %s!\n",current->name.data());
                   QByteArray rn = current_root->name;
                   //printf("cn=`%s' rn=`%s' isTypedef=%d\n",cn.data(),rn.data(),isTypedef);
                   if (!current->name.isEmpty() && !rn.isEmpty())
                   {
                     prependScope();
                   }
                                            current->m_specFlags.spec |= Entry::ForwardDecl;
                                            current_root->addSubEntry(current, current_root);
                                             current = QMakeShared<Entry>();
                                          }
                 else if (insideIDL &&
                          (((current_root->m_specFlags.spec & (Entry::Interface | Entry::Service)) &&
                            (current->m_specFlags.spec & Entry::Interface)) ||
                           ((current_root->m_specFlags.spec & (Entry::Service | Entry::Singleton)) &&
                            (current->m_specFlags.spec & Entry::Service))))
                 {
                   // interface inside of UNO IDL service or interface
                   // service inside of UNO IDL service or singleton
                   // there may be documentation on the member,
                   // so do not throw it away...
                   current->name = scannerYYtext;
                   current->name=current->name.left(current->name.length()-1).trimmed();
                   current->section = (current->m_specFlags.spec & Entry::Interface)
                       ? Entry::EXPORTED_INTERFACE_SEC
                       : Entry::INCLUDED_SERVICE_SEC;
//                 current->section = Entry::MEMBERDOC_SEC;
                   current->m_specFlags.spec &= ~(Entry::Interface|Entry::Service);

// FIXME: horrible: Interface == Gettable, so need to clear it - actually we are mixing values from different enums in
// this case... granted only Optional and Interface are actually valid in this context but urgh...
                   current_root->addSubEntry(current, current_root);
                   current = QMakeShared<Entry>();
                 }

                 unput(';');
                 current->reset();
                 initEntry();
                 if (isTypedef) // typedef of a class, put typedef keyword back
                 {
                   current->type.prepend("typedef");
                 }
                 BEGIN( FindMembers );
               }
	YY_BREAK
case 633:
/* rule 633 can match eol */
YY_RULE_SETUP
#line 5753 "scanner.l"
{
                 current->name = scannerYYtext ;
                 lineCount();
                                          if (insideCpp && current->name=="alignas") // C++11
                                          {
                                            lastAlignAsContext = YY_START;
                                            BEGIN( AlignAs );
                                          }
                                          else
                                          {
                                            if (current->m_specFlags.spec & Entry::Protocol)
                                            {
                                              current->name += "-p";
                                            }
                                            BEGIN( ClassVar );
                                          }
               }
	YY_BREAK
case 634:
YY_RULE_SETUP
#line 5770 "scanner.l"
{ roundCount=0;
                                          BEGIN( AlignAsEnd );
                                        }
	YY_BREAK
case 635:
/* rule 635 can match eol */
YY_RULE_SETUP
#line 5773 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 636:
YY_RULE_SETUP
#line 5774 "scanner.l"

	YY_BREAK
case 637:
YY_RULE_SETUP
#line 5775 "scanner.l"
{ roundCount++; }
	YY_BREAK
case 638:
YY_RULE_SETUP
#line 5776 "scanner.l"
{ if (--roundCount<0)
                                          {
                                            BEGIN( lastAlignAsContext );
                                          }
                                        }
	YY_BREAK
case 639:
/* rule 639 can match eol */
YY_RULE_SETUP
#line 5781 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 640:
YY_RULE_SETUP
#line 5782 "scanner.l"

	YY_BREAK
case 641:
/* rule 641 can match eol */
YY_RULE_SETUP
#line 5783 "scanner.l"
{  // multiple forward declarations on one line
                                           // e.g. @protocol A,B;
                 current->reset();
                 initEntry();
                  }
	YY_BREAK
case 642:
/* rule 642 can match eol */
YY_RULE_SETUP
#line 5788 "scanner.l"
{
                 current->name = scannerYYtext ;
                                          if (insideCpp || insideObjC)
                                          {
                                            current->id = ClangParser::instance()->lookup(yyLineNr,scannerYYtext);
                                          }
                 lineCount();
                 if (current->m_specFlags.spec & Entry::Protocol)
                 {
                   current->name += "-p";
                 }
                 if ((current->m_specFlags.spec & Entry::Protocol) ||
                     current->section == Entry::OBJCIMPL_SEC)
                 {
                   unput('{'); // fake start of body
                 }
                 BEGIN( ClassVar );
               }
	YY_BREAK
case 643:
/* rule 643 can match eol */
YY_RULE_SETUP
#line 5806 "scanner.l"
{ // C# style scope
                 current->name = substitute(scannerYYtext,".","::");
                 lineCount();
                 BEGIN( ClassVar );
                                        }
	YY_BREAK
case 644:
/* rule 644 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 5811 "scanner.l"
{
                    if (insideIDL && qstrncmp(scannerYYtext,"switch",6)==0 && !isId(scannerYYtext[6]))
                 {
                   // Corba IDL style union
                   roundCount=0;
                   BEGIN(SkipUnionSwitch);
                 }
                 else
                 {
                      addType(current);
                   current->name = scannerYYtext;
                   current->name = current->name.trimmed();
                   lineCount();
                      BEGIN( FindMembers );
                 }
                  }
	YY_BREAK
case 645:
YY_RULE_SETUP
#line 5827 "scanner.l"
{
                 if (isTypedef)
                 {
                   // multiple types in one typedef
                   unput(',');
                   current->type.prepend("typedef ");
                   BEGIN(FindMembers);
                 }
                 else
                 {
                      // Multiple class forward declaration
                 }
                  }
	YY_BREAK
case 646:
/* rule 646 can match eol */
YY_RULE_SETUP
#line 5840 "scanner.l"
{
                    if (insideCli)
                 {
                   if (scannerYYtext[0]=='s') // sealed
                     current->m_specFlags.spec|= Entry::SealedClass;
                   else // abstract
                     current->m_specFlags.m_isAbstractClass = true;
                   BEGIN( ClassVar );
                 }
                 else
                 {
                   REJECT;
                 }
               }
	YY_BREAK
case 647:
YY_RULE_SETUP
#line 5854 "scanner.l"
{
                                          if (insideCpp || insideObjC)
                                          {
                                            current->id = ClangParser::instance()->lookup(yyLineNr,scannerYYtext);
                                          }
                    if (insideIDL && qstrcmp(scannerYYtext,"switch")==0)
                 {
                   // Corba IDL style union
                   roundCount=0;
                   BEGIN(SkipUnionSwitch);
                 }
                 else if ((insideJava || insidePHP || insideJS) && (qstrcmp(scannerYYtext,"implements")==0 || qstrcmp(scannerYYtext,"extends")==0))
                 {
                      current->type.resize(0);
                   baseProt=Public;
                                            baseVirt=Normal;
                   baseName.resize(0);
                   BEGIN( BasesProt ) ;
                 }
                 else if (insideCSharp && qstrcmp(scannerYYtext,"where")==0) // C# type contraint
                 {

                   current->typeConstr = ArgumentList();
                   current->typeConstr.append(Argument());

                   lastCSConstraint = YY_START;
                   BEGIN( CSConstraintName );
                 }
                 else if (insideCli &&  qstrcmp(scannerYYtext,"abstract")==0)
                 {
                   current->m_specFlags.spec |= Entry::Abstract;
                 }
                 else if (insideCli && qstrcmp(scannerYYtext,"sealed")==0)
                 {
                   current->m_specFlags.spec |= Entry::Sealed;
                 }
                 else if (qstrcmp(scannerYYtext,"final")==0)
                 {
                     current->m_specFlags.m_isFinal = true;
                 }
                 else
                 {
                   if (current->section == Entry::ENUM_SEC)
                   { // found "enum a b" -> variable
                     current->section = Entry::VARIABLE_SEC ;
                   }
                   current->type += ' ' ;
                   current->type += current->name ;
                   current->name = scannerYYtext ;

                   if (nameIsOperator(current->name))
                   {
                          BEGIN( Operator );
                   }
                 }
                  }
	YY_BREAK
case 648:
YY_RULE_SETUP
#line 5910 "scanner.l"
{
                    if (insideObjC && *scannerYYtext=='(') // class category
                 {
                   current->name+='(';
                                            //if (current->section!=Entry::OBJCIMPL_SEC)
                                            //{
                     current->m_specFlags.spec |= Entry::Category;
                                            //}
                   BEGIN( ClassCategory );
                 }
                 else
                 {
                                            // probably a function anyway
                                            unput(*scannerYYtext);
                   BEGIN( FindMembers );
                 }
               }
	YY_BREAK
case 649:
YY_RULE_SETUP
#line 5927 "scanner.l"
{ /* empty comment */ }
	YY_BREAK
case 650:
YY_RULE_SETUP
#line 5928 "scanner.l"
{ // special comment
                                          fullArgString.resize(0);
                 lastCopyArgChar='#'; // end marker
                 lastCommentInArgContext=YY_START;
                 if (scannerYYtext[1]=='/')
                   BEGIN( CopyArgCommentLine );
                 else
                   BEGIN( CopyArgComment );
               }
	YY_BREAK
case 651:
YY_RULE_SETUP
#line 5937 "scanner.l"
{ // artificially inserted token to signal end of comment block
                                          current->typeConstr.last().docs = fullArgString;
                  }
	YY_BREAK
case 652:
YY_RULE_SETUP
#line 5940 "scanner.l"
{ // end of type constraint reached
                                          // parse documentation of the constraints
                                          handleParametersCommentBlocks(&current->typeConstr);
                 unput('{');
                 BEGIN( lastCSConstraint );
               }
	YY_BREAK
case 653:
YY_RULE_SETUP
#line 5946 "scanner.l"
{
                                          handleParametersCommentBlocks(&current->typeConstr);
                 unput(';');
                 BEGIN( lastCSConstraint );
                  }
	YY_BREAK
case 654:
YY_RULE_SETUP
#line 5951 "scanner.l"
{
                                          BEGIN( CSConstraintType );
                                        }
	YY_BREAK
case 655:
YY_RULE_SETUP
#line 5954 "scanner.l"
{
                                          // parameter name
                                          current->typeConstr.last().name = scannerYYtext;
                                        }
	YY_BREAK
case 656:
YY_RULE_SETUP
#line 5958 "scanner.l"
{ // another constraint for a different param
                 current->typeConstr.append(Argument());
                                          BEGIN( CSConstraintName );
                  }
	YY_BREAK
case 657:
YY_RULE_SETUP
#line 5962 "scanner.l"
{
                                          if (current->typeConstr.last().type.isEmpty())
                                              // first type constraint for this parameter
                                          {
                                            current->typeConstr.last().type=scannerYYtext;
                                          }
                                          else // new type constraint for same parameter
                                          {
                  QByteArray name = current->typeConstr.last().name;
                  current->typeConstr.append(Argument());
                  current->typeConstr.last().name = name;
                  current->typeConstr.last().type = scannerYYtext;
                                          }
                                        }
	YY_BREAK
case 658:
/* rule 658 can match eol */
YY_RULE_SETUP
#line 5976 "scanner.l"
{
                                          lineCount();
               }
	YY_BREAK
case 659:
YY_RULE_SETUP
#line 5979 "scanner.l"
{
               }
	YY_BREAK
case 660:
YY_RULE_SETUP
#line 5981 "scanner.l"
{
                 current->name+=scannerYYtext;
               }
	YY_BREAK
case 661:
/* rule 661 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 5984 "scanner.l"
{
                 current->name+=')';
                 BEGIN( ClassVar );
                                        }
	YY_BREAK
case 662:
/* rule 662 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 5988 "scanner.l"
{
                 current->name+=')';
                 BEGIN( ObjCProtocolList );
                                        }
	YY_BREAK
case 663:
YY_RULE_SETUP
#line 5992 "scanner.l"
{
                 current->name+=')';
                 if ((current->section & Entry::Protocol) ||
                     current->section == Entry::OBJCIMPL_SEC)
                 {
                   unput('{'); // fake start of body
                 }
                 else // category has no variables so push back an empty body
                 {
                   unput('}');
                   unput('{');
                 }
                 BEGIN( ClassVar );
               }
	YY_BREAK
case 664:
YY_RULE_SETUP
#line 6006 "scanner.l"
{
                 if (current->section==Entry::ENUM_SEC) // enum E:2, see bug 313527,
                                                                                 // or C++11 style enum: 'E : unsigned int {...}'
                 {
                   current->args.resize(0);
                      BEGIN(EnumBaseType);
                 }
                 else
                 {
                   current->type.resize(0);
                   if ((current->m_specFlags.spec & Entry::Interface) ||
                  (current->m_specFlags.spec & Entry::Struct)    ||
                  (current->m_specFlags.spec & Entry::Ref)       ||
                  (current->m_specFlags.spec & Entry::Value)     ||
                  insidePHP || insideCSharp || insideD || insideObjC || insideIDL
                      )
                     baseProt=Public;
                   else
                     baseProt=Private;
                   baseVirt=Normal;
                   baseName.resize(0);
                   BEGIN( BasesProt ) ;
                 }
               }
	YY_BREAK
case 665:
YY_RULE_SETUP
#line 6030 "scanner.l"
{
                    unput(*scannerYYtext);
                 if (isTypedef) // typedef of a class, put typedef keyword back
                 {
                   current->type.prepend("typedef");
                 }
                 if ((scannerYYtext[0]=='*' || scannerYYtext[0]=='&') &&
                     current->section == Entry::ENUM_SEC)
                 { // found "enum a *b" -> variable
                   current->section = Entry::VARIABLE_SEC ;
                 }
                 BEGIN( FindMembers );
                  }
	YY_BREAK
case 666:
/* rule 666 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 6043 "scanner.l"
{
                    if (!insideObjC)
                 {
                   REJECT;
                 }
                 else
                 {
                   lineCount();
                   current->program+=scannerYYtext;
                                            current->fileName = yyFileName ;
                   current->startLine = yyLineNr ;
                   current->startColumn = yyColNr;
                   curlyCount=0;
                   BEGIN( ReadBodyIntf );
                 }
                  }
	YY_BREAK
case 667:
/* rule 667 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
#line 6060 "scanner.l"
case 668:
/* rule 668 can match eol */
#line 6061 "scanner.l"
case 669:
/* rule 669 can match eol */
#line 6062 "scanner.l"
case 670:
/* rule 670 can match eol */
YY_RULE_SETUP
#line 6062 "scanner.l"
{
                    if (!insideObjC)
                 {
                   REJECT;
                 }
                 else
                 {
                   lineCount();
                   current->program+=scannerYYtext;
                                            current->fileName = yyFileName ;
                   current->startLine = yyLineNr ;
                   current->startColumn = yyColNr;
                   curlyCount=0;
                   BEGIN( ReadBodyIntf );
                 }
                  }
	YY_BREAK
case 671:
YY_RULE_SETUP
#line 6078 "scanner.l"
{
                                          current->fileName = yyFileName ;
                 current->startLine = yyLineNr ;
                 current->startColumn = yyColNr;
                 current->name = removeRedundantWhiteSpace(current->name);
                 if (current->name.isEmpty() && !isTypedef) // anonymous compound
                 {
                   if (current->section==Entry::NAMESPACE_SEC) // allow reopening of anonymous namespaces
                   {
                     if (Config::getBool("extract-anon-namespaces")) // use visible name
                     {
                       current->name="anonymous_namespace{"+stripPath(current->fileName)+"}";
                     }
                     else // use invisible name
                     {
                        current->name = QString("@%1").arg(anonNSCount).toUtf8();
                     }
                   }
                   else
                   {
                      current->name = QString("@%1").arg(anonCount++).toUtf8();
                   }
                 }
                 curlyCount=0;
                 if (current_root && // not a nested struct inside an @interface section
                     !(current_root->m_specFlags.spec & Entry::Interface) &&
                     ((current->m_specFlags.spec & (Entry::Interface | Entry::Protocol | Entry::Category) ||
                       current->section==Entry::OBJCIMPL_SEC)
                     ) &&
                     insideObjC
                    )
                 { // ObjC body that ends with @end
                   BEGIN( ReadBodyIntf );
                 }
                 else if (current->section==Entry::NAMESPACE_SEC)
                 { // namespace body
                   BEGIN( ReadNSBody );
                 }
                 else
                 { // class body
                   BEGIN( ReadBody ) ;
                 }
               }
	YY_BREAK
case 672:
/* rule 672 can match eol */
YY_RULE_SETUP
#line 6121 "scanner.l"
{ lineCount(); baseVirt = Virtual; }
	YY_BREAK
case 673:
/* rule 673 can match eol */
YY_RULE_SETUP
#line 6122 "scanner.l"
{ lineCount(); baseProt = Public; }
	YY_BREAK
case 674:
/* rule 674 can match eol */
YY_RULE_SETUP
#line 6123 "scanner.l"
{ lineCount(); baseProt = Protected; }
	YY_BREAK
case 675:
/* rule 675 can match eol */
YY_RULE_SETUP
#line 6124 "scanner.l"
{ lineCount(); baseProt = Package; }
	YY_BREAK
case 676:
/* rule 676 can match eol */
YY_RULE_SETUP
#line 6125 "scanner.l"
{ lineCount(); baseProt = Private; }
	YY_BREAK
case 677:
/* rule 677 can match eol */
YY_RULE_SETUP
#line 6126 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 678:
YY_RULE_SETUP
#line 6127 "scanner.l"
{ unput(*scannerYYtext); BEGIN(Bases); }
	YY_BREAK
case 679:
YY_RULE_SETUP
#line 6128 "scanner.l"
{ // PHP namespace token, not sure if interspacing is allowed but it gives problems (see bug 640847)
                 if (! insidePHP)
                 {
                   REJECT;
                 }
                 else // PHP base class of the form \Ns\Cl or Ns\Cl
                 {
                   lineCount();
                   QByteArray bn=scannerYYtext;
                   bn = substitute(bn,"\\","::");
                   baseName += bn;
                   current->args += ' ';
                   current->args += scannerYYtext;
                 }
                                        }
	YY_BREAK
case 680:
/* rule 680 can match eol */
YY_RULE_SETUP
#line 6143 "scanner.l"
{
                  lineCount();
                  QByteArray baseScope = scannerYYtext;
                  if (insideCSharp && baseScope.trimmed()=="where")
                 {
                   // type contraint for a class

                  current->typeConstr = ArgumentList();
                  current->typeConstr.append(Argument());

                  lastCSConstraint = YY_START;
                  BEGIN( CSConstraintName );
                 }
                 else
                 {
                      baseName+=scannerYYtext;
                   current->args += ' ';
                   current->args += scannerYYtext;
                 }
               }
	YY_BREAK
case 681:
/* rule 681 can match eol */
YY_RULE_SETUP
#line 6163 "scanner.l"
{ // Java style class
                    QByteArray name = substitute(scannerYYtext,".","::");
                 baseName += name;
                 current->args += ' ';
                 current->args += name;
                  }
	YY_BREAK
case 682:
/* rule 682 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 6169 "scanner.l"
{
                                          if (!insideObjC)
                 {
                   REJECT;
                 }
                 else
                 {
                                            lineCount();
                   unput('{');
                 }
               }
	YY_BREAK
case 683:
YY_RULE_SETUP
#line 6180 "scanner.l"
{ // empty ObjC interface
                    unput('d'); // insert fake body: {}@end
                    unput('n');
                    unput('e');
                    unput('@');
                    unput('}');
                    unput('{');
               }
	YY_BREAK
case 684:
YY_RULE_SETUP
#line 6188 "scanner.l"
{ current->name += *scannerYYtext;
                    sharpCount=1;
                 roundCount=0;
                 lastSkipSharpContext = YY_START;
                 specName = &current->name;
                 BEGIN ( Specialization );
               }
	YY_BREAK
case 685:
/* rule 685 can match eol */
YY_RULE_SETUP
#line 6195 "scanner.l"
{
                                          lineCount();
                    sharpCount=1;
                 roundCount=0;
                 lastSkipSharpContext = YY_START;
                 if (insideObjC) // start of protocol list
                 {
                   unput(',');
                 }
                 else // template specialization
                 {
                   //if (insideCSharp) // generic
                   //{
                   //  baseName+="-g";
                   //}
                                            templateStr = scannerYYtext;
                   specName = &templateStr;
                   BEGIN ( Specialization );
                 }
               }
	YY_BREAK
case 686:
YY_RULE_SETUP
#line 6215 "scanner.l"
{ *specName += *scannerYYtext;
                    if (roundCount==0) sharpCount++;
                  }
	YY_BREAK
case 687:
YY_RULE_SETUP
#line 6218 "scanner.l"
{
                    *specName += *scannerYYtext;
                    if (roundCount==0 && --sharpCount<=0)
                 {
                   baseName+=removeRedundantWhiteSpace(*specName);
                   BEGIN(lastSkipSharpContext);
                 }
                  }
	YY_BREAK
case 688:
/* rule 688 can match eol */
YY_RULE_SETUP
#line 6226 "scanner.l"
{ lineCount(); *specName +=' '; }
	YY_BREAK
case 689:
YY_RULE_SETUP
#line 6227 "scanner.l"
{ *specName += scannerYYtext; }
	YY_BREAK
case 690:
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 6228 "scanner.l"
{ // M$ C++ extension to allow >> to close a template...
                    unput('>');
                    unput(' ');
                    unput('>');
                                        }
	YY_BREAK
case 691:
YY_RULE_SETUP
#line 6233 "scanner.l"
{
                                          if (insideCSharp) // for C# >> ends a nested template
                 {
                   REJECT;
                 }
                 else // for C++ >> is a bitshift
                      // operator and > > would end
                      // a nested template.
                      // We require the bitshift to be enclosed in braces.
                      // See http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html
                 {
                   if (roundCount>0)
                   {
                                              *specName += scannerYYtext;
                   }
                   else
                   {
                        unput('>');
                        unput(' ');
                        unput('>');
                   }
                 }
                                        }
	YY_BREAK
case 692:
/* rule 692 can match eol */
YY_RULE_SETUP
#line 6256 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 693:
YY_RULE_SETUP
#line 6257 "scanner.l"
{ *specName += *scannerYYtext; roundCount++; }
	YY_BREAK
case 694:
YY_RULE_SETUP
#line 6258 "scanner.l"
{ *specName += *scannerYYtext; roundCount--; }
	YY_BREAK
case 695:
YY_RULE_SETUP
#line 6259 "scanner.l"
{
                    *specName += *scannerYYtext;
                  }
	YY_BREAK
case 696:
YY_RULE_SETUP
#line 6262 "scanner.l"
{ ++roundCount; }
	YY_BREAK
case 697:
YY_RULE_SETUP
#line 6263 "scanner.l"
{ if (--roundCount<0)
                   BEGIN ( lastSkipRoundContext );
               }
	YY_BREAK
case 698:
YY_RULE_SETUP
#line 6266 "scanner.l"
{
                    lastStringContext=SkipRound;
                 BEGIN(SkipString);
                  }
	YY_BREAK
case 699:
/* rule 699 can match eol */
YY_RULE_SETUP
#line 6270 "scanner.l"
{ lineCount();
                                          if (insideProtocolList)
                 {
                   baseName+="-p";
                 }
                 else
                 {
                                            current->args += ',' ;
                 }
                 current->name = removeRedundantWhiteSpace(current->name);
                    if (! baseName.isEmpty())
                 {
                     current->extends.append(BaseInfo(baseName, baseProt, baseVirt));
                 }

                 if ((current->m_specFlags.spec & (Entry::Interface|Entry::Struct)) ||
                     insideJava || insidePHP || insideCSharp ||
                     insideD || insideObjC || insideIDL)
                 {
                   baseProt=Public;
                 }
                 else
                 {
                   baseProt=Private;
                 }
                 baseVirt=Normal;
                 baseName.resize(0);
                                          if (*scannerYYtext=='>')
                 { // end of a ObjC protocol list
                      insideProtocolList=FALSE;
                   if (scannerYYleng==1)
                   {
                     unput('{'); // dummy start body
                   }
                   else
                   {
                     yyless(1);
                   }
                 }
                 else
                 {
                   if (*scannerYYtext==',' && insideObjC) // Begin of protocol list
                   {
                        insideProtocolList=TRUE;
                   }
                   BEGIN(BasesProt);
                 }
               }
	YY_BREAK
case 700:
YY_RULE_SETUP
#line 6318 "scanner.l"
{ current->fileName = yyFileName ;
                 current->startLine = yyLineNr ;
                 current->startColumn = yyColNr;
                 current->name = removeRedundantWhiteSpace(current->name);

                    if (!baseName.isEmpty())
                   current->extends.append(BaseInfo(baseName, baseProt, baseVirt));

                 curlyCount=0;
                 if (insideObjC)
                 {
                   BEGIN( ReadBodyIntf );
                 }
                 else
                 {
                   BEGIN( ReadBody ) ;
                 }
               }
	YY_BREAK
case 701:
YY_RULE_SETUP
#line 6336 "scanner.l"
{
                    roundCount++;
                  }
	YY_BREAK
case 702:
YY_RULE_SETUP
#line 6339 "scanner.l"
{
                    if (--roundCount==0)
                 {
                   BEGIN(ClassVar);
                 }
                  }
	YY_BREAK
case 703:
/* rule 703 can match eol */
YY_RULE_SETUP
#line 6345 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 704:
YY_RULE_SETUP
#line 6346 "scanner.l"

	YY_BREAK
case 705:
/* rule 705 can match eol */
YY_RULE_SETUP
#line 6347 "scanner.l"
{ current->program += scannerYYtext ;
                 lineCount() ;
               }
	YY_BREAK
case 706:
YY_RULE_SETUP
#line 6350 "scanner.l"
{ current->program += scannerYYtext ; }
	YY_BREAK
case 707:
YY_RULE_SETUP
#line 6351 "scanner.l"
{ current->program += scannerYYtext ; }
	YY_BREAK
case 708:
YY_RULE_SETUP
#line 6352 "scanner.l"
{
                                          insideCode=TRUE;
                    current->program += scannerYYtext ;
                  }
	YY_BREAK
case 709:
YY_RULE_SETUP
#line 6356 "scanner.l"
{
                                          insideCode=FALSE;
                    current->program += scannerYYtext ;
                  }
	YY_BREAK
case 710:
YY_RULE_SETUP
#line 6360 "scanner.l"
{ current->program += scannerYYtext ; }
	YY_BREAK
case 711:
YY_RULE_SETUP
#line 6361 "scanner.l"
{ current->program += scannerYYtext ;
                 if (!insideCode) BEGIN( lastContext ) ;
               }
	YY_BREAK
case 712:
YY_RULE_SETUP
#line 6364 "scanner.l"
{ current->program += *scannerYYtext ; }
	YY_BREAK
case 713:
YY_RULE_SETUP
#line 6366 "scanner.l"
{
                    //printf("Start doc block at %d\n",yyLineNr);
                 removeSlashes=(scannerYYtext[1]=='/');
                 tmpDocType=-1;
                 if (!current->doc.isEmpty())
                 {
                   current->doc+="\n\n";
                 }
                 else
                 {
                   current->docLine = yyLineNr;
                   current->docFile = yyFileName;
                 }

                 lastDocContext = YY_START;
                 if (current_root->section & Entry::SCOPE_MASK)
                                          {
                   current->inside = current_root->name+"::";
                                          }
                 docBlockContext   = YY_START;
                 docBlockInBody    = YY_START==SkipCurly;
                 docBlockAutoBrief = Config::getBool("qt-auto-brief");

                                          QByteArray indent;
                                          indent.fill(' ',computeIndent(scannerYYtext,g_column));
                                          docBlock=indent;

                 if (docBlockAutoBrief)
                 {
                   current->briefLine = yyLineNr;
                   current->briefFile = yyFileName;
                 }
                 startCommentBlock(FALSE);
                 BEGIN( DocBlock );
               }
	YY_BREAK
case 714:
/* rule 714 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 6401 "scanner.l"
{
                    removeSlashes=(scannerYYtext[1]=='/');
                 lastDocContext = YY_START;

                 //printf("Found comment block at %s:%d\n",yyFileName,yyLineNr);
                 if (current_root->section & Entry::SCOPE_MASK)
                                          {
                   current->inside = current_root->name+"::";
                                          }
                 current->docLine = yyLineNr;
                 current->docFile = yyFileName;
                 docBlockContext = YY_START;
                 docBlockInBody  = YY_START==SkipCurly;
                                          static bool javadocAutoBrief = Config::getBool("javadoc-auto-brief");
                 docBlockAutoBrief = javadocAutoBrief;

                                          QByteArray indent;
                                          indent.fill(' ',computeIndent(scannerYYtext,g_column));
                                          docBlock=indent;

                 if (docBlockAutoBrief)
                 {
                   current->briefLine = yyLineNr;
                   current->briefFile = yyFileName;
                 }
                 startCommentBlock(FALSE);
                 BEGIN( DocBlock );
                  }
	YY_BREAK
case 715:
YY_RULE_SETUP
#line 6429 "scanner.l"
{
                 tmpDocType=-1;
                 lastDocContext = YY_START;
                 if (current_root->section & Entry::SCOPE_MASK)
                                          {
                   current->inside = current_root->name+"::";
                                          }
                 docBlockContext   = YY_START;
                 docBlockInBody    = YY_START==SkipCurly;
                 docBlockAutoBrief = FALSE;

                                          QByteArray indent;
                                          indent.fill(' ',computeIndent(scannerYYtext,g_column));
                                          docBlock=indent;

                 startCommentBlock(current->brief.isEmpty());
                 BEGIN( DocLine );
               }
	YY_BREAK
case 716:
/* rule 716 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 6447 "scanner.l"
{
                 tmpDocType=-1;
                 lastDocContext = YY_START;
                 if (current_root->section & Entry::SCOPE_MASK)
                                          {
                   current->inside = current_root->name+"::";
                                          }
                 docBlockContext   = YY_START;
                 docBlockInBody    = YY_START==SkipCurly;
                 docBlockAutoBrief = FALSE;
                                          QByteArray indent;
                                          indent.fill(' ',computeIndent(scannerYYtext,g_column));
                                          docBlock=indent;
                 startCommentBlock(current->brief.isEmpty());
                 BEGIN( DocLine );
               }
	YY_BREAK
case 717:
/* rule 717 can match eol */
YY_RULE_SETUP
#line 6463 "scanner.l"
{
                 lineCount();
                 externC=TRUE;
               }
	YY_BREAK
case 718:
YY_RULE_SETUP
#line 6467 "scanner.l"
{
                                          if (externC)
                 {
                   externC=FALSE;
                 }
                                          else if (insideCSharp &&
                     !current->name.isEmpty() &&
                     !current->type.isEmpty())
                 {
                   if (containsWord(current->type,"event")) // event
                   {
                        current->mtype = mtype = MethodTypes::Event;
                   }
                   else // property
                   {
                        current->mtype = mtype = MethodTypes::Property;
                   }
                   current->bodyLine = yyLineNr;
                   curlyCount=0;
                   BEGIN( CSAccessorDecl );
                 }
                 else if (insideIDL && (current->m_specFlags.spec & Entry::Attribute))
                 {
                   // UNO IDL: attributes may have setter and getter
                   // exception specifications
                   current->exception = " {";
                   BEGIN(UNOIDLAttributeBlock);
                 }
                 else
                 {
                   if ((insideJava || insideCSharp || insideD) &&
                  current->name.isEmpty()
                      )
                   {
                     // static Java initializer
                     needsSemi = FALSE;
                     if (current->stat)
                     {
                  current->name="[static initializer]";
                  current->type.resize(0);
                     }
                     else
                     {
                  current->name="[instance initializer]";
                     }
                                              unput(*scannerYYtext);
                     BEGIN( Function );
                   }
                   else
                   {
                     // pre C++11 code -> ignore the initializer
                                              //needsSemi = TRUE;
                     //current->type.resize(0);
                     //current->name.resize(0);
                     //current->args.resize(0);
                     //current->argList.clear();
                     //curlyCount=0;
                     //BEGIN( SkipCurlyBlock );

                                              // C++11 style initializer list
                        current->bodyLine = yyLineNr;
                                              current->initializer = scannerYYtext;
                     lastInitializerContext = YY_START;
                     initBracketCount=1;
                     BEGIN(ReadInitializer);
                   }
                 }
                  }
	YY_BREAK
case 719:
YY_RULE_SETUP
#line 6535 "scanner.l"
{ curlyCount++; }
	YY_BREAK
case 720:
YY_RULE_SETUP
#line 6536 "scanner.l"
{
                                          if (curlyCount)
                                          {
                                            curlyCount--;
                 }
                 else
                 {
                      mtype = MethodTypes::Method;
                                            virt = Normal;
                                            unput(';');
                   BEGIN(FindMembers);
                 }
                                        }
	YY_BREAK
case 721:
/* rule 721 can match eol */
YY_RULE_SETUP
#line 6549 "scanner.l"
{ if (curlyCount==0) current->m_specFlags.spec |= Entry::PrivateSettable;   }
	YY_BREAK
case 722:
/* rule 722 can match eol */
YY_RULE_SETUP
#line 6550 "scanner.l"
{ if (curlyCount==0) current->m_specFlags.spec |= Entry::ProtectedSettable; }
	YY_BREAK
case 723:
/* rule 723 can match eol */
YY_RULE_SETUP
#line 6551 "scanner.l"
{ if (curlyCount==0) current->m_specFlags.spec |= Entry::PrivateGettable;     }
	YY_BREAK
case 724:
/* rule 724 can match eol */
YY_RULE_SETUP
#line 6552 "scanner.l"
{ if (curlyCount==0) current->m_specFlags.spec |= Entry::ProtectedGettable; }
	YY_BREAK
case 725:
YY_RULE_SETUP
#line 6553 "scanner.l"
{ if (curlyCount==0) current->m_specFlags.spec |= Entry::Settable;  }
	YY_BREAK
case 726:
YY_RULE_SETUP
#line 6554 "scanner.l"
{ if (curlyCount==0) current->m_specFlags.spec |= Entry::Gettable;  }
	YY_BREAK
case 727:
YY_RULE_SETUP
#line 6555 "scanner.l"
{ if (curlyCount==0) current->m_specFlags.spec |= Entry::Addable;   }
	YY_BREAK
case 728:
YY_RULE_SETUP
#line 6556 "scanner.l"
{ if (curlyCount==0) current->m_specFlags.spec |= Entry::Removable; }
	YY_BREAK
case 729:
YY_RULE_SETUP
#line 6557 "scanner.l"
{ if (curlyCount==0) current->m_specFlags.spec |= Entry::Raisable;  }
	YY_BREAK
case 730:
YY_RULE_SETUP
#line 6558 "scanner.l"
{}
	YY_BREAK
case 731:
/* rule 731 can match eol */
YY_RULE_SETUP
#line 6559 "scanner.l"
{ lineCount(); }
	YY_BREAK
/**********************************************************************************/
/******************** Documentation block related rules ***************************/
/**********************************************************************************/
/* ---- Single line comments ------ */
case 732:
/* rule 732 can match eol */
YY_RULE_SETUP
#line 6567 "scanner.l"
{ // continuation of multiline C++-style comment
                       docBlock+=scannerYYtext;
                                  docBlock.resize(docBlock.length() - 3);
                                           lineCount();
                                        }
	YY_BREAK
case 733:
/* rule 733 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 6572 "scanner.l"
{ // ignore marker line (see bug700345)
                 handleCommentBlock(docBlock.data(),current->brief.isEmpty());
                 BEGIN( docBlockContext );
                  }
	YY_BREAK
case 734:
/* rule 734 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 6576 "scanner.l"
{ // whole line
                    docBlock+=scannerYYtext;
                 handleCommentBlock(docBlock.data(),current->brief.isEmpty());
                 BEGIN( docBlockContext );
                  }
	YY_BREAK
/* ---- Comments blocks ------ */
case 735:
YY_RULE_SETUP
#line 6584 "scanner.l"
{ // end of comment block
                         handleCommentBlock(docBlock.data(),FALSE);
                 BEGIN(docBlockContext);
                  }
	YY_BREAK
case 736:
/* rule 736 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 6588 "scanner.l"
{

                                          QByteArray indent;
                                          indent.fill(' ',computeIndent(scannerYYtext,g_column));
                                          docBlock+=indent;
                  }
	YY_BREAK
case 737:
/* rule 737 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 6594 "scanner.l"
{ // start of a comment line
                                          QByteArray indent;
                                          indent.fill(' ',computeIndent(scannerYYtext,g_column));
                                          docBlock+=indent;
                  }
	YY_BREAK
case 738:
YY_RULE_SETUP
#line 6599 "scanner.l"
{ // strip embedded C++ comments if at the start of a line
                  }
	YY_BREAK
case 739:
YY_RULE_SETUP
#line 6601 "scanner.l"
{ // slashes in the middle of a comment block
                    docBlock+=scannerYYtext;
                  }
	YY_BREAK
case 740:
YY_RULE_SETUP
#line 6604 "scanner.l"
{ // start of a new comment in the
                                          // middle of a comment block
                    docBlock+=scannerYYtext;
                  }
	YY_BREAK
case 741:
/* rule 741 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 6608 "scanner.l"
{ // escaped command
                    docBlock+=scannerYYtext;
                  }
	YY_BREAK
case 742:
YY_RULE_SETUP
#line 6611 "scanner.l"
{

                  docBlock+=scannerYYtext;
                  docBlockName=&scannerYYtext[1];

                 if (docBlockName.at(1)=='{')
                 {
                        docBlockName[1]='}';
                 }

                 g_fencedSize=0;
                 g_nestedComment=FALSE;
                    BEGIN(DocCopyBlock);
                                        }
	YY_BREAK
case 743:
YY_RULE_SETUP
#line 6625 "scanner.l"
{
                                          docBlock+=scannerYYtext;
                      docBlockName="<pre>";
                                          g_fencedSize=0;
                                          g_nestedComment=FALSE;
                    BEGIN(DocCopyBlock);
                  }
	YY_BREAK
case 744:
/* rule 744 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 6632 "scanner.l"
{ // verbatim command (which could contain nested comments!)
                                          docBlock+=scannerYYtext;
                      docBlockName=&scannerYYtext[1];
                                          g_fencedSize=0;
                                          g_nestedComment=FALSE;
                    BEGIN(DocCopyBlock);
                  }
	YY_BREAK
case 745:
YY_RULE_SETUP
#line 6639 "scanner.l"
{
                    docBlock+=scannerYYtext;
                    docBlockName="~~~";
                    g_fencedSize=scannerYYleng;
                    g_nestedComment=FALSE;
                    BEGIN(DocCopyBlock);
                 }
	YY_BREAK
case 746:
YY_RULE_SETUP
#line 6646 "scanner.l"
{
                    docBlock += scannerYYtext;
                    docBlockName    = "```";
                    g_fencedSize    = scannerYYleng;
                    g_nestedComment = FALSE;
                    BEGIN(DocCopyBlock);
                 }
	YY_BREAK
case 747:
YY_RULE_SETUP
#line 6653 "scanner.l"
{
                    if (insideCSharp)
                 {
                   docBlock+=scannerYYtext;
                   docBlockName="<code>";
                                            g_nestedComment=FALSE;
                   BEGIN(DocCopyBlock);
                 }
                 else
                 {
                   REJECT;
                 }
                  }
	YY_BREAK
case 748:
YY_RULE_SETUP
#line 6666 "scanner.l"
{ // any character that isn't special
                    docBlock+=scannerYYtext;
                  }
	YY_BREAK
case 749:
/* rule 749 can match eol */
YY_RULE_SETUP
#line 6669 "scanner.l"
{ // newline
                                          lineCount();
                 docBlock+=*scannerYYtext;
                  }
	YY_BREAK
case 750:
YY_RULE_SETUP
#line 6673 "scanner.l"
{ // command block
                 docBlock+=*scannerYYtext;
                  }
	YY_BREAK
/* ---- Copy verbatim sections ------ */
case 751:
YY_RULE_SETUP
#line 6679 "scanner.l"
{ // end of a <pre> block
                    docBlock+=scannerYYtext;
                 if (docBlockName=="<pre>")
                 {
                      BEGIN(DocBlock);
                 }
                  }
	YY_BREAK
case 752:
YY_RULE_SETUP
#line 6686 "scanner.l"
{ // end of a <code> block
                    docBlock+=scannerYYtext;
                 if (docBlockName=="<code>")
                 {
                      BEGIN(DocBlock);
                 }
                  }
	YY_BREAK
case 753:
YY_RULE_SETUP
#line 6693 "scanner.l"
{
                    docBlock+=scannerYYtext;
                 BEGIN(DocBlock);
                  }
	YY_BREAK
case 754:
/* rule 754 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 6697 "scanner.l"
{ // end of verbatim block
                    docBlock+=scannerYYtext;
                 if (&scannerYYtext[4]==docBlockName)
                 {
                      BEGIN(DocBlock);
                 }
                  }
	YY_BREAK
case 755:
/* rule 755 can match eol */
YY_RULE_SETUP
#line 6704 "scanner.l"
{ // start of a comment line
                    if (docBlockName=="verbatim")
                 {
                   REJECT;
                 }
                    else if (docBlockName=="code")
                 {
                   REJECT;
                 }
                                          else
                                          {
                                            QByteArray indent;
                                            indent.fill(' ',computeIndent(scannerYYtext,0));
                                            docBlock+=indent;
                                          }
                  }
	YY_BREAK
case 756:
/* rule 756 can match eol */
YY_RULE_SETUP
#line 6720 "scanner.l"
{ // start of a comment line with two *'s
                    if (docBlockName=="code")
                                          {
                                            QByteArray indent;
                                            indent.fill(' ',computeIndent(scannerYYtext,0));
                                            docBlock+=indent;
                                          }
                                          else
                 {
                   REJECT;
                 }
                  }
	YY_BREAK
case 757:
YY_RULE_SETUP
#line 6732 "scanner.l"
{ // Assume *var or *(... is part of source code (see bug723516)
                 if (docBlockName=="code")
                                          {
                                            QByteArray indent;
                                            indent.fill(' ',computeIndent(scannerYYtext,-1));
                                            docBlock+=indent+"*";
                                          }
                                          else
                                          {
                                            REJECT;
                                          }
                                        }
	YY_BREAK
case 758:
/* rule 758 can match eol */
YY_RULE_SETUP
#line 6744 "scanner.l"
{ // start of a comment line with one *
                    if (docBlockName=="code")
                                          {
                                            QByteArray indent;
                                            if (g_nestedComment) // keep * it is part of the code
                                            {
                                              indent.fill(' ',computeIndent(scannerYYtext,-1));
                                              docBlock+=indent+"*";
                                            }
                                            else // remove * it is part of the comment block
                                            {
                                              indent.fill(' ',computeIndent(scannerYYtext,0));
                                              docBlock+=indent;
                                            }
                                          }
                                          else
                 {
                   REJECT;
                 }
                  }
	YY_BREAK
case 759:
YY_RULE_SETUP
#line 6764 "scanner.l"
{
                               docBlock+=scannerYYtext;
                               if (g_fencedSize==scannerYYleng)
                               {
                                 BEGIN(DocBlock);
                               }
                             }
	YY_BREAK
case 760:
YY_RULE_SETUP
#line 6771 "scanner.l"
{
                                 docBlock+=scannerYYtext;
                                 if (g_fencedSize==scannerYYleng) {
                                    BEGIN(DocBlock);
                                 }
                              }
	YY_BREAK
case 761:
YY_RULE_SETUP
#line 6777 "scanner.l"
{ // any character that is not special
                    docBlock+=scannerYYtext;
                  }
	YY_BREAK
case 762:
YY_RULE_SETUP
#line 6780 "scanner.l"
{
                                          if (scannerYYtext[1]=='*')
                                          {
                                            g_nestedComment=TRUE;
                                          }
                                          else if (scannerYYtext[0]=='*')
                                          {
                                            g_nestedComment=FALSE;
                                          }
                    docBlock+=scannerYYtext;
               }
	YY_BREAK
case 763:
/* rule 763 can match eol */
YY_RULE_SETUP
#line 6791 "scanner.l"
{ // newline
                    docBlock+=*scannerYYtext;
                                          lineCount();
                  }
	YY_BREAK
case 764:
YY_RULE_SETUP
#line 6795 "scanner.l"
{ // any other character
                    docBlock+=*scannerYYtext;
                  }
	YY_BREAK
case YY_STATE_EOF(DocCopyBlock):
#line 6798 "scanner.l"
{
                    warn(yyFileName,yyLineNr,
                     "reached end of file while inside a %s block!\n"
                     "The command that should end the block seems to be missing!\n",
                     docBlockName.data());
                    yyterminate();
                  }
	YY_BREAK
/* ------------- Prototype parser -------------- */
case 765:
YY_RULE_SETUP
#line 6809 "scanner.l"
{
                    current->name+=scannerYYtext;
                  }
	YY_BREAK
case 766:
YY_RULE_SETUP
#line 6812 "scanner.l"
{
                    current->args+=*scannerYYtext;
                 currentArgumentContext = PrototypeQual;
                 fullArgString = current->args;
                 copyArgString = &current->args;
                 BEGIN( ReadFuncArgType ) ;
                  }
	YY_BREAK
case 767:
YY_RULE_SETUP
#line 6819 "scanner.l"
{
                    current->type+=current->name + QByteArray(scannerYYtext);
                 current->name.resize(0);
                    BEGIN( PrototypePtr );
                  }
	YY_BREAK
case 768:
/* rule 768 can match eol */
YY_RULE_SETUP
#line 6824 "scanner.l"
{
                    current->name+=scannerYYtext;
                  }
	YY_BREAK
case 769:
YY_RULE_SETUP
#line 6827 "scanner.l"
{
                    current->args+=*scannerYYtext;
                 currentArgumentContext = PrototypeQual;
                 fullArgString = current->args;
                 copyArgString = &current->args;
                 BEGIN( ReadFuncArgType ) ;
                  }
	YY_BREAK
case 770:
YY_RULE_SETUP
#line 6834 "scanner.l"
{
                    current->type+=')';
                    BEGIN( Prototype );
                  }
	YY_BREAK
case 771:
YY_RULE_SETUP
#line 6838 "scanner.l"
{
                    current->name+=scannerYYtext;
                  }
	YY_BREAK
case 772:
YY_RULE_SETUP
#line 6841 "scanner.l"
{
                    BEGIN( PrototypeSkipLine);
                  }
	YY_BREAK
case 773:
YY_RULE_SETUP
#line 6844 "scanner.l"
{
                    current->args += " const ";
                 current->argList.constSpecifier=TRUE;
               }
	YY_BREAK
case 774:
YY_RULE_SETUP
#line 6848 "scanner.l"
{
                    current->args += " volatile ";
                 current->argList.volatileSpecifier=TRUE;
               }
	YY_BREAK
case 775:
YY_RULE_SETUP
#line 6852 "scanner.l"
{
                 current->args += " = 0";
                 current->virt = Pure;
                 current->argList.pureSpecifier=TRUE;
               }
	YY_BREAK
case 776:
YY_RULE_SETUP
#line 6857 "scanner.l"
{
                    current->exception = "throw(";
                 BEGIN(PrototypeExc);
                  }
	YY_BREAK
case 777:
YY_RULE_SETUP
#line 6861 "scanner.l"
{
                    current->exception += ')';
                 BEGIN(PrototypeQual);
                  }
	YY_BREAK
case 778:
YY_RULE_SETUP
#line 6865 "scanner.l"
{
                    current->exception += *scannerYYtext;
                  }
	YY_BREAK
case 779:
YY_RULE_SETUP
#line 6868 "scanner.l"
{
                    current->args += *scannerYYtext;
                  }
	YY_BREAK
case 780:
YY_RULE_SETUP
#line 6871 "scanner.l"
{
                    current->name += *scannerYYtext;
                  }
	YY_BREAK
case 781:
YY_RULE_SETUP
#line 6874 "scanner.l"
{
                  }
	YY_BREAK
/* ------------ Generic rules -------------- */
case 782:
/* rule 782 can match eol */
YY_RULE_SETUP
#line 6881 "scanner.l"
{  // line continuation
                    if (insideCSharp)
                 {
                   REJECT;
                 }
                 else
                 {
                                            lineCount();
                 }
                  }
	YY_BREAK
case 783:
/* rule 783 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scannerYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scannerYYtext again */
YY_RULE_SETUP
#line 6891 "scanner.l"
{
                 BEGIN( lastCContext ) ;
               }
	YY_BREAK
case 784:
YY_RULE_SETUP
#line 6894 "scanner.l"

	YY_BREAK
case 785:
/* rule 785 can match eol */
YY_RULE_SETUP
#line 6895 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 786:
YY_RULE_SETUP
#line 6896 "scanner.l"
{
                 if (insideIDL && insideCppQuote)
                 {
                   BEGIN(EndCppQuote);
                 }
               }
	YY_BREAK
case 787:
YY_RULE_SETUP
#line 6902 "scanner.l"
{
                    if (!insidePHP)
                      REJECT;
                    lastCContext = YY_START ;
                 BEGIN( SkipCxxComment ) ;
               }
	YY_BREAK
case 788:
YY_RULE_SETUP
#line 6908 "scanner.l"
{
                    if (insidePHP)
                 {
                      lastStringContext=YY_START;
                   BEGIN(SkipPHPString);
                 }
                  }
	YY_BREAK
case 789:
YY_RULE_SETUP
#line 6915 "scanner.l"
{
                    if (insidePHP)
                 {
                      lastStringContext=YY_START;
                   BEGIN(SkipString);
                 }
                  }
	YY_BREAK
case 790:
YY_RULE_SETUP
#line 6922 "scanner.l"

	YY_BREAK
case 791:
YY_RULE_SETUP
#line 6923 "scanner.l"

	YY_BREAK
case 792:
YY_RULE_SETUP
#line 6924 "scanner.l"
{ lastCContext = YY_START ;
                 BEGIN( SkipComment ) ;
               }
	YY_BREAK
case 793:
YY_RULE_SETUP
#line 6927 "scanner.l"
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 794:
YY_RULE_SETUP
#line 6928 "scanner.l"
{
                 lastCContext = YY_START ;
                 BEGIN( SkipCxxComment ) ;
               }
	YY_BREAK
case 795:
YY_RULE_SETUP
#line 6932 "scanner.l"
ECHO;
	YY_BREAK
#line 22665 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(AlignAs):
			case YY_STATE_EOF(AlignAsEnd):
			case YY_STATE_EOF(Define):
			case YY_STATE_EOF(DefineEnd):
			case YY_STATE_EOF(CompoundName):
			case YY_STATE_EOF(ClassVar):
			case YY_STATE_EOF(CSConstraintName):
			case YY_STATE_EOF(CSConstraintType):
			case YY_STATE_EOF(CSIndexer):
			case YY_STATE_EOF(ClassCategory):
			case YY_STATE_EOF(ClassTemplSpec):
			case YY_STATE_EOF(CliPropertyType):
			case YY_STATE_EOF(CliPropertyIndex):
			case YY_STATE_EOF(CliOverride):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(BasesProt):
			case YY_STATE_EOF(NextSemi):
			case YY_STATE_EOF(BitFields):
			case YY_STATE_EOF(EnumBaseType):
			case YY_STATE_EOF(FindMembers):
			case YY_STATE_EOF(FindMembersPHP):
			case YY_STATE_EOF(FindMemberName):
			case YY_STATE_EOF(FindFields):
			case YY_STATE_EOF(FindFieldArg):
			case YY_STATE_EOF(Function):
			case YY_STATE_EOF(FuncRound):
			case YY_STATE_EOF(ExcpRound):
			case YY_STATE_EOF(ExcpList):
			case YY_STATE_EOF(FuncQual):
			case YY_STATE_EOF(TrailingReturn):
			case YY_STATE_EOF(Operator):
			case YY_STATE_EOF(Array):
			case YY_STATE_EOF(ReadBody):
			case YY_STATE_EOF(ReadNSBody):
			case YY_STATE_EOF(ReadBodyIntf):
			case YY_STATE_EOF(Using):
			case YY_STATE_EOF(UsingAlias):
			case YY_STATE_EOF(UsingAliasEnd):
			case YY_STATE_EOF(UsingDirective):
			case YY_STATE_EOF(SkipCurly):
			case YY_STATE_EOF(SkipCurlyCpp):
			case YY_STATE_EOF(SkipCurlyEndDoc):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipPHPString):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(SkipC11Inits):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(SkipCPPBlock):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(SkipCurlyBlock):
			case YY_STATE_EOF(SkipRoundBlock):
			case YY_STATE_EOF(Sharp):
			case YY_STATE_EOF(SkipRound):
			case YY_STATE_EOF(SkipSquare):
			case YY_STATE_EOF(SkipRemainder):
			case YY_STATE_EOF(StaticAssert):
			case YY_STATE_EOF(DeclType):
			case YY_STATE_EOF(TypedefName):
			case YY_STATE_EOF(TryFunctionBlock):
			case YY_STATE_EOF(TryFunctionBlockEnd):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PackageName):
			case YY_STATE_EOF(JavaImport):
			case YY_STATE_EOF(PHPUse):
			case YY_STATE_EOF(PHPUseAs):
			case YY_STATE_EOF(CSAccessorDecl):
			case YY_STATE_EOF(CSGeneric):
			case YY_STATE_EOF(PreLineCtrl):
			case YY_STATE_EOF(DefinePHP):
			case YY_STATE_EOF(DefinePHPEnd):
			case YY_STATE_EOF(OldStyleArgs):
			case YY_STATE_EOF(SkipVerbString):
			case YY_STATE_EOF(ObjCMethod):
			case YY_STATE_EOF(ObjCReturnType):
			case YY_STATE_EOF(ObjCParams):
			case YY_STATE_EOF(ObjCParamType):
			case YY_STATE_EOF(ObjCProtocolList):
			case YY_STATE_EOF(ObjCPropAttr):
			case YY_STATE_EOF(ObjCSkipStatement):
			case YY_STATE_EOF(QtPropType):
			case YY_STATE_EOF(QtPropName):
			case YY_STATE_EOF(QtPropAttr):
			case YY_STATE_EOF(QtPropRead):
			case YY_STATE_EOF(QtPropWrite):
			case YY_STATE_EOF(CsObject):
			case YY_STATE_EOF(CsObjectName):
			case YY_STATE_EOF(CsObjectClose):
			case YY_STATE_EOF(CsIgnore):
			case YY_STATE_EOF(CsRegEnum):
			case YY_STATE_EOF(CsPropReadVar):
			case YY_STATE_EOF(CsPropReadMethod):
			case YY_STATE_EOF(CsPropWriteVar):
			case YY_STATE_EOF(CsPropWriteMethod):
			case YY_STATE_EOF(CsPropResetVar):
			case YY_STATE_EOF(CsPropResetMethod):
			case YY_STATE_EOF(CsPropNotifyVar):
			case YY_STATE_EOF(CsPropNotifyMethod):
			case YY_STATE_EOF(CsPropVar):
			case YY_STATE_EOF(CsPropMethod):
			case YY_STATE_EOF(CsPropJustVar):
			case YY_STATE_EOF(CsPropClose):
			case YY_STATE_EOF(CsSignal):
			case YY_STATE_EOF(CsSignalProtection):
			case YY_STATE_EOF(CsSignalSlotMethod):
			case YY_STATE_EOF(CsSignalSlotClose):
			case YY_STATE_EOF(CsSlot):
			case YY_STATE_EOF(CsSlotProtection):
			case YY_STATE_EOF(CsSignalSlot2):
			case YY_STATE_EOF(CsSignalSlot2Name):
			case YY_STATE_EOF(CsSignalSlot2Extra):
			case YY_STATE_EOF(CsSignalSlot2Close):
			case YY_STATE_EOF(ReadInitializer):
			case YY_STATE_EOF(UNOIDLAttributeBlock):
			case YY_STATE_EOF(GetCallType):
			case YY_STATE_EOF(CppQuote):
			case YY_STATE_EOF(EndCppQuote):
			case YY_STATE_EOF(MemberSpec):
			case YY_STATE_EOF(MemberSpecSkip):
			case YY_STATE_EOF(EndTemplate):
			case YY_STATE_EOF(FuncPtr):
			case YY_STATE_EOF(FuncPtrOperator):
			case YY_STATE_EOF(EndFuncPtr):
			case YY_STATE_EOF(ReadFuncArgType):
			case YY_STATE_EOF(ReadTempArgs):
			case YY_STATE_EOF(IDLUnionCase):
			case YY_STATE_EOF(NSAliasName):
			case YY_STATE_EOF(NSAliasArg):
			case YY_STATE_EOF(CopyString):
			case YY_STATE_EOF(CopyPHPString):
			case YY_STATE_EOF(CopyGString):
			case YY_STATE_EOF(CopyPHPGString):
			case YY_STATE_EOF(CopyRound):
			case YY_STATE_EOF(CopyCurly):
			case YY_STATE_EOF(GCopyRound):
			case YY_STATE_EOF(GCopyCurly):
			case YY_STATE_EOF(SkipUnionSwitch):
			case YY_STATE_EOF(Specialization):
			case YY_STATE_EOF(FuncPtrInit):
			case YY_STATE_EOF(FuncFunc):
			case YY_STATE_EOF(FuncFuncEnd):
			case YY_STATE_EOF(FuncFuncType):
			case YY_STATE_EOF(FuncFuncArray):
			case YY_STATE_EOF(CopyArgString):
			case YY_STATE_EOF(CopyArgPHPString):
			case YY_STATE_EOF(CopyArgRound):
			case YY_STATE_EOF(CopyArgSharp):
			case YY_STATE_EOF(CopyArgComment):
			case YY_STATE_EOF(CopyArgCommentLine):
			case YY_STATE_EOF(CopyArgVerbatim):
			case YY_STATE_EOF(HereDoc):
			case YY_STATE_EOF(HereDocEnd):
			case YY_STATE_EOF(CopyHereDoc):
			case YY_STATE_EOF(CopyHereDocEnd):
			case YY_STATE_EOF(RawString):
			case YY_STATE_EOF(RawGString):
			case YY_STATE_EOF(IDLAttribute):
			case YY_STATE_EOF(IDLProp):
			case YY_STATE_EOF(IDLPropName):
			case YY_STATE_EOF(Prototype):
			case YY_STATE_EOF(PrototypePtr):
			case YY_STATE_EOF(PrototypeQual):
			case YY_STATE_EOF(PrototypeExc):
			case YY_STATE_EOF(PrototypeSkipLine):
			case YY_STATE_EOF(DocLine):
			case YY_STATE_EOF(DocBlock):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed scannerYYin at a new source and called
			 * scannerYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = scannerYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( scannerYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * scannerYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of scannerYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			scannerYYrestart(scannerYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) scannerYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 4961 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 4961 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 4960);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up scannerYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					scannerYYrestart(scannerYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( scannerYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve scannerYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void scannerYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        scannerYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            scannerYY_create_buffer(scannerYYin,YY_BUF_SIZE );
	}

	scannerYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	scannerYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void scannerYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		scannerYYpop_buffer_state();
	 *		scannerYYpush_buffer_state(new_buffer);
     */
	scannerYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	scannerYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (scannerYYwrap()) processing, but the only time this flag
	 * is looked at is after scannerYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void scannerYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	scannerYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE scannerYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) scannerYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scannerYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) scannerYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in scannerYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	scannerYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with scannerYY_create_buffer()
 * 
 */
    void scannerYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		scannerYYfree((void *) b->yy_ch_buf  );

	scannerYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a scannerYYrestart() or at EOF.
 */
    static void scannerYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	scannerYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then scannerYY_init_buffer was _probably_
     * called from scannerYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void scannerYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		scannerYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void scannerYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	scannerYYensure_buffer_stack();

	/* This block is copied from scannerYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from scannerYY_switch_to_buffer. */
	scannerYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void scannerYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	scannerYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		scannerYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void scannerYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)scannerYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scannerYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)scannerYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scannerYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE scannerYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) scannerYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scannerYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	scannerYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to scannerYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       scannerYY_scan_bytes() instead.
 */
YY_BUFFER_STATE scannerYY_scan_string (yyconst char * yystr )
{
    
	return scannerYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to scannerYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE scannerYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) scannerYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in scannerYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = scannerYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in scannerYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scannerYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		scannerYYtext[scannerYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = scannerYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		scannerYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int scannerYYget_lineno  (void)
{
        
    return scannerYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *scannerYYget_in  (void)
{
        return scannerYYin;
}

/** Get the output stream.
 * 
 */
FILE *scannerYYget_out  (void)
{
        return scannerYYout;
}

/** Get the length of the current token.
 * 
 */
int scannerYYget_leng  (void)
{
        return scannerYYleng;
}

/** Get the current token.
 * 
 */

char *scannerYYget_text  (void)
{
        return scannerYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void scannerYYset_lineno (int  line_number )
{
    
    scannerYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see scannerYY_switch_to_buffer
 */
void scannerYYset_in (FILE *  in_str )
{
        scannerYYin = in_str ;
}

void scannerYYset_out (FILE *  out_str )
{
        scannerYYout = out_str ;
}

int scannerYYget_debug  (void)
{
        return scannerYY_flex_debug;
}

void scannerYYset_debug (int  bdebug )
{
        scannerYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from scannerYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    scannerYYin = stdin;
    scannerYYout = stdout;
#else
    scannerYYin = (FILE *) 0;
    scannerYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * scannerYYlex_init()
     */
    return 0;
}

/* scannerYYlex_destroy is for both reentrant and non-reentrant scanners. */
int scannerYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		scannerYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		scannerYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	scannerYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    scannerYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * scannerYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *scannerYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *scannerYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void scannerYYfree (void * ptr )
{
	free( (char *) ptr );	/* see scannerYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 6932 "scanner.l"



static void startCommentBlock(bool brief)
{
   if (brief) {
      current->briefFile = yyFileName;
      current->briefLine = yyLineNr;
   } else {
      current->docFile = yyFileName;
      current->docLine = yyLineNr;
   }
}

static void newEntry()
{
   // BROOM - possible issue

   if (tempEntry == 0) {
      // if temp entry is not 0 it holds current and current is actually
      // replaced by previous which was already added to current_root
      // so we should not add it again  (see bug723314)

      current_root->addSubEntry(current, current_root);
   }

   tempEntry = QSharedPointer<Entry>();
   previous = current;

   current = QMakeShared<Entry>();
   initEntry();
}

static void handleCommentBlock(const QByteArray &doc,bool brief)
{
   static bool hideInBodyDocs = Config::getBool("hide-in-body-docs");

   int position = 0;
   bool needsEntry = FALSE;

   if (docBlockInBody && hideInBodyDocs) {
      return;
   }

   int lineNr = brief ? current->briefLine : current->docLine;   // line of block start


  // fill in inbodyFile && inbodyLine the first time, see bug 633891
  // Entry *docEntry = docBlockInBody && previous ? previous : current;

  QSharedPointer<Entry> docEntry = docBlockInBody && previous ? previous : current;


  if (docBlockInBody && docEntry && docEntry->inbodyLine==-1)
  {
    docEntry->inbodyFile = yyFileName;
    docEntry->inbodyLine = lineNr;
  }

  while (parseCommentBlock(
   g_thisParser,
   docBlockInBody && previous ? previous : current,
   stripIndentation(doc),        // text
   yyFileName, // file
   lineNr,     // line of block start
   docBlockInBody ? FALSE : brief,               // isBrief
   docBlockInBody ? FALSE : docBlockAutoBrief,   // isJavaDocStyle
   docBlockInBody,                               // isInBody
   protection,
        position,
        needsEntry
        )
     )
  {
    if (needsEntry)
    {
      QByteArray docFile = current->docFile;
      newEntry();
      current->docFile = docFile;
      current->docLine = lineNr;
    }
  }
  if (needsEntry)
  {
    newEntry();
  }

  if (docBlockTerm)
  {
    unput(docBlockTerm);
    docBlockTerm=0;
  }
}

static void handleParametersCommentBlocks(ArgumentList *al)
{
   for (auto &a : *al) {

      if (! a.docs.isEmpty()) {
         int position = 0;
         bool needsEntry;

         // save context
         QByteArray orgDoc   = current->doc;
         QByteArray orgBrief = current->brief;
         int orgDocLine    = current->docLine;
         int orgBriefLine  = current->briefLine;

         current->doc.resize(0);
         current->brief.resize(0);

         while (parseCommentBlock(
                   g_thisParser,
                   current,
                   a.docs,             // text
                   yyFileName,         // file
                   current->docLine,   // line of block start
                   FALSE,
                   FALSE,
                   FALSE,
                   protection,
                   position,
                   needsEntry ) ) {

            if (needsEntry) {
               newEntry();
            }
         }

         if (needsEntry) {
            newEntry();
         }

         a.docs = current->doc;

         // restore context
         current->doc       = orgDoc;
         current->brief     = orgBrief;
         current->docLine   = orgDocLine;
         current->briefLine = orgBriefLine;
      }
   }
}

static void parseCompounds(QSharedPointer<Entry> rt)
{
   for (auto ce : rt->children() ) {

      if (! ce->program.isEmpty()) {

         padCount = 0;
         g_column = 0;

         inputString   = ce->program;
         inputPosition = 0;

         scannerYYrestart( scannerYYin );

         if (ce->section == Entry::ENUM_SEC || (ce->m_specFlags.spec & Entry::Enum)) {
            BEGIN(FindFields);
         } else {
            BEGIN(FindMembers);
         }

         current_root = ce;
         yyFileName   = ce->fileName;

         yyLineNr   = ce->startLine ;
         yyColNr    = ce->startColumn ;
         insideObjC = ce->lang == SrcLangExt_ObjC;

         current = QMakeShared<Entry>();
         gstat = FALSE;
         initEntry();

         // deep copy group list from parent (see bug 727732)
         if (rt->groups) {
            for (auto g : *rt->groups) {
               ce->groups->append(g);
            }
         }

         int ni = ce->name.lastIndexOf("::");
         if (ni == -1) {
            ni = 0;
         } else {
            ni += 2;
         }

         // set default protection based on the compound type
         if ( ce->section == Entry::CLASS_SEC ) {
            // class

            if (insidePHP || insideD || insideJS || insideIDL) {
               current->protection = protection = Public ;

            } else if (insideJava) {
               current->protection = protection = (ce->m_specFlags.spec & (Entry::Interface | Entry::Enum)) ?  Public : Package;

            } else if (ce->m_specFlags.spec & (Entry::Interface | Entry::Ref | Entry::Value | Entry::Struct | Entry::Union)) {
               if (ce->lang == SrcLangExt_ObjC) {
                  current->protection = protection = Protected;

               } else {
                  current->protection = protection = Public;
               }

            } else {
               current->protection = protection = Private;
            }

         } else if (ce->section == Entry::ENUM_SEC ) {
            // enum
            current->protection = protection = ce->protection;

         } else if (! ce->name.isEmpty() && ce->name.at(ni) == '@') {
            // unnamed union or namespace

            if (ce->section == Entry::NAMESPACE_SEC ) {
               // unnamed namespace
               current->stat = gstat = TRUE;
            }
            current->protection = protection = ce->protection;

         } else {
            // named struct, union, protocol, category
            current->protection = protection = Public ;
         }

         mtype = Method;
         virt = Normal;

         groupEnterCompound(yyFileName, yyLineNr, ce->name);

         scannerYYlex() ;
         g_lexInit = TRUE;

         groupLeaveCompound(yyFileName, yyLineNr, ce->name);
         current = QSharedPointer<Entry>();

         ce->program.resize(0);
      }

      parseCompounds(ce);
   }
}

static void parseMain(const char *fileName, const char *fileBuf, QSharedPointer<Entry> rt,
                      enum ParserMode mode, QStringList &includedFiles, bool useClang)
{
   initParser();

   inputString   = fileBuf;
   inputPosition = 0;
   g_column      = 0;

   protection    = Public;
   mtype         = MethodTypes::Method;
   gstat         = FALSE;
   virt          = Normal;
   current_root  = rt;
   global_root   = rt;

   inputFile.setFileName(fileName);

   if (inputFile.open(QIODevice::ReadOnly)) {
      yyLineNr   = 1 ;
      yyFileName = fileName;

      setContext();

      if (useClang && (insideCpp || insideObjC) ) {
         // user wants clang for parsing
         s_clangParser = true;

         if (mode == ParserMode::SOURCE_FILE) {
            // new file
            ClangParser::instance()->start(fileName, includedFiles);

         } else {
            ClangParser::instance()->switchToFile(fileName);

         }
      } else  {
         s_clangParser = false;
      }
      
      rt->lang = language;
      current_root = rt ;
        
      initParser();
      groupEnterFile(yyFileName, yyLineNr);

      current = QMakeShared<Entry>();     
      int sec = guessSection(yyFileName);

      if (sec) {
         current->name    = yyFileName;
         current->section = sec;

         current_root->addSubEntry(current, current_root);

         current = QMakeShared<Entry>();
      }

      current->reset();

      initEntry();
      scannerYYrestart( scannerYYin );

      if ( insidePHP ) {
         BEGIN( FindMembersPHP );
      } else {
         BEGIN( FindMembers );
      }

      scannerYYlex();
      g_lexInit = TRUE;


      if (YY_START == Comment) {
         warn(yyFileName, yyLineNr, "File ended in the middle of a comment block, Check for a missing \\endcode");
      }
    
      groupLeaveFile(yyFileName, yyLineNr);
      rt->program.resize(0);

      if (rt->children().contains(current) == 0)  {                     
         current = QSharedPointer<Entry>();
      }

      parseCompounds(rt);
      inputFile.close();

      anonNSCount++;
   } 
}

static void parsePrototype(const QByteArray &text)
{
  if (text.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Empty prototype found");
    return;
  }

  if (!current) // nothing to store (see bug683516)
  {
    return;
  }

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;

  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  scannerYY_switch_to_buffer(scannerYY_create_buffer(scannerYYin,YY_BUF_SIZE));
  orgInputString = inputString;
  orgInputPosition = inputPosition;

  // set new string
  inputString = text;
  inputPosition = 0;
  g_column = 0;

  scannerYYrestart( scannerYYin );
  BEGIN(Prototype);

  scannerYYlex();
  g_lexInit=TRUE;

  current->name = current->name.trimmed();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state
  YY_BUFFER_STATE tmpState = YY_CURRENT_BUFFER;
  scannerYY_switch_to_buffer(orgState);
  scannerYY_delete_buffer(tmpState);

  inputString = orgInputString;
  inputPosition = orgInputPosition;
}

void CPPScanFreeParser()
{
#if defined(YY_FLEX_SUBMINOR_VERSION)
  if (g_lexInit)
  {
    scannerYYlex_destroy();
  }
#endif
}

void CPPLanguageParser::startTranslationUnit(const char *)
{
}

void CPPLanguageParser::finishTranslationUnit()
{
  bool processWithClang = insideCpp || insideObjC;
  if (processWithClang)
  {
    ClangParser::instance()->finish();
  }
}

void CPPLanguageParser::parseInput(const char *fileName, const char *fileBuf,
                                  QSharedPointer<Entry> root, enum ParserMode mode,
                                  QStringList & filesInSameTranslationUnit, bool useClang)
{
  g_thisParser = this;

  printlex(scannerYY_flex_debug, TRUE, __FILE__, fileName);

  ::parseMain(fileName,fileBuf,root, mode, filesInSameTranslationUnit, useClang);

  printlex(scannerYY_flex_debug, FALSE, __FILE__, fileName);
}

void CPPLanguageParser::parseCode(CodeOutputInterface &codeOutIntf,
                   const char * scopeName, const QByteArray &input,
                   SrcLangExt lang, bool isExampleBlock,
                   const char * exampleName,
                   QSharedPointer<FileDef> fileDef,
                   int startLine,
                   int endLine,
                   bool inlineFragment,
                   QSharedPointer<MemberDef> memberDef,
                   bool showLineNumbers,
                   QSharedPointer<Definition> searchCtx,
                   bool collectXRefs )
{
  ::parseCCode(codeOutIntf,scopeName,input,lang,isExampleBlock,exampleName,
               fileDef,startLine,endLine,inlineFragment,memberDef,
          showLineNumbers,searchCtx,collectXRefs);
}

bool CPPLanguageParser::needsPreprocessing(const QByteArray &extension)
{
  QByteArray fe=extension.toLower();
  SrcLangExt lang = getLanguageFromFileName(extension);

  return (SrcLangExt_Cpp == lang) ||
   !( fe==".java" || fe==".as"  || fe==".d"    || fe==".php" ||
      fe==".php4" || fe==".inc" || fe==".phtml"
    );
}

void CPPLanguageParser::resetCodeParserState()
{
  ::resetCCodeParserState();
}

void CPPLanguageParser::parsePrototype(const char *text)
{
  ::parsePrototype(text);
}


#if ! defined(YY_FLEX_SUBMINOR_VERSION)
extern "C" { // some bogus code to keep the compiler happy
  void scannerYYdummy() { yy_flex_realloc(0,0); }
}
#endif


