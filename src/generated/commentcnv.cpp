/************************************************************************
*
* Copyright (C) 2014-2020 Barbara Geller & Ansel Sermersheim
* Copyright (C) 1997-2014 by Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentcnvYY_create_buffer
#define yy_delete_buffer commentcnvYY_delete_buffer
#define yy_flex_debug commentcnvYY_flex_debug
#define yy_init_buffer commentcnvYY_init_buffer
#define yy_flush_buffer commentcnvYY_flush_buffer
#define yy_load_buffer_state commentcnvYY_load_buffer_state
#define yy_switch_to_buffer commentcnvYY_switch_to_buffer
#define yyin commentcnvYYin
#define yyleng commentcnvYYleng
#define yylex commentcnvYYlex
#define yylineno commentcnvYYlineno
#define yyout commentcnvYYout
#define yyrestart commentcnvYYrestart
#define yytext commentcnvYYtext
#define yywrap commentcnvYYwrap
#define yyalloc commentcnvYYalloc
#define yyrealloc commentcnvYYrealloc
#define yyfree commentcnvYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentcnvYYrestart(commentcnvYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentcnvYYleng;

extern FILE *commentcnvYYin, *commentcnvYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentcnvYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentcnvYYrestart()), so that the user can continue scanning by
	 * just pointing commentcnvYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentcnvYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentcnvYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentcnvYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentcnvYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentcnvYYrestart (FILE *input_file  );
void commentcnvYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentcnvYY_create_buffer (FILE *file,int size  );
void commentcnvYY_delete_buffer (YY_BUFFER_STATE b  );
void commentcnvYY_flush_buffer (YY_BUFFER_STATE b  );
void commentcnvYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentcnvYYpop_buffer_state (void );

static void commentcnvYYensure_buffer_stack (void );
static void commentcnvYY_load_buffer_state (void );
static void commentcnvYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentcnvYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentcnvYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentcnvYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentcnvYY_scan_bytes (yyconst char *bytes,int len  );

void *commentcnvYYalloc (yy_size_t  );
void *commentcnvYYrealloc (void *,yy_size_t  );
void commentcnvYYfree (void *  );

#define yy_new_buffer commentcnvYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentcnvYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentcnvYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentcnvYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentcnvYYin = (FILE *) 0, *commentcnvYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentcnvYYlineno;

int commentcnvYYlineno = 1;

extern char *commentcnvYYtext;
#define yytext_ptr commentcnvYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentcnvYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentcnvYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 91
#define YY_END_OF_BUFFER 92
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[447] =
    {   0,
        1,    1,   45,   45,   33,   33,   33,   33,   71,   71,
       92,   90,   91,   91,    1,   26,   90,   91,    2,   26,
       90,   91,   10,   91,   26,   90,   91,    8,   26,   90,
       91,   18,   26,   90,   91,    9,   26,   90,   91,    1,
       26,   90,   91,   26,   90,   91,   26,   90,   91,   26,
       90,   91,   39,   90,   91,   40,   91,   38,   39,   90,
       91,   39,   90,   91,   43,   90,   91,   44,   91,   42,
       43,   90,   91,   43,   90,   91,   67,   91,   90,   91,
       90,   91,   45,   53,   90,   91,   48,   91,   53,   90,
       91,   53,   90,   91,   46,   53,   90,   91,   53,   90,

       91,   53,   90,   91,   53,   90,   91,   45,   53,   90,
       91,   53,   90,   91,   53,   90,   91,   53,   90,   91,
       33,   36,   90,   91,   34,   91,   36,   90,   91,   36,
       90,   91,   33,   36,   90,   91,   36,   90,   91,   36,
       90,   91,   36,   90,   91,   28,   36,   90,   91,   29,
       36,   90,   91,   36,   90,   91,   33,   36,   90,   91,
       36,   90,   91,   71,   89,   90,   91,   72,   91,   70,
       89,   90,   91,   89,   90,   91,   89,   90,   91,   71,
       89,   90,   91,   71,   89,   90,   91,   71,   89,   90,
       91,   78,   90,   91,   76,   78,   90,   91,   83,   88,

       90,   91,   85,   91,   88,   90,   91,   84,   88,   90,
       91,   86,   88,   90,   91,   87,   88,   90,   91,   83,
       88,   90,   91,   83,   88,   90,   91,    1,    6,   20,
       18,    1,    7,    1,   17,   37,   41,   45,   52,   51,
       46,   46,   50,   49,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   45,   33,   33,   33,
       32,   71,   72,   69,   71,   71,   71,   71,   71,   76,
       83,   82,   83,   83,   83,    4,    6,    5,    7,    1,
       19,   17,   17,   15,16396,   59,   47,   73,   79,   80,
       79,   79,   79,   24,   24,   80,   79,   79,   79,   79,

       79,   79,   79,   79,   22,   22,   27,   35,   30,   30,
       32,   68,   22,   71,   22,   71,   83,16465,    3,   16,
       15,   15,16396,   62,16445,16444,16449,16440,   54,   73,
       73,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   22,   22,   30,   30,   22,   71,   22,
       71, 8273,   83, 8273,   15,16448,16448,16447,16448,16450,
    16442,16442,   55,16442,16442, 8253, 8252, 8257, 8248,   79,
       79,   23,   23,   80,   79,   79,   79,   79,   79,   79,
       79,   79, 8256, 8255, 8258, 8250,   74,   74,   74,   77,
       74,   80,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   57, 8256,   57, 8250,   77,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   21,   31,   11,   11,   11,
       57, 8255,   79,   79,   79,   79,   79,   79,   79,   14,
     8204, 8204, 8204,   14,   79,   75,   75,   80,   79,   25,
       25,   80,   79,   79,   13,   15
    } ;

static yyconst flex_int16_t yy_accept[467] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    6,    7,    8,    9,   10,   11,   11,
       11,   11,   11,   12,   14,   15,   19,   23,   25,   28,
       32,   36,   40,   44,   47,   50,   53,   56,   58,   62,
       65,   68,   70,   74,   77,   79,   81,   83,   87,   89,
       92,   95,   99,  102,  105,  108,  112,  115,  118,  121,
      125,  127,  130,  133,  137,  140,  143,  146,  150,  154,
      157,  161,  164,  168,  170,  174,  177,  180,  184,  188,
      192,  195,  199,  203,  205,  208,  212,  216,  220,  224,
      228,  229,  229,  230,  231,  231,  232,  233,  233,  234,

      234,  235,  235,  236,  236,  237,  238,  238,  238,  238,
      238,  238,  239,  240,  240,  241,  241,  242,  243,  244,
      245,  245,  245,  246,  247,  248,  249,  250,  251,  252,
      253,  254,  255,  256,  257,  257,  258,  258,  258,  258,
      258,  258,  259,  259,  259,  260,  260,  260,  260,  260,
      260,  261,  261,  262,  263,  264,  265,  265,  266,  267,
      268,  269,  270,  271,  272,  273,  274,  275,  276,  276,
      278,  278,  278,  280,  281,  282,  283,  284,  284,  285,
      285,  285,  286,  286,  287,  287,  287,  288,  289,  290,
      291,  292,  293,  294,  295,  297,  298,  299,  300,  301,

      302,  303,  304,  305,  305,  306,  307,  307,  308,  309,
      309,  310,  311,  312,  313,  315,  317,  319,  320,  321,
      321,  322,  322,  322,  323,  324,  325,  325,  325,  326,
      327,  328,  329,  330,  330,  331,  332,  333,  334,  335,
      336,  337,  338,  339,  340,  341,  342,  343,  344,  344,
      345,  346,  346,  346,  347,  348,  350,  352,  354,  355,
      355,  355,  355,  355,  356,  356,  356,  356,  356,  357,
      358,  359,  360,  361,  362,  363,  364,  364,  365,  366,
      366,  367,  367,  368,  368,  369,  369,  370,  371,  372,
      373,  375,  376,  377,  378,  379,  380,  381,  382,  383,

      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      384,  384,  384,  384,  384,  385,  385,  385,  385,  386,
      386,  387,  387,  387,  387,  388,  389,  391,  393,  394,
      395,  396,  397,  398,  399,  400,  401,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  404,
      404,  406,  406,  407,  408,  409,  410,  411,  412,  413,
      414,  415,  416,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  418,  419,  420,  421,  421,  421,  421,  421,

      421,  421,  421,  421,  423,  424,  425,  426,  427,  428,
      429,  430,  430,  430,  430,  430,  430,  430,  430,  431,
      431,  432,  433,  434,  435,  436,  437,  439,  440,  441,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  447,  447
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    1,   10,   11,   10,
       10,   12,    1,   13,   14,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    1,   13,   17,
       13,   18,    1,   19,   20,   20,   21,   22,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       23,   24,   25,    1,   20,   26,   27,   28,   29,   30,

       31,   32,   20,   33,   34,   20,   35,   36,   37,   38,
       39,   20,   20,   40,   41,   42,   43,   44,   20,   45,
       46,   20,   47,   48,   49,   50,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[51] =
    {   0,
        1,    2,    3,    1,    4,    5,    6,    7,    1,    8,
        9,   10,    9,   11,   12,   13,   14,    1,   15,   16,
       16,   16,    1,   17,    1,   18,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   19,    8,   20,   21
    } ;

static yyconst flex_int16_t yy_base[519] =
    {   0,
     2065, 2064,    0,   28,   13,   20,   14,   42, 2063,   45,
       64,  113,  161,  210,  258,  307,   53,  356,  406,  456,
       51,  505, 2065, 2069, 2069,    0, 2069, 2069,   56, 2057,
     2055, 2069,  553, 2048,    7, 2069, 2069, 2069, 2069,    0,
     2069, 2069, 2069,    0,   80,   82, 2046,    0,   87, 2069,
     2053,   43,   49,  559, 2040,   91,   97, 2032, 2007,    0,
     2069, 2069,   72,  107, 2041, 2024, 2028, 2069, 2069, 2003,
      119, 2037, 2048, 2069, 2035, 2037,    0,  103,    6,    1,
     2069,    0,    0, 2069, 2033, 2069, 2069, 2069,  131, 2032,
        0, 2043, 2069, 2042, 2037, 2069,  604, 2040, 2069, 2039,

      627, 2035,   74,  137, 2069, 2069,  133, 2025,  152, 2024,
      136,    0, 2069,  154, 2069, 2031,   79,   95, 2069, 2069,
      143,    0, 1990,  122,  123,  127,  169,   84,  139,  148,
      130,  137,  150,  136, 2007,  188,  194, 2009, 1984, 2007,
     1982,    0, 1993,  173,  186, 2015,  188, 1991, 2002, 1977,
      202, 1981,  194, 1951, 2069, 2069, 1786,  216,  124,  199,
      202,  203,    0,    0, 2069,  222, 1657,  217, 1606, 2069,
     1599, 1601, 2069,  650, 2069, 2069, 1587, 1598, 2069, 1597,
      223,  230,  233, 1582, 1590,  232, 2069,  238, 1550, 2069,
      216,  222,  220, 2069, 2069,  215,  223,  233,  227,  236,

      228,  232,  240, 1557, 1569, 1543, 1371, 2069, 2069, 1370,
     1372, 1341, 2069, 2069,  255,  275,  274, 2069, 2069, 1381,
      286,  282, 1377,  287,  291,  294, 1371,  325, 1374, 1372,
     1371, 1369, 2069,  300,  295,  312,  285,  263,  291,  674,
      300,  288,  289,  298,  304,  294,  318,  313, 1341, 1342,
     1312,  333,  354, 1334, 1307,  336,  345,  343,    0,  374,
     1340,    7, 1341,  383, 1338,  397,  431,  371, 1329,  442,
      485,  347, 1324, 1322,  492, 2069,  378,  516,  391, 1320,
     2069, 1311, 2069, 1308, 2069, 1291, 2069,  724,  325, 2069,
     2069,  364,  369,  375,  388,  390,  392,  411,  403, 1255,

     1246, 1242, 1255, 1254, 1237, 1246, 1236, 1233, 1232, 1229,
     1212,  436,  398,  447, 1213,  481, 1164,  474, 1171, 2069,
      522,  451, 1170,  529, 2069,  488, 1168, 1166, 2069, 1165,
     2069,  620,  489, 1164, 2069,  510, 2069, 2069,  431,  438,
      455,  489,  497,  503,  483,  401,  515,  496, 1137, 1128,
     1122,  931,  936,  927,  930,  934,  921,  933,  925,    0,
      643,  773,  520,  621,  559,  774,  957,  956, 2069,  955,
     2069,  668, 2069,  510,  357,  537,  538,  496,  567,  535,
      574,  600, 2069,  929,  920,  924,  915,  914,  923,  911,
      918, 2069, 2069,  780,  899,  781,  897,  613,    0,  782,

      805,  617,  942, 2069,  621,  829,  734,  590,  879,  607,
      612,  905,  904,  897,  903,  902,  912,  899, 2069,  544,
     2069,  928,  886,  825,  756, 2069, 2069,  742, 2069, 2069,
      788,  788,  786,  787,  786,  779,  784,   75,  755,  784,
      782,  779,  767,  585,  590,  523,  928,  749,  510,  426,
      369,  316,  787,  257,  184,  929,  135,  931,  103,  933,
      935,   23,   15, 2069, 2069,  973,  994, 1015, 1036, 1057,
     1078, 1099, 1120, 1141, 1162, 1183, 1204, 1225, 1246, 1267,
     1287, 1308, 1329, 1345, 1365, 1381, 1402, 1423, 1444, 1465,
     1486,  795,  796, 1507, 1528, 1549, 1570, 1590, 1606, 1627,

     1648, 1669, 1690, 1711, 1732, 1753, 1774, 1795, 1816, 1837,
     1858, 1879, 1900, 1921, 1942, 1963, 1984, 2005
    } ;

static yyconst flex_int16_t yy_def[519] =
    {   0,
      466,  466,  467,  467,  468,  468,  469,  469,  466,  466,
      470,  470,  471,  471,  471,   14,  472,  472,  473,  473,
      474,  474,  465,  465,  465,  475,  465,  465,  476,  465,
      465,  465,  477,  465,  465,  465,  465,  465,  465,  478,
      465,  465,  465,  479,  465,  465,  465,  480,  481,  465,
      465,  482,  465,  465,  465,  480,  465,  465,  465,  483,
      465,  465,  465,  483,  465,  465,  465,  465,  465,  465,
      483,  465,  484,  465,  465,  465,   54,  484,  484,  484,
      465,  485,  486,  465,  465,  465,  465,  465,  486,  486,
      475,  476,  465,  487,  465,  465,  477,  488,  465,  489,

      490,  465,  465,  491,  465,  465,  465,  465,  465,  465,
      465,  480,  465,  481,  465,  465,  482,  482,  465,  465,
      465,  492,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  465,  480,  465,  465,  465,  465,
      465,  483,  465,  465,  483,  465,  465,  465,  465,  465,
      483,  465,  465,  484,  465,  465,  465,  484,  484,  484,
      484,  484,  485,  486,  465,  486,  486,  486,  487,  465,
      465,  489,  465,  490,  465,  465,  465,  491,  465,  494,
      491,  495,  465,  496,  465,  497,  465,  498,  493,  465,
      493,  493,  493,  465,  465,  493,  493,  493,  493,  493,

      493,  493,  493,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  484,  484,  499,  465,  465,  494,
      465,  491,  500,  501,  495,  502,  465,  503,  504,  505,
      506,  507,  465,  465,  465,  498,  493,  493,  493,  465,
      493,  493,  493,  493,  493,  493,  493,  493,  465,  465,
      465,  465,  465,  465,  465,  484,  484,  499,  508,  465,
      465,  491,  500,  465,  501,  501,  465,  501,  509,  509,
      510,  509,  511,  512,  512,  465,  465,  512,  512,  504,
      465,  505,  465,  506,  465,  507,  465,  465,  493,  465,
      465,  493,  493,  493,  493,  493,  493,  493,  493,  465,

      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  491,  465,  465,  465,  465,  501,  509,  465,
      509,  509,  510,  510,  465,  510,  513,  511,  465,  512,
      465,  512,  512,  514,  465,  465,  465,  465,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  515,
      515,  465,  491,  465,  465,  501,  516,  513,  465,  514,
      465,  465,  465,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  491,  517,  517,

      501,  501,  516,  465,  493,  465,  493,  493,  465,  493,
      493,  465,  465,  465,  465,  465,  465,  465,  465,  491,
      465,  465,  465,  501,  493,  465,  465,  493,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  491,  493,  465,
      465,  465,  465,  465,  465,  465,  491,  493,  465,  465,
      465,  465,  491,  465,  465,  491,  465,  491,  465,  491,
      491,  518,  518,  465,    0,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,

      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465
    } ;

static yyconst flex_int16_t yy_nxt[2120] =
    {   0,
      465,   27,   28,  155,   27,   29,   30,   31,  155,  179,
       32,   33,   27,   34,   35,   38,   42,  464,  103,   39,
       33,  104,   38,   36,   43,  464,   39,  465,   33,   27,
       28,  161,   27,   29,   30,   31,   40,   44,   32,   33,
       27,   34,   35,   40,   42,  313,   46,   45,   33,   46,
      162,   36,   43,   84,  118,   74,   33,  119,   93,   47,
      120,   94,   85,  121,   75,   44,   49,   76,   50,   50,
       51,   77,   94,   94,   86,   52,   77,  179,   53,  176,
       50,  107,   54,  109,  107,  177,  109,   54,  114,   50,
      465,  114,  136,  465,  108,  137,  110,   87,  137,   88,

      115,  137,  143,  144,  158,  155,  118,  158,  145,  119,
       55,  145,  447,   50,   56,   49,  138,   57,   50,   51,
      151,  146,  138,  151,   52,  196,  155,   53,  159,   50,
      190,   54,  166,  152,  107,  166,   54,  107,   58,  179,
      139,  184,  180,  185,  181,  167,  139,  108,  208,  161,
      186,  182,  160,  109,  120,  114,  109,  121,  114,   55,
      191,  192,   59,   61,  193,  197,  110,  115,  190,  190,
      459,  200,  203,  190,  198,   62,  190,  194,  201,   63,
      202,  208,  190,  190,   63,  190,   62,  145,  199,  136,
      145,  194,  137,  209,  190,  137,  190,  208,  137,  213,

      146,  155,  209,  151,  155,  155,  151,   62,  213,   62,
       62,   64,   61,  138,   64,  195,  152,  158,  155,  138,
      158,  208,  217,  166,   65,  179,  166,  215,   63,  208,
      222,  217,  224,   63,  233,   62,  167,  139,  226,  235,
      227,  159,  235,  139,  225,  237,  234,  228,  162,  241,
      239,  242,  216,  238,  246,  240,   62,  155,   62,   62,
       61,  190,  190,  240,  243,  160,  190,  245,  190,  190,
      244,  247,   62,  190,  190,  248,   66,  155,  190,  190,
      256,   66,  190,   67,  179,  259,  190,  260,  266,  267,
      260,  266,  288,  224,  457,  270,  235,  259,  270,  235,

      261,  268,  233,  262,   68,  225,   69,   70,   71,  190,
      271,   71,  272,  235,  234,  240,  235,  272,  289,  294,
      259,   72,  259,  293,  257,   66,  275,  276,  292,  275,
       66,  190,   67,  297,  190,  190,  295,  190,  155,  277,
      190,  278,  296,  279,  190,  298,  190,  155,  279,  320,
      190,  299,  208,   68,  259,   69,   70,   78,   74,  190,
       78,  256,  301,  339,  190,  302,  259,   75,  303,  304,
       76,  190,  305,  267,   77,  260,  306,  307,  260,   77,
      276,   79,  308,  309,  314,  318,  406,  314,  261,  259,
      310,  259,  277,  331,  257,  327,  311,  315,  266,  267,

      179,  266,  340,  190,  455,   80,   81,  341,   25,   81,
      190,  268,   81,   81,   81,  190,   81,   81,   81,  342,
       81,  190,   81,   81,   81,  343,  363,  344,   81,   81,
       81,   81,  316,  345,  190,  316,  190,  346,  190,  334,
      347,  360,  381,  321,  320,  317,  321,  190,  314,  190,
      361,  314,   81,  320,   81,   81,   81,  190,   25,   81,
      322,  315,   81,   81,   81,  322,   81,   81,   81,  374,
       81,  208,   81,   81,   81,  375,  267,  190,   81,   81,
       81,   81,  316,  362,  190,  316,  324,  325,  366,  324,
      325,  331,  376,  332,  331,  317,  332,  383,  383,  327,

      383,  190,   81,  326,   81,   81,   89,   84,  326,   89,
      333,  372,  373,  372,  372,  333,   85,  332,  331,   90,
      332,  366,  179,  321,  320,  380,  321,  377,   86,  190,
      324,  325,  378,  324,  333,  190,  367,  334,  379,  333,
      322,  409,  190,  190,  405,  322,  179,  326,  454,  190,
      382,   87,  326,   88,   98,   99,  190,   98,  100,   98,
       98,  190,  398,   98,  399,   98,   98,   98,  208,  101,
      101,  410,  407,  399,  438,  408,   98,  122,  123,  123,
      123,  190,  122,  190,  190,  123,  123,  124,  125,  126,
      127,  128,  123,  123,  129,  130,  123,  123,  131,  132,

      123,  123,  133,  134,  123,   98,   99,  411,   98,   98,
       98,   98,  409,  190,   98,  179,   98,   98,   98,  267,
      190,  332,  331,  452,  332,  428,  399,   98,  172,  173,
      208,  172,  172,  172,  172,  400,  190,  172,  333,  172,
      172,  172,  240,  333,  394,  409,  190,  394,  409,  420,
      172,  172,  173,  190,  172,  172,  172,  172,  190,  425,
      172,  395,  172,  172,  172,  424,  395,  190,  362,  372,
      373,  372,  372,  172,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  189,
      290,  290,  290,  189,  189,  189,  290,  290,  290,  290,

      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      291,  290,  290,  290,  335,  336,  337,  336,  336,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  189,
      335,  335,  335,  189,  189,  189,  335,  335,  335,  335,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      338,  335,  335,  335,  396,  401,  267,  396,  401,  409,
      190,  396,  396,  422,  396,  396,  422,  409,  190,  179,
      448,  397,  402,  439,  409,  190,  397,  402,  397,  397,

      423,  190,  190,  397,  397,  423,  401,  267,  189,  401,
      188,  189,  208,  456,  189,  188,  451,  450,  449,  446,
      445,  444,  443,  402,  442,  441,  440,  267,  402,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  189,  426,  426,  426,  189,  189,
      189,  426,  426,  426,  426,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  427,  426,  426,  426,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  189,  429,  429,  429,  189,  189,

      189,  429,  429,  429,  429,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  430,  429,  429,  429,  396,
      179,  179,  396,  179,  419,  179,  437,  179,  436,  435,
      434,  433,  432,  431,  404,  419,  397,  419,  392,  418,
      417,  397,  416,  415,  414,  413,  412,  371,  369,  404,
      392,  392,  392,  391,  460,  390,  389,  388,  387,  453,
      458,  461,  462,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   91,  386,  385,  384,  371,  331,  329,   91,
      369,   91,  325,  320,   91,   91,   91,   91,  365,   91,
       91,   91,   91,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,  105,  105,  364,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  106,  106,  359,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  112,  112,  358,
      357,  356,  355,  112,  112,  112,  354,  112,  353,  112,
      352,  351,  112,  350,  349,  348,  112,  113,  113,  113,
      113,  113,  113,  287,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  117,  117,
      285,  117,  117,  283,  117,  117,  117,  117,  117,  117,
      117,  117,  281,  117,  331,  117,  329,  117,  117,  142,
      142,  320,  142,  142,  142,  142,  142,  142,  142,  142,
      267,  142,  142,  264,  142,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  312,  154,  255,  154,  154,  254,
      154,  251,  154,  154,  154,  154,  163,  250,  163,  163,
      300,  287,  163,  285,  283,  163,  281,  163,  273,  264,
      163,  164,  164,  221,  164,  164,  164,  164,  164,  164,
      255,  164,  164,  164,  164,  164,  164,  254,  164,  253,

      252,  164,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  178,  178,  178,  178,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  236,  251,  236,  250,  249,  190,  231,  230,  221,

      179,  219,  236,  173,  218,  236,  258,  258,  170,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  269,
      269,  168,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  259,  259,  214,  259,  259,

      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  155,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  153,  421,  421,  421,  421,

      421,  421,  421,  421,  421,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  212,  211,  210,  147,
      207,  206,  205,  141,  140,  204,  190,  187,  111,  183,
      175,  173,   99,  171,  170,   93,  168,  165,  157,  156,
      155,  153,  150,  149,  148,  147,  141,  140,  135,  116,
      111,  102,   96,   95,  465,   45,   25,   25,   23,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,

      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465
    } ;

static yyconst flex_int16_t yy_chk[2120] =
    {   0,
        0,    3,    3,   80,    3,    3,    3,    3,   79,  262,
        3,    3,    3,    3,    3,    5,    7,  463,   35,    5,
        3,   35,    6,    3,    7,  462,    6,    0,    3,    4,
        4,   79,    4,    4,    4,    4,    5,    7,    4,    4,
        4,    4,    4,    6,    8,  262,   10,   10,    4,   10,
       80,    4,    8,   21,   52,   17,    4,   52,   29,   10,
       53,   29,   21,   53,   17,    8,   11,   17,   11,   11,
       11,   17,   29,   29,   21,   11,   17,  438,   11,  103,
       11,   45,   11,   46,   45,  103,   46,   11,   49,   11,
      117,   49,   56,  117,   45,   56,   46,   21,   57,   21,

       49,   57,   63,   63,   78,   78,  118,   78,   64,  118,
       11,   64,  438,   11,   12,   12,   56,   12,   12,   12,
       71,   64,   57,   71,   12,  128,  159,   12,   78,   12,
      128,   12,   89,   71,  107,   89,   12,  107,   12,  104,
       56,  111,  104,  111,  104,   89,   57,  107,  459,  159,
      111,  104,   78,  109,  121,  114,  109,  121,  114,   12,
      124,  125,   12,   13,  126,  129,  109,  114,  124,  125,
      457,  131,  134,  126,  130,   13,  131,  127,  132,   13,
      133,  144,  134,  132,   13,  129,   13,  145,  130,  136,
      145,  127,  136,  147,  130,  137,  133,  144,  137,  153,

      145,  160,  147,  151,  161,  162,  151,   13,  153,   13,
       13,   14,   14,  136,   14,  127,  151,  158,  158,  137,
      158,  144,  168,  166,   14,  181,  166,  161,   14,  455,
      181,  168,  182,   14,  186,   14,  166,  136,  183,  188,
      183,  158,  188,  137,  182,  191,  186,  183,  160,  193,
      192,  196,  162,  191,  201,  199,   14,  215,   14,   14,
       15,  196,  191,  192,  197,  158,  193,  200,  192,  197,
      198,  202,   15,  199,  201,  203,   15,  216,  202,  198,
      215,   15,  200,   15,  222,  217,  203,  221,  224,  224,
      221,  224,  238,  225,  454,  226,  235,  217,  226,  235,

      221,  224,  234,  222,   15,  225,   15,   15,   16,  238,
      226,   16,  226,  236,  234,  237,  236,  226,  239,  243,
      217,   16,  217,  242,  216,   16,  228,  228,  241,  228,
       16,  237,   16,  246,  242,  243,  244,  239,  256,  228,
      246,  228,  245,  228,  244,  247,  241,  257,  228,  272,
      245,  248,  452,   16,  258,   16,   16,   18,   18,  248,
       18,  256,  252,  289,  247,  252,  258,   18,  252,  252,
       18,  289,  252,  268,   18,  260,  252,  252,  260,   18,
      277,   18,  253,  253,  264,  268,  375,  264,  260,  258,
      253,  258,  277,  279,  257,  272,  253,  264,  266,  266,

      313,  266,  292,  375,  451,   18,   19,  293,   19,   19,
      292,  266,   19,   19,   19,  293,   19,   19,   19,  294,
       19,  294,   19,   19,   19,  295,  313,  296,   19,   19,
       19,   19,  267,  297,  295,  267,  296,  298,  297,  279,
      299,  312,  346,  270,  270,  267,  270,  346,  314,  299,
      312,  314,   19,  322,   19,   19,   20,  298,   20,   20,
      270,  314,   20,   20,   20,  270,   20,   20,   20,  339,
       20,  450,   20,   20,   20,  340,  318,  339,   20,   20,
       20,   20,  316,  312,  340,  316,  271,  271,  318,  271,
      326,  333,  341,  275,  275,  316,  275,  348,  348,  322,

      348,  341,   20,  271,   20,   20,   22,   22,  271,   22,
      275,  336,  336,  336,  336,  275,   22,  278,  278,   22,
      278,  318,  363,  321,  321,  345,  321,  342,   22,  345,
      324,  324,  343,  324,  278,  342,  326,  333,  344,  278,
      321,  378,  378,  343,  374,  321,  420,  324,  449,  344,
      347,   22,  324,   22,   33,   33,  374,   33,   33,   33,
       33,  347,  363,   33,  365,   33,   33,   33,  446,   33,
       33,  380,  376,  365,  420,  377,   33,   54,   54,   54,
       54,  380,   54,  376,  377,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   97,   97,  381,   97,   97,
       97,   97,  379,  379,   97,  398,   97,   97,   97,  402,
      381,  332,  332,  445,  332,  408,  364,   97,  101,  101,
      444,  101,  101,  101,  101,  364,  408,  101,  332,  101,
      101,  101,  410,  332,  361,  382,  382,  361,  411,  398,
      101,  174,  174,  410,  174,  174,  174,  174,  411,  405,
      174,  361,  174,  174,  174,  402,  361,  405,  364,  372,
      372,  372,  372,  174,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,

      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  362,  366,  366,  362,  366,  407,
      407,  394,  396,  400,  394,  396,  400,  428,  428,  453,
      439,  362,  366,  425,  448,  448,  362,  366,  394,  396,

      400,  439,  425,  394,  396,  400,  401,  401,  493,  401,
      492,  493,  443,  453,  493,  492,  442,  441,  440,  437,
      436,  435,  434,  401,  433,  432,  431,  424,  401,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,

      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  422,
      447,  456,  422,  458,  423,  460,  418,  461,  417,  416,
      415,  414,  413,  412,  403,  397,  422,  395,  391,  390,
      389,  422,  388,  387,  386,  385,  384,  370,  368,  367,
      359,  358,  357,  356,  458,  355,  354,  353,  352,  447,
      456,  460,  461,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  467,  467,  467,  467,  467,  467,

      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  472,

      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  475,  351,  350,  349,  334,  330,  328,  475,
      327,  475,  323,  319,  475,  475,  475,  475,  317,  475,
      475,  475,  475,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  478,  478,  315,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  479,  479,  311,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  480,  480,  310,
      309,  308,  307,  480,  480,  480,  306,  480,  305,  480,
      304,  303,  480,  302,  301,  300,  480,  481,  481,  481,
      481,  481,  481,  286,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  482,  482,
      284,  482,  482,  282,  482,  482,  482,  482,  482,  482,
      482,  482,  280,  482,  274,  482,  273,  482,  482,  483,
      483,  269,  483,  483,  483,  483,  483,  483,  483,  483,
      265,  483,  483,  263,  483,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  261,  484,  255,  484,  484,  254,
      484,  251,  484,  484,  484,  484,  485,  250,  485,  485,
      249,  232,  485,  231,  230,  485,  229,  485,  227,  223,
      485,  486,  486,  220,  486,  486,  486,  486,  486,  486,
      212,  486,  486,  486,  486,  486,  486,  211,  486,  210,

      207,  486,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,

      491,  491,  491,  491,  491,  491,  491,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  498,  206,  498,  205,  204,  189,  185,  184,  180,

      178,  177,  498,  172,  171,  498,  499,  499,  169,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  502,
      502,  167,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  508,  508,  157,  508,  508,

      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,

      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  154,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  152,  517,  517,  517,  517,

      517,  517,  517,  517,  517,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  150,  149,  148,  146,
      143,  141,  140,  139,  138,  135,  123,  116,  110,  108,
      102,  100,   98,   95,   94,   92,   90,   85,   76,   75,
       73,   72,   70,   67,   66,   65,   59,   58,   55,   51,
       47,   34,   31,   30,   23,    9,    2,    1,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,

      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465
    } ;

extern int commentcnvYY_flex_debug;
int commentcnvYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentcnvYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2020 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <QChar>
#include <QStack>
#include <QTextStream>

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

#include <config.h>
#include <condparser.h>
#include <doxy_globals.h>
#include <message.h>
#include <util.h>

#define YY_NO_INPUT 1

#define ADDCHAR(c)     s_outputString += c

struct CondCtx
{
   CondCtx(int line, const QString &id, bool b)
      : lineNr(line), sectionId(id), skip(b)
   {}

   int lineNr;
   QString sectionId;
   bool skip;
};

struct CommentCtx
{
   CommentCtx(int line)
      : lineNr(line)
   {}

   int lineNr;
};

static QString  s_inputString;
static QString  s_outputString;
static int      s_inputPosition;

static int      s_col;
static int      s_blockHeadCol;
static bool     s_mlBrief;
static int      s_readLineCtx;
static bool     s_skip;
static QString  s_fileName;
static int      s_lineNr;
static int      s_condCtx;

static int      s_lastCommentContext;
static bool     s_inSpecialComment;
static bool     s_inRoseComment;
static int      s_stringContext;
static int      s_charContext;
static int      s_javaBlock;
static bool     s_specialComment;

static QString  s_aliasString;
static int      s_blockCount;
static bool     s_lastEscaped;
static int      s_lastBlockContext;
static bool     s_pythonDocString;
static int      s_nestingCount;

static SrcLangExt s_lang;
static bool       isFixedForm;    // for Fortran

static QStack<CondCtx>     s_condStack;
static QStack<CommentCtx>  s_commentStack;
static QString             s_blockName;

void replaceComment(int offset);

static void replaceCommentMarker(const QString &s, int len)
{
   QString::const_iterator iter     = s.constBegin();
   QString::const_iterator iter_end = s.constEnd();

   QChar c;

   // copy leading blanks
   while (iter != iter_end) {
      c = *iter;

      if (c == ' ' || c == '\t' || c == '\n') {
         ADDCHAR(c);

         if (c == '\n') {
            ++s_lineNr;
         }

         ++iter;

      } else {
         break;
      }
   }

   // replace start of comment marker by blanks and the last character by a *
   int blanks = 0;

   while (iter != iter_end) {
      c = *iter;

      if (c == '/' || c == '!' || c == '#') {

         blanks++;
         ++iter;

         if (iter != iter_end && *iter == '<') {
            // comment-after-item marker
            blanks++;
            ++iter;
         }

         if (c == '!') {
            // end after first !
            break;
         }

      } else {
         break;
      }
   }

   if (blanks > 0) {
      while (blanks > 2) {
         ADDCHAR(' ');
         --blanks;
      }

      if (blanks > 1) {
         ADDCHAR('*');
      }

      ADDCHAR(' ');
   }

   // copy comment line to output
   s_outputString += QStringView(iter,  s.constBegin() + len);
}

static inline int computeIndent(const QString &str)
{
   static const int tabSize = Config::getInt("tab-size");

   int col = 0;

   for (auto c : str) {

      if (c == ' ') {
         col++;

      } else if (c == '\t') {
         col += tabSize - (col % tabSize);

      } else {
         break;
      }
   }

   return col;
}

static inline void copyToOutput(const QString &s, int len)
{
   if (s_skip) {
      // only add newlines

      for (int i = 0; i < len; i++) {
         if (s[i] == '\n') {
            ADDCHAR('\n');

            s_lineNr++;
         }
      }

   } else if (len > 0) {
      s_outputString += s.mid(0, len);

      static int tabSize = Config::getInt("tab-size");

      for (int i = 0; i < len; i++) {
         switch (s[i].unicode()) {
            case '\n':
               s_col = 0;
               s_lineNr++;
               break;

            case '\t':
               s_col += tabSize - (s_col % tabSize);
               break;

            default:
               s_col++;
               break;
         }
      }
   }
}

static void startCondSection(const QString &sectId);
static void endCondSection();
static void handleCondSectionId(const QString &expression);

//  copies string s with length len to the output
//  while replacing any alias commands found in the string
static void replaceAliases(const QString &s)
{
   QString result = resolveAliasCmd(s);
   copyToOutput(result, result.length());
}

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

#define YY_NO_UNISTD_H 1

#define INITIAL 0
#define Scan 1
#define SkipString 2
#define SkipChar 3
#define SComment 4
#define CComment 5
#define Verbatim 6
#define VerbatimCode 7
#define ReadLine 8
#define CondLine 9
#define ReadAliasArgs 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentcnvYYlex_destroy (void );

int commentcnvYYget_debug (void );

void commentcnvYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentcnvYYget_extra (void );

void commentcnvYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentcnvYYget_in (void );

void commentcnvYYset_in  (FILE * in_str  );

FILE *commentcnvYYget_out (void );

void commentcnvYYset_out  (FILE * out_str  );

int commentcnvYYget_leng (void );

char *commentcnvYYget_text (void );

int commentcnvYYget_lineno (void );

void commentcnvYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentcnvYYwrap (void );
#else
extern int commentcnvYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentcnvYYtext, commentcnvYYleng, 1, commentcnvYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentcnvYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentcnvYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentcnvYYin))==0 && ferror(commentcnvYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentcnvYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentcnvYYlex (void);

#define YY_DECL int commentcnvYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentcnvYYtext and commentcnvYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentcnvYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentcnvYYtext[commentcnvYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentcnvYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentcnvYYin )
			commentcnvYYin = stdin;

		if ( ! commentcnvYYout )
			commentcnvYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentcnvYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE );
		}

		commentcnvYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentcnvYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 466 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 465 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
      /* consume anything that is not " / , or \n */

      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      /* consume so we have a nice separator in long initialization lines */

      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      /* start of python long comment */

      if (s_lang != SrcLangExt_Python) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(commentcnvYYtext);

         s_pythonDocString = true;
         s_nestingCount    = 1;
         s_commentStack.clear();

         copyToOutput(text, text.length());

         BEGIN(CComment);
         s_commentStack.push(CommentCtx(s_lineNr));
      }
   }
	YY_BREAK
case 4:
/* rule 4 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      if (s_lang != SrcLangExt_Fortran) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(commentcnvYYtext);
         copyToOutput(text, text.length());

         s_nestingCount = 0;
         s_commentStack.clear();

         BEGIN(CComment);
         s_commentStack.push(CommentCtx(s_lineNr));
      }
   }
	YY_BREAK
case 5:
/* rule 5 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      if (s_lang != SrcLangExt_Fortran) {
         REJECT;

      } else {
         /* check for fixed format; we might have some conditional as part of multi-line if like C<5 .and. & */

         if (isFixedForm && (s_col == 0)) {
            QString text = QString::fromUtf8(commentcnvYYtext);
            copyToOutput(text, text.length());

            s_nestingCount = 0;
            s_commentStack.clear();

            BEGIN(CComment);
            s_commentStack.push(CommentCtx(s_lineNr));

         } else {
            REJECT;
         }
      }
   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{
      if (s_lang != SrcLangExt_Fortran) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(commentcnvYYtext);
         copyToOutput(text, text.length());;
      }
   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
      if (s_lang != SrcLangExt_Fortran) {
         REJECT;

      } else {

         if (s_col == 0) {
            QString text = QString::fromUtf8(commentcnvYYtext);
            copyToOutput(text, text.length());

         } else {
            REJECT;
         }
      }
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      /* start of a string */

      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());

      s_stringContext = YY_START;
      BEGIN(SkipString);
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());

      s_charContext = YY_START;
      BEGIN(SkipChar);
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 11:
/* rule 11 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{   /* start C++ style special comment block */
      // */ (editor syntax fix)

      if (s_mlBrief)      {
         REJECT;             // bail out if we do not need to convert

      } else {
      int i = 3;

      QString text = QString::fromUtf8(commentcnvYYtext);

      if (text[2] == '/') {
         while (i < text.length() && text[i] == '/') {
            i++;
         }
      }

      s_blockHeadCol = s_col;
      copyToOutput("/**",3);      // */ (editor syntax fix)

      replaceAliases(text.mid(i));
      s_inSpecialComment = true;

      s_readLineCtx = SComment;
      BEGIN(ReadLine);
      }
   }
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      /* Start of Rational Rose ANSI C++ comment block */
      QString text = QString::fromUtf8(commentcnvYYtext);

      if (s_mlBrief) {
         REJECT;
      }

      int i = QString("//##Documentation").length();
      s_blockHeadCol = s_col;

      copyToOutput("/**",3);      // */ (editor syntax fix)

      replaceAliases(text.mid(i));
      s_inRoseComment = true;
      BEGIN(SComment);
   }
	YY_BREAK
case 14:
/* rule 14 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      // next line contains an end marker, see bug 752712
      QString text = QString::fromUtf8(commentcnvYYtext);

      s_inSpecialComment = text[2] == '/' || text[2] == '!';
      copyToOutput(text, text.length());

      s_readLineCtx = YY_START;
      BEGIN(ReadLine);
   }
	YY_BREAK
case 15:
/* rule 15 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      /* one line C++ comment */
      QString text = QString::fromUtf8(commentcnvYYtext);

      s_inSpecialComment = text[2] == '/' || text[2] == '!';
      copyToOutput(text, text.length());

      s_readLineCtx = YY_START;
      BEGIN(ReadLine);
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      /* avoid matching next rule for empty C comment, see bug 711723 */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      /* start of a C comment */
      QString text = QString::fromUtf8(commentcnvYYtext);

      s_specialComment = (commentcnvYYleng == 3);
      s_nestingCount   = 1;

      s_commentStack.clear();
      copyToOutput(text, text.length());

      BEGIN(CComment);
      s_commentStack.push(CommentCtx(s_lineNr));
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      if (s_lang != SrcLangExt_Python) {
         REJECT;

      }  else  {
         QString text = QString::fromUtf8(commentcnvYYtext);
         copyToOutput(text, text.length());

         s_nestingCount = 0;
         s_commentStack.clear();

         BEGIN(CComment);
         s_commentStack.push(CommentCtx(s_lineNr));
      }
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      REJECT;
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      if (s_lang != SrcLangExt_Fortran) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(commentcnvYYtext);
         copyToOutput(text, text.length());

         s_nestingCount = 0;
         s_commentStack.clear();

         BEGIN(CComment);
         s_commentStack.push(CommentCtx(s_lineNr));
      }
   }
	YY_BREAK
case 21:
/* rule 21 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput("@code", 5);

      s_lastCommentContext = YY_START;
      s_javaBlock = 1;
      s_blockName = text.mid(1);

      BEGIN(VerbatimCode);
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      /* start of markdown code block */

      if (! Doxy_Globals::markdownSupport) {
         REJECT;
      }

      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());

      s_lastCommentContext = YY_START;
      s_javaBlock = 0;
      s_blockName = text.trimmed().left(3);

      BEGIN(VerbatimCode);
   }
	YY_BREAK
case 23:
/* rule 23 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      /* start of a verbatim block */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());

      s_lastCommentContext = YY_START;
      s_javaBlock = 0;

      if (text.mid(1) == "startuml") {
         s_blockName = "uml";
      } else {
         s_blockName = text.mid(1);
      }

      BEGIN(VerbatimCode);
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());

      s_blockName = text.mid(1);

      if (s_blockName.at(1) == '[') {
         s_blockName.replace(1, 1, ']');

      } else if (s_blockName.at(1) == '{')  {
         s_blockName.replace(1, 1, '}');
      }

      s_lastCommentContext = YY_START;
      BEGIN(Verbatim);
   }
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      /* start of a verbatim block */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());

      s_blockName = text.mid(1);
      s_lastCommentContext = YY_START;

      BEGIN(Verbatim);
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      /* any other character */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      /* end of verbatim block */

      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());

      if (text.mid(1,1) == s_blockName) {
         // end of formula
         BEGIN(s_lastCommentContext);

      } else if (text.mid(4) == s_blockName) {
         BEGIN(s_lastCommentContext);
      }
   }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
      if (s_javaBlock == 0) {
         REJECT;

      } else {
         s_javaBlock++;

         QString text = QString::fromUtf8(commentcnvYYtext);
         copyToOutput(text, text.length());
      }
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      if (s_javaBlock == 0) {
         REJECT;

      } else {
         s_javaBlock--;

         if (s_javaBlock == 0) {
            copyToOutput(" @endcode ", 10);
            BEGIN(s_lastCommentContext);

         } else {
            QString text = QString::fromUtf8(commentcnvYYtext);
            copyToOutput(text, text.length());
         }
      }
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      /* end of markdown code block */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());

      if (text[0] == s_blockName[0]) {
         BEGIN(s_lastCommentContext);
      }
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      /* end of verbatim block */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());

      if (text.mid(4) == s_blockName) {
         BEGIN(s_lastCommentContext);
      }
   }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
      /* skip leading comments */
      QString text = QString::fromUtf8(commentcnvYYtext);

      if (! s_inSpecialComment) {
         copyToOutput(text, text.length());

      } else {
         int len = 0;

         while (len < text.length() && (text[len] == ' ' || text[len] == '\t')) {
            len++;
         }

         copyToOutput(text, len);

         if (text.length() - len == 3) {
            // ends with //! or ///
            copyToOutput(" * ", 3);

         } else {
            // ends with //
            copyToOutput("//", 2);
         }
      }
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      /* any character not a backslash or new line or } */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{
      /* new line in verbatim block */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      if (s_blockName == "dot" || s_blockName == "msc" || s_blockName == "uml" || s_blockName.startsWith('f') ) {
         // strip /// from dot images and formulas.

         QString text = QString::fromUtf8(commentcnvYYtext);
         int len = 0;

         while (len < text.length() && (text[len] == ' ' || text[len] == '\t')) {
            ++len;
         }

         copyToOutput(text, len);
         copyToOutput("   ", 3);

      } else  {
         // even slashes are verbatim (e.g. \verbatim, \code)
         REJECT;
      }
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      /* any other character */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      /* escaped character in string */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      /* end of string */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());

      BEGIN(s_stringContext);
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      /* any other string character */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{
      /* new line inside string (illegal for some compilers) */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      /* escaped character */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      /* end of character literal */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());

      BEGIN(s_charContext);
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      /* any other string character */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
{
      /* new line character */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      /* anything that is not a '*' or command */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      /* stars without slashes */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      /* end of Python docstring */

      if (s_lang != SrcLangExt_Python) {
         REJECT;

      } else {
         --s_nestingCount;
         s_pythonDocString = false;

         QString text = QString::fromUtf8(commentcnvYYtext);
         copyToOutput(text, text.length());

         BEGIN(Scan);
      }
   }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{
      /* new line in comment */
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());

      /* in case of Fortran always end of comment */
      if (s_lang == SrcLangExt_Fortran) {
         BEGIN(Scan);
      }
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      /* nested C comment */
      QString text = QString::fromUtf8(commentcnvYYtext);

      s_nestingCount++;
      s_commentStack.push(CommentCtx(s_lineNr));
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      /* end of C comment */
      if (s_lang == SrcLangExt_Python) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(commentcnvYYtext);
         copyToOutput(text, text.length());
	 --s_nestingCount;

         if (s_nestingCount <= 0) {
            BEGIN(Scan);

         } else {
            s_commentStack.pop();
         }
      }
   }
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      // end of Python comment

      if (s_lang != SrcLangExt_Python || s_pythonDocString) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(commentcnvYYtext);
         copyToOutput(text, text.length());

         BEGIN(Scan);
      }
   }
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentcnvYYtext);

      if (s_lang == SrcLangExt_Python) {

         if (s_pythonDocString) {
            REJECT;

         } else {
            copyToOutput(text, commentcnvYYleng);
            BEGIN(Scan);
         }

      } else {
         REJECT;
      }
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      replaceComment(0);
   }
	YY_BREAK
case 55:
/* rule 55 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      replaceComment(1);
   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
      replaceComment(0);
      s_readLineCtx = YY_START;

      BEGIN(ReadLine);
   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
      /* See Bug 752712: end the multiline comment when finding a @} or \} command */

      QString text = QString::fromUtf8(commentcnvYYtext);

      copyToOutput(" */",3);
      copyToOutput(text, text.length());

      s_inSpecialComment = false;
      s_inRoseComment    = false;

      BEGIN(Scan);
   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
      replaceComment(1);
      s_readLineCtx = YY_START;

      BEGIN(ReadLine);
   }
	YY_BREAK
case 59:
case 60:
/* rule 60 can match eol */
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{    // or   //!something
      replaceComment(0);
      s_readLineCtx = YY_START;

      BEGIN(ReadLine);
   }
	YY_BREAK
case 62:
/* rule 62 can match eol */
case 63:
/* rule 63 can match eol */
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{
      replaceComment(1);
      s_readLineCtx = YY_START;

      BEGIN(ReadLine);
   }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{
      if (! s_inRoseComment) {
         REJECT;

      } else {
         replaceComment(0);
         s_readLineCtx = YY_START;

         BEGIN(ReadLine);
      }
   }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{
      if (! s_inRoseComment) {
         REJECT;

      } else {
         replaceComment(1);
         s_readLineCtx = YY_START;

         BEGIN(ReadLine);
      }
   }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{
      /* end of special comment */
      QString text = QString::fromUtf8(commentcnvYYtext);

      copyToOutput(" */",3);
      copyToOutput(text, text.length());

      s_inSpecialComment = false;
      s_inRoseComment    = false;

      BEGIN(Scan);
   }
	YY_BREAK
case 68:
YY_RULE_SETUP
{
      copyToOutput("/&zwj;**", 8);
   }
	YY_BREAK
case 69:
YY_RULE_SETUP
{
      copyToOutput("*&zwj;/", 7);
   }
	YY_BREAK
case 70:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 71:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 72:
/* rule 72 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());

      BEGIN(s_readLineCtx);
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 74:
/* rule 74 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      // conditional section
      s_condCtx = YY_START;
      BEGIN(CondLine);
   }
	YY_BREAK
case 75:
/* rule 75 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      // end of conditional section
      bool oldSkip = s_skip;
      endCondSection();

      if (YY_START == CComment && oldSkip && ! s_skip) {

         if (s_lang != SrcLangExt_Python && s_lang != SrcLangExt_Markdown && s_lang != SrcLangExt_Fortran) {
            ADDCHAR('/');
            ADDCHAR('*');

            if (s_specialComment) {
               ADDCHAR('*');
            }
         }
      }
   }
	YY_BREAK
case 76:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentcnvYYtext);
      handleCondSectionId(text);
   }
	YY_BREAK
case 77:
/* rule 77 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
{
      s_condCtx = YY_START;
      handleCondSectionId(" ");
   }
	YY_BREAK
case 78:
YY_RULE_SETUP
{
      // forgot section id?
      QString text = QString::fromUtf8(commentcnvYYtext);
      handleCondSectionId(" ");

      if (text[0] == '\n') {
         s_lineNr++;
      }
   }
	YY_BREAK
case 79:
YY_RULE_SETUP
{
      // expand alias without arguments
      QString text = QString::fromUtf8(commentcnvYYtext);
      replaceAliases(text);
   }
	YY_BREAK
case 80:
YY_RULE_SETUP
{
      // expand alias with arguments
      QString text = QString::fromUtf8(commentcnvYYtext);

      s_lastBlockContext = YY_START;
      s_blockCount       = 1;
      s_aliasString      = text;
      s_lastEscaped      = 0;

      BEGIN( ReadAliasArgs );
   }
	YY_BREAK
case 81:
YY_RULE_SETUP
{
      // skip leading special comments (see bug 618079)
   }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
      // end of comment in the middle of an alias?
      if (s_lang == SrcLangExt_Python) {
         REJECT;

      } else  {
         // abort the alias, restart scanning
         QString text = QString::fromUtf8(commentcnvYYtext);

         copyToOutput(s_aliasString, s_aliasString.length());
         copyToOutput(text, text.length());

         BEGIN(Scan);
      }
   }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
      s_aliasString += QString::fromUtf8(commentcnvYYtext);
      s_lastEscaped  = false;
   }
	YY_BREAK
case 84:
YY_RULE_SETUP
{

      if (s_lastEscaped) {
         s_lastEscaped = false;

      } else{
         s_lastEscaped = true;

      }

      s_aliasString += QString::fromUtf8(commentcnvYYtext);
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
      s_aliasString += QString::fromUtf8(commentcnvYYtext);
      s_lineNr++;
      s_lastEscaped = false;
   }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
      s_aliasString += QString::fromUtf8(commentcnvYYtext);

      if (!s_lastEscaped) {
         s_blockCount++;
      }

      s_lastEscaped = false;
   }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      s_aliasString += QString::fromUtf8(commentcnvYYtext);

      if (! s_lastEscaped) {
         s_blockCount--;
      }

      if (s_blockCount == 0) {
         replaceAliases(s_aliasString);
         BEGIN( s_lastBlockContext );
      }

      s_lastEscaped = false;

   }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      s_aliasString += QString::fromUtf8(commentcnvYYtext);
      s_lastEscaped =  false;
   }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentcnvYYtext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 91:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Scan):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipChar):
			case YY_STATE_EOF(SComment):
			case YY_STATE_EOF(CComment):
			case YY_STATE_EOF(Verbatim):
			case YY_STATE_EOF(VerbatimCode):
			case YY_STATE_EOF(ReadLine):
			case YY_STATE_EOF(CondLine):
			case YY_STATE_EOF(ReadAliasArgs):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentcnvYYin at a new source and called
			 * commentcnvYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentcnvYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentcnvYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentcnvYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentcnvYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentcnvYYrestart(commentcnvYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentcnvYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 466 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 466 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 465);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentcnvYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentcnvYYrestart(commentcnvYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentcnvYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentcnvYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentcnvYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentcnvYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE );
	}

	commentcnvYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentcnvYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentcnvYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentcnvYYpop_buffer_state();
	 *		commentcnvYYpush_buffer_state(new_buffer);
     */
	commentcnvYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentcnvYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentcnvYYwrap()) processing, but the only time this flag
	 * is looked at is after commentcnvYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentcnvYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentcnvYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentcnvYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentcnvYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentcnvYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentcnvYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentcnvYY_create_buffer()
 * 
 */
    void commentcnvYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentcnvYYfree((void *) b->yy_ch_buf  );

	commentcnvYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentcnvYYrestart() or at EOF.
 */
    static void commentcnvYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentcnvYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentcnvYY_init_buffer was _probably_
     * called from commentcnvYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentcnvYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentcnvYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentcnvYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentcnvYYensure_buffer_stack();

	/* This block is copied from commentcnvYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentcnvYY_switch_to_buffer. */
	commentcnvYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentcnvYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentcnvYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentcnvYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentcnvYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentcnvYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentcnvYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentcnvYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentcnvYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentcnvYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentcnvYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentcnvYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentcnvYY_scan_string (yyconst char * yystr )
{
    
	return commentcnvYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentcnvYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentcnvYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentcnvYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentcnvYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentcnvYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentcnvYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentcnvYYtext[commentcnvYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentcnvYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentcnvYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentcnvYYget_lineno  (void)
{
        
    return commentcnvYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentcnvYYget_in  (void)
{
        return commentcnvYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentcnvYYget_out  (void)
{
        return commentcnvYYout;
}

/** Get the length of the current token.
 * 
 */
int commentcnvYYget_leng  (void)
{
        return commentcnvYYleng;
}

/** Get the current token.
 * 
 */

char *commentcnvYYget_text  (void)
{
        return commentcnvYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentcnvYYset_lineno (int  line_number )
{
    
    commentcnvYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentcnvYY_switch_to_buffer
 */
void commentcnvYYset_in (FILE *  in_str )
{
        commentcnvYYin = in_str ;
}

void commentcnvYYset_out (FILE *  out_str )
{
        commentcnvYYout = out_str ;
}

int commentcnvYYget_debug  (void)
{
        return commentcnvYY_flex_debug;
}

void commentcnvYYset_debug (int  bdebug )
{
        commentcnvYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentcnvYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentcnvYYin = stdin;
    commentcnvYYout = stdout;
#else
    commentcnvYYin = (FILE *) 0;
    commentcnvYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentcnvYYlex_init()
     */
    return 0;
}

/* commentcnvYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentcnvYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentcnvYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentcnvYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentcnvYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentcnvYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentcnvYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentcnvYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentcnvYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentcnvYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentcnvYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

void startCondSection(const QString &sectId)
{
   CondParser prs;
   bool expResult = prs.parse(s_fileName, s_lineNr, sectId);

   s_condStack.push(CondCtx(s_lineNr, sectId, s_skip));

   if (! expResult) {
      // not enabled
      s_skip = true;
   }
}

void endCondSection()
{
   if (s_condStack.isEmpty()) {
      warn(s_fileName, s_lineNr, "Found \\endcond command without matching \\cond");
      s_skip = false;

   } else {
      CondCtx ctx = s_condStack.pop();
      s_skip = ctx.skip;
   }
}

void handleCondSectionId(const QString &expression)
{
  bool oldSkip = s_skip;
  startCondSection(expression);

  if ((s_condCtx == CComment || s_readLineCtx == SComment) && ! oldSkip && s_skip) {
    if (s_lang != SrcLangExt_Python && s_lang != SrcLangExt_Markdown && s_lang != SrcLangExt_Fortran) {
      ADDCHAR('*');
      ADDCHAR('/');
    }
  }

  if (s_readLineCtx == SComment) {
    BEGIN(SComment);

  } else {
    BEGIN(s_condCtx);
  }
}

void replaceComment(int offset)
{
   QString text = QString::fromUtf8(commentcnvYYtext);

   if (s_mlBrief || s_skip) {
      copyToOutput(text, text.length());

   } else {
      int i = computeIndent(text.mid(offset));

      if (i == s_blockHeadCol) {
         replaceCommentMarker(text, text.length());

      } else {
         copyToOutput(" */", 3);

         for (int i = commentcnvYYleng - 1; i >= 0; i--) {
            char tmp = commentcnvYYtext[i];
            unput(tmp);
         }

         s_inSpecialComment = false;
         BEGIN(Scan);
      }
   }
}

// simplified way to know if this is fixed form
// duplicate in fortrancode.l
static bool recognizeFixedForm(const QString &contents)
{
   int column    = 0;
   bool skipLine = false;

   for (int i = 0; true; i++) {
      column++;

      switch (contents[i].unicode()) {
         case '\n':
            column = 0;
            skipLine = false;
            break;

         case ' ':
            break;

         case '\000':
            return false;

         case 'C':
         case 'c':
         case '*':
            if (column == 1) {
               return true;
            }

            if (skipLine) {
               break;
            }

            return false;

         case '!':
            if (column > 1 && column < 7) {
               return false;
            }

            skipLine = true;
            break;

         default:
            if (skipLine) {
               break;
            }

            if (column == 7) {
               return true;
            }

            return false;
      }
   }

   return false;
}

/*! This function does three things:
 *  1 Convert multi-line C++ style comment blocks (which are aligned) to C style
 *    comment blocks (if MULTILINE_CPP_IS_BRIEF is set to NO)
 *  2 Replaces aliases with their definition (see ALIASES)
 *  3 Handles conditional sections (cond...endcond blocks)
 */

// main entry point
QString convertCppComments(const QString &inBuf, const QString &fileName)
{
   s_mlBrief  = Config::getBool("multiline-cpp-brief");

   s_inputString  = inBuf;
   s_outputString       = "";

   s_inputPosition = 0;
   s_col      = 0;
   s_skip     = false;
   s_fileName = fileName;
   s_lang     = getLanguageFromFileName(fileName);
   s_lineNr   = 1;

   s_pythonDocString = false;

   s_condStack.clear();
   s_commentStack.clear();

   printlex(commentcnvYY_flex_debug, true, __FILE__, fileName);
   isFixedForm = false;

   if (s_lang == SrcLangExt_Fortran) {
      isFixedForm = recognizeFixedForm(inBuf);
   }

   if (s_lang == SrcLangExt_Markdown) {
      s_nestingCount = 0;
      BEGIN(CComment);
      s_commentStack.push(CommentCtx(s_lineNr));

   } else {
      BEGIN(Scan);
   }

   commentcnvYYlex();

   while (! s_condStack.isEmpty()) {
      CondCtx ctx = s_condStack.pop();
      QString sectionInfo = " ";

      if (ctx.sectionId != " ") {
         sectionInfo = QString(" with label '%1' ").formatArg(ctx.sectionId);
      }

      warn(s_fileName, ctx.lineNr, "Conditional section %s does not have "
           "a corresponding \\endcond command", csPrintable(sectionInfo));
   }

   if (s_nestingCount > 0 && s_lang != SrcLangExt_Markdown && s_lang != SrcLangExt_Fortran) {
      QString tmp = "(probable line reference: ";

      bool first = true;

      while (! s_commentStack.isEmpty()) {
         CommentCtx ctx = s_commentStack.pop();

         if (! first) {
            tmp += ", ";
         }

         tmp += QString::number(ctx.lineNr);
         first = false;
      }

      tmp += ")";
      warn(s_fileName, s_lineNr, "Reached end of file while still inside a (nested) comment. "
           "Nesting level %d %s", s_nestingCount, csPrintable(tmp) );

      // add one for "normal" expected end of comment
   }

   s_commentStack.clear();
   s_nestingCount = 0;

   return s_outputString;
}
