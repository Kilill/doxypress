/*************************************************************************
 *
 * Copyright (C) 2014-2016 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License version 2
 * is hereby granted. No representations are made about the suitability of
 * this software for any purpose. It is provided "as is" without express or
 * implied warranty. See the GNU General Public License for more details.
 *
 * Documents produced by DoxyPress are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer parse_py_YY_create_buffer
#define yy_delete_buffer parse_py_YY_delete_buffer
#define yy_flex_debug parse_py_YY_flex_debug
#define yy_init_buffer parse_py_YY_init_buffer
#define yy_flush_buffer parse_py_YY_flush_buffer
#define yy_load_buffer_state parse_py_YY_load_buffer_state
#define yy_switch_to_buffer parse_py_YY_switch_to_buffer
#define yyin parse_py_YYin
#define yyleng parse_py_YYleng
#define yylex parse_py_YYlex
#define yylineno parse_py_YYlineno
#define yyout parse_py_YYout
#define yyrestart parse_py_YYrestart
#define yytext parse_py_YYtext
#define yywrap parse_py_YYwrap
#define yyalloc parse_py_YYalloc
#define yyrealloc parse_py_YYrealloc
#define yyfree parse_py_YYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE parse_py_YYrestart(parse_py_YYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int parse_py_YYleng;

extern FILE *parse_py_YYin, *parse_py_YYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up parse_py_YYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via parse_py_YYrestart()), so that the user can continue scanning by
	 * just pointing parse_py_YYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when parse_py_YYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int parse_py_YYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow parse_py_YYwrap()'s to do buffer switches
 * instead of setting up a fresh parse_py_YYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void parse_py_YYrestart (FILE *input_file  );
void parse_py_YY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE parse_py_YY_create_buffer (FILE *file,int size  );
void parse_py_YY_delete_buffer (YY_BUFFER_STATE b  );
void parse_py_YY_flush_buffer (YY_BUFFER_STATE b  );
void parse_py_YYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void parse_py_YYpop_buffer_state (void );

static void parse_py_YYensure_buffer_stack (void );
static void parse_py_YY_load_buffer_state (void );
static void parse_py_YY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER parse_py_YY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE parse_py_YY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE parse_py_YY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE parse_py_YY_scan_bytes (yyconst char *bytes,int len  );

void *parse_py_YYalloc (yy_size_t  );
void *parse_py_YYrealloc (void *,yy_size_t  );
void parse_py_YYfree (void *  );

#define yy_new_buffer parse_py_YY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        parse_py_YYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        parse_py_YYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define parse_py_YYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *parse_py_YYin = (FILE *) 0, *parse_py_YYout = (FILE *) 0;

typedef int yy_state_type;

extern int parse_py_YYlineno;

int parse_py_YYlineno = 1;

extern char *parse_py_YYtext;
#define yytext_ptr parse_py_YYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up parse_py_YYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	parse_py_YYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 163
#define YY_END_OF_BUFFER 164
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[980] =
    {   0,
    16488,16488,  106,  106,   30,   30,   36,   36,   41,   41,
      164,  162,  163,  161,  163,   25,  162,  163,   25,  162,
      163,   19,  161,  163,   13,   25,  162,  163,   25,  162,
      163,   12,   25,  162,  163,   23,   25,  162,  163,   24,
       25,  162,  163,   25,  162,  163,   17,   25,  162,  163,
    16395,   17,   25,  162,  163,16395,   17,   25,  162,  163,
    16395,   17,   25,  162,  163,16395,   17,   25,  162,  163,
    16395,   17,   25,  162,  163,16395,   17,   25,  162,  163,
    16395,   17,   25,  162,  163,16395,   18,   25,  162,  163,
       17,   25,  162,  163,16393,16394,16395,   17,   25,  162,

      163,16393,16394,16395,   17,   25,  162,  163,16393,16394,
    16395,   17,   25,  162,  163,16393,16394,16395,   17,   25,
      162,  163,16393,16394,16395,   17,   25,  162,  163,16393,
    16394,16395,   17,   25,  162,  163,16393,16394,16395,   17,
       25,  162,  163,16393,16394,16395,   53,   54,  162,  163,
       51,  161,  163,   50,   54,  162,  163,   54,  162,  163,
       49,   54,  162,  163,   54,  162,  163,   52,   54,  162,
      163,   52,   54,  162,  163,   52,   54,  162,  163,   52,
       54,  162,  163,   52,   54,  162,  163,   52,   54,  162,
      163,   52,   53,   54,  162,  163,  135,  138,  162,  163,

      138,  162,  163,  136,  161,  163,  138,  162,  163,  138,
      162,  163,  138,  162,  163,  134,  138,  162,  163,  141,
      143,  162,  163,  142,  161,  163,  143,  162,  163,  141,
      143,  162,  163,  139,  143,  162,  163,  162,  163,   71,
      162,  163,   70,  162,  163,   69,  162,  163,   78,  162,
      163,   72,  162,  163,   78,  162,  163,   75,  162,  163,
       72,   78,  162,  163,   76,  162,  163,   74,   78,  162,
      163,   73,   78,  162,  163,   61,   65,  162,  163,   65,
      162,  163,   64,  161,  163,16439,   60,   65,  162,  163,
       63,   65,  162,  163,   59,   65,  162,  163,   61,   65,

      162,  163,   61,   65,  162,  163,   61,   65,  162,  163,
       58,   65,  162,  163,   63,   65,  162,  163,   82,  162,
      163,   83,  161,  163,   79,   82,  162,  163,   81,   82,
      162,  163,   80,   82,  162,  163,   96,  162,  163,   97,
      162,  163,   97,  162,  163,   98,  162,  163,   99,  162,
      163,  162,  163,  100,  161,  163, 8296,  162,  163,  162,
      163,  162,  163, 8296,  162,  163, 8296,  162,  163, 8296,
      162,  163,  103,  162,  163,   90,   93,  162,  163,   93,
      162,  163,   91,  161,  163,   89,   93,  162,  163,   93,
      162,  163,   88,   93,  162,  163,   90,   93,  162,  163,

       90,   93,  162,  163,   90,   93,  162,  163,   87,   93,
      162,  163,  119,  162,  163,  106,  119,  162,  163,  120,
      161,  163,  111,  119,  162,  163,  117,  119,  162,  163,
      110,  119,  162,  163,  114,  119,  162,  163,  107,  119,
      162,  163,  107,  119,  162,  163,  105,  119,  162,  163,
      118,  119,  162,  163,  118,  119,  162,  163,  118,  119,
      162,  163,  118,  119,  162,  163,  118,  119,  162,  163,
      115,  119,  162,  163,  118,  119,  162,  163,  116,  119,
      162,  163,  131,  162,  163,  130,  161,  163,  128,  162,
      163,  129,  161,  163,  126,  128,  162,  163,  125,  128,

      162,  163,  121,  128,  162,  163,  122,  128,  162,  163,
      127,  128,  162,  163,  127,  128,  162,  163,  127,  128,
      162,  163,  127,  128,  162,  163,  148,  149,  162,  163,
      149,  162,  163,  147,  149,  162,  163,  149,  162,  163,
      154,  155,  162,  163,  153,  155,  162,  163,  155,  162,
      163,  155,  162,  163,  158,  160,  162,  163,  158,  159,
      161,  163,  158,  160,  162,  163,  158,  160,  162,  163,
      160,  162,  163,   31,  162,  163,   30,   31,  162,  163,
       29,  161,  163,   26,   31,  162,  163,   27,   31,  162,
      163,   27,   31,  162,  163,   38,  162,  163,   36,   38,

      162,  163,   35,  161,  163,   32,   38,  162,  163,   37,
       38,  162,  163,   34,   38,  162,  163,16417,   42,  162,
      163,   41,   42,  162,  163,   40,  161,  163,   39,   42,
      162,  163,16395,   19,   16,   15,   16,   17,16395,   17,
    16395,   17,16395,   17,16395,   17,16395,   17,16395,   18,
    16393,16394,16395,16393,16394,16395,16393,16394,16395,16393,
    16394,16395,16393,16394,16395,   17,16393,16394,16395,   17,
    16393,16394,16395,   17,16393,16394,16395,   17,16393,16394,
    16395,   17,16393,16394,16395,   17,16393,16394,16395,   53,
       48,   52,   52,   52,   52,   52,   53,  135,  137,  134,

      141,  140,  141,  139,  139,   71,   70,   69,   72,   77,
       76,   73,   61,16439,   63,   63,   61,   58,   57,   62,
       63,   96,   97,   99,  100,  103,   90,   92,   90,   87,
       86,  106,  117,  107,  107,  107,  118,  118,  111,  110,
      118,  118,  127,  127,  148,  145,  145,  144,  154,  151,
      151,  150,  158,  158,  158,   30,   27,   27,   36, 8225,
       34,16417,   41,   39,16395,   20,   16,   15,   16,   22,
       21, 8203,   17,16395,   17,16395,   17,16395,   17,16395,
    16393,16394,16395,16393,16394,16395,16393,16394,16395,16393,
    16394,16395,16393,16394,16395, 8202, 8203, 8202, 8203, 8202,

     8203,   17,16393,16394,16395,   17,16393,16394,16395,   17,
    16393,16394,16395,   17,16393,16394,16395,   45,   48,   47,
       46,   52,   52,  132,  133,   77,   56, 8247,   66,   63,
       68,   68,   67,   62,   63,   99,  101,  102,   84,   94,
       92,   95,  112,  113,  108,  107,  107,  118,  118,  123,
      124,  146,  152,  156,  157,   27,   27, 8225,   39,   20,
       21,   17,16395,    2,   17,16395,   17,16395,16393,16394,
    16395,16393,16394,16395,16393,16394,16395,16393,16394,16395,
       17,16393,16394,16395,    1,    2,   17,16393,16394,16395,
       17,16393,16394,16395,   45,   46,   52,   66,   67,   99,

      101,  102,   85,   94,   95,  112,  113,  108,  107,  118,
      109,  118,  123,  124,   27,   27,   39,   17,16395,    6,
       17,16395,16393,16394,16395,    1,16393,16394,16395,16393,
    16394,16395,   17,16393,16394,16395,    5,    6,   17,16393,
    16394,16395,16428,  108,   27,    4,   17,16395,16393,16394,
    16395,    5,16393,16394,16395,    3,    4,   17,16393,16394,
    16395,16428, 8236,16427,   27,   28,    8,    3,16393,16394,
    16395,    7,    8,16427, 8235,   28,    7, 8201,   14
    } ;

static yyconst flex_int16_t yy_accept[533] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    8,    9,   10,   11,   12,   14,   16,
       19,   22,   25,   29,   32,   36,   40,   44,   47,   52,
       57,   62,   67,   72,   77,   82,   87,   91,   98,  105,
      112,  119,  126,  133,  140,  147,  151,  154,  158,  161,
      165,  168,  172,  176,  180,  184,  188,  192,  197,  201,
      204,  207,  210,  213,  216,  220,  224,  227,  230,  234,

      238,  240,  243,  246,  249,  252,  255,  258,  261,  265,
      268,  272,  276,  280,  283,  287,  291,  295,  299,  303,
      307,  311,  315,  319,  322,  325,  329,  333,  337,  340,
      343,  346,  349,  352,  354,  357,  360,  362,  364,  367,
      370,  373,  376,  380,  383,  386,  390,  393,  397,  401,
      405,  409,  413,  416,  420,  423,  427,  431,  435,  439,
      443,  447,  451,  455,  459,  463,  467,  471,  475,  479,
      483,  486,  489,  492,  495,  499,  503,  507,  511,  515,
      519,  523,  527,  531,  534,  538,  541,  545,  549,  552,
      555,  559,  563,  567,  571,  574,  577,  581,  584,  588,

      592,  596,  599,  603,  606,  610,  614,  619,  622,  626,
      629,  633,  633,  634,  635,  635,  636,  638,  638,  638,
      638,  638,  638,  638,  640,  640,  640,  640,  642,  644,
      646,  648,  650,  651,  654,  657,  660,  663,  666,  666,
      670,  670,  674,  678,  682,  686,  690,  691,  691,  692,
      692,  692,  693,  693,  693,  694,  695,  696,  698,  699,
      699,  699,  700,  701,  702,  702,  703,  704,  705,  706,
      706,  707,  708,  709,  710,  711,  712,  713,  714,  715,
      715,  715,  715,  716,  717,  717,  717,  717,  718,  719,
      720,  722,  723,  724,  724,  725,  725,  726,  726,  726,

      726,  726,  726,  727,  728,  728,  728,  728,  729,  729,
      729,  729,  730,  731,  732,  733,  733,  734,  734,  734,
      735,  736,  737,  737,  738,  739,  740,  741,  742,  743,
      743,  743,  744,  744,  744,  745,  746,  746,  747,  748,
      749,  750,  750,  751,  752,  753,  754,  754,  755,  756,
      757,  757,  757,  758,  759,  760,  760,  761,  763,  764,
      764,  764,  765,  766,  767,  768,  770,  771,  772,  772,
      772,  772,  772,  773,  775,  777,  779,  781,  784,  787,
      790,  793,  796,  798,  800,  802,  806,  810,  814,  818,
      819,  820,  821,  822,  823,  824,  825,  826,  827,  828,

      829,  829,  830,  832,  833,  834,  836,  837,  838,  839,
      839,  840,  840,  841,  842,  843,  844,  845,  846,  847,
      848,  849,  850,  851,  852,  853,  853,  854,  854,  855,
      856,  856,  857,  858,  859,  859,  860,  861,  862,  862,
      862,  864,  865,  867,  869,  872,  875,  878,  881,  881,
      881,  881,  885,  887,  891,  895,  896,  897,  897,  898,
      899,  900,  901,  902,  903,  904,  905,  906,  907,  908,
      908,  909,  910,  911,  913,  914,  915,  916,  917,  918,
      918,  920,  921,  923,  926,  927,  930,  933,  933,  937,
      939,  943,  944,  944,  944,  945,  946,  946,  947,  949,

      952,  953,  956,  956,  958,  962,  962,  963,  964,  965,
      967,  967,  968,  969,  972,  972,  974,  974,  975,  976,
      977,  977,  978,  978,  978,  978,  978,  979,  979,  979,
      980,  980
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
       10,   11,   12,   13,   12,   14,    7,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,    7,    7,
       19,    7,    1,   20,   21,   21,   21,   21,   22,   23,
       24,   24,   24,   25,   24,   26,   24,   24,   24,   24,
       24,   27,   24,   28,   29,   24,   24,   30,   24,   24,
       31,   32,   33,    1,   34,    7,   35,   21,   36,   37,

       38,   39,   24,   40,   41,   25,   24,   42,   43,   24,
       44,   45,   24,   46,   47,   48,   49,   24,   24,   30,
       50,   24,   51,    7,   33,    7,    1,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    4,    1,    6,
        1,    1,    7,    8,    9,    9,    9,    1,   10,    1,
       11,   11,   11,   12,   12,   12,   12,   12,   12,   12,
        1,   13,    1,   12,   11,   11,   11,   11,   11,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
        1,   14
    } ;

static yyconst flex_int16_t yy_base[639] =
    {   0,
     1858, 1857,    0,   52,  104,    0, 1849, 1846,  155,  159,
      162,  167,  191,    0,  243,    0,  294,  342,  168,  173,
      391,    0,  443,    0,  495,  544,  592,  640,  689,    0,
     1845, 1844,  741,    0,  298,  302,  306,  310,  314,  321,
      793,    0,  845,    0,  897,    0, 1846, 2817, 2817, 2817,
     1841, 1837, 1824,  168, 1819, 2817, 2817, 1776,  318,  347,
      948,  497,  349,  327,  331,    0,  339,  499,  515,  993,
      517,  519,  535,  543,    0,    0, 2817, 1815, 1803, 1799,
     2817,    0,  180,  545, 1751, 1751,  550, 1039,    0, 2817,
     2817, 1775, 1771,    0, 1776,    0,  173, 2817,  178, 1769,

      361, 2817, 2817,    0, 2817, 1770,    0, 2817, 2817, 1757,
     2817,    0,    0, 2817,  310, 1749, 1747, 1742,  356,  555,
      560,  187, 1741, 2817, 2817, 2817, 2817, 2817,    0, 1744,
     2817, 2817, 1731,  379, 2817, 2817, 1736, 1728,  378,  561,
      603,  382,    0, 2817, 1727, 1727,    0, 1723,  497,  604,
      605,  387, 2817, 1726, 2817, 1720,    0, 1716, 2817, 1078,
      610, 2817,    0, 1688,  503, 1676,  610, 2817,  612, 2817,
     2817, 2817, 2817, 2817, 1716, 1712, 2817, 2817,    0,  570,
      639,  946,    0, 1714, 2817,  511,    0, 2817, 1710,  577,
     1683, 1678, 1702, 1698,  652, 2817, 1703, 2817, 2817,  540,

      590, 2817, 1690, 2817, 2817, 2817,  524, 2817, 1686, 2817,
      600, 1683,  651, 1681, 1678,    0,    0,    0, 1674, 1633,
      652,  950, 1678,  953,    0, 1674, 1670,  966,  978,  968,
      980, 1008,  638,  998, 1023, 1064, 1065, 1066, 1013, 1086,
      529, 1105, 1087, 1115, 1117, 1119,    0, 1516,    0,    0,
     1512,    0, 1514, 1510,  668, 1470, 1473, 1164,    0, 1509,
     1504, 2817, 1509,    0,  597, 2817,  657, 1504, 1501,  987,
     2817, 2817,    0, 1504,    0, 1499,    0,    0,  666, 1492,
     1495, 1491,    0,  675, 1487, 1488, 1479,  675,  581, 2817,
        0,    0, 1484,    0, 1468,  620, 2817, 1474, 1470, 1459,

     1455,  679,  626,    0, 1454, 1449, 1445,    0, 1440, 1441,
     1427,  954,  962, 2817, 1432, 1426,    0, 1418, 1013, 1125,
     1130, 2817,    0,    0, 1382, 1412, 1408, 1354,  978, 1395,
     1383,    0, 1382, 1378, 1011,    0, 1378, 2817, 1032, 2817,
        0, 1370, 2817, 1035, 2817, 1338, 1154, 1363, 1357, 1349,
     1000, 1348, 1059, 1067, 1343,  554, 1324,  603, 1320, 1084,
     1319, 1112, 1150, 1311,    0,    0, 2817, 1302, 1262, 1043,
     1291, 1188, 2817, 1189, 1190, 1204, 1208, 1209, 1222, 1224,
     1229, 1236, 2817,  531, 1233, 1243, 1248, 1258, 1270, 1274,
        0, 2817, 1271, 1260,  970, 2817, 2817,    0, 2817, 1268,

     1267, 1247,    0, 2817, 1240,    0, 1226, 1229, 1226,    0,
     1218, 1202, 1190,    0, 1185, 1184, 1174, 1269, 2817, 1005,
     1106, 1099, 1097, 1078, 2817, 1061, 2817, 1146, 2817, 2817,
     1078, 1121, 1252, 1058, 1020, 1129, 2817, 2817,  956, 1285,
     1290, 1300, 1310, 1314, 1315, 1328, 1329, 1330, 1042,  931,
      913, 1342, 1344, 1354, 1356, 2817, 2817,    0,  674, 2817,
     2817,  668, 2817, 2817, 2817, 2817, 2817, 2817, 2817, 1364,
     2817, 2817,  596,    0, 2817, 2817, 1156, 1262, 1191,  544,
     1375, 1380, 1382, 1394, 1395, 1396, 1408,  516, 1409, 1410,
     1423, 1114,    0, 1170, 1422, 1211,  499, 1430, 1442, 1443,

     1455, 1456,  468, 1457, 1470, 1210, 1263, 2817, 1286, 1297,
      461, 1471, 1475, 1489,  326, 1490, 1316, 1334, 2817, 1357,
      329, 1503,  317,  285,  254,  258, 2817,  122,  122, 2817,
     2817, 1522, 1536, 1550, 1564, 1578, 1592, 1606, 1620, 1634,
     1648, 1662, 1675, 1689, 1702, 1715, 1728, 1742, 1756, 1762,
     1776, 1790, 1804, 1810, 1824, 1830, 1844, 1857, 1871, 1885,
     1891, 1898, 1912, 1922, 1936, 1950, 1956, 1962, 1976, 1990,
     2004, 2018, 2032, 2045, 2058, 2071, 2084, 2098, 2112, 2126,
     2139, 2152, 2166, 2179, 2192, 2205, 2219, 2233, 2247, 2261,
     2267, 2281, 2295, 2301, 2315, 2321, 2335, 2348, 2361, 2375,

     2389, 2403, 2409, 2413, 2420, 2434, 2447, 2461, 2475,  316,
     2481, 2487, 2501, 2515, 2529, 2542, 2555, 2568, 2581, 2594,
     2607, 2621, 2635, 2648, 2661, 2674, 2687, 2700, 2714, 2721,
     2728, 2742, 2755, 2768, 2772, 2785, 2789, 2802
    } ;

static yyconst flex_int16_t yy_def[639] =
    {   0,
      532,  532,  531,  531,  531,    5,  532,  532,  533,  533,
      534,  534,  531,   13,  531,   15,  535,  535,  536,  536,
      531,   21,  531,   23,  537,  537,  538,  538,  531,   29,
      539,  539,  531,   33,  540,  540,  541,  541,  542,  542,
      531,   41,  531,   43,  531,   45,  531,  531,  531,  531,
      543,  531,  531,  544,  531,  531,  531,  531,  545,  545,
      545,  545,  545,   61,   61,   61,  546,  547,  547,  547,
      547,  547,   70,   70,   70,  548,  531,  531,  549,  531,
      531,  550,  550,  550,  550,  550,  550,  550,  551,  531,
      531,  531,  531,  552,  531,  553,  531,  531,  553,  531,

      531,  531,  531,  554,  531,  531,  555,  531,  531,  531,
      531,  556,  557,  531,  558,  531,  559,  531,  557,  557,
      557,  531,  560,  531,  531,  531,  531,  531,  561,  531,
      531,  531,  562,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  563,  531,  564,  531,  565,  531,  563,  563,
      563,  531,  531,  531,  531,  531,  566,  531,  531,  531,
      531,  531,  567,  567,  567,  567,  567,  531,  567,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  568,  568,
      568,  568,  569,  531,  531,  570,  571,  531,  531,  572,
      573,  573,  531,  531,  573,  531,  531,  531,  531,  574,

      574,  531,  531,  531,  531,  531,  575,  531,  531,  531,
      576,  543,  577,  531,  531,  578,  579,  580,  531,  531,
      531,  531,  581,  582,  583,  531,  531,  582,  582,  582,
      582,  582,  584,  585,  585,  585,  585,  585,  531,  586,
      587,  586,  586,  586,  586,  586,  588,  531,  589,  590,
      531,  591,  531,  531,  591,  591,  591,  591,  592,  531,
      531,  531,  531,  593,  531,  531,  593,  531,  531,  531,
      531,  531,  594,  531,  595,  531,  596,  597,  598,  531,
      599,  531,  600,  601,  531,  531,  531,  597,  531,  531,
      602,  603,  531,  604,  605,  531,  531,  531,  531,  531,

      531,  531,  531,  606,  531,  607,  531,  608,  531,  531,
      531,  606,  531,  531,  531,  531,  609,  531,  531,  531,
      531,  531,  610,  611,  611,  531,  531,  611,  611,  531,
      531,  612,  531,  531,  612,  613,  531,  531,  531,  531,
      614,  531,  531,  531,  531,  615,  615,  531,  531,  531,
      531,  616,  617,  617,  531,  531,  531,  618,  531,  531,
      619,  620,  621,  531,  622,  623,  531,  531,  531,  531,
      624,  625,  531,  626,  626,  626,  626,  627,  627,  627,
      627,  627,  531,  531,  531,  628,  628,  628,  628,  531,
      629,  531,  531,  630,  630,  531,  531,  595,  531,  531,

      599,  531,  600,  531,  531,  602,  631,  531,  531,  632,
      531,  607,  531,  608,  531,  531,  531,  531,  531,  610,
      611,  611,  531,  531,  531,  531,  531,  531,  531,  531,
      616,  633,  617,  531,  619,  634,  531,  531,  531,  625,
      626,  531,  626,  626,  627,  627,  627,  627,  531,  531,
      531,  628,  531,  628,  628,  531,  531,  635,  630,  531,
      531,  631,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  611,  611,  531,  531,  633,  617,  634,  531,
      626,  531,  626,  627,  531,  627,  627,  531,  628,  531,
      628,  636,  637,  531,  531,  617,  531,  531,  626,  627,

      531,  627,  531,  531,  628,  531,  636,  531,  638,  617,
      531,  531,  531,  627,  531,  531,  531,  638,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
        0,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,

      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531
    } ;

static yyconst flex_int16_t yy_nxt[2870] =
    {   0,
       50,   51,   52,   50,   53,   54,   50,   55,   56,   57,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   58,
       59,   59,   59,   59,   59,   59,   60,   59,   61,   59,
       50,   50,   50,   59,   59,   62,   63,   59,   64,   59,
       65,   59,   59,   59,   59,   60,   59,   59,   66,   59,
       50,   59,   50,   67,   52,   50,   53,   54,   50,   55,
       56,   57,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   58,   68,   68,   68,   68,   68,   68,   69,   68,
       70,   68,   50,   50,   50,   68,   68,   71,   72,   68,
       73,   68,   74,   68,   68,   68,   68,   69,   68,   68,

       75,   68,   50,   68,   76,   76,   77,   76,   78,   79,
       76,   80,   76,   76,   76,   76,   76,   81,   76,   76,
       76,   76,   76,   76,   82,   82,   82,   82,   82,   82,
       83,   82,   84,   82,   76,   76,   76,   82,   82,   85,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   83,
       86,   82,   87,   82,   76,   88,   90,   91,  530,   92,
       95,   91,   93,   92,   97,  529,   93,   98,   99,   97,
      125,  217,  100,  218,  265,  125,  126,  127,  266,  267,
      128,  126,  127,  268,  253,  128,   94,  254,  289,  290,
       94,   48,  101,   49,   48,   48,   48,   48,   48,  102,

       48,   48,   48,   48,   48,   48,   48,   48,  103,   48,
       48,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,   48,   48,   48,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,   48,  104,  105,  106,   49,  105,  105,  107,  105,
      105,   48,  108,  105,  105,  109,  105,  105,  105,  105,
      110,  111,  105,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  105,  105,  105,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  105,  112,  114,  115,  528,  116,  117,

       49,  118,  184,  527,   49,  185,  184,  114,   49,  185,
      188,  279,   49,  189,  188,  280,  192,  189,  193,  221,
      119,  194,  120,  192,  420,  193,  420,  222,  194,  186,
      223,  531,  526,  186,  531,  531,  225,  190,  531,  119,
      233,  190,  121,  122,  115,  195,  116,  123,  221,  118,
      221,  226,  195,  224,  227,  114,  222,  224,  222,  223,
      286,  223,  270,  287,  525,  225,  524,  225,  119,  271,
      120,  523,  231,  232,  235,  236,  224,  237,  272,  238,
      296,  297,  300,  303,  297,  301,  230,  119,  313,  314,
      121,   48,   48,   49,   48,   48,   48,   48,   48,   48,

       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,   48,   48,   48,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,   48,  129,   48,  130,   49,   48,   48,   48,   48,
       48,  131,  131,   48,   48,  131,   48,   48,   48,   48,
      132,   48,   48,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,   48,   48,   48,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,   48,  133,   48,  134,  135,  221,  137,

      239,  310,  138,  521,  311,  515,  222,  326,  222,  223,
      327,  223,  339,  340,   48,  225,  239,  241,  239,  226,
      239,  139,  227,  140,  222,  356,  222,  223,  222,  223,
      384,  223,  449,  241,  511,  241,  357,  241,  229,  531,
      139,  351,  531,  141,   48,  142,  135,  531,  137,  253,
      531,  138,  254,  352,  253,  356,  244,  254,  243,  286,
      503,  240,  287,   48,  286,  300,  357,  287,  301,  240,
      139,  255,  140,  385,  333,  450,  255,  334,  344,  345,
      245,  288,  289,  290,  497,  246,  288,  302,  240,  139,
      255,  351,  141,  144,  145,  255,  146,  147,  265,  148,

      288,  360,  266,  352,  356,  288,  302,  300,  310,  310,
      301,  311,  311,  361,  326,  357,  326,  327,  149,  327,
      150,  296,  297,  319,  321,  321,  321,  303,  297,  302,
      312,  312,  354,  474,  322,  322,  329,  149,  329,  233,
      151,  152,  145,  333,  146,  147,  334,  148,  302,  312,
      312,  322,  221,  221,  531,  329,  346,  329,  267,  346,
      222,  222,  268,  223,  223,  335,  149,  279,  150,  225,
      225,  280,  253,  235,  236,  254,  237,  404,  238,  286,
      283,  294,  287,  300,  335,  149,  301,  493,  151,  153,
      154,  155,  153,  156,  157,  153,  158,  159,  153,  153,

      153,  153,  153,  160,  161,  161,  153,  162,  153,  163,
      163,  164,  163,  163,  163,  165,  166,  167,  163,  168,
      153,  153,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  165,  163,  163,  169,  163,  170,
      163,  173,  173,  174,  173,  175,  173,  173,  176,  177,
      178,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  179,  179,  179,  179,  179,  179,  180,  179,  181,
      179,  177,  173,  178,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  180,  179,  179,  182,
      179,  177,  179,  196,  197,  198,  196,  196,  196,  196,

      196,  196,  196,  196,  196,  196,  199,  196,  196,  196,
      196,  196,  196,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  196,  196,  196,  200,  200,  200,  200,
      200,  200,  200,  201,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  196,  200,  202,  203,  204,  202,  202,
      202,  202,  202,  202,  202,  205,  202,  206,  202,  202,
      202,  202,  202,  202,  202,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  202,  202,  202,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  202,  207,  208,  209,  210,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  208,  208,  208,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  208,  211,  221,
      333,  370,  226,  334,  221,  227,  488,  222,  310,  222,
      223,  311,  222,  313,  314,  223,  225,  221,  225,  221,
      226,  225,  335,  227,  228,  222,  451,  222,  223,  221,
      223,  221,  326,  531,  225,  327,  225,  222,  270,  222,
      223,  335,  223,  228,  239,  271,  225,  226,  225,  239,

      227,  351,  222,  480,  272,  223,  375,  222,  459,  221,
      223,  241,  374,  352,  239,  333,  241,  222,  334,  242,
      223,  435,  222,  376,  239,  223,  225,  418,  418,  418,
      472,  241,  222,  426,  340,  223,  428,  345,  242,  247,
      247,  241,  247,  449,  370,  247,  472,  247,  247,  247,
      247,  247,  377,  258,  258,  258,  247,  247,  247,  434,
      351,  225,  426,  340,  379,  239,  239,  239,  351,  247,
      247,  247,  352,  222,  222,  222,  223,  223,  223,  431,
      352,  476,  241,  241,  241,  360,  450,  239,  239,  247,
      258,  319,  320,  320,  321,  222,  222,  361,  223,  223,

      475,  380,  322,  322,  241,  241,  239,  323,  382,  226,
      381,  433,  227,  360,  222,  506,  239,  223,  239,  322,
      239,  386,  351,  241,  222,  361,  222,  223,  222,  223,
      360,  223,  508,  241,  352,  241,  474,  241,  319,  320,
      320,  321,  361,  319,  321,  321,  321,  428,  345,  322,
      419,  221,  473,  387,  322,  322,  531,  351,  346,  222,
      388,  346,  223,  389,  247,  247,  419,  247,  225,  352,
      247,  322,  247,  247,  247,  247,  247,  469,  258,  258,
      258,  247,  247,  247,  495,  495,  495,  468,  467,  221,
      221,  442,  360,  466,  247,  247,  247,  222,  222,  222,

      223,  223,  223,  411,  361,  221,  225,  225,  225,  221,
      239,  506,  351,  222,  247,  258,  223,  222,  222,  411,
      223,  223,  225,  239,  352,  239,  225,  241,  508,  464,
      239,  222,  463,  222,  223,  441,  223,  239,  222,  294,
      241,  223,  241,  461,  239,  222,  443,  241,  223,  453,
      460,  444,  222,  351,  241,  223,  445,  222,  510,  239,
      223,  241,  446,  351,  506,  352,  241,  222,  400,  400,
      223,  239,  447,  458,  457,  352,  241,  456,  451,  222,
      448,  508,  223,  418,  418,  418,  221,  517,  241,  452,
      470,  221,  371,  471,  222,  478,  439,  223,  520,  222,

      454,  442,  223,  225,  519,  438,  470,  496,  225,  222,
      352,  482,  223,  455,  437,  221,  239,  517,  225,  222,
      435,  359,  223,  222,  222,  434,  223,  223,  225,  485,
      239,  239,  225,  241,  519,  517,  481,  222,  222,  222,
      223,  223,  223,  239,  355,  453,  241,  241,  241,  431,
      350,  222,  519,  222,  223,  490,  223,  239,  520,  483,
      241,  484,  241,  222,  430,  222,  223,  429,  223,  347,
      352,  486,  241,  487,  241,  494,  498,  427,  495,  495,
      495,  482,  425,  221,  222,  331,  330,  223,  489,  222,
      424,  222,  223,  225,  223,  239,  485,  501,  225,  423,

      225,  491,  422,  222,  222,  222,  223,  223,  223,  239,
      504,  490,  241,  241,  241,  318,  316,  222,  222,  222,
      223,  223,  223,  421,  239,  417,  241,  241,  241,  499,
      416,  498,  222,  315,  309,  223,  495,  495,  495,  222,
      500,  241,  223,  512,  513,  307,  471,  415,  225,  413,
      411,  222,  222,  502,  223,  223,  501,  239,  504,  410,
      225,  241,  299,  298,  222,  222,  222,  223,  223,  223,
      505,  516,  512,  241,  241,  241,  513,  409,  408,  222,
      222,  294,  223,  223,  222,  293,  285,  223,  241,  225,
      522,  516,  282,  241,  405,  402,  400,  399,  222,  222,

      276,  223,  223,  514,  522,  274,  269,  241,  241,  269,
      263,  397,  222,  396,  395,  223,  394,  251,  248,  393,
      390,  241,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  136,  136,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  213,  219,  215,  371,
      369,  368,  364,  214,  212,  213,  213,  359,  213,  216,
      216,  355,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  216,  224,  350,  349,  348,  224,  224,  347,
      224,  224,  224,  224,  347,  224,  234,  342,  337,  331,
      330,  328,  325,  318,  316,  234,  234,  315,  234,  240,
      309,  307,  305,  240,  240,  299,  240,  240,  240,  240,
      298,  240,  247,  247,  294,  293,  284,  247,  247,  285,
      247,  247,  284,  282,  247,  247,  249,  249,  276,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      252,  274,  252,  252,  269,  252,  259,  263,  261,  260,
      259,  259,  259,  259,  259,  259,  259,  259,  257,  259,
      262,  262,  256,  262,  262,  262,  262,  262,  262,  262,

      262,  262,  262,  262,  264,  264,  251,  264,  250,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  273,  248,
      273,  273,  220,  273,  275,  275,  219,  275,  215,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  277,  214,
      277,  277,  212,  277,  278,  531,  172,  172,   49,  278,
      278,   49,  278,  278,  278,  278,  278,  278,  281,   49,
       49,  281,  531,  531,  531,  531,  531,  281,  281,  531,
      281,  283,  283,  531,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  291,  291,  531,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  292,

      531,  292,  292,  531,  292,  295,  295,  531,  295,  295,
      531,  295,  304,  531,  531,  531,  531,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  306,  531,  531,  531,
      531,  531,  306,  306,  531,  306,  308,  308,  531,  308,
      531,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      317,  317,  531,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  324,  531,  324,  324,  531,  324,
      332,  531,  332,  332,  531,  332,  336,  336,  531,  531,
      336,  336,  336,  336,  336,  336,  336,  336,  531,  336,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  341,  341,  531,  531,  341,  341,
      341,  341,  341,  341,  341,  341,  531,  341,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  346,  346,  346,  531,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  353,  531,  531,  531,
      531,  531,  353,  353,  531,  353,  353,  531,  353,  358,
      531,  531,  531,  531,  358,  531,  358,  531,  358,  358,
      531,  358,  362,  531,  531,  531,  531,  531,  362,  362,
      531,  362,  362,  531,  362,  363,  531,  531,  531,  363,
      363,  531,  363,  363,  363,  363,  531,  363,  365,  365,

      531,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  366,  366,  531,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  367,  367,  367,  367,
      531,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      372,  531,  531,  531,  531,  531,  531,  531,  531,  372,
      372,  531,  372,  224,  531,  531,  531,  224,  224,  531,
      224,  224,  224,  224,  531,  224,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  531,  373,  373,  373,  373,
      234,  531,  531,  531,  531,  531,  531,  531,  531,  234,
      234,  531,  234,  378,  531,  531,  531,  378,  378,  531,

      378,  378,  378,  378,  531,  378,  240,  531,  531,  531,
      240,  240,  531,  240,  240,  240,  240,  531,  240,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  531,  383,
      383,  383,  383,  247,  247,  531,  531,  531,  247,  247,
      531,  247,  247,  531,  531,  247,  247,  391,  391,  531,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  392,  392,  392,  392,  531,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  252,  531,  252,  252,  531,
      252,  259,  531,  531,  531,  259,  259,  259,  259,  259,
      259,  259,  259,  531,  259,  264,  264,  531,  264,  531,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  273,
      531,  273,  273,  531,  273,  398,  398,  531,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  277,
      531,  277,  277,  531,  277,  278,  531,  531,  531,  531,
      278,  278,  531,  278,  278,  278,  278,  278,  278,  281,
      531,  531,  281,  531,  531,  531,  531,  531,  281,  281,
      531,  281,  401,  531,  531,  531,  531,  531,  531,  401,
      531,  401,  401,  531,  401,  283,  283,  531,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  406,  406,  531,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  292,  531,  292,
      292,  531,  292,  407,  407,  531,  407,  295,  295,  531,
      295,  295,  531,  295,  304,  531,  531,  531,  531,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  412,  531,
      531,  531,  531,  531,  531,  412,  531,  412,  412,  531,
      412,  414,  414,  531,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  317,  317,  531,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  324,
      531,  324,  324,  531,  324,  332,  531,  332,  332,  531,

      332,  336,  336,  531,  531,  336,  336,  336,  336,  336,
      336,  336,  336,  531,  336,  341,  341,  531,  531,  341,
      341,  341,  341,  341,  341,  341,  341,  531,  341,  346,
      346,  346,  531,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  432,  531,  531,  531,  531,  531,  531,
      531,  531,  432,  432,  531,  432,  353,  531,  531,  531,
      531,  531,  353,  353,  531,  353,  353,  531,  353,  358,
      531,  531,  531,  531,  358,  531,  358,  531,  358,  358,
      531,  358,  436,  531,  531,  531,  531,  531,  531,  531,
      531,  436,  436,  531,  436,  362,  531,  531,  531,  531,

      531,  362,  362,  531,  362,  362,  531,  362,  363,  531,
      531,  531,  363,  363,  531,  363,  363,  363,  363,  531,
      363,  365,  365,  531,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  366,  366,  531,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  372,
      531,  531,  531,  531,  531,  531,  531,  531,  372,  372,
      531,  372,  440,  531,  531,  531,  440,  440,  531,  440,
      440,  440,  440,  531,  440,  224,  531,  531,  531,  224,
      224,  531,  224,  224,  224,  224,  531,  224,  378,  531,
      531,  531,  378,  378,  531,  378,  378,  378,  378,  531,

      378,  240,  531,  531,  531,  240,  240,  531,  240,  240,
      240,  240,  531,  240,  391,  391,  531,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  252,  252,
      531,  252,  252,  531,  252,  462,  462,  531,  462,  462,
      531,  462,  465,  465,  465,  465,  531,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  477,  531,  531,  531,
      531,  531,  477,  477,  531,  477,  477,  531,  477,  479,
      531,  531,  531,  531,  531,  479,  479,  531,  479,  479,
      531,  479,  492,  492,  531,  492,  507,  531,  531,  531,
      531,  531,  531,  507,  507,  507,  507,  531,  507,  509,

      509,  531,  509,  518,  531,  531,  531,  531,  531,  531,
      518,  518,  518,  518,  531,  518,   47,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531
    } ;

static yyconst flex_int16_t yy_chk[2870] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    9,    9,  529,    9,
       10,   10,    9,   10,   11,  528,   10,   11,   12,   12,
       19,   54,   12,   54,   97,   20,   19,   19,   97,   99,
       19,   20,   20,   99,   83,   20,    9,   83,  122,  122,
       10,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   17,   17,  526,   17,   17,

       35,   17,   35,  525,   36,   35,   36,   17,   37,   36,
       37,  115,   38,   37,   38,  115,   39,   38,   39,   59,
       17,   39,   17,   40,  610,   40,  610,   59,   40,   35,
       59,   64,  524,   36,   64,   65,   59,   37,   65,   17,
       67,   38,   17,   18,   18,   39,   18,   18,   60,   18,
       63,   60,   40,   64,   60,   18,   60,   65,   63,   60,
      119,   63,  101,  119,  523,   60,  521,   63,   18,  101,
       18,  515,   64,   65,   67,   67,   65,   67,  101,   67,
      134,  134,  139,  142,  142,  139,   63,   18,  152,  152,
       18,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   25,   25,   25,   62,   25,

       68,  149,   25,  511,  149,  503,   62,  165,   68,   62,
      165,   68,  186,  186,   25,   62,   69,   68,   71,   69,
       72,   25,   69,   25,   69,  207,   71,   69,   72,   71,
      241,   72,  384,   69,  497,   71,  207,   72,   62,   73,
       25,  200,   73,   25,   26,   26,   26,   74,   26,   84,
       74,   26,   84,  200,   87,  356,   72,   87,   71,  120,
      488,   73,  120,   26,  121,  140,  356,  121,  140,   74,
       26,   84,   26,  241,  180,  384,   87,  180,  190,  190,
       73,  120,  289,  289,  480,   74,  121,  140,   74,   26,
       84,  201,   26,   27,   27,   87,   27,   27,  265,   27,

      120,  211,  265,  201,  358,  121,  140,  141,  150,  151,
      141,  150,  151,  211,  167,  358,  169,  167,   27,  169,
       27,  296,  296,  161,  161,  161,  161,  303,  303,  141,
      150,  151,  201,  473,  161,  161,  167,   27,  169,  233,
       27,   28,   28,  181,   28,   28,  181,   28,  141,  150,
      151,  161,  213,  221,  195,  167,  195,  169,  267,  195,
      213,  221,  267,  213,  221,  181,   28,  279,   28,  213,
      221,  279,  255,  233,  233,  255,  233,  284,  233,  288,
      284,  462,  288,  302,  181,   28,  302,  459,   28,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   61,
      182,  222,   61,  182,  224,   61,  451,   61,  312,  222,
       61,  312,  224,  313,  313,  224,   61,  228,  222,  230,
      228,  224,  182,  228,   61,  228,  450,  230,  228,  229,
      230,  231,  329,  395,  228,  329,  230,  229,  270,  231,
      229,  182,  231,   61,   70,  270,  229,   70,  231,  234,

       70,  351,   70,  439,  270,   70,  230,  234,  395,  232,
      234,   70,  229,  351,  239,  335,  234,  232,  335,   70,
      232,  435,  239,  231,  235,  239,  232,  319,  319,  319,
      420,  239,  235,  339,  339,  235,  344,  344,   70,   88,
       88,  235,   88,  449,  370,   88,  420,   88,   88,   88,
       88,   88,  232,   88,   88,   88,   88,   88,   88,  434,
      353,  370,  426,  426,  235,  236,  237,  238,  354,   88,
       88,   88,  353,  236,  237,  238,  236,  237,  238,  431,
      354,  424,  236,  237,  238,  360,  449,  240,  243,   88,
       88,  160,  160,  160,  160,  240,  243,  360,  240,  243,

      423,  236,  160,  160,  240,  243,  242,  160,  238,  242,
      237,  354,  242,  362,  242,  492,  244,  242,  245,  160,
      246,  243,  432,  242,  244,  362,  245,  244,  246,  245,
      436,  246,  492,  244,  432,  245,  422,  246,  320,  320,
      320,  320,  436,  321,  321,  321,  321,  428,  428,  320,
      320,  363,  421,  244,  321,  321,  347,  477,  347,  363,
      245,  347,  363,  246,  258,  258,  320,  258,  363,  477,
      258,  321,  258,  258,  258,  258,  258,  417,  258,  258,
      258,  258,  258,  258,  494,  494,  494,  416,  415,  372,
      374,  375,  479,  413,  258,  258,  258,  372,  374,  375,

      372,  374,  375,  412,  479,  376,  372,  374,  375,  377,
      378,  506,  496,  376,  258,  258,  376,  377,  378,  411,
      377,  378,  376,  379,  496,  380,  377,  378,  506,  409,
      381,  379,  408,  380,  379,  374,  380,  382,  381,  407,
      379,  381,  380,  405,  386,  382,  376,  381,  382,  387,
      402,  377,  386,  433,  382,  386,  379,  387,  496,  388,
      387,  386,  380,  478,  507,  433,  387,  388,  401,  400,
      388,  389,  381,  394,  393,  478,  388,  390,  385,  389,
      382,  507,  389,  418,  418,  418,  440,  509,  389,  386,
      418,  441,  371,  418,  440,  433,  369,  440,  510,  441,

      388,  442,  441,  440,  509,  368,  418,  478,  441,  442,
      510,  443,  442,  389,  364,  444,  445,  517,  442,  443,
      361,  359,  443,  444,  445,  357,  444,  445,  443,  446,
      447,  448,  444,  445,  517,  518,  441,  446,  447,  448,
      446,  447,  448,  452,  355,  453,  446,  447,  448,  352,
      350,  452,  518,  453,  452,  454,  453,  455,  520,  444,
      452,  445,  453,  454,  349,  455,  454,  348,  455,  346,
      520,  447,  454,  448,  455,  470,  481,  342,  470,  470,
      470,  482,  337,  483,  481,  334,  333,  481,  452,  482,
      331,  483,  482,  481,  483,  484,  485,  486,  482,  330,

      483,  455,  328,  484,  485,  486,  484,  485,  486,  487,
      489,  490,  484,  485,  486,  327,  326,  487,  489,  490,
      487,  489,  490,  325,  491,  318,  487,  489,  490,  483,
      316,  498,  491,  315,  311,  491,  495,  495,  495,  498,
      484,  491,  498,  499,  500,  310,  495,  309,  498,  307,
      306,  499,  500,  487,  499,  500,  501,  502,  504,  305,
      499,  500,  301,  300,  501,  502,  504,  501,  502,  504,
      491,  505,  512,  501,  502,  504,  513,  299,  298,  505,
      512,  295,  505,  512,  513,  293,  287,  513,  505,  512,
      514,  516,  286,  513,  285,  282,  281,  280,  514,  516,

      276,  514,  516,  502,  522,  274,  269,  514,  516,  268,
      263,  261,  522,  260,  257,  522,  256,  254,  253,  251,
      248,  522,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  537,  537,  537,  537,  537,  537,  537,  537,

      537,  537,  537,  537,  537,  537,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  543,  227,  226,  223,
      220,  219,  215,  214,  212,  543,  543,  209,  543,  544,
      544,  203,  544,  544,  544,  544,  544,  544,  544,  544,

      544,  544,  544,  545,  197,  194,  193,  545,  545,  192,
      545,  545,  545,  545,  191,  545,  546,  189,  184,  176,
      175,  166,  164,  158,  156,  546,  546,  154,  546,  547,
      148,  146,  145,  547,  547,  138,  547,  547,  547,  547,
      137,  547,  548,  548,  133,  130,  123,  548,  548,  118,
      548,  548,  117,  116,  548,  548,  549,  549,  110,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      550,  106,  550,  550,  100,  550,  551,   95,   93,   92,
      551,  551,  551,  551,  551,  551,  551,  551,   86,  551,
      552,  552,   85,  552,  552,  552,  552,  552,  552,  552,

      552,  552,  552,  552,  553,  553,   80,  553,   79,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  554,   78,
      554,  554,   58,  554,  555,  555,   55,  555,   53,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  556,   52,
      556,  556,   51,  556,  557,   47,   32,   31,    8,  557,
      557,    7,  557,  557,  557,  557,  557,  557,  558,    2,
        1,  558,    0,    0,    0,    0,    0,  558,  558,    0,
      558,  559,  559,    0,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  560,  560,    0,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  561,

        0,  561,  561,    0,  561,  562,  562,    0,  562,  562,
        0,  562,  563,    0,    0,    0,    0,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  564,    0,    0,    0,
        0,    0,  564,  564,    0,  564,  565,  565,    0,  565,
        0,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      566,  566,    0,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  567,    0,  567,  567,    0,  567,
      568,    0,  568,  568,    0,  568,  569,  569,    0,    0,
      569,  569,  569,  569,  569,  569,  569,  569,    0,  569,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  571,  571,    0,    0,  571,  571,
      571,  571,  571,  571,  571,  571,    0,  571,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  573,  573,  573,    0,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  574,    0,    0,    0,
        0,    0,  574,  574,    0,  574,  574,    0,  574,  575,
        0,    0,    0,    0,  575,    0,  575,    0,  575,  575,
        0,  575,  576,    0,    0,    0,    0,    0,  576,  576,
        0,  576,  576,    0,  576,  577,    0,    0,    0,  577,
      577,    0,  577,  577,  577,  577,    0,  577,  578,  578,

        0,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  579,  579,    0,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  580,  580,  580,  580,
        0,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      581,    0,    0,    0,    0,    0,    0,    0,    0,  581,
      581,    0,  581,  582,    0,    0,    0,  582,  582,    0,
      582,  582,  582,  582,    0,  582,  583,  583,  583,  583,
      583,  583,  583,  583,  583,    0,  583,  583,  583,  583,
      584,    0,    0,    0,    0,    0,    0,    0,    0,  584,
      584,    0,  584,  585,    0,    0,    0,  585,  585,    0,

      585,  585,  585,  585,    0,  585,  586,    0,    0,    0,
      586,  586,    0,  586,  586,  586,  586,    0,  586,  587,
      587,  587,  587,  587,  587,  587,  587,  587,    0,  587,
      587,  587,  587,  588,  588,    0,    0,    0,  588,  588,
        0,  588,  588,    0,    0,  588,  588,  589,  589,    0,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  590,  590,  590,  590,    0,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  591,    0,  591,  591,    0,
      591,  592,    0,    0,    0,  592,  592,  592,  592,  592,
      592,  592,  592,    0,  592,  593,  593,    0,  593,    0,

      593,  593,  593,  593,  593,  593,  593,  593,  593,  594,
        0,  594,  594,    0,  594,  595,  595,    0,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  596,
        0,  596,  596,    0,  596,  597,    0,    0,    0,    0,
      597,  597,    0,  597,  597,  597,  597,  597,  597,  598,
        0,    0,  598,    0,    0,    0,    0,    0,  598,  598,
        0,  598,  599,    0,    0,    0,    0,    0,    0,  599,
        0,  599,  599,    0,  599,  600,  600,    0,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,

      601,  601,  601,  602,  602,    0,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  603,    0,  603,
      603,    0,  603,  604,  604,    0,  604,  605,  605,    0,
      605,  605,    0,  605,  606,    0,    0,    0,    0,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  607,    0,
        0,    0,    0,    0,    0,  607,    0,  607,  607,    0,
      607,  608,  608,    0,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  609,  609,    0,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  611,
        0,  611,  611,    0,  611,  612,    0,  612,  612,    0,

      612,  613,  613,    0,    0,  613,  613,  613,  613,  613,
      613,  613,  613,    0,  613,  614,  614,    0,    0,  614,
      614,  614,  614,  614,  614,  614,  614,    0,  614,  615,
      615,  615,    0,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  616,    0,    0,    0,    0,    0,    0,
        0,    0,  616,  616,    0,  616,  617,    0,    0,    0,
        0,    0,  617,  617,    0,  617,  617,    0,  617,  618,
        0,    0,    0,    0,  618,    0,  618,    0,  618,  618,
        0,  618,  619,    0,    0,    0,    0,    0,    0,    0,
        0,  619,  619,    0,  619,  620,    0,    0,    0,    0,

        0,  620,  620,    0,  620,  620,    0,  620,  621,    0,
        0,    0,  621,  621,    0,  621,  621,  621,  621,    0,
      621,  622,  622,    0,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  623,  623,    0,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  624,
        0,    0,    0,    0,    0,    0,    0,    0,  624,  624,
        0,  624,  625,    0,    0,    0,  625,  625,    0,  625,
      625,  625,  625,    0,  625,  626,    0,    0,    0,  626,
      626,    0,  626,  626,  626,  626,    0,  626,  627,    0,
        0,    0,  627,  627,    0,  627,  627,  627,  627,    0,

      627,  628,    0,    0,    0,  628,  628,    0,  628,  628,
      628,  628,    0,  628,  629,  629,    0,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  630,  630,
        0,  630,  630,    0,  630,  631,  631,    0,  631,  631,
        0,  631,  632,  632,  632,  632,    0,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  633,    0,    0,    0,
        0,    0,  633,  633,    0,  633,  633,    0,  633,  634,
        0,    0,    0,    0,    0,  634,  634,    0,  634,  634,
        0,  634,  635,  635,    0,  635,  636,    0,    0,    0,
        0,    0,    0,  636,  636,  636,  636,    0,  636,  637,

      637,    0,  637,  638,    0,    0,    0,    0,    0,    0,
      638,  638,  638,  638,    0,  638,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531
    } ;

extern int parse_py_YY_flex_debug;
int parse_py_YY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *parse_py_YYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2016 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <QFile>
#include <QFileInfo>
#include <QHash>
#include <QRegExp>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>
#include <unistd.h>

#include <arguments.h>
#include <commentscan.h>
#include <config.h>
#include <doxy_globals.h>
#include <default_args.h>
#include <entry.h>
#include <language.h>
#include <message.h>
#include <parse_py.h>
#include <util.h>

#define DBG_CTX(...)     do { } while(0)

#define YY_NO_INPUT 1
#define YY_NEVER_INTERACTIVE 1

static ParserInterface *s_thisParser;
static QString          s_inputString;
static int		         s_inputPosition;
static QFile            s_inputFile;

static Protection	protection;

static QSharedPointer<Entry> current_root;
static QSharedPointer<Entry> current;
static QSharedPointer<Entry> previous;
static QSharedPointer<Entry> bodyEntry;

static int		         yyLineNr = 1;
static QString 		   yyFileName;
static MethodTypes    	mtype;
static bool       		gstat;
static Specifier       	virt;

static int              docBlockContext;
static QString          docBlock;
static bool             docBlockInBody;
static bool             isJavaDocStyle;
static bool             docBrief;
static bool             docBlockSpecial;

static bool             g_doubleQuote;
static bool             g_specialBlock;
static int              g_stringContext;
static QString         *g_copyString;
static int              g_indent    = 0;
static int              g_curIndent = 0;

static QHash<QString, QString *>  g_packageNameCache;

static char             g_atomStart;
static char             g_atomEnd;
static int              g_atomCount;

static QString          g_moduleScope;
static QString          g_packageName;
static QString          g_defVal;

static int              g_braceCount;

static bool             g_lexInit = false;
static bool             g_packageCommentAllowed;

static bool             g_start_init = false;
static int              g_search_count = 0;

static void initParser()
{
   protection = Public;
   mtype = Method;
   gstat = false;
   virt  = Normal;

   previous = QSharedPointer<Entry>();
   g_packageCommentAllowed = true;
}

static void initEntry()
{
   current->protection = protection ;
   current->mtype      = mtype;
   current->virt       = virt;
   current->stat       = gstat;
   current->lang       = SrcLangExt_Python;

   current->setParent(current_root);

   initGroupInfo(current);
   gstat = false;
}

static void newEntry()
{
   previous = current;
   current_root->addSubEntry(current, current_root);

   current = QMakeShared<Entry>();
   initEntry();
}

static void newVariable()
{
   if (!current->name.isEmpty() && current->name.at(0) == '_') {
      // mark as private
      current->protection = Private;
   }

   if (current_root->section & Entry::COMPOUND_MASK) {
      // mark as class variable
      current->stat = true;
   }

   newEntry();
}

static void newFunction()
{
   if (current->name.left(2) == "__" && current->name.right(2) == "__") {
      // special method name
      // refere to http://docs.python.org/ref/specialnames.html
      current->protection = Public;

   } else if (current->name.at(0) == '_') {
      current->protection = Private;

   }
}

static inline int computeIndent(const QString &str)
{
   static int tabSize = Config::getInt("tab-size");
   int col = 0;

   for (auto c : str)  {

      if (c == ' ') {
         col++;

      } else if (c == '\t') {
         col += tabSize - (col % tabSize);

      } else {
         break;
      }
   }

   return col;
}

static QString findPackageScopeFromPath(const QString &path)
{
   QString *pScope = g_packageNameCache.value(path);

   if (pScope) {
      return *pScope;
   }

   QFileInfo pf(path + "/__init__.py"); // found package initialization file

   if (pf.exists()) {
      int i = path.lastIndexOf('/');

      if (i != -1) {
         QString scope = findPackageScopeFromPath(path.left(i));

         if (! scope.isEmpty()) {
            scope += "::";
         }

         scope += path.mid(i + 1);
         g_packageNameCache.insert(path, new QString(scope));
         return scope;
      }
   }

   return "";
}

static QString findPackageScope(const QString &fileName)
{
   if (! fileName.isEmpty()) {
      return "";
   }

   QFileInfo fi(fileName);

   return findPackageScopeFromPath(fi.absolutePath());
}

static void lineCount()
{
   DBG_CTX((stderr, "yyLineNr = %d\n", yyLineNr));

   for (const char *p = parse_py_YYtext; *p; ++p) {
      yyLineNr += (*p == '\n') ;
   }
}

static void incLineNr()
{
   DBG_CTX((stderr, "yyLineNr = %d\n", yyLineNr));
   yyLineNr++;
}

static void startCommentBlock(bool brief)
{
   if (brief) {
      current->briefFile = yyFileName;
      current->briefLine = yyLineNr;
   } else {
      current->docFile = yyFileName;
      current->docLine = yyLineNr;
   }
}

static void handleCommentBlock(const QString &doc, bool isBrief)
{
   // TODO: Fix this
   docBlockInBody = false;

   if (docBlockInBody && previous && ! previous->doc.isEmpty()) {
      previous->doc = previous->doc.trimmed() + "\n\n";
   }

   bool needsEntry;
   int position = 0;
   int lineNr   = isBrief ? current->briefLine : current->docLine;

   while (parseCommentBlock(s_thisParser, (docBlockInBody && previous) ? previous : current,
             doc, yyFileName,
             lineNr,                                      // passed by reference
             docBlockInBody ? false : isBrief, isJavaDocStyle, docBlockInBody,
             protection, position, needsEntry)) {         // last 3 are passed by reference

      if (needsEntry) {
         newEntry();
      }
   }

   if (needsEntry) {
      newEntry();
   }

}

static void endOfDef(int correction = 0)
{
   if (bodyEntry) {
      bodyEntry->endBodyLine  = yyLineNr - correction;
      bodyEntry = QSharedPointer<Entry>();
   }

   newEntry();
}

static inline void addToString(const QString &s)
{
   if (g_copyString) {
      (*g_copyString) += s;
   }
}

static void initTriDoubleQuoteBlock()
{
   docBlockContext = YY_START;
   docBlockInBody  = false;
   isJavaDocStyle  = false;

   QString text = QString::fromUtf8(parse_py_YYtext);
   docBlockSpecial = text.endsWith('!');

   docBlock.resize(0);
   g_doubleQuote = true;
   startCommentBlock(false);
}

static void initTriSingleQuoteBlock()
{
   docBlockContext = YY_START;
   docBlockInBody  = false;
   isJavaDocStyle  = false;

   QString text = QString::fromUtf8(parse_py_YYtext);
   docBlockSpecial = text.endsWith('!');

   docBlock.resize(0);
   g_doubleQuote = false;
   startCommentBlock(false);
}

static void initSpecialBlock()
{
   docBlockContext  = YY_START;
   docBlockInBody   = false;
   isJavaDocStyle   = true;
   docBrief         = true;

   docBlock.resize(0);
   startCommentBlock(true);
}

static void searchFoundDef()
{
   current->fileName  = yyFileName;
   current->startLine = yyLineNr;
   current->bodyLine  = yyLineNr;
   current->section   = Entry::FUNCTION_SEC;

   current->lang = SrcLangExt_Python;
   current->virt = Normal;
   current->stat = gstat;
   current->mtype = mtype = Method;
   current->type.resize(0);
   current->name.resize(0);
   current->args.resize(0);

   current->argList.clear();

   g_packageCommentAllowed = false;
   gstat = false;
}

static void searchFoundClass()
{
   current->section = Entry::CLASS_SEC;
   current->argList.clear();
   current->type += "class" ;

   current->fileName  = yyFileName;
   current->startLine  = yyLineNr;
   current->bodyLine  = yyLineNr;
   g_packageCommentAllowed = false;
}

#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int c = 0;

   while (s_inputString[s_inputPosition] != 0) {

      QString tmp1    = s_inputString.at(s_inputPosition);
      QByteArray tmp2 = tmp1.toUtf8();

      if (c + tmp2.length() >= max_size)  {
         // buffer is full
         break;
      }

      c += tmp2.length();

      for (auto letters : tmp2) {
         *buf = letters;
          buf++;
      }

      s_inputPosition++;
   }

   return c;
}

/* start command character */
/* Main start state */

/* Mid-comment states */
/* %x FuncDoubleComment */
/* %x ClassDoubleComment */

/* Function states */

/* Class states */

/* Variable states */

/* String states */

/* import */

#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define TryClassDocString 3
#define TripleComment 4
#define SpecialComment 5
#define FunctionDec 6
#define FunctionParams 7
#define FunctionBody 8
#define FunctionParamDefVal 9
#define ClassDec 10
#define ClassInheritance 11
#define ClassCaptureIndent 12
#define ClassBody 13
#define VariableDec 14
#define VariableEnd 15
#define VariableAtom 16
#define SingleQuoteString 17
#define DoubleQuoteString 18
#define TripleString 19
#define FromMod 20
#define FromModItem 21
#define Import 22

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int parse_py_YYlex_destroy (void );

int parse_py_YYget_debug (void );

void parse_py_YYset_debug (int debug_flag  );

YY_EXTRA_TYPE parse_py_YYget_extra (void );

void parse_py_YYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *parse_py_YYget_in (void );

void parse_py_YYset_in  (FILE * in_str  );

FILE *parse_py_YYget_out (void );

void parse_py_YYset_out  (FILE * out_str  );

int parse_py_YYget_leng (void );

char *parse_py_YYget_text (void );

int parse_py_YYget_lineno (void );

void parse_py_YYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int parse_py_YYwrap (void );
#else
extern int parse_py_YYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( parse_py_YYtext, parse_py_YYleng, 1, parse_py_YYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( parse_py_YYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( parse_py_YYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, parse_py_YYin))==0 && ferror(parse_py_YYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(parse_py_YYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int parse_py_YYlex (void);

#define YY_DECL int parse_py_YYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after parse_py_YYtext and parse_py_YYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( parse_py_YYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(parse_py_YYtext[parse_py_YYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)parse_py_YYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in parse_py_YYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! parse_py_YYin )
			parse_py_YYin = stdin;

		if ( ! parse_py_YYout )
			parse_py_YYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			parse_py_YYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE );
		}

		parse_py_YY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of parse_py_YYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 532 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2817 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
{
      // start of a function/method definition with indent
      DBG_CTX((stderr, "Found def at %d\n", yyLineNr));

      QString text = QString::fromUtf8(parse_py_YYtext);

      g_indent = computeIndent(text);
      searchFoundDef();
      BEGIN( FunctionDec );
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      // start of a function/method definition
      searchFoundDef();
      BEGIN( FunctionDec );
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      // start of a class definition with indent
      DBG_CTX((stderr,"Found class at %d\n",yyLineNr));

      QString text = QString::fromUtf8(parse_py_YYtext);

      g_indent = computeIndent(text);
      searchFoundClass();
      BEGIN( ClassDec ) ;
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // start of a class definition
     searchFoundClass();
     BEGIN( ClassDec ) ;
   }
	YY_BREAK
case 5:
case 6:
YY_RULE_SETUP
{

      // start of an from import
      g_packageCommentAllowed = false;
      BEGIN( FromMod );
   }
	YY_BREAK
case 7:
case 8:
YY_RULE_SETUP
{

      // start of an import statement
      g_packageCommentAllowed = false;
      BEGIN( Import );
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      // property
      QString text = QString::fromUtf8(parse_py_YYtext);

      current->section   = Entry::VARIABLE_SEC;
      current->mtype     = Property;
      current->name      = text.trimmed();
      current->fileName  = yyFileName;
      current->startLine = yyLineNr;
      current->bodyLine  = yyLineNr;
      g_packageCommentAllowed = false;

      BEGIN(VariableDec);
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
      // variable
      if (g_search_count) {
         REJECT;
      }

      QString text = QString::fromUtf8(parse_py_YYtext);

      g_indent = computeIndent(parse_py_YYtext);
      current->section   = Entry::VARIABLE_SEC;
      current->name      = text.trimmed();
      current->fileName  = yyFileName;
      current->startLine = yyLineNr;
      current->bodyLine  = yyLineNr;
      g_packageCommentAllowed = false;

      BEGIN(VariableDec);
   }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
{
      // list of variables, can not place the default value so we will skip it later on in a general rule
      // Also note ")" this is to catch also (a,b). the "("
      // is caught in the rule: [(], the ")" will be handled in [)]

      if (g_search_count > 1) {
         REJECT;
      }

      QString text = QString::fromUtf8(parse_py_YYtext);
      g_indent = computeIndent(text);

      current->section   = Entry::VARIABLE_SEC;
      current->name      = text.trimmed();
      current->fileName  = yyFileName;
      current->startLine = yyLineNr;
      current->bodyLine  = yyLineNr;

      g_packageCommentAllowed = false;
      newVariable();
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      // start of a single quoted string
      g_stringContext = YY_START;
      g_copyString    = 0;
      g_packageCommentAllowed = false;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      // start of a double quoted string
      g_stringContext = YY_START;
      g_copyString    = 0;
      g_packageCommentAllowed = false;
      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      gstat = true;
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      // Unix type script comment
      if (yyLineNr != 1)   {
         REJECT;
      }
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      // normal comment
      g_packageCommentAllowed = false;
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      // some other identifier
      g_packageCommentAllowed = false;
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      g_curIndent  = computeIndent(text);
   }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{
      // new line
      lineCount();
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      // start of a comment block
      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      // start of a comment block
      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // start of a special comment
      QString text = QString::fromUtf8(parse_py_YYtext);
      g_curIndent  = computeIndent(text);

      g_packageCommentAllowed = false;
      initSpecialBlock();
      BEGIN(SpecialComment);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      // we have to do something with (
      g_search_count += 1;
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      // we have to do something with )
      g_search_count -= 1;
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      // any other character...this is the major default
      // that should catch everything else in Body
   }
	YY_BREAK

case 26:
YY_RULE_SETUP
{
      // python3 style imports
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      // from package import
      QString text = QString::fromUtf8(parse_py_YYtext);
      g_packageName = text;
   }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
      BEGIN(FromModItem);
   }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      BEGIN(Search);
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      unput(*parse_py_YYtext);
      BEGIN(Search);
   }
	YY_BREAK

case 32:
YY_RULE_SETUP
{
      // import all
      QString item      = g_packageName;
      current->name     = removeRedundantWhiteSpace(substitute(item,".","::"));
      current->fileName = yyFileName;
      current->section  = Entry::USINGDIR_SEC;
      current_root->addSubEntry(current, current_root);

      current = QMakeShared<Entry>();
      initEntry();
      BEGIN(Search);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      QString item = g_packageName+"." + text;

      current->name = removeRedundantWhiteSpace(substitute(item,".","::"));
      current->fileName = yyFileName;

      current->section  = Entry::USINGDECL_SEC;
      current_root->addSubEntry(current, current_root);

      current = QMakeShared<Entry>();
      initEntry();
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(parse_py_YYtext);
      QString item  = g_packageName+"." + text;

      current->name = removeRedundantWhiteSpace(substitute(item,".","::"));
      current->fileName = yyFileName;

      current->section  = Entry::USINGDECL_SEC;
      current_root->addSubEntry(current, current_root);

      current = QMakeShared<Entry>();
      initEntry();
      BEGIN(Search);
   }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      BEGIN(Search);
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      unput(*parse_py_YYtext);
      BEGIN(Search);
   }
	YY_BREAK

case 39:
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(parse_py_YYtext);
      current->name = removeRedundantWhiteSpace(substitute(text,".","::"));

      current->fileName = yyFileName;
      current->section  = Entry::USINGDECL_SEC;
      current_root->addSubEntry(current, current_root);

      current = QMakeShared<Entry>();
      initEntry();
      BEGIN(Search);
   }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      BEGIN(Search);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      unput(*parse_py_YYtext);
      BEGIN(Search);
   }
	YY_BREAK

case 43:
YY_RULE_SETUP
{
         QString text = QString::fromUtf8(parse_py_YYtext);

         DBG_CTX((stderr,"Found instance method variable %s in %s at %d\n", csPrintable(text.mid(5)), csPrintable(current_root->name), yyLineNr));

         current->name      = text.mid(5);
         current->section   = Entry::VARIABLE_SEC;
         current->fileName  = yyFileName;
         current->startLine = yyLineNr;
         current->bodyLine  = yyLineNr;
         current->type.resize(0);

         if (current->name.at(0) == '_') {
            // mark as private
            current->protection = Private;
         }

         newEntry();
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      DBG_CTX(stderr, "Found class method variable %s in %s at%d\n",
                  csPrintable(text.mid(4)), csPrintable(current_root->name), yyLineNr);

      current->name      = text.mid(4);
      current->section   = Entry::VARIABLE_SEC;
      current->fileName  = yyFileName;
      current->startLine = yyLineNr;
      current->bodyLine  = yyLineNr;
      current->type.resize(0);

      if (current->name.at(0)=='_') {
         // mark as private
         current->protection = Private;
      }

   newEntry();
                      }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      // start of a comment block
      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      // start of a comment block
      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // start of a special comment
      initSpecialBlock();
      BEGIN(SpecialComment);
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      // #
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      // start of a single quoted string
      g_stringContext = YY_START;
      g_copyString    = 0;
      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // start of a double quoted string
      g_stringContext = YY_START;
      g_copyString    = 0;
      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{
      incLineNr();
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      // identifiers
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      // other uninteresting stuff
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // anything else
   }
	YY_BREAK

case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
      DBG_CTX((stderr, "indent %d <= %d\n", computeIndent(text.mid(1)), g_indent));

      QString text = QString::fromUtf8(parse_py_YYtext);

      if (computeIndent(text.mid(1)) <= g_indent)  {

         for (int i = parse_py_YYleng - 1; i >= 0; i--) {
            unput(parse_py_YYtext[i]);
         }

         endOfDef();
         BEGIN(Search);

      } else {
         incLineNr();
         current->m_program += text;
      }
   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (computeIndent(text.mid(1)) <= g_indent)  {

         for (int i = parse_py_YYleng - 1; i >= 0; i--) {
           unput(parse_py_YYtext[i]);
         }

         endOfDef();
         BEGIN(Search);

      } else {
         incLineNr();
         current->m_program += text;
      }
   }
	YY_BREAK
case YY_STATE_EOF(FunctionBody):
{
         endOfDef();
         yyterminate();
   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // skip empty line
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;
   }
	YY_BREAK
case 58:
YY_RULE_SETUP
{
      // something at indent >0
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;

      g_curIndent = computeIndent(text);

      if (g_curIndent <= g_indent) {
         // jumped out of the function
         endOfDef(1);
         BEGIN(Search);
      }
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      // start of a single quoted string
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;

      g_stringContext    = YY_START;
      g_specialBlock     = false;

      g_copyString = &current->m_program;
      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
      // start of a double quoted string
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;

      g_stringContext = YY_START;
      g_specialBlock  = false;

      g_copyString = &current->m_program;
      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 61:
YY_RULE_SETUP
{
      // non-special stuff
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;
      g_specialBlock = false;
   }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
      // normal comment
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;
   }
	YY_BREAK
case 63:
YY_RULE_SETUP
{
      // comment half way
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;
   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      incLineNr();
      current->m_program += text;
   }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
      // any character
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text[0];
      g_specialBlock = false;
   }
	YY_BREAK
case 66:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;
      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 67:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;
      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // start of a special comment
      initSpecialBlock();
      BEGIN(SpecialComment);
   }
	YY_BREAK

case 69:
YY_RULE_SETUP
{
      //found function name
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (current->type.isEmpty())  {
         current->type = "def";
      }

      current->name = text;
      current->name = current->name.trimmed();
      newFunction();
   }
	YY_BREAK
case 70:
YY_RULE_SETUP
{
      // function without arguments
      g_specialBlock = true; // expecting a docstring
      bodyEntry = current;
      current->bodyLine  = yyLineNr;
      BEGIN( FunctionBody );
   }
	YY_BREAK
case 71:
YY_RULE_SETUP
{
      BEGIN( FunctionParams );
   }
	YY_BREAK

case 72:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      // Name of parameter
      QString text = QString::fromUtf8(parse_py_YYtext);
      lineCount();

      current->argList.append( Argument() );
      current->argList.last().name = text.trimmed();
      current->argList.last().type = "";
   }
	YY_BREAK
case 74:
YY_RULE_SETUP
{
      // default value

      // TODO: this rule is too simple, need to be able to
      // match things like =")" as well

      g_defVal.resize(0);
      g_braceCount = 0;
      BEGIN(FunctionParamDefVal);
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      // end of parameter list
      current->args = argListToString(current->argList);
   }
	YY_BREAK
case 76:
YY_RULE_SETUP
{
      g_specialBlock    = true; // expecting a docstring
      bodyEntry         = current;
      current->bodyLine = yyLineNr;
      BEGIN( FunctionBody );
   }
	YY_BREAK
case 77:
YY_RULE_SETUP
{
      // a comment
   }
	YY_BREAK
case 78:
YY_RULE_SETUP
{
      // default rule inside arguments
   }
	YY_BREAK

case 79:
YY_RULE_SETUP
{
      // internal opening brace
      QString text = QString::fromUtf8(parse_py_YYtext);
      g_braceCount++;
      g_defVal += text[0];
   }
	YY_BREAK
case 80:
case 81:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (g_braceCount == 0)   {
         // end of default argument

         if (current->argList.isEmpty()) {
            current->argList.last().defval = g_defVal.trimmed();
         }

          if (text[0] == ')') {
             current->args = argListToString(current->argList);
          }

          BEGIN(FunctionParams);

      }  else  {
         // continue

         if (text[0] == ')') {
            g_braceCount--;
         }

         g_defVal += text[0];
      }
   }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      g_defVal += text[0];
   }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      g_defVal += text[0];
      incLineNr();
   }
	YY_BREAK

case 84:
/* rule 84 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // new def at indent 0
      incLineNr();
      endOfDef();
      BEGIN(Search);
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // start of a special comment at indent 0
      incLineNr();
      endOfDef();
      BEGIN(Search);
   }
	YY_BREAK
case 86:
/* rule 86 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // skip empty line
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;
   }
	YY_BREAK
case YY_STATE_EOF(ClassBody):
{
         endOfDef();
         yyterminate();
   }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      // something at indent >0
      QString text = QString::fromUtf8(parse_py_YYtext);
      g_curIndent  = computeIndent(text);

      DBG_CTX((stderr,"g_curIndent = %d g_indent = %d\n", g_curIndent, g_indent));

      if (g_curIndent<=g_indent)  {
         // jumped out of the class/method

         endOfDef(1);
         g_indent = g_curIndent;
         BEGIN(Search);

      } else {
         current->m_program += text;
         }
                  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      // start of a single quoted string
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text[0];

      g_stringContext = YY_START;
      g_specialBlock  = false;
      g_copyString    = &current->m_program;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
      // start of a double quoted string
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text[0];

      g_stringContext = YY_START;
      g_specialBlock  = false;
      g_copyString    = &current->m_program;
      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      // non-special stuff
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;
      g_specialBlock = false;
   }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text[0];
      incLineNr();
   }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      // normal comment
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;
   }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
      // any character
      QString text = QString::fromUtf8(parse_py_YYtext);
      g_specialBlock = false;
      current->m_program += text[0];
   }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;

      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;

      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK

case 96:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (current->type.isEmpty())  {
         current->type = "class";
      }

      current->section = Entry::CLASS_SEC;
      current->name = text;

      // prepend scope in case of nested classes
      if (current_root->section&Entry::SCOPE_MASK) {
         current->name.prepend(current_root->name+"::");
      }

      current->name     = current->name.trimmed();
      current->fileName = yyFileName;
      docBlockContext   = YY_START;
      docBlockInBody    = false;
      isJavaDocStyle    = false;

      docBlock.resize(0);
      BEGIN(ClassInheritance);
   }
	YY_BREAK

case 97:
YY_RULE_SETUP
{
      // syntactic sugar for the list
   }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
      // begin of the class definition
      g_specialBlock = true; // expecting a docstring
      current->bodyLine  = yyLineNr;
      current->m_program.resize(0);
      BEGIN(ClassCaptureIndent);
   }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->extends.append(BaseInfo(substitute(text,".","::"), Public, Normal));
      //Has base class-do stuff
   }
	YY_BREAK

case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{
      // Blankline - ignore, keep looking for indentation.
      QString text = QString::fromUtf8(parse_py_YYtext);
      lineCount();
      current->m_program += text;
   }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);

      initTriDoubleQuoteBlock();
      current->m_program += text;
      BEGIN(TripleComment);
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);

      initTriSingleQuoteBlock();
      current->m_program += text;
      BEGIN(TripleComment);
   }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->m_program += text;

      g_curIndent = computeIndent(text);
      bodyEntry   = current;

      DBG_CTX((stderr,"setting indent %d\n",g_curIndent));

      BEGIN(ClassBody);
   }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
      // Just pushback an empty class, and resume parsing the body
      QString text = QString::fromUtf8(parse_py_YYtext);
      newEntry();
      current->m_program += text;

      BEGIN( Search );
   }
	YY_BREAK

case 105:
YY_RULE_SETUP
{
      // the assignment operator
      QString text = QString::fromUtf8(parse_py_YYtext);
      g_start_init = true;
      current->initializer = text;
      current->initializer += " ";
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
      // spaces
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->initializer += text;
   }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
      // integer value
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->type.isEmpty()) {
         current->type = "int";
      }

      current->initializer += text;      
   }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
      // floating point value
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->type.isEmpty()) {
         current->type = "float";
      }

      current->initializer += text;
   }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
      // boolean value
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->type.isEmpty()) {
         current->type = "bool";
      }

      current->initializer += text;      
   }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
      // string
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->type.isEmpty()) {
         current->type = "string";
      }

      current->initializer += text;
      g_copyString = &current->initializer;
      g_stringContext = VariableDec;
      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
      // string
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->type.isEmpty()) {
         current->type = "string";
      }

      current->initializer += text;
      g_copyString    = &current->initializer;
      g_stringContext = VariableDec;
      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
      // start of a comment block
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->type.isEmpty()) {
         current->type = "string";
      }

      current->initializer += text;
      g_doubleQuote   = true;
      g_copyString    = &current->initializer;
      g_stringContext = VariableDec;
      BEGIN(TripleString);
   }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      // start of a comment block
      QString text  = QString::fromUtf8(parse_py_YYtext);
      
      if (current->type.isEmpty()) {
         current->type = "string";
      }

      current->initializer += text;
      g_doubleQuote   = false;
      g_copyString    = &current->initializer;
      g_stringContext = VariableDec;
      BEGIN(TripleString);
   }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
      // tuple, only when direct after =
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (current->mtype != Property && g_start_init) {
         current->type = "tuple";
      }

      current->initializer += text[0];
      g_atomStart = '(';
      g_atomEnd   = ')';
      g_atomCount = 1;
      BEGIN( VariableAtom );
   }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
      // list
      QString text = QString::fromUtf8(parse_py_YYtext);
      if (g_start_init) {
         current->type = "list";
      }

      current->initializer += text[0];
      g_atomStart = '[';
      g_atomEnd   = ']';
      g_atomCount = 1;
      BEGIN( VariableAtom );
   }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
      // dictionary
      QString text = QString::fromUtf8(parse_py_YYtext);
      if (g_start_init) current->type = "dictionary";

      current->initializer += text[0];
      g_atomStart = '{';
      g_atomEnd   = '}';
      g_atomCount = 1;
      BEGIN( VariableAtom );
   }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
      // comment
      BEGIN( VariableEnd );
   }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      // do something based on the type of the IDENTIFIER
      if (current->type.isEmpty()) {
       
         for (auto child : current_root->children() )  {

            if (child->name == text) {
               current->type = child->type;
               break;
            }
         }
      }

      g_start_init = false;
      current->initializer += text;
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      g_start_init = false;
      current->initializer += text[0];
   }
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
{
      unput('\n');
      BEGIN( VariableEnd );
   }
	YY_BREAK

case 121:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->initializer += text[0];

      if (g_atomStart == text[0]) {
         g_atomCount++;
      }
   }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->initializer += text[0];

      if (g_atomEnd == text[0]) {
         g_atomCount--;
      }

      if (g_atomCount == 0) {
      g_start_init = false;
      BEGIN(VariableDec);
      }
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      g_specialBlock = false;
      current->m_program += text;
      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
                        g_specialBlock = false;
         current->m_program += text;
         initTriSingleQuoteBlock();
         BEGIN(TripleComment);
   }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
      g_stringContext = YY_START;
      current->initializer += "'";
      g_copyString = &current->initializer;
      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
      g_stringContext=YY_START;
      current->initializer += "\"";
      g_copyString = &current->initializer;
      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->initializer += text;
   }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->initializer += text[0];
   }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->initializer += text[0];
      incLineNr();
   }
	YY_BREAK

case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      newVariable();
      BEGIN(Search);
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      unput(*parse_py_YYtext);
      newVariable();
      BEGIN(Search);
   }
	YY_BREAK
case YY_STATE_EOF(VariableEnd):
{
      yyterminate();
      newEntry();
   }
	YY_BREAK

case 132:
case 133:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (g_doubleQuote == (text[0] == '"'))  {

         if (g_specialBlock) {
            // expecting a docstring
            QString actualDoc = docBlock;

            if (! docBlockSpecial) {
               // legacy unformatted docstring

               actualDoc.prepend("\\verbatim ");
               actualDoc.append("\\endverbatim ");
            }

            handleCommentBlock(actualDoc, false);

         } else if (g_packageCommentAllowed) {
            // expecting module docs
            QString actualDoc = docBlock;

            if (! docBlockSpecial) {
               // legacy unformatted docstring

               actualDoc.prepend("\\verbatim ");
               actualDoc.append("\\endverbatim ");
            }

            actualDoc.prepend("\\namespace " + g_moduleScope + "\\_linebr ");
            handleCommentBlock(actualDoc, false);
         }

         if ((docBlockContext == ClassBody) || docBlockContext == FunctionBody) {

            current->m_program += docBlock;
            current->m_program += text;
         }

         BEGIN(docBlockContext);

      } else  {
         docBlock += text;

      }

      g_packageCommentAllowed = false;
   }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
      // leading whitespace
      QString text = QString::fromUtf8(parse_py_YYtext);
      int indent   = computeIndent(text);

      if (indent >= g_curIndent) {
         // strip g_curIndent amount of whitespace

         for (int i= 0; i<indent - g_curIndent; i++) {
            docBlock+=' ';
         }

         DBG_CTX((stderr,"stripping indent %d\n",g_curIndent));

      } else {
         DBG_CTX((stderr,"not stripping: %d<%d\n",indent,g_curIndent));
         docBlock += text;

      }
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text;
   }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      incLineNr();
      docBlock += text;
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
      // escaped char
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text;
   }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text;
   }
	YY_BREAK

case 139:
YY_RULE_SETUP
{
      // skip leading hashes
   }
	YY_BREAK
case 140:
/* rule 140 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // continuation of the comment on the next line
      docBlock  += '\n';
      docBrief  =  false;
      startCommentBlock(false);
      incLineNr();
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      // any other stuff
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text;
   }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{
      // new line that ends the comment
      handleCommentBlock(docBlock, docBrief);
      incLineNr();
      BEGIN(docBlockContext);
   }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      // anything we missed
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text[0];
   }
	YY_BREAK

case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
{
      // line continuation
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToString(text);
      incLineNr();
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
      // espaced char
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToString(text);
   }
	YY_BREAK
case 146:
YY_RULE_SETUP
{
      // tripple double quotes
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToString(text);
   }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
      // end of the string
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToString(parse_py_YYtext);
      BEGIN(g_stringContext);
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      // normal chars
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToString(text);
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      // normal char
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToString(text);
   }
	YY_BREAK

case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{
      // line continuation
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToString(text);
      incLineNr();
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
{
      // escaped char
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToString(text);
                               }
	YY_BREAK
case 152:
YY_RULE_SETUP
{
      // tripple single quotes
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToString(text);
   }
	YY_BREAK
case 153:
YY_RULE_SETUP
{
      // end of the string
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToString(text);
      BEGIN(g_stringContext);
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
{
      // normal chars
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToString(text);
   }
	YY_BREAK
case 155:
YY_RULE_SETUP
{
      // normal char
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToString(text);
   }
	YY_BREAK

case 156:
case 157:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      *g_copyString += text;

      if (g_doubleQuote == (text[0]=='"'))  {
         BEGIN(g_stringContext);
      }
   }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      lineCount();
      *g_copyString += text;
   }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      incLineNr();
      *g_copyString += text[0];
   }
	YY_BREAK
case 160:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      *g_copyString += text[0];
   }
	YY_BREAK

/* ------------ End rules -------------- */
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
{
      lineCount();
   }
	YY_BREAK
case 162:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 163:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Search):
			case YY_STATE_EOF(SearchMemVars):
			case YY_STATE_EOF(TryClassDocString):
			case YY_STATE_EOF(TripleComment):
			case YY_STATE_EOF(SpecialComment):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(FunctionParamDefVal):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(ClassCaptureIndent):
			case YY_STATE_EOF(VariableDec):
			case YY_STATE_EOF(VariableAtom):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
			case YY_STATE_EOF(FromMod):
			case YY_STATE_EOF(FromModItem):
			case YY_STATE_EOF(Import):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed parse_py_YYin at a new source and called
			 * parse_py_YYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = parse_py_YYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( parse_py_YYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * parse_py_YYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of parse_py_YYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			parse_py_YYrestart(parse_py_YYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) parse_py_YYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 532 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 532 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 531);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up parse_py_YYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					parse_py_YYrestart(parse_py_YYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( parse_py_YYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve parse_py_YYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void parse_py_YYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        parse_py_YYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE );
	}

	parse_py_YY_init_buffer(YY_CURRENT_BUFFER,input_file );
	parse_py_YY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void parse_py_YY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		parse_py_YYpop_buffer_state();
	 *		parse_py_YYpush_buffer_state(new_buffer);
     */
	parse_py_YYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	parse_py_YY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (parse_py_YYwrap()) processing, but the only time this flag
	 * is looked at is after parse_py_YYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void parse_py_YY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	parse_py_YYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE parse_py_YY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) parse_py_YYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in parse_py_YY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) parse_py_YYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in parse_py_YY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	parse_py_YY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with parse_py_YY_create_buffer()
 * 
 */
    void parse_py_YY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		parse_py_YYfree((void *) b->yy_ch_buf  );

	parse_py_YYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a parse_py_YYrestart() or at EOF.
 */
    static void parse_py_YY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	parse_py_YY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then parse_py_YY_init_buffer was _probably_
     * called from parse_py_YYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void parse_py_YY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		parse_py_YY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void parse_py_YYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	parse_py_YYensure_buffer_stack();

	/* This block is copied from parse_py_YY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from parse_py_YY_switch_to_buffer. */
	parse_py_YY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void parse_py_YYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	parse_py_YY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		parse_py_YY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void parse_py_YYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)parse_py_YYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in parse_py_YYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)parse_py_YYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in parse_py_YYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE parse_py_YY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) parse_py_YYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in parse_py_YY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	parse_py_YY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to parse_py_YYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       parse_py_YY_scan_bytes() instead.
 */
YY_BUFFER_STATE parse_py_YY_scan_string (yyconst char * yystr )
{
    
	return parse_py_YY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to parse_py_YYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE parse_py_YY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) parse_py_YYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in parse_py_YY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = parse_py_YY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in parse_py_YY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up parse_py_YYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		parse_py_YYtext[parse_py_YYleng] = (yy_hold_char); \
		(yy_c_buf_p) = parse_py_YYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		parse_py_YYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int parse_py_YYget_lineno  (void)
{
        
    return parse_py_YYlineno;
}

/** Get the input stream.
 * 
 */
FILE *parse_py_YYget_in  (void)
{
        return parse_py_YYin;
}

/** Get the output stream.
 * 
 */
FILE *parse_py_YYget_out  (void)
{
        return parse_py_YYout;
}

/** Get the length of the current token.
 * 
 */
int parse_py_YYget_leng  (void)
{
        return parse_py_YYleng;
}

/** Get the current token.
 * 
 */

char *parse_py_YYget_text  (void)
{
        return parse_py_YYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void parse_py_YYset_lineno (int  line_number )
{
    
    parse_py_YYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see parse_py_YY_switch_to_buffer
 */
void parse_py_YYset_in (FILE *  in_str )
{
        parse_py_YYin = in_str ;
}

void parse_py_YYset_out (FILE *  out_str )
{
        parse_py_YYout = out_str ;
}

int parse_py_YYget_debug  (void)
{
        return parse_py_YY_flex_debug;
}

void parse_py_YYset_debug (int  bdebug )
{
        parse_py_YY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from parse_py_YYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    parse_py_YYin = stdin;
    parse_py_YYout = stdout;
#else
    parse_py_YYin = (FILE *) 0;
    parse_py_YYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * parse_py_YYlex_init()
     */
    return 0;
}

/* parse_py_YYlex_destroy is for both reentrant and non-reentrant scanners. */
int parse_py_YYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		parse_py_YY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		parse_py_YYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	parse_py_YYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    parse_py_YYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * parse_py_YYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *parse_py_YYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *parse_py_YYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void parse_py_YYfree (void * ptr )
{
	free( (char *) ptr );	/* see parse_py_YYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static void parseCompounds(QSharedPointer<Entry> rt)
{
   for (auto ce : rt->children() ) {
      if (! ce->m_program.isEmpty()) {
         // init scanner state
         s_inputString   = ce->m_program;
         s_inputPosition = 0;

         parse_py_YYrestart(parse_py_YYin );

         if (ce->section & Entry::COMPOUND_MASK) {
            current_root = ce;
            BEGIN( Search );

         } else if (ce->parent()) {
            current_root = ce->parent();
            BEGIN( SearchMemVars );
         }

         yyFileName = ce->fileName;
         yyLineNr   = ce->bodyLine ;

         current = QMakeShared<Entry>();
         initEntry();

         groupEnterCompound(yyFileName, yyLineNr, ce->name);

         parse_py_YYlex() ;
         g_lexInit = true;

         current = QSharedPointer<Entry>();
         ce->m_program.resize(0);

         groupLeaveCompound(yyFileName, yyLineNr, ce->name);

      }
      parseCompounds(ce);
   }
}

static void parseMain(const QString &fileName, const QString &fileBuf, QSharedPointer<Entry> rt)
{
   initParser();

   s_inputString   = fileBuf;
   s_inputPosition = 0;

   protection      = Public;
   mtype           = Method;
   gstat           = false;
   virt            = Normal;

   current_root    = rt;
   g_specialBlock  = false;

   s_inputFile.setFileName(fileName);

   if (s_inputFile.open(QIODevice::ReadOnly)) {
      yyLineNr   = 1;
      yyFileName = fileName;

      //setContext();
      msg("Parsing file %s\n", csPrintable(yyFileName));

      QFileInfo fi(fileName);
      g_moduleScope = findPackageScope(fileName);

      QString baseName = fi.baseName();

      if (baseName != "__init__") { // package initializer file is not a package itself
         if (!g_moduleScope.isEmpty()) {
            g_moduleScope += "::";
         }
         g_moduleScope += baseName;
      }

      current            = QMakeShared<Entry>();
      initEntry();

      current->name      = g_moduleScope;
      current->section   = Entry::NAMESPACE_SEC;
      current->type      = "namespace";
      current->fileName  = yyFileName;
      current->startLine = yyLineNr;
      current->bodyLine  = yyLineNr;

      rt->addSubEntry(current, rt);

      current_root  = current;
      initParser();

      current = QMakeShared<Entry>();

      groupEnterFile(yyFileName, yyLineNr);

      current->reset();
      initEntry();
      parse_py_YYrestart(parse_py_YYin );

      BEGIN( Search );
      parse_py_YYlex();
      g_lexInit = true;

      groupLeaveFile(yyFileName, yyLineNr);

      current_root->m_program.resize(0);

      current = QSharedPointer<Entry>();
      parseCompounds(current_root);

      s_inputFile.close();
   }
}

static void parsePrototype(const QString &text)
{
   if (text.isEmpty()) {
      warn(yyFileName, yyLineNr, "Empty prototype found");
      return;
   }

   g_specialBlock = false;
   g_packageCommentAllowed = false;

   QString orgInputString;
   int orgInputPosition;
   YY_BUFFER_STATE orgState;

   // save scanner state
   orgState = YY_CURRENT_BUFFER;
   parse_py_YY_switch_to_buffer(parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE));
   orgInputString   = s_inputString;
   orgInputPosition = s_inputPosition;

   // set new string
   s_inputString   = text;
   s_inputPosition = 0;

   parse_py_YYrestart(parse_py_YYin );

   BEGIN( FunctionDec );

   parse_py_YYlex();
   g_lexInit = true;

   current->name = current->name.trimmed();
   if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty()) {
      current->section = Entry::VARIABLEDOC_SEC;
   }

   // restore original scanner state

   YY_BUFFER_STATE tmpBuf = YY_CURRENT_BUFFER;
   parse_py_YY_switch_to_buffer(orgState);
   parse_py_YY_delete_buffer(tmpBuf);

   s_inputString   = orgInputString;
   s_inputPosition = orgInputPosition;
}

void pyFreeParser()
{
   if (g_lexInit) {
      parse_py_YYlex_destroy();
   }
}

void PythonLanguageParser::parseInput(const QString &fileName, const QString &fileBuf,
                  QSharedPointer<Entry> root, enum ParserMode mode, QStringList &includedFiles, bool useClang)
{
   s_thisParser = this;

   printlex(parse_py_YY_flex_debug, true, __FILE__, fileName);
   ::parseMain(fileName, fileBuf, root);
   printlex(parse_py_YY_flex_debug, false, __FILE__, fileName);
}

bool PythonLanguageParser::needsPreprocessing(const QString &)
{
  return false;
}

void PythonLanguageParser::parseCode(CodeOutputInterface &codeOutIntf, const QString &scopeName,
                  const QString &input, SrcLangExt, bool isExampleBlock,
                  const QString &exampleName, QSharedPointer<FileDef> fileDef, int startLine,
                  int endLine, bool inlineFragment, QSharedPointer<MemberDef> memberDef,
                  bool showLineNumbers, QSharedPointer<Definition> searchCtx, bool collectXRefs )
{
   ::parsePythonCode(codeOutIntf, scopeName, input, isExampleBlock, exampleName,
                  fileDef, startLine, endLine, inlineFragment, memberDef,
                  showLineNumbers, searchCtx, collectXRefs);
}

void PythonLanguageParser::parsePrototype(const QString &text)
{
   ::parsePrototype(text);
}

void PythonLanguageParser::resetCodeParserState()
{
   ::resetPythonCodeParserState();
}

