/*************************************************************************
 *
 * Copyright (C) 2014-2018 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License version 2
 * is hereby granted. No representations are made about the suitability of
 * this software for any purpose. It is provided "as is" without express or
 * implied warranty. See the GNU General Public License for more details.
 *
 * Documents produced by DoxyPress are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer parse_py_YY_create_buffer
#define yy_delete_buffer parse_py_YY_delete_buffer
#define yy_flex_debug parse_py_YY_flex_debug
#define yy_init_buffer parse_py_YY_init_buffer
#define yy_flush_buffer parse_py_YY_flush_buffer
#define yy_load_buffer_state parse_py_YY_load_buffer_state
#define yy_switch_to_buffer parse_py_YY_switch_to_buffer
#define yyin parse_py_YYin
#define yyleng parse_py_YYleng
#define yylex parse_py_YYlex
#define yylineno parse_py_YYlineno
#define yyout parse_py_YYout
#define yyrestart parse_py_YYrestart
#define yytext parse_py_YYtext
#define yywrap parse_py_YYwrap
#define yyalloc parse_py_YYalloc
#define yyrealloc parse_py_YYrealloc
#define yyfree parse_py_YYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE parse_py_YYrestart(parse_py_YYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int parse_py_YYleng;

extern FILE *parse_py_YYin, *parse_py_YYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up parse_py_YYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via parse_py_YYrestart()), so that the user can continue scanning by
	 * just pointing parse_py_YYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when parse_py_YYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int parse_py_YYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow parse_py_YYwrap()'s to do buffer switches
 * instead of setting up a fresh parse_py_YYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void parse_py_YYrestart (FILE *input_file  );
void parse_py_YY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE parse_py_YY_create_buffer (FILE *file,int size  );
void parse_py_YY_delete_buffer (YY_BUFFER_STATE b  );
void parse_py_YY_flush_buffer (YY_BUFFER_STATE b  );
void parse_py_YYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void parse_py_YYpop_buffer_state (void );

static void parse_py_YYensure_buffer_stack (void );
static void parse_py_YY_load_buffer_state (void );
static void parse_py_YY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER parse_py_YY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE parse_py_YY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE parse_py_YY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE parse_py_YY_scan_bytes (yyconst char *bytes,int len  );

void *parse_py_YYalloc (yy_size_t  );
void *parse_py_YYrealloc (void *,yy_size_t  );
void parse_py_YYfree (void *  );

#define yy_new_buffer parse_py_YY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        parse_py_YYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        parse_py_YYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define parse_py_YYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *parse_py_YYin = (FILE *) 0, *parse_py_YYout = (FILE *) 0;

typedef int yy_state_type;

extern int parse_py_YYlineno;

int parse_py_YYlineno = 1;

extern char *parse_py_YYtext;
#define yytext_ptr parse_py_YYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up parse_py_YYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	parse_py_YYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 169
#define YY_END_OF_BUFFER 170
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1003] =
    {   0,
    16494,16494,  112,  112,   30,   30,   36,   36,   41,   41,
      170,  168,  169,  167,  169,   25,  168,  169,   25,  168,
      169,   19,  167,  169,   13,   25,  168,  169,   25,  168,
      169,   12,   25,  168,  169,   23,   25,  168,  169,   24,
       25,  168,  169,   25,  168,  169,   17,   25,  168,  169,
    16395,   17,   25,  168,  169,16395,   17,   25,  168,  169,
    16395,   17,   25,  168,  169,16395,   17,   25,  168,  169,
    16395,   17,   25,  168,  169,16395,   17,   25,  168,  169,
    16395,   17,   25,  168,  169,16395,   18,   25,  168,  169,
       17,   25,  168,  169,16393,16394,16395,   17,   25,  168,

      169,16393,16394,16395,   17,   25,  168,  169,16393,16394,
    16395,   17,   25,  168,  169,16393,16394,16395,   17,   25,
      168,  169,16393,16394,16395,   17,   25,  168,  169,16393,
    16394,16395,   17,   25,  168,  169,16393,16394,16395,   17,
       25,  168,  169,16393,16394,16395,   53,   54,  168,  169,
       51,  167,  169,   50,   54,  168,  169,   54,  168,  169,
       49,   54,  168,  169,   54,  168,  169,   52,   54,  168,
      169,   52,   54,  168,  169,   52,   54,  168,  169,   52,
       54,  168,  169,   52,   54,  168,  169,   52,   54,  168,
      169,   52,   53,   54,  168,  169,  141,  144,  168,  169,

      144,  168,  169,  142,  167,  169,  144,  168,  169,  144,
      168,  169,  144,  168,  169,  140,  144,  168,  169,  147,
      149,  168,  169,  148,  167,  169,  149,  168,  169,  147,
      149,  168,  169,  145,  149,  168,  169,  168,  169,   71,
      168,  169,   70,  168,  169,   69,  168,  169,   78,  168,
      169,   72,  168,  169,   78,  168,  169,   75,  168,  169,
       72,   78,  168,  169,   76,  168,  169,   74,   78,  168,
      169,   73,   78,  168,  169,   61,   65,  168,  169,   65,
      168,  169,   64,  167,  169,16439,   60,   65,  168,  169,
       63,   65,  168,  169,   59,   65,  168,  169,   61,   65,

      168,  169,   61,   65,  168,  169,   61,   65,  168,  169,
       58,   65,  168,  169,   63,   65,  168,  169,   87,  168,
      169,   86,  167,  169,   85,   87,  168,  169,   84,   87,
      168,  169,   80,   87,  168,  169,   83,   87,  168,  169,
       81,   87,  168,  169,   79,   87,  168,  169,   82,   87,
      168,  169,  100,  168,  169,  101,  168,  169,  101,  168,
      169,  102,  168,  169,  103,  168,  169,  168,  169,  104,
      167,  169, 8302,  168,  169,  168,  169, 8302,  168,  169,
      168,  169, 8302,  168,  169, 8302,  168,  169, 8302,  168,
      169,  109,  168,  169,   94,   97,  168,  169,   97,  168,

      169,   95,  167,  169,   93,   97,  168,  169,   97,  168,
      169,   92,   97,  168,  169,   94,   97,  168,  169,   94,
       97,  168,  169,   94,   97,  168,  169,   91,   97,  168,
      169,  125,  168,  169,  112,  125,  168,  169,  126,  167,
      169,  117,  125,  168,  169,  123,  125,  168,  169,  116,
      125,  168,  169,  120,  125,  168,  169,  113,  125,  168,
      169,  113,  125,  168,  169,  111,  125,  168,  169,  124,
      125,  168,  169,  124,  125,  168,  169,  124,  125,  168,
      169,  124,  125,  168,  169,  124,  125,  168,  169,  121,
      125,  168,  169,  124,  125,  168,  169,  122,  125,  168,

      169,  137,  168,  169,  136,  167,  169,  134,  168,  169,
      135,  167,  169,  132,  134,  168,  169,  131,  134,  168,
      169,  127,  134,  168,  169,  128,  134,  168,  169,  133,
      134,  168,  169,  133,  134,  168,  169,  133,  134,  168,
      169,  133,  134,  168,  169,  154,  155,  168,  169,  155,
      168,  169,  153,  155,  168,  169,  155,  168,  169,  160,
      161,  168,  169,  159,  161,  168,  169,  161,  168,  169,
      161,  168,  169,  164,  166,  168,  169,  164,  165,  167,
      169,  164,  166,  168,  169,  164,  166,  168,  169,  166,
      168,  169,   31,  168,  169,   30,   31,  168,  169,   29,

      167,  169,   26,   31,  168,  169,   27,   31,  168,  169,
       27,   31,  168,  169,   38,  168,  169,   36,   38,  168,
      169,   35,  167,  169,   32,   38,  168,  169,   37,   38,
      168,  169,   34,   38,  168,  169,16417,   42,  168,  169,
       41,   42,  168,  169,   40,  167,  169,   39,   42,  168,
      169,16395,   19,   16,   15,   16,   17,16395,   17,16395,
       17,16395,   17,16395,   17,16395,   17,16395,   18,16393,
    16394,16395,16393,16394,16395,16393,16394,16395,16393,16394,
    16395,16393,16394,16395,   17,16393,16394,16395,   17,16393,
    16394,16395,   17,16393,16394,16395,   17,16393,16394,16395,

       17,16393,16394,16395,   17,16393,16394,16395,   53,   48,
       52,   52,   52,   52,   52,   53,  141,  143,  140,  147,
      146,  147,  145,  145,   71,   70,   69,   72,   77,   76,
       73,   61,16439,   63,   63,   61,   58,   57,   62,   63,
      100,  101,  103,  104,  108,  107,  109,   94,   96,   94,
       91,   90,  112,  123,  113,  113,  113,  124,  124,  117,
      116,  124,  124,  133,  133,  154,  151,  151,  150,  160,
      157,  157,  156,  164,  164,  164,   30,   27,   27,   36,
     8225,   34,16417,   41,   39,16395,   20,   16,   15,   16,
       22,   21, 8203,   17,16395,   17,16395,   17,16395,   17,

    16395,16393,16394,16395,16393,16394,16395,16393,16394,16395,
    16393,16394,16395,16393,16394,16395, 8202, 8203, 8202, 8203,
     8202, 8203,   17,16393,16394,16395,   17,16393,16394,16395,
       17,16393,16394,16395,   17,16393,16394,16395,   45,   48,
       47,   46,   52,   52,  138,  139,   77,   56, 8247,   66,
       63,   68,   68,   67,   62,   63,  103,  105,  108,  107,
      106,   88,   98,   96,   99,  118,  119,  114,  113,  113,
      124,  124,  129,  130,  152,  158,  162,  163,   27,   27,
     8225,   39,   20,   21,   17,16395,    2,   17,16395,   17,
    16395,16393,16394,16395,16393,16394,16395,16393,16394,16395,

    16393,16394,16395,   17,16393,16394,16395,    1,    2,   17,
    16393,16394,16395,   17,16393,16394,16395,   45,   46,   52,
       66,   67,  103,  105,  106,   89,   98,   99,  118,  119,
      114,  113,  124,  115,  124,  129,  130,   27,   27,   39,
       17,16395,    6,   17,16395,16393,16394,16395,    1,16393,
    16394,16395,16393,16394,16395,   17,16393,16394,16395,    5,
        6,   17,16393,16394,16395,16428,  114,   27,    4,   17,
    16395,16393,16394,16395,    5,16393,16394,16395,    3,    4,
       17,16393,16394,16395,16428, 8236,16427,   27,   28,    8,
        3,16393,16394,16395,    7,    8,16427, 8235,   28,    7,

     8201,   14
    } ;

static yyconst flex_int16_t yy_accept[542] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    8,    9,   10,   11,   12,   14,   16,
       19,   22,   25,   29,   32,   36,   40,   44,   47,   52,
       57,   62,   67,   72,   77,   82,   87,   91,   98,  105,
      112,  119,  126,  133,  140,  147,  151,  154,  158,  161,
      165,  168,  172,  176,  180,  184,  188,  192,  197,  201,
      204,  207,  210,  213,  216,  220,  224,  227,  230,  234,

      238,  240,  243,  246,  249,  252,  255,  258,  261,  265,
      268,  272,  276,  280,  283,  287,  291,  295,  299,  303,
      307,  311,  315,  319,  322,  325,  329,  333,  337,  341,
      345,  349,  353,  356,  359,  362,  365,  368,  370,  373,
      376,  378,  381,  383,  386,  389,  392,  395,  399,  402,
      405,  409,  412,  416,  420,  424,  428,  432,  435,  439,
      442,  446,  450,  454,  458,  462,  466,  470,  474,  478,
      482,  486,  490,  494,  498,  502,  505,  508,  511,  514,
      518,  522,  526,  530,  534,  538,  542,  546,  550,  553,
      557,  560,  564,  568,  571,  574,  578,  582,  586,  590,

      593,  596,  600,  603,  607,  611,  615,  618,  622,  625,
      629,  633,  638,  641,  645,  648,  652,  652,  653,  654,
      654,  655,  657,  657,  657,  657,  657,  657,  657,  659,
      659,  659,  659,  661,  663,  665,  667,  669,  670,  673,
      676,  679,  682,  685,  685,  689,  689,  693,  697,  701,
      705,  709,  710,  710,  711,  711,  711,  712,  712,  712,
      713,  714,  715,  717,  718,  718,  718,  719,  720,  721,
      721,  722,  723,  724,  725,  725,  726,  727,  728,  729,
      730,  731,  732,  733,  734,  734,  734,  734,  735,  736,
      736,  736,  736,  737,  738,  739,  741,  742,  743,  743,

      744,  744,  745,  745,  746,  747,  747,  747,  747,  747,
      748,  749,  749,  749,  749,  750,  750,  750,  750,  751,
      752,  753,  754,  754,  755,  755,  755,  756,  757,  758,
      758,  759,  760,  761,  762,  763,  764,  764,  764,  765,
      765,  765,  766,  767,  767,  768,  769,  770,  771,  771,
      772,  773,  774,  775,  775,  776,  777,  778,  778,  778,
      779,  780,  781,  781,  782,  784,  785,  785,  785,  786,
      787,  788,  789,  791,  792,  793,  793,  793,  793,  793,
      794,  796,  798,  800,  802,  805,  808,  811,  814,  817,
      819,  821,  823,  827,  831,  835,  839,  840,  841,  842,

      843,  844,  845,  846,  847,  848,  849,  850,  850,  851,
      853,  854,  855,  857,  858,  859,  860,  861,  862,  862,
      863,  863,  864,  865,  866,  867,  868,  869,  870,  871,
      872,  873,  874,  875,  876,  876,  877,  877,  878,  879,
      879,  880,  881,  882,  882,  883,  884,  885,  885,  885,
      887,  888,  890,  892,  895,  898,  901,  904,  904,  904,
      904,  908,  910,  914,  918,  919,  920,  920,  921,  922,
      923,  924,  925,  926,  927,  928,  929,  930,  931,  931,
      932,  933,  934,  936,  937,  938,  939,  940,  941,  941,
      943,  944,  946,  949,  950,  953,  956,  956,  960,  962,

      966,  967,  967,  967,  968,  969,  969,  970,  972,  975,
      976,  979,  979,  981,  985,  985,  986,  987,  988,  990,
      990,  991,  992,  995,  995,  997,  997,  998,  999, 1000,
     1000, 1001, 1001, 1001, 1001, 1001, 1002, 1002, 1002, 1003,
     1003
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
       10,   11,   12,   13,   12,   14,    7,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,    7,    7,
       19,    7,    1,   20,   21,   21,   21,   21,   22,   23,
       24,   24,   24,   25,   24,   26,   24,   24,   24,   24,
       24,   27,   24,   28,   29,   24,   24,   30,   24,   24,
       31,   32,   33,    1,   34,    7,   35,   21,   36,   37,

       38,   39,   24,   40,   41,   25,   24,   42,   43,   24,
       44,   45,   24,   46,   47,   48,   49,   24,   24,   30,
       50,   24,   51,    7,   52,    7,    1,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    4,    1,    6,
        1,    1,    7,    8,    9,    9,    9,    1,   10,    1,
       11,   11,   11,   12,   12,   12,   12,   12,   12,   12,
        1,   13,    1,   12,   11,   11,   11,   11,   11,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
        1,    1,   14
    } ;

static yyconst flex_int16_t yy_base[651] =
    {   0,
     1821, 1820,    0,   53,  106,    0, 1819, 1816,  158,  162,
      165,  170,  194,    0,  247,    0,  299,  347,  394,  425,
      458,    0,  511,    0,  564,  613,  661,  709,  758,    0,
     1813, 1800,  811,    0,  303,  307,  311,  315,  319,  326,
      864,    0,  917,    0,  970,    0, 1798, 2902, 2902, 2902,
     1795, 1791, 1786,  171, 1782, 2902, 2902, 1742,  172,  352,
     1022,  367,  354,  332,  336,    0,  379,  323,  434, 1067,
      381,  566,  405,  581,    0,    0, 2902, 1780, 1774, 1769,
     2902,    0,  173,  582, 1734, 1737,  590, 1113,    0, 2902,
     2902, 1767, 1761,    0, 1766,    0,  177, 2902,  178, 1761,

      366, 2902, 2902,    0, 2902, 1764,    0, 2902, 2902, 1763,
     2902,    0,    0, 2902,  186, 1759, 1757, 1754,  181,  595,
      624,  385, 1753, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902,    0, 1752, 2902, 2902, 1737,  387, 2902, 2902,
     1745, 1743, 1728,  390,  626,  630,  403,    0, 2902, 1726,
     1724,    0, 1720,  403,  638,  647,  419, 2902, 1725, 2902,
     1721,    0, 1717, 2902, 1153,  666, 2902,    0, 1689,  409,
     1677,  670, 2902,  691, 2902, 2902, 2902, 2902, 2902, 1717,
     1557, 2902, 2902,    0,  421,  693,  695,    0, 1558, 2902,
      438,    0, 2902, 1554,  443, 1529, 1527, 1551, 1546,  447,

     2902, 1549, 2902, 2902,  307,  569, 2902, 1543, 2902, 2902,
     2902,  399, 2902, 1538, 2902,  417, 1535,  586, 1533, 1525,
        0,    0,    0, 1518, 1475,  635,  592, 1518,  637,    0,
     1514, 1506,  721,  711, 1023,  658, 1037, 1024, 1027, 1057,
     1071, 1091, 1093, 1137, 1138,  301, 1172, 1171, 1184, 1186,
     1191,    0, 1506,    0,    0, 1492,    0, 1492, 1482,  449,
     1439, 1441, 1236,    0, 1475, 1471, 2902, 1472,    0,  364,
     2902,  571, 1465, 1454,  677, 2902, 2902,    0, 1455,    0,
     1448,    0,    0,  572, 1441, 1444, 1434,    0,  617, 1426,
     1424, 1412,  653,  446, 2902,    0,    0, 1412,    0, 1394,

      578, 2902, 1401,    0, 1399, 1392, 1391, 1385,  701,  604,
        0, 1386, 1389, 1384,    0, 1377, 1372, 1368,  720,  623,
     2902, 1373, 1362,    0, 1356,  727, 1199, 1248, 2902,    0,
        0, 1320, 1354, 1345, 1297,  727, 1340, 1310,    0, 1310,
     1301,  740,    0, 1299, 2902,  702, 2902,    0, 1293, 2902,
      747, 2902, 1268,  748, 1289, 1276, 1280,  671, 1274, 1029,
     1043, 1259, 1042, 1248, 1051, 1240, 1052, 1232, 1069, 1139,
     1216,    0,    0, 2902, 1208, 1172,  573, 1200, 1198, 2902,
     1273, 1216, 1283, 1293, 1295, 1297, 1309, 1311, 1321, 2902,
      599, 1152, 1323, 1325, 1337, 1339, 1188,    0, 2902, 1158,

     1147,  148, 2902, 2902,    0, 2902, 1141, 1140, 1130,    0,
     2902, 1123,    0, 1107, 1112,    0, 1105, 1101,    0, 1100,
     1098, 1094,    0, 1088, 1085, 1083, 1138, 2902, 1032,  991,
      996, 1024,  753, 2902, 1049, 2902, 1076, 2902, 2902,  752,
     1083, 1094,  750,  745, 1105, 2902, 2902,  685, 1341, 1355,
     1359, 1369, 1371, 1384, 1385, 1397, 1399, 1046,  681,  675,
     1409, 1411, 1413, 1423, 2902, 2902,    0,  680, 2902, 2902,
      675, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 1216, 2902,
     2902,  649,    0, 2902, 2902, 1157, 1173, 1207,  608, 1425,
     1435, 1439, 1449, 1451, 1453, 1463,  585, 1465, 1475, 1479,

     1116,    0, 1242, 1255, 1315,  561, 1489, 1491, 1493, 1503,
     1505,  544, 1515, 1519, 1170, 1220, 2902, 1225, 1264,  400,
     1529, 1531, 1533,  391, 1545, 1258, 1279, 2902, 1277,  386,
     1547,  337,  324,  288,  277, 2902,  149,  132, 2902, 2902,
     1566, 1580, 1594, 1608, 1622, 1636, 1650, 1664, 1678, 1692,
     1706, 1719, 1733, 1746, 1759, 1772, 1786, 1800, 1806, 1820,
     1834, 1848, 1854, 1868, 1874, 1888, 1901, 1915, 1929, 1935,
     1942, 1956, 1970, 1980, 1994, 2008, 2014, 2020, 2034, 2048,
     2062, 2076, 2090, 2103, 2116, 2129, 2142, 2155, 2169, 2183,
     2197, 2210, 2223, 2237, 2250, 2263, 2276, 2290, 2304, 2318,

     2332, 2338, 2352, 2366, 2372, 2386, 2392, 2406, 2419, 2432,
     2446, 2460, 2474, 2480, 2484, 2491, 2505, 2519, 2532, 2546,
     2560,  321, 2566, 2572, 2586, 2600, 2614, 2627, 2640, 2653,
     2666, 2679, 2692, 2706, 2720, 2733, 2746, 2759, 2772, 2785,
     2799, 2806, 2813, 2827, 2840, 2853, 2857, 2870, 2874, 2887
    } ;

static yyconst flex_int16_t yy_def[651] =
    {   0,
      541,  541,  540,  540,  540,    5,  541,  541,  542,  542,
      543,  543,  540,   13,  540,   15,  544,  544,  545,  545,
      540,   21,  540,   23,  546,  546,  547,  547,  540,   29,
      548,  548,  540,   33,  549,  549,  550,  550,  551,  551,
      540,   41,  540,   43,  540,   45,  540,  540,  540,  540,
      552,  540,  540,  553,  540,  540,  540,  540,  554,  554,
      554,  554,  554,   61,   61,   61,  555,  556,  556,  556,
      556,  556,   70,   70,   70,  557,  540,  540,  558,  540,
      540,  559,  559,  559,  559,  559,  559,  559,  560,  540,
      540,  540,  540,  561,  540,  562,  540,  540,  562,  540,

      540,  540,  540,  563,  540,  540,  564,  540,  540,  540,
      540,  565,  566,  540,  567,  540,  568,  540,  566,  566,
      566,  540,  569,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  570,  540,  540,  540,  571,  540,  540,  540,
      540,  572,  540,  540,  540,  540,  540,  573,  540,  574,
      540,  575,  540,  573,  573,  573,  540,  540,  540,  540,
      540,  576,  540,  540,  540,  540,  540,  577,  577,  577,
      577,  577,  540,  577,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  578,  578,  578,  578,  579,  540,  540,
      580,  581,  540,  540,  582,  583,  583,  540,  540,  583,

      540,  540,  540,  540,  584,  584,  540,  540,  540,  540,
      540,  585,  540,  540,  540,  586,  587,  588,  540,  540,
      589,  590,  591,  540,  540,  540,  540,  592,  593,  594,
      540,  540,  593,  593,  593,  593,  593,  595,  596,  596,
      596,  596,  596,  540,  597,  598,  597,  597,  597,  597,
      597,  599,  540,  600,  601,  540,  602,  540,  540,  602,
      602,  602,  602,  603,  540,  540,  540,  540,  604,  540,
      540,  604,  540,  540,  540,  540,  540,  605,  540,  606,
      540,  607,  608,  609,  540,  610,  540,  611,  612,  540,
      540,  540,  608,  540,  540,  613,  614,  540,  615,  616,

      540,  540,  540,  617,  540,  540,  540,  540,  540,  540,
      618,  540,  619,  540,  620,  540,  540,  540,  618,  540,
      540,  540,  540,  621,  540,  540,  540,  540,  540,  622,
      623,  623,  540,  540,  623,  623,  540,  540,  624,  540,
      540,  624,  625,  540,  540,  540,  540,  626,  540,  540,
      540,  540,  627,  627,  540,  540,  540,  540,  628,  629,
      629,  540,  540,  540,  630,  540,  540,  631,  632,  633,
      540,  634,  635,  540,  540,  540,  540,  636,  637,  540,
      638,  638,  638,  638,  639,  639,  639,  639,  639,  540,
      540,  540,  640,  640,  640,  640,  540,  641,  540,  540,

      642,  642,  540,  540,  606,  540,  540,  610,  540,  611,
      540,  540,  613,  643,  540,  617,  540,  540,  644,  540,
      619,  540,  620,  540,  540,  540,  540,  540,  622,  623,
      623,  540,  540,  540,  540,  540,  540,  540,  540,  628,
      645,  629,  540,  631,  646,  540,  540,  540,  637,  638,
      540,  638,  638,  639,  639,  639,  639,  540,  540,  540,
      640,  540,  640,  640,  540,  540,  647,  642,  540,  540,
      643,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  623,  623,  540,  540,  645,  629,  646,  540,  638,
      540,  638,  639,  540,  639,  639,  540,  640,  540,  640,

      648,  649,  540,  540,  629,  540,  540,  638,  639,  540,
      639,  540,  540,  640,  540,  648,  540,  650,  629,  540,
      540,  540,  639,  540,  540,  540,  650,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,    0,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540
    } ;

static yyconst flex_int16_t yy_nxt[2956] =
    {   0,
       50,   51,   52,   50,   53,   54,   50,   55,   56,   57,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   58,
       59,   59,   59,   59,   59,   59,   60,   59,   61,   59,
       50,   50,   50,   59,   59,   62,   63,   59,   64,   59,
       65,   59,   59,   59,   59,   60,   59,   59,   66,   59,
       50,   50,   59,   50,   67,   52,   50,   53,   54,   50,
       55,   56,   57,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   58,   68,   68,   68,   68,   68,   68,   69,
       68,   70,   68,   50,   50,   50,   68,   68,   71,   72,
       68,   73,   68,   74,   68,   68,   68,   68,   69,   68,

       68,   75,   68,   50,   50,   68,   76,   76,   77,   76,
       78,   79,   76,   80,   76,   76,   76,   76,   76,   81,
       76,   76,   76,   76,   76,   76,   82,   82,   82,   82,
       82,   82,   83,   82,   84,   82,   76,   76,   76,   82,
       82,   85,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   83,   86,   82,   87,   82,   76,   76,   88,   90,
       91,  540,   92,   95,   91,   93,   92,   97,  539,   93,
       98,   99,   97,  226,  222,  100,  223,  258,  270,  272,
      259,  227,  271,  273,  228,  291,  468,  284,  292,   94,
      230,  285,  538,   94,   48,  101,   49,   48,   48,   48,

       48,   48,  102,   48,   48,   48,   48,   48,   48,   48,
       48,  103,   48,   48,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,   48,   48,   48,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,   48,   48,  104,  105,  106,   49,
      105,  105,  107,  105,  105,   48,  108,  105,  105,  109,
      105,  105,  105,  105,  110,  111,  105,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  105,  105,  105,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  105,  105,  112,

      114,  115,  391,  116,  117,   49,  118,  189,  358,   49,
      190,  189,  114,   49,  190,  193,  537,   49,  194,  193,
      359,  197,  194,  198,  244,  119,  199,  120,  197,  429,
      198,  429,  227,  199,  191,  228,  540,  536,  191,  540,
      540,  246,  195,  540,  119,  392,  195,  121,  122,  115,
      200,  116,  123,  226,  118,  226,  231,  200,  229,  232,
      114,  227,  229,  227,  228,  270,  228,  275,  226,  271,
      230,  535,  230,  119,  276,  120,  227,  236,  237,  228,
      238,  229,  244,  277,  534,  230,  294,  295,  301,  302,
      227,  235,  119,  228,  307,  121,  125,  308,  126,  246,

      363,  127,  128,  129,  310,  302,  130,  317,  234,  540,
      318,  364,  540,  333,  240,  241,  334,  242,  367,  243,
      320,  321,  248,  533,  131,  340,  132,  125,  341,  126,
      368,  245,  127,  128,  129,  244,  532,  130,  231,  346,
      347,  232,  530,  227,  351,  352,  228,  294,  295,  540,
      250,  353,  246,  258,  353,  131,  259,  132,   48,   48,
       49,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,   48,   48,
       48,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,   48,   48,
      133,   48,  134,   49,   48,   48,   48,   48,   48,  135,
      135,   48,   48,  135,   48,   48,   48,   48,  136,   48,
       48,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,   48,   48,   48,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,   48,   48,  137,   48,  138,  139,  244,  141,  142,
      358,  143,  272,  284,  377,  227,  273,  285,  228,  301,
      302,  524,  359,   48,  246,  540,  258,  226,  540,  259,
      144,  230,  145,  377,  258,  227,  520,  259,  228,  291,

      458,  227,  292,  249,  230,  310,  302,  245,  260,  144,
      230,  361,  146,   48,  147,  139,  260,  141,  142,  411,
      143,  293,  288,  251,  320,  321,  245,  260,  291,  512,
      307,  292,   48,  308,  307,  260,  226,  308,  226,  144,
      293,  145,  317,  459,  227,  318,  227,  228,  506,  228,
      293,  317,  309,  230,  318,  230,  309,  291,  144,  226,
      292,  146,  149,  150,  319,  151,  152,  227,  153,  293,
      228,  309,  358,  319,  333,  309,  230,  334,  275,  326,
      328,  328,  328,  319,  359,  276,  483,  154,  299,  155,
      329,  329,  319,  502,  277,  333,  336,  340,  334,  340,

      341,  383,  341,  435,  347,  307,  154,  329,  308,  156,
      157,  150,  226,  151,  152,  336,  153,  336,  497,  342,
      227,  342,  226,  228,  317,  231,  460,  318,  232,  230,
      227,  333,  489,  228,  334,  154,  336,  155,  342,  230,
      342,  427,  427,  427,  340,  381,  444,  341,  437,  352,
      540,  443,  353,  440,  154,  353,  485,  156,  158,  159,
      160,  158,  161,  162,  158,  163,  164,  158,  158,  158,
      158,  158,  165,  166,  166,  158,  167,  158,  168,  168,
      169,  168,  168,  168,  170,  171,  172,  168,  173,  158,
      158,  168,  168,  168,  168,  168,  168,  168,  168,  168,

      168,  168,  168,  170,  168,  168,  174,  168,  175,  158,
      168,  178,  178,  179,  178,  180,  178,  178,  181,  182,
      183,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  184,  184,  184,  184,  184,  184,  185,  184,  186,
      184,  182,  178,  183,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  185,  184,  184,  187,
      184,  182,  183,  184,  201,  202,  203,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  204,  201,  201,
      201,  201,  201,  201,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  201,  201,  201,  205,  205,  205,

      205,  205,  205,  205,  206,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  201,  201,  205,  207,  208,  209,
      207,  207,  207,  207,  207,  207,  207,  210,  207,  211,
      207,  207,  207,  207,  207,  207,  207,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  207,  207,  207,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  207,  207,  212,
      213,  214,  215,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      213,  213,  213,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      213,  213,  216,  226,  226,  238,  231,  484,  244,  232,
      358,  227,  227,  483,  228,  228,  227,  482,  226,  228,
      230,  230,  359,  363,  358,  246,  227,  458,  233,  228,
      435,  347,  363,  367,  364,  230,  359,  481,  244,  240,
      241,  382,  242,  364,  243,  368,  227,  233,  244,  228,
      367,  231,  244,  481,  232,  246,  227,  437,  352,  228,
      227,  384,  368,  228,  358,  246,  478,  442,  477,  246,
      459,  476,  244,  247,  244,  358,  359,  475,  386,  420,

      227,  420,  227,  228,  473,  228,  367,  359,  387,  246,
      417,  246,  247,  252,  252,  472,  252,  515,  368,  252,
      299,  252,  252,  252,  252,  252,  470,  263,  263,  263,
      252,  252,  252,  469,  517,  389,  388,  487,  244,  244,
      226,  407,  407,  252,  252,  252,  227,  227,  227,  228,
      228,  228,  427,  427,  427,  246,  246,  230,  358,  479,
      467,  466,  480,  252,  252,  263,  326,  327,  327,  328,
      359,  515,  244,  244,  358,  479,  231,  329,  329,  232,
      227,  227,  330,  228,  228,  244,  359,  244,  517,  246,
      246,  465,  244,  227,  329,  227,  228,  460,  228,  226,

      227,  378,  246,  228,  246,  393,  448,  227,  367,  246,
      228,  447,  326,  327,  327,  328,  230,  451,  505,  446,
      368,  515,  394,  329,  428,  227,  526,  503,  228,  395,
      504,  504,  504,  444,  230,  396,  252,  252,  517,  252,
      428,  366,  252,  528,  252,  252,  252,  252,  252,  443,
      263,  263,  263,  252,  252,  252,  504,  504,  504,  526,
      362,  326,  328,  328,  328,  529,  252,  252,  252,  504,
      504,  504,  329,  329,  226,  440,  528,  359,  529,  480,
      526,  357,  227,  439,  226,  228,  252,  252,  263,  329,
      359,  230,  227,  438,  226,  228,  244,  528,  244,  354,

      436,  230,  227,  434,  227,  228,  227,  228,  338,  228,
      244,  230,  244,  246,  337,  246,  358,  433,  227,  450,
      227,  228,  244,  228,  244,  452,  462,  246,  359,  246,
      227,  454,  227,  228,  227,  228,  453,  228,  244,  246,
      244,  246,  226,  246,  432,  431,  227,  455,  227,  228,
      227,  228,  325,  228,  456,  246,  226,  246,  323,  230,
      451,  430,  519,  426,  227,  457,  425,  228,  227,  461,
      491,  228,  226,  230,  322,  316,  314,  230,  227,  463,
      227,  228,  464,  228,  424,  244,  494,  230,  422,  230,
      420,  419,  306,  227,  227,  303,  228,  228,  244,  418,

      244,  490,  246,  246,  417,  415,  227,  299,  227,  228,
      244,  228,  462,  298,  499,  246,  492,  246,  227,  290,
      227,  228,  227,  228,  244,  228,  507,  246,  287,  246,
      493,  246,  227,  412,  227,  228,  491,  228,  409,  495,
      226,  246,  496,  230,  227,  407,  406,  228,  227,  281,
      244,  228,  494,  230,  510,  498,  279,  230,  227,  274,
      227,  228,  227,  228,  244,  228,  513,  246,  500,  246,
      274,  246,  227,  268,  227,  228,  499,  228,  404,  403,
      244,  246,  402,  246,  227,  401,  508,  228,  227,  256,
      507,  228,  521,  246,  522,  509,  253,  246,  227,  400,

      227,  228,  227,  228,  510,  228,  244,  230,  511,  230,
      397,  246,  227,  224,  227,  228,  513,  228,  220,  378,
      525,  246,  376,  246,  227,  375,  514,  228,  227,  371,
      521,  228,  522,  246,  531,  219,  217,  246,  227,  366,
      227,  228,  227,  228,  362,  228,  525,  230,  531,  246,
      357,  246,  523,  356,  227,  355,  227,  228,  354,  228,
      354,  349,  344,  246,  338,  246,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   96,   96,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,   96,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  192,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      218,  337,  335,  332,  325,  323,  322,  316,  314,  218,
      218,  312,  218,  221,  221,  306,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  229,  305,  303,
      299,  229,  229,  298,  229,  229,  229,  229,  289,  229,
      239,  290,  289,  287,  281,  279,  274,  268,  266,  239,
      239,  265,  239,  245,  262,  261,  256,  245,  245,  255,
      245,  245,  245,  245,  253,  245,  252,  252,  225,  224,
      220,  252,  252,  219,  252,  252,  217,  540,  252,  252,

      254,  254,  177,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  257,  177,  257,  257,   49,  257,
      264,   49,   49,   49,  264,  264,  264,  264,  264,  264,
      264,  264,  540,  264,  267,  267,  540,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  269,  269,
      540,  269,  540,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  278,  540,  278,  278,  540,  278,  280,  280,
      540,  280,  540,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  282,  540,  282,  282,  540,  282,  283,  540,
      540,  540,  540,  283,  283,  540,  283,  283,  283,  283,

      283,  283,  286,  540,  540,  286,  540,  540,  540,  540,
      540,  286,  286,  540,  286,  288,  288,  540,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  296,
      296,  540,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  297,  540,  297,  297,  540,  297,  300,
      300,  540,  300,  300,  540,  300,  304,  304,  540,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      311,  540,  540,  540,  540,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  313,  540,  540,  540,  540,  540,
      313,  313,  540,  313,  315,  315,  540,  315,  540,  315,

      315,  315,  315,  315,  315,  315,  315,  315,  324,  324,
      540,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  331,  540,  331,  331,  540,  331,  339,  540,
      339,  339,  540,  339,  343,  343,  540,  540,  343,  343,
      343,  343,  343,  343,  343,  343,  540,  343,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  348,  348,  540,  540,  348,  348,  348,  348,
      348,  348,  348,  348,  540,  348,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      353,  353,  353,  540,  353,  353,  353,  353,  353,  353,

      353,  353,  353,  353,  360,  540,  540,  540,  540,  540,
      360,  360,  540,  360,  360,  540,  360,  365,  540,  540,
      540,  540,  365,  540,  365,  540,  365,  365,  540,  365,
      369,  540,  540,  540,  540,  540,  369,  369,  540,  369,
      369,  540,  369,  218,  540,  540,  540,  540,  540,  540,
      540,  540,  218,  218,  540,  218,  370,  540,  540,  540,
      370,  370,  540,  370,  370,  370,  370,  540,  370,  372,
      372,  540,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  373,  373,  540,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  374,  374,  374,

      374,  540,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  379,  540,  540,  540,  540,  540,  540,  540,  540,
      379,  379,  540,  379,  229,  540,  540,  540,  229,  229,
      540,  229,  229,  229,  229,  540,  229,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  540,  380,  380,  380,
      380,  239,  540,  540,  540,  540,  540,  540,  540,  540,
      239,  239,  540,  239,  385,  540,  540,  540,  385,  385,
      540,  385,  385,  385,  385,  540,  385,  245,  540,  540,
      540,  245,  245,  540,  245,  245,  245,  245,  540,  245,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  540,

      390,  390,  390,  390,  252,  252,  540,  540,  540,  252,
      252,  540,  252,  252,  540,  540,  252,  252,  398,  398,
      540,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  399,  399,  399,  399,  540,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  257,  540,  257,  257,
      540,  257,  264,  540,  540,  540,  264,  264,  264,  264,
      264,  264,  264,  264,  540,  264,  269,  269,  540,  269,
      540,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      278,  540,  278,  278,  540,  278,  405,  405,  540,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      282,  540,  282,  282,  540,  282,  283,  540,  540,  540,
      540,  283,  283,  540,  283,  283,  283,  283,  283,  283,
      286,  540,  540,  286,  540,  540,  540,  540,  540,  286,
      286,  540,  286,  408,  540,  540,  540,  540,  540,  540,
      408,  540,  408,  408,  540,  408,  288,  288,  540,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  413,  413,  540,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  297,  540,
      297,  297,  540,  297,  414,  414,  540,  414,  300,  300,

      540,  300,  300,  540,  300,  416,  416,  540,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  311,
      540,  540,  540,  540,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  421,  540,  540,  540,  540,  540,  540,
      421,  540,  421,  421,  540,  421,  423,  423,  540,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      324,  324,  540,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  331,  540,  331,  331,  540,  331,
      339,  540,  339,  339,  540,  339,  343,  343,  540,  540,
      343,  343,  343,  343,  343,  343,  343,  343,  540,  343,

      348,  348,  540,  540,  348,  348,  348,  348,  348,  348,
      348,  348,  540,  348,  353,  353,  353,  540,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  441,  540,
      540,  540,  540,  540,  540,  540,  540,  441,  441,  540,
      441,  360,  540,  540,  540,  540,  540,  360,  360,  540,
      360,  360,  540,  360,  365,  540,  540,  540,  540,  365,
      540,  365,  540,  365,  365,  540,  365,  445,  540,  540,
      540,  540,  540,  540,  540,  540,  445,  445,  540,  445,
      369,  540,  540,  540,  540,  540,  369,  369,  540,  369,
      369,  540,  369,  370,  540,  540,  540,  370,  370,  540,

      370,  370,  370,  370,  540,  370,  372,  372,  540,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      373,  373,  540,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  379,  540,  540,  540,  540,  540,
      540,  540,  540,  379,  379,  540,  379,  449,  540,  540,
      540,  449,  449,  540,  449,  449,  449,  449,  540,  449,
      229,  540,  540,  540,  229,  229,  540,  229,  229,  229,
      229,  540,  229,  385,  540,  540,  540,  385,  385,  540,
      385,  385,  385,  385,  540,  385,  245,  540,  540,  540,
      245,  245,  540,  245,  245,  245,  245,  540,  245,  398,

      398,  540,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  257,  257,  540,  257,  257,  540,  257,
      471,  471,  540,  471,  471,  540,  471,  474,  474,  474,
      474,  540,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  486,  540,  540,  540,  540,  540,  486,  486,  540,
      486,  486,  540,  486,  488,  540,  540,  540,  540,  540,
      488,  488,  540,  488,  488,  540,  488,  501,  501,  540,
      501,  516,  540,  540,  540,  540,  540,  540,  516,  516,
      516,  516,  540,  516,  518,  518,  540,  518,  527,  540,
      540,  540,  540,  540,  540,  527,  527,  527,  527,  540,

      527,   47,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540
    } ;

static yyconst flex_int16_t yy_chk[2956] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    9,
        9,  402,    9,   10,   10,    9,   10,   11,  538,   10,
       11,   12,   12,   59,   54,   12,   54,   83,   97,   99,
       83,   59,   97,   99,   59,  119,  402,  115,  119,    9,
       59,  115,  537,   10,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       17,   17,  246,   17,   17,   35,   17,   35,  205,   36,
       35,   36,   17,   37,   36,   37,  535,   38,   37,   38,
      205,   39,   38,   39,   68,   17,   39,   17,   40,  622,
       40,  622,   68,   40,   35,   68,   64,  534,   36,   64,
       65,   68,   37,   65,   17,  246,   38,   17,   18,   18,
       39,   18,   18,   60,   18,   63,   60,   40,   64,   60,
       18,   60,   65,   63,   60,  270,   63,  101,   62,  270,
       60,  533,   63,   18,  101,   18,   62,   64,   65,   62,
       67,   65,   71,  101,  532,   62,  122,  122,  138,  138,
       71,   63,   18,   71,  144,   18,   19,  144,   19,   71,

      212,   19,   19,   19,  147,  147,   19,  154,   62,   73,
      154,  212,   73,  170,   67,   67,  170,   67,  216,   67,
      157,  157,   71,  530,   19,  185,   19,   20,  185,   20,
      216,   73,   20,   20,   20,   69,  524,   20,   69,  191,
      191,   69,  520,   69,  195,  195,   69,  294,  294,  200,
       73,  200,   69,  260,  200,   20,  260,   20,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   25,   25,   25,   72,   25,   25,
      206,   25,  272,  284,  377,   72,  272,  284,   72,  301,
      301,  512,  206,   25,   72,   74,   84,  218,   74,   84,
       25,  377,   25,  227,   87,  218,  506,   87,  218,  120,

      391,  227,  120,   72,  218,  310,  310,   74,   84,   25,
      227,  206,   25,   26,   26,   26,   87,   26,   26,  289,
       26,  120,  289,   74,  320,  320,   74,   84,  121,  497,
      145,  121,   26,  145,  146,   87,  226,  146,  229,   26,
      120,   26,  155,  391,  226,  155,  229,  226,  489,  229,
      121,  156,  145,  226,  156,  229,  146,  293,   26,  236,
      293,   26,   27,   27,  155,   27,   27,  236,   27,  121,
      236,  145,  358,  156,  172,  146,  236,  172,  275,  166,
      166,  166,  166,  155,  358,  275,  482,   27,  471,   27,
      166,  166,  156,  468,  275,  174,  172,  186,  174,  187,

      186,  236,  187,  346,  346,  309,   27,  166,  309,   27,
       28,   28,  234,   28,   28,  172,   28,  174,  460,  186,
      234,  187,  233,  234,  319,  233,  459,  319,  233,  234,
      233,  336,  448,  233,  336,   28,  174,   28,  186,  233,
      187,  326,  326,  326,  342,  234,  444,  342,  351,  351,
      354,  443,  354,  440,   28,  354,  433,   28,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   61,  235,  238,   61,  432,  239,   61,
      360,   61,  235,  431,   61,  235,  239,  430,  237,  239,
       61,  235,  360,  363,  361,  239,  237,  458,   61,  237,
      435,  435,  365,  367,  363,  237,  361,  429,  240,  238,
      238,  235,  238,  365,  238,  367,  240,   61,   70,  240,
      369,   70,  241,  429,   70,  240,   70,  437,  437,   70,
      241,  237,  369,  241,  441,   70,  426,  361,  425,  241,
      458,  424,  242,   70,  243,  442,  441,  422,  240,  421,

      242,  420,  243,  242,  418,  243,  445,  442,  241,  242,
      417,  243,   70,   88,   88,  415,   88,  501,  445,   88,
      414,   88,   88,   88,   88,   88,  412,   88,   88,   88,
       88,   88,   88,  409,  501,  243,  242,  442,  244,  245,
      370,  408,  407,   88,   88,   88,  244,  245,  370,  244,
      245,  370,  427,  427,  427,  244,  245,  370,  486,  427,
      401,  400,  427,   88,   88,   88,  165,  165,  165,  165,
      486,  515,  248,  247,  487,  427,  247,  165,  165,  247,
      248,  247,  165,  248,  247,  249,  487,  250,  515,  248,
      247,  397,  251,  249,  165,  250,  249,  392,  250,  379,

      251,  378,  249,  251,  250,  248,  376,  379,  488,  251,
      379,  375,  327,  327,  327,  327,  379,  382,  487,  371,
      488,  516,  249,  327,  327,  382,  518,  479,  382,  250,
      479,  479,  479,  368,  382,  251,  263,  263,  516,  263,
      327,  366,  263,  518,  263,  263,  263,  263,  263,  364,
      263,  263,  263,  263,  263,  263,  503,  503,  503,  526,
      362,  328,  328,  328,  328,  519,  263,  263,  263,  504,
      504,  504,  328,  328,  381,  359,  526,  519,  529,  504,
      527,  357,  381,  356,  383,  381,  263,  263,  263,  328,
      529,  381,  383,  355,  384,  383,  385,  527,  386,  353,

      349,  383,  384,  344,  385,  384,  386,  385,  341,  386,
      387,  384,  388,  385,  340,  386,  505,  338,  387,  381,
      388,  387,  389,  388,  393,  383,  394,  387,  505,  388,
      389,  386,  393,  389,  394,  393,  384,  394,  395,  389,
      396,  393,  449,  394,  337,  335,  395,  387,  396,  395,
      449,  396,  334,  449,  388,  395,  450,  396,  333,  449,
      451,  332,  505,  325,  450,  389,  323,  450,  451,  393,
      452,  451,  453,  450,  322,  318,  317,  451,  452,  395,
      453,  452,  396,  453,  316,  454,  455,  452,  314,  453,
      313,  312,  308,  454,  455,  307,  454,  455,  456,  306,

      457,  450,  454,  455,  305,  303,  456,  300,  457,  456,
      461,  457,  462,  298,  463,  456,  453,  457,  461,  292,
      462,  461,  463,  462,  464,  463,  490,  461,  291,  462,
      454,  463,  464,  290,  490,  464,  491,  490,  287,  456,
      492,  464,  457,  490,  491,  286,  285,  491,  492,  281,
      493,  492,  494,  491,  495,  461,  279,  492,  493,  274,
      494,  493,  495,  494,  496,  495,  498,  493,  464,  494,
      273,  495,  496,  268,  498,  496,  499,  498,  266,  265,
      500,  496,  262,  498,  499,  261,  492,  499,  500,  259,
      507,  500,  508,  499,  509,  493,  258,  500,  507,  256,

      508,  507,  509,  508,  510,  509,  511,  507,  496,  508,
      253,  509,  510,  232,  511,  510,  513,  511,  231,  228,
      514,  510,  225,  511,  513,  224,  500,  513,  514,  220,
      521,  514,  522,  513,  523,  219,  217,  514,  521,  214,
      522,  521,  523,  522,  208,  523,  525,  521,  531,  522,
      202,  523,  511,  199,  525,  198,  531,  525,  197,  531,
      196,  194,  189,  525,  181,  531,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  543,  543,  543,  543,  543,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  550,  550,  550,  550,  550,  550,  550,  550,

      550,  550,  550,  550,  550,  550,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      552,  180,  171,  169,  163,  161,  159,  153,  151,  552,
      552,  150,  552,  553,  553,  143,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  554,  142,  141,
      137,  554,  554,  134,  554,  554,  554,  554,  123,  554,
      555,  118,  117,  116,  110,  106,  100,   95,   93,  555,
      555,   92,  555,  556,   86,   85,   80,  556,  556,   79,
      556,  556,  556,  556,   78,  556,  557,  557,   58,   55,
       53,  557,  557,   52,  557,  557,   51,   47,  557,  557,

      558,  558,   32,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  559,   31,  559,  559,    8,  559,
      560,    7,    2,    1,  560,  560,  560,  560,  560,  560,
      560,  560,    0,  560,  561,  561,    0,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  562,  562,
        0,  562,    0,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  563,    0,  563,  563,    0,  563,  564,  564,
        0,  564,    0,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  565,    0,  565,  565,    0,  565,  566,    0,
        0,    0,    0,  566,  566,    0,  566,  566,  566,  566,

      566,  566,  567,    0,    0,  567,    0,    0,    0,    0,
        0,  567,  567,    0,  567,  568,  568,    0,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  569,
      569,    0,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  570,    0,  570,  570,    0,  570,  571,
      571,    0,  571,  571,    0,  571,  572,  572,    0,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      573,    0,    0,    0,    0,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  574,    0,    0,    0,    0,    0,
      574,  574,    0,  574,  575,  575,    0,  575,    0,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  576,  576,
        0,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  577,    0,  577,  577,    0,  577,  578,    0,
      578,  578,    0,  578,  579,  579,    0,    0,  579,  579,
      579,  579,  579,  579,  579,  579,    0,  579,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  581,  581,    0,    0,  581,  581,  581,  581,
      581,  581,  581,  581,    0,  581,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      583,  583,  583,    0,  583,  583,  583,  583,  583,  583,

      583,  583,  583,  583,  584,    0,    0,    0,    0,    0,
      584,  584,    0,  584,  584,    0,  584,  585,    0,    0,
        0,    0,  585,    0,  585,    0,  585,  585,    0,  585,
      586,    0,    0,    0,    0,    0,  586,  586,    0,  586,
      586,    0,  586,  587,    0,    0,    0,    0,    0,    0,
        0,    0,  587,  587,    0,  587,  588,    0,    0,    0,
      588,  588,    0,  588,  588,  588,  588,    0,  588,  589,
      589,    0,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  590,  590,    0,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  591,  591,  591,

      591,    0,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  592,    0,    0,    0,    0,    0,    0,    0,    0,
      592,  592,    0,  592,  593,    0,    0,    0,  593,  593,
        0,  593,  593,  593,  593,    0,  593,  594,  594,  594,
      594,  594,  594,  594,  594,  594,    0,  594,  594,  594,
      594,  595,    0,    0,    0,    0,    0,    0,    0,    0,
      595,  595,    0,  595,  596,    0,    0,    0,  596,  596,
        0,  596,  596,  596,  596,    0,  596,  597,    0,    0,
        0,  597,  597,    0,  597,  597,  597,  597,    0,  597,
      598,  598,  598,  598,  598,  598,  598,  598,  598,    0,

      598,  598,  598,  598,  599,  599,    0,    0,    0,  599,
      599,    0,  599,  599,    0,    0,  599,  599,  600,  600,
        0,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  601,  601,  601,  601,    0,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  602,    0,  602,  602,
        0,  602,  603,    0,    0,    0,  603,  603,  603,  603,
      603,  603,  603,  603,    0,  603,  604,  604,    0,  604,
        0,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      605,    0,  605,  605,    0,  605,  606,  606,    0,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,

      607,    0,  607,  607,    0,  607,  608,    0,    0,    0,
        0,  608,  608,    0,  608,  608,  608,  608,  608,  608,
      609,    0,    0,  609,    0,    0,    0,    0,    0,  609,
      609,    0,  609,  610,    0,    0,    0,    0,    0,    0,
      610,    0,  610,  610,    0,  610,  611,  611,    0,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  613,  613,    0,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  614,    0,
      614,  614,    0,  614,  615,  615,    0,  615,  616,  616,

        0,  616,  616,    0,  616,  617,  617,    0,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  618,
        0,    0,    0,    0,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  619,    0,    0,    0,    0,    0,    0,
      619,    0,  619,  619,    0,  619,  620,  620,    0,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      621,  621,    0,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  623,    0,  623,  623,    0,  623,
      624,    0,  624,  624,    0,  624,  625,  625,    0,    0,
      625,  625,  625,  625,  625,  625,  625,  625,    0,  625,

      626,  626,    0,    0,  626,  626,  626,  626,  626,  626,
      626,  626,    0,  626,  627,  627,  627,    0,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  628,    0,
        0,    0,    0,    0,    0,    0,    0,  628,  628,    0,
      628,  629,    0,    0,    0,    0,    0,  629,  629,    0,
      629,  629,    0,  629,  630,    0,    0,    0,    0,  630,
        0,  630,    0,  630,  630,    0,  630,  631,    0,    0,
        0,    0,    0,    0,    0,    0,  631,  631,    0,  631,
      632,    0,    0,    0,    0,    0,  632,  632,    0,  632,
      632,    0,  632,  633,    0,    0,    0,  633,  633,    0,

      633,  633,  633,  633,    0,  633,  634,  634,    0,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      635,  635,    0,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  636,    0,    0,    0,    0,    0,
        0,    0,    0,  636,  636,    0,  636,  637,    0,    0,
        0,  637,  637,    0,  637,  637,  637,  637,    0,  637,
      638,    0,    0,    0,  638,  638,    0,  638,  638,  638,
      638,    0,  638,  639,    0,    0,    0,  639,  639,    0,
      639,  639,  639,  639,    0,  639,  640,    0,    0,    0,
      640,  640,    0,  640,  640,  640,  640,    0,  640,  641,

      641,    0,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  642,  642,    0,  642,  642,    0,  642,
      643,  643,    0,  643,  643,    0,  643,  644,  644,  644,
      644,    0,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  645,    0,    0,    0,    0,    0,  645,  645,    0,
      645,  645,    0,  645,  646,    0,    0,    0,    0,    0,
      646,  646,    0,  646,  646,    0,  646,  647,  647,    0,
      647,  648,    0,    0,    0,    0,    0,    0,  648,  648,
      648,  648,    0,  648,  649,  649,    0,  649,  650,    0,
        0,    0,    0,    0,    0,  650,  650,  650,  650,    0,

      650,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540
    } ;

extern int parse_py_YY_flex_debug;
int parse_py_YY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *parse_py_YYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2018 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <QFile>
#include <QFileInfo>
#include <QHash>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>
#include <unistd.h>

#include <arguments.h>
#include <commentscan.h>
#include <config.h>
#include <doxy_globals.h>
#include <default_args.h>
#include <entry.h>
#include <language.h>
#include <message.h>
#include <parse_py.h>
#include <util.h>

#define DBG_CTX(...)     do { } while(0)

#define YY_NO_INPUT 1
#define YY_NEVER_INTERACTIVE 1

static QSharedPointer<Entry> current_root;
static QSharedPointer<Entry> current;
static QSharedPointer<Entry> previous;
static QSharedPointer<Entry> bodyEntry;

static QSharedPointer<Entry>  s_docsEntry;    // which entry
static EntryKey               s_docsEnum;     // which enum in EntryKey (Source_Text, Initial_Value)

static bool s_defVal_active = false;

static ParserInterface  *s_thisParser;
static QString           s_inputString;
static int		          s_inputPosition;
static QFile             s_inputFile;

static int		          yyLineNr = 1;
static QString 		    yyFileName;

static Protection	       protection;
static MethodTypes    	 mtype;
static Specifier       	 virt;

static bool       		 gstat;

static int               docBlockContext;
static QString           docBlock;
static bool              docBlockInBody;
static bool              isJavaDocStyle;
static bool              docBrief;
static bool              docBlockSpecial;

static bool              s_doubleQuote;
static bool              s_specialBlock;
static int               s_stringContext;
static int               s_indent    = 0;
static int               s_curIndent = 0;

static char              s_atomStart;
static char              s_atomEnd;
static int               s_atomCount;

static QString           s_moduleScope;
static QString           s_packageName;
static QString           s_defVal;

static int               s_braceCount;

static bool              s_lexInit = false;
static bool              s_packageCommentAllowed;

static bool              s_start_init = false;
static int               s_search_count = 0;

static void initParser()
{
   protection = Public;
   mtype = Method;
   gstat = false;
   virt  = Normal;

   previous = QSharedPointer<Entry>();
   s_packageCommentAllowed = true;
}

static void initEntry()
{
   current->protection = protection ;
   current->mtype      = mtype;
   current->virt       = virt;
   current->stat       = gstat;
   current->m_srcLang  = SrcLangExt_Python;

   current->setParent(current_root);

   initGroupInfo(current);
   gstat = false;
}

static void newEntry()
{
   previous = current;
   current_root->addSubEntry(current, current_root);

   current = QMakeShared<Entry>();
   initEntry();
}

static void newVariable()
{
   if (! current->m_entryName.isEmpty() && current->m_entryName.at(0) == '_') {
      // mark as private
      current->protection = Private;
   }

   if (current_root->section & Entry::COMPOUND_MASK) {
      // mark as class variable
      current->stat = true;
   }

   newEntry();
}

static void newFunction()
{
   if (current->m_entryName.startsWith("__") && current->m_entryName.endsWith("__")) {

      // special method name, refer to http://docs.python.org/ref/specialnames.html
      current->protection = Public;

   } else if (current->m_entryName.at(0) == '_') {
      current->protection = Private;

   }
}

static inline int computeIndent(const QString &str)
{
   static const int tabSize = Config::getInt("tab-size");

   int col = 0;

   for (auto c : str)  {

      if (c == ' ') {
         col++;

      } else if (c == '\t') {
         col += tabSize - (col % tabSize);

      } else {
         break;
      }
   }

   return col;
}

static QString findPackageScopeFromPath(const QString &path)
{
   static QHash<QString, QString> s_packageNameCache;

   QString pScope = s_packageNameCache.value(path);

   if (! pScope.isEmpty()) {
      return pScope;
   }

   // found package initialization file
   QFileInfo pf(path + "/__init__.py");

   if (pf.exists()) {
      int pos = path.lastIndexOf('/');

      if (pos != -1) {
         QString scope = findPackageScopeFromPath(path.left(pos));

         if (! scope.isEmpty()) {
            scope += "::";
         }

         scope += path.mid(pos + 1);
         s_packageNameCache.insert(path, scope);
         return scope;
      }
   }

   return QString("");
}

static QString findPackageScope(const QString &fileName)
{
   if (! fileName.isEmpty()) {
      return QString("");
   }

   QFileInfo fi(fileName);

   return findPackageScopeFromPath(fi.absolutePath());
}

static void lineCount()
{
   DBG_CTX((stderr, "yyLineNr = %d\n", yyLineNr));

   for (const char *p = parse_py_YYtext; *p; ++p) {
      yyLineNr += (*p == '\n') ;
   }
}

static void incLineNr()
{
   DBG_CTX((stderr, "yyLineNr = %d\n", yyLineNr));
   yyLineNr++;
}

static void startCommentBlock(bool brief)
{
   if (brief) {
      current->setData(EntryKey::Brief_File, yyFileName);
      current->briefLine = yyLineNr;

   } else {
      current->setData(EntryKey::MainDocs_File, yyFileName);
      current->docLine = yyLineNr;

   }
}

static void handleCommentBlock(const QString &doc, bool isBrief)
{
   // TODO: Fix this
   docBlockInBody = false;

   if (docBlockInBody && previous) {
      QString tmpDocs = previous->getData(EntryKey::Main_Docs);

      if (! tmpDocs.isEmpty()) {
         previous->setData(EntryKey::Main_Docs,  tmpDocs.trimmed() + "\n\n");
      }
   }

   bool needsEntry;
   int position = 0;
   int lineNr   = isBrief ? current->briefLine : current->docLine;

   while (parseCommentBlock(s_thisParser, (docBlockInBody && previous) ? previous : current,
             doc, yyFileName, lineNr, docBlockInBody ? false : isBrief, isJavaDocStyle, docBlockInBody,
             protection, position, needsEntry)) {

      if (needsEntry) {
         newEntry();
      }
   }

   if (needsEntry) {
      newEntry();
   }
}

static void endOfDef(int correction = 0)
{
   if (bodyEntry) {
      bodyEntry->endBodyLine  = yyLineNr - correction;
      bodyEntry = QSharedPointer<Entry>();
   }

   newEntry();
}

static void addToOutput(const QString &str)
{
   if (s_defVal_active) {
      s_defVal += str;

   } else if (s_docsEntry != nullptr) {
      s_docsEntry->appendData(s_docsEnum, str);
   }
}

static void initTriDoubleQuoteBlock()
{
   docBlockContext = YY_START;
   docBlockInBody  = false;
   isJavaDocStyle  = false;

   QString text = QString::fromUtf8(parse_py_YYtext);
   docBlockSpecial = text.endsWith('!');

   docBlock.resize(0);
   s_doubleQuote = true;
   startCommentBlock(false);
}

static void initTriSingleQuoteBlock()
{
   docBlockContext = YY_START;
   docBlockInBody  = false;
   isJavaDocStyle  = false;

   QString text = QString::fromUtf8(parse_py_YYtext);
   docBlockSpecial = text.endsWith('!');

   docBlock.resize(0);
   s_doubleQuote = false;
   startCommentBlock(false);
}

static void initSpecialBlock()
{
   docBlockContext  = YY_START;
   docBlockInBody   = false;
   isJavaDocStyle   = true;
   docBrief         = true;

   docBlock.resize(0);
   startCommentBlock(true);
}

static void searchFoundDef()
{
   current->setData(EntryKey::File_Name, yyFileName);
   current->startLine = yyLineNr;
   current->bodyLine  = yyLineNr;

   current->section   = Entry::FUNCTION_SEC;
   current->m_srcLang = SrcLangExt_Python;
   current->virt      = Normal;
   current->stat      = gstat;
   current->mtype     = (mtype = Method);

   current->m_entryName.resize(0);
   current->setData(EntryKey::Member_Type, "");
   current->setData(EntryKey::Member_Args, "");
   current->argList.clear();

   s_packageCommentAllowed = false;
   gstat = false;
}

static void searchFoundClass()
{
   current->section = Entry::CLASS_SEC;
   current->argList.clear();

   current->appendData(EntryKey::Member_Type, "class");

   current->setData(EntryKey::File_Name, yyFileName);
   current->startLine = yyLineNr;
   current->bodyLine  = yyLineNr;

   s_packageCommentAllowed = false;
}

#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

/* start command character */
/* Main start state */

/* Mid-comment states */
/* %x FuncDoubleComment */
/* %x ClassDoubleComment */

/* Function states */

/* Class states */

/* Variable states */

/* String states */

/* import */

#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define TryClassDocString 3
#define TripleComment 4
#define SpecialComment 5
#define FunctionDec 6
#define FunctionParams 7
#define FunctionBody 8
#define FunctionParamDefVal 9
#define ClassDec 10
#define ClassInheritance 11
#define ClassCaptureIndent 12
#define ClassBody 13
#define VariableDec 14
#define VariableEnd 15
#define VariableAtom 16
#define SingleQuoteString 17
#define DoubleQuoteString 18
#define TripleString 19
#define FromMod 20
#define FromModItem 21
#define Import 22

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int parse_py_YYlex_destroy (void );

int parse_py_YYget_debug (void );

void parse_py_YYset_debug (int debug_flag  );

YY_EXTRA_TYPE parse_py_YYget_extra (void );

void parse_py_YYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *parse_py_YYget_in (void );

void parse_py_YYset_in  (FILE * in_str  );

FILE *parse_py_YYget_out (void );

void parse_py_YYset_out  (FILE * out_str  );

int parse_py_YYget_leng (void );

char *parse_py_YYget_text (void );

int parse_py_YYget_lineno (void );

void parse_py_YYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int parse_py_YYwrap (void );
#else
extern int parse_py_YYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( parse_py_YYtext, parse_py_YYleng, 1, parse_py_YYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( parse_py_YYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( parse_py_YYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, parse_py_YYin))==0 && ferror(parse_py_YYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(parse_py_YYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int parse_py_YYlex (void);

#define YY_DECL int parse_py_YYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after parse_py_YYtext and parse_py_YYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( parse_py_YYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(parse_py_YYtext[parse_py_YYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)parse_py_YYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in parse_py_YYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! parse_py_YYin )
			parse_py_YYin = stdin;

		if ( ! parse_py_YYout )
			parse_py_YYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			parse_py_YYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE );
		}

		parse_py_YY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of parse_py_YYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 541 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2902 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
{
      // start of a function/method definition with indent
      DBG_CTX((stderr, "Found def at %d\n", yyLineNr));

      QString text = QString::fromUtf8(parse_py_YYtext);

      s_indent = computeIndent(text);
      searchFoundDef();
      BEGIN( FunctionDec );
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      // start of a function/method definition
      searchFoundDef();
      BEGIN( FunctionDec );
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      // start of a class definition with indent
      DBG_CTX((stderr,"Found class at %d\n",yyLineNr));

      QString text = QString::fromUtf8(parse_py_YYtext);

      s_indent = computeIndent(text);
      searchFoundClass();
      BEGIN( ClassDec ) ;
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // start of a class definition
     searchFoundClass();
     BEGIN( ClassDec ) ;
   }
	YY_BREAK
case 5:
case 6:
YY_RULE_SETUP
{

      // start of an from import
      s_packageCommentAllowed = false;
      BEGIN( FromMod );
   }
	YY_BREAK
case 7:
case 8:
YY_RULE_SETUP
{

      // start of an import statement
      s_packageCommentAllowed = false;
      BEGIN( Import );
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      // property
      QString text = QString::fromUtf8(parse_py_YYtext);

      current->section   = Entry::VARIABLE_SEC;
      current->mtype     = Property;
      current->m_entryName      = text.trimmed();

      current->setData(EntryKey::File_Name, yyFileName);
      current->startLine = yyLineNr;
      current->bodyLine  = yyLineNr;

      s_packageCommentAllowed = false;

      BEGIN(VariableDec);
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
      // variable
      if (s_search_count) {
         REJECT;
      }

      QString text = QString::fromUtf8(parse_py_YYtext);

      s_indent = computeIndent(text);
      current->section   = Entry::VARIABLE_SEC;
      current->m_entryName      = text.trimmed();

      current->setData(EntryKey::File_Name, yyFileName);;
      current->startLine = yyLineNr;
      current->bodyLine  = yyLineNr;
      s_packageCommentAllowed = false;

      BEGIN(VariableDec);
   }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
{
      // list of variables, can not place the default value so we will skip it later on in a general rule
      // Also note ")" this is to catch also (a,b). the "("
      // is caught in the rule: [(], the ")" will be handled in [)]

      if (s_search_count > 1) {
         REJECT;
      }

      QString text = QString::fromUtf8(parse_py_YYtext);
      s_indent = computeIndent(text);

      current->section   = Entry::VARIABLE_SEC;
      current->m_entryName      = text.trimmed();

      current->setData(EntryKey::File_Name, yyFileName);
      current->startLine = yyLineNr;
      current->bodyLine  = yyLineNr;

      s_packageCommentAllowed = false;
      newVariable();
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      // start of a single quoted string
      s_stringContext = YY_START;
      s_defVal_active = false;
      s_docsEntry     = QSharedPointer<Entry>();

      s_packageCommentAllowed = false;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      // start of a double quoted string
      s_stringContext = YY_START;
      s_defVal_active = false;
      s_docsEntry     = QSharedPointer<Entry>();

      s_packageCommentAllowed = false;

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      gstat = true;
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      // Unix type script comment
      if (yyLineNr != 1)   {
         REJECT;
      }
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      // normal comment
      s_packageCommentAllowed = false;
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      // some other identifier
      s_packageCommentAllowed = false;
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_curIndent  = computeIndent(text);
   }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{
      // new line
      lineCount();
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      // start of a comment block
      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      // start of a comment block
      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // start of a special comment
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_curIndent  = computeIndent(text);

      s_packageCommentAllowed = false;
      initSpecialBlock();
      BEGIN(SpecialComment);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      // we have to do something with (
      s_search_count += 1;
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      // we have to do something with )
      s_search_count -= 1;
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      // any other character...this is the major default
      // that should catch everything else in Body
   }
	YY_BREAK

case 26:
YY_RULE_SETUP
{
      // python3 style imports
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      // from package import
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_packageName = text;
   }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
      BEGIN(FromModItem);
   }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      BEGIN(Search);
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      unput(*parse_py_YYtext);
      BEGIN(Search);
   }
	YY_BREAK

case 32:
YY_RULE_SETUP
{
      // import all
      QString item      = s_packageName;

      current->m_entryName     = removeRedundantWhiteSpace(substitute(item,".","::"));
      current->section  = Entry::USINGDIR_SEC;
      current->setData(EntryKey::File_Name, yyFileName);

      current_root->addSubEntry(current, current_root);

      current = QMakeShared<Entry>();
      initEntry();
      BEGIN(Search);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      QString item = s_packageName+"." + text;

      current->m_entryName = removeRedundantWhiteSpace(substitute(item,".","::"));
      current->section  = Entry::USINGDECL_SEC;
      current->setData(EntryKey::File_Name, yyFileName);

      current_root->addSubEntry(current, current_root);
      current = QMakeShared<Entry>();
      initEntry();
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(parse_py_YYtext);
      QString item  = s_packageName+"." + text;

      current->m_entryName = removeRedundantWhiteSpace(substitute(item,".","::"));
      current->section  = Entry::USINGDECL_SEC;
      current->setData(EntryKey::File_Name, yyFileName);

      current_root->addSubEntry(current, current_root);
      current = QMakeShared<Entry>();
      initEntry();
      BEGIN(Search);
   }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      BEGIN(Search);
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      unput(*parse_py_YYtext);
      BEGIN(Search);
   }
	YY_BREAK

case 39:
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(parse_py_YYtext);

      current->m_entryName = removeRedundantWhiteSpace(substitute(text,".","::"));
      current->section  = Entry::USINGDECL_SEC;
      current->setData(EntryKey::File_Name, yyFileName);

      current_root->addSubEntry(current, current_root);
      current = QMakeShared<Entry>();
      initEntry();
      BEGIN(Search);
   }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      BEGIN(Search);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      unput(*parse_py_YYtext);
      BEGIN(Search);
   }
	YY_BREAK

case 43:
YY_RULE_SETUP
{
         QString text = QString::fromUtf8(parse_py_YYtext);

         DBG_CTX((stderr,"Found instance method variable %s in %s at %d\n", csPrintable(text.mid(5)),
                  csPrintable(current_root->m_entryName), yyLineNr));

         current->m_entryName      = text.mid(5);
         current->section   = Entry::VARIABLE_SEC;

         current->setData(EntryKey::File_Name,   yyFileName);
         current->startLine = yyLineNr;
         current->bodyLine  = yyLineNr;

         current->setData(EntryKey::Member_Type, "");

         if (current->m_entryName.at(0) == '_') {
            // mark as private
            current->protection = Private;
         }

         newEntry();
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      DBG_CTX(stderr, "Found class method variable %s in %s at%d\n",
                  csPrintable(text.mid(4)), csPrintable(current_root->m_entryName), yyLineNr);

      current->m_entryName      = text.mid(4);
      current->section   = Entry::VARIABLE_SEC;

      current->setData(EntryKey::File_Name, yyFileName);
      current->startLine = yyLineNr;
      current->bodyLine  = yyLineNr;

      current->setData(EntryKey::Member_Type, "");

      if (current->m_entryName.at(0)=='_') {
         // mark as private
         current->protection = Private;
      }

   newEntry();
                      }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      // start of a comment block
      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      // start of a comment block
      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // start of a special comment
      initSpecialBlock();
      BEGIN(SpecialComment);
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      // #
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      // start of a single quoted string
      s_stringContext = YY_START;
      s_defVal_active = false;
      s_docsEntry     = QSharedPointer<Entry>();

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // start of a double quoted string
      s_stringContext = YY_START;
      s_defVal_active = false;
      s_docsEntry     = QSharedPointer<Entry>();
      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{
      incLineNr();
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      // identifiers
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      // other uninteresting stuff
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // anything else
   }
	YY_BREAK

case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
      DBG_CTX((stderr, "indent %d <= %d\n", computeIndent(text.mid(1)), s_indent));

      QString text = QString::fromUtf8(parse_py_YYtext);

      if (computeIndent(text.mid(1)) <= s_indent)  {

         for (int i = parse_py_YYleng - 1; i >= 0; i--) {
            unput(parse_py_YYtext[i]);
         }

         endOfDef();
         BEGIN(Search);

      } else {
         incLineNr();
         current->appendData(EntryKey::Source_Text, text);
      }
   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (computeIndent(text.mid(1)) <= s_indent)  {

         for (int i = parse_py_YYleng - 1; i >= 0; i--) {
           unput(parse_py_YYtext[i]);
         }

         endOfDef();
         BEGIN(Search);

      } else {
         incLineNr();
         current->appendData(EntryKey::Source_Text, text);
      }
   }
	YY_BREAK
case YY_STATE_EOF(FunctionBody):
{
         endOfDef();
         yyterminate();
   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // skip empty line
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 58:
YY_RULE_SETUP
{
      // something at indent >0
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      s_curIndent = computeIndent(text);

      if (s_curIndent <= s_indent) {
         // jumped out of the function
         endOfDef(1);
         BEGIN(Search);
      }
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      // start of a single quoted string
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      s_stringContext = YY_START;
      s_specialBlock  = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Source_Text;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
      // start of a double quoted string
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      s_stringContext = YY_START;
      s_specialBlock  = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Source_Text;

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 61:
YY_RULE_SETUP
{
      // non-special stuff
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);;
      s_specialBlock = false;
   }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
      // normal comment
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 63:
YY_RULE_SETUP
{
      // comment half way
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      incLineNr();
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
      // any character
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text[0]);

      s_specialBlock = false;
   }
	YY_BREAK
case 66:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
      initTriDoubleQuoteBlock();

      BEGIN(TripleComment);
   }
	YY_BREAK
case 67:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // start of a special comment
      initSpecialBlock();
      BEGIN(SpecialComment);
   }
	YY_BREAK

case 69:
YY_RULE_SETUP
{
      //found function name
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "def");
      }

      current->m_entryName = text;
      current->m_entryName = current->m_entryName.trimmed();
      newFunction();
   }
	YY_BREAK
case 70:
YY_RULE_SETUP
{
      // function without arguments
      s_specialBlock     = true;          // expecting a docstring
      bodyEntry          = current;
      current->bodyLine  = yyLineNr;
      BEGIN( FunctionBody );
   }
	YY_BREAK
case 71:
YY_RULE_SETUP
{
      BEGIN( FunctionParams );
   }
	YY_BREAK

case 72:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      // Name of parameter
      QString text = QString::fromUtf8(parse_py_YYtext);
      lineCount();

      current->argList.append( Argument() );
      current->argList.last().name = text.trimmed();
      current->argList.last().type = "";
   }
	YY_BREAK
case 74:
YY_RULE_SETUP
{
      // default value

      // TODO: this rule is too simple, need to be able to
      // match things like =")" as well

      s_defVal.resize(0);
      s_braceCount = 0;
      BEGIN(FunctionParamDefVal);
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      // end of parameter list
      current->setData(EntryKey::Member_Args, argListToString(current->argList));
   }
	YY_BREAK
case 76:
YY_RULE_SETUP
{
      // expecting a docstring

      s_specialBlock    = true;
      bodyEntry         = current;
      current->bodyLine = yyLineNr;
      BEGIN( FunctionBody );
   }
	YY_BREAK
case 77:
YY_RULE_SETUP
{
      // a comment
   }
	YY_BREAK
case 78:
YY_RULE_SETUP
{
      // default rule inside arguments
   }
	YY_BREAK

case 79:
case 80:
YY_RULE_SETUP
{
      // internal opening brace, assumme code is correct and braces match
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_braceCount++;
      s_defVal += text[0];
   }
	YY_BREAK
case 81:
case 82:
case 83:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (s_braceCount == 0){
         // end of default argument

         if (current->argList.listEmpty()) {
            current->argList.last().defval = s_defVal.trimmed();
         }

          if (text[0] != ',') {
             current->setData(EntryKey::Member_Args,  argListToString(current->argList));
          }

          BEGIN(FunctionParams);

      }  else  {
         // continue

         if (text[0] != ',') {
            s_braceCount--;
         }

         s_defVal += text[0];
      }
   }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal   += text[0];

      s_defVal_active = true;
      s_docsEntry     = QSharedPointer<Entry>();

      s_stringContext  = FunctionParamDefVal;
      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal   += text[0];

      s_defVal_active = true;
      s_docsEntry     = QSharedPointer<Entry>();;

      s_stringContext = FunctionParamDefVal;
      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];
      incLineNr();
   }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];
   }
	YY_BREAK

case 88:
/* rule 88 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // new def at indent 0
      incLineNr();
      endOfDef();
      BEGIN(Search);
   }
	YY_BREAK
case 89:
/* rule 89 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // start of a special comment at indent 0
      incLineNr();
      endOfDef();
      BEGIN(Search);
   }
	YY_BREAK
case 90:
/* rule 90 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // skip empty line
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case YY_STATE_EOF(ClassBody):
{
         endOfDef();
         yyterminate();
   }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
      // something at indent >0
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_curIndent  = computeIndent(text);

      DBG_CTX((stderr,"s_curIndent = %d s_indent = %d\n", s_curIndent, s_indent));

      if (s_curIndent<=s_indent)  {
         // jumped out of the class/method

         endOfDef(1);
         s_indent = s_curIndent;
         BEGIN(Search);

      } else {
         current->appendData(EntryKey::Source_Text, text);
      }
   }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      // start of a single quoted string
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text[0]);

      s_stringContext = YY_START;
      s_specialBlock  = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Source_Text;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
      // start of a double quoted string
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text[0]);

      s_stringContext = YY_START;
      s_specialBlock  = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Source_Text;

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
      // non-special stuff
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
      s_specialBlock = false;
   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text[0]);
      incLineNr();
   }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
      // normal comment
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
      // any character
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_specialBlock = false;
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK

case 100:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "class");
      }

      current->section = Entry::CLASS_SEC;
      current->m_entryName = text;

      // prepend scope in case of nested classes
      if (current_root->section & Entry::SCOPE_MASK) {
         current->m_entryName.prepend(current_root->m_entryName + "::");
      }

      current->m_entryName     = current->m_entryName.trimmed();
      current->setData(EntryKey::File_Name,   yyFileName);

      docBlockContext   = YY_START;
      docBlockInBody    = false;
      isJavaDocStyle    = false;

      docBlock.resize(0);
      BEGIN(ClassInheritance);
   }
	YY_BREAK

case 101:
YY_RULE_SETUP
{
      // syntactic sugar for the list
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
      // begin of the class definition
      s_specialBlock     = true;                // expecting a docstring
      current->bodyLine  = yyLineNr;
      current->setData(EntryKey::Source_Text, "");
      BEGIN(ClassCaptureIndent);
   }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->extends.append(BaseInfo(substitute(text,".","::"), Public, Normal));
      // Has base class-do stuff
   }
	YY_BREAK

case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{
      // Blankline - ignore, keep looking for indentation.
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      lineCount();
   }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);

      initTriDoubleQuoteBlock();
      current->appendData(EntryKey::Source_Text, text);
      BEGIN(TripleComment);
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);

      initTriSingleQuoteBlock();
      current->appendData(EntryKey::Source_Text, text);
      BEGIN(TripleComment);
   }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
         // start of a special comment
         initSpecialBlock();
         BEGIN(SpecialComment);
      }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
         // ignore comment with just one #
      }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      s_curIndent = computeIndent(text);
      bodyEntry   = current;

      DBG_CTX((stderr,"setting indent %d\n",s_curIndent));

      BEGIN(ClassBody);
   }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
      // Just pushback an empty class, and resume parsing the body
      QString text = QString::fromUtf8(parse_py_YYtext);

      newEntry();
      current->appendData(EntryKey::Source_Text, text);

      BEGIN( Search );
   }
	YY_BREAK

case 111:
YY_RULE_SETUP
{
      // the assignment operator
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_start_init = true;

      current->setData(EntryKey::Initial_Value, text + " ");
   }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
      // spaces
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      // integer value
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "int");
      }

      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
      // floating point value
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "float");
      }

      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
      // boolean value
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "bool");
      }

      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
      // string
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "string");
      }

      current->appendData(EntryKey::Initial_Value, text);

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      s_stringContext = VariableDec;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
      // string
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "string");
      }

      current->appendData(EntryKey::Initial_Value, text);

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      s_stringContext = VariableDec;
      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
      // start of a comment block
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "string");
      }

      current->appendData(EntryKey::Initial_Value, text);

      s_doubleQuote = true;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      s_stringContext = VariableDec;

      BEGIN(TripleString);
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
      // start of a comment block
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "string");
      }

      current->appendData(EntryKey::Initial_Value, text);

      s_doubleQuote = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      s_stringContext = VariableDec;

      BEGIN(TripleString);
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      // tuple, only when direct after =

      if (current->mtype != Property && s_start_init) {
         current->setData(EntryKey::Member_Type, "tuple");
      }

      current->appendData(EntryKey::Initial_Value, "(");

      s_atomStart = '(';
      s_atomEnd   = ')';
      s_atomCount = 1;
      BEGIN( VariableAtom );
   }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
      // list
      if (s_start_init) {
         current->setData(EntryKey::Member_Type, "list");
      }

      current->appendData(EntryKey::Initial_Value, "[");

      s_atomStart = '[';
      s_atomEnd   = ']';
      s_atomCount = 1;
      BEGIN( VariableAtom );
   }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
      // dictionary

      if (s_start_init) {
         current->setData(EntryKey::Member_Type, "dictionary");
      }

      current->appendData(EntryKey::Initial_Value, "{");

      s_atomStart = '{';
      s_atomEnd   = '}';
      s_atomCount = 1;
      BEGIN( VariableAtom );
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      // comment
      BEGIN( VariableEnd );
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      // do something based on the type of the IDENTIFIER
      if (current->getData(EntryKey::Member_Type).isEmpty())  {

         for (auto child : current_root->children() )  {

            if (child->m_entryName == text) {
               current->setData(EntryKey::Member_Type,  child->getData(EntryKey::Member_Type));
               break;
            }
         }
      }

      s_start_init = false;
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_start_init = false;
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
      unput('\n');
      BEGIN( VariableEnd );
   }
	YY_BREAK

case 127:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Initial_Value,  text[0]);

      if (s_atomStart == text[0]) {
         s_atomCount++;
      }
   }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Initial_Value,  text[0]);

      if (s_atomEnd == text[0]) {
         s_atomCount--;
      }

      if (s_atomCount == 0) {
         s_start_init = false;
         BEGIN(VariableDec);
      }
   }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_specialBlock = false;
      current->appendData(EntryKey::Source_Text, text);
      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);

      s_specialBlock = false;
      current->appendData(EntryKey::Source_Text, text);
      initTriSingleQuoteBlock();

      BEGIN(TripleComment);
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      s_stringContext = YY_START;
      current->appendData(EntryKey::Initial_Value, "'");

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
      s_stringContext = YY_START;
      current->appendData(EntryKey::Initial_Value, "\"");

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Initial_Value, text);

      incLineNr();
   }
	YY_BREAK

case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      newVariable();
      BEGIN(Search);
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
      unput(*parse_py_YYtext);
      newVariable();
      BEGIN(Search);
   }
	YY_BREAK
case YY_STATE_EOF(VariableEnd):
{
      yyterminate();
      newEntry();
   }
	YY_BREAK

case 138:
case 139:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (s_doubleQuote == (text[0] == '"'))  {

         if (s_specialBlock) {
            // expecting a docstring
            QString actualDoc = docBlock;

            if (! docBlockSpecial) {
               // legacy unformatted docstring

               actualDoc.prepend("\\verbatim ");
               actualDoc.append("\\endverbatim ");
            }

            handleCommentBlock(actualDoc, false);

         } else if (s_packageCommentAllowed) {
            // expecting module docs
            QString actualDoc = docBlock;

            if (! docBlockSpecial) {
               // legacy unformatted docstring

               actualDoc.prepend("\\verbatim ");
               actualDoc.append("\\endverbatim ");
            }

            actualDoc.prepend("\\namespace " + s_moduleScope + "\\_linebr ");
            handleCommentBlock(actualDoc, false);
         }

         if ((docBlockContext == ClassBody) || docBlockContext == FunctionBody) {
            current->appendData(EntryKey::Source_Text, docBlock);
            current->appendData(EntryKey::Source_Text, text);
         }

         BEGIN(docBlockContext);

      } else  {
         docBlock += text;

      }

      s_packageCommentAllowed = false;
   }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
      // leading whitespace
      QString text = QString::fromUtf8(parse_py_YYtext);
      int indent   = computeIndent(text);

      if (indent >= s_curIndent) {
         // strip s_curIndent amount of whitespace

         for (int i= 0; i<indent - s_curIndent; i++) {
            docBlock+=' ';
         }

         DBG_CTX((stderr,"stripping indent %d\n",s_curIndent));

      } else {
         DBG_CTX((stderr,"not stripping: %d<%d\n",indent,s_curIndent));
         docBlock += text;

      }
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text;
   }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      incLineNr();
      docBlock += text;
   }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      // escaped char
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text;
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text;
   }
	YY_BREAK

case 145:
YY_RULE_SETUP
{
      // skip leading hashes
   }
	YY_BREAK
case 146:
/* rule 146 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // continuation of the comment on the next line
      docBlock  += '\n';
      docBrief  =  false;
      startCommentBlock(false);
      incLineNr();
   }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
      // any other stuff
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text;
   }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
{
      // new line that ends the comment
      handleCommentBlock(docBlock, docBrief);
      incLineNr();
      BEGIN(docBlockContext);
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      // anything we missed
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text[0];
   }
	YY_BREAK

case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{
      // line continuation
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
      incLineNr();
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
{
      // espaced char
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK
case 152:
YY_RULE_SETUP
{
      // tripple double quotes
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK
case 153:
YY_RULE_SETUP
{
      // end of the string
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
      BEGIN(s_stringContext);
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
{
      // normal chars
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK
case 155:
YY_RULE_SETUP
{
      // normal char
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK

case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
{
      // line continuation
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
      incLineNr();
   }
	YY_BREAK
case 157:
YY_RULE_SETUP
{
      // escaped char
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
                               }
	YY_BREAK
case 158:
YY_RULE_SETUP
{
      // tripple single quotes
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK
case 159:
YY_RULE_SETUP
{
      // end of the string
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
      BEGIN(s_stringContext);
   }
	YY_BREAK
case 160:
YY_RULE_SETUP
{
      // normal chars
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK
case 161:
YY_RULE_SETUP
{
      // normal char
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK

case 162:
case 163:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);

      bool xx = (text[0] == '"');

      if (s_doubleQuote == xx)  {
         BEGIN(s_stringContext);
      }
   }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      lineCount();
      addToOutput(text);
   }
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      incLineNr();
      addToOutput(text);
   }
	YY_BREAK
case 166:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK

/* ------------ End rules -------------- */
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
{
      lineCount();
   }
	YY_BREAK
case 168:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 169:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Search):
			case YY_STATE_EOF(SearchMemVars):
			case YY_STATE_EOF(TryClassDocString):
			case YY_STATE_EOF(TripleComment):
			case YY_STATE_EOF(SpecialComment):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(FunctionParamDefVal):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(ClassCaptureIndent):
			case YY_STATE_EOF(VariableDec):
			case YY_STATE_EOF(VariableAtom):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
			case YY_STATE_EOF(FromMod):
			case YY_STATE_EOF(FromModItem):
			case YY_STATE_EOF(Import):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed parse_py_YYin at a new source and called
			 * parse_py_YYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = parse_py_YYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( parse_py_YYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * parse_py_YYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of parse_py_YYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			parse_py_YYrestart(parse_py_YYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) parse_py_YYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 541 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 541 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 540);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up parse_py_YYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					parse_py_YYrestart(parse_py_YYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( parse_py_YYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve parse_py_YYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void parse_py_YYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        parse_py_YYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE );
	}

	parse_py_YY_init_buffer(YY_CURRENT_BUFFER,input_file );
	parse_py_YY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void parse_py_YY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		parse_py_YYpop_buffer_state();
	 *		parse_py_YYpush_buffer_state(new_buffer);
     */
	parse_py_YYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	parse_py_YY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (parse_py_YYwrap()) processing, but the only time this flag
	 * is looked at is after parse_py_YYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void parse_py_YY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	parse_py_YYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE parse_py_YY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) parse_py_YYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in parse_py_YY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) parse_py_YYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in parse_py_YY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	parse_py_YY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with parse_py_YY_create_buffer()
 * 
 */
    void parse_py_YY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		parse_py_YYfree((void *) b->yy_ch_buf  );

	parse_py_YYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a parse_py_YYrestart() or at EOF.
 */
    static void parse_py_YY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	parse_py_YY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then parse_py_YY_init_buffer was _probably_
     * called from parse_py_YYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void parse_py_YY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		parse_py_YY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void parse_py_YYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	parse_py_YYensure_buffer_stack();

	/* This block is copied from parse_py_YY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from parse_py_YY_switch_to_buffer. */
	parse_py_YY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void parse_py_YYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	parse_py_YY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		parse_py_YY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void parse_py_YYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)parse_py_YYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in parse_py_YYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)parse_py_YYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in parse_py_YYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE parse_py_YY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) parse_py_YYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in parse_py_YY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	parse_py_YY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to parse_py_YYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       parse_py_YY_scan_bytes() instead.
 */
YY_BUFFER_STATE parse_py_YY_scan_string (yyconst char * yystr )
{
    
	return parse_py_YY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to parse_py_YYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE parse_py_YY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) parse_py_YYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in parse_py_YY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = parse_py_YY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in parse_py_YY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up parse_py_YYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		parse_py_YYtext[parse_py_YYleng] = (yy_hold_char); \
		(yy_c_buf_p) = parse_py_YYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		parse_py_YYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int parse_py_YYget_lineno  (void)
{
        
    return parse_py_YYlineno;
}

/** Get the input stream.
 * 
 */
FILE *parse_py_YYget_in  (void)
{
        return parse_py_YYin;
}

/** Get the output stream.
 * 
 */
FILE *parse_py_YYget_out  (void)
{
        return parse_py_YYout;
}

/** Get the length of the current token.
 * 
 */
int parse_py_YYget_leng  (void)
{
        return parse_py_YYleng;
}

/** Get the current token.
 * 
 */

char *parse_py_YYget_text  (void)
{
        return parse_py_YYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void parse_py_YYset_lineno (int  line_number )
{
    
    parse_py_YYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see parse_py_YY_switch_to_buffer
 */
void parse_py_YYset_in (FILE *  in_str )
{
        parse_py_YYin = in_str ;
}

void parse_py_YYset_out (FILE *  out_str )
{
        parse_py_YYout = out_str ;
}

int parse_py_YYget_debug  (void)
{
        return parse_py_YY_flex_debug;
}

void parse_py_YYset_debug (int  bdebug )
{
        parse_py_YY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from parse_py_YYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    parse_py_YYin = stdin;
    parse_py_YYout = stdout;
#else
    parse_py_YYin = (FILE *) 0;
    parse_py_YYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * parse_py_YYlex_init()
     */
    return 0;
}

/* parse_py_YYlex_destroy is for both reentrant and non-reentrant scanners. */
int parse_py_YYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		parse_py_YY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		parse_py_YYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	parse_py_YYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    parse_py_YYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * parse_py_YYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *parse_py_YYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *parse_py_YYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void parse_py_YYfree (void * ptr )
{
	free( (char *) ptr );	/* see parse_py_YYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static void parseCompounds(QSharedPointer<Entry> rt)
{
   // safter to make a temp copy
   const QVector<QSharedPointer<Entry>> tmpChildren = rt->children();

   for (auto ce : tmpChildren) {

      if (! ce->getData(EntryKey::Source_Text).isEmpty()) {
         // init scanner state

         s_inputString   = ce->getData(EntryKey::Source_Text);
         s_inputPosition = 0;

         parse_py_YYrestart(parse_py_YYin );

         if (ce->section & Entry::COMPOUND_MASK) {
            current_root = ce;
            BEGIN( Search );

         } else if (ce->parent()) {
            current_root = ce->parent();
            BEGIN( SearchMemVars );
         }

         yyFileName = ce->getData(EntryKey::File_Name);
         yyLineNr   = ce->bodyLine ;

         current = QMakeShared<Entry>();
         initEntry();

         groupEnterCompound(yyFileName, yyLineNr, ce->m_entryName);

         parse_py_YYlex() ;
         s_lexInit = true;

         current = QSharedPointer<Entry>();
         ce->setData(EntryKey::Source_Text, "");

         groupLeaveCompound(yyFileName, yyLineNr, ce->m_entryName);

      }
      parseCompounds(ce);
   }
}

static void parseMain(const QString &fileName, const QString &fileBuf, QSharedPointer<Entry> rt)
{
   initParser();

   s_inputString   = fileBuf;
   s_inputPosition = 0;

   protection      = Public;
   mtype           = Method;
   gstat           = false;
   virt            = Normal;

   current_root    = rt;
   s_specialBlock  = false;

   s_inputFile.setFileName(fileName);

   if (s_inputFile.open(QIODevice::ReadOnly)) {
      yyLineNr   = 1;
      yyFileName = fileName;

      //setContext();
      msg("Parsing %s\n", csPrintable(yyFileName));

      QFileInfo fi(fileName);
      s_moduleScope = findPackageScope(fileName);

      QString baseName = fi.baseName();

      if (baseName != "__init__") { // package initializer file is not a package itself
         if (!s_moduleScope.isEmpty()) {
            s_moduleScope += "::";
         }
         s_moduleScope += baseName;
      }

      current            = QMakeShared<Entry>();
      initEntry();

      current->m_entryName      = s_moduleScope;
      current->section   = Entry::NAMESPACE_SEC;
      current->setData(EntryKey::Member_Type, "namespace");

      current->setData(EntryKey::File_Name,   yyFileName);
      current->startLine = yyLineNr;
      current->bodyLine  = yyLineNr;

      rt->addSubEntry(current, rt);

      current_root  = current;
      initParser();

      current = QMakeShared<Entry>();
      groupEnterFile(yyFileName, yyLineNr);

      current->reset();
      initEntry();
      parse_py_YYrestart(parse_py_YYin );

      BEGIN( Search );
      parse_py_YYlex();
      s_lexInit = true;

      groupLeaveFile(yyFileName, yyLineNr);

      current_root->setData(EntryKey::Source_Text, "");

      current = QSharedPointer<Entry>();
      parseCompounds(current_root);

      s_inputFile.close();
   }
}

static void parsePrototype(const QString &text)
{
   if (text.isEmpty()) {
      warn(yyFileName, yyLineNr, "Empty prototype found");
      return;
   }

   s_specialBlock = false;
   s_packageCommentAllowed = false;

   QString orgInputString;
   int orgInputPosition;
   YY_BUFFER_STATE orgState;

   // save scanner state
   orgState = YY_CURRENT_BUFFER;
   parse_py_YY_switch_to_buffer(parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE));
   orgInputString   = s_inputString;
   orgInputPosition = s_inputPosition;

   // set new string
   s_inputString   = text;
   s_inputPosition = 0;

   parse_py_YYrestart(parse_py_YYin );

   BEGIN( FunctionDec );

   parse_py_YYlex();
   s_lexInit = true;

   current->m_entryName = current->m_entryName.trimmed();
   if (current->section == Entry::MEMBERDOC_SEC && current->getData(EntryKey::Member_Args).isEmpty()) {
      current->section = Entry::VARIABLEDOC_SEC;
   }

   // restore original scanner state

   YY_BUFFER_STATE tmpBuf = YY_CURRENT_BUFFER;
   parse_py_YY_switch_to_buffer(orgState);
   parse_py_YY_delete_buffer(tmpBuf);

   s_inputString   = orgInputString;
   s_inputPosition = orgInputPosition;
}

void pyFreeParser()
{
   if (s_lexInit) {
      parse_py_YYlex_destroy();
   }
}

void Python_Parser::parseInput(const QString &fileName, const QString &fileBuf,
                  QSharedPointer<Entry> root, enum ParserMode mode, QStringList &includedFiles, bool useClang)
{
   s_thisParser = this;

   printlex(parse_py_YY_flex_debug, true, __FILE__, fileName);
   ::parseMain(fileName, fileBuf, root);
   printlex(parse_py_YY_flex_debug, false, __FILE__, fileName);
}

bool Python_Parser::needsPreprocessing(const QString &)
{
  return false;
}

void Python_Parser::parseCode(CodeOutputInterface &codeOutIntf, const QString &scopeName,
                  const QString &input, SrcLangExt, bool isExampleBlock,
                  const QString &exampleName, QSharedPointer<FileDef> fileDef, int startLine,
                  int endLine, bool inlineFragment, QSharedPointer<MemberDef> memberDef,
                  bool showLineNumbers, QSharedPointer<Definition> searchCtx, bool collectXRefs )
{
   ::parsePythonCode(codeOutIntf, scopeName, input, isExampleBlock, exampleName,
                  fileDef, startLine, endLine, inlineFragment, memberDef,
                  showLineNumbers, searchCtx, collectXRefs);
}

void Python_Parser::parsePrototype(const QString &text)
{
   ::parsePrototype(text);
}

void Python_Parser::resetCodeParserState()
{
   ::resetPythonCodeParserState();
}

