/************************************************************************
*
* Copyright (c) 2014-2022 Barbara Geller & Ansel Sermersheim
* Copyright (c) 1997-2014 Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer parse_py_YY_create_buffer
#define yy_delete_buffer parse_py_YY_delete_buffer
#define yy_flex_debug parse_py_YY_flex_debug
#define yy_init_buffer parse_py_YY_init_buffer
#define yy_flush_buffer parse_py_YY_flush_buffer
#define yy_load_buffer_state parse_py_YY_load_buffer_state
#define yy_switch_to_buffer parse_py_YY_switch_to_buffer
#define yyin parse_py_YYin
#define yyleng parse_py_YYleng
#define yylex parse_py_YYlex
#define yylineno parse_py_YYlineno
#define yyout parse_py_YYout
#define yyrestart parse_py_YYrestart
#define yytext parse_py_YYtext
#define yywrap parse_py_YYwrap
#define yyalloc parse_py_YYalloc
#define yyrealloc parse_py_YYrealloc
#define yyfree parse_py_YYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE parse_py_YYrestart(parse_py_YYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int parse_py_YYleng;

extern FILE *parse_py_YYin, *parse_py_YYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up parse_py_YYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via parse_py_YYrestart()), so that the user can continue scanning by
	 * just pointing parse_py_YYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when parse_py_YYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int parse_py_YYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow parse_py_YYwrap()'s to do buffer switches
 * instead of setting up a fresh parse_py_YYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void parse_py_YYrestart (FILE *input_file  );
void parse_py_YY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE parse_py_YY_create_buffer (FILE *file,int size  );
void parse_py_YY_delete_buffer (YY_BUFFER_STATE b  );
void parse_py_YY_flush_buffer (YY_BUFFER_STATE b  );
void parse_py_YYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void parse_py_YYpop_buffer_state (void );

static void parse_py_YYensure_buffer_stack (void );
static void parse_py_YY_load_buffer_state (void );
static void parse_py_YY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER parse_py_YY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE parse_py_YY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE parse_py_YY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE parse_py_YY_scan_bytes (yyconst char *bytes,int len  );

void *parse_py_YYalloc (yy_size_t  );
void *parse_py_YYrealloc (void *,yy_size_t  );
void parse_py_YYfree (void *  );

#define yy_new_buffer parse_py_YY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        parse_py_YYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        parse_py_YYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define parse_py_YYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *parse_py_YYin = (FILE *) 0, *parse_py_YYout = (FILE *) 0;

typedef int yy_state_type;

extern int parse_py_YYlineno;

int parse_py_YYlineno = 1;

extern char *parse_py_YYtext;
#define yytext_ptr parse_py_YYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up parse_py_YYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	parse_py_YYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 203
#define YY_END_OF_BUFFER 204
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1131] =
    {   0,
    16528,16528,  146,  146,   30,   30,   36,   36,   41,   41,
      204,  202,  203,  201,  203,   25,  202,  203,   25,  202,
      203,   19,  201,  203,   13,   25,  202,  203,   25,  202,
      203,   12,   25,  202,  203,   23,   25,  202,  203,   24,
       25,  202,  203,   25,  202,  203,   17,   25,  202,  203,
    16395,   17,   25,  202,  203,16395,   17,   25,  202,  203,
    16395,   17,   25,  202,  203,16395,   17,   25,  202,  203,
    16395,   17,   25,  202,  203,16395,   17,   25,  202,  203,
    16395,   17,   25,  202,  203,16395,   18,   25,  202,  203,
       17,   25,  202,  203,16393,16394,16395,   17,   25,  202,

      203,16393,16394,16395,   17,   25,  202,  203,16393,16394,
    16395,   17,   25,  202,  203,16393,16394,16395,   17,   25,
      202,  203,16393,16394,16395,   17,   25,  202,  203,16393,
    16394,16395,   17,   25,  202,  203,16393,16394,16395,   17,
       25,  202,  203,16393,16394,16395,   53,   54,  202,  203,
       51,  201,  203,   50,   54,  202,  203,   54,  202,  203,
       49,   54,  202,  203,   54,  202,  203,   52,   54,  202,
      203,   52,   54,  202,  203,   52,   54,  202,  203,   52,
       54,  202,  203,   52,   54,  202,  203,   52,   54,  202,
      203,   52,   53,   54,  202,  203,  175,  178,  202,  203,

      178,  202,  203,  176,  201,  203,  178,  202,  203,  178,
      202,  203,  178,  202,  203,  174,  178,  202,  203,  181,
      183,  202,  203,  182,  201,  203,  183,  202,  203,  181,
      183,  202,  203,  179,  183,  202,  203,  202,  203,   72,
      202,  203,   73,  202,  203,  202,  203,   70,  202,  203,
       69,  202,  203,   81,  202,  203,   74,  202,  203,   81,
      202,  203,   78,  202,  203,   75,   81,  202,  203,   74,
       81,  202,  203,   79,  202,  203,   77,   81,  202,  203,
       76,   81,  202,  203,   61,   65,  202,  203,   65,  202,
      203,   64,  201,  203,16439,   60,   65,  202,  203,   63,

       65,  202,  203,   59,   65,  202,  203,   61,   65,  202,
      203,   61,   65,  202,  203,   61,   65,  202,  203,   58,
       65,  202,  203,   63,   65,  202,  203,  104,  202,  203,
      103,  201,  203,  102,  104,  202,  203,  101,  104,  202,
      203,   95,  104,  202,  203,   98,  104,  202,  203,  100,
      104,  202,  203,   99,  104,  202,  203,   94,  104,  202,
      203,   97,  104,  202,  203,   93,  104,  202,  203,   96,
      104,  202,  203,   92,  202,  203,   91,  201,  203,   90,
       92,  202,  203,   89,   92,  202,  203,   84,   92,  202,
      203,   87,   92,  202,  203,   88,   92,  202,  203,   83,

       92,  202,  203,   86,   92,  202,  203,   82,   92,  202,
      203,   85,   92,  202,  203,  115,  202,  203,  114,  201,
      203,  113,  115,  202,  203,  112,  115,  202,  203,  107,
      115,  202,  203,  110,  115,  202,  203,  111,  115,  202,
      203,  106,  115,  202,  203,  109,  115,  202,  203,  105,
      115,  202,  203,  108,  115,  202,  203,  128,  202,  203,
      129,  202,  203,  133,  202,  203,  132,  202,  203,  129,
      202,  203,  130,  202,  203,  131,  202,  203,  202,  203,
      138,  201,  203, 8336,  202,  203,  202,  203, 8336,  202,
      203,  202,  203, 8336,  202,  203, 8336,  202,  203, 8336,

      202,  203,  143,  202,  203,  122,  125,  202,  203,  125,
      202,  203,  123,  201,  203,  121,  125,  202,  203,  125,
      202,  203,  120,  125,  202,  203,  122,  125,  202,  203,
      122,  125,  202,  203,  122,  125,  202,  203,  119,  125,
      202,  203,  159,  202,  203,  146,  159,  202,  203,  160,
      201,  203,  151,  159,  202,  203,  157,  159,  202,  203,
      150,  159,  202,  203,  154,  159,  202,  203,  147,  159,
      202,  203,  147,  159,  202,  203,  145,  159,  202,  203,
      158,  159,  202,  203,  158,  159,  202,  203,  158,  159,
      202,  203,  158,  159,  202,  203,  158,  159,  202,  203,

      155,  159,  202,  203,  158,  159,  202,  203,  156,  159,
      202,  203,  171,  202,  203,  170,  201,  203,  168,  202,
      203,  169,  201,  203,  166,  168,  202,  203,  165,  168,
      202,  203,  161,  168,  202,  203,  162,  168,  202,  203,
      167,  168,  202,  203,  167,  168,  202,  203,  167,  168,
      202,  203,  167,  168,  202,  203,  188,  189,  202,  203,
      189,  202,  203,  187,  189,  202,  203,  189,  202,  203,
      194,  195,  202,  203,  193,  195,  202,  203,  195,  202,
      203,  195,  202,  203,  198,  200,  202,  203,  198,  199,
      201,  203,  198,  200,  202,  203,  198,  200,  202,  203,

      200,  202,  203,  135,  202,  203,  134,  135,  202,  203,
      137,  202,  203,  136,  137,  202,  203,   31,  202,  203,
       30,   31,  202,  203,   29,  201,  203,   26,   31,  202,
      203,   27,   31,  202,  203,   27,   31,  202,  203,   38,
      202,  203,   36,   38,  202,  203,   35,  201,  203,   32,
       38,  202,  203,   37,   38,  202,  203,   34,   38,  202,
      203,16417,   42,  202,  203,   41,   42,  202,  203,   40,
      201,  203,   39,   42,  202,  203,16395,   19,   16,   15,
       16,   17,16395,   17,16395,   17,16395,   17,16395,   17,
    16395,   17,16395,   18,16393,16394,16395,16393,16394,16395,

    16393,16394,16395,16393,16394,16395,16393,16394,16395,   17,
    16393,16394,16395,   17,16393,16394,16395,   17,16393,16394,
    16395,   17,16393,16394,16395,   17,16393,16394,16395,   17,
    16393,16394,16395,   53,   48,   52,   52,   52,   52,   52,
       53,  175,  177,  174,  181,  180,  181,  179,  179,   72,
       70,   71,   70,   69,   74,   80,   75,   79,   76,   61,
    16439,   63,   63,   61,   58,   57,   62,   63,  128,  129,
      131,  138,  142,  141,  143,  122,  124,  122,  119,  118,
      146,  157,  147,  147,  147,  158,  158,  151,  150,  158,
      158,  167,  167,  188,  185,  185,  184,  194,  191,  191,

      190,  198,  198,  198,   30,   27,   27,   36, 8225,   34,
    16417,   41,   39,16395,   20,   16,   15,   16,   22,   21,
     8203,   17,16395,   17,16395,   17,16395,   17,16395,16393,
    16394,16395,16393,16394,16395,16393,16394,16395,16393,16394,
    16395,16393,16394,16395, 8202, 8203, 8202, 8203, 8202, 8203,
       17,16393,16394,16395,   17,16393,16394,16395,   17,16393,
    16394,16395,   17,16393,16394,16395,   45,   48,   47,   46,
       52,   52,  172,  173,   80,   56, 8247,   66,   63,   68,
       68,   67,   62,   63,  131,  139,  142,  141,  140,  116,
      126,  124,  127,  152,  153,  148,  147,  147,  158,  158,

      163,  164,  186,  192,  196,  197,   27,   27, 8225,   39,
       20,   21,   17,16395,    2,   17,16395,   17,16395,16393,
    16394,16395,16393,16394,16395,16393,16394,16395,16393,16394,
    16395,   17,16393,16394,16395,    1,    2,   17,16393,16394,
    16395,   17,16393,16394,16395,   45,   46,   52,   66,   67,
      131,  139,  140,  117,  126,  127,  152,  153,  148,  147,
      158,  149,  158,  163,  164,   27,   27,   39,   17,16395,
        6,   17,16395,16393,16394,16395,    1,16393,16394,16395,
    16393,16394,16395,   17,16393,16394,16395,    5,    6,   17,
    16393,16394,16395,16428,  148,   27,    4,   17,16395,16393,

    16394,16395,    5,16393,16394,16395,    3,    4,   17,16393,
    16394,16395,16428, 8236,16427,   27,   28,    8,    3,16393,
    16394,16395,    7,    8,16427, 8235,   28,    7, 8201,   14
    } ;

static yyconst flex_int16_t yy_accept[587] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    6,
        7,    8,    9,   10,   11,   12,   14,   16,   19,   22,
       25,   29,   32,   36,   40,   44,   47,   52,   57,   62,
       67,   72,   77,   82,   87,   91,   98,  105,  112,  119,
      126,  133,  140,  147,  151,  154,  158,  161,  165,  168,
      172,  176,  180,  184,  188,  192,  197,  201,  204,  207,

      210,  213,  216,  220,  224,  227,  230,  234,  238,  240,
      243,  246,  248,  251,  254,  257,  260,  263,  266,  270,
      274,  277,  281,  285,  289,  292,  296,  300,  304,  308,
      312,  316,  320,  324,  328,  331,  334,  338,  342,  346,
      350,  354,  358,  362,  366,  370,  374,  377,  380,  384,
      388,  392,  396,  400,  404,  408,  412,  416,  419,  422,
      426,  430,  434,  438,  442,  446,  450,  454,  458,  461,
      464,  467,  470,  473,  476,  479,  481,  484,  487,  489,
      492,  494,  497,  500,  503,  506,  510,  513,  516,  520,
      523,  527,  531,  535,  539,  543,  546,  550,  553,  557,

      561,  565,  569,  573,  577,  581,  585,  589,  593,  597,
      601,  605,  609,  613,  616,  619,  622,  625,  629,  633,
      637,  641,  645,  649,  653,  657,  661,  664,  668,  671,
      675,  679,  682,  685,  689,  693,  697,  701,  704,  707,
      711,  714,  718,  721,  725,  728,  732,  736,  740,  743,
      747,  750,  754,  758,  763,  766,  770,  773,  777,  777,
      778,  779,  779,  780,  782,  782,  782,  782,  782,  782,
      782,  784,  784,  784,  784,  786,  788,  790,  792,  794,
      795,  798,  801,  804,  807,  810,  810,  814,  814,  818,
      822,  826,  830,  834,  835,  835,  836,  836,  836,  837,

      837,  837,  838,  839,  840,  842,  843,  843,  843,  844,
      845,  846,  846,  847,  848,  849,  850,  850,  851,  852,
      853,  854,  855,  856,  857,  858,  859,  860,  861,  862,
      862,  862,  862,  863,  864,  864,  864,  864,  865,  866,
      867,  869,  870,  871,  871,  872,  872,  873,  873,  874,
      875,  875,  875,  875,  875,  876,  877,  877,  877,  877,
      878,  878,  878,  878,  879,  880,  881,  882,  882,  883,
      883,  883,  884,  885,  886,  886,  887,  888,  889,  890,
      891,  892,  892,  892,  893,  893,  893,  894,  895,  895,
      896,  897,  898,  899,  899,  900,  901,  902,  903,  903,

      904,  905,  906,  906,  906,  907,  908,  909,  909,  910,
      912,  913,  913,  913,  914,  915,  916,  917,  919,  920,
      921,  921,  921,  921,  921,  922,  924,  926,  928,  930,
      933,  936,  939,  942,  945,  947,  949,  951,  955,  959,
      963,  967,  968,  969,  970,  971,  972,  973,  974,  975,
      976,  977,  978,  978,  979,  981,  982,  983,  985,  986,
      987,  988,  989,  990,  990,  991,  991,  992,  993,  994,
      995,  996,  997,  998,  999, 1000, 1001, 1002, 1003, 1004,
     1004, 1005, 1005, 1006, 1007, 1007, 1008, 1009, 1010, 1010,
     1011, 1012, 1013, 1013, 1013, 1015, 1016, 1018, 1020, 1023,

     1026, 1029, 1032, 1032, 1032, 1032, 1036, 1038, 1042, 1046,
     1047, 1048, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
     1056, 1057, 1058, 1059, 1059, 1060, 1061, 1062, 1064, 1065,
     1066, 1067, 1068, 1069, 1069, 1071, 1072, 1074, 1077, 1078,
     1081, 1084, 1084, 1088, 1090, 1094, 1095, 1095, 1095, 1096,
     1097, 1097, 1098, 1100, 1103, 1104, 1107, 1107, 1109, 1113,
     1113, 1114, 1115, 1116, 1118, 1118, 1119, 1120, 1123, 1123,
     1125, 1125, 1126, 1127, 1128, 1128, 1129, 1129, 1129, 1129,
     1129, 1130, 1130, 1130, 1131, 1131
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
       10,   11,   12,   13,   14,   15,    7,   16,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   19,    7,    7,
       20,   21,    1,   22,   23,   23,   23,   23,   24,   25,
       26,   26,   26,   27,   26,   28,   26,   26,   26,   26,
       26,   29,   26,   30,   31,   26,   26,   32,   26,   26,
       33,   34,   35,    1,   36,    7,   37,   23,   38,   39,

       40,   41,   26,   42,   43,   27,   26,   44,   45,   26,
       46,   47,   26,   48,   49,   50,   51,   26,   26,   32,
       52,   26,   53,    7,   54,    7,    1,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    4,    1,    6,
        1,    1,    7,    1,    8,    9,    9,    9,    1,   10,
        1,    1,   11,   11,   11,   12,   12,   12,   12,   12,
       12,   12,    1,   13,    1,   12,   11,   11,   11,   11,
       11,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,    1,    1,   14
    } ;

static yyconst flex_int16_t yy_base[701] =
    {   0,
     1929, 1928,    0,   55,  110,    0, 1927, 1926,  164,  168,
      171,  176,  202,    0,  257,    0,  311,  361,  410,  462,
      514,  566,  618,  670,  724,    0,  779,    0,  834,  885,
      935,  985, 1036,    0, 1925, 1924, 1091,    0,  315,  319,
      326,  327,  336,  340,  172,  178,  180,  184, 1146,    0,
     1201,    0, 1256,    0, 1924, 3081, 3081, 3081, 1917, 1913,
     1910,  184, 1906, 3081, 3081, 1852,  345,  373,  426,  378,
      387,  377,  403,    0,  313,  427,  448,  478,  474,  439,
      409,  461,    0,    0, 3081, 1892, 1888, 1885, 3081,    0,
      186,  473, 1848, 1851,  484, 1311,    0, 3081, 3081, 1885,

     1881,    0, 1886,    0,  190, 3081,  191, 1881,  319, 3081,
     3081, 1653, 1671,    0, 3081, 1670,    0, 3081, 1660, 3081,
     1668, 3081,    0,    0, 3081,  193, 1662, 1660, 1656,  328,
      491,  496,  198, 1655, 3081, 3081, 3081, 3081, 3081, 3081,
     3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081,
     3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081,
     3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081,    0, 1658,
     3081, 3081, 3081, 3081, 1640,  369, 3081, 3081, 1647, 1642,
     1638,  379,  500,  506,  392,    0, 3081, 1635, 1633,    0,
     1627,  391,  522,  529,  399, 3081, 1632, 3081, 1624,    0,

     1618, 3081,  563,  545, 3081,    0, 1588,  416, 1572,  535,
     3081,  588, 3081, 3081, 3081, 3081, 3081, 1603, 1599, 3081,
     3081,    0,  495,  589,  595,    0, 1596, 3081,  401,    0,
     3081, 1592,  539, 1561, 1560, 1587, 1582,  547, 3081, 3081,
     3081, 3081, 3081, 1587, 3081, 3081,  335,  590, 3081, 1585,
     3081, 3081, 3081,  344, 3081, 1584, 3081,  458, 1578,  596,
     1576, 1549,    0,    0,    0, 1544, 1498,  602,  526, 1542,
      628,    0, 1533, 1519,  637,  650,  654,  656,  842,  647,
      679,  848,  844,  857,  899,  691,  696,  491,  898,  911,
      915,  932,  937,    0, 1517,    0,    0, 1513,    0, 1513,

     1509,  548, 1466, 1468, 1366,    0, 1506, 1498, 3081, 1501,
        0,  371, 3081,  580, 1491, 1482,  675, 3081, 1484, 3081,
     1475,    0, 1469,    0, 1457, 1464,    0,    0,  582, 1458,
     1455, 1451,    0,  605, 1447, 1445, 1439,  605,  563, 3081,
        0,    0, 1444,    0, 1429,  630, 3081, 1438,    0, 1431,
     1425, 1425, 1420,  654,  652,    0, 1418, 1421, 1412,    0,
     1408, 1407, 1403,  660,  694, 3081, 1408, 1399,    0, 1394,
      696,  945,  952, 3081,    0,    0, 1354, 1388, 1384, 1339,
      702, 1356, 1350,    0, 1352, 1347,  710,    0, 1347, 3081,
      717, 3081,    0, 1341, 3081,  719, 3081, 1313,  840, 1336,

     1332, 1336,  836, 1315,  845,  851, 1312,  366, 1032,  403,
     1030,  879, 1029,  881,  972, 1025,    0,    0, 3081, 1023,
      989,  424, 1023,  992, 3081, 1340,  993, 1349, 1361,  997,
      998, 1393, 1395, 1412, 3081,  510,  976, 1416, 1425, 1429,
     1438, 1019,    0, 3081, 1000,  986,  599, 3081, 3081,    0,
     3081,  996,  995,  977,    0, 3081,  972,    0,  960,  961,
        0,  926,  926,    0,  927,  925,  922,    0,  919,  916,
      895, 1436, 3081,  140,  846,  836,  871,  865, 3081,  869,
     3081,  871, 3081, 3081,  847,  895,  900,  839,  715,  956,
     3081, 3081,  658, 1459, 1460, 1465, 1479, 1480, 1481, 1485,

     1494, 1500,  644,  613,  598, 1506, 1521, 1522, 1523, 3081,
     3081,    0,  619, 3081, 3081,  614, 3081, 3081, 3081, 3081,
     3081, 3081, 3081,  937, 3081, 3081,  585,    0, 3081, 3081,
     1007, 1324, 1013,  559, 1527, 1543, 1547, 1549, 1548, 1562,
     1563,  540, 1564, 1568, 1583,  680,    0,  862, 1003, 1341,
      521, 1589, 1602, 1603, 1604, 1608,  505, 1617, 1629,  902,
      957, 3081, 1314, 1333,  486, 1630, 1634, 1643,  462, 1649,
     1317, 1334, 3081, 1394,  445, 1655,  427,  412,  402,  400,
     3081,  364,  286, 3081, 3081, 1675, 1689, 1703, 1717, 1731,
     1745, 1759, 1773, 1787, 1801, 1815, 1829, 1843, 1857, 1871,

     1884, 1898, 1911, 1924, 1937, 1951, 1965, 1971, 1985, 1999,
     2013, 2019, 2033, 2039, 2053, 2066, 2080, 2094, 2100, 2107,
     2121, 2135, 2145, 2159, 2173, 2179, 2185, 2199, 2213, 2227,
     2241, 2255, 2268, 2281, 2294, 2307, 2320, 2334, 2348, 2362,
     2375, 2388, 2402, 2415, 2428, 2441, 2455, 2469, 2483, 2497,
     2503, 2517, 2531, 2537, 2551, 2557, 2571, 2584, 2597, 2611,
     2625, 2639, 2645, 2649, 2656, 2670, 2684, 2697, 2711, 2725,
      424, 2731, 2737, 2751, 2765, 2779, 2792, 2805, 2818, 2831,
     2844, 2857, 2871, 2885, 2898, 2911, 2924, 2937, 2950, 2964,
     2971, 2985, 2992, 3006, 3019, 3032, 3036, 3049, 3053, 3066

    } ;

static yyconst flex_int16_t yy_def[701] =
    {   0,
      586,  586,  585,  585,  585,    5,  586,  586,  587,  587,
      588,  588,  585,   13,  585,   15,  589,  589,  590,  590,
      591,  591,  592,  592,  585,   25,  585,   27,  593,  593,
      594,  594,  585,   33,  595,  595,  585,   37,  596,  596,
      597,  597,  598,  598,  599,  599,  600,  600,  585,   49,
      585,   51,  585,   53,  585,  585,  585,  585,  601,  585,
      585,  602,  585,  585,  585,  585,  603,  603,  603,  603,
      603,   69,   69,   69,  604,  605,  605,  605,  605,  605,
       78,   78,   78,  606,  585,  585,  607,  585,  585,  608,
      608,  608,  608,  608,  608,  608,  609,  585,  585,  585,

      585,  610,  585,  611,  585,  585,  611,  585,  585,  585,
      585,  585,  585,  612,  585,  585,  613,  585,  585,  585,
      585,  585,  614,  615,  585,  616,  585,  617,  585,  615,
      615,  615,  585,  618,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  619,  585,
      585,  585,  585,  585,  620,  585,  585,  585,  585,  621,
      585,  585,  585,  585,  585,  622,  585,  623,  585,  624,
      585,  622,  622,  622,  585,  585,  585,  585,  585,  625,

      585,  585,  585,  585,  585,  626,  626,  626,  626,  626,
      585,  626,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  627,  627,  627,  627,  628,  585,  585,  629,  630,
      585,  585,  631,  632,  632,  585,  585,  632,  585,  585,
      585,  585,  585,  585,  585,  585,  633,  633,  585,  585,
      585,  585,  585,  634,  585,  585,  585,  635,  636,  637,
      585,  585,  638,  639,  640,  585,  585,  585,  585,  641,
      642,  643,  585,  585,  642,  642,  642,  642,  642,  644,
      645,  645,  645,  645,  645,  585,  646,  647,  646,  646,
      646,  646,  646,  648,  585,  649,  650,  585,  651,  585,

      585,  651,  651,  651,  651,  652,  585,  585,  585,  585,
      653,  585,  585,  653,  585,  585,  585,  585,  585,  585,
      585,  654,  585,  655,  585,  585,  656,  657,  658,  585,
      659,  585,  660,  661,  585,  585,  585,  657,  585,  585,
      662,  663,  585,  664,  665,  585,  585,  585,  666,  585,
      585,  585,  585,  585,  585,  667,  585,  668,  585,  669,
      585,  585,  585,  667,  585,  585,  585,  585,  670,  585,
      585,  585,  585,  585,  671,  672,  672,  585,  585,  672,
      672,  585,  585,  673,  585,  585,  673,  674,  585,  585,
      585,  585,  675,  585,  585,  585,  585,  676,  676,  585,

      585,  585,  585,  677,  678,  678,  585,  585,  585,  679,
      585,  585,  680,  681,  682,  585,  683,  684,  585,  585,
      585,  585,  685,  686,  585,  687,  687,  687,  687,  688,
      688,  688,  688,  688,  585,  585,  585,  689,  689,  689,
      689,  585,  690,  585,  585,  691,  691,  585,  585,  692,
      585,  585,  659,  585,  660,  585,  585,  662,  693,  585,
      666,  585,  585,  694,  585,  668,  585,  669,  585,  585,
      585,  585,  585,  671,  672,  672,  585,  585,  585,  585,
      585,  585,  585,  585,  677,  695,  678,  585,  680,  696,
      585,  585,  585,  686,  687,  585,  687,  687,  688,  688,

      688,  688,  585,  585,  585,  689,  585,  689,  689,  585,
      585,  697,  691,  585,  585,  693,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  672,  672,  585,  585,
      695,  678,  696,  585,  687,  585,  687,  688,  585,  688,
      688,  585,  689,  585,  689,  698,  699,  585,  585,  678,
      585,  585,  687,  688,  585,  688,  585,  585,  689,  585,
      698,  585,  700,  678,  585,  585,  585,  688,  585,  585,
      585,  700,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,    0,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585

    } ;

static yyconst flex_int16_t yy_nxt[3137] =
    {   0,
       58,   59,   60,   58,   61,   62,   58,   63,   64,   65,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   66,   67,   67,   67,   67,   67,   67,   68,   67,
       69,   67,   58,   58,   58,   67,   67,   70,   71,   67,
       72,   67,   73,   67,   67,   67,   67,   68,   67,   67,
       74,   67,   58,   58,   67,   58,   75,   60,   58,   61,
       62,   58,   63,   64,   65,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   66,   76,   76,   76,
       76,   76,   76,   77,   76,   78,   76,   58,   58,   58,
       76,   76,   79,   80,   76,   81,   76,   82,   76,   76,

       76,   76,   77,   76,   76,   83,   76,   58,   58,   76,
       84,   84,   85,   84,   86,   87,   84,   88,   84,   84,
       84,   84,   84,   84,   89,   84,   84,   84,   84,   84,
       84,   84,   90,   90,   90,   90,   90,   90,   91,   90,
       92,   90,   84,   84,   84,   90,   90,   93,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   91,   94,   90,
       95,   90,   84,   84,   96,   98,   99,  526,  100,  103,
       99,  101,  100,  105,   57,  101,  106,  107,  105,  240,
       57,  108,   57,  526,  242,  240,   57,  264,  242,  265,
      300,  312,  314,  301,  329,  313,  315,  102,  330,  339,

      340,  102,   56,  109,   57,   56,   56,   56,   56,   56,
      110,  111,   56,   56,   56,  112,   56,   56,   56,   56,
      113,   56,   56,   56,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,   56,   56,   56,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,   56,   56,  114,  115,  116,   57,
      115,  115,  117,  115,  115,   56,  118,  119,  115,  120,
      115,  115,  115,  115,  115,  121,  122,  115,  115,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  115,
      115,  115,  123,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  115,
      115,  123,  125,  126,  280,  127,  128,   57,  129,  227,
      317,   57,  228,  227,  584,  125,  228,  318,   57,   57,
      231,  231,  336,  232,  232,  337,  403,  319,  235,  130,
      236,  131,  235,  237,  236,  408,  268,  237,  229,  404,
      282,  283,  229,  284,  269,  285,  409,  270,  130,  233,
      233,  132,  133,  126,  272,  127,  134,  408,  129,  238,
      346,  347,  312,  238,  268,  125,  313,  273,  409,  268,
      274,  585,  269,  352,  585,  270,  353,  269,  268,  130,
      270,  131,  272,  355,  347,  362,  269,  272,  363,  270,

      365,  366,  391,  392,  408,  271,  272,  585,  130,  583,
      585,  132,  136,  585,  137,  409,  585,  138,  139,  140,
      378,  276,  141,  379,  278,  422,  277,  268,  286,  142,
      273,  271,  474,  274,  474,  269,  269,  287,  270,  270,
      286,  582,  143,  272,  144,  272,  288,  279,  269,  286,
      271,  270,  273,  581,  275,  274,  292,  269,  288,  412,
      270,  580,  145,  146,  136,  585,  137,  288,  585,  138,
      139,  140,  413,  275,  141,  286,  579,  300,  291,  286,
      301,  142,  273,  269,  578,  274,  270,  269,  300,  287,
      270,  301,  436,  288,  143,  336,  144,  288,  337,  385,

      336,  302,  386,  337,  352,  293,  289,  353,  287,  577,
      352,  503,  302,  353,  145,  146,  148,  290,  149,  338,
      302,  150,  151,  152,  338,  289,  362,  422,  354,  363,
      575,  302,  153,  362,  354,  269,  363,  437,  338,  378,
      396,  397,  379,  338,  569,  272,  154,  354,  155,  585,
      364,  398,  300,  354,  398,  301,  504,  364,  565,  371,
      373,  373,  373,  381,  339,  340,  156,  157,  148,  364,
      149,  374,  374,  150,  151,  152,  364,  371,  372,  372,
      373,  314,  381,  329,  153,  315,  557,  330,  374,  374,
      374,  403,  378,  385,  375,  379,  386,  268,  154,  385,

      155,  551,  386,  268,  404,  269,  374,  456,  270,  336,
      333,  269,  337,  585,  270,  272,  381,  387,  156,  157,
      159,  272,  160,  387,  528,  161,  162,  163,  344,  268,
      164,  346,  347,  547,  406,  381,  387,  269,  268,  513,
      270,  273,  387,  542,  274,  503,  269,  272,  280,  270,
      165,  268,  166,  355,  347,  268,  272,  268,  352,  269,
      505,  353,  270,  269,  362,  269,  270,  363,  270,  272,
      167,  168,  159,  272,  160,  272,  317,  161,  162,  163,
      286,  560,  164,  318,  282,  283,  426,  284,  269,  285,
      504,  270,  286,  319,  427,  365,  366,  286,  288,  562,

      269,  428,  165,  270,  166,  269,  378,  534,  270,  379,
      288,  472,  472,  472,  385,  288,  489,  386,  480,  392,
      482,  397,  167,  168,   56,   56,   57,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,   56,   56,   56,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,   56,   56,  169,   56,
      170,   57,   56,  171,   56,   56,  172,  173,  173,   56,
       56,  173,   56,   56,   56,   56,   56,  174,   56,   56,

       56,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,   56,   56,   56,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,   56,   56,  175,   56,  176,  177,  403,  179,  180,
      488,  181,  585,  268,  398,  286,  403,  398,  485,  286,
      404,  269,  403,  269,  270,   56,  270,  269,  286,  404,
      270,  272,  182,  288,  183,  404,  269,  288,  530,  270,
      480,  392,  482,  397,  529,  528,  288,  549,  549,  549,
      412,  182,  412,  432,  184,   56,  185,  177,  429,  179,
      180,  431,  181,  413,  527,  413,  403,  487,  523,  286,

      286,  403,  273,  560,  433,  274,   56,  269,  269,  404,
      270,  270,  286,  182,  404,  183,  286,  288,  288,  522,
      269,  562,  521,  270,  269,  520,  465,  270,  465,  518,
      288,  462,  182,  286,  288,  184,  187,  188,  286,  189,
      190,  269,  191,  434,  270,  532,  269,  438,  548,  270,
      548,  288,  549,  549,  549,  439,  288,  412,  560,  371,
      372,  372,  373,  192,  517,  193,  371,  373,  373,  373,
      413,  374,  473,  268,  344,  515,  562,  440,  374,  374,
      514,  269,  192,  441,  270,  194,  195,  188,  473,  189,
      190,  272,  191,  268,  496,  374,  452,  452,  286,  286,

      512,  269,  269,  511,  270,  270,  269,  269,  403,  270,
      270,  272,  272,  192,  412,  193,  288,  288,  549,  549,
      549,  404,  510,  505,  423,  493,  492,  413,  491,  525,
      489,  411,  192,  488,  499,  194,  196,  197,  198,  196,
      199,  200,  196,  201,  202,  196,  196,  196,  196,  196,
      196,  203,  204,  204,  196,  205,  196,  196,  206,  206,
      207,  206,  206,  206,  208,  209,  210,  206,  211,  196,
      196,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  208,  206,  206,  212,  206,  213,  196,
      206,  216,  216,  217,  216,  218,  216,  216,  219,  220,

      221,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  222,  222,  222,  222,  222,  222,  223,
      222,  224,  222,  220,  216,  221,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  223,  222,
      222,  225,  222,  220,  221,  222,  243,  244,  245,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      246,  243,  243,  243,  243,  243,  243,  243,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  243,  243,
      243,  247,  247,  247,  247,  247,  247,  247,  248,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  243,  243,

      247,  249,  250,  251,  249,  249,  249,  249,  249,  249,
      249,  252,  249,  253,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  249,  249,  249,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  249,  249,  254,  255,  256,  257,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  255,  255,
      255,  258,  258,  258,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  258,  258,  258,  258,  258,  255,  255,
      258,  294,  294,  407,  294,  571,  485,  294,  571,  294,
      294,  294,  294,  294,  294,  403,  305,  305,  305,  294,
      294,  294,  294,  573,  574,  571,  573,  402,  404,  484,
      483,  268,  403,  294,  294,  294,  399,  404,  481,  269,
      268,  479,  270,  573,  383,  404,  382,  478,  269,  272,
      477,  270,  268,  294,  294,  305,  294,  294,  272,  294,
      269,  550,  294,  270,  294,  294,  294,  294,  294,  294,
      272,  305,  305,  305,  294,  294,  294,  294,  495,  476,
      564,  370,  368,  497,  286,  574,  286,  475,  294,  294,

      294,  471,  269,  470,  269,  270,  498,  270,  404,  367,
      361,  359,  288,  286,  288,  469,  467,  286,  294,  294,
      305,  269,  465,  464,  270,  269,  507,  351,  270,  348,
      286,  288,  463,  500,  269,  288,  462,  270,  269,  286,
      501,  270,  460,  344,  288,  343,  335,  269,  288,  332,
      270,  472,  472,  472,  457,  454,  452,  288,  502,  524,
      268,  268,  525,  451,  506,  326,  496,  325,  269,  269,
      323,  270,  270,  508,  269,  524,  321,  270,  272,  272,
      536,  268,  286,  509,  272,  321,  539,  316,  269,  269,
      269,  270,  270,  270,  269,  286,  316,  270,  272,  272,

      288,  286,  310,  269,  288,  449,  270,  286,  535,  269,
      448,  447,  270,  288,  446,  269,  298,  295,  270,  288,
      445,  442,  507,  544,  286,  288,  266,  537,  552,  538,
      269,  269,  269,  270,  270,  270,  269,  262,  540,  270,
      288,  288,  288,  423,  536,  541,  272,  421,  268,  539,
      286,  420,  269,  416,  543,  270,  269,  269,  269,  270,
      270,  270,  272,  555,  286,  558,  272,  288,  288,  544,
      545,  269,  269,  269,  270,  270,  270,  269,  261,  259,
      270,  288,  288,  288,  286,  411,  407,  288,  402,  401,
      552,  400,  269,  399,  399,  270,  553,  554,  269,  394,

      389,  270,  288,  566,  567,  555,  383,  382,  272,  286,
      556,  269,  269,  269,  270,  270,  270,  269,  558,  380,
      270,  272,  288,  288,  377,  370,  269,  288,  368,  270,
      570,  566,  559,  367,  361,  567,  288,  359,  269,  269,
      357,  270,  270,  269,  576,  351,  270,  350,  288,  272,
      570,  348,  269,  288,  344,  270,  576,  568,  269,  343,
      334,  270,  288,  335,  269,  334,  332,  270,  288,  326,
      325,  323,  321,  320,  288,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   97,   97,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,

      186,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  260,  316,  310,  308,  307,
      304,  303,  298,  297,  260,  260,  295,  260,  263,  263,

      267,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  271,  266,  262,  261,  271,  271,  259,  271,
      271,  271,  271,  585,  271,  281,  215,  215,   57,   57,
       57,   57,  585,  585,  281,  281,  585,  281,  287,  585,
      585,  585,  287,  287,  585,  287,  287,  287,  287,  585,
      287,  294,  294,  585,  585,  585,  294,  294,  585,  294,
      294,  585,  585,  294,  294,  296,  296,  585,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  299,
      585,  299,  299,  585,  299,  306,  585,  585,  585,  306,
      306,  306,  306,  306,  306,  306,  306,  585,  306,  309,

      309,  585,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  311,  311,  585,  311,  585,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  322,  585,  322,
      322,  585,  322,  324,  324,  585,  324,  585,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  327,  585,  327,
      327,  585,  327,  328,  585,  585,  585,  585,  328,  328,
      585,  328,  328,  328,  328,  328,  328,  331,  585,  585,
      331,  585,  585,  585,  585,  585,  331,  331,  585,  331,
      333,  333,  585,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  341,  341,  585,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  342,  585,
      342,  342,  585,  342,  345,  345,  585,  345,  345,  585,
      345,  349,  349,  585,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  356,  585,  585,  585,  585,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  358,
      585,  585,  585,  585,  585,  358,  358,  585,  358,  360,
      360,  585,  360,  585,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  369,  369,  585,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  376,  585,  376,
      376,  585,  376,  384,  585,  384,  384,  585,  384,  388,

      388,  585,  585,  388,  388,  388,  388,  388,  388,  388,
      388,  585,  388,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  393,  393,  585,
      585,  393,  393,  393,  393,  393,  393,  393,  393,  585,
      393,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  398,  398,  398,  585,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  405,
      585,  585,  585,  585,  585,  405,  405,  585,  405,  405,
      585,  405,  410,  585,  585,  585,  585,  410,  585,  410,
      585,  410,  410,  585,  410,  414,  585,  585,  585,  585,

      585,  414,  414,  585,  414,  414,  585,  414,  260,  585,
      585,  585,  585,  585,  585,  585,  585,  260,  260,  585,
      260,  415,  585,  585,  585,  415,  415,  585,  415,  415,
      415,  415,  585,  415,  417,  417,  585,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  418,  418,
      585,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  419,  419,  419,  419,  585,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  424,  585,  585,  585,
      585,  585,  585,  585,  585,  424,  424,  585,  424,  271,
      585,  585,  585,  271,  271,  585,  271,  271,  271,  271,

      585,  271,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  585,  425,  425,  425,  425,  281,  585,  585,  585,
      585,  585,  585,  585,  585,  281,  281,  585,  281,  430,
      585,  585,  585,  430,  430,  585,  430,  430,  430,  430,
      585,  430,  287,  585,  585,  585,  287,  287,  585,  287,
      287,  287,  287,  585,  287,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  585,  435,  435,  435,  435,  294,
      294,  585,  585,  585,  294,  294,  585,  294,  294,  585,
      585,  294,  294,  443,  443,  585,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  444,  444,  444,

      444,  585,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  299,  585,  299,  299,  585,  299,  306,  585,  585,
      585,  306,  306,  306,  306,  306,  306,  306,  306,  585,
      306,  311,  311,  585,  311,  585,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  322,  585,  322,  322,  585,
      322,  450,  450,  585,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  327,  585,  327,  327,  585,
      327,  328,  585,  585,  585,  585,  328,  328,  585,  328,
      328,  328,  328,  328,  328,  331,  585,  585,  331,  585,
      585,  585,  585,  585,  331,  331,  585,  331,  453,  585,

      585,  585,  585,  585,  585,  453,  585,  453,  453,  585,
      453,  333,  333,  585,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  458,
      458,  585,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  342,  585,  342,  342,  585,  342,  459,
      459,  585,  459,  345,  345,  585,  345,  345,  585,  345,
      461,  461,  585,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  356,  585,  585,  585,  585,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  466,  585,

      585,  585,  585,  585,  585,  466,  585,  466,  466,  585,
      466,  468,  468,  585,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  369,  369,  585,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  376,
      585,  376,  376,  585,  376,  384,  585,  384,  384,  585,
      384,  388,  388,  585,  585,  388,  388,  388,  388,  388,
      388,  388,  388,  585,  388,  393,  393,  585,  585,  393,
      393,  393,  393,  393,  393,  393,  393,  585,  393,  398,
      398,  398,  585,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  486,  585,  585,  585,  585,  585,  585,

      585,  585,  486,  486,  585,  486,  405,  585,  585,  585,
      585,  585,  405,  405,  585,  405,  405,  585,  405,  410,
      585,  585,  585,  585,  410,  585,  410,  585,  410,  410,
      585,  410,  490,  585,  585,  585,  585,  585,  585,  585,
      585,  490,  490,  585,  490,  414,  585,  585,  585,  585,
      585,  414,  414,  585,  414,  414,  585,  414,  415,  585,
      585,  585,  415,  415,  585,  415,  415,  415,  415,  585,
      415,  417,  417,  585,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  418,  418,  585,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  424,

      585,  585,  585,  585,  585,  585,  585,  585,  424,  424,
      585,  424,  494,  585,  585,  585,  494,  494,  585,  494,
      494,  494,  494,  585,  494,  271,  585,  585,  585,  271,
      271,  585,  271,  271,  271,  271,  585,  271,  430,  585,
      585,  585,  430,  430,  585,  430,  430,  430,  430,  585,
      430,  287,  585,  585,  585,  287,  287,  585,  287,  287,
      287,  287,  585,  287,  443,  443,  585,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  299,  299,
      585,  299,  299,  585,  299,  450,  450,  585,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  516,

      516,  585,  516,  516,  585,  516,  519,  519,  519,  519,
      585,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      531,  585,  585,  585,  585,  585,  531,  531,  585,  531,
      531,  585,  531,  533,  585,  585,  585,  585,  585,  533,
      533,  585,  533,  533,  585,  533,  546,  546,  585,  546,
      561,  585,  585,  585,  585,  585,  585,  561,  561,  561,
      561,  585,  561,  563,  563,  585,  563,  572,  585,  585,
      585,  585,  585,  585,  572,  572,  572,  572,  585,  572,
       55,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585
    } ;

static yyconst flex_int16_t yy_chk[3137] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    9,    9,  474,    9,   10,
       10,    9,   10,   11,   45,   10,   11,   12,   12,   45,
       46,   12,   47,  474,   47,   46,   48,   62,   48,   62,
       91,  105,  107,   91,  126,  105,  107,    9,  126,  133,

      133,   10,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   17,   17,   75,   17,   17,   39,   17,   39,
      109,   40,   39,   40,  583,   17,   40,  109,   41,   42,
       41,   42,  130,   41,   42,  130,  247,  109,   43,   17,
       43,   17,   44,   43,   44,  254,   67,   44,   39,  247,
       75,   75,   40,   75,   67,   75,  254,   67,   17,   41,
       42,   17,   18,   18,   67,   18,   18,  408,   18,   43,
      176,  176,  312,   44,   68,   18,  312,   68,  408,   70,
       68,   72,   68,  182,   72,   68,  182,   70,   71,   18,
       70,   18,   68,  185,  185,  192,   71,   70,  192,   71,

      195,  195,  229,  229,  410,   72,   71,   73,   18,  582,
       73,   18,   19,   81,   19,  410,   81,   19,   19,   19,
      208,   70,   19,  208,   72,  422,   71,   69,   76,   19,
       69,   73,  671,   69,  671,   69,   76,   81,   69,   76,
       80,  580,   19,  422,   19,   69,   76,   73,   80,   77,
       73,   80,   77,  579,   69,   77,   81,   77,   80,  258,
       77,  578,   19,   19,   20,   82,   20,   77,   82,   20,
       20,   20,  258,   69,   20,   79,  577,   92,   80,   78,
       92,   20,   78,   79,  575,   78,   79,   78,   95,   82,
       78,   95,  288,   79,   20,  131,   20,   78,  131,  223,

      132,   92,  223,  132,  183,   82,   78,  183,   82,  569,
      184,  436,   95,  184,   20,   20,   21,   79,   21,  131,
       92,   21,   21,   21,  132,   78,  193,  269,  183,  193,
      565,   95,   21,  194,  184,  269,  194,  288,  131,  210,
      233,  233,  210,  132,  557,  269,   21,  183,   21,  238,
      193,  238,  302,  184,  238,  302,  436,  194,  551,  204,
      204,  204,  204,  210,  339,  339,   21,   21,   22,  193,
       22,  204,  204,   22,   22,   22,  194,  203,  203,  203,
      203,  314,  210,  329,   22,  314,  542,  329,  204,  203,
      203,  248,  212,  224,  203,  212,  224,  260,   22,  225,

       22,  534,  225,  268,  248,  260,  203,  334,  260,  338,
      334,  268,  338,  447,  268,  260,  212,  224,   22,   22,
       23,  268,   23,  225,  527,   23,   23,   23,  516,  271,
       23,  346,  346,  513,  248,  212,  224,  271,  275,  447,
      271,  275,  225,  505,  275,  503,  275,  271,  280,  275,
       23,  276,   23,  355,  355,  277,  275,  278,  354,  276,
      504,  354,  276,  277,  364,  278,  277,  364,  278,  276,
       23,   23,   24,  277,   24,  278,  317,   24,   24,   24,
      281,  546,   24,  317,  280,  280,  276,  280,  281,  280,
      503,  281,  286,  317,  277,  365,  365,  287,  281,  546,

      286,  278,   24,  286,   24,  287,  381,  493,  287,  381,
      286,  371,  371,  371,  387,  287,  489,  387,  391,  391,
      396,  396,   24,   24,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   29,   29,   29,  403,   29,   29,
      488,   29,  399,  279,  399,  283,  405,  399,  485,  282,
      403,  279,  406,  283,  279,   29,  283,  282,  284,  405,
      282,  279,   29,  283,   29,  406,  284,  282,  478,  284,
      480,  480,  482,  482,  477,  476,  284,  548,  548,  548,
      412,   29,  414,  283,   29,   30,   30,   30,  279,   30,
       30,  282,   30,  412,  475,  414,  486,  406,  471,  289,

      285,  487,  289,  560,  284,  289,   30,  289,  285,  486,
      289,  285,  290,   30,  487,   30,  291,  289,  285,  470,
      290,  560,  469,  290,  291,  467,  466,  291,  465,  463,
      290,  462,   30,  292,  291,   30,   31,   31,  293,   31,
       31,  292,   31,  285,  292,  487,  293,  290,  524,  293,
      524,  292,  524,  524,  524,  291,  293,  490,  561,  372,
      372,  372,  372,   31,  460,   31,  373,  373,  373,  373,
      490,  372,  372,  415,  459,  457,  561,  292,  373,  373,
      454,  415,   31,  293,  415,   31,   32,   32,  372,   32,
       32,  415,   32,  424,  427,  373,  453,  452,  430,  431,

      446,  424,  427,  445,  424,  427,  430,  431,  531,  430,
      431,  424,  427,   32,  533,   32,  430,  431,  549,  549,
      549,  531,  442,  437,  423,  421,  420,  533,  416,  549,
      413,  411,   32,  409,  431,   32,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   96,   96,  407,   96,  563,  404,   96,  571,   96,
       96,   96,   96,   96,   96,  532,   96,   96,   96,   96,
       96,   96,   96,  563,  564,  572,  571,  402,  532,  401,
      400,  426,  550,   96,   96,   96,  398,  564,  394,  426,
      428,  389,  426,  572,  386,  550,  385,  383,  428,  426,
      382,  428,  429,   96,   96,   96,  305,  305,  428,  305,
      429,  532,  305,  429,  305,  305,  305,  305,  305,  305,
      429,  305,  305,  305,  305,  305,  305,  305,  426,  380,
      550,  379,  378,  428,  432,  574,  433,  377,  305,  305,

      305,  370,  432,  368,  433,  432,  429,  433,  574,  367,
      363,  362,  432,  434,  433,  361,  359,  438,  305,  305,
      305,  434,  358,  357,  434,  438,  439,  353,  438,  352,
      440,  434,  351,  432,  439,  438,  350,  439,  440,  441,
      433,  440,  348,  345,  439,  343,  337,  441,  440,  336,
      441,  472,  472,  472,  335,  332,  331,  441,  434,  472,
      494,  495,  472,  330,  438,  326,  496,  325,  494,  495,
      323,  494,  495,  440,  496,  472,  321,  496,  494,  495,
      497,  498,  499,  441,  496,  319,  500,  316,  497,  498,
      499,  497,  498,  499,  500,  501,  315,  500,  497,  498,

      499,  502,  310,  501,  500,  308,  501,  506,  495,  502,
      307,  304,  502,  501,  303,  506,  301,  300,  506,  502,
      298,  295,  507,  508,  509,  506,  274,  498,  535,  499,
      507,  508,  509,  507,  508,  509,  535,  273,  501,  535,
      507,  508,  509,  270,  536,  502,  535,  267,  537,  539,
      538,  266,  536,  262,  506,  536,  537,  539,  538,  537,
      539,  538,  536,  540,  541,  543,  537,  539,  538,  544,
      509,  540,  541,  543,  540,  541,  543,  544,  261,  259,
      544,  540,  541,  543,  545,  256,  250,  544,  244,  237,
      552,  236,  545,  235,  234,  545,  537,  538,  552,  232,

      227,  552,  545,  553,  554,  555,  219,  218,  552,  556,
      541,  553,  554,  555,  553,  554,  555,  556,  558,  209,
      556,  553,  554,  555,  207,  201,  558,  556,  199,  558,
      559,  566,  545,  197,  191,  567,  558,  189,  559,  566,
      188,  559,  566,  567,  568,  181,  567,  180,  559,  566,
      570,  179,  568,  567,  175,  568,  576,  556,  570,  170,
      134,  570,  568,  129,  576,  128,  127,  576,  570,  121,
      119,  116,  113,  112,  576,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,

      594,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  601,  108,  103,  101,  100,
       94,   93,   88,   87,  601,  601,   86,  601,  602,  602,

       66,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  603,   63,   61,   60,  603,  603,   59,  603,
      603,  603,  603,   55,  603,  604,   36,   35,    8,    7,
        2,    1,    0,    0,  604,  604,    0,  604,  605,    0,
        0,    0,  605,  605,    0,  605,  605,  605,  605,    0,
      605,  606,  606,    0,    0,    0,  606,  606,    0,  606,
      606,    0,    0,  606,  606,  607,  607,    0,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  608,
        0,  608,  608,    0,  608,  609,    0,    0,    0,  609,
      609,  609,  609,  609,  609,  609,  609,    0,  609,  610,

      610,    0,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  611,  611,    0,  611,    0,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  612,    0,  612,
      612,    0,  612,  613,  613,    0,  613,    0,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  614,    0,  614,
      614,    0,  614,  615,    0,    0,    0,    0,  615,  615,
        0,  615,  615,  615,  615,  615,  615,  616,    0,    0,
      616,    0,    0,    0,    0,    0,  616,  616,    0,  616,
      617,  617,    0,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  618,  618,    0,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  619,    0,
      619,  619,    0,  619,  620,  620,    0,  620,  620,    0,
      620,  621,  621,    0,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  622,    0,    0,    0,    0,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  623,
        0,    0,    0,    0,    0,  623,  623,    0,  623,  624,
      624,    0,  624,    0,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  625,  625,    0,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  626,    0,  626,
      626,    0,  626,  627,    0,  627,  627,    0,  627,  628,

      628,    0,    0,  628,  628,  628,  628,  628,  628,  628,
      628,    0,  628,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  630,  630,    0,
        0,  630,  630,  630,  630,  630,  630,  630,  630,    0,
      630,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  632,  632,  632,    0,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  633,
        0,    0,    0,    0,    0,  633,  633,    0,  633,  633,
        0,  633,  634,    0,    0,    0,    0,  634,    0,  634,
        0,  634,  634,    0,  634,  635,    0,    0,    0,    0,

        0,  635,  635,    0,  635,  635,    0,  635,  636,    0,
        0,    0,    0,    0,    0,    0,    0,  636,  636,    0,
      636,  637,    0,    0,    0,  637,  637,    0,  637,  637,
      637,  637,    0,  637,  638,  638,    0,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  639,  639,
        0,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  640,  640,  640,  640,    0,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  641,    0,    0,    0,
        0,    0,    0,    0,    0,  641,  641,    0,  641,  642,
        0,    0,    0,  642,  642,    0,  642,  642,  642,  642,

        0,  642,  643,  643,  643,  643,  643,  643,  643,  643,
      643,    0,  643,  643,  643,  643,  644,    0,    0,    0,
        0,    0,    0,    0,    0,  644,  644,    0,  644,  645,
        0,    0,    0,  645,  645,    0,  645,  645,  645,  645,
        0,  645,  646,    0,    0,    0,  646,  646,    0,  646,
      646,  646,  646,    0,  646,  647,  647,  647,  647,  647,
      647,  647,  647,  647,    0,  647,  647,  647,  647,  648,
      648,    0,    0,    0,  648,  648,    0,  648,  648,    0,
        0,  648,  648,  649,  649,    0,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  650,  650,  650,

      650,    0,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  651,    0,  651,  651,    0,  651,  652,    0,    0,
        0,  652,  652,  652,  652,  652,  652,  652,  652,    0,
      652,  653,  653,    0,  653,    0,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  654,    0,  654,  654,    0,
      654,  655,  655,    0,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  656,    0,  656,  656,    0,
      656,  657,    0,    0,    0,    0,  657,  657,    0,  657,
      657,  657,  657,  657,  657,  658,    0,    0,  658,    0,
        0,    0,    0,    0,  658,  658,    0,  658,  659,    0,

        0,    0,    0,    0,    0,  659,    0,  659,  659,    0,
      659,  660,  660,    0,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  662,
      662,    0,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  663,    0,  663,  663,    0,  663,  664,
      664,    0,  664,  665,  665,    0,  665,  665,    0,  665,
      666,  666,    0,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  667,    0,    0,    0,    0,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  668,    0,

        0,    0,    0,    0,    0,  668,    0,  668,  668,    0,
      668,  669,  669,    0,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  670,  670,    0,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  672,
        0,  672,  672,    0,  672,  673,    0,  673,  673,    0,
      673,  674,  674,    0,    0,  674,  674,  674,  674,  674,
      674,  674,  674,    0,  674,  675,  675,    0,    0,  675,
      675,  675,  675,  675,  675,  675,  675,    0,  675,  676,
      676,  676,    0,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  677,    0,    0,    0,    0,    0,    0,

        0,    0,  677,  677,    0,  677,  678,    0,    0,    0,
        0,    0,  678,  678,    0,  678,  678,    0,  678,  679,
        0,    0,    0,    0,  679,    0,  679,    0,  679,  679,
        0,  679,  680,    0,    0,    0,    0,    0,    0,    0,
        0,  680,  680,    0,  680,  681,    0,    0,    0,    0,
        0,  681,  681,    0,  681,  681,    0,  681,  682,    0,
        0,    0,  682,  682,    0,  682,  682,  682,  682,    0,
      682,  683,  683,    0,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  684,  684,    0,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  685,

        0,    0,    0,    0,    0,    0,    0,    0,  685,  685,
        0,  685,  686,    0,    0,    0,  686,  686,    0,  686,
      686,  686,  686,    0,  686,  687,    0,    0,    0,  687,
      687,    0,  687,  687,  687,  687,    0,  687,  688,    0,
        0,    0,  688,  688,    0,  688,  688,  688,  688,    0,
      688,  689,    0,    0,    0,  689,  689,    0,  689,  689,
      689,  689,    0,  689,  690,  690,    0,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  691,  691,
        0,  691,  691,    0,  691,  692,  692,    0,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  693,

      693,    0,  693,  693,    0,  693,  694,  694,  694,  694,
        0,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      695,    0,    0,    0,    0,    0,  695,  695,    0,  695,
      695,    0,  695,  696,    0,    0,    0,    0,    0,  696,
      696,    0,  696,  696,    0,  696,  697,  697,    0,  697,
      698,    0,    0,    0,    0,    0,    0,  698,  698,  698,
      698,    0,  698,  699,  699,    0,  699,  700,    0,    0,
        0,    0,    0,    0,  700,  700,  700,  700,    0,  700,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585
    } ;

extern int parse_py_YY_flex_debug;
int parse_py_YY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *parse_py_YYtext;
/*************************************************************************
 *
 * Copyright (c) 2014-2022 Barbara Geller & Ansel Sermersheim
 * Copyright (c) 1997-2014 Dimitri van Heesch

*************************************************************************/

#include <QFile>
#include <QFileInfo>
#include <QHash>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <arguments.h>
#include <commentscan.h>
#include <config.h>
#include <doxy_globals.h>
#include <default_args.h>
#include <entry.h>
#include <language.h>
#include <message.h>
#include <parse_py.h>
#include <util.h>

#define DBG_CTX(...)     do { } while(0)

#define YY_NO_INPUT 1

static QSharedPointer<Entry> current_root;
static QSharedPointer<Entry> current;
static QSharedPointer<Entry> previous;
static QSharedPointer<Entry> bodyEntry;

static QSharedPointer<Entry>  s_docsEntry;    // which entry
static EntryKey               s_docsEnum;     // which enum in EntryKey (Source_Text, Initial_Value)

static bool s_defVal_active = false;

static ParserInterface  *s_thisParser;
static QString           s_inputString;
static int               s_inputPosition;
static QFile             s_inputFile;

static int               yyLineNr = 1;
static QString           yyFileName;

static Protection        protection;
static MethodType        mtype;
static Specifier         virt;

static bool              gstat;

static int               docBlockContext;
static QString           docBlock;
static bool              docBlockInBody;
static bool              isJavaDocStyle;
static bool              docBrief;
static bool              docBlockSpecial;

static bool              s_doubleQuote;
static bool              s_specialBlock;
static int               s_stringContext;
static int               s_indent    = 0;
static int               s_curIndent = 0;

static char              s_atomStart;
static char              s_atomEnd;
static int               s_atomCount;

static QString           s_moduleScope;
static QString           s_packageName;
static QString           s_defVal;

static int               s_braceCount;

static bool              s_lexInit = false;
static bool              s_packageCommentAllowed;

static bool              s_funcParamsEnd = false;
static bool              s_start_init    = false;
static int               s_search_count  = 0;
static QString           s_argType       = QString();

static void initParser()
{
   protection = Public;
   mtype = MethodType::Method;
   gstat = false;
   virt  = Normal;

   previous = QSharedPointer<Entry>();
   s_packageCommentAllowed = true;
}

static void initEntry()
{
   current->protection = protection;
   current->mtype      = mtype;
   current->virt       = virt;
   current->stat       = gstat;
   current->m_srcLang  = SrcLangExt_Python;

   current->setParent(current_root);

   initGroupInfo(current);
   gstat = false;
}

static void newEntry()
{
   previous = current;
   current_root->addSubEntry(current);

   current = QMakeShared<Entry>();
   initEntry();
}

static void newVariable()
{
   if (! current->m_entryName.isEmpty() && current->m_entryName.at(0) == '_') {
      // mark as private
      current->protection = Private;
   }

   if (current_root->section & Entry::COMPOUND_MASK) {
      // mark as class variable
      current->stat = true;
   }

   newEntry();
}

static void newFunction()
{
   if (current->m_entryName.startsWith("__") && current->m_entryName.endsWith("__")) {

      // special method name, refer to https://docs.python.org/ref/specialnames.html
      current->protection = Public;

   } else if (current->m_entryName.at(0) == '_') {
      current->protection = Private;

   }
}

static inline int computeIndent(const QString &str)
{
   static const int tabSize = Config::getInt("tab-size");

   int col = 0;

   for (auto c : str)  {

      if (c == ' ') {
         col++;

      } else if (c == '\t') {
         col += tabSize - (col % tabSize);

      } else {
         break;
      }
   }

   return col;
}

static QString findPackageScopeFromPath(const QString &path)
{
   static QHash<QString, QString> s_packageNameCache;

   QString pScope = s_packageNameCache.value(path);

   if (! pScope.isEmpty()) {
      return pScope;
   }

   // found package initialization file
   QFileInfo pf(path + "/__init__.py");

   if (pf.exists()) {
      int pos = path.lastIndexOf('/');

      if (pos != -1) {
         QString scope = findPackageScopeFromPath(path.left(pos));

         if (! scope.isEmpty()) {
            scope += "::";
         }

         scope += path.mid(pos + 1);
         s_packageNameCache.insert(path, scope);
         return scope;
      }
   }

   return QString("");
}

static QString findPackageScope(const QString &fileName)
{
   if (! fileName.isEmpty()) {
      return QString("");
   }

   QFileInfo fi(fileName);

   return findPackageScopeFromPath(fi.absolutePath());
}

static void lineCount()
{
   // commentscan, parse_py

   for (const char *p = parse_py_YYtext; *p; ++p) {
      yyLineNr += (*p == '\n');
   }
}

static void incLineNr()
{
   DBG_CTX((stderr, "yyLineNr = %d\n", yyLineNr));
   yyLineNr++;
}

static void startCommentBlock(bool brief)
{
   if (brief) {
      current->setData(EntryKey::Brief_File, yyFileName);
      current->briefLine = yyLineNr;

   } else {
      current->setData(EntryKey::MainDocs_File, yyFileName);
      current->docLine = yyLineNr;

   }
}

static void handleCommentBlock(const QString &doc, bool isBrief)
{
   // TODO: Fix this
   docBlockInBody = false;

   if (docBlockInBody && previous) {
      QString tmpDocs = previous->getData(EntryKey::Main_Docs);

      if (! tmpDocs.isEmpty()) {
         previous->setData(EntryKey::Main_Docs, tmpDocs.trimmed() + "\n\n");
      }
   }

   bool needsEntry = false;
   int position    = 0;
   int lineNr      = isBrief ? current->briefLine : current->docLine;

   while (parseCommentBlock(s_thisParser, (docBlockInBody && previous) ? previous : current,
             doc, yyFileName, lineNr, docBlockInBody ? false : isBrief, isJavaDocStyle, docBlockInBody,
             protection, position, needsEntry)) {

      if (needsEntry) {
         newEntry();
      }
   }

   if (needsEntry) {
      newEntry();
   }
}

static void endOfDef(int correction = 0)
{
   if (bodyEntry) {
      bodyEntry->endBodyLine  = yyLineNr - correction;
      bodyEntry = QSharedPointer<Entry>();
   }

   newEntry();
}

static void addToOutput(const QString &str)
{
   if (s_defVal_active) {
      s_defVal += str;

   } else if (s_docsEntry != nullptr) {
      s_docsEntry->appendData(s_docsEnum, str);
   }
}

static void initTriDoubleQuoteBlock()
{
   docBlockContext = YY_START;
   docBlockInBody  = false;
   isJavaDocStyle  = false;

   QString text = QString::fromUtf8(parse_py_YYtext);
   docBlockSpecial = text.endsWith('!');

   docBlock.resize(0);
   s_doubleQuote = true;
   startCommentBlock(false);
}

static void initTriSingleQuoteBlock()
{
   docBlockContext = YY_START;
   docBlockInBody  = false;
   isJavaDocStyle  = false;

   QString text = QString::fromUtf8(parse_py_YYtext);
   docBlockSpecial = text.endsWith('!');

   docBlock.resize(0);
   s_doubleQuote = false;
   startCommentBlock(false);
}

static void initSpecialBlock()
{
   docBlockContext  = YY_START;
   docBlockInBody   = false;
   isJavaDocStyle   = true;
   docBrief         = true;

   docBlock.resize(0);
   startCommentBlock(false);
}

static void searchFoundDef()
{
   current->setData(EntryKey::File_Name, yyFileName);
   current->startLine     = yyLineNr;
   current->startBodyLine = yyLineNr;

   current->section   = Entry::FUNCTION_SEC;
   current->m_srcLang = SrcLangExt_Python;
   current->virt      = Normal;
   current->stat      = gstat;
   current->mtype     = (mtype = MethodType::Method);

   current->m_entryName.resize(0);
   current->setData(EntryKey::Member_Type, "");
   current->setData(EntryKey::Member_Args, "");
   current->argList.clear();

   s_packageCommentAllowed = false;
   gstat = false;
}

static void searchFoundClass()
{
   current->section = Entry::CLASS_SEC;
   current->argList.clear();

   current->appendData(EntryKey::Member_Type, "class");

   current->setData(EntryKey::File_Name, yyFileName);
   current->startLine     = yyLineNr;
   current->startBodyLine = yyLineNr;

   s_packageCommentAllowed = false;
}

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

/* start command character */
#define YY_NO_UNISTD_H 1
/* Main start state */

/* Mid-comment states */
/* %x FuncDoubleComment */
/* %x ClassDoubleComment */

/* Function states */

/* Class states */

/* Variable states */

/* String states */

/* import */

#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define TryClassDocString 3
#define TripleComment 4
#define SpecialComment 5
#define FunctionDec 6
#define FunctionParams 7
#define FunctionBody 8
#define FunctionAnnotation 9
#define FunctionTypeAnnotation 10
#define FunctionParamDefVal 11
#define ClassDec 12
#define ClassInheritance 13
#define ClassCaptureIndent 14
#define ClassBody 15
#define VariableDec 16
#define VariableEnd 17
#define VariableAtom 18
#define SingleQuoteString 19
#define DoubleQuoteString 20
#define TripleString 21
#define SingleQuoteStringIgnore 22
#define DoubleQuoteStringIgnore 23
#define FromMod 24
#define FromModItem 25
#define Import 26

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int parse_py_YYlex_destroy (void );

int parse_py_YYget_debug (void );

void parse_py_YYset_debug (int debug_flag  );

YY_EXTRA_TYPE parse_py_YYget_extra (void );

void parse_py_YYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *parse_py_YYget_in (void );

void parse_py_YYset_in  (FILE * in_str  );

FILE *parse_py_YYget_out (void );

void parse_py_YYset_out  (FILE * out_str  );

int parse_py_YYget_leng (void );

char *parse_py_YYget_text (void );

int parse_py_YYget_lineno (void );

void parse_py_YYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int parse_py_YYwrap (void );
#else
extern int parse_py_YYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( parse_py_YYtext, parse_py_YYleng, 1, parse_py_YYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( parse_py_YYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( parse_py_YYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, parse_py_YYin))==0 && ferror(parse_py_YYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(parse_py_YYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int parse_py_YYlex (void);

#define YY_DECL int parse_py_YYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after parse_py_YYtext and parse_py_YYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( parse_py_YYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(parse_py_YYtext[parse_py_YYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)parse_py_YYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in parse_py_YYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! parse_py_YYin )
			parse_py_YYin = stdin;

		if ( ! parse_py_YYout )
			parse_py_YYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			parse_py_YYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE );
		}

		parse_py_YY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of parse_py_YYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 586 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 585 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
{
      // start of a function/method definition with indent
      DBG_CTX((stderr, "Found def at %d\n", yyLineNr));

      QString text = QString::fromUtf8(parse_py_YYtext);

      s_indent = computeIndent(text);
      searchFoundDef();
      BEGIN( FunctionDec );
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      // start of a function/method definition
      searchFoundDef();
      BEGIN( FunctionDec );
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      // start of a class definition with indent
      DBG_CTX((stderr,"Found class at %d\n",yyLineNr));

      QString text = QString::fromUtf8(parse_py_YYtext);

      s_indent = computeIndent(text);
      searchFoundClass();
      BEGIN( ClassDec ) ;
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // start of a class definition
     searchFoundClass();
     BEGIN( ClassDec ) ;
   }
	YY_BREAK
case 5:
case 6:
YY_RULE_SETUP
{

      // start of an from import
      s_packageCommentAllowed = false;
      BEGIN( FromMod );
   }
	YY_BREAK
case 7:
case 8:
YY_RULE_SETUP
{

      // start of an import statement
      s_packageCommentAllowed = false;
      BEGIN( Import );
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      // property
      QString text = QString::fromUtf8(parse_py_YYtext);

      current->section     = Entry::VARIABLE_SEC;
      current->mtype       = MethodType::Property;
      current->m_entryName = text.trimmed();

      current->setData(EntryKey::File_Name, yyFileName);
      current->startLine     = yyLineNr;
      current->startBodyLine = yyLineNr;

      s_packageCommentAllowed = false;

      BEGIN(VariableDec);
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
      // variable
      if (s_search_count) {
         REJECT;
      }

      QString text = QString::fromUtf8(parse_py_YYtext);

      s_indent = computeIndent(text);
      current->section        = Entry::VARIABLE_SEC;
      current->m_entryName    = text.trimmed();

      current->setData(EntryKey::File_Name, yyFileName);;
      current->startLine      = yyLineNr;
      current->startBodyLine  = yyLineNr;
      s_packageCommentAllowed = false;

      BEGIN(VariableDec);
   }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
{
      // list of variables, can not place the default value so we will skip it later on in a general rule
      // Also note ")" this is to catch also (a,b). the "("
      // is caught in the rule: [(], the ")" will be handled in [)]

      if (s_search_count > 1) {
         REJECT;
      }

      QString text = QString::fromUtf8(parse_py_YYtext);
      s_indent = computeIndent(text);

      current->section        = Entry::VARIABLE_SEC;
      current->m_entryName    = text.trimmed();

      current->setData(EntryKey::File_Name, yyFileName);
      current->startLine      = yyLineNr;
      current->startBodyLine  = yyLineNr;

      s_packageCommentAllowed = false;
      newVariable();
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      // start of a single quoted string
      s_stringContext = YY_START;

      s_defVal_active = false;
      s_docsEntry     = QSharedPointer<Entry>();

      s_packageCommentAllowed = false;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      // start of a double quoted string
      s_stringContext = YY_START;

      s_defVal_active = false;
      s_docsEntry     = QSharedPointer<Entry>();

      s_packageCommentAllowed = false;

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      gstat = true;
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      // Unix type script comment
      if (yyLineNr != 1)   {
         REJECT;
      }
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      // normal comment
      s_packageCommentAllowed = false;
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      // some other identifier
      s_packageCommentAllowed = false;
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_curIndent  = computeIndent(text);
   }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{
      // new line
      lineCount();
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      // start of a comment block
      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      // start of a comment block
      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // start of a special comment
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_curIndent  = computeIndent(text);

      s_packageCommentAllowed = false;
      initSpecialBlock();
      BEGIN(SpecialComment);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      // we have to do something with (
      s_search_count += 1;
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      // we have to do something with )
      s_search_count -= 1;
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      // any other character...this is the major default
      // that should catch everything else in Body
   }
	YY_BREAK

case 26:
YY_RULE_SETUP
{
      // python3 style imports
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      // from package import
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_packageName = text;
   }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
      BEGIN(FromModItem);
   }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      BEGIN(Search);
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      unput(*parse_py_YYtext);
      BEGIN(Search);
   }
	YY_BREAK

case 32:
YY_RULE_SETUP
{
      // import all
      QString item      = s_packageName;

      current->m_entryName     = removeRedundantWhiteSpace(substitute(item,".","::"));
      current->section  = Entry::USINGDIR_SEC;
      current->setData(EntryKey::File_Name, yyFileName);

      current_root->addSubEntry(current);

      current = QMakeShared<Entry>();
      initEntry();
      BEGIN(Search);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      QString item = s_packageName+"." + text;

      current->m_entryName = removeRedundantWhiteSpace(substitute(item,".","::"));
      current->section  = Entry::USINGDECL_SEC;
      current->setData(EntryKey::File_Name, yyFileName);

      current_root->addSubEntry(current);
      current = QMakeShared<Entry>();
      initEntry();
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(parse_py_YYtext);
      QString item  = s_packageName+"." + text;

      current->m_entryName = removeRedundantWhiteSpace(substitute(item,".","::"));
      current->section  = Entry::USINGDECL_SEC;
      current->setData(EntryKey::File_Name, yyFileName);

      current_root->addSubEntry(current);
      current = QMakeShared<Entry>();
      initEntry();
      BEGIN(Search);
   }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      BEGIN(Search);
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      unput(*parse_py_YYtext);
      BEGIN(Search);
   }
	YY_BREAK

case 39:
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(parse_py_YYtext);

      current->m_entryName = removeRedundantWhiteSpace(substitute(text,".","::"));
      current->section  = Entry::USINGDECL_SEC;
      current->setData(EntryKey::File_Name, yyFileName);

      current_root->addSubEntry(current);
      current = QMakeShared<Entry>();
      initEntry();
      BEGIN(Search);
   }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      BEGIN(Search);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      unput(*parse_py_YYtext);
      BEGIN(Search);
   }
	YY_BREAK

case 43:
YY_RULE_SETUP
{
         QString text = QString::fromUtf8(parse_py_YYtext);

         DBG_CTX((stderr,"Found instance method variable %s in %s at %d\n", csPrintable(text.mid(5)),
                  csPrintable(current_root->m_entryName), yyLineNr));

         current->m_entryName    = text.mid(5);
         current->section        = Entry::VARIABLE_SEC;

         current->setData(EntryKey::File_Name,   yyFileName);
         current->startLine      = yyLineNr;
         current->startBodyLine  = yyLineNr;

         current->setData(EntryKey::Member_Type, "");

         if (current->m_entryName.at(0) == '_') {
            // mark as private
            current->protection = Private;
         }

         newEntry();
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      DBG_CTX(stderr, "Found class method variable %s in %s at%d\n",
                  csPrintable(text.mid(4)), csPrintable(current_root->m_entryName), yyLineNr);

      current->m_entryName   = text.mid(4);
      current->section       = Entry::VARIABLE_SEC;

      current->setData(EntryKey::File_Name, yyFileName);
      current->startLine     = yyLineNr;
      current->startBodyLine = yyLineNr;

      current->setData(EntryKey::Member_Type, "");

      if (current->m_entryName.at(0)=='_') {
         // mark as private
         current->protection = Private;
      }

   newEntry();
                      }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      // start of a comment block
      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      // start of a comment block
      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // start of a special comment
      initSpecialBlock();
      BEGIN(SpecialComment);
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      // #
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      // start of a single quoted string
      s_stringContext = YY_START;

      s_defVal_active = false;
      s_docsEntry     = QSharedPointer<Entry>();

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // start of a double quoted string
      s_stringContext = YY_START;

      s_defVal_active = false;
      s_docsEntry     = QSharedPointer<Entry>();

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{
      incLineNr();
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      // identifiers
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      // other uninteresting stuff
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // anything else
   }
	YY_BREAK

case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
      DBG_CTX((stderr, "indent %d <= %d\n", computeIndent(text.mid(1)), s_indent));

      QString text = QString::fromUtf8(parse_py_YYtext);

      if (computeIndent(text.mid(1)) <= s_indent)  {

         for (int i = parse_py_YYleng - 1; i >= 0; i--) {
            unput(parse_py_YYtext[i]);
         }

         endOfDef();
         BEGIN(Search);

      } else {
         incLineNr();
         current->appendData(EntryKey::Source_Text, text);
      }
   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (computeIndent(text.mid(1)) <= s_indent)  {

         for (int i = parse_py_YYleng - 1; i >= 0; i--) {
           unput(parse_py_YYtext[i]);
         }

         endOfDef();
         BEGIN(Search);

      } else {
         incLineNr();
         current->appendData(EntryKey::Source_Text, text);
      }
   }
	YY_BREAK
case YY_STATE_EOF(FunctionBody):
{
         endOfDef();
         yyterminate();
   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // skip empty line
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 58:
YY_RULE_SETUP
{
      // something at indent >0
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      s_curIndent = computeIndent(text);

      if (s_curIndent <= s_indent) {
         // jumped out of the function
         endOfDef(1);
         BEGIN(Search);
      }
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      // start of a single quoted string
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      s_stringContext = YY_START;
      s_specialBlock  = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Source_Text;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
      // start of a double quoted string
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      s_stringContext = YY_START;
      s_specialBlock  = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Source_Text;

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 61:
YY_RULE_SETUP
{
      // non-special stuff
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);;
      s_specialBlock = false;
   }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
      // normal comment
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 63:
YY_RULE_SETUP
{
      // comment half way
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      incLineNr();
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
      // any character
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text[0]);

      s_specialBlock = false;
   }
	YY_BREAK
case 66:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
      initTriDoubleQuoteBlock();

      BEGIN(TripleComment);
   }
	YY_BREAK
case 67:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // start of a special comment
      initSpecialBlock();
      BEGIN(SpecialComment);
   }
	YY_BREAK

case 69:
YY_RULE_SETUP
{
      //found function name
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "def");
      }

      current->m_entryName = text;
      current->m_entryName = current->m_entryName.trimmed();
      newFunction();
   }
	YY_BREAK
case 70:
YY_RULE_SETUP
{
      // function without arguments
      s_specialBlock = true;          // expecting a docstring
      bodyEntry      = current;

      current->startBodyLine = yyLineNr;

      BEGIN(FunctionBody);
   }
	YY_BREAK
case 71:
YY_RULE_SETUP
{
      s_defVal.clear();
      s_braceCount = 0;

      BEGIN(FunctionTypeAnnotation);
   }
	YY_BREAK
case 72:
YY_RULE_SETUP
{
      s_funcParamsEnd = false;
      current->startBodyLine  = yyLineNr;
      BEGIN( FunctionParams );
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      // end of parameter list

      current->setData(EntryKey::Member_Args, argListToString(current->argList));
      s_funcParamsEnd = true;
   }
	YY_BREAK

case 74:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      s_argType = QString::fromUtf8(parse_py_YYtext);
   }
	YY_BREAK
case 76:
YY_RULE_SETUP
{
      // Name of parameter
      QString text = QString::fromUtf8(parse_py_YYtext);
      lineCount();

      current->argList.append( Argument() );
      current->argList.last().name = text.trimmed();
      current->argList.last().type = s_argType;
      s_argType = "";
   }
	YY_BREAK
case 77:
YY_RULE_SETUP
{
      // default value

      // TODO: this rule is too simple, need to be able to
      // match things like =")" as well

      s_defVal.clear();
      s_braceCount = 0;

      BEGIN(FunctionParamDefVal);
   }
	YY_BREAK
case 78:
YY_RULE_SETUP
{
      unput(*parse_py_YYtext);
      BEGIN(FunctionDec);

   }
	YY_BREAK
case 79:
YY_RULE_SETUP
{
      s_defVal.clear();
      s_braceCount = 0;
      BEGIN(FunctionAnnotation);
   }
	YY_BREAK
case 80:
YY_RULE_SETUP
{
      // a comment
   }
	YY_BREAK
case 81:
YY_RULE_SETUP
{
      // default rule inside arguments
   }
	YY_BREAK

case 82:
case 83:
case 84:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];

      ++s_braceCount;
   }
	YY_BREAK
case 85:
case 86:
case 87:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];

      --s_braceCount;
   }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (s_braceCount == 0) {
         current->setData(EntryKey::Member_Type, s_defVal);

         unput(*parse_py_YYtext);
         BEGIN(FunctionDec);

      } else {
         s_defVal += text[0];
      }
   }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal   += text[0];

      s_defVal_active = true;

      s_stringContext=FunctionTypeAnnotation;
      BEGIN(SingleQuoteString);
   }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal   += text[0];

      s_defVal_active = true;

      s_stringContext = FunctionTypeAnnotation;
      BEGIN(DoubleQuoteString);
   }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];
      incLineNr();
   }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];
   }
	YY_BREAK

case 93:
case 94:
case 95:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];

      ++s_braceCount;
   }
	YY_BREAK
case 96:
case 97:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];

      --s_braceCount;
   }
	YY_BREAK
case 98:
case 99:
case 100:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (s_braceCount == 0){
         // end of default argument

         if (! current->argList.listEmpty()) {
            current->argList.last().type = s_defVal.trimmed();
         }

         if (text[0] != ',') {
            unput(*parse_py_YYtext);
         }

         BEGIN(FunctionParams);

      } else {
         if (text[0] == ')') {
            --s_braceCount;
         }

         s_defVal += text[0];
      }
   }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];

      s_defVal_active = true;

      s_stringContext = FunctionAnnotation;
      BEGIN(SingleQuoteString);
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];

      s_defVal_active = true;

      s_stringContext = FunctionAnnotation;
      BEGIN(DoubleQuoteString);
   }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];

      incLineNr();
   }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];
   }
	YY_BREAK

case 105:
case 106:
case 107:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];

      ++s_braceCount;
   }
	YY_BREAK
case 108:
case 109:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];

      --s_braceCount;
   }
	YY_BREAK
case 110:
case 111:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (s_braceCount == 0) {

         if (! current->argList.listEmpty()) {
            current->argList.last().defval = s_defVal.trimmed();
         }

         if (text[0] != ',') {
            unput(*parse_py_YYtext);
         }

         BEGIN(FunctionParams);

      } else {
         if (text[0] == ')') {
            --s_braceCount;
         }

         s_defVal += text[0];
      }
   }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal   += text[0];

      s_defVal_active = true;

      s_stringContext  = FunctionParamDefVal;
      BEGIN(SingleQuoteString);
   }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];

      s_defVal_active = true;

      s_stringContext = FunctionParamDefVal;
      BEGIN(DoubleQuoteString);
   }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];
      incLineNr();
   }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_defVal += text[0];
   }
	YY_BREAK

case 116:
/* rule 116 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // new def at indent 0
      incLineNr();
      endOfDef();
      BEGIN(Search);
   }
	YY_BREAK
case 117:
/* rule 117 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // start of a special comment at indent 0
      incLineNr();
      endOfDef();
      BEGIN(Search);
   }
	YY_BREAK
case 118:
/* rule 118 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // skip empty line
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case YY_STATE_EOF(ClassBody):
{
         endOfDef();
         yyterminate();
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
      // something at indent >0
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_curIndent  = computeIndent(text);

      DBG_CTX((stderr,"s_curIndent = %d s_indent = %d\n", s_curIndent, s_indent));

      if (s_curIndent<=s_indent)  {
         // jumped out of the class/method

         endOfDef(1);
         s_indent = s_curIndent;
         BEGIN(Search);

      } else {
         current->appendData(EntryKey::Source_Text, text);
      }
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      // start of a single quoted string
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text[0]);

      s_stringContext = YY_START;
      s_specialBlock  = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Source_Text;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
      // start of a double quoted string
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text[0]);

      s_stringContext = YY_START;
      s_specialBlock  = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Source_Text;

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
      // non-special stuff
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
      s_specialBlock = false;
   }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text[0]);
      incLineNr();
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      // normal comment
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
      // any character
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_specialBlock = false;
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK

case 128:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "class");
      }

      current->section = Entry::CLASS_SEC;
      current->m_entryName = text;

      // prepend scope in case of nested classes
      if (current_root->section & Entry::SCOPE_MASK) {
         current->m_entryName.prepend(current_root->m_entryName + "::");
      }

      current->m_entryName     = current->m_entryName.trimmed();
      current->setData(EntryKey::File_Name,   yyFileName);

      docBlockContext   = YY_START;
      docBlockInBody    = false;
      isJavaDocStyle    = false;

      docBlock.resize(0);
      BEGIN(ClassInheritance);
   }
	YY_BREAK

case 129:
YY_RULE_SETUP
{
      // syntactic sugar for the list
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      // begin of the class definition
      s_specialBlock         = true;                // expecting a docstring
      current->startBodyLine = yyLineNr;
      current->setData(EntryKey::Source_Text, "");
      BEGIN(ClassCaptureIndent);
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->extends.append(BaseInfo(substitute(text,".","::"), Public, Normal));
      // Has base class-do stuff
   }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
      // start of a single quoted string
      s_stringContext = YY_START;
      BEGIN(SingleQuoteStringIgnore);
   }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
      // start of a double quoted string
      s_stringContext = YY_START;
      BEGIN(DoubleQuoteStringIgnore);
   }
	YY_BREAK

case 134:
YY_RULE_SETUP
{
      // end of a single quoted string
      BEGIN(s_stringContext);
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
      // do nothing
   }
	YY_BREAK

case 136:
YY_RULE_SETUP
{
      // end of a double quoted string
      BEGIN(s_stringContext);
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
      // do nothing
   }
	YY_BREAK

case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{
      // Blankline - ignore, keep looking for indentation.
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      lineCount();
   }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);

      initTriDoubleQuoteBlock();
      current->appendData(EntryKey::Source_Text, text);
      BEGIN(TripleComment);
   }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);

      initTriSingleQuoteBlock();
      current->appendData(EntryKey::Source_Text, text);
      BEGIN(TripleComment);
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
         // start of a special comment
         initSpecialBlock();
         BEGIN(SpecialComment);
      }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
         // ignore comment with just one #
      }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Source_Text, text);

      s_curIndent = computeIndent(text);
      bodyEntry   = current;

      DBG_CTX((stderr,"setting indent %d\n",s_curIndent));

      BEGIN(ClassBody);
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      // Just pushback an empty class, and resume parsing the body
      QString text = QString::fromUtf8(parse_py_YYtext);

      newEntry();
      current->appendData(EntryKey::Source_Text, text);

      BEGIN( Search );
   }
	YY_BREAK

case 145:
YY_RULE_SETUP
{
      // the assignment operator
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_start_init = true;

      current->setData(EntryKey::Initial_Value, text + " ");
   }
	YY_BREAK
case 146:
YY_RULE_SETUP
{
      // spaces
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
      // integer value
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "int");
      }

      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      // floating point value
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "float");
      }

      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      // boolean value
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "bool");
      }

      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 150:
YY_RULE_SETUP
{
      // string
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "string");
      }

      current->appendData(EntryKey::Initial_Value, text);

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      s_stringContext = VariableDec;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
{
      // string
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "string");
      }

      current->appendData(EntryKey::Initial_Value, text);

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      s_stringContext = VariableDec;
      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 152:
YY_RULE_SETUP
{
      // start of a comment block
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "string");
      }

      current->appendData(EntryKey::Initial_Value, text);

      s_doubleQuote = true;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      s_stringContext = VariableDec;

      BEGIN(TripleString);
   }
	YY_BREAK
case 153:
YY_RULE_SETUP
{
      // start of a comment block
      QString text  = QString::fromUtf8(parse_py_YYtext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "string");
      }

      current->appendData(EntryKey::Initial_Value, text);

      s_doubleQuote = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      s_stringContext = VariableDec;

      BEGIN(TripleString);
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
{
      // tuple, only when direct after =

      if (current->mtype != MethodType::Property && s_start_init) {
         current->setData(EntryKey::Member_Type, "tuple");
      }

      current->appendData(EntryKey::Initial_Value, "(");

      s_atomStart = '(';
      s_atomEnd   = ')';
      s_atomCount = 1;
      BEGIN( VariableAtom );
   }
	YY_BREAK
case 155:
YY_RULE_SETUP
{
      // list
      if (s_start_init) {
         current->setData(EntryKey::Member_Type, "list");
      }

      current->appendData(EntryKey::Initial_Value, "[");

      s_atomStart = '[';
      s_atomEnd   = ']';
      s_atomCount = 1;
      BEGIN( VariableAtom );
   }
	YY_BREAK
case 156:
YY_RULE_SETUP
{
      // dictionary

      if (s_start_init) {
         current->setData(EntryKey::Member_Type, "dictionary");
      }

      current->appendData(EntryKey::Initial_Value, "{");

      s_atomStart = '{';
      s_atomEnd   = '}';
      s_atomCount = 1;
      BEGIN( VariableAtom );
   }
	YY_BREAK
case 157:
YY_RULE_SETUP
{
      // comment
      BEGIN( VariableEnd );
   }
	YY_BREAK
case 158:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      // do something based on the type of the IDENTIFIER
      if (current->getData(EntryKey::Member_Type).isEmpty())  {

         for (auto child : current_root->children() )  {

            if (child->m_entryName == text) {
               current->setData(EntryKey::Member_Type,  child->getData(EntryKey::Member_Type));
               break;
            }
         }
      }

      s_start_init = false;
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 159:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_start_init = false;
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
{
      unput('\n');
      BEGIN( VariableEnd );
   }
	YY_BREAK

case 161:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Initial_Value,  text[0]);

      if (s_atomStart == text[0]) {
         s_atomCount++;
      }
   }
	YY_BREAK
case 162:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Initial_Value,  text[0]);

      if (s_atomEnd == text[0]) {
         s_atomCount--;
      }

      if (s_atomCount == 0) {
         s_start_init = false;
         BEGIN(VariableDec);
      }
   }
	YY_BREAK
case 163:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);
      s_specialBlock = false;
      current->appendData(EntryKey::Source_Text, text);
      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 164:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(parse_py_YYtext);

      s_specialBlock = false;
      current->appendData(EntryKey::Source_Text, text);
      initTriSingleQuoteBlock();

      BEGIN(TripleComment);
   }
	YY_BREAK
case 165:
YY_RULE_SETUP
{
      s_stringContext = YY_START;
      current->appendData(EntryKey::Initial_Value, "'");

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 166:
YY_RULE_SETUP
{
      s_stringContext = YY_START;
      current->appendData(EntryKey::Initial_Value, "\"");

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 167:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 168:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      current->appendData(EntryKey::Initial_Value, text);

      incLineNr();
   }
	YY_BREAK

case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      newVariable();
      BEGIN(Search);
   }
	YY_BREAK
case 171:
YY_RULE_SETUP
{
      unput(*parse_py_YYtext);
      newVariable();
      BEGIN(Search);
   }
	YY_BREAK
case YY_STATE_EOF(VariableEnd):
{
      yyterminate();
   }
	YY_BREAK

case 172:
case 173:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);

      if (s_doubleQuote == (text[0] == '"'))  {

         if (s_specialBlock) {
            // expecting a docstring
            QString actualDoc = docBlock;

            if (! docBlockSpecial) {
               // legacy unformatted docstring
               if (! actualDoc.isEmpty()) {
                  actualDoc.prepend("\\verbatim ");
                  actualDoc.append("\\endverbatim ");
               }
            }

            handleCommentBlock(actualDoc, false);

         } else if (s_packageCommentAllowed) {
            // expecting module docs
            QString actualDoc = docBlock;

            if (! docBlockSpecial) {
               // legacy unformatted docstring
               if (! actualDoc.isEmpty()) {

                  actualDoc.prepend("\\verbatim ");
                  actualDoc.append("\\endverbatim ");
               }
            }

            actualDoc.prepend("\\namespace " + s_moduleScope + " ");
            handleCommentBlock(actualDoc, false);
         }

         if ((docBlockContext == ClassBody) || docBlockContext == FunctionBody) {
            current->appendData(EntryKey::Source_Text, docBlock);
            current->appendData(EntryKey::Source_Text, text);
         }

         BEGIN(docBlockContext);

      } else  {
         docBlock += text;

      }

      s_packageCommentAllowed = false;
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
{
      // leading whitespace
      QString text = QString::fromUtf8(parse_py_YYtext);
      int indent   = computeIndent(text);

      if (indent >= s_curIndent) {
         // strip s_curIndent amount of whitespace

         for (int i= 0; i<indent - s_curIndent; i++) {
            docBlock += ' ';
         }

         DBG_CTX((stderr,"stripping indent %d\n",s_curIndent));

      } else {
         DBG_CTX((stderr,"not stripping: %d<%d\n",indent,s_curIndent));
         docBlock += text;

      }
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text;
   }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      incLineNr();
      docBlock += text;
   }
	YY_BREAK
case 177:
YY_RULE_SETUP
{
      // escaped char
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text;
   }
	YY_BREAK
case 178:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text;
   }
	YY_BREAK

case 179:
YY_RULE_SETUP
{
      // skip leading hashes
   }
	YY_BREAK
case 180:
/* rule 180 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up parse_py_YYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up parse_py_YYtext again */
YY_RULE_SETUP
{
      // continuation of the comment on the next line
      docBlock  += '\n';
      docBrief  =  false;

      incLineNr();
   }
	YY_BREAK
case 181:
YY_RULE_SETUP
{
      // any other stuff
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text;
   }
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
{
      // new line that ends the comment
      handleCommentBlock(docBlock, docBrief);
      incLineNr();
      BEGIN(docBlockContext);
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      // anything we missed
      QString text = QString::fromUtf8(parse_py_YYtext);
      docBlock += text[0];
   }
	YY_BREAK

case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
{
      // line continuation
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
      incLineNr();
   }
	YY_BREAK
case 185:
YY_RULE_SETUP
{
      // escaped char
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK
case 186:
YY_RULE_SETUP
{
      // triple double quotes
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK
case 187:
YY_RULE_SETUP
{
      // end of the string
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
      BEGIN(s_stringContext);
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
{
      // normal chars
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK
case 189:
YY_RULE_SETUP
{
      // normal char
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK

case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
{
      // line continuation
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
      incLineNr();
   }
	YY_BREAK
case 191:
YY_RULE_SETUP
{
      // escaped char
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
                               }
	YY_BREAK
case 192:
YY_RULE_SETUP
{
      // triple single quotes
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK
case 193:
YY_RULE_SETUP
{
      // end of the string
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
      BEGIN(s_stringContext);
   }
	YY_BREAK
case 194:
YY_RULE_SETUP
{
      // normal chars
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK
case 195:
YY_RULE_SETUP
{
      // normal char
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK

case 196:
case 197:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);

      bool tmp = (text[0] == '"');

      if (s_doubleQuote == tmp)  {
         BEGIN(s_stringContext);
      }
   }
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      lineCount();
      addToOutput(text);
   }
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      incLineNr();
      addToOutput(text);
   }
	YY_BREAK
case 200:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(parse_py_YYtext);
      addToOutput(text);
   }
	YY_BREAK

/* ------------ End rules -------------- */
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
{
      lineCount();
   }
	YY_BREAK
case 202:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 203:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Search):
			case YY_STATE_EOF(SearchMemVars):
			case YY_STATE_EOF(TryClassDocString):
			case YY_STATE_EOF(TripleComment):
			case YY_STATE_EOF(SpecialComment):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(FunctionAnnotation):
			case YY_STATE_EOF(FunctionTypeAnnotation):
			case YY_STATE_EOF(FunctionParamDefVal):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(ClassCaptureIndent):
			case YY_STATE_EOF(VariableDec):
			case YY_STATE_EOF(VariableAtom):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
			case YY_STATE_EOF(SingleQuoteStringIgnore):
			case YY_STATE_EOF(DoubleQuoteStringIgnore):
			case YY_STATE_EOF(FromMod):
			case YY_STATE_EOF(FromModItem):
			case YY_STATE_EOF(Import):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed parse_py_YYin at a new source and called
			 * parse_py_YYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = parse_py_YYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( parse_py_YYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * parse_py_YYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of parse_py_YYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			parse_py_YYrestart(parse_py_YYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) parse_py_YYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 586 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 586 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 585);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up parse_py_YYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					parse_py_YYrestart(parse_py_YYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( parse_py_YYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve parse_py_YYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void parse_py_YYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        parse_py_YYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE );
	}

	parse_py_YY_init_buffer(YY_CURRENT_BUFFER,input_file );
	parse_py_YY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void parse_py_YY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		parse_py_YYpop_buffer_state();
	 *		parse_py_YYpush_buffer_state(new_buffer);
     */
	parse_py_YYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	parse_py_YY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (parse_py_YYwrap()) processing, but the only time this flag
	 * is looked at is after parse_py_YYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void parse_py_YY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	parse_py_YYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE parse_py_YY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) parse_py_YYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in parse_py_YY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) parse_py_YYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in parse_py_YY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	parse_py_YY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with parse_py_YY_create_buffer()
 * 
 */
    void parse_py_YY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		parse_py_YYfree((void *) b->yy_ch_buf  );

	parse_py_YYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a parse_py_YYrestart() or at EOF.
 */
    static void parse_py_YY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	parse_py_YY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then parse_py_YY_init_buffer was _probably_
     * called from parse_py_YYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void parse_py_YY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		parse_py_YY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void parse_py_YYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	parse_py_YYensure_buffer_stack();

	/* This block is copied from parse_py_YY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from parse_py_YY_switch_to_buffer. */
	parse_py_YY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void parse_py_YYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	parse_py_YY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		parse_py_YY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void parse_py_YYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)parse_py_YYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in parse_py_YYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)parse_py_YYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in parse_py_YYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE parse_py_YY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) parse_py_YYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in parse_py_YY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	parse_py_YY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to parse_py_YYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       parse_py_YY_scan_bytes() instead.
 */
YY_BUFFER_STATE parse_py_YY_scan_string (yyconst char * yystr )
{
    
	return parse_py_YY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to parse_py_YYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE parse_py_YY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) parse_py_YYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in parse_py_YY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = parse_py_YY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in parse_py_YY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up parse_py_YYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		parse_py_YYtext[parse_py_YYleng] = (yy_hold_char); \
		(yy_c_buf_p) = parse_py_YYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		parse_py_YYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int parse_py_YYget_lineno  (void)
{
        
    return parse_py_YYlineno;
}

/** Get the input stream.
 * 
 */
FILE *parse_py_YYget_in  (void)
{
        return parse_py_YYin;
}

/** Get the output stream.
 * 
 */
FILE *parse_py_YYget_out  (void)
{
        return parse_py_YYout;
}

/** Get the length of the current token.
 * 
 */
int parse_py_YYget_leng  (void)
{
        return parse_py_YYleng;
}

/** Get the current token.
 * 
 */

char *parse_py_YYget_text  (void)
{
        return parse_py_YYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void parse_py_YYset_lineno (int  line_number )
{
    
    parse_py_YYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see parse_py_YY_switch_to_buffer
 */
void parse_py_YYset_in (FILE *  in_str )
{
        parse_py_YYin = in_str ;
}

void parse_py_YYset_out (FILE *  out_str )
{
        parse_py_YYout = out_str ;
}

int parse_py_YYget_debug  (void)
{
        return parse_py_YY_flex_debug;
}

void parse_py_YYset_debug (int  bdebug )
{
        parse_py_YY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from parse_py_YYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    parse_py_YYin = stdin;
    parse_py_YYout = stdout;
#else
    parse_py_YYin = (FILE *) 0;
    parse_py_YYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * parse_py_YYlex_init()
     */
    return 0;
}

/* parse_py_YYlex_destroy is for both reentrant and non-reentrant scanners. */
int parse_py_YYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		parse_py_YY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		parse_py_YYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	parse_py_YYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    parse_py_YYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * parse_py_YYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *parse_py_YYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *parse_py_YYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void parse_py_YYfree (void * ptr )
{
	free( (char *) ptr );	/* see parse_py_YYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static void parseCompounds(QSharedPointer<Entry> rt)
{
   // safter to make a temp copy
   const QVector<QSharedPointer<Entry>> tmpChildren = rt->children();

   for (auto ce : tmpChildren) {

      if (! ce->getData(EntryKey::Source_Text).isEmpty()) {
         // init scanner state

         s_inputString   = ce->getData(EntryKey::Source_Text);
         s_inputPosition = 0;

         parse_py_YYrestart(parse_py_YYin );

         if (ce->section & Entry::COMPOUND_MASK) {
            current_root = ce;
            BEGIN( Search );

         } else if (ce->parent()) {
            current_root = ce->parent();
            BEGIN( SearchMemVars );
         }

         yyFileName = ce->getData(EntryKey::File_Name);
         yyLineNr   = ce->startBodyLine;

         current = QMakeShared<Entry>();
         initEntry();

         groupEnterCompound(yyFileName, yyLineNr, ce->m_entryName);

         parse_py_YYlex() ;
         s_lexInit = true;

         current = QSharedPointer<Entry>();
         ce->setData(EntryKey::Source_Text, "");

         groupLeaveCompound(yyFileName, yyLineNr, ce->m_entryName);

      }
      parseCompounds(ce);
   }
}

static void parseMain(const QString &fileName, const QString &fileBuf, QSharedPointer<Entry> rt)
{
   initParser();

   s_inputString   = fileBuf;
   s_inputPosition = 0;

   protection      = Public;
   mtype           = MethodType::Method;
   gstat           = false;
   virt            = Normal;

   current_root    = rt;
   s_specialBlock  = false;

   s_inputFile.setFileName(fileName);

   if (s_inputFile.open(QIODevice::ReadOnly)) {
      yyLineNr   = 1;
      yyFileName = fileName;

      //setContext();
      msg("Parsing %s\n", csPrintable(yyFileName));

      QFileInfo fi(fileName);
      s_moduleScope = findPackageScope(fileName);

      QString baseName = fi.baseName();

      if (baseName != "__init__") { // package initializer file is not a package itself
         if (!s_moduleScope.isEmpty()) {
            s_moduleScope += "::";
         }
         s_moduleScope += baseName;
      }

      current            = QMakeShared<Entry>();
      initEntry();

      current->m_entryName    = s_moduleScope;
      current->section        = Entry::NAMESPACE_SEC;
      current->setData(EntryKey::Member_Type, "namespace");

      current->setData(EntryKey::File_Name,   yyFileName);
      current->startLine      = yyLineNr;
      current->startBodyLine  = yyLineNr;

      rt->addSubEntry(current);

      current_root  = current;
      initParser();

      current = QMakeShared<Entry>();
      groupEnterFile(yyFileName, yyLineNr);

      current->reset();
      initEntry();
      parse_py_YYrestart(parse_py_YYin );

      BEGIN( Search );
      parse_py_YYlex();
      s_lexInit = true;

      groupLeaveFile(yyFileName, yyLineNr);

      current_root->setData(EntryKey::Source_Text, "");

      current = QSharedPointer<Entry>();
      parseCompounds(current_root);

      s_inputFile.close();
   }
}

static void parsePrototype(const QString &text)
{
   if (text.isEmpty()) {
      warn(yyFileName, yyLineNr, "Empty prototype found");
      return;
   }

   s_specialBlock = false;
   s_packageCommentAllowed = false;

   QString orgInputString;
   int orgInputPosition;
   YY_BUFFER_STATE orgState;

   // save scanner state
   orgState = YY_CURRENT_BUFFER;
   parse_py_YY_switch_to_buffer(parse_py_YY_create_buffer(parse_py_YYin,YY_BUF_SIZE));
   orgInputString   = s_inputString;
   orgInputPosition = s_inputPosition;

   // set new string
   s_inputString   = text;
   s_inputPosition = 0;

   parse_py_YYrestart(parse_py_YYin );

   BEGIN( FunctionDec );

   parse_py_YYlex();
   s_lexInit = true;

   current->m_entryName = current->m_entryName.trimmed();
   if (current->section == Entry::MEMBERDOC_SEC && current->getData(EntryKey::Member_Args).isEmpty()) {
      current->section = Entry::VARIABLEDOC_SEC;
   }

   // restore original scanner state

   YY_BUFFER_STATE tmpBuf = YY_CURRENT_BUFFER;
   parse_py_YY_switch_to_buffer(orgState);
   parse_py_YY_delete_buffer(tmpBuf);

   s_inputString   = orgInputString;
   s_inputPosition = orgInputPosition;
}

void pyFreeParser()
{
   if (s_lexInit) {
      parse_py_YYlex_destroy();
   }
}

void Python_Parser::parseInput(const QString &fileName, const QString &fileBuf,
                  QSharedPointer<Entry> root, enum ParserMode mode, QStringList &includedFiles, bool useClang)
{
   (void) mode;
   (void) includedFiles;
   (void) useClang;

   s_thisParser = this;

   printlex(parse_py_YY_flex_debug, true, __FILE__, fileName);
   ::parseMain(fileName, fileBuf, root);
   printlex(parse_py_YY_flex_debug, false, __FILE__, fileName);
}

bool Python_Parser::needsPreprocessing(const QString &) const
{
  return false;
}

void Python_Parser::parseCode(CodeGenerator &codeOutIntf, const QString &scopeName,
                  const QString &input, SrcLangExt, bool isExampleBlock,
                  const QString &exampleName, QSharedPointer<FileDef> fileDef, int startLine,
                  int endLine, bool inlineFragment, QSharedPointer<MemberDef> memberDef,
                  bool showLineNumbers, QSharedPointer<Definition> searchCtx, bool collectXRefs )
{
   ::parsePythonCode(codeOutIntf, scopeName, input, isExampleBlock, exampleName,
                  fileDef, startLine, endLine, inlineFragment, memberDef,
                  showLineNumbers, searchCtx, collectXRefs);
}

void Python_Parser::parsePrototype(const QString &text)
{
   ::parsePrototype(text);
}

void Python_Parser::resetCodeParserState()
{
   ::resetPythonCodeParserState();
}

