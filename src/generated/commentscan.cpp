/************************************************************************
*
* Copyright (c) 2014-2021 Barbara Geller & Ansel Sermersheim
* Copyright (c) 1997-2014 Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 228
#define YY_END_OF_BUFFER 229
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[948] =
    {   0,
       90,   90,  146,  146,  160,  160,  175,  175,  219,  219,
      166,  166,  229,  228,   52,  228,   52,  228,   50,  228,
       52,  228,   52,  228,   52,  228,   52,  228,   49,   52,
      228,   52,  228,   52,  228,   32,   52,  228,   52,  228,
       52,  228,   52,  228,   52,  228,   52,  228,   52,  228,
       52,  228,   49,   52,  228,   52,  228,   52,  228,  109,
      228,  108,  228,  109,  228,  106,  109,  228,  109,  228,
      109,  228,  112,  228,  110,  228,  112,  228,  112,  228,
      136,  228,  135,  228,  136,  228,  133,  136,  228,  136,
      228,   85,  228,   85,  228,   84,  228,   85,  228,   85,

      228,   85,  228,   81,   85,  228,   85,  228,   85,  228,
       89,  228,   86,  228,   89,  228,   87,   89,  228,   89,
      228,   89,  228,   89,  228,   93,  228,   92,  228,   90,
       93,  228,   90,   93,  228,   93,  228,   90,   93,  228,
       90,   93,  228,   93,  228,   85,  228,   84,  228,   85,
      228,   85,  228,   85,  228,   85,  228,   85,  228,   97,
      228,   97,  228,   96,  228,   97,  228,   97,  228,   97,
      228,   94,   97,  228,   97,  228,   97,  228,  124,  228,
      123,  228,  121,  124,  228,  124,  228,  128,  228,  127,
      228,  128,  228,  128,  228,  132,  228,  131,  228,  132,

      228,  132,  228,  120,  228,  117,  228,  120,  228,  118,
      120,  228,  120,  228,  120,  228,  116,  228,  116,  228,
      114,  116,  228,  115,  116,  228,16497,   71,  228,   70,
      228,   71,  228,   68,   71,  228,   71,  228,   75,  228,
       75,  228,   74,  228,   75,  228,   75,  228,   75,  228,
       72,   75,  228,   75,  228,   75,  228,   79,  228,   78,
      228,   79,  228,   76,   79,  228,   79,  228,  101,  228,
      100,  228,   98,  101,  228,  101,  228,  103,  105,  228,
      104,  228,  105,  228,  142,  228,  141,  228,  140,  142,
      228,  142,  228,  146,  149,  228,  143,  228,  146,  149,

      228,  149,  228,  149,  228,  151,  228,  150,  228,  228,
      154,  228,  154,  228,  152,  228,  154,  228,  154,  228,
      160,  164,  228,  161,  228,  164,  228,  164,  228,  164,
      228,  164,  228,  164,  228,  139,  228,  137,  228,  139,
      228,  173,  228,  173,  228,  171,  228,  165,  173,  228,
      170,  173,  228,  173,  228,  176,  228,  175,  176,  228,
      174,  228,  176,  228,  183,  184,  228,  182,  228,  184,
      228,  184,  228,  184,  228,  194,  195,  228,  185,  228,
      195,  228,  195,  228,  195,  228,  198,  228,  196,  228,
      198,  228,  202,  228,  200,  228,  199,  202,  228,  202,

      228,  205,  208,  228,  203,  228,  206,  208,  228,  207,
      208,  228,  208,  228,  208,  228,  211,  228,  209,  228,
      211,  228,  214,  228,  213,  228,  214,  228,  212,  214,
      228,  214,  228,  217,  228,  216,  228,  217,  228,  215,
      217,  228,  217,  228,   65,   67,  228,   66,  228,   67,
      228,   67,  228,  157,  228,  156,  228,  155,  157,  228,
      157,  228,   55,   56,  228,   54,  228,   56,  228,   56,
      228,  219,  221,  228,  220,  228,  221,  228,  221,  228,
      221,  228,  224,  228,  223,  228,  224,  228,  222,  224,
      228,  224,  228,  226,  227,  228,  225,  228,  227,  228,

      166,  228,  166,  169,  228,  167,  228,  168,  228,   60,
       61,  228,   58,  228,   59,   61,  228,   61,  228,   61,
      228,   48,    4,   41,   43,   45,   43,   31,   31,   23,
       23,   23,   23,   23,   29,   30,   25,   31,   32,   23,
       23,   23,   23,   23,   23,   51,   35,   36,   41,   33,
      106,  106,  107,  106,  111,  133,  133,  134,   81,   81,
       83,   81,   87,   87,   88,   87,   90,   90,   90,   90,
       90,   90,   91,   90,   94,   94,   95,   94,  121,  122,
      125,  126,  130,  129,  130,  118,  118,  119,  118,  115,
    16497, 8305,  115,16497,   68,   68,   68,   69,   72,   72,

       73,   72,   76,   76,   77,   98,   99,  103,  102,  140,
      146,  143,  146,  148,  148,  145,  150,  153,  160,  163,
      162,  138,  165,  170,  172,  175,  174,  183,  194,  197,
      199,  201,  205,  204,  210,  212,  212,  215,  215,   65,
      155,   55,  219,  218,  222,  226,  166,   60,   31,   23,
       42,   40,   47,   43,   47,   47,   47,   43,   47,   47,
       44,    6,   39,    1,    1,    2,   23,   23,   23,   27,
       28,   23,   25,    5,   23,   23,   23,   23,   37,   40,
       34,  106,  106,   81,   87,   87,   90,   90,   90,   94,
      118,  118,   68,   68,   68,   68,   72,   76,  147,   62,

       63,   64,   53,  218,  222,  222,   57,   23,   47,   47,
       16,   38,    1,   24,    2,   22,   23,   23,   23,   23,
       23,   23,   23,  106,   80,   87,   90,   90,   82,  118,
       68,   68,   68,   76,  147,  178,  186,   53,  222,   23,
       15,   46,    6,   13,   22,   23,   23,   26,   22,   26,
       23,   23,   23,   23,   23,  106,   87,   90,  118,   23,
        3,   14,    7,   23,   23,   26,   23,   23,   23,   23,
       23,  106,   87,   90,  118,   98,  180,  188,   23,   23,
       23,   23,   23,   23,   23,   23,  106,   87,   90,  118,
      159,  179,  177,  187,   23,   23,   23,   23,   23,   23,

       23,  106,   87,   90,  118,  158,  181,   23,   17,   12,
        9,    8,   23,   23,   21,   23,   23,   23,  106,   87,
       90,  118,  189,   23,   11,   10,   23,   23,   23,   23,
       23,  106,   87,   90,  118,   23,   23,   23,   23,   23,
       23,  106,   87,   90,  118,  192,   23,   23,   18,   23,
       23,   18,   23,   23,  106,   87,   90,  118,  193,  190,
       23,   23,   18,   23,   23,   23,  106,   87,   90,  118,
      193,   23,   23,   23,   23,  106,   87,   90,  118,   23,
       23,   23,   23,  106,   87,   90,  118,  191,   23,   20,
       23,   20,   23,   19,   23,   50,  106,  108,  110,  135,

       84,   86,   87,   90,   92,   96,  123,  127,  131,  117,
      118,   70,   74,   78,  100,  104,  141,  144,  151,  152,
      161,  137,  171,  182,  185,  196,  200,  203,  209,  213,
      216,  156,   54,  220,  223,  225,   58,   19,   23,   20,
       23,   19,   23,    5,   19,   23,   48
    } ;

static yyconst flex_int16_t yy_accept[1626] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   10,   11,   11,   11,   11,   11,   12,
       13,   13,   13,   14,   15,   17,   19,   21,   23,   25,

       27,   29,   32,   34,   36,   39,   41,   43,   45,   47,
       49,   51,   53,   56,   58,   60,   62,   64,   66,   69,
       71,   73,   75,   77,   79,   81,   83,   85,   87,   90,
       92,   94,   96,   98,  100,  102,  104,  107,  109,  111,
      113,  115,  117,  120,  122,  124,  126,  128,  130,  133,
      136,  138,  141,  144,  146,  148,  150,  152,  154,  156,
      158,  160,  162,  164,  166,  168,  170,  172,  175,  177,
      179,  181,  183,  186,  188,  190,  192,  194,  196,  198,
      200,  202,  204,  206,  208,  210,  213,  215,  217,  219,
      221,  224,  228,  230,  232,  234,  237,  239,  241,  243,

      245,  247,  249,  251,  254,  256,  258,  260,  262,  264,
      267,  269,  271,  273,  276,  278,  281,  283,  285,  287,
      289,  292,  294,  297,  299,  302,  304,  306,  308,  310,
      311,  313,  315,  317,  319,  321,  324,  326,  328,  330,
      332,  334,  336,  338,  340,  342,  344,  346,  348,  351,
      354,  356,  358,  361,  363,  365,  368,  370,  372,  374,
      376,  379,  381,  383,  385,  387,  389,  391,  393,  395,
      397,  400,  402,  405,  407,  410,  413,  415,  417,  419,
      421,  423,  425,  427,  429,  432,  434,  436,  438,  440,
      443,  445,  448,  450,  452,  454,  456,  458,  461,  463,

      466,  468,  470,  472,  475,  477,  479,  481,  483,  485,
      487,  489,  492,  494,  497,  499,  501,  503,  506,  508,
      510,  513,  515,  518,  520,  522,  522,  522,  522,  522,
      523,  523,  523,  524,  524,  524,  524,  524,  524,  525,
      526,  527,  527,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  529,  529,  530,
      531,  532,  533,  534,  535,  536,  537,  539,  540,  540,
      541,  542,  543,  544,  545,  546,  547,  547,  547,  547,
      547,  547,  547,  548,  549,  550,  550,  551,  551,  551,
      551,  551,  551,  552,  553,  553,  553,  553,  554,  555,

      556,  556,  557,  557,  558,  558,  558,  559,  559,  559,
      559,  559,  559,  560,  560,  560,  561,  561,  561,  562,
      562,  562,  562,  563,  563,  564,  565,  565,  565,  565,
      566,  567,  567,  568,  569,  569,  570,  571,  572,  572,
      572,  573,  573,  574,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  576,  576,  576,  577,  577,  578,  578,  578,
      578,  579,  580,  580,  581,  581,  581,  582,  582,  584,
      584,  584,  585,  585,  586,  586,  586,  587,  588,  588,
      588,  588,  589,  590,  592,  592,  593,  595,  596,  596,

      596,  597,  597,  598,  598,  599,  599,  599,  599,  599,
      599,  600,  600,  600,  601,  601,  602,  602,  602,  602,
      603,  604,  604,  605,  605,  606,  606,  607,  607,  607,
      608,  608,  609,  609,  610,  610,  611,  611,  612,  613,
      614,  614,  615,  616,  616,  617,  617,  618,  618,  618,
      618,  618,  619,  619,  620,  621,  622,  622,  622,  622,
      623,  623,  623,  624,  625,  625,  626,  626,  627,  628,
      628,  628,  629,  629,  629,  629,  630,  630,  630,  630,
      630,  630,  630,  631,  631,  632,  632,  633,  633,  634,
      634,  635,  635,  635,  636,  636,  637,  637,  638,  638,

      638,  639,  639,  640,  640,  640,  641,  641,  641,  642,
      642,  643,  643,  643,  644,  645,  645,  645,  646,  646,
      646,  647,  647,  648,  649,  649,  649,  650,  651,  651,
      651,  651,  651,  652,  653,  654,  656,  657,  658,  660,
      661,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  663,  663,  663,  663,  663,  663,
      664,  665,  666,  667,  668,  668,  669,  670,  671,  672,
      672,  673,  674,  675,  676,  677,  678,  679,  679,  679,
      679,  679,  680,  681,  681,  682,  683,  683,  684,  684,
      684,  684,  684,  684,  684,  685,  686,  686,  687,  688,

      688,  689,  689,  690,  690,  690,  690,  690,  691,  691,
      691,  691,  692,  692,  693,  694,  695,  696,  697,  697,
      697,  698,  698,  699,  699,  699,  699,  699,  699,  699,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  701,  702,  703,
      703,  703,  704,  704,  705,  705,  706,  706,  706,  707,
      707,  707,  707,  708,  708,  709,  709,  709,  709,  710,
      711,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  713,  714,  715,  716,

      716,  717,  718,  719,  719,  719,  720,  720,  721,  722,
      723,  724,  724,  724,  724,  725,  725,  725,  725,  726,
      726,  726,  727,  728,  728,  729,  730,  730,  730,  730,
      730,  731,  731,  732,  733,  734,  734,  734,  735,  735,
      735,  735,  735,  735,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  737,  737,  737,  737,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  739,  739,  739,  739,  740,  740,  740,  740,
      741,  741,  742,  742,  742,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  745,  745,  745,  745,  746,  747,

      748,  749,  751,  752,  753,  754,  755,  756,  756,  757,
      757,  757,  757,  758,  759,  759,  759,  759,  759,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  761,  761,  762,
      762,  763,  763,  763,  763,  763,  763,  764,  764,  764,
      764,  764,  765,  766,  767,  768,  769,  770,  771,  772,
      773,  773,  773,  773,  774,  775,  775,  775,  775,  775,

      776,  776,  776,  776,  776,  776,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  778,  778,
      778,  778,  778,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  781,  782,  783,  784,  785,  786,  787,
      788,  788,  788,  788,  789,  790,  790,  790,  790,  790,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  792,  792,  792,

      792,  792,  792,  792,  792,  792,  793,  794,  794,  794,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  796,  796,
      796,  796,  796,  796,  796,  796,  797,  798,  799,  800,
      801,  802,  803,  803,  803,  803,  804,  805,  805,  805,
      805,  805,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  809,  809,  810,  810,  810,

      810,  811,  812,  813,  814,  815,  816,  817,  818,  819,
      820,  820,  820,  820,  821,  822,  822,  822,  822,  822,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  825,  825,  826,  827,  827,  827,  828,  829,  830,
      831,  832,  833,  833,  833,  833,  834,  835,  835,  835,
      835,  835,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,

      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  837,  837,  838,  839,  840,  841,  842,  843,
      843,  843,  843,  844,  845,  845,  845,  845,  845,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  848,  848,  849,  851,
      852,  854,  855,  856,  856,  856,  856,  857,  858,  858,
      858,  858,  858,  859,  859,  859,  859,  859,  859,  859,

      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      860,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  862,  862,  863,  865,
      866,  867,  868,  868,  868,  868,  869,  870,  870,  870,
      870,  870,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  873,  873,  874,  875,  876,  877,  877,
      877,  877,  878,  879,  879,  879,  879,  879,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  881,  881,
      882,  883,  884,  885,  885,  885,  885,  886,  887,  887,
      887,  887,  887,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  889,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  890,  890,  892,  894,  897,  899,  900,  901,
      902,  904,  906,  907,  908,  909,  910,  912,  913,  914,
      915,  916,  917,  918,  919,  920,  921,  922,  923,  924,
      925,  926,  927,  928,  929,  930,  931,  932,  933,  934,

      935,  936,  937,  938,  940,  942,  944,  945,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  948,  948
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   33,   33,   37,   38,   39,   40,   41,
       33,   42,   33,   43,   44,   45,   33,   33,   33,   33,
       46,   47,   48,    1,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   33,   59,   60,   61,   62,
       63,   64,   33,   65,   66,   67,   68,   69,   70,   71,
       72,   33,   73,   74,   75,   76,    1,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78
    } ;

static yyconst flex_int32_t yy_meta[79] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       19,   19,   20,   21,   22,   23,   24,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,    1,   26,   27,   28,   25,
       25,   25,   25,   25,   25,   25,   25,   29,   25,   25,
       25,   30,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   31,   32,   33,   34,   35,   35
    } ;

static yyconst flex_int16_t yy_base[1878] =
    {   0,
        0,    0,    0,   77,  151,  227,   77,   78,  303,    0,
      381,    0,  459,  535,  611,  687,  763,    0,  841,    0,
        0,    0,  919,    0,   80,   81,   82,   83,  997, 1073,
     1149,    0, 1227,    0, 1305,    0, 1383,    0, 1461,    0,
       90,   93, 1539,    0,   94,   99, 1617,    0,  112,  131,
      168,  191,   98,  100, 1695, 1773,  188,  201,  115,  145,
      217,  244,  119,  132, 1851,    0,  467,  483,  136,  141,
     1929,    0, 2007,    0,  239,  251,  252,  464, 2085,    0,
      471,  473,  499,  549, 2163, 2239,  165,  210,  204,  255,
      553,  628, 6713,11676,11676,  496,  519, 6702, 6699, 6679,

      192,  552, 2310, 2371,  570, 2440,  623, 6628, 2515,  104,
      105,  646,  712,  262,  644,11676,11676, 6697,  481,  575,
     1037,11676,11676,   87,  156,11676,11676,    0,  166,  514,
    11676,  258,  719, 1028, 1726, 6680, 1045,  602,  741,11676,
    11676, 6693,  660, 1006, 6673, 1743,11676,11676, 2589, 1083,
     1093, 1786,11676, 2270, 1120, 1734, 2189, 2316, 6674, 1811,
      749,11676, 1822, 2197, 2382, 2405, 6673, 2201, 1056, 1124,
    11676,11676,    0, 1748,11676,11676, 6688, 2211,11676,11676,
     6687, 2220,11676,11676, 6686, 1789, 2209, 2279,11676,    0,
    11676,  254,11676,11676,    0, 2450, 2265,11676, 2304, 2438,

     2474, 2500, 6669, 2522, 2289, 1132,11676,11676,    0, 6673,
     2298,11676,11676, 6672, 2355,    0,11676, 2427,11676,11676,
        0, 6631,  478,11676, 6641, 2545, 2664,11676,    0, 6623,
    11676,  283,11676, 6673, 6621,    0,11676,11676, 6656, 6660,
     6618,  211,11676,11676, 2431,11676,  669,11676,11676,  714,
     2505,11676, 1062,11676, 6613,    0,11676,11676,  238,  239,
        0,11676,11676, 1049, 1659,11676,11676, 2509,11676,11676,
        0, 2546,    0,11676,11676,11676,11676, 2572,11676,11676,
     2576,11676,11676,    0,  254, 6612,11676,11676,    0,  485,
     6611,    0,11676, 6612, 6611,11676,11676,    0, 6606,    0,

    11676, 6646, 6604,    0,11676,11676, 6585,   73,11676,11676,
        0, 6642, 6601,    0,11676, 6600,    0,    0,11676,11676,
        0,11676,11676, 6599, 6607, 2388, 2733, 2802, 2541, 2563,
     6596, 6641,11676,    0, 6624, 6619,    0,  206,  470,11676,
    11676, 2878, 6618,  507,  538,  509, 2588, 1696,  605,  519,
      595, 2581,  173,  596, 6587, 6572,11676, 6621,  622, 2955,
     6565, 6574, 1008, 6572,11676,11676,    0, 2632, 2665, 2347,
     2488, 2582, 2688, 2655, 2656, 6555, 3030,  584, 2422,  663,
     1810, 2622,  601, 2693, 2703, 1033,11676, 2269, 1817, 2716,
     2745, 6624,11676, 2212,  685, 2312, 1762,11676, 2736,11676,

     6568,  713, 6620,  996, 6605, 2367,11676, 6565, 2768, 2798,
     6603, 2832, 2820, 2843, 2909, 2917, 2399, 2414,11676, 6563,
     2860, 2934, 6600, 6616,11676, 2746, 1693, 2853, 2638,11676,
     2911, 6614,  655, 3104, 3180, 6613,11676, 2952, 2161, 2965,
     6607, 2674,11676, 2996, 2944, 3002, 6590, 3057, 3067, 2989,
     3079, 3089,    0, 3135, 3037, 3139,  736, 3165, 3206, 6589,
     3214, 3239, 3157, 3243, 3265, 2710,11676, 6549, 3231, 3269,
        0,    0, 2722,11676, 6545, 6599,11676, 2743,11676, 6542,
     6596,11676, 2773,11676, 6540, 6594,11676, 2977, 2257, 2990,
     2792,11676, 3202, 2458, 2464,11676, 2595, 3282, 2828,    0,

     3290, 6577, 3312, 2812,11676, 6536, 3304, 3321, 6574, 3338,
     3346, 3350, 3363, 3371, 2837,11676, 6534, 3375, 3396,    0,
     6576, 6584, 6574, 2856,11676, 6529, 6572, 6532, 2878,11676,
     6526,    0, 2904,11676, 6525,    0, 6524, 1712,11676, 6537,
     6525,11676, 6571, 2984,11676, 6517,    0, 6516, 1137, 6570,
     6566,11676, 6507,    0,11676,11676, 6506, 6505, 3024,11676,
     6499, 1722,11676, 2331, 3031,11676, 6497, 3084,11676, 6500,
     6495,    0,  467, 6500,   61,    0, 6492, 6465, 6435,  574,
      232, 3062,11676, 6388,    0, 3071,11676, 6384,    0, 3093,
    11676, 6383, 3169,11676, 6382, 1034, 6434, 1070, 6416, 6376,

     1087, 6427, 1737, 6412, 6372,    0, 6424,  634,    0, 6370,
        0,  196, 6368,    0,    0, 6367, 1740, 6408,    0, 6363,
        0, 6362,    0,    0, 6361, 6394, 6363, 2976, 6353, 6391,
        0, 6395, 1003, 6385,11676,11676, 6380, 3439, 6378, 6386,
    11676, 6382, 6362,  976, 6337, 6322, 1053, 1755,  462,  526,
     2780,  978, 3275,11676, 1753, 2163, 2167, 6328, 6324, 6367,
     2224, 3386,    0, 2359, 6307, 3355, 3388,11676,11676, 3517,
     3402,    0,    0, 3424, 3425, 3429, 3475, 3419, 2517, 2731,
     3487,11676, 3549, 3554, 2526, 3364, 3390, 3488, 6314,    0,
     6313, 3413, 3576, 6312, 6352, 3527, 3550, 3564, 2254, 3631,

     3595, 3641, 3644, 6360, 2620, 2666, 6305,    0, 6304, 6303,
     6299, 3580, 3587, 3606, 3678, 3710, 3718, 3726, 6298, 6290,
        0,    0, 6338, 6288, 6284, 6283, 6281, 6280,    0,    0,
     6279, 6278, 6276, 6289, 6272, 6271, 6270, 6269, 6265, 6271,
     6261, 6255, 6268, 3152, 6252, 6264, 6262, 6245, 6244, 6243,
     6238, 6236,    0, 6235,    0, 6230,11676,11676,11676, 6223,
     6264, 2580, 6221,    0, 6220,11676, 2292,    0, 6265, 6215,
     6213, 6212,11676, 2690, 3401, 6211, 6268,    0, 3657, 2699,
    11676, 6243, 2251, 6211, 6210, 2154, 2281, 2312, 6245, 3583,
     2361, 3584, 2295, 6219, 6207,11676, 2787,11676,    0, 6191,

     2865, 3489, 3684, 6190, 3757, 3748, 6217, 3749, 3750, 3663,
     3773, 3783, 3790, 3822, 3818, 6209, 6208, 3691,11676, 3848,
     6201, 3824, 3896, 3972, 3837,11676, 6200, 6199, 6195, 6194,
     3840,    0, 3925, 4001, 3865, 6192, 6191, 6226, 6189, 6180,
     6186, 6184, 6183,    0, 6182, 6181, 6180, 3897, 6175, 6168,
     6167, 6166, 6161, 6153,11676, 6146, 6149, 6143,11676, 6137,
     6149, 6130, 6130, 6107, 6103, 6102, 6101, 6100, 6096, 6092,
     6091, 2926, 6090, 6084, 2468, 6118, 6081, 6080, 6078, 3617,
     6077,11676, 6079, 3799,11676, 6065, 6067, 6041, 6029, 2363,
     2430, 3785, 3874,11676, 2467, 6021, 6035, 2940, 3887, 3258,

     6010, 3775, 3878, 3936, 3954, 3987, 4006, 4012, 4007, 6017,
     6015, 6014, 4018, 4043, 6013, 6012, 6008, 6007, 4020, 4054,
     6001, 5994, 5993, 5997, 5987, 5986, 5984, 5983, 5982, 5978,
     5977, 5976, 5971, 5987,  690, 5966, 5971, 3046, 5963, 5958,
     5957, 5950, 5949, 5954, 5955, 5942, 5941,  640, 5938, 5947,
     5940, 1077, 5926, 5925, 5924, 5923, 5916, 5915, 5913, 5910,
     5907, 5906, 2534, 5904, 5900, 5896, 3902, 5895, 5941, 5910,
    11676, 5886, 5900, 2302, 2341, 3888,11676, 5924, 3930, 5888,
     5881, 3921, 4026,11676, 3959, 4068, 4076, 4082, 4086, 4078,
     5850, 5845, 5840, 4084, 4091, 5836, 5833, 5826, 5825, 4101,

     4162, 4170, 5824, 5816, 5815,11676, 5809, 5804, 5800, 5795,
     5791, 5788, 5792, 2345, 5782, 5775, 5779, 5781, 5771, 5759,
     5748, 5754, 5742, 5737, 5736, 5735, 5734,11676, 5736,    0,
        0, 5727,11676, 5721, 3119, 5718, 5718, 5728, 5725, 5713,
     5678, 4729, 4728, 4723, 4720, 4719, 4718, 4712, 4710, 4705,
     4701, 4700, 4116, 4696, 4729, 4695, 4687, 2495, 4726, 4087,
     4680, 4671, 4130, 4140, 4145, 4149, 4155, 4195, 4199, 4158,
     4689, 4682, 4678, 4188, 4207, 4672, 4670, 4668, 4662, 4197,
     4656, 4654, 4652, 4648, 4646, 4635, 4633, 4627, 4623, 4615,
     4615,    0, 4598, 4600, 4585, 4580,11676, 4585, 4572, 4563,

     4574, 4573, 4569, 4563,    0,11676,11676, 4557, 4547,11676,
     4549, 4535, 4523, 4522, 4528, 4525, 4524, 4510, 4506, 4504,
     4502, 4495, 4493, 4491, 4486, 4485, 4481, 4219, 4479, 4481,
     4442, 4430, 4231, 4476, 4463, 4229, 4235, 3479, 4247, 4246,
     4256, 4241, 4423, 4421, 4417, 4252, 4258, 4409, 4407, 4396,
     4388, 4266, 4384, 4379, 4367, 4366, 4362, 4360, 4358, 4356,
     4349, 4340,11676, 4336, 4323, 4330, 4321, 4328, 4316, 4307,
     4305, 4303, 4297, 4294,11676, 4285, 4278, 4273, 3130, 4275,
     4270, 4255, 4250, 4246, 4237, 4236, 4226, 4220, 4218, 4214,
     4207, 4202, 4195, 4183, 4261, 4181,11676, 4214, 4202, 4248,

    11676,11676,11676, 4277, 4285, 1006, 4293, 4302, 4312, 4304,
     4174, 4163, 4161, 4313, 4349, 4150, 4146, 4139, 4138, 4358,
     4137, 4131, 4121, 4120, 4119, 4113, 4107, 4103, 4088, 4073,
     4066, 4054, 4045, 4040, 4027, 4020, 3989, 3964, 3958, 3950,
     3944, 3884, 3863, 3860,11676, 3832,   91,  136,  137,  246,
      440,  482,  513,  553,  615,  698,  700,  706,  708, 1013,
     4333, 1017,11676,11676, 1107, 4323, 4156, 4337, 4339, 4350,
     4368, 4361, 1703, 1731, 1743, 4370, 4406, 1750, 1762, 1781,
     1782, 4372, 1783, 2123, 2125, 2129, 2173, 2174, 2200, 2230,
     2251, 2279, 2311, 2369, 2366, 2396, 2424, 2425, 2428, 2441,

     2479, 2487, 2498, 2499, 2514, 3144, 2509, 2506, 2520, 2557,
     2558, 2559, 2566, 2573, 2588, 2596, 2610, 2624, 2634, 2640,
     2647, 4399, 2649, 4409, 4431, 4432, 4433, 4438, 4428, 2665,
     2673, 2674, 4431, 4445, 2679, 2680, 2698, 2708, 4476, 2716,
     2721, 2723, 2738, 2746, 2760, 2762, 2770, 2796, 2803, 2801,
     2838, 2838, 2840, 2857, 2858, 2859, 2865, 2875, 2884,11676,
     3171, 2892, 2903, 2910, 2911, 2916, 2918, 2939, 2943, 2952,
     2958, 2959, 2960, 2964, 2965, 4440, 2992, 4455, 4453, 4460,
     4469, 4485, 4491, 2992, 2993, 2994, 4499, 4532, 3001, 3006,
     3037, 3053, 4501, 3057, 3063, 3064, 3072, 3074, 3083, 3094,

     3101, 3102, 3103, 3103, 3129, 3133, 3135, 3138, 3139, 3274,
    11676, 3139, 3145, 3150, 3151, 3160, 3168, 3169, 3176, 3177,
     3188, 3189, 3196, 3197, 3203, 4510, 3213, 4471, 3296, 4535,
     4557, 4546, 3227, 3235, 3242, 4548, 4573, 3243, 3264, 3274,
     3275, 4558, 3282, 3283, 3284, 3291, 3292, 3304, 3308, 3309,
     3316, 3311, 3331, 3338, 3342, 3348, 3356, 3418, 3350, 3371,
     3379, 3381, 3390, 3406, 3415, 3416, 3419, 3425, 3428, 3429,
     3441, 3449, 4495, 3451, 4568, 4582, 4584, 4591, 3457, 3458,
     3469, 4598, 4621, 3482, 3486, 3487, 3496, 4633, 3498, 3502,
     3507, 3509, 3516, 3519, 3524, 3533, 3545, 3528, 3553, 3556,

     3561, 3564, 3565, 3656, 3566, 3570, 3575, 3579, 3588, 3595,
     3601, 3625, 3634, 3641, 3646, 3651, 3652, 4613, 3657, 4601,
     4620, 4632, 4642, 3644, 3653, 3659, 4652, 4669, 3660, 3661,
     3667, 3669, 4672, 3672, 3678, 3679, 3680, 3691, 3695, 3697,
     3708, 3714, 3724, 3726, 3729, 3733, 3736,11676, 3737, 3744,
     3746, 3753, 3754, 3763, 3764, 3773, 3789, 3796, 3801, 3810,
     3812, 4648, 3816, 4657, 4676, 4698, 4691,11676,11676,11676,
     4706, 4708,11676,11676,11676,11676, 4717,11676,11676,11676,
    11676,11676,11676,11676,11676,11676,11676,11676,11676,11676,
    11676,11676,11676,11676,11676,11676,11676,11676,11676,11676,

    11676,11676,11676, 4706, 3880, 4739, 3828, 3935, 3869, 3933,
     3864, 3986, 3877, 4080, 3995, 4022, 4035, 3905, 4064, 4059,
     3993, 4057, 4745,11676, 4792, 4827, 4862, 4897, 4932, 4967,
     5002, 5037, 5072, 5107, 5142, 5177, 5212, 5247, 5282, 5317,
     5352, 5387, 5422, 5457, 5492, 5527, 5562, 5597, 5632, 5667,
     5702, 5737, 5765, 5787, 5806, 5830, 5851, 5875, 5909, 5938,
     4731, 5957, 5991, 6025, 6059, 6094, 6123, 6158, 6188, 6222,
     6256, 6290, 6324, 6358, 6392, 6412, 6447, 6482, 6517, 6546,
     4740, 6580, 4748, 6614, 6648, 6682, 6716, 5749, 6735, 6755,
     6790, 6810, 6845, 6880, 6900, 6935, 6970, 7004, 7034, 7069,

     7089, 7124, 5757, 7143, 5972, 7162, 7197, 7217, 7252, 7287,
     7307, 7329, 7364, 7399, 7434, 7463, 7497, 6006, 7514, 7536,
     7551, 7581, 5780, 6040, 7603, 7632, 7663, 7692, 7721, 7740,
     7768, 7802, 7836, 7870, 7905, 7922, 7957, 7986, 8015, 8050,
     8085, 8115, 8144, 8178, 8212, 8246, 8281, 8315, 8349, 8383,
     8417, 8434, 8454, 8489, 8524, 8559, 8588, 8617, 8651, 8685,
     6046, 8719, 8753, 8787, 8821, 8838, 8857, 8885, 8905, 8940,
     8960, 8995, 9030, 9058, 9078, 9113, 9148, 9182, 9212, 9247,
     9267, 9302, 9321, 9349, 9368, 9396, 9431, 9451, 9486, 9521,
     5954, 9551, 9573, 9593, 9628, 9663, 9698, 9732, 9745, 9780,

     9800, 9817, 9847, 9882, 9916, 4759, 9942, 9975, 6203, 5799,
    10009,10034,10063, 6271,10098,10115,10144,10173,10208,10238,
    10268,10303,10337,10354,10383,10412,10446,10480,10514,10531,
     6279,10550, 6305,10567,10602, 6339, 6373, 5988,10632,10652,
    10674,10708,10739,10759,10778,10808, 5819,10839,10872,10907,
     5864,10941,10971,10997,11032,11061,11096,11126,11155, 6381,
    11189,11223,11242,11259,11289,11311,11331,11361,11395,11430,
    11465,11500,11535,11570,11605,11640, 5844
    } ;

static yyconst flex_int16_t yy_def[1878] =
    {   0,
     1625, 1625, 1624,    3, 1626, 1626, 1627, 1627, 1624,    9,
     1624,   11, 1628, 1628, 1629, 1629, 1624,   17, 1624,   19,
     1625, 1625, 1624,   23, 1630, 1630, 1631, 1631, 1632, 1632,
     1624,   31, 1624,   33, 1624,   35, 1624,   37, 1624,   39,
     1633, 1633, 1624,   43, 1634, 1634, 1624,   47, 1635, 1635,
     1636, 1636, 1637, 1637, 1638, 1638, 1639, 1639, 1640, 1640,
     1641, 1641, 1642, 1642, 1624,   65, 1643, 1643, 1644, 1644,
     1624,   71, 1624,   73, 1645, 1645, 1645, 1645, 1624,   79,
     1646, 1646, 1647, 1647, 1648, 1648, 1649, 1649, 1650, 1650,
     1651, 1651, 1624, 1624, 1624, 1624, 1624, 1652, 1653, 1654,

     1654, 1655, 1624, 1656, 1657, 1658, 1657, 1624, 1624, 1624,
     1654, 1654, 1655, 1654, 1624, 1624, 1624, 1659, 1660, 1660,
     1660, 1624, 1624, 1624, 1624, 1624, 1624, 1661, 1662, 1624,
     1624, 1624, 1624, 1663, 1663, 1624, 1664, 1624, 1665, 1624,
     1624, 1666, 1667, 1667, 1624, 1667, 1624, 1624, 1668, 1669,
     1669, 1669, 1624, 1669, 1624, 1624, 1670, 1670, 1624, 1671,
     1672, 1624, 1624, 1624, 1673, 1673, 1624, 1674, 1624, 1675,
     1624, 1624, 1676, 1624, 1624, 1624, 1677, 1624, 1624, 1624,
     1678, 1624, 1624, 1624, 1679, 1680, 1680, 1680, 1624, 1681,
     1624, 1682, 1624, 1624, 1683, 1684, 1624, 1624, 1624, 1624,

     1685, 1685, 1624, 1686, 1624, 1687, 1624, 1624, 1688, 1689,
     1624, 1624, 1624, 1690, 1624, 1691, 1624, 1624, 1624, 1624,
     1692, 1624, 1693, 1624, 1694, 1624, 1624, 1624, 1695, 1624,
     1624, 1624, 1624, 1696, 1624, 1697, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1698, 1624, 1624, 1698,
     1624, 1624, 1624, 1624, 1624, 1699, 1624, 1624, 1624, 1624,
     1700, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1701, 1624, 1702, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1703, 1704, 1624, 1624, 1624, 1705, 1706,
     1624, 1707, 1624, 1624, 1624, 1624, 1624, 1708, 1624, 1709,

     1624, 1624, 1624, 1710, 1624, 1624, 1624, 1624, 1624, 1624,
     1711, 1712, 1624, 1713, 1624, 1624, 1714, 1714, 1624, 1624,
     1715, 1624, 1624, 1624, 1624, 1624, 1716, 1716, 1624, 1624,
     1624, 1717, 1624, 1718, 1719, 1720, 1721, 1624, 1720, 1624,
     1624, 1722, 1720, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1723, 1716,
      360,  360,  360,  360, 1624, 1624, 1724, 1725, 1725, 1726,
     1726, 1726, 1726, 1726, 1726, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1720, 1624, 1624, 1720, 1720, 1624,
     1624, 1727, 1624, 1728, 1729, 1728, 1624, 1624, 1728, 1624,

     1624, 1730, 1731, 1730, 1624, 1624, 1624, 1624, 1624, 1732,
     1624, 1732, 1733, 1734, 1732, 1733, 1735, 1624, 1624, 1624,
     1734, 1734, 1736, 1737, 1624, 1738, 1739, 1738, 1624, 1624,
     1738, 1740, 1740, 1741, 1741, 1740, 1624, 1742, 1743, 1742,
     1740, 1624, 1624, 1742, 1624, 1744, 1624, 1744, 1745, 1746,
     1744, 1624, 1747, 1745, 1746, 1746, 1748, 1624, 1749, 1624,
     1749, 1750, 1751, 1749, 1750, 1624, 1624, 1624, 1751, 1751,
     1752, 1753, 1624, 1624, 1624, 1754, 1624, 1624, 1624, 1624,
     1755, 1624, 1624, 1624, 1624, 1756, 1624, 1757, 1758, 1757,
     1624, 1624, 1757, 1759, 1624, 1624, 1759, 1760, 1624, 1761,

     1760, 1624, 1762, 1624, 1624, 1624, 1624, 1763, 1624, 1763,
     1764, 1765, 1763, 1764, 1624, 1624, 1624, 1765, 1765, 1766,
     1767, 1768, 1767, 1624, 1624, 1624, 1769, 1624, 1624, 1624,
     1624, 1770, 1624, 1624, 1624, 1771, 1624, 1772, 1624, 1773,
     1624, 1624, 1774, 1624, 1624, 1624, 1775, 1624, 1624, 1776,
     1776, 1624, 1624, 1777, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1778, 1624, 1778, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1779, 1624, 1624, 1624, 1780, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1781, 1624, 1624, 1624, 1782, 1624,
     1624, 1624, 1624, 1624, 1624, 1783, 1784, 1783, 1624, 1624,

     1785, 1786, 1785, 1624, 1624, 1787, 1624, 1624, 1788, 1624,
     1789, 1624, 1624, 1790, 1791, 1624, 1792, 1793, 1794, 1624,
     1795, 1624, 1796, 1797, 1624, 1624, 1624, 1798, 1624, 1799,
     1800, 1801, 1624, 1802, 1624, 1624, 1802, 1803, 1802, 1801,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1804, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1805, 1805, 1806, 1624, 1807, 1798, 1798, 1624, 1624, 1808,
     1798, 1809, 1810, 1811, 1811, 1811, 1811, 1624, 1624, 1624,
     1624, 1624, 1802, 1624, 1624, 1812, 1812, 1813, 1624, 1814,
     1624, 1815, 1815, 1624, 1816, 1817, 1817, 1818, 1624, 1819,

     1820, 1820, 1821, 1822, 1624, 1823, 1624, 1824, 1624, 1624,
     1624, 1825, 1825, 1826, 1827, 1828, 1829, 1829, 1624, 1624,
     1830, 1831, 1832, 1624, 1624, 1624, 1624, 1624, 1833, 1834,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1835, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1836, 1624, 1837, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1838, 1624, 1624, 1839, 1840, 1841, 1624,
     1624, 1624, 1624, 1624, 1842, 1624, 1843, 1844, 1845, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1846, 1846,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1847, 1848,

     1624, 1842, 1842, 1849, 1850, 1842, 1851, 1852, 1852, 1852,
     1852, 1624, 1624, 1853, 1854, 1624, 1624, 1855, 1624, 1855,
     1624, 1856, 1857, 1857, 1858, 1624, 1624, 1624, 1624, 1624,
     1859, 1860, 1861, 1861, 1862, 1624, 1624, 1863, 1624, 1624,
     1624, 1624, 1624, 1864, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1865, 1866, 1624, 1624, 1624, 1842,
     1624, 1624, 1867, 1845, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1868, 1624, 1624, 1624, 1624, 1624, 1842, 1842,

     1624, 1624, 1842, 1852, 1852, 1852, 1852, 1624, 1854, 1624,
     1624, 1624, 1856, 1858, 1624, 1624, 1624, 1624, 1859, 1869,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1870, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1865, 1624, 1624, 1624, 1842, 1624, 1867, 1624,
     1624, 1624, 1624, 1624, 1624, 1871, 1624, 1868, 1868, 1624,
     1624, 1842, 1842, 1624, 1842, 1852, 1852, 1852, 1852, 1854,
     1624, 1624, 1624, 1856, 1858, 1624, 1624, 1624, 1624, 1859,

     1869, 1869, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1872,
     1873, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1842, 1624, 1624, 1624, 1624, 1624, 1871, 1871,
     1624, 1624, 1842, 1842, 1842, 1852, 1852, 1852, 1852, 1854,
     1624, 1624, 1624, 1856, 1858, 1624, 1624, 1624, 1624, 1859,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1874, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,

     1624, 1624, 1624, 1624, 1875, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1842, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1842, 1842, 1624, 1852, 1852,
     1852, 1854, 1624, 1624, 1624, 1856, 1858, 1624, 1624, 1624,
     1624, 1859, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1842, 1624, 1624, 1624, 1624, 1876,

     1624, 1624, 1624, 1842, 1842, 1624, 1852, 1852, 1852, 1854,
     1624, 1624, 1624, 1856, 1858, 1624, 1624, 1624, 1624, 1859,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1842, 1624, 1624, 1624, 1876, 1876, 1842, 1842, 1852, 1852,
     1852, 1854, 1624, 1624, 1624, 1856, 1858, 1624, 1624, 1624,
     1624, 1859, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,

     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1842, 1624, 1842, 1842, 1852, 1852, 1852, 1854, 1624,
     1624, 1624, 1856, 1858, 1624, 1624, 1624, 1624, 1859, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1842, 1624, 1842, 1842, 1852,
     1852, 1852, 1854, 1624, 1624, 1624, 1856, 1858, 1624, 1624,
     1624, 1624, 1859, 1624, 1624, 1624, 1624, 1624, 1624, 1624,

     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1842, 1624, 1842, 1624, 1852,
     1852, 1854, 1624, 1624, 1624, 1856, 1858, 1624, 1624, 1624,
     1624, 1859, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1842, 1624, 1842, 1852, 1852, 1854, 1624, 1624,
     1624, 1856, 1858, 1624, 1624, 1624, 1624, 1859, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,

     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1842, 1624, 1842,
     1852, 1852, 1854, 1624, 1624, 1624, 1856, 1858, 1624, 1624,
     1624, 1624, 1859, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1842, 1624, 1842, 1852, 1852, 1854, 1624, 1624, 1624,
     1856, 1858, 1624, 1624, 1624, 1624, 1859, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,

     1624, 1624, 1624, 1842, 1624, 1624, 1877, 1624, 1877, 1877,
     1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877,
     1877, 1877, 1877,    0, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,

     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,

     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624
    } ;

static yyconst flex_int16_t yy_nxt[11755] =
    {   0,
       95,   96,   97,   95,   96,   95,   98,   95,   99,   95,
       95,   95,   95,   95,  100,   95,  101,  102,   95,  100,
      100,  100,   95,  103,   95,   95,  104,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,   95,  106,   95,  107,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,   95,   95,   95,   95,   95,  108,  109,  123,
      123,  109,  176,  176,  180,  180,  177,  177,  181,  181,
      110,  111,  217,  112,  113,  217,  224,  114,  114,  115,

      244,  224,  244,  124,  124,  383,  383,  225,  383,  383,
      400,  400,  225,  232,  233,  741,  232,  257,  234,  258,
      226,  267,  742,  125,  125,  226,  178,  178,  182,  182,
      616,  337,  232,  233,  267,  232,  218,  234,  280,  218,
      227,  259, 1308,  280,  245,  227,  245,  257,  615,  258,
      115,  116,  116,  117,  116,  116,  116,  118,  235,  116,
      116,  260,  116,  116,  116,  268,  116,  315,  116,  120,
      237,  259,  238,  120,  116,  116,  116,  235,  268,  400,
      400,  239,  281,  403, 1309, 1310,  240,  281,  405,  253,
      254,  260,  253,  237,  241,  238,  116,  121,  116,  338,

      657,  761,  253,  254,  239,  253,  318,  633,  339,  240,
      633,  316,  315,  401,  242,  319,  320,  241,  337,  262,
      762,  263,  657,  116,  116,  116,  116,  116,  116,  117,
      116,  116,  116,  118,  255,  116,  116,  242,  116,  116,
      116,  293,  116,  264,  116,  120,  262,  255,  263,  120,
      116,  116,  116,  293,  293,  495,  316,  318,  495,  409,
      409,  409,  409,  265,  557,  294,  319,  320,  558,  496,
      264,  597,  116,  121,  116,  410,  599,  294,  295,  388,
      411,  389,  389,  389,  549,  294,  744,  549,  337,  550,
      265,  573,  573,  748, 1311,  574,  575,  294,  295,  116,

      116,  116,  116,  126,  126,  127,  126,  126,  126,  126,
      126,  128,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  126,  130,
      126,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  126,  126,  126,  126,  129,
      129,  131,  132,  133,  132,  132,  131,  131,  131,  134,
      131,  131,  131,  131,  131,  131,  131,  131,  135,  131,

      131,  131,  131,  136,  131,  131,  131,  131,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  131,  138,  131,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  131,  131,  131,  139,  137,  137,  140,
      140,  141,  140,  140,  140,  142,  293,  140,  140,  274,
      140,  140,  140,  301,  140,  301,  140,  144,  275,  276,
      539,  144,  145,  140,  140,  274,  634,  302, 1312,  302,
      295,  540,  788,  277,  275,  276,  337,  326,  395,  396,

      326,  305,  602,  396,  140,  146,  140,  604,  641,  277,
      295,  641,  306,  278,  788,  406,  407,  303,  406,  303,
      329,  330,  327,  329,  541,  307,  739,  396,  740,  278,
     1313,  140,  140,  140,  140,  140,  140,  141,  140,  140,
      140,  142,  328,  140,  140,  308,  140,  140,  140,  644,
      140,  305,  140,  144,  642,  322,  652,  144,  145,  140,
      140, 1314,  306,  323,  340,  331,  336,  341,  336,  342,
      651,  408,  644,  645,  646,  307,  323,  323,  337,  652,
      140,  146,  140,  643,  336,  383,  336,  336,  383,  336,
      336,  336, 1624,  396,  651,  308,  337,  396,  344,  324,

      325, 1315,  383,  418,  419,  383,  418,  140,  140,  140,
      140,  147,  147,  148,  147,  147,  147,  149,  369,  147,
      147,  396,  147,  147,  147,  651,  147,  746,  147,  151,
      322,  651,  651,  151,  152,  153,  147,  336,  323,  336,
      336,  747,  336,  336,  336,  390,  651,  384,  390,  337,
      384,  323,  323,  338,  651,  651,  147,  154,  147,  420,
      391,  699,  385, 1316,  386,  387,  382,  386,  382,  651,
      562,  369,  337,  562,  324,  325,  662,  427,  428,  436,
      563,  758,  428,  147,  147,  147,  147,  147,  147,  148,
      147,  147,  147,  149, 1033,  147,  147,  663,  147,  147,

      147, 1034,  147,  687,  147,  151,  428,  687,  759,  151,
      152,  153,  147,  386,  387, 1624,  386,  382, 1624,  382,
      409,  409,  409,  409,  340, 1624,  336,  341,  336,  342,
      403,  687,  147,  154,  147,  405,  410,  705,  337, 1017,
      705,  411,  421,  421,  421,  421, 1317,  453, 1318,  422,
      455,  455,  455,  455, 1319, 1018, 1320,  456,  344,  147,
      147,  147,  147,  131,  155,  156,  155,  155,  131,  131,
      131,  157,  131,  131,  131,  131,  131,  131,  131,  131,
      158,  131,  131,  131,  131,  159,  131,  131,  131,  131,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,

      160,  160,  160,  160,  160,  160,  160,  160,  131,  138,
      131,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  131,  131,  131,  161,  160,
      160,  162,  163,  164,  163,  163,  162,  162,  162,  165,
      162,  162,  162,  162,  162,  162,  162,  162,  166,  162,
      162,  162,  162,  167,  162,  162,  162,  162,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  162,  169,  162,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,

      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  162,  162,  162,  170,  168,  168,  171,
      171,  172,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  171,  174,  171,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  171,  171,  171,  171,  173,  173,  183,  183,  184,

      183,  183,  183,  185,  633,  183,  183,  633,  183,  183,
      183,  651,  183,  403,  183,  187,  668,  783,  405,  187,
      183,  183,  183, 1624,  428, 1206, 1206, 1206,  428,  409,
      409,  409,  409,  651,  386,  387,  412,  386,  397,  398,
      783,  397,  183,  188,  183,  410,  409,  409,  409,  409,
      411,  597,  428,  669, 1624,  396,  599,  466,  467,  396,
      466, 1321,  410,  568,  569, 1323,  568,  411,  417,  183,
      183,  183,  183,  183,  183,  184,  183,  183,  183,  185,
      670,  183,  183,  396,  183,  183,  183,  597,  183,  437,
      183,  187,  599,  786,  399,  187,  183,  183,  183, 1624,

      439,  440,  577,  414,  602,  440,  578,  437,  570,  604,
     1624,  440,  579,  468,  580,  440,  786, 1624,  183,  188,
      183,  445,  445,  445,  445,  469,  469,  469,  469,  440,
     1038, 1201,  470,  518,  518,  518,  518,  446,  549,  440,
      519,  549,  447,  550, 1039,  183,  183,  183,  183,  189,
      189,   94,  189,  189,  189,  189,  189,  190,  189,  189,
      189,  189,  189,  189,  191,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  189,  189,  189,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  189,  189,  189,  189,  192,  192,  193,  193,  194,
      193,  193,  193,  193,  193,  195,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  193,  197,  193,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  193,

      193,  193,  193,  196,  196,  198,  199,  200,  199,  199,
      198,  198,  198,  201,  198,  198,  198,  198,  198,  198,
      198,  198,  202,  198,  198,  198,  198,  203,  198,  198,
      198,  198,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      198,  205,  198,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  198,  198,  198,
      206,  204,  204,  207,  207,  208,  207,  207,  207,  207,
      207,  209,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  207,  211,
      207,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  207,  207,  207,  207,  210,
      210,  212,  212,  213,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,

      214,  214,  214,  214,  214,  214,  212,  215,  212,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  212,  212,  212,  212,  214,  214,  219,
      219,  220,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  219,  222,  219,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  219,  219,  219,  219,  221,  221,   94,   94,  228,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,   94,  230,   94,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,   94,
       94,   94,   94,  229,  229,  246,  247,  248,  246,  247,

      246,  246,  246,  246,  246,  246,  249,  246,  246,  246,
      246,  697,  577,  246,  539,  697,  581,  246,  246,  246,
      246,  246,  579,  562,  580,  540,  562,  415,  415,  415,
      415,  650,  651,  563,  412,  445,  445,  445,  445,  697,
      246,  251,  246,  410,  429,  430,  766,  429,  411,  473,
      474,  446,  473,  650,  602,  651,  447,  768,  541,  604,
     1624,  428, 1330,  397,  398,  428,  397,  246,  246,  246,
      246,  246,  246,  246,  247,  248,  246,  247,  246,  246,
      246,  246,  246,  246,  249,  246,  246,  246,  246,  428,
     1331,  246,  441,  787,  791,  246,  246,  246,  246,  246,

      431,  414, 1332, 1624,  440,  475,  489,  490,  440, 1335,
      437,  490,  452,  445,  445,  452,  787,  791,  246,  251,
      246, 1336,  453,  458,  458,  458,  458,  679,  446,  680,
      680,  680,  440,  447,  388,  490,  389,  389,  389,  459,
     1337, 1338, 1340,  337,  460,  246,  246,  246,  246,  246,
      246,  269,  269,  270,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  269,  272,  269,  271,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  269,  269,  269,  269,  271,  271,  282,
      282,  283,  282,  282,  282,  282,  282,  284,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  282,  286,  282,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,

      285,  282,  282,  282,  282,  285,  285,  287,  287,  288,
      287,  287,  287,  287,  287,  289,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  287,  291,  287,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  287,
      287,  287,  287,  290,  290,  296,  296,  297,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      296,  299,  296,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  296,  296,  296,
      296,  298,  298,  309,  309,  310,  309,  309,  309,  311,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  702,
      309,  309, 1341,  702, 1342,  309,  309,  309, 1343,  309,
      445,  445,  445,  445,  792,  793,  890,  448,  458,  458,

      458,  458,  458,  458,  458,  458,  446,  702,  309,  313,
      309,  447,  478,  479,  459,  478,  792,  793,  459,  460,
      890,  483,  484,  460,  483,  797, 1624,  490,  797,  395,
      396,  490, 1344, 1345,  396,  309,  309,  309,  309,  309,
      309,  310,  309,  309,  309,  311,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  490,  309,  309,  396, 1346,
      437,  309,  309,  309,  450,  309,  504,  505,  480,  504,
      685,  442,  443,  685,  442,  713, 1624,  485,  437,  713,
      491,  492,  887,  491,  309,  313,  309, 1624,  440, 1347,
      515,  516,  440,  515, 1624,  337, 1624,  490,  766,  524,

      525,  490,  524,  713,  887,  507,  507,  507,  507,  768,
     1348,  309,  309,  309,  309,  345,  440,  451,  451,  451,
      451,  508,  506,  891,  448,  490,  509,  444,  346, 1624,
      396,  895, 1624,  446,  396, 1624,  493, 1349,  447,  347,
      348, 1058, 1624,  892,  349,  350,  517,  891,  664,  351,
      352,  664,  353,  354,  895,  526,  529,  530,  396,  529,
      664,  347,  348,  664, 1058,  892,  349,  350,  406,  407,
     1350,  406,  351,  352,  355,  356,  353,  354,  357,  357,
      357,  357,  651,  458,  458,  458,  458,  358,  651,  326,
      461,  450,  326,  673,  357,  357, 1091,  359,  974,  459,

      693,  693,  693,  693,  460,  651,  464,  464,  464,  464,
      651, 1092,  531,  461,  327,  418,  419,  359,  418,  665,
      974,  361,  459,  384,  362,  363,  384,  460,  533,  534,
     1351,  533,  559,  560,  328,  559,  364, 1092,  678,  507,
      507,  507,  507,  365,  382,  366,  367,  357,  357,  357,
      357,  499,  499,  499,  499,  508,  358,  463,  500,  495,
      509,  975,  495,  357,  357,  495,  359, 1092,  495,  501,
      501,  501,  502,  496,  766,  507,  507,  507,  507,  496,
      463, 1352,  510,  975,  535,  768,  359, 1353,  561,  664,
      371,  508,  664,  372,  373,  382,  509,  374,  651, 1092,

     1354,  513,  513,  513,  513,  375,  565,  566,  510,  565,
      582,  583,  365,  582,  366,  367,  377,  508,  685,  377,
      651,  685,  509,  507,  507,  507,  507,  685,  378,  378,
      685,  379,  380, 1133,  673,  381,  381,  382, 1355,  508,
      766,  327,  329,  330,  509,  329, 1356,  586,  587,  512,
      586,  768,  542,  542,  542,  542, 1133, 1357, 1358,  674,
      665,  328,  567, 1359,  329,  330,  584,  329,  542,  542,
     1361,  543, 1362,  590,  591,  512,  590,  593,  594, 1363,
      593,  872,  653,  664,  872,  653,  664,  331,  382,  432,
      432,  543,  432,  432,  432,  433,  495,  432,  432,  495,

      432,  432,  432,  588,  432,  654,  432,  435,  655,  331,
      496,  435,  432,  436,  432,  647, 1364, 1365, 1366,  648,
      542,  705,  656,  390,  705, 1367,  390,  649,  673,  592,
      655,  453, 1368,  595,  432,  435,  432,  647,  391,  429,
      430,  648,  429,  675,  382,  656,  336, 1369,  336,  336,
      649,  336,  336,  336,  665, 1370,  664,  664,  337,  664,
      664,  432,  432,  432,  432,  544,  545,  705,  544, 1371,
      705,  542,  542,  542,  542,  442,  443,  453,  442,  336,
      369,  336,  336, 1372,  336,  336,  336,  542,  542,  664,
      543,  337,  664, 1373,  384,  382,  668,  384,  798, 1374,

      885,  673,  673,  885,  681,  682, 1375,  681, 1377,  391,
      543,  466,  467,  369,  466,  382,  676,  390,  677,  683,
      390,  546, 1384,  473,  474,  684,  473,  665,  665,  337,
     1385, 1386,  391,  669,  673,  798, 1389, 1390,  382,  542,
      357,  357,  357,  357,  478,  479,  390,  478,  679,  390,
      680,  680,  680,  395,  396, 1391,  357,  357,  396,  627,
      670,  678,  798,  427,  428, 1392,  382,  382,  428,  409,
      409,  409,  409, 1394,  483,  484,  684,  483, 1395,  627,
     1396,  653,  396,  361,  653,  410,  362,  363,  797,  382,
      411,  797,  428,  491,  492, 1397,  491,  688,  364,  415,

      415,  415,  415, 1398,  654,  365,  412,  366,  367,  357,
      357,  357,  357,  504,  505,  410,  504, 1399,  382, 1400,
      411,  409,  409,  409,  409,  357,  357, 1401,  627,  499,
      499,  499,  499, 1624, 1624, 1624, 1624,  410,  515,  516,
     1624,  515,  411,  417,  421,  421,  421,  421,  627, 1624,
      502,  422,  361, 1402, 1624,  362,  363,  524,  525,  628,
      524,  421,  421,  421,  421, 1403,  898,  364,  422,  898,
     1624,  428, 1092,  414,  365,  428,  366,  367,  635,  529,
      530,  635,  529,  635,  635,  635,  635,  635,  635,  635,
      636,  635,  637,  635,  637,  638,  635, 1404, 1092,  428,

      635,  635,  635,  635,  640,  533,  534, 1624,  533, 1092,
      415,  415,  415,  415, 1405, 1406, 1407,  412,  409,  409,
      409,  409, 1408,  635,  635,  635,  410,  872,  427,  428,
      872,  411, 1409,  428,  410, 1624, 1624, 1624, 1624,  411,
      417,  898, 1624, 1410,  898,  445,  445,  445,  445, 1412,
      635,  635,  635,  635,  635,  635,  664,  428,  437,  664,
     1413,  446, 1624, 1624, 1624, 1624,  447, 1414, 1415,  439,
      440, 1624,  698, 1416,  440, 1417,  437,  664, 1624, 1624,
      664, 1624, 1624,  440,  414,  544,  545,  440,  544, 1624,
      455,  455,  455,  455,  489,  490, 1418,  456,  440,  490,

     1419, 1624,  437,  451,  451,  451,  451, 1624,  490, 1420,
      448,  440,  490,  439,  440, 1421, 1422, 1423,  440,  446,
      437, 1424, 1425,  490,  447,  559,  560,  665,  559, 1624,
     1624,  377,  565,  566,  377,  565,  490,  775,  455,  455,
      455,  455,  440,  378,  378,  456,  379,  380,  665, 1427,
      381,  381,  382, 1433, 1434, 1435,  327,  703, 1624, 1624,
     1624, 1624, 1438,  582,  583, 1624,  582, 1439,  452,  445,
      445,  452,  586,  587, 1624,  586,  328,  450,  453, 1624,
      451,  451,  451,  451,  446,  568,  569,  448,  568,  447,
      452,  445,  445,  452,  590,  591,  446,  590, 1440, 1021,

      453,  447, 1022,  382,  432,  432,  446,  432,  432,  432,
      699,  447,  432,  432, 1441,  432,  432,  432, 1443,  432,
     1110,  700,  435, 1110, 1444, 1445,  435,  432,  436,  432,
      570, 1245, 1624, 1446, 1245, 1447,  452,  445,  445,  452,
     1624, 1624, 1624, 1624, 1448, 1360,  453, 1624, 1360,  432,
      435,  432,  446,  859,  450, 1449,  859,  447,  469,  469,
      469,  469, 1450, 1451, 1452,  470,  458,  458,  458,  458,
      593,  594, 1411,  593, 1092, 1411,  432,  432,  432,  432,
      432,  432,  459,  432,  432,  432,  699,  460,  432,  432,
     1453,  432,  432,  432, 1454,  432, 1455,  432,  435, 1456,

     1457, 1459,  435,  432,  432,  432, 1460,  464,  464,  464,
      464, 1461, 1462,  860,  461, 1624, 1624, 1624, 1624,  489,
      490, 1463, 1624,  459,  490,  432,  435,  432,  460, 1464,
     1465, 1624,  469,  469,  469,  469, 1624, 1466, 1467,  470,
      458,  458,  458,  458,  464,  464,  464,  464,  490, 1468,
     1469,  461,  432,  432,  432,  432,  459, 1470, 1471,  664,
      459,  460,  664,  714, 1472,  460,  458,  458,  458,  458,
     1624, 1624, 1624, 1624, 1474, 1458,  790, 1624, 1458,  790,
     1479,  463,  459,  499,  499,  499,  499,  460, 1480, 1624,
      500,  499,  499,  499,  499, 1481, 1484, 1429,  500,  654,

     1429,  501,  501,  501,  502,  507,  507,  507,  507,  501,
      501,  501,  502,  499,  499,  499,  499, 1485,  463,  983,
      500,  508,  513,  513,  513,  513,  509, 1486, 1487,  510,
      665,  717,  717,  717,  502, 1489, 1490, 1491,  508, 1624,
     1624, 1624, 1624,  509, 1492, 1493, 1624,  507,  507,  507,
      507,  518,  518,  518,  518, 1624,  664, 1494,  519,  664,
     1624, 1495, 1496,  508,  513,  513,  513,  513,  509, 1497,
     1498,  510,  507,  507,  507,  507,  518,  518,  518,  518,
      508,  395,  687,  519, 1499,  509,  687,  797,  508,  664,
      797, 1500,  664,  509,  798, 1501,  512, 1624, 1624, 1624,

     1624, 1502,  664,  664, 1624,  664,  664, 1624,  687, 1503,
      687, 1504,  687, 1624,  818,  818,  818,  818,  802, 1458,
      681,  682, 1458,  681, 1505,  664,  664,  665,  664,  664,
      664,  798, 1506,  664, 1507,  812,  687,  819,  512,  635,
      803,  684,  635, 1508,  635,  635,  635,  635,  635,  635,
      635,  636,  635,  637,  635,  637,  779,  635,  798, 1509,
      665,  635,  635,  635,  635,  640,  806,  880, 1510, 1511,
      673,  673, 1512,  665,  665,  673,  664,  809, 1513,  664,
     1138, 1514, 1515, 1138,  635,  780,  635,  808,  681,  682,
      664,  681,  684,  664, 1516,  810,  665,  665, 1206, 1206,

     1206,  665, 1517,  813, 1519,  395,  396, 1524, 1525,  684,
      396,  635,  635,  635,  635,  635,  635,  804,  804, 1526,
      804,  673,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804, 1529,  804,  396,  804, 1530, 1531,  899,  811,
      804,  804,  804,  804,  427,  697, 1532,  665, 1534,  697,
      681,  682, 1535,  681,  815,  681,  682, 1536,  681, 1537,
      684,  665,  804,  804,  804,  814, 1538, 1624,  697, 1539,
      813,  684,  697,  697, 1540,  337,  684,  820,  820,  820,
      820,  427,  428, 1541,  790,  893,  428,  790,  893,  804,
      804,  801,  804,  804,  804, 1542,  697,  489,  713, 1092,

      819,  437,  713, 1543, 1624,  713, 1544,  654,  894,  713,
      428, 1545,  439,  702, 1546, 1547, 1549,  702,  664,  437,
     1550,  664,  684,  489,  490, 1551,  713,  684,  490, 1552,
      822,  432,  432,  713,  432,  432,  432,  699, 1553,  432,
      432,  702,  432,  432,  432, 1554,  432, 1624,  432,  824,
      437, 1555,  490,  824,  432,  432,  432, 1548, 1624,  702,
     1548,  439,  440,  702,  664, 1624,  440,  664,  437,  340,
      967,  336,  831,  336,  884, 1556,  432,  824,  432,  499,
      499,  499,  499,  337, 1557,  664,  832,  702,  664,  665,
      440, 1558,  818,  818,  818,  818, 1559,  833,  833,  833,

      502, 1560, 1561,  432,  432,  432,  432, 1563, 1568,  673,
      825,  835,  835,  835,  835,  819,  906, 1569,  500,  499,
      499,  499,  499, 1570, 1573, 1574,  500,  499,  499,  499,
      499, 1575,  502, 1576,  500,  665, 1578,  717,  717,  717,
      502,  900, 1579, 1580, 1581,  717,  717,  717,  502,  664,
      664,  664,  664,  664,  664, 1582,  665,  804,  804, 1583,
      804, 1584,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804, 1585,  804,  664,  804,  898,  664, 1586,  898,
      804,  804,  804,  804,  681,  682,  976,  681, 1587,  976,
     1588,  681,  682, 1589,  681,  673,  673,  569,  904,  812,

     1590, 1591,  804,  804,  804,  684,  908,  905, 1592,  977,
     1593,  340,  684,  336,  903,  336,  884, 1594, 1595,  673,
      665,  665,  665,  681,  682,  337,  681, 1596, 1597,  804,
      804,  902,  804,  804,  804,  395,  396, 1598,  814,  907,
      396,  427,  428,  437,  684,  665,  428,  984,  337,  820,
      820,  820,  820, 1599,  439,  440,  684,  489,  490,  440,
     1600,  437,  490,  684,  396, 1601,  835,  835,  835,  835,
      428,  909,  819,  500, 1602,  979, 1603,  913,  979,  664,
      330, 1605,  664,  440, 1605, 1609,  490,  502,  664, 1060,
      914,  664, 1060,  919, 1307,  684,  432,  432,  894,  432,

      432,  432,  699,  664,  432,  432,  664,  432,  432,  432,
      673,  432,  977,  700,  824,  673, 1306, 1612,  824,  432,
      436,  432,  664,  673, 1305,  664,  499,  499,  499,  499,
     1610,  979, 1304,  832,  979,  985, 1608,  664, 1614, 1608,
      664,  432,  824,  432,  833,  833,  833,  502,  931,  932,
      665,  673,  982,  933,  894,  664,  934,  935,  664,  665,
      664,  936, 1619,  664,  937,  938, 1053,  939,  432,  432,
      432,  432,  432,  432,  665,  432,  432,  432,  699,  673,
      432,  432,  673,  432,  432,  432, 1063,  432,  664,  432,
      824,  664, 1303,  665,  824,  432,  432,  432, 1302, 1611,

      673,  986,  499,  499,  499,  499, 1301,  664,  665,  832,
      664, 1065, 1300,  681,  682,  987,  681,  432,  824,  432,
      833,  833,  833,  502,  395,  396,  665,  664,  812,  396,
      664,  665,  673,  673,  684,  427,  428,  489,  490,  673,
      428,  673,  490, 1622,  432,  432,  432,  432, 1299,  437,
     1613,  988,  673,  396, 1616,  499,  499,  499,  499,  665,
      439,  440,  832,  989,  428,  440,  490,  437,  673,  664,
     1617,  990,  664, 1001, 1001, 1001,  502,  664,  665, 1298,
      664,  673,  994,  664, 1000,  684,  664,  664, 1060,  440,
      664, 1060, 1064, 1297, 1618,  395,  396,  437,  665, 1296,

      396,  427,  428,  673, 1295,  673,  428,  995,  439,  440,
      673,  977, 1621,  440,  673,  437, 1294,  664,  489,  490,
      664, 1623,  673,  490,  396, 1620,  673, 1293,  673, 1615,
      428,  664,  673, 1066,  664, 1292, 1291,  440, 1069, 1070,
      665,  664, 1067, 1068,  664, 1074, 1138,  490,  665, 1138,
      664, 1290, 1075,  664,  665, 1289,  664,  664,  665,  664,
      664, 1288, 1080,  499,  499,  499,  499, 1287, 1286, 1285,
      832,  499,  499,  499,  499,  395,  396, 1128,  832, 1284,
      396, 1001, 1001, 1001,  502, 1283, 1281, 1280,  665, 1001,
     1001, 1001,  502, 1137, 1279,  673,  664, 1136, 1278,  664,

     1138,  673,  665, 1138,  396,  427,  428, 1142, 1140, 1275,
      428, 1274,  665,  437,  489,  490, 1139,  665, 1324,  490,
      664,  665, 1273,  664,  439,  440, 1264,  665,  665,  440,
      664,  437, 1200,  664,  428, 1200,  664, 1146, 1263,  664,
     1262,  673, 1260,  490, 1141,  673, 1152,  664,  664, 1266,
      664,  664, 1266,  440, 1259, 1201, 1147,  664,  395,  396,
      664, 1258,  664,  396,  437,  664, 1257,  665, 1195,  427,
      428,  665, 1201, 1256,  428,  439,  440, 1255,  664, 1254,
      440,  664,  437,  489,  490, 1253,  664,  396,  490,  664,
     1204,  665,  673,  673,  664, 1252, 1251,  664,  428, 1205,

     1210,  665,  673,  664,  440, 1250,  664,  665, 1207, 1249,
     1208, 1214,  490,  664, 1248, 1209,  664, 1215,  665,  665,
     1261,  395,  396, 1247, 1266, 1220,  396, 1266,  665, 1267,
      427,  428, 1246,  665,  664,  428, 1244,  664,  664,  673,
      664,  664, 1243,  664, 1242, 1269, 1268, 1201,  673,  665,
      396,  664, 1272, 1241,  664,  437, 1240,  665,  673,  428,
     1271, 1276, 1239, 1270, 1238,  665,  439,  440, 1237,  664,
     1236,  440,  664,  437,  665,  489,  490, 1235,  395,  396,
      490, 1322, 1234,  396,  665,  673, 1325,  427,  428,  489,
      490, 1233,  428, 1232,  490,  440,  673, 1277, 1231, 1327,

      664, 1326, 1230,  664,  490,  665, 1282,  396, 1229,  665,
      664,  665,  437,  664,  673, 1228,  428, 1227,  490, 1226,
     1329, 1225,  665,  439,  440, 1224, 1223, 1328,  440, 1333,
      437, 1339,  664,  664,  664,  664,  664,  664, 1222,  664,
      665,  664,  664, 1221,  664,  395,  396, 1219,  427,  428,
      396,  437,  440,  428, 1429, 1218,  664, 1429, 1376,  664,
     1378,  664,  439,  440,  664, 1334, 1217,  440, 1216,  437,
     1429,  665,  664, 1429,  396,  664, 1213,  428,  673,  673,
     1212,  665, 1211, 1380,  673, 1383,  664, 1203, 1387,  664,
     1379,  440, 1381,  489,  490, 1382,  664, 1426,  490,  664,

     1202, 1199, 1388,  665,  665,  665,  673, 1198,  395,  396,
      665,  664,  665,  396,  664,  673,  427,  428,  489,  490,
     1475,  428,  490,  490, 1428,  665, 1197,  665, 1196, 1430,
     1194,  673,  665, 1393, 1193, 1192,  664,  396,  437,  664,
     1191,  665, 1190,  665, 1189,  428, 1431,  490, 1518,  439,
      440, 1188, 1432, 1187,  440, 1186,  437,  665,  664, 1185,
     1436,  664, 1442,  395,  396,  427,  428,  665,  396,  664,
      428, 1473,  664, 1184, 1183,  489,  490, 1182,  440,  437,
      490,  673,  665,  664, 1476,  664,  664, 1181,  664, 1180,
      439,  440,  396, 1437,  428,  440, 1179,  437, 1178, 1478,

     1177, 1482,  664,  673,  490,  664, 1176,  665,  395,  396,
     1477, 1488, 1174,  396,  664,  427,  428,  664, 1173,  440,
      428,  664, 1172, 1171,  664, 1170, 1483,  437,  673,  665,
      673, 1169, 1520,  664, 1522, 1168,  664,  396,  439,  440,
      665, 1523, 1167,  440,  428,  437, 1521, 1166, 1527,  664,
      489,  490,  664, 1165,  665,  490,  665, 1164, 1605,  395,
      396, 1605, 1564, 1562,  396, 1162,  673,  440, 1092,  427,
      428, 1528, 1161,  665,  428,  437, 1160, 1605,  673,  490,
     1605, 1565, 1159, 1533, 1158,  665,  439,  440,  396,  489,
      490,  440,  665,  437,  490, 1157, 1566, 1156,  428, 1606,

      330, 1155, 1606, 1154,  665, 1153, 1567, 1608,  395,  396,
     1608, 1151, 1604,  396,  437,  440, 1571, 1150,  490, 1149,
      665, 1148,  673,  427,  428,  439,  440, 1145,  428,  665,
      440, 1144,  437, 1572,  489,  490, 1577,  396, 1143,  490,
     1606,  330, 1135, 1606, 1607, 1134,  329,  330,  665,  329,
      977, 1132,  428, 1131,  440,  402, 1130, 1129,  402,  402,
      402, 1127, 1126,  490,  494,  402, 1125,  494,  494,  494,
      665, 1124,  498, 1123,  494,  498,  498,  498,  665, 1122,
     1121, 1120,  498,  799, 1119,  331,  799,  799,  799, 1118,
     1117, 1607,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,

      175,  175,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  216,  216,  216,  216,  216,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,

      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  292,  292,  292,  292,  292,  292,  292,  292,

      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  312,  312,  312,

      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,

      317,  317,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  332,  332, 1116,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  335,  521, 1115, 1114,  521,  521,  521, 1113,
     1112,  596, 1111,  521,  596,  596,  596, 1109, 1108,  335,
     1105,  596,  335,  335,  335, 1104, 1103, 1102, 1101,  335,

      336, 1100,  336,  336,  661,  336, 1099,  661,  661,  661,
      336,  336, 1098,  661,  336,  336,  336,  343, 1097,  343,
      343,  343,  343,  807,  343, 1096,  807,  807,  807,  343,
      343,  343, 1092,  343,  343,  343,  360,  360,  360,  360,
     1095, 1094, 1093,  799, 1090,  360,  799,  799,  799, 1089,
      360,  360, 1088,  360,  360,  360, 1087,  360,  360,  360,
      360, 1086,  360,  360,  368, 1085,  368,  368,  807,  368,
     1084,  807,  807,  807,  368,  368, 1083, 1082,  368,  368,
      368,  370,  370,  370,  370, 1081, 1079, 1078,  807,  807,
      370,  807,  807,  807, 1077,  370,  370, 1076,  370,  370,

      370, 1073,  370,  370,  370,  370, 1072,  370,  370,  392,
      392, 1071,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  394, 1062, 1061,  394,  894, 1057,
     1056,  394, 1055,  394,  394,  394,  394,  394,  778, 1054,
     1052,  394,  394,  394, 1051,  394,  394,  394, 1050,  764,
     1049, 1048,  394,  404, 1047,  404,  404, 1046,  764, 1045,
     1044,  404,  764,  764,  404,  404,  404, 1043, 1042, 1041,
     1040,  404,  413,  413,  413,  413,  601, 1037,  413,  601,

      601,  601, 1036,  764, 1035, 1032,  601,  413, 1031, 1030,
      413, 1029,  764, 1027, 1026,  413,  764,  764,  413,  413,
      413, 1025, 1024, 1023,  413,  413,  416,  416,  416,  416,
      335, 1020, 1019,  335,  335,  335, 1016, 1015, 1014, 1013,
      335,  416, 1012,  416,  416,  416, 1011, 1010, 1009,  416,
     1008, 1007,  416,  416,  416,  672, 1006, 1005, 1004,  416,
      423,  423,  423,  423,  672, 1003,  423,  672,  672,  672,
      715,  999,  998,  715,  715,  715,  997,  996,  993,  992,
      715,  991,  984,  423,  981,  980,  423,  423,  423,  973,
      972,  971,  970,  423,  424,  424,  778,  424,  424,  424,

      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  426,
      968,  966,  426,  965,  964,  619,  426,  962,  426,  426,
      426,  426,  426,  961,  960,  959,  426,  426,  426,  958,
      426,  426,  426,  957,  956,  955,  954,  426,  434,  434,
      953,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  438,  438,  952,  951,  438,  950,  949,

      948,  438,  947,  438,  438,  438,  438,  438,  946,  438,
      945,  438,  438,  438,  944,  438,  438,  438,  672,  943,
      942,  941,  438,  449,  449,  449,  449,  672,  940,  449,
      672,  672,  672,  930,  929,  928,  927,  926,  449,  925,
      924,  449,  923,  522,  922,  921,  449,  918,  917,  449,
      449,  449,  916,  915,  912,  449,  449,  454,  454,  454,
      454,  911,  910,  673,  901,  801,  454,  897,  896,  654,
      889,  888,  454,  886,  454,  454,  882,  881,  879,  878,
      454,  877,  619,  454,  454,  454,  874,  873,  762,  871,
      454,  457,  457,  457,  457,  402,  870,  457,  402,  402,

      402,  869,  868,  723,  867,  402,  723,  723,  723,  866,
      865,  864,  863,  723,  457,  862,  861,  457,  457,  457,
      858,  857,  856,  854,  457,  462,  462,  462,  462,  730,
      853,  462,  730,  730,  730,  852,  851,  850,  849,  730,
      462,  848,  847,  462,  846,  845,  843,  842,  462,  841,
      840,  462,  462,  462,  839,  522,  837,  462,  462,  465,
      465,  465,  465,  596,  836,  830,  596,  596,  596,  829,
      828,  827,  826,  596,  465,  417,  465,  465,  821,  817,
      816,  801,  465,  796,  795,  465,  465,  465,  794,  785,
      784,  782,  465,  471,  471,  471,  471,  601,  781,  471,

      601,  601,  601, 1624,  337,  920,  337,  601,  920,  920,
      920,  337,  778,  631,  776,  920,  471,  774,  773,  471,
      471,  471,  772,  771,  770,  619,  471,  472,  765,  763,
      472,  760,  757,  756,  602,  755,  472,  754,  597,  472,
      472,  472,  753,  752,  751,  750,  472,  476,  476,  749,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  481,  481,  745,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  486,  486,  744,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  488,  743,  741,  488,  738,  571,  737,  488,
      736,  488,  488,  488,  488,  488,  735,  734,  733,  488,
      488,  488,  552,  488,  488,  488,  552,  732,  731,  729,
      488,  497,  546,  541,  497,  728,  727,  726,  725,  528,
      724,  522,  722,  522,  497,  720,  508,  719,  497,  716,

      487,  711,  482,  710,  497,  477,  709,  497,  497,  497,
      707,  459,  446,  699,  497,  503,  503,  503,  503,  699,
      699,  503,  425,  417,  694,  410,  691,  403,  690,  689,
      393,  376,  503,  503,  671,  667,  666,  660,  503,  659,
      658,  503,  503,  503,  337,  337,  631,  333,  503,  511,
      511,  511,  511,  629,  626,  511,  625,  622,  620,  619,
      615,  613,  612,  610,  511,  608,  607,  511,  605,  600,
      571,  557,  511,  556,  555,  511,  511,  511,  553,  552,
      548,  511,  511,  514,  514,  514,  514,  541,  537,  528,
      522,  508,  487,  482,  477,  459,  446,  425,  514,  425,

      514,  514,  410,  393,  376,  337,  514,  334,  333,  514,
      514,  514, 1624, 1624, 1624, 1624,  514,  520,  520,  520,
      520, 1624, 1624,  520, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
      520, 1624, 1624,  520,  520,  520, 1624, 1624, 1624, 1624,
      520,  523, 1624,  523, 1624, 1624, 1624, 1624, 1624,  523,
     1624, 1624,  523,  523,  523, 1624, 1624, 1624, 1624,  523,
      527,  527, 1624,  527, 1624, 1624, 1624, 1624, 1624,  527,
     1624, 1624,  527,  527,  527, 1624, 1624, 1624, 1624,  527,
      532,  532, 1624,  532,  532,  532,  532,  532,  532,  532,

      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532, 1624,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  536, 1624, 1624,  536, 1624,
     1624, 1624, 1624, 1624,  536, 1624, 1624,  536,  536,  536,
     1624, 1624, 1624, 1624,  536,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538, 1624,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      540,  540, 1624,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  540, 1624,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  547, 1624, 1624,  547, 1624,
     1624, 1624, 1624, 1624,  547, 1624, 1624,  547,  547,  547,
     1624, 1624, 1624, 1624,  547,  551,  551, 1624,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      554,  554, 1624,  554, 1624,  554,  554,  554,  554,  554,
      554,  554, 1624,  554,  554,  554,  554, 1624,  554,  554,
      554,  554,  554, 1624,  554, 1624,  554,  554,  554,  554,

      554,  554,  554,  554,  554,  564, 1624, 1624,  564, 1624,
     1624, 1624, 1624, 1624,  564, 1624, 1624, 1624, 1624,  564,
      564, 1624,  564, 1624, 1624, 1624, 1624, 1624,  564, 1624,
     1624,  564,  564,  564,  572,  572, 1624,  572, 1624,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572, 1624,  572, 1624,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  576,
      576, 1624,  576, 1624,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576, 1624,  576, 1624,  576,  576,  576,  576,  576,

      576,  576,  576,  576,  585, 1624, 1624,  585, 1624, 1624,
     1624, 1624, 1624,  585, 1624, 1624,  585,  585,  585, 1624,
     1624, 1624, 1624,  585,  589,  589, 1624,  589,  589,  589,
      589,  589,  589,  589, 1624, 1624,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589, 1624,  589, 1624,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  598,
     1624,  598,  598, 1624, 1624, 1624, 1624,  598, 1624, 1624,
      598,  598,  598, 1624, 1624, 1624, 1624,  598,  603, 1624,
      603,  603, 1624, 1624, 1624, 1624,  603, 1624, 1624,  603,
      603,  603, 1624, 1624, 1624, 1624,  603,  606,  606, 1624,

      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
     1624,  606, 1624,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  609, 1624, 1624,  609, 1624, 1624, 1624, 1624,
     1624,  609, 1624, 1624,  609,  609,  609, 1624, 1624, 1624,
     1624,  609,  611,  611, 1624,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611, 1624,  611,  611,
      611,  611,  611,  611,  611,  611,  611, 1624,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  614,  614, 1624,
      614,  614,  614,  614,  614,  614,  614,  614,  614, 1624,

      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
     1624,  614, 1624,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  617, 1624, 1624,  617, 1624, 1624, 1624,  617,
     1624,  617, 1624, 1624,  617,  617,  617, 1624, 1624, 1624,
     1624,  617,  618, 1624,  618,  618,  618,  618,  618, 1624,
     1624,  618, 1624,  618, 1624, 1624,  618,  618,  618, 1624,
     1624, 1624, 1624,  618,  621,  621, 1624,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621, 1624,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623, 1624,
     1624,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  624,  624, 1624,  624,  624,  624,
      624,  624,  624, 1624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624, 1624, 1624,  624,  624,  624, 1624,
     1624,  624,  624,  624,  624,  624,  624,  624,  624,  360,
      360,  360,  360, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624,  360,  360, 1624,  360,  360,  360, 1624,
      360,  360,  360,  360, 1624,  360,  360,  332,  332, 1624,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  630,  630, 1624, 1624, 1624, 1624,  630, 1624,
     1624,  630,  630,  630, 1624, 1624, 1624, 1624,  630,  336,
     1624,  336,  336, 1624,  336, 1624, 1624, 1624, 1624,  336,
      336, 1624, 1624,  336,  336,  336,  632, 1624, 1624,  632,
     1624, 1624, 1624, 1624, 1624,  632, 1624, 1624,  632,  632,
      632,  639, 1624, 1624,  639, 1624,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  368, 1624,  368,  368,
     1624,  368, 1624, 1624, 1624, 1624,  368,  368, 1624, 1624,
      368,  368,  368,  370, 1624, 1624,  370, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624,  370,  370, 1624,  370,
      370,  370,  370,  392,  392, 1624,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  394, 1624,

     1624,  394, 1624, 1624, 1624,  394, 1624,  394,  394,  394,
      394,  394, 1624, 1624, 1624,  394,  394,  394, 1624,  394,
      394,  394, 1624, 1624, 1624, 1624,  394,  686, 1624, 1624,
      686, 1624, 1624, 1624,  686, 1624,  686, 1624,  686,  686,
      686, 1624, 1624, 1624,  686,  686,  686, 1624,  686,  686,
      686, 1624, 1624, 1624, 1624,  686,  404, 1624,  404,  404,
     1624, 1624, 1624, 1624,  404, 1624, 1624,  404,  404,  404,
     1624, 1624, 1624, 1624,  404,  402, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624,  402, 1624, 1624,  402,  402,  402, 1624, 1624,

     1624, 1624,  402,  413,  413,  413,  413, 1624, 1624,  413,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,  413, 1624,
     1624,  413, 1624, 1624, 1624, 1624,  413, 1624, 1624,  413,
      413,  413, 1624, 1624, 1624,  413,  413,  416,  416,  416,
      416, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624,  416, 1624,  416,  416,  416, 1624, 1624, 1624,
      416, 1624, 1624,  416,  416,  416, 1624, 1624, 1624, 1624,
      416,  423,  423,  423,  423, 1624, 1624,  423, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624,  423, 1624, 1624,  423,  423,  423,

     1624, 1624, 1624, 1624,  423,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692, 1624,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      695, 1624,  695, 1624, 1624, 1624,  695, 1624, 1624,  695,
      695,  695, 1624, 1624, 1624, 1624,  695,  424,  424, 1624,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  426, 1624, 1624,  426, 1624, 1624, 1624,  426,

     1624,  426,  426,  426,  426,  426, 1624, 1624, 1624,  426,
      426,  426, 1624,  426,  426,  426, 1624, 1624, 1624, 1624,
      426,  696, 1624, 1624,  696, 1624, 1624, 1624,  696, 1624,
      696, 1624,  696,  696,  696, 1624, 1624, 1624,  696,  696,
      696, 1624,  696,  696,  696, 1624, 1624, 1624, 1624,  696,
      432,  432, 1624,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  434,  434, 1624,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,

      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      438,  438, 1624, 1624,  438, 1624, 1624, 1624,  438, 1624,
      438,  438,  438,  438,  438, 1624,  438, 1624,  438,  438,
      438, 1624,  438,  438,  438, 1624, 1624, 1624, 1624,  438,
      701, 1624, 1624,  701, 1624, 1624, 1624,  701, 1624,  701,
     1624,  701,  701,  701, 1624, 1624, 1624,  701,  701,  701,
     1624,  701,  701,  701, 1624, 1624, 1624, 1624,  701,  449,
      449,  449,  449, 1624, 1624,  449, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624,  449, 1624, 1624,  449, 1624, 1624,

     1624, 1624,  449, 1624, 1624,  449,  449,  449, 1624, 1624,
     1624,  449,  449,  454,  454,  454,  454, 1624, 1624, 1624,
     1624, 1624,  454, 1624, 1624, 1624, 1624, 1624,  454, 1624,
      454,  454, 1624, 1624, 1624, 1624,  454, 1624, 1624,  454,
      454,  454, 1624, 1624, 1624, 1624,  454,  457,  457,  457,
      457, 1624, 1624,  457, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
      457, 1624, 1624,  457,  457,  457, 1624, 1624, 1624, 1624,
      457,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704, 1624,  704,  704,  704,  704,  704,  704,  704,

      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  706, 1624, 1624,  706,
     1624, 1624, 1624, 1624, 1624,  706, 1624, 1624, 1624, 1624,
     1624, 1624, 1624,  706, 1624, 1624, 1624, 1624, 1624,  706,
     1624, 1624,  706,  706,  706, 1624, 1624, 1624, 1624,  706,
      462,  462,  462,  462, 1624, 1624,  462, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624,  462, 1624, 1624,  462, 1624,
     1624, 1624, 1624,  462, 1624, 1624,  462,  462,  462, 1624,
     1624, 1624,  462,  462,  465,  465,  465,  465, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,  465,

     1624,  465,  465, 1624, 1624, 1624, 1624,  465, 1624, 1624,
      465,  465,  465, 1624, 1624, 1624, 1624,  465,  471,  471,
      471,  471, 1624, 1624,  471, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624,  471, 1624, 1624,  471,  471,  471, 1624, 1624, 1624,
     1624,  471,  708, 1624, 1624, 1624, 1624, 1624,  708, 1624,
     1624,  708,  708,  708, 1624, 1624, 1624, 1624,  708,  472,
     1624, 1624,  472, 1624, 1624, 1624, 1624, 1624,  472, 1624,
     1624,  472,  472,  472, 1624, 1624, 1624, 1624,  472,  476,
      476, 1624,  476,  476,  476,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  481,  481, 1624,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  486,
      486, 1624,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  488, 1624, 1624,  488, 1624, 1624,

     1624,  488, 1624,  488,  488,  488,  488,  488, 1624, 1624,
     1624,  488,  488,  488, 1624,  488,  488,  488, 1624, 1624,
     1624, 1624,  488,  712, 1624, 1624,  712, 1624, 1624, 1624,
      712, 1624,  712, 1624,  712,  712,  712, 1624, 1624, 1624,
      712,  712,  712, 1624,  712,  712,  712, 1624, 1624, 1624,
     1624,  712,  497, 1624, 1624,  497, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624,  497, 1624, 1624, 1624,  497,
     1624, 1624, 1624, 1624, 1624,  497, 1624, 1624,  497,  497,
      497, 1624, 1624, 1624, 1624,  497,  503,  503,  503,  503,
     1624, 1624,  503, 1624, 1624, 1624, 1624, 1624, 1624, 1624,

     1624, 1624, 1624,  503,  503, 1624, 1624, 1624, 1624,  503,
     1624, 1624,  503,  503,  503, 1624, 1624, 1624, 1624,  503,
      718,  718,  718,  718, 1624, 1624,  718, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624,  718,  718, 1624,
     1624, 1624, 1624,  718, 1624, 1624,  718,  718,  718, 1624,
     1624, 1624, 1624,  718,  511,  511,  511,  511, 1624, 1624,
      511, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,  511,
     1624, 1624,  511, 1624, 1624, 1624, 1624,  511, 1624, 1624,
      511,  511,  511, 1624, 1624, 1624,  511,  511,  514,  514,
      514,  514, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,

     1624, 1624, 1624,  514, 1624,  514,  514, 1624, 1624, 1624,
     1624,  514, 1624, 1624,  514,  514,  514, 1624, 1624, 1624,
     1624,  514,  520,  520,  520,  520, 1624, 1624,  520, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624,  520, 1624, 1624,  520,  520,
      520, 1624, 1624, 1624, 1624,  520,  721, 1624, 1624, 1624,
     1624, 1624,  721, 1624, 1624,  721,  721,  721, 1624, 1624,
     1624, 1624,  721,  523, 1624,  523, 1624, 1624, 1624, 1624,
     1624,  523, 1624, 1624,  523,  523,  523, 1624, 1624, 1624,
     1624,  523,  723, 1624, 1624, 1624, 1624, 1624, 1624, 1624,

     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,  723,
     1624, 1624,  723,  723,  723, 1624, 1624, 1624, 1624,  723,
      527,  527, 1624,  527, 1624, 1624, 1624, 1624, 1624,  527,
     1624, 1624,  527,  527,  527, 1624, 1624, 1624, 1624,  527,
      532,  532, 1624,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532, 1624,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  536, 1624, 1624,  536, 1624,
     1624, 1624, 1624, 1624,  536, 1624, 1624,  536,  536,  536,
     1624, 1624, 1624, 1624,  536,  538,  538,  538,  538,  538,

      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538, 1624,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      540,  540, 1624,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540, 1624,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  730, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624,  730, 1624, 1624,  730,  730,  730, 1624, 1624,
     1624, 1624,  730,  547, 1624, 1624,  547, 1624, 1624, 1624,

     1624, 1624,  547, 1624, 1624,  547,  547,  547, 1624, 1624,
     1624, 1624,  547,  551,  551, 1624,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  554,  554,
     1624,  554, 1624,  554,  554,  554,  554,  554,  554,  554,
     1624,  554,  554,  554,  554, 1624,  554,  554,  554,  554,
      554, 1624,  554, 1624,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  564, 1624, 1624,  564, 1624, 1624, 1624,
     1624, 1624,  564, 1624, 1624, 1624, 1624,  564,  564, 1624,

      564, 1624, 1624, 1624, 1624, 1624,  564, 1624, 1624,  564,
      564,  564,  572,  572, 1624,  572, 1624,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572, 1624,  572, 1624,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  576,  576, 1624,
      576, 1624,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
     1624,  576, 1624,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  585, 1624, 1624,  585, 1624, 1624, 1624, 1624,
     1624,  585, 1624, 1624,  585,  585,  585, 1624, 1624, 1624,

     1624,  585,  589,  589, 1624,  589,  589,  589,  589,  589,
      589,  589, 1624, 1624,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589, 1624,  589, 1624,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  598, 1624,  598,
      598, 1624, 1624, 1624, 1624,  598, 1624, 1624,  598,  598,
      598, 1624, 1624, 1624, 1624,  598,  596, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624,  596, 1624, 1624,  596,  596,  596, 1624,
     1624, 1624, 1624,  596,  603, 1624,  603,  603, 1624, 1624,
     1624, 1624,  603, 1624, 1624,  603,  603,  603, 1624, 1624,

     1624, 1624,  603,  601, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
      601, 1624, 1624,  601,  601,  601, 1624, 1624, 1624, 1624,
      601,  606,  606, 1624,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606, 1624,  606, 1624,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  609, 1624, 1624,  609,
     1624, 1624, 1624, 1624, 1624,  609, 1624, 1624,  609,  609,
      609, 1624, 1624, 1624, 1624,  609,  611,  611, 1624,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611, 1624,  611,  611,  611,  611,  611,  611,  611,  611,
      611, 1624,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  614,  614, 1624,  614,  614,  614,  614,  614,  614,
      614,  614,  614, 1624,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614, 1624,  614, 1624,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  767, 1624, 1624, 1624,
     1624, 1624, 1624, 1624,  767, 1624,  767,  767,  767,  767,
      767, 1624, 1624,  767, 1624,  767, 1624, 1624,  767,  767,
      767, 1624, 1624, 1624, 1624,  767,  618, 1624,  618,  618,
      618,  618,  618, 1624, 1624,  618, 1624,  618, 1624, 1624,

      618,  618,  618, 1624, 1624, 1624, 1624,  618,  769, 1624,
     1624,  769, 1624, 1624, 1624,  769, 1624,  769, 1624, 1624,
      769,  769,  769, 1624, 1624, 1624, 1624,  769,  621,  621,
     1624,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621, 1624,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623, 1624, 1624,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  624,  624,

     1624,  624,  624,  624,  624,  624,  624, 1624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624, 1624, 1624,
      624,  624,  624, 1624, 1624,  624,  624,  624,  624,  624,
      624,  624,  624,  360, 1624, 1624,  360, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624,  360, 1624, 1624,  360,
      360,  360,  360,  630,  630, 1624, 1624, 1624, 1624,  630,
     1624, 1624,  630,  630,  630, 1624, 1624, 1624, 1624,  630,
      777,  777, 1624,  777,  777,  777,  777, 1624,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  632,  632, 1624,  632, 1624,
     1624, 1624, 1624, 1624,  632, 1624, 1624,  632,  632,  632,
      336, 1624,  336,  336, 1624,  336, 1624, 1624, 1624, 1624,
      336,  336, 1624, 1624,  336,  336,  336,  639, 1624, 1624,
      639, 1624,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  789,  789, 1624,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  661, 1624, 1624,
      661, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
      661, 1624, 1624,  661,  661,  661,  800, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624,  800, 1624,  800, 1624,
      800,  800, 1624, 1624, 1624, 1624,  800, 1624, 1624,  800,
      800,  800, 1624, 1624,  800,  805,  805, 1624,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,

      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      370, 1624, 1624,  370, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624,  370,  370, 1624,  370,  370,  370,  370,
      686, 1624, 1624,  686, 1624, 1624, 1624,  686, 1624,  686,
      686,  686,  686,  686, 1624, 1624, 1624,  686,  686,  686,
     1624,  686,  686,  686, 1624, 1624, 1624, 1624,  686,  394,
     1624, 1624,  394, 1624, 1624, 1624,  394, 1624,  394,  394,
      394,  394,  394, 1624, 1624, 1624,  394,  394,  394, 1624,
      394,  394,  394, 1624, 1624, 1624, 1624,  394,  692,  692,

      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  695, 1624,  695, 1624, 1624, 1624,  695,
     1624, 1624,  695,  695,  695, 1624, 1624, 1624, 1624,  695,
      696, 1624, 1624,  696, 1624, 1624, 1624,  696, 1624,  696,
      696,  696,  696,  696, 1624, 1624, 1624,  696,  696,  696,
     1624,  696,  696,  696, 1624, 1624, 1624, 1624,  696,  426,
     1624, 1624,  426, 1624, 1624, 1624,  426, 1624,  426,  426,
      426,  426,  426, 1624, 1624, 1624,  426,  426,  426, 1624,

      426,  426,  426, 1624, 1624, 1624, 1624,  426,  823,  823,
     1624,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  701,  701, 1624, 1624,  701, 1624, 1624,
     1624,  701, 1624,  701,  701,  701,  701,  701, 1624,  701,
     1624,  701,  701,  701, 1624,  701,  701,  701, 1624, 1624,
     1624, 1624,  701,  438,  438, 1624, 1624,  438, 1624, 1624,
     1624,  438, 1624,  438,  438,  438,  438,  438, 1624,  438,
     1624,  438,  438,  438, 1624,  438,  438,  438, 1624, 1624,

     1624, 1624,  438,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  706, 1624,
     1624,  706, 1624, 1624, 1624, 1624, 1624,  706, 1624, 1624,
     1624, 1624, 1624, 1624, 1624,  706, 1624, 1624, 1624, 1624,
     1624,  706, 1624, 1624,  706,  706,  706, 1624, 1624, 1624,
     1624,  706,  708, 1624, 1624, 1624, 1624, 1624,  708, 1624,
     1624,  708,  708,  708, 1624, 1624, 1624, 1624,  708,  712,
     1624, 1624,  712, 1624, 1624, 1624,  712, 1624,  712,  712,

      712,  712,  712, 1624, 1624, 1624,  712,  712,  712, 1624,
      712,  712,  712, 1624, 1624, 1624, 1624,  712,  488, 1624,
     1624,  488, 1624, 1624, 1624,  488, 1624,  488,  488,  488,
      488,  488, 1624, 1624, 1624,  488,  488,  488, 1624,  488,
      488,  488, 1624, 1624, 1624, 1624,  488,  834,  834,  834,
      834, 1624, 1624,  834, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624,  834,  834, 1624, 1624, 1624, 1624,
      834, 1624, 1624,  834,  834,  834, 1624, 1624, 1624, 1624,
      834,  715,  715,  715,  715, 1624, 1624,  715, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,  715,

     1624, 1624, 1624, 1624,  715, 1624, 1624,  715,  715,  715,
     1624, 1624, 1624, 1624,  715,  718,  718,  718,  718, 1624,
     1624,  718, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624,  718,  718, 1624, 1624, 1624, 1624,  718, 1624,
     1624,  718,  718,  718, 1624, 1624, 1624, 1624,  718,  721,
     1624, 1624, 1624, 1624, 1624,  721, 1624, 1624,  721,  721,
      721, 1624, 1624, 1624, 1624,  721,  838, 1624,  838, 1624,
     1624, 1624, 1624, 1624,  838, 1624, 1624,  838,  838,  838,
     1624, 1624, 1624, 1624,  838,  844, 1624, 1624, 1624, 1624,
     1624,  844, 1624, 1624,  844,  844,  844, 1624, 1624, 1624,

     1624,  844,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
     1624,  855,  855,  855,  855,  855, 1624,  855,  855, 1624,
     1624,  855,  855,  855,  855,  855,  855,  767, 1624, 1624,
     1624, 1624, 1624, 1624, 1624,  767, 1624,  767,  767,  767,
      767,  767, 1624, 1624,  767, 1624,  767, 1624, 1624,  767,
      767,  767, 1624, 1624, 1624, 1624,  767,  875, 1624, 1624,
      875, 1624, 1624, 1624,  875, 1624,  875, 1624, 1624,  875,
      875,  875, 1624, 1624, 1624, 1624,  875,  876, 1624,  876,
      876,  876,  876,  876, 1624, 1624,  876, 1624,  876, 1624,

     1624,  876,  876,  876, 1624, 1624, 1624, 1624,  876,  360,
     1624, 1624,  360, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624,  360, 1624, 1624,  360,  360,  360,  360,  777,
      777, 1624,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  883, 1624, 1624,  883, 1624, 1624,
     1624, 1624, 1624,  883, 1624, 1624,  883,  883,  883,  343,
     1624,  343, 1624,  343,  343, 1624,  343, 1624, 1624, 1624,

     1624,  343,  343, 1624, 1624,  343,  343,  343,  789,  789,
     1624,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  800, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624,  800, 1624,  800, 1624,  800,  800, 1624,
     1624, 1624, 1624,  800, 1624, 1624,  800,  800,  800, 1624,
     1624,  800,  804,  804, 1624,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,

      804,  804,  804,  804,  804,  804,  804,  805,  805, 1624,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  370, 1624, 1624,  370, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624,  370,  370, 1624,  370,  370,
      370,  370,  336,  336, 1624,  336, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624,  336, 1624,  336,  336, 1624,  336,
      336, 1624, 1624, 1624,  336,  336, 1624, 1624,  336,  336,

      336, 1624,  336,  394, 1624, 1624,  394, 1624, 1624, 1624,
      394, 1624,  394,  394,  394,  394,  394, 1624, 1624, 1624,
      394,  394,  394, 1624,  394,  394,  394, 1624, 1624, 1624,
     1624,  394,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  426, 1624, 1624,
      426, 1624, 1624, 1624,  426, 1624,  426,  426,  426,  426,
      426, 1624, 1624, 1624,  426,  426,  426, 1624,  426,  426,
      426, 1624, 1624, 1624, 1624,  426,  823,  823, 1624,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  438,  438, 1624, 1624,  438, 1624, 1624, 1624,  438,
     1624,  438,  438,  438,  438,  438, 1624,  438, 1624,  438,
      438,  438, 1624,  438,  438,  438, 1624, 1624, 1624, 1624,
      438,  488, 1624, 1624,  488, 1624, 1624, 1624,  488, 1624,
      488,  488,  488,  488,  488, 1624, 1624, 1624,  488,  488,
      488, 1624,  488,  488,  488, 1624, 1624, 1624, 1624,  488,
      834,  834,  834,  834, 1624, 1624,  834, 1624, 1624, 1624,

     1624, 1624, 1624, 1624, 1624, 1624, 1624,  834,  834, 1624,
     1624, 1624, 1624,  834, 1624, 1624,  834,  834,  834, 1624,
     1624, 1624, 1624,  834,  715,  715,  715,  715, 1624, 1624,
      715, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624,  715, 1624, 1624, 1624, 1624,  715, 1624, 1624,
      715,  715,  715, 1624, 1624, 1624, 1624,  715,  838, 1624,
      838, 1624, 1624, 1624, 1624, 1624,  838, 1624, 1624,  838,
      838,  838, 1624, 1624, 1624, 1624,  838,  844, 1624, 1624,
     1624, 1624, 1624,  844, 1624, 1624,  844,  844,  844, 1624,
     1624, 1624, 1624,  844,  963, 1624, 1624, 1624, 1624, 1624,

     1624, 1624,  963, 1624,  963,  963,  963,  963,  963, 1624,
     1624,  963, 1624,  963, 1624, 1624,  963,  963,  963, 1624,
     1624, 1624, 1624,  963,  876, 1624,  876,  876,  876,  876,
      876, 1624, 1624,  876, 1624,  876, 1624, 1624,  876,  876,
      876, 1624, 1624, 1624, 1624,  876,  969,  969, 1624,  969,
     1624, 1624, 1624, 1624, 1624,  969, 1624, 1624,  969,  969,
      969,  978,  978, 1624,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978, 1002, 1002, 1002, 1002,

     1624, 1624, 1002, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1002, 1002, 1624, 1624, 1624, 1624, 1002,
     1624, 1624, 1002, 1002, 1002, 1624, 1624, 1624, 1624, 1002,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1624, 1028,
     1028, 1028, 1028, 1028, 1624, 1028, 1028, 1624, 1028, 1624,
     1028, 1028, 1028, 1028, 1028, 1059, 1059, 1624, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,

     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1624, 1106,
     1106, 1106, 1106, 1106, 1624, 1106, 1106, 1624, 1624, 1624,
     1106, 1106, 1106, 1106, 1106, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1624, 1107, 1107, 1107, 1107, 1107, 1624,
     1107, 1107, 1624, 1624, 1624, 1107, 1107, 1107, 1107, 1107,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1624, 1163,
     1163, 1163, 1163, 1163, 1624, 1163, 1163, 1624, 1624, 1624,

     1163, 1163, 1163, 1163, 1163, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1624, 1175, 1175, 1175, 1175, 1175, 1624,
     1175, 1175, 1624, 1624, 1624, 1175, 1175, 1175, 1175, 1175,
     1265, 1265, 1624, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265,   93, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,

     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624
    } ;

static yyconst flex_int16_t yy_chk[11755] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    4,    7,
        8,    4,   25,   26,   27,   28,   25,   26,   27,   28,
        4,    4,   41,    4,    4,   42,   45,    4,    4,    4,

       53,   46,   54,    7,    8,  110,  111,   45,  110,  111,
      124,  124,   46,   49,   49,  575,   49,   59,   49,   59,
       45,   63,  575,    7,    8,   46,   25,   26,   27,   28,
      308,  111,   50,   50,   64,   50,   41,   50,   69,   42,
       45,   59, 1247,   70,   53,   46,   54,   60,  308,   60,
        4,    5,    5,    5,    5,    5,    5,    5,   49,    5,
        5,   59,    5,    5,    5,   63,    5,   87,    5,    5,
       51,   60,   51,    5,    5,    5,    5,   50,   64,  125,
      125,   51,   69,  129, 1248, 1249,   51,   70,  129,   57,
       57,   60,   57,   52,   51,   52,    5,    5,    5,  101,

      353,  612,   58,   58,   52,   58,   89,  338,  101,   52,
      338,   87,   88,  125,   51,   89,   89,   52,  101,   61,
      612,   61,  353,    5,    5,    5,    5,    6,    6,    6,
        6,    6,    6,    6,   57,    6,    6,   52,    6,    6,
        6,   75,    6,   61,    6,    6,   62,   58,   62,    6,
        6,    6,    6,   76,   77,  192,   88,   90,  192,  132,
      132,  132,  132,   61,  242,   75,   90,   90,  242,  192,
       62,  285,    6,    6,    6,  132,  285,   76,   77,  114,
      132,  114,  114,  114,  232,   75,  581,  232,  114,  232,
       62,  259,  260,  581, 1250,  259,  260,   76,   77,    6,

        6,    6,    6,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   13,
       13,   13,   13,   13,   13,   13,   78,   13,   13,   67,
       13,   13,   13,   81,   13,   82,   13,   13,   67,   67,
      223,   13,   13,   13,   13,   68,  339,   81, 1251,   82,
       78,  223,  649,   67,   68,   68,  339,   96,  119,  119,

       96,   83,  290,  119,   13,   13,   13,  290,  344,   68,
       78,  344,   83,   67,  649,  130,  130,   81,  130,   82,
       97,   97,   96,   97,  223,   83,  573,  119,  573,   68,
     1252,   13,   13,   13,   13,   14,   14,   14,   14,   14,
       14,   14,   96,   14,   14,   83,   14,   14,   14,  346,
       14,   84,   14,   14,  345,   91,  350,   14,   14,   14,
       14, 1253,   84,   91,  102,   97,  102,  102,  102,  102,
      650,  130,  346,  346,  346,   84,   91,   91,  102,  350,
       14,   14,   14,  345,  105,  378,  105,  105,  378,  105,
      105,  105,  120,  120,  650,   84,  105,  120,  102,   91,

       91, 1254,  383,  138,  138,  383,  138,   14,   14,   14,
       14,   15,   15,   15,   15,   15,   15,   15,  105,   15,
       15,  120,   15,   15,   15,  349,   15,  580,   15,   15,
       92,  351,  354,   15,   15,   15,   15,  107,   92,  107,
      107,  580,  107,  107,  107,  115,  349,  112,  115,  107,
      112,   92,   92,  112,  351,  354,   15,   15,   15,  138,
      115,  433,  112, 1255,  380,  380,  115,  380,  112,  349,
      247,  107,  112,  247,   92,   92,  359,  143,  143,  433,
      247,  608,  143,   15,   15,   15,   15,   16,   16,   16,
       16,   16,   16,   16,  948,   16,   16,  359,   16,   16,

       16,  948,   16,  395,   16,   16,  143,  395,  608,   16,
       16,   16,   16,  113,  113,  250,  113,  115,  250,  112,
      133,  133,  133,  133,  113,  250,  113,  113,  113,  113,
      402,  395,   16,   16,   16,  402,  133,  457,  113,  935,
      457,  133,  139,  139,  139,  139, 1256,  457, 1257,  139,
      161,  161,  161,  161, 1258,  935, 1259,  161,  113,   16,
       16,   16,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   29,   29,   29,

       29,   29,   29,   29,  633,   29,   29,  633,   29,   29,
       29,  652,   29,  404,   29,   29,  363,  644,  404,   29,
       29,   29,   29,  144,  144, 1206, 1206, 1206,  144,  134,
      134,  134,  134,  652,  386,  386,  134,  386,  121,  121,
      644,  121,   29,   29,   29,  134,  137,  137,  137,  137,
      134,  596,  144,  363,  121,  121,  596,  169,  169,  121,
      169, 1260,  137,  253,  253, 1262,  253,  137,  137,   29,
       29,   29,   29,   30,   30,   30,   30,   30,   30,   30,
      363,   30,   30,  121,   30,   30,   30,  598,   30,  150,
       30,   30,  598,  647,  121,   30,   30,   30,   30,  151,

      150,  150,  264,  134,  601,  150,  264,  150,  253,  601,
      151,  151,  264,  169,  264,  151,  647,  151,   30,   30,
       30,  155,  155,  155,  155,  170,  170,  170,  170,  150,
      952, 1265,  170,  206,  206,  206,  206,  155,  549,  151,
      206,  549,  155,  549,  952,   30,   30,   30,   30,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  427,  265,   55,  538,  427,  265,   55,   55,   55,
       55,   55,  265,  562,  265,  538,  562,  135,  135,  135,
      135,  348,  348,  562,  135,  156,  156,  156,  156,  427,
       55,   55,   55,  135,  146,  146,  617,  146,  135,  174,
      174,  156,  174,  348,  603,  348,  156,  617,  538,  603,
      146,  146, 1273,  397,  397,  146,  397,   55,   55,   55,
       55,   55,   55,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,  146,
     1274,   56,  152,  648,  655,   56,   56,   56,   56,   56,

      146,  135, 1275,  152,  152,  174,  186,  186,  152, 1278,
      152,  186,  160,  160,  160,  160,  648,  655,   56,   56,
       56, 1279,  160,  163,  163,  163,  163,  381,  160,  381,
      381,  381,  152,  160,  389,  186,  389,  389,  389,  163,
     1280, 1281, 1283,  389,  163,   56,   56,   56,   56,   56,
       56,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,  439,
       85,   85, 1284,  439, 1285,   85,   85,   85, 1286,   85,
      157,  157,  157,  157,  656,  657,  786,  157,  164,  164,

      164,  164,  168,  168,  168,  168,  157,  439,   85,   85,
       85,  157,  178,  178,  164,  178,  656,  657,  168,  164,
      786,  182,  182,  168,  182,  661,  187,  187,  661,  394,
      394,  187, 1287, 1288,  394,   85,   85,   85,   85,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,  187,   86,   86,  394, 1289,
      699,   86,   86,   86,  157,   86,  197,  197,  178,  197,
      388,  154,  154,  388,  154,  489,  154,  182,  699,  489,
      188,  188,  783,  188,   86,   86,   86,  154,  154, 1290,
      205,  205,  154,  205,  154,  388,  188,  188,  767,  211,

      211,  188,  211,  489,  783,  199,  199,  199,  199,  767,
     1291,   86,   86,   86,   86,  103,  154,  158,  158,  158,
      158,  199,  197,  787,  158,  188,  199,  154,  103,  396,
      396,  793,  564,  158,  396,  564,  188, 1292,  158,  103,
      103,  974,  564,  788,  103,  103,  205,  787,  370,  103,
      103,  370,  103,  103,  793,  211,  215,  215,  396,  215,
      664,  103,  103,  664,  974,  788,  103,  103,  406,  406,
     1293,  406,  103,  103,  103,  103,  103,  103,  104,  104,
      104,  104,  975,  165,  165,  165,  165,  104,  791,  326,
      165,  158,  326,  370,  104,  104, 1014,  104,  890,  165,

      417,  417,  417,  417,  165,  975,  166,  166,  166,  166,
      791, 1014,  215,  166,  326,  418,  418,  104,  418,  370,
      890,  104,  166,  379,  104,  104,  379,  166,  218,  218,
     1294,  218,  245,  245,  326,  245,  104, 1295,  379,  200,
      200,  200,  200,  104,  379,  104,  104,  106,  106,  106,
      106,  196,  196,  196,  196,  200,  106,  165,  196,  494,
      200,  891,  494,  106,  106,  495,  106, 1296,  495,  196,
      196,  196,  196,  494,  875,  201,  201,  201,  201,  495,
      166, 1297,  201,  891,  218,  875,  106, 1298,  245,  371,
      106,  201,  371,  106,  106,  379,  201,  106,  895, 1299,

     1300,  202,  202,  202,  202,  106,  251,  251,  202,  251,
      268,  268,  106,  268,  106,  106,  109,  202,  679,  109,
      895,  679,  202,  204,  204,  204,  204,  685,  109,  109,
      685,  109,  109, 1058,  371,  109,  109,  109, 1301,  204,
      963,  109,  329,  329,  204,  329, 1302,  272,  272,  201,
      272,  963,  226,  226,  226,  226, 1058, 1303, 1304,  371,
      371,  109,  251, 1305,  330,  330,  268,  330,  226,  226,
     1307,  226, 1308,  278,  278,  202,  278,  281,  281, 1309,
      281,  762,  352,  372,  762,  352,  372,  329,  109,  149,
      149,  226,  149,  149,  149,  149,  497,  149,  149,  497,

      149,  149,  149,  272,  149,  352,  149,  149,  352,  330,
      497,  149,  149,  149,  149,  347, 1310, 1311, 1312,  347,
      226,  705,  352,  382,  705, 1313,  382,  347,  372,  278,
      352,  705, 1314,  281,  149,  149,  149,  347,  382,  429,
      429,  347,  429,  372,  382,  352,  368, 1315,  368,  368,
      347,  368,  368,  368,  372, 1316,  374,  375,  368,  374,
      375,  149,  149,  149,  149,  227,  227,  706,  227, 1317,
      706,  227,  227,  227,  227,  442,  442,  706,  442,  369,
      368,  369,  369, 1318,  369,  369,  369,  227,  227,  373,
      227,  369,  373, 1319,  384,  382,  373,  384,  774, 1320,

      780,  374,  375,  780,  385,  385, 1321,  385, 1323,  384,
      227,  466,  466,  369,  466,  384,  374,  390,  375,  385,
      390,  227, 1330,  473,  473,  385,  473,  374,  375,  385,
     1331, 1332,  390,  373,  373,  774, 1335, 1336,  390,  227,
      327,  327,  327,  327,  478,  478,  391,  478,  680,  391,
      680,  680,  680,  399,  399, 1337,  327,  327,  399,  327,
      373,  391,  774,  426,  426, 1338,  384,  391,  426,  409,
      409,  409,  409, 1340,  483,  483,  385,  483, 1341,  327,
     1342,  651,  399,  327,  651,  409,  327,  327,  797,  390,
      409,  797,  426,  491,  491, 1343,  491,  399,  327,  410,

      410,  410,  410, 1344,  651,  327,  410,  327,  327,  328,
      328,  328,  328,  504,  504,  410,  504, 1345,  391, 1346,
      410,  413,  413,  413,  413,  328,  328, 1347,  328,  499,
      499,  499,  499,  412,  412,  412,  412,  413,  515,  515,
      412,  515,  413,  413,  414,  414,  414,  414,  328,  412,
      499,  414,  328, 1348,  412,  328,  328,  524,  524,  328,
      524,  421,  421,  421,  421, 1349,  801,  328,  421,  801,
      428,  428, 1350,  410,  328,  428,  328,  328,  342,  529,
      529,  342,  529,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342, 1351, 1352,  428,

      342,  342,  342,  342,  342,  533,  533,  412,  533, 1353,
      415,  415,  415,  415, 1354, 1355, 1356,  415,  416,  416,
      416,  416, 1357,  342,  342,  342,  415,  872,  431,  431,
      872,  415, 1358,  431,  416,  422,  422,  422,  422,  416,
      416,  898,  422, 1359,  898,  445,  445,  445,  445, 1362,
      342,  342,  342,  342,  342,  342,  360,  431,  438,  360,
     1363,  445,  360,  360,  360,  360,  445, 1364, 1365,  438,
      438,  440,  431, 1366,  438, 1367,  438,  628,  360,  360,
      628,  360,  440,  440,  415,  544,  544,  440,  544,  440,
      450,  450,  450,  450,  488,  488, 1368,  450,  438,  488,

     1369,  360,  444,  446,  446,  446,  446,  490,  490, 1370,
      446,  440,  490,  444,  444, 1371, 1372, 1373,  444,  446,
      444, 1374, 1375,  488,  446,  559,  559,  360,  559,  360,
      360,  377,  565,  565,  377,  565,  490,  628,  455,  455,
      455,  455,  444,  377,  377,  455,  377,  377,  628, 1377,
      377,  377,  377, 1384, 1385, 1386,  377,  444,  448,  448,
      448,  448, 1389,  582,  582,  448,  582, 1390,  449,  449,
      449,  449,  586,  586,  448,  586,  377,  446,  449,  448,
      451,  451,  451,  451,  449,  568,  568,  451,  568,  449,
      452,  452,  452,  452,  590,  590,  451,  590, 1391,  938,

      452,  451,  938,  377,  434,  434,  452,  434,  434,  434,
      434,  452,  434,  434, 1392,  434,  434,  434, 1394,  434,
     1035,  434,  434, 1035, 1395, 1396,  434,  434,  434,  434,
      568, 1179,  448, 1397, 1179, 1398,  454,  454,  454,  454,
      456,  456,  456,  456, 1399, 1306,  454,  456, 1306,  434,
      434,  434,  454,  744,  451, 1400,  744,  454,  463,  463,
      463,  463, 1401, 1402, 1403,  463,  458,  458,  458,  458,
      593,  593, 1361,  593, 1404, 1361,  434,  434,  434,  434,
      435,  435,  458,  435,  435,  435,  435,  458,  435,  435,
     1405,  435,  435,  435, 1406,  435, 1407,  435,  435, 1408,

     1409, 1412,  435,  435,  435,  435, 1413,  459,  459,  459,
      459, 1414, 1415,  744,  459,  461,  461,  461,  461,  493,
      493, 1416,  461,  459,  493,  435,  435,  435,  459, 1417,
     1418,  461,  469,  469,  469,  469,  461, 1419, 1420,  469,
      462,  462,  462,  462,  464,  464,  464,  464,  493, 1421,
     1422,  464,  435,  435,  435,  435,  462, 1423, 1424,  900,
      464,  462,  900,  493, 1425,  464,  465,  465,  465,  465,
      470,  470,  470,  470, 1427, 1410,  653,  470, 1410,  653,
     1433,  459,  465,  498,  498,  498,  498,  465, 1434,  461,
      498,  501,  501,  501,  501, 1435, 1438, 1429,  501,  653,

     1429,  498,  498,  498,  498,  507,  507,  507,  507,  501,
      501,  501,  501,  503,  503,  503,  503, 1439,  464,  900,
      503,  507,  508,  508,  508,  508,  507, 1440, 1441,  508,
      900,  503,  503,  503,  503, 1443, 1444, 1445,  508,  510,
      510,  510,  510,  508, 1446, 1447,  510,  511,  511,  511,
      511,  512,  512,  512,  512,  510,  666, 1448,  512,  666,
      510, 1449, 1450,  511,  513,  513,  513,  513,  511, 1451,
     1452,  513,  514,  514,  514,  514,  518,  518,  518,  518,
      513,  686,  686,  518, 1453,  513,  686,  662,  514,  667,
      662, 1454,  667,  514,  662, 1455,  508,  519,  519,  519,

      519, 1456,  775,  671,  519,  775,  671,  687,  687, 1457,
      686, 1459,  687,  510,  692,  692,  692,  692,  666, 1458,
      678,  678, 1458,  678, 1460,  674,  675,  666,  674,  675,
      676,  662, 1461,  676, 1462,  678,  687,  692,  513,  638,
      667,  678,  638, 1463,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  662, 1464,
      667,  638,  638,  638,  638,  638,  671,  775, 1465, 1466,
      674,  675, 1467,  775,  671,  676,  677,  675, 1468,  677,
     1138, 1469, 1470, 1138,  638,  638,  638,  674,  681,  681,
      802,  681,  678,  802, 1471,  676,  674,  675, 1138, 1138,

     1138,  676, 1472,  681, 1474,  688,  688, 1479, 1480,  681,
      688,  638,  638,  638,  638,  638,  638,  670,  670, 1481,
      670,  677,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670, 1484,  670,  688,  670, 1485, 1486,  802,  677,
      670,  670,  670,  670,  696,  696, 1487,  677, 1489,  696,
      683,  683, 1490,  683,  688,  684,  684, 1491,  684, 1492,
      681,  802,  670,  670,  670,  683, 1493,  697,  697, 1494,
      684,  683,  697,  696, 1495,  683,  684,  693,  693,  693,
      693,  698,  698, 1496,  790,  792,  698,  790,  792,  670,
      670,  670,  670,  670,  670, 1497,  697,  712,  712, 1498,

      693,  701,  712, 1499,  713,  713, 1500,  790,  792,  713,
      698, 1501,  701,  701, 1502, 1503, 1505,  701,  880,  701,
     1506,  880,  683,  714,  714, 1507,  712,  684,  714, 1508,
      698,  700,  700,  713,  700,  700,  700,  700, 1509,  700,
      700,  701,  700,  700,  700, 1510,  700,  702,  700,  700,
      703, 1511,  714,  700,  700,  700,  700, 1504,  702,  702,
     1504,  703,  703,  702,  810,  702,  703,  810,  703,  779,
      880,  779,  714,  779,  779, 1512,  700,  700,  700,  715,
      715,  715,  715,  779, 1513,  803,  715,  702,  803,  880,
      703, 1514,  818,  818,  818,  818, 1515,  715,  715,  715,

      715, 1516, 1517,  700,  700,  700,  700, 1519, 1524,  810,
      703,  716,  716,  716,  716,  818,  810, 1525,  716,  717,
      717,  717,  717, 1526, 1529, 1530,  717,  718,  718,  718,
      718, 1531,  716, 1532,  718,  810, 1534,  717,  717,  717,
      717,  803, 1535, 1536, 1537,  718,  718,  718,  718,  806,
      808,  809,  806,  808,  809, 1538,  803,  805,  805, 1539,
      805, 1540,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805, 1541,  805,  811,  805,  902,  811, 1542,  902,
      805,  805,  805,  805,  812,  812,  892,  812, 1543,  892,
     1544,  813,  813, 1545,  813,  808,  809, 1546,  808,  812,

     1547, 1549,  805,  805,  805,  812,  813,  809, 1550,  892,
     1551,  884,  813,  884,  806,  884,  884, 1552, 1553,  811,
      806,  808,  809,  814,  814,  884,  814, 1554, 1555,  805,
      805,  805,  805,  805,  805,  815,  815, 1556,  814,  811,
      815,  822,  822,  825,  814,  811,  822,  902,  814,  820,
      820,  820,  820, 1557,  825,  825,  812,  831,  831,  825,
     1558,  825,  831,  813,  815, 1559,  835,  835,  835,  835,
      822,  815,  820,  835, 1560,  893, 1561,  822,  893,  903,
     1563, 1605,  903,  825, 1605, 1607,  831,  835,  899,  976,
      825,  899,  976,  831, 1246,  814,  823,  823,  893,  823,

      823,  823,  823,  967,  823,  823,  967,  823,  823,  823,
     1611,  823,  976,  823,  823, 1609, 1244, 1611,  823,  823,
      823,  823,  982, 1613, 1243,  982,  833,  833,  833,  833,
     1609,  979, 1242,  833,  979,  903, 1608,  904, 1613, 1608,
      904,  823,  823,  823,  833,  833,  833,  833,  848,  848,
      903, 1618,  899,  848,  979,  905,  848,  848,  905,  899,
      985,  848, 1618,  985,  848,  848,  967,  848,  823,  823,
      823,  823,  824,  824,  967,  824,  824,  824,  824, 1610,
      824,  824,  904,  824,  824,  824,  982,  824,  906,  824,
      824,  906, 1241,  982,  824,  824,  824,  824, 1240, 1610,

      905,  904,  834,  834,  834,  834, 1239,  907,  904,  834,
      907,  985, 1238,  908,  908,  905,  908,  824,  824,  824,
      834,  834,  834,  834,  909,  909,  905,  983,  908,  909,
      983,  985, 1612,  906,  908,  913,  913,  919,  919, 1621,
      913, 1615,  919, 1621,  824,  824,  824,  824, 1237,  914,
     1612,  906,  907,  909, 1615,  920,  920,  920,  920,  906,
      914,  914,  920,  907,  913,  914,  919,  914, 1616,  986,
     1616,  909,  986,  920,  920,  920,  920,  987,  907, 1236,
      987, 1617,  913,  988,  919,  908,  988,  989, 1060,  914,
      989, 1060,  983, 1235, 1617,  990,  990,  995,  983, 1234,

      990,  994,  994, 1622, 1233, 1620,  994,  914,  995,  995,
     1619, 1060, 1620,  995,  986,  995, 1232, 1053, 1000, 1000,
     1053, 1622,  987, 1000,  990, 1619, 1614, 1231,  988, 1614,
      994, 1063,  989,  986, 1063, 1230, 1229,  995,  989,  990,
      986, 1064,  987,  988, 1064,  994, 1065, 1000,  987, 1065,
     1066, 1228,  995, 1066,  988, 1227, 1067, 1267,  989, 1067,
     1267, 1226, 1000, 1001, 1001, 1001, 1001, 1225, 1224, 1223,
     1001, 1002, 1002, 1002, 1002, 1070, 1070, 1053, 1002, 1222,
     1070, 1001, 1001, 1001, 1001, 1221, 1219, 1218, 1053, 1002,
     1002, 1002, 1002, 1064, 1217, 1066, 1068, 1063, 1216, 1068,

     1069, 1067, 1063, 1069, 1070, 1074, 1074, 1070, 1067, 1213,
     1074, 1212, 1064, 1075, 1080, 1080, 1066, 1065, 1267, 1080,
     1128, 1066, 1211, 1128, 1075, 1075, 1199, 1067, 1267, 1075,
     1136, 1075, 1133, 1136, 1074, 1133, 1137, 1074, 1198, 1137,
     1196, 1068, 1194, 1080, 1068, 1069, 1080, 1140, 1139, 1200,
     1140, 1139, 1200, 1075, 1193, 1133, 1075, 1141, 1142, 1142,
     1141, 1192, 1195, 1142, 1147, 1195, 1191, 1068, 1128, 1146,
     1146, 1069, 1200, 1190, 1146, 1147, 1147, 1189, 1204, 1188,
     1147, 1204, 1147, 1152, 1152, 1187, 1205, 1142, 1152, 1205,
     1136, 1128, 1140, 1139, 1207, 1186, 1185, 1207, 1146, 1137,

     1142, 1136, 1141, 1208, 1147, 1184, 1208, 1137, 1139, 1183,
     1140, 1146, 1152, 1209, 1182, 1141, 1209, 1147, 1140, 1139,
     1195, 1210, 1210, 1181, 1266, 1152, 1210, 1266, 1141, 1204,
     1214, 1214, 1180, 1195, 1261, 1214, 1178, 1261, 1268, 1207,
     1269, 1268, 1177, 1269, 1176, 1207, 1205, 1266, 1208, 1204,
     1210, 1270, 1210, 1174, 1270, 1215, 1173, 1205, 1209, 1214,
     1209, 1214, 1172, 1208, 1171, 1207, 1215, 1215, 1170, 1271,
     1169, 1215, 1271, 1215, 1208, 1220, 1220, 1168, 1272, 1272,
     1220, 1261, 1167, 1272, 1209, 1269, 1268, 1276, 1276, 1282,
     1282, 1166, 1276, 1165, 1282, 1215, 1270, 1215, 1164, 1270,

     1322, 1269, 1162, 1322, 1220, 1261, 1220, 1272, 1161, 1268,
     1324, 1269, 1277, 1324, 1271, 1160, 1276, 1159, 1282, 1158,
     1272, 1157, 1270, 1277, 1277, 1156, 1155, 1271, 1277, 1276,
     1277, 1282, 1325, 1326, 1327, 1325, 1326, 1327, 1154, 1328,
     1271, 1376, 1328, 1153, 1376, 1329, 1329, 1151, 1333, 1333,
     1329, 1334, 1277, 1333, 1379, 1150, 1378, 1379, 1322, 1378,
     1324, 1380, 1334, 1334, 1380, 1277, 1149, 1334, 1148, 1334,
     1381, 1322, 1428, 1381, 1329, 1428, 1145, 1333, 1326, 1327,
     1144, 1324, 1143, 1326, 1328, 1329, 1382, 1135, 1333, 1382,
     1325, 1334, 1327, 1339, 1339, 1328, 1473, 1376, 1339, 1473,

     1134, 1132, 1334, 1325, 1326, 1327, 1380, 1131, 1383, 1383,
     1328, 1426, 1376, 1383, 1426, 1381, 1387, 1387, 1393, 1393,
     1428, 1387, 1339, 1393, 1378, 1379, 1130, 1378, 1129, 1380,
     1127, 1382, 1380, 1339, 1126, 1125, 1430, 1383, 1388, 1430,
     1124, 1381, 1123, 1428, 1122, 1387, 1382, 1393, 1473, 1388,
     1388, 1121, 1383, 1120, 1388, 1119, 1388, 1382, 1431, 1118,
     1387, 1431, 1393, 1432, 1432, 1436, 1436, 1473, 1432, 1475,
     1436, 1426, 1475, 1117, 1116, 1442, 1442, 1115, 1388, 1437,
     1442, 1430, 1426, 1476, 1430, 1477, 1476, 1114, 1477, 1113,
     1437, 1437, 1432, 1388, 1436, 1437, 1112, 1437, 1111, 1432,

     1109, 1436, 1520, 1431, 1442, 1520, 1108, 1430, 1478, 1478,
     1431, 1442, 1104, 1478, 1518, 1482, 1482, 1518, 1103, 1437,
     1482, 1521, 1102, 1101, 1521, 1100, 1437, 1483, 1476, 1431,
     1477, 1099, 1475, 1522, 1477, 1098, 1522, 1478, 1483, 1483,
     1475, 1478, 1096, 1483, 1482, 1483, 1476, 1095, 1482, 1562,
     1488, 1488, 1562, 1094, 1476, 1488, 1477, 1093, 1564, 1523,
     1523, 1564, 1520, 1518, 1523, 1091, 1521, 1483, 1090, 1527,
     1527, 1483, 1089, 1520, 1527, 1528, 1088, 1565, 1522, 1488,
     1565, 1521, 1087, 1488, 1086, 1518, 1528, 1528, 1523, 1533,
     1533, 1528, 1521, 1528, 1533, 1085, 1522, 1084, 1527, 1566,

     1566, 1083, 1566, 1082, 1522, 1081, 1523, 1604, 1567, 1567,
     1604, 1079, 1562, 1567, 1572, 1528, 1527, 1078, 1533, 1077,
     1562, 1076, 1565, 1571, 1571, 1572, 1572, 1073, 1571, 1564,
     1572, 1072, 1572, 1528, 1577, 1577, 1533, 1567, 1071, 1577,
     1606, 1606, 1062, 1606, 1566, 1061, 1623, 1623, 1565, 1623,
     1059, 1057, 1571, 1056, 1572, 1661, 1055, 1054, 1661, 1661,
     1661, 1052, 1051, 1577, 1681, 1661, 1050, 1681, 1681, 1681,
     1566, 1049, 1683, 1048, 1681, 1683, 1683, 1683, 1604, 1047,
     1046, 1045, 1683, 1806, 1044, 1606, 1806, 1806, 1806, 1043,
     1042, 1623, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,

     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1628, 1628, 1628,

     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628, 1628, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1630, 1630, 1630,
     1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
     1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
     1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,

     1630, 1630, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,

     1633, 1633, 1633, 1633, 1633, 1633, 1633, 1634, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
     1634, 1634, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1636, 1636, 1636,
     1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636,
     1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636,

     1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636,
     1636, 1636, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
     1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
     1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
     1641, 1641, 1641, 1641, 1641, 1641, 1641, 1642, 1642, 1642,
     1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642,

     1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642,
     1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642,
     1642, 1642, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,

     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1648, 1648, 1648,

     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,

     1650, 1650, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1652, 1652, 1041,
     1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
     1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
     1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
     1652, 1652, 1653, 1688, 1040, 1039, 1688, 1688, 1688, 1038,
     1037, 1703, 1036, 1688, 1703, 1703, 1703, 1034, 1032, 1653,
     1029, 1703, 1653, 1653, 1653, 1027, 1026, 1025, 1024, 1653,

     1654, 1023, 1654, 1654, 1723, 1654, 1022, 1723, 1723, 1723,
     1654, 1654, 1021, 1723, 1654, 1654, 1654, 1655, 1020, 1655,
     1655, 1655, 1655, 1810, 1655, 1019, 1810, 1810, 1810, 1655,
     1655, 1655, 1018, 1655, 1655, 1655, 1656, 1656, 1656, 1656,
     1017, 1016, 1015, 1847, 1013, 1656, 1847, 1847, 1847, 1012,
     1656, 1656, 1011, 1656, 1656, 1656, 1010, 1656, 1656, 1656,
     1656, 1009, 1656, 1656, 1657, 1008, 1657, 1657, 1877, 1657,
     1007, 1877, 1877, 1877, 1657, 1657, 1005, 1004, 1657, 1657,
     1657, 1658, 1658, 1658, 1658, 1003,  999,  998, 1851, 1851,
     1658, 1851, 1851, 1851,  997, 1658, 1658,  996, 1658, 1658,

     1658,  993, 1658, 1658, 1658, 1658,  992, 1658, 1658, 1659,
     1659,  991, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 1659, 1659, 1659, 1660,  981,  980, 1660,  978,  973,
      972, 1660,  970, 1660, 1660, 1660, 1660, 1660,  969,  968,
      966, 1660, 1660, 1660,  965, 1660, 1660, 1660,  964, 1791,
      962,  961, 1660, 1662,  960, 1662, 1662,  959, 1791,  958,
      957, 1662, 1791, 1791, 1662, 1662, 1662,  956,  955,  954,
      953, 1662, 1663, 1663, 1663, 1663, 1705,  951, 1663, 1705,

     1705, 1705,  950, 1838,  949,  947, 1705, 1663,  946,  945,
     1663,  944, 1838,  943,  942, 1663, 1838, 1838, 1663, 1663,
     1663,  941,  940,  939, 1663, 1663, 1664, 1664, 1664, 1664,
     1718,  937,  936, 1718, 1718, 1718,  934,  933,  932,  931,
     1718, 1664,  930, 1664, 1664, 1664,  929,  928,  927, 1664,
      926,  925, 1664, 1664, 1664, 1724,  924,  923,  922, 1664,
     1665, 1665, 1665, 1665, 1724,  921, 1665, 1724, 1724, 1724,
     1761,  918,  917, 1761, 1761, 1761,  916,  915,  912,  911,
     1761,  910,  901, 1665,  897,  896, 1665, 1665, 1665,  889,
      888,  887,  886, 1665, 1666, 1666,  883, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1667,
      881,  879, 1667,  878,  877,  876, 1667,  874, 1667, 1667,
     1667, 1667, 1667,  873,  871,  870, 1667, 1667, 1667,  869,
     1667, 1667, 1667,  868,  867,  866,  865, 1667, 1668, 1668,
      864, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1669, 1669,  863,  862, 1669,  861,  860,

      858, 1669,  857, 1669, 1669, 1669, 1669, 1669,  856, 1669,
      854, 1669, 1669, 1669,  853, 1669, 1669, 1669, 1809,  852,
      851,  850, 1669, 1670, 1670, 1670, 1670, 1809,  849, 1670,
     1809, 1809, 1809,  847,  846,  845,  843,  842, 1670,  841,
      840, 1670,  839,  838,  837,  836, 1670,  830,  829, 1670,
     1670, 1670,  828,  827,  821, 1670, 1670, 1671, 1671, 1671,
     1671,  817,  816,  807,  804,  800, 1671,  795,  794,  789,
      785,  784, 1671,  782, 1671, 1671,  777,  776,  772,  771,
     1671,  770,  769, 1671, 1671, 1671,  765,  763,  761,  760,
     1671, 1672, 1672, 1672, 1672, 1814,  756, 1672, 1814, 1814,

     1814,  754,  752, 1831,  751, 1814, 1831, 1831, 1831,  750,
      749,  748,  747, 1831, 1672,  746,  745, 1672, 1672, 1672,
      743,  742,  741,  740, 1672, 1673, 1673, 1673, 1673, 1833,
      739, 1673, 1833, 1833, 1833,  738,  737,  736,  735, 1833,
     1673,  734,  733, 1673,  732,  731,  728,  727, 1673,  726,
      725, 1673, 1673, 1673,  724,  723,  720, 1673, 1673, 1674,
     1674, 1674, 1674, 1836,  719,  711, 1836, 1836, 1836,  710,
      709,  707,  704, 1836, 1674,  695, 1674, 1674,  694,  691,
      689,  665, 1674,  660,  659, 1674, 1674, 1674,  658,  646,
      645,  643, 1674, 1675, 1675, 1675, 1675, 1837,  642, 1675,

     1837, 1837, 1837,  640,  639, 1860,  637, 1837, 1860, 1860,
     1860,  634,  632,  630,  629, 1860, 1675,  627,  626, 1675,
     1675, 1675,  625,  622,  620,  618, 1675, 1676,  616,  613,
     1676,  610,  607,  605,  604,  602, 1676,  600,  599, 1676,
     1676, 1676,  597,  595,  592,  588, 1676, 1677, 1677,  584,
     1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677,
     1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677,
     1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677,
     1677, 1677, 1678, 1678,  579, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,

     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1679, 1679,  578,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1680,  577,  574, 1680,  571,  570,  567, 1680,
      561, 1680, 1680, 1680, 1680, 1680,  558,  557,  553, 1680,
     1680, 1680,  551, 1680, 1680, 1680,  550,  548,  546,  543,
     1680, 1682,  541,  540, 1682,  537,  535,  531,  528,  527,
      526,  523,  522,  521, 1682,  517,  509,  506, 1682,  502,

      486,  485,  481,  480, 1682,  476,  475, 1682, 1682, 1682,
      468,  460,  447,  441, 1682, 1684, 1684, 1684, 1684,  436,
      432, 1684,  424,  423,  420,  411,  408,  405,  403,  401,
      392,  376, 1684, 1684,  364,  362,  361,  358, 1684,  356,
      355, 1684, 1684, 1684,  343,  336,  335,  332, 1684, 1685,
     1685, 1685, 1685,  331,  325, 1685,  324,  316,  313,  312,
      307,  303,  302,  299, 1685,  295,  294, 1685,  291,  286,
      255,  241, 1685,  240,  239, 1685, 1685, 1685,  235,  234,
      230, 1685, 1685, 1686, 1686, 1686, 1686,  225,  222,  214,
      210,  203,  185,  181,  177,  167,  159,  145, 1686,  142,

     1686, 1686,  136,  118,  108,  100, 1686,   99,   98, 1686,
     1686, 1686,   93,    0,    0,    0, 1686, 1687, 1687, 1687,
     1687,    0,    0, 1687,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1687,    0,    0, 1687, 1687, 1687,    0,    0,    0,    0,
     1687, 1689,    0, 1689,    0,    0,    0,    0,    0, 1689,
        0,    0, 1689, 1689, 1689,    0,    0,    0,    0, 1689,
     1690, 1690,    0, 1690,    0,    0,    0,    0,    0, 1690,
        0,    0, 1690, 1690, 1690,    0,    0,    0,    0, 1690,
     1691, 1691,    0, 1691, 1691, 1691, 1691, 1691, 1691, 1691,

     1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1691, 1691, 1691, 1691, 1691,    0, 1691, 1691, 1691, 1691,
     1691, 1691, 1691, 1691, 1691, 1692,    0,    0, 1692,    0,
        0,    0,    0,    0, 1692,    0,    0, 1692, 1692, 1692,
        0,    0,    0,    0, 1692, 1693, 1693, 1693, 1693, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,    0, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
     1694, 1694,    0, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,

     1694, 1694, 1694,    0, 1694, 1694, 1694, 1694, 1694, 1694,
     1694, 1694, 1694, 1694, 1694, 1695,    0,    0, 1695,    0,
        0,    0,    0,    0, 1695,    0,    0, 1695, 1695, 1695,
        0,    0,    0,    0, 1695, 1696, 1696,    0, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1697, 1697,    0, 1697,    0, 1697, 1697, 1697, 1697, 1697,
     1697, 1697,    0, 1697, 1697, 1697, 1697,    0, 1697, 1697,
     1697, 1697, 1697,    0, 1697,    0, 1697, 1697, 1697, 1697,

     1697, 1697, 1697, 1697, 1697, 1698,    0,    0, 1698,    0,
        0,    0,    0,    0, 1698,    0,    0,    0,    0, 1698,
     1698,    0, 1698,    0,    0,    0,    0,    0, 1698,    0,
        0, 1698, 1698, 1698, 1699, 1699,    0, 1699,    0, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699,    0, 1699,    0,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1700,
     1700,    0, 1700,    0, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700,    0, 1700,    0, 1700, 1700, 1700, 1700, 1700,

     1700, 1700, 1700, 1700, 1701,    0,    0, 1701,    0,    0,
        0,    0,    0, 1701,    0,    0, 1701, 1701, 1701,    0,
        0,    0,    0, 1701, 1702, 1702,    0, 1702, 1702, 1702,
     1702, 1702, 1702, 1702,    0,    0, 1702, 1702, 1702, 1702,
     1702, 1702, 1702, 1702, 1702, 1702, 1702,    0, 1702,    0,
     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1704,
        0, 1704, 1704,    0,    0,    0,    0, 1704,    0,    0,
     1704, 1704, 1704,    0,    0,    0,    0, 1704, 1706,    0,
     1706, 1706,    0,    0,    0,    0, 1706,    0,    0, 1706,
     1706, 1706,    0,    0,    0,    0, 1706, 1707, 1707,    0,

     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
        0, 1707,    0, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1707, 1708,    0,    0, 1708,    0,    0,    0,    0,
        0, 1708,    0,    0, 1708, 1708, 1708,    0,    0,    0,
        0, 1708, 1709, 1709,    0, 1709, 1709, 1709, 1709, 1709,
     1709, 1709, 1709, 1709, 1709, 1709, 1709,    0, 1709, 1709,
     1709, 1709, 1709, 1709, 1709, 1709, 1709,    0, 1709, 1709,
     1709, 1709, 1709, 1709, 1709, 1709, 1709, 1710, 1710,    0,
     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,    0,

     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
        0, 1710,    0, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1711,    0,    0, 1711,    0,    0,    0, 1711,
        0, 1711,    0,    0, 1711, 1711, 1711,    0,    0,    0,
        0, 1711, 1712,    0, 1712, 1712, 1712, 1712, 1712,    0,
        0, 1712,    0, 1712,    0,    0, 1712, 1712, 1712,    0,
        0,    0,    0, 1712, 1713, 1713,    0, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,    0,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1714,

     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,    0,
        0, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1715, 1715,    0, 1715, 1715, 1715,
     1715, 1715, 1715,    0, 1715, 1715, 1715, 1715, 1715, 1715,
     1715, 1715, 1715, 1715,    0,    0, 1715, 1715, 1715,    0,
        0, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1716,
     1716, 1716, 1716,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1716, 1716,    0, 1716, 1716, 1716,    0,
     1716, 1716, 1716, 1716,    0, 1716, 1716, 1717, 1717,    0,

     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1719, 1719,    0,    0,    0,    0, 1719,    0,
        0, 1719, 1719, 1719,    0,    0,    0,    0, 1719, 1720,
        0, 1720, 1720,    0, 1720,    0,    0,    0,    0, 1720,
     1720,    0,    0, 1720, 1720, 1720, 1721,    0,    0, 1721,
        0,    0,    0,    0,    0, 1721,    0,    0, 1721, 1721,
     1721, 1722,    0,    0, 1722,    0, 1722, 1722, 1722, 1722,
     1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722,

     1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722,
     1722, 1722, 1722, 1722, 1722, 1722, 1725,    0, 1725, 1725,
        0, 1725,    0,    0,    0,    0, 1725, 1725,    0,    0,
     1725, 1725, 1725, 1726,    0,    0, 1726,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1726, 1726,    0, 1726,
     1726, 1726, 1726, 1727, 1727,    0, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1728,    0,

        0, 1728,    0,    0,    0, 1728,    0, 1728, 1728, 1728,
     1728, 1728,    0,    0,    0, 1728, 1728, 1728,    0, 1728,
     1728, 1728,    0,    0,    0,    0, 1728, 1729,    0,    0,
     1729,    0,    0,    0, 1729,    0, 1729,    0, 1729, 1729,
     1729,    0,    0,    0, 1729, 1729, 1729,    0, 1729, 1729,
     1729,    0,    0,    0,    0, 1729, 1730,    0, 1730, 1730,
        0,    0,    0,    0, 1730,    0,    0, 1730, 1730, 1730,
        0,    0,    0,    0, 1730, 1731,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1731,    0,    0, 1731, 1731, 1731,    0,    0,

        0,    0, 1731, 1732, 1732, 1732, 1732,    0,    0, 1732,
        0,    0,    0,    0,    0,    0,    0,    0, 1732,    0,
        0, 1732,    0,    0,    0,    0, 1732,    0,    0, 1732,
     1732, 1732,    0,    0,    0, 1732, 1732, 1733, 1733, 1733,
     1733,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1733,    0, 1733, 1733, 1733,    0,    0,    0,
     1733,    0,    0, 1733, 1733, 1733,    0,    0,    0,    0,
     1733, 1734, 1734, 1734, 1734,    0,    0, 1734,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1734,    0,    0, 1734, 1734, 1734,

        0,    0,    0,    0, 1734, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735,    0, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1736,    0, 1736,    0,    0,    0, 1736,    0,    0, 1736,
     1736, 1736,    0,    0,    0,    0, 1736, 1737, 1737,    0,
     1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737,
     1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737,
     1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737,
     1737, 1737, 1738,    0,    0, 1738,    0,    0,    0, 1738,

        0, 1738, 1738, 1738, 1738, 1738,    0,    0,    0, 1738,
     1738, 1738,    0, 1738, 1738, 1738,    0,    0,    0,    0,
     1738, 1739,    0,    0, 1739,    0,    0,    0, 1739,    0,
     1739,    0, 1739, 1739, 1739,    0,    0,    0, 1739, 1739,
     1739,    0, 1739, 1739, 1739,    0,    0,    0,    0, 1739,
     1740, 1740,    0, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1741, 1741,    0, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,

     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1742, 1742,    0,    0, 1742,    0,    0,    0, 1742,    0,
     1742, 1742, 1742, 1742, 1742,    0, 1742,    0, 1742, 1742,
     1742,    0, 1742, 1742, 1742,    0,    0,    0,    0, 1742,
     1743,    0,    0, 1743,    0,    0,    0, 1743,    0, 1743,
        0, 1743, 1743, 1743,    0,    0,    0, 1743, 1743, 1743,
        0, 1743, 1743, 1743,    0,    0,    0,    0, 1743, 1744,
     1744, 1744, 1744,    0,    0, 1744,    0,    0,    0,    0,
        0,    0,    0,    0, 1744,    0,    0, 1744,    0,    0,

        0,    0, 1744,    0,    0, 1744, 1744, 1744,    0,    0,
        0, 1744, 1744, 1745, 1745, 1745, 1745,    0,    0,    0,
        0,    0, 1745,    0,    0,    0,    0,    0, 1745,    0,
     1745, 1745,    0,    0,    0,    0, 1745,    0,    0, 1745,
     1745, 1745,    0,    0,    0,    0, 1745, 1746, 1746, 1746,
     1746,    0,    0, 1746,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1746,    0,    0, 1746, 1746, 1746,    0,    0,    0,    0,
     1746, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747,    0, 1747, 1747, 1747, 1747, 1747, 1747, 1747,

     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1748,    0,    0, 1748,
        0,    0,    0,    0,    0, 1748,    0,    0,    0,    0,
        0,    0,    0, 1748,    0,    0,    0,    0,    0, 1748,
        0,    0, 1748, 1748, 1748,    0,    0,    0,    0, 1748,
     1749, 1749, 1749, 1749,    0,    0, 1749,    0,    0,    0,
        0,    0,    0,    0,    0, 1749,    0,    0, 1749,    0,
        0,    0,    0, 1749,    0,    0, 1749, 1749, 1749,    0,
        0,    0, 1749, 1749, 1750, 1750, 1750, 1750,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1750,

        0, 1750, 1750,    0,    0,    0,    0, 1750,    0,    0,
     1750, 1750, 1750,    0,    0,    0,    0, 1750, 1751, 1751,
     1751, 1751,    0,    0, 1751,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1751,    0,    0, 1751, 1751, 1751,    0,    0,    0,
        0, 1751, 1752,    0,    0,    0,    0,    0, 1752,    0,
        0, 1752, 1752, 1752,    0,    0,    0,    0, 1752, 1753,
        0,    0, 1753,    0,    0,    0,    0,    0, 1753,    0,
        0, 1753, 1753, 1753,    0,    0,    0,    0, 1753, 1754,
     1754,    0, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,

     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1755, 1755,    0, 1755, 1755, 1755,
     1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1756,
     1756,    0, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1757,    0,    0, 1757,    0,    0,

        0, 1757,    0, 1757, 1757, 1757, 1757, 1757,    0,    0,
        0, 1757, 1757, 1757,    0, 1757, 1757, 1757,    0,    0,
        0,    0, 1757, 1758,    0,    0, 1758,    0,    0,    0,
     1758,    0, 1758,    0, 1758, 1758, 1758,    0,    0,    0,
     1758, 1758, 1758,    0, 1758, 1758, 1758,    0,    0,    0,
        0, 1758, 1759,    0,    0, 1759,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1759,    0,    0,    0, 1759,
        0,    0,    0,    0,    0, 1759,    0,    0, 1759, 1759,
     1759,    0,    0,    0,    0, 1759, 1760, 1760, 1760, 1760,
        0,    0, 1760,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1760, 1760,    0,    0,    0,    0, 1760,
        0,    0, 1760, 1760, 1760,    0,    0,    0,    0, 1760,
     1762, 1762, 1762, 1762,    0,    0, 1762,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1762, 1762,    0,
        0,    0,    0, 1762,    0,    0, 1762, 1762, 1762,    0,
        0,    0,    0, 1762, 1763, 1763, 1763, 1763,    0,    0,
     1763,    0,    0,    0,    0,    0,    0,    0,    0, 1763,
        0,    0, 1763,    0,    0,    0,    0, 1763,    0,    0,
     1763, 1763, 1763,    0,    0,    0, 1763, 1763, 1764, 1764,
     1764, 1764,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1764,    0, 1764, 1764,    0,    0,    0,
        0, 1764,    0,    0, 1764, 1764, 1764,    0,    0,    0,
        0, 1764, 1765, 1765, 1765, 1765,    0,    0, 1765,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1765,    0,    0, 1765, 1765,
     1765,    0,    0,    0,    0, 1765, 1766,    0,    0,    0,
        0,    0, 1766,    0,    0, 1766, 1766, 1766,    0,    0,
        0,    0, 1766, 1767,    0, 1767,    0,    0,    0,    0,
        0, 1767,    0,    0, 1767, 1767, 1767,    0,    0,    0,
        0, 1767, 1768,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1768,
        0,    0, 1768, 1768, 1768,    0,    0,    0,    0, 1768,
     1769, 1769,    0, 1769,    0,    0,    0,    0,    0, 1769,
        0,    0, 1769, 1769, 1769,    0,    0,    0,    0, 1769,
     1770, 1770,    0, 1770, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1770,    0, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1770, 1771,    0,    0, 1771,    0,
        0,    0,    0,    0, 1771,    0,    0, 1771, 1771, 1771,
        0,    0,    0,    0, 1771, 1772, 1772, 1772, 1772, 1772,

     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772,    0, 1772,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772,
     1773, 1773,    0, 1773, 1773, 1773, 1773, 1773, 1773, 1773,
     1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773,
     1773, 1773, 1773,    0, 1773, 1773, 1773, 1773, 1773, 1773,
     1773, 1773, 1773, 1773, 1773, 1774,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1774,    0,    0, 1774, 1774, 1774,    0,    0,
        0,    0, 1774, 1775,    0,    0, 1775,    0,    0,    0,

        0,    0, 1775,    0,    0, 1775, 1775, 1775,    0,    0,
        0,    0, 1775, 1776, 1776,    0, 1776, 1776, 1776, 1776,
     1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776,
     1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776,
     1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1777, 1777,
        0, 1777,    0, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
        0, 1777, 1777, 1777, 1777,    0, 1777, 1777, 1777, 1777,
     1777,    0, 1777,    0, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1778,    0,    0, 1778,    0,    0,    0,
        0,    0, 1778,    0,    0,    0,    0, 1778, 1778,    0,

     1778,    0,    0,    0,    0,    0, 1778,    0,    0, 1778,
     1778, 1778, 1779, 1779,    0, 1779,    0, 1779, 1779, 1779,
     1779, 1779, 1779, 1779, 1779, 1779, 1779, 1779, 1779, 1779,
     1779, 1779, 1779, 1779, 1779,    0, 1779,    0, 1779, 1779,
     1779, 1779, 1779, 1779, 1779, 1779, 1779, 1780, 1780,    0,
     1780,    0, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
        0, 1780,    0, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1781,    0,    0, 1781,    0,    0,    0,    0,
        0, 1781,    0,    0, 1781, 1781, 1781,    0,    0,    0,

        0, 1781, 1782, 1782,    0, 1782, 1782, 1782, 1782, 1782,
     1782, 1782,    0,    0, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782,    0, 1782,    0, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1783,    0, 1783,
     1783,    0,    0,    0,    0, 1783,    0,    0, 1783, 1783,
     1783,    0,    0,    0,    0, 1783, 1784,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1784,    0,    0, 1784, 1784, 1784,    0,
        0,    0,    0, 1784, 1785,    0, 1785, 1785,    0,    0,
        0,    0, 1785,    0,    0, 1785, 1785, 1785,    0,    0,

        0,    0, 1785, 1786,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1786,    0,    0, 1786, 1786, 1786,    0,    0,    0,    0,
     1786, 1787, 1787,    0, 1787, 1787, 1787, 1787, 1787, 1787,
     1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787,
     1787, 1787, 1787, 1787,    0, 1787,    0, 1787, 1787, 1787,
     1787, 1787, 1787, 1787, 1787, 1787, 1788,    0,    0, 1788,
        0,    0,    0,    0,    0, 1788,    0,    0, 1788, 1788,
     1788,    0,    0,    0,    0, 1788, 1789, 1789,    0, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789,    0, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789,    0, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1790, 1790,    0, 1790, 1790, 1790, 1790, 1790, 1790,
     1790, 1790, 1790,    0, 1790, 1790, 1790, 1790, 1790, 1790,
     1790, 1790, 1790, 1790,    0, 1790,    0, 1790, 1790, 1790,
     1790, 1790, 1790, 1790, 1790, 1790, 1792,    0,    0,    0,
        0,    0,    0,    0, 1792,    0, 1792, 1792, 1792, 1792,
     1792,    0,    0, 1792,    0, 1792,    0,    0, 1792, 1792,
     1792,    0,    0,    0,    0, 1792, 1793,    0, 1793, 1793,
     1793, 1793, 1793,    0,    0, 1793,    0, 1793,    0,    0,

     1793, 1793, 1793,    0,    0,    0,    0, 1793, 1794,    0,
        0, 1794,    0,    0,    0, 1794,    0, 1794,    0,    0,
     1794, 1794, 1794,    0,    0,    0,    0, 1794, 1795, 1795,
        0, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795,
     1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795,
     1795, 1795, 1795,    0, 1795, 1795, 1795, 1795, 1795, 1795,
     1795, 1795, 1795, 1796, 1796, 1796, 1796, 1796, 1796, 1796,
     1796, 1796, 1796,    0,    0, 1796, 1796, 1796, 1796, 1796,
     1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796,
     1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796, 1797, 1797,

        0, 1797, 1797, 1797, 1797, 1797, 1797,    0, 1797, 1797,
     1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797,    0,    0,
     1797, 1797, 1797,    0,    0, 1797, 1797, 1797, 1797, 1797,
     1797, 1797, 1797, 1798,    0,    0, 1798,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1798,    0,    0, 1798,
     1798, 1798, 1798, 1799, 1799,    0,    0,    0,    0, 1799,
        0,    0, 1799, 1799, 1799,    0,    0,    0,    0, 1799,
     1800, 1800,    0, 1800, 1800, 1800, 1800,    0, 1800, 1800,
     1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800,

     1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800,
     1800, 1800, 1800, 1800, 1800, 1801, 1801,    0, 1801,    0,
        0,    0,    0,    0, 1801,    0,    0, 1801, 1801, 1801,
     1802,    0, 1802, 1802,    0, 1802,    0,    0,    0,    0,
     1802, 1802,    0,    0, 1802, 1802, 1802, 1803,    0,    0,
     1803,    0, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1803, 1804, 1804,    0, 1804, 1804, 1804, 1804, 1804,
     1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804,

     1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804,
     1804, 1804, 1804, 1804, 1804, 1804, 1804, 1805,    0,    0,
     1805,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1805,    0,    0, 1805, 1805, 1805, 1807,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1807,    0, 1807,    0,
     1807, 1807,    0,    0,    0,    0, 1807,    0,    0, 1807,
     1807, 1807,    0,    0, 1807, 1808, 1808,    0, 1808, 1808,
     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808,
     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808,

     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808,
     1811,    0,    0, 1811,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1811, 1811,    0, 1811, 1811, 1811, 1811,
     1812,    0,    0, 1812,    0,    0,    0, 1812,    0, 1812,
     1812, 1812, 1812, 1812,    0,    0,    0, 1812, 1812, 1812,
        0, 1812, 1812, 1812,    0,    0,    0,    0, 1812, 1813,
        0,    0, 1813,    0,    0,    0, 1813,    0, 1813, 1813,
     1813, 1813, 1813,    0,    0,    0, 1813, 1813, 1813,    0,
     1813, 1813, 1813,    0,    0,    0,    0, 1813, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1816,    0, 1816,    0,    0,    0, 1816,
        0,    0, 1816, 1816, 1816,    0,    0,    0,    0, 1816,
     1817,    0,    0, 1817,    0,    0,    0, 1817,    0, 1817,
     1817, 1817, 1817, 1817,    0,    0,    0, 1817, 1817, 1817,
        0, 1817, 1817, 1817,    0,    0,    0,    0, 1817, 1818,
        0,    0, 1818,    0,    0,    0, 1818,    0, 1818, 1818,
     1818, 1818, 1818,    0,    0,    0, 1818, 1818, 1818,    0,

     1818, 1818, 1818,    0,    0,    0,    0, 1818, 1819, 1819,
        0, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819,
     1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819,
     1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819,
     1819, 1819, 1819, 1820, 1820,    0,    0, 1820,    0,    0,
        0, 1820,    0, 1820, 1820, 1820, 1820, 1820,    0, 1820,
        0, 1820, 1820, 1820,    0, 1820, 1820, 1820,    0,    0,
        0,    0, 1820, 1821, 1821,    0,    0, 1821,    0,    0,
        0, 1821,    0, 1821, 1821, 1821, 1821, 1821,    0, 1821,
        0, 1821, 1821, 1821,    0, 1821, 1821, 1821,    0,    0,

        0,    0, 1821, 1822, 1822, 1822, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1823,    0,
        0, 1823,    0,    0,    0,    0,    0, 1823,    0,    0,
        0,    0,    0,    0,    0, 1823,    0,    0,    0,    0,
        0, 1823,    0,    0, 1823, 1823, 1823,    0,    0,    0,
        0, 1823, 1824,    0,    0,    0,    0,    0, 1824,    0,
        0, 1824, 1824, 1824,    0,    0,    0,    0, 1824, 1825,
        0,    0, 1825,    0,    0,    0, 1825,    0, 1825, 1825,

     1825, 1825, 1825,    0,    0,    0, 1825, 1825, 1825,    0,
     1825, 1825, 1825,    0,    0,    0,    0, 1825, 1826,    0,
        0, 1826,    0,    0,    0, 1826,    0, 1826, 1826, 1826,
     1826, 1826,    0,    0,    0, 1826, 1826, 1826,    0, 1826,
     1826, 1826,    0,    0,    0,    0, 1826, 1827, 1827, 1827,
     1827,    0,    0, 1827,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1827, 1827,    0,    0,    0,    0,
     1827,    0,    0, 1827, 1827, 1827,    0,    0,    0,    0,
     1827, 1828, 1828, 1828, 1828,    0,    0, 1828,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1828,

        0,    0,    0,    0, 1828,    0,    0, 1828, 1828, 1828,
        0,    0,    0,    0, 1828, 1829, 1829, 1829, 1829,    0,
        0, 1829,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1829, 1829,    0,    0,    0,    0, 1829,    0,
        0, 1829, 1829, 1829,    0,    0,    0,    0, 1829, 1830,
        0,    0,    0,    0,    0, 1830,    0,    0, 1830, 1830,
     1830,    0,    0,    0,    0, 1830, 1832,    0, 1832,    0,
        0,    0,    0,    0, 1832,    0,    0, 1832, 1832, 1832,
        0,    0,    0,    0, 1832, 1834,    0,    0,    0,    0,
        0, 1834,    0,    0, 1834, 1834, 1834,    0,    0,    0,

        0, 1834, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835,
     1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835,
        0, 1835, 1835, 1835, 1835, 1835,    0, 1835, 1835,    0,
        0, 1835, 1835, 1835, 1835, 1835, 1835, 1839,    0,    0,
        0,    0,    0,    0,    0, 1839,    0, 1839, 1839, 1839,
     1839, 1839,    0,    0, 1839,    0, 1839,    0,    0, 1839,
     1839, 1839,    0,    0,    0,    0, 1839, 1840,    0,    0,
     1840,    0,    0,    0, 1840,    0, 1840,    0,    0, 1840,
     1840, 1840,    0,    0,    0,    0, 1840, 1841,    0, 1841,
     1841, 1841, 1841, 1841,    0,    0, 1841,    0, 1841,    0,

        0, 1841, 1841, 1841,    0,    0,    0,    0, 1841, 1842,
        0,    0, 1842,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1842,    0,    0, 1842, 1842, 1842, 1842, 1843,
     1843,    0, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
     1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
     1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
     1843, 1843, 1843, 1843, 1844,    0,    0, 1844,    0,    0,
        0,    0,    0, 1844,    0,    0, 1844, 1844, 1844, 1845,
        0, 1845,    0, 1845, 1845,    0, 1845,    0,    0,    0,

        0, 1845, 1845,    0,    0, 1845, 1845, 1845, 1846, 1846,
        0, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
     1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
     1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
     1846, 1846, 1846, 1848,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1848,    0, 1848,    0, 1848, 1848,    0,
        0,    0,    0, 1848,    0,    0, 1848, 1848, 1848,    0,
        0, 1848, 1849, 1849,    0, 1849, 1849, 1849, 1849, 1849,
     1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849,
     1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849,

     1849, 1849, 1849, 1849, 1849, 1849, 1849, 1850, 1850,    0,
     1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850,
     1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850,
     1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850,
     1850, 1850, 1852,    0,    0, 1852,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1852, 1852,    0, 1852, 1852,
     1852, 1852, 1853, 1853,    0, 1853,    0,    0,    0,    0,
        0,    0,    0,    0, 1853,    0, 1853, 1853,    0, 1853,
     1853,    0,    0,    0, 1853, 1853,    0,    0, 1853, 1853,

     1853,    0, 1853, 1854,    0,    0, 1854,    0,    0,    0,
     1854,    0, 1854, 1854, 1854, 1854, 1854,    0,    0,    0,
     1854, 1854, 1854,    0, 1854, 1854, 1854,    0,    0,    0,
        0, 1854, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855,
     1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855,
     1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855,
     1855, 1855, 1855, 1855, 1855, 1855, 1855, 1856,    0,    0,
     1856,    0,    0,    0, 1856,    0, 1856, 1856, 1856, 1856,
     1856,    0,    0,    0, 1856, 1856, 1856,    0, 1856, 1856,
     1856,    0,    0,    0,    0, 1856, 1857, 1857,    0, 1857,

     1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857,
     1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857,
     1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857,
     1857, 1858, 1858,    0,    0, 1858,    0,    0,    0, 1858,
        0, 1858, 1858, 1858, 1858, 1858,    0, 1858,    0, 1858,
     1858, 1858,    0, 1858, 1858, 1858,    0,    0,    0,    0,
     1858, 1859,    0,    0, 1859,    0,    0,    0, 1859,    0,
     1859, 1859, 1859, 1859, 1859,    0,    0,    0, 1859, 1859,
     1859,    0, 1859, 1859, 1859,    0,    0,    0,    0, 1859,
     1861, 1861, 1861, 1861,    0,    0, 1861,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 1861, 1861,    0,
        0,    0,    0, 1861,    0,    0, 1861, 1861, 1861,    0,
        0,    0,    0, 1861, 1862, 1862, 1862, 1862,    0,    0,
     1862,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1862,    0,    0,    0,    0, 1862,    0,    0,
     1862, 1862, 1862,    0,    0,    0,    0, 1862, 1863,    0,
     1863,    0,    0,    0,    0,    0, 1863,    0,    0, 1863,
     1863, 1863,    0,    0,    0,    0, 1863, 1864,    0,    0,
        0,    0,    0, 1864,    0,    0, 1864, 1864, 1864,    0,
        0,    0,    0, 1864, 1865,    0,    0,    0,    0,    0,

        0,    0, 1865,    0, 1865, 1865, 1865, 1865, 1865,    0,
        0, 1865,    0, 1865,    0,    0, 1865, 1865, 1865,    0,
        0,    0,    0, 1865, 1866,    0, 1866, 1866, 1866, 1866,
     1866,    0,    0, 1866,    0, 1866,    0,    0, 1866, 1866,
     1866,    0,    0,    0,    0, 1866, 1867, 1867,    0, 1867,
        0,    0,    0,    0,    0, 1867,    0,    0, 1867, 1867,
     1867, 1868, 1868,    0, 1868, 1868, 1868, 1868, 1868, 1868,
     1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868,
     1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868,
     1868, 1868, 1868, 1868, 1868, 1868, 1869, 1869, 1869, 1869,

        0,    0, 1869,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1869, 1869,    0,    0,    0,    0, 1869,
        0,    0, 1869, 1869, 1869,    0,    0,    0,    0, 1869,
     1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870,
     1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870,    0, 1870,
     1870, 1870, 1870, 1870,    0, 1870, 1870,    0, 1870,    0,
     1870, 1870, 1870, 1870, 1870, 1871, 1871,    0, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,    0, 1872,
     1872, 1872, 1872, 1872,    0, 1872, 1872,    0,    0,    0,
     1872, 1872, 1872, 1872, 1872, 1873, 1873, 1873, 1873, 1873,
     1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873,
     1873, 1873, 1873,    0, 1873, 1873, 1873, 1873, 1873,    0,
     1873, 1873,    0,    0,    0, 1873, 1873, 1873, 1873, 1873,
     1874, 1874, 1874, 1874, 1874, 1874, 1874, 1874, 1874, 1874,
     1874, 1874, 1874, 1874, 1874, 1874, 1874, 1874,    0, 1874,
     1874, 1874, 1874, 1874,    0, 1874, 1874,    0,    0,    0,

     1874, 1874, 1874, 1874, 1874, 1875, 1875, 1875, 1875, 1875,
     1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875,
     1875, 1875, 1875,    0, 1875, 1875, 1875, 1875, 1875,    0,
     1875, 1875,    0,    0,    0, 1875, 1875, 1875, 1875, 1875,
     1876, 1876,    0, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,

     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
/*************************************************************************
 *
 * Copyright (c) 2014-2021 Barbara Geller & Ansel Sermersheim
 * Copyright (c) 1997-2014 Dimitri van Heesch
 *
*************************************************************************/

#include <QFile>
#include <QStack>
#include <QVector>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <cite.h>
#include <commentscan.h>
#include <condparser.h>
#include <config.h>
#include <default_args.h>
#include <doxy_globals.h>
#include <entry.h>
#include <formula.h>
#include <index.h>
#include <language.h>
#include <membergroup.h>
#include <message.h>
#include <outputlist.h>
#include <parse_base.h>
#include <parse_cstyle.h>
#include <parse_md.h>
#include <util.h>

#define YY_NO_INPUT 1

// forward declarations
static bool handleBrief(const QString &str, const QStringList &list);
static bool handleFn(const QString &str, const QStringList &list);
static bool handleProperty(const QString &str, const QStringList &list);
static bool handleDef(const QString &str, const QStringList &list);
static bool handleOverload(const QString &str, const QStringList &list);
static bool handleEnum(const QString &str, const QStringList &list);
static bool handleDefGroup(const QString &str, const QStringList &list);
static bool handleAddToGroup(const QString &str, const QStringList &list);
static bool handleWeakGroup(const QString &str, const QStringList &list);
static bool handleNamespace(const QString &str, const QStringList &list);
static bool handlePackage(const QString &str, const QStringList &list);
static bool handleClass(const QString &str, const QStringList &list);
static bool handleConcept(const QString &str, const QStringList &list);
static bool handleHeaderFile(const QString &str, const QStringList &list);
static bool handleProtocol(const QString &str, const QStringList &list);
static bool handleCategory(const QString &str, const QStringList &list);
static bool handleUnion(const QString &str, const QStringList &list);
static bool handleStruct(const QString &str, const QStringList &list);;
static bool handleInterface(const QString &str, const QStringList &list);
static bool handleIdlException(const QString &str, const QStringList &list);
static bool handlePage(const QString &str, const QStringList &list);
static bool handleMainpage(const QString &str, const QStringList &list);
static bool handleFile(const QString &str, const QStringList &list);
static bool handleDir(const QString &str, const QStringList &list);
static bool handleExample(const QString &str, const QStringList &list);
static bool handleDetails(const QString &str, const QStringList &list);
static bool handleName(const QString &str, const QStringList &list);
static bool handleTodo(const QString &str, const QStringList &list);
static bool handleTest(const QString &str, const QStringList &list);
static bool handleBug(const QString &str, const QStringList &list);
static bool handleSubpage(const QString &str, const QStringList &list);
static bool handleDeprecated(const QString &str, const QStringList &list);
static bool handleXRefItem(const QString &str, const QStringList &list);
static bool handleRelated(const QString &str, const QStringList &list);
static bool handleRelatedAlso(const QString &str, const QStringList &list);
static bool handleMemberOf(const QString &str, const QStringList &list);
static bool handleRefItem(const QString &str, const QStringList &list);
static bool handleSection(const QString &str, const QStringList &list);
static bool handleAnchor(const QString &str, const QStringList &list);
static bool handleCite(const QString &str, const QStringList &list);
static bool handleFormatBlock(const QString &str, const QStringList &list);
static bool handleAddIndex(const QString &str, const QStringList &list);;
static bool handleIf(const QString &str, const QStringList &list);
static bool handleIfNot(const QString &str, const QStringList &list);
static bool handleElseIf(const QString &str, const QStringList &list);
static bool handleElse(const QString &str, const QStringList &list);
static bool handleEndIf(const QString &str, const QStringList &list);
static bool handleIngroup(const QString &str, const QStringList &list);
static bool handleNoSubGrouping(const QString &str, const QStringList &list);
static bool handleShowInitializer(const QString &str, const QStringList &list);
static bool handleHideInitializer(const QString &str, const QStringList &list);
static bool handleCallgraph(const QString &str, const QStringList &list);
static bool handleHideCallgraph(const QString &str, const QStringList &list);
static bool handleCallergraph(const QString &str, const QStringList &list);
static bool handleHideCallergraph(const QString &str, const QStringList &list);
static bool handleReferencedByRelation(const QString &str, const QStringList &list);
static bool handleHideReferencedByRelation(const QString &str, const QStringList &list);
static bool handleReferencesRelation(const QString &str, const QStringList &list);
static bool handleHideReferencesRelation(const QString &str, const QStringList &list);
static bool handleInternal(const QString &str, const QStringList &list);
static bool handleStatic(const QString &str, const QStringList &list);
static bool handlePure(const QString &str, const QStringList &list);
static bool handlePrivate(const QString &str, const QStringList &list);
static bool handlePrivateSection(const QString &str, const QStringList &list);
static bool handleProtected(const QString &str, const QStringList &list);
static bool handleProtectedSection(const QString &str, const QStringList &list);
static bool handlePublic(const QString &str, const QStringList &list);
static bool handlePublicSection(const QString &str, const QStringList &list);
static bool handleToc(const QString &str, const QStringList &list);
static bool handleInherit(const QString &str, const QStringList &list);
static bool handleExtends(const QString &str, const QStringList &list);
static bool handleCopyDoc(const QString &str, const QStringList &list);
static bool handleCopyBrief(const QString &str, const QStringList &list);
static bool handleCopyDetails(const QString &str, const QStringList &list);
static bool handleParBlock(const QString &str, const QStringList &list);
static bool handleEndParBlock(const QString &str, const QStringList &list);
static bool handleParam(const QString &str, const QStringList &list);
static bool handleRetval(const QString &str, const QStringList &list);
//   static void handleGuard(const QString &str, const QStringList &list);

static void checkFormula();

using DocCmdFunc = bool (*)(const QString &str, const QStringList &list);

struct DocCmdMap
{
   DocCmdMap(const char *x1, DocCmdFunc x2, bool x3) {
      cmdName   = QString::fromUtf8(x1);
      handler   = x2;
      endsBrief = x3;
   }

   QString cmdName;
   DocCmdFunc handler;
   bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "addindex",        &handleAddIndex,                 false },
  { "addtogroup",      &handleAddToGroup,               false },
  { "anchor",          &handleAnchor,                   true  },
  { "arg",             0,                               true  },
  { "attention",       0,                               true  },
  { "author",          0,                               true  },
  { "authors",         0,                               true  },
  { "brief",           &handleBrief,                    false },
  { "bug",             &handleBug,                      false },
  { "callergraph",     &handleCallergraph,              false },
  { "callgraph",       &handleCallgraph,                false },
  { "category",        &handleCategory,                 false },
  { "cite",            &handleCite,                     false },
  { "class",           &handleClass,                    false },
  { "code",            &handleFormatBlock,              true  },
  { "concept",         &handleConcept,                  false },
  { "copybrief",       &handleCopyBrief,                false },
  { "copydetails",     &handleCopyDetails,              true  },
  { "copydoc",         &handleCopyDoc,                  true  },
  { "copyright",       0,                               true  },
  { "date",            0,                               true  },
  { "def",             &handleDef,                      false },
  { "defgroup",        &handleDefGroup,                 false },
  { "deprecated",      &handleDeprecated,               false },
  { "details",         &handleDetails,                  true  },
  { "dir",             &handleDir,                      false },
  { "docbookinclude",  0,                               false },
  { "docbookonly",     &handleFormatBlock,              false },
  { "dot",             &handleFormatBlock,              true  },
  { "dotfile",         0,                               true  },
  { "else",            &handleElse,                     false },
  { "elseif",          &handleElseIf,                   false },
  { "endif",           &handleEndIf,                    false },
  { "endparblock",     &handleEndParBlock,              true  },
  { "enum",            &handleEnum,                     false },
  { "example",         &handleExample,                  false },
  { "exception",       0,                               true  },
  { "extends",         &handleExtends,                  true  },
  { "file",            &handleFile,                     false },
  { "fn",              &handleFn,                       false },
  { "group",           &handleDefGroup,                 false },
  { "headerfile",      &handleHeaderFile,               false },
  { "hidecallergraph", &handleHideCallergraph,          false },
  { "hidecallgraph",   &handleHideCallgraph,            false },
  { "hideinitializer", &handleHideInitializer,          false },
  { "hiderefby",       &handleHideReferencedByRelation, false },
  { "hiderefs",        &handleHideReferencesRelation,   false },
  { "htmlinclude",     0,                               false },
  { "htmlonly",        &handleFormatBlock,              false },
  { "idlexcept",       &handleIdlException,             false },
  { "if",              &handleIf,                       false },
  { "ifnot",           &handleIfNot,                    false },
  { "image",           0,                               true  },
  { "implements",      &handleExtends,                  true  },
  { "include",         0,                               true  },
  { "includelineno",   0,                               true  },
  { "ingroup",         &handleIngroup,                  false },
  { "inherit",         &handleInherit,                  true  },
  { "interface",       &handleInterface,                false },
  { "internal",        &handleInternal,                 true  },
  { "invariant",       0,                               true  },
  { "latexinclude",    0,                               false },
  { "latexonly",       &handleFormatBlock,              false },
  { "li",              0,                               true  },
  { "line",            0,                               true  },
  { "mainpage",        &handleMainpage,                 false },
  { "maninclude",      0,                               false },
  { "manonly",         &handleFormatBlock,              false },
  { "memberof",        &handleMemberOf,                 true  },
  { "msc",             &handleFormatBlock,              true  },
  { "name",            &handleName,                     false },
  { "namespace",       &handleNamespace,                false },
  { "nosubgrouping",   &handleNoSubGrouping,            false },
  { "note",            0,                               true  },
  { "overload",        &handleOverload,                 false },
  { "package",         &handlePackage,                  false },
  { "page",            &handlePage,                     false },
  { "par",             0,                               true  },
  { "paragraph",       &handleSection,                  true  },
  { "param",           &handleParam,                    true  },
  { "parblock",        &handleParBlock,                 true  },
  { "post",            0,                               true  },
  { "pre",             0,                               true  },
  { "private",         &handlePrivate,                  false },
  { "privatesection",  &handlePrivateSection,           false },
  { "property",        &handleProperty,                 false },
  { "protected",       &handleProtected,                false },
  { "protectedsection",&handleProtectedSection,         false },
  { "protocol",        &handleProtocol,                 false },
  { "public",          &handlePublic,                   false },
  { "publicsection",   &handlePublicSection,            false },
  { "pure",            &handlePure,                     false },
  { "refitem",         &handleRefItem,                  true  },
  { "related",         &handleRelated,                  true  },
  { "relatedalso",     &handleRelatedAlso,              true  },
  { "relates",         &handleRelated,                  true  },
  { "relatesalso",     &handleRelatedAlso,              true  },
  { "remark",          0,                               true  },
  { "remarks",         0,                               true  },
  { "result",          0,                               true  },
  { "return",          0,                               true  },
  { "returns",         0,                               true  },
  { "retval",          &handleRetval,                   true  },
  { "rtfinclude",      0,                               false },
  { "rtfonly",         &handleFormatBlock,              false },
  { "sa",              0,                               true  },
  { "section",         &handleSection,                  true  },
  { "see",             0,                               true  },
  { "short",           &handleBrief,                    false },
  { "showinitializer", &handleShowInitializer,          false },
  { "showrefby",       &handleReferencedByRelation,     false },
  { "showrefs",        &handleReferencesRelation,       false },
  { "since",           0,                               true  },
  { "snippet",         0,                               true  },
  { "snippetlineno",   0,                               true  },
  { "startuml",        &handleFormatBlock,              true  },
  { "static",          &handleStatic,                   false },
  { "struct",          &handleStruct,                   false },
  { "subpage",         &handleSubpage,                  true  },
  { "subsection",      &handleSection,                  true  },
  { "subsubsection",   &handleSection,                  true  },
  { "tableofcontents", &handleToc,                      false },
  { "test",            &handleTest,                     false },
  { "throw",           0,                               true  },
  { "throws",          0,                               true  },
  { "todo",            &handleTodo,                     false },
  { "tparam",          0,                               true  },
  { "typedef",         &handleFn,                       false },
  { "union",           &handleUnion,                    false },
  { "until",           0,                               true  },
  { "var",             &handleFn,                       false },
  { "verbatim",        &handleFormatBlock,              true  },
  { "verbinclude",     0,                               false },
  { "version",         0,                               true  },
  { "warning",         0,                               true  },
  { "weakgroup",       &handleWeakGroup,                false },
  { "xmlinclude",      0,                               false },
  { "xmlonly",         &handleFormatBlock,              false },
  { "xrefitem",        &handleXRefItem,                 false },
  { nullptr,          0,                               false }
};

//  Maps a command name (as found in a comment block) onto a specific handler function
class DocCmdMapper
{
  public:
    struct Cmd {
      DocCmdFunc func;
      bool endsBrief;
    };

    // maps a command name to a handler function
    static Cmd *map(const QString &name) {
      return instance()->find(name);
    }

    // release the instance
    static void freeInstance() {
      delete s_instance;
      s_instance = nullptr;
    }

  private:
    static DocCmdMapper *instance() {
      if (s_instance == nullptr) {
         s_instance = new DocCmdMapper;
      }

      return s_instance;
   }

   DocCmdMapper() {
      DocCmdMap *p = docCmdMap;

      while (! p->cmdName.isEmpty()) {
         if (m_map.contains(p->cmdName)) {
            err("DocCmdMapper: command %s already added\n", csPrintable(p->cmdName));
            Doxy_Work::stopDoxyPress();
         }

         Cmd *cmd       = new Cmd;
         cmd->func      = p->handler;
         cmd->endsBrief = p->endsBrief;

         m_map.insert(p->cmdName, cmd);
         ++p;
      }
   }

   Cmd *find(const QString &name) {
      return m_map.value(name);
   }

   QHash<QString, Cmd *> m_map;
   static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance = nullptr;

#define YY_NEVER_INTERACTIVE 1

enum XRefKind {
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext {
  OutputMainDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType {
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
 public:
   GuardedSection(bool enabled, bool parentVisible)
      : m_enabled(enabled), m_parentVisible(parentVisible) {}

   bool isEnabled() const {
      return m_enabled;
   }

   bool parentVisible() const {
      return m_parentVisible;
   }

 private:
   bool m_enabled;
   bool m_parentVisible;
};

static void groupAddDocs(QSharedPointer<Entry> e);

static QString          s_inputString;         // input string
static QString          s_currentCommand;
static int              s_inputPosition;       // read pointer
static int              s_prevPosition;
static char            *s_bufferPosition;

static QString          yyFileName;            // file name that is read from
static int              yyLineNr;              // line number in the input
static bool             inBody;                // was the comment found inside the body of a function?
static OutputContext    inContext;             // are we inside the brief, details or xref part
static bool             briefEndsAtDot;        // does the brief description stop at a dot
static QString          formulaText;           // Running text of a formula
static QString          formulaEnv;            // environment name
static int              formulaNewLines;       // amount of new lines in the formula

static QString          s_outputXRef;          // tmp argument of todo/test/../xrefitem commands
static QString          s_blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;              // kind of cross-reference command
static XRefKind         newXRefKind;
static GuardType        s_guardType;           // kind of guard for conditional section
static bool             s_isEnabledSection;
static QString          s_functionProto;       // function prototype

static bool             s_needNewEntry;
// static int           s_docBlockContext;

static QString          s_sectionLabel;
static QString          s_sectionTitle;
static int              s_sectionLevel;
static QString          xrefItemKey;
static QString          newXRefItemKey;
static QString          xrefItemTitle;
static QString          xrefListTitle;
static Protection       s_protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             s_parseMore;

static int              s_condCount;
static int              s_commentCount;
static QString          s_spaceBeforeCmd;
static QString          s_spaceBeforeIf;
static QString          s_copyDocArg;
static QString          s_guardExpr;
static int              s_roundCount;
static bool             s_insideParBlock;

static int              s_openCount;
static int              s_memberGroupId = DOX_NOGROUP;
static QString          s_memberGroupHeader;
static QString          s_memberGroupDocs;
static QString          s_memberGroupRelates;
static QString          s_compoundName;

static bool             s_internalDocs;
static bool             s_processInternalDocs = false;

static ParserInterface        *langParser;        // the language parser calling us

static QSharedPointer<Entry>  s_docsEntry;        // which entry
static EntryKey               s_docsEnum;         // which enum in EntryKey (brief, main, inbody)

static QStack<GuardedSection> s_guards;           // tracks nested conditional sections (if, ifnot, ..)
static QSharedPointer<Entry>  current;            // working entry

static QStack<QSharedPointer<Grouping>> s_autoGroupStack;

// double declared
static void yyunput (int c, char *buf_ptr);

static void initParser()
{
   s_sectionLabel.resize(0);
   s_sectionTitle.resize(0);
   s_memberGroupHeader.resize(0);

   s_insideParBlock = false;
   s_internalDocs   = Config::getBool("internal-docs");
}

static bool getDocSectionName(int s)
{
  switch(s) {
    case Entry::CATEGORYDOC_SEC:
    case Entry::CLASSDOC_SEC:
    case Entry::CONCEPTDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::MEMBERGRP_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
      return true;

    default:
      return false;
  }
}

static bool makeStructuralIndicator(Entry::Sections s)
{
   if (getDocSectionName(current->section)) {
      return true;

   } else {
      s_needNewEntry     = true;

      current->section   = s;
      current->startLine = yyLineNr;
      current->docLine   = yyLineNr;

      current->setData(EntryKey::File_Name, yyFileName);

      return false;
   }
}

static QString stripQuotes(const QString &s)
{
   QString name = s;

   if (name.isEmpty()) {
      return name;
   }

   if (name.at(0) == '"' && name.at(name.length() - 1) == '"') {
      name = name.mid(1, name.length() - 2);
   }

   return name;
}

static void addXRefItem(const QString &listName, const QString &itemTitle, const QString &listTitle, bool append)
{
   QSharedPointer<Entry> docEntry = current; // inBody && previous ? previous : current;

   if (listName.isEmpty()) {
      return;
   }

   auto refList = Doxy_Globals::xrefLists.find(listName);

   if (refList == Doxy_Globals::xrefLists.end()) {
      // new list
      Doxy_Globals::xrefLists.insert(listName, RefList(listName, listTitle, itemTitle));
      refList = Doxy_Globals::xrefLists.find(listName);
   }

   ListItemInfo *listItem = nullptr;

   for (auto &item : docEntry->m_specialLists) {
      listItem = &item;

      if (listItem->type == listName) {
         break;
      }
   }

   if (listItem && append) {
      // already found item of same type just before this one

      RefItem *item = refList->getRefItem(listItem->itemId);
      assert(item != 0);

      item->text += " <p>";
      item->text += s_outputXRef;

   } else {
      // new item

      int itemId  = refList->addRefItem();

      // if we have already an item from the same list type (e.g. a second @todo)
      // in the same Entry (i.e. lii!=0) then we reuse its link anchor.

      QString anchorLabel = QString("_%1%2").formatArg(listName).formatArg(itemId, 6, 10, QChar('0'));

      RefItem *item = refList->getRefItem(itemId);
      assert(item != 0);

      item->text       = s_outputXRef;
      item->listAnchor = anchorLabel;

      docEntry->addSpecialListItem(listName, itemId);

      QString cmdString = QString(" \\xrefitem %1 %2.").formatArg(listName).formatArg(itemId);

      if (inBody) {
         docEntry->appendData(EntryKey::Inbody_Docs, cmdString);
      } else {
         docEntry->appendData(EntryKey::Main_Docs,   cmdString);
      }

      QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorLabel);

      if (si) {
         if (si->lineNr != -1) {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s, line %d)",
                  csPrintable(anchorLabel), csPrintable(si->fileName), si->lineNr);

         } else {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s)",
                  csPrintable(anchorLabel), csPrintable(si->fileName));
         }

      } else {
         si = QMakeShared<SectionInfo>(listName, yyLineNr, anchorLabel, s_sectionTitle, SectionInfo::Anchor, s_sectionLevel);
         Doxy_Globals::sectionDict.insert(anchorLabel, si);
         docEntry->m_anchors.append(*si);
      }
   }

   s_outputXRef.clear();
}

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QString addFormula()
{
   QString formLabel;
   QString fText = formulaText.simplified();

   auto f = Doxy_Globals::formulaDict.find(fText);

   if (f == Doxy_Globals::formulaDict.end()) {
      Formula temp = Formula(fText);

      Doxy_Globals::formulaList.append(temp);
      Doxy_Globals::formulaDict.insert(fText, temp);

      formLabel = QString("\\form#%1").formatArg(temp.getId());

      Doxy_Globals::formulaNameDict.insert(formLabel, temp);
      f = Doxy_Globals::formulaDict.find(fText);

   } else {
      formLabel = QString("\\form#%1").formatArg(f->getId());

   }

   for (int i = 0; i < formulaNewLines; i++) {
      formLabel += "@_fakenl";   // add fake newlines to
   }

   // keep the warnings correctly aligned
   return formLabel;
}

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level >= 0 && level < 5) {
      return (SectionInfo::SectionType)level;
   }

   return SectionInfo::Anchor;
}

static void addSection()
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(s_sectionLabel);

   if (si) {
      if (si->lineNr != -1) {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName), si->lineNr);

      } else {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName));
      }

   } else {
      // create a new section element
      s_sectionTitle += QString::fromUtf8(commentscanYYtext).trimmed();

      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, s_sectionLabel, s_sectionTitle,
                  sectionLevelToType(s_sectionLevel), s_sectionLevel);

      // add section to this entry
      current->m_anchors.append(*si);

      // add section to the global dictionary
      Doxy_Globals::sectionDict.insert(s_sectionLabel, si);

      // for a section the si->fileName is the physical file name. this will be replaced with the section name
      // in doctokenizer processSection()
   }
}

static void addCite()
{
   QString text = QString::fromUtf8(commentscanYYtext);
   if (text.startsWith('"')) {
      text.chop(1);
      text = text.mid(1);
   }

   Doxy_Globals::citeDict.insert(text);
}

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QString &str)
{
   if (str.isEmpty()) {
      return;
   }

   QString::const_iterator iter       = str.constEnd() - 1;
   QString::const_iterator iter_start = str.constBegin();
   QString::const_iterator iter_end   = str.constEnd();

   QChar c;

   while (true) {
      c = *iter;
      QStringView tmp = QStringView(iter, iter_end);

      if (c == ' ' || c == '\t' || c == '\r') {
         // normal whitespace

      } else if (tmp.endsWith("\\internal_linebr")) {
         // special line break marker

         iter -= 15;

      } else if (c == '\n') {
         // normal newline

      } else {
         // non-whitespace, done
         break;
      }

      if (iter == str.constBegin()) {
         break;
      }

      --iter;
   }

   // update the string
   str = QString(iter_start, iter+1);
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
   bool xrefAppendToPrev = xrefAppendFlag;

   // determine append flag for the next item (i.e. the end of this item)
   xrefAppendFlag = ! inBody &&
                    inContext == OutputXRef && ctx == OutputXRef &&    // two consecutive xref items
                    newXRefKind == xrefKind &&                         // of the same kind
                    (xrefKind != XRef_Item ||
                    newXRefItemKey == xrefItemKey);                    // with the same key if \xrefitem

   if (inContext == OutputXRef) {

      // end of XRef section => add the item
      // See if we can append this new xref item to the previous one.
      // We know this at the start of the next item of the same
      // type and need to remember this until the end of that item.

    switch(xrefKind) {
         case XRef_Todo:
            addXRefItem("todo", theTranslator->trTodo(), theTranslator->trTodoList(), xrefAppendToPrev);
            break;

         case XRef_Test:
            addXRefItem("test", theTranslator->trTest(), theTranslator->trTestList(), xrefAppendToPrev);
            break;

         case XRef_Bug:
            addXRefItem("bug", theTranslator->trBug(), theTranslator->trBugList(), xrefAppendToPrev);
            break;

         case XRef_Deprecated:
            // ensure the current entry is marked
            current->m_traits.setTrait(Entry::Virtue::Deprecated);

            addXRefItem("deprecated", theTranslator->trDeprecated(), theTranslator->trDeprecatedList(), xrefAppendToPrev);
            break;

         case XRef_Item:
            // user defined list
            addXRefItem(xrefItemKey, xrefItemTitle, xrefListTitle, xrefAppendToPrev);
            break;

         case XRef_None:
            assert(0);
            break;
      }
   }

  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;

   if (inContext != OutputXRef && inBody) {
      inContext = OutputInbody;
   }

  switch(inContext) {
      case OutputMainDoc:
         if (oldContext != inContext) {

            QString tmpDocs = current->getData(EntryKey::Main_Docs);
            stripTrailingWhiteSpace(tmpDocs);
            current->setData(EntryKey::Main_Docs, tmpDocs);

            if (current->getData(EntryKey::MainDocs_File).isEmpty()) {
               current->setData(EntryKey::MainDocs_File, yyFileName);
               current->docLine = yyLineNr;
            }
         }

         s_docsEntry = current;
         s_docsEnum  = EntryKey::Main_Docs;

         break;

      case OutputBrief:
         if (oldContext != inContext) {
            if (current->getData(EntryKey::Brief_File).isEmpty()) {
               current->setData(EntryKey::Brief_File, yyFileName);
               current->briefLine = yyLineNr;
            }
         }

         if (current->getData(EntryKey::Brief_Docs).trimmed().isEmpty())  {
            // only want one brief description even if multiple are given
            s_docsEntry = current;
            s_docsEnum  = EntryKey::Brief_Docs;

         } else {

            if (! current->getData(EntryKey::Main_Docs).isEmpty()) {
               // when appending parts add a new line
               current->appendData(EntryKey::Main_Docs, "\n");
            }

            s_docsEntry  = current;
            s_docsEnum   = EntryKey::Main_Docs;

            inContext    = OutputMainDoc;             // need to switch to detailed docs
         }
         break;

      case OutputInbody:
         s_docsEntry = current;
         s_docsEnum  = EntryKey::Inbody_Docs;
         break;

      case OutputXRef:
         // indicates s_outputXRef should be used for the output string
         s_docsEntry = QSharedPointer<Entry>();

         break;
   }
}

static void addAnchor(const QString &anchorName)
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorName);

   if (si) {
      // anchor name already exists
      si->dupAnchor_cnt++;

   } else {
      // title is empty, level is zero
      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, anchorName, QString(""), SectionInfo::Anchor, 0);
      si->dupAnchor_fName = yyFileName;

      Doxy_Globals::sectionDict.insert(anchorName, si);
      current->m_anchors.append(*si);
   }
}

// add a string to one of the three doc outputs
static void addToOutput(const QString &str)
{
   if (s_docsEntry == nullptr) {
      // indicates s_outputXRef should be used for the output string
      s_outputXRef += str;

   } else {
      s_docsEntry->appendData(s_docsEnum, str);
   }
}

static void addToOutput(QChar c)
{
   if (s_docsEntry == nullptr) {
      // indicates s_outputXRef should be used for the output string
      s_outputXRef += c;

   } else {
      s_docsEntry->appendData(s_docsEnum, c);
   }
}

static void unputString(const QString &str) {

   auto iter     = str.storage_rbegin();
   auto iter_end = str.storage_rend();

   while (iter != iter_end) {
      unput(*iter);

      ++iter;
   }
}

static void endBrief(bool isOutput = true)
{
   if (! current->getData(EntryKey::Brief_Docs).trimmed().isEmpty()) {
      // only go to the detailed description if we found a brief description and not just whitespace

      briefEndsAtDot = false;
      setOutput(OutputMainDoc);

      if (isOutput) {
         QString text = QString::fromUtf8(commentscanYYtext);
         addToOutput(text);
      }
   }
}

static void handleGuard(const QString &expr);

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
   s_bufferPosition = buf;
   s_prevPosition   = s_inputPosition;

   //
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

/* start command character */
#define YY_NO_UNISTD_H 1
/* comment parsing states */

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define ConceptDocArg1 9
#define ConceptDocArg2 10
#define XRefItemParam1 11
#define XRefItemParam2 12
#define XRefItemParam3 13
#define FileDocArg1 14
#define ParamArg1 15
#define EnumDocArg1 16
#define NameSpaceDocArg1 17
#define PackageDocArg1 18
#define GroupDocArg1 19
#define GroupDocArg2 20
#define SectionLabel 21
#define SectionTitle 22
#define SubpageLabel 23
#define SubpageTitle 24
#define FormatBlock 25
#define LineParam 26
#define GuardParam 27
#define GuardParamEnd 28
#define SkipGuardedSection 29
#define SkipInternal 30
#define NameParam 31
#define InGroupParam 32
#define FnParam 33
#define OverloadParam 34
#define InheritParam 35
#define ExtendsParam 36
#define ReadFormulaShort 37
#define ReadFormulaLong 38
#define AnchorLabel 39
#define HtmlComment 40
#define SkipLang 41
#define CiteLabel 42
#define CopyDoc 43
#define GuardExpr 44
#define CdataSection 45

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
  /* What can happen while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxy\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1625 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1624 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      // mail address
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // quoted text
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      // directory (or chain of commands)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
{
      // HTML command ends a brief description
      setOutput(OutputMainDoc);

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
{
      // HTML command that ends a brief description
      if (current->m_srcLang == SrcLangExt_CSharp) {
         setOutput(OutputMainDoc);
      }

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      // start of a .NET XML style brief description
      QString text = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputBrief);
      addToOutput(text);
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputMainDoc);
      addToOutput(text);
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
{
      // end of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text);
      setOutput(OutputMainDoc);
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // end of a brief or detailed description
      QString text = QString::fromUtf8(commentscanYYtext);

      setOutput(OutputMainDoc);
      addToOutput(text);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      QString tag = QString::fromUtf8(commentscanYYtext);

      int s = tag.indexOf("id=");

      if (s != -1) {
         // command has id attribute
         QChar c = tag[s + 3];

         if (c == '\'' || c == '"') {
            // valid start
            int e = tag.indexOf(c,s + 4);

            if (e != -1) {
               // found matching end

               QString id = tag.mid(s + 4, e-s-4);   // extract id
               addAnchor(id);
            }
         }
      }

      addToOutput(tag);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      insidePre = true;
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      insidePre = false;
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      // RCS tag which end a brief description
      setOutput(OutputMainDoc);
      REJECT;
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      BEGIN(HtmlComment);
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      BEGIN(CdataSection);
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      addToOutput(" \\endinternal ");

      if (! s_processInternalDocs) {
         warn(yyFileName, yyLineNr, "Found \\endinternal without matching \\internal");
      }

      s_processInternalDocs = false;
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      // preserve spacing around \\internal_linebr
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      if (! current->m_entryName.isEmpty()) {
         current->m_traits.setTrait(Entry::Virtue::BypassUndocWarn);
      }
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      // simulate calling addToOutPut()
      QString text = QString::fromUtf8(commentscanYYtext);
      s_docsEntry->appendData(EntryKey::Main_Docs, text);
   }
	YY_BREAK
case 22:
case 23:
YY_RULE_SETUP
{
      // might be a valid command
      QString text = QString::fromUtf8(commentscanYYtext);

      /* handle `\f{` and `@f{` as special cases */
      int idx = text.indexOf('{');

      if ((idx > 1) && (text[idx - 1] == 'f') && (text[idx - 2] == '\\' || text[idx - 2] =='@')) {
         REJECT;
      }

      QStringView view = QStringView(text).trimmed();

      QString cmdName;
      QStringList optList;

      if (view.contains('{')) {
         // cmd { options }

         QString tmp = view.mid(1, 2).toLower();

         if (tmp == "f{")  {
            // handle "\f{" and "@f{" elsewhere
            REJECT;
         }

         static QRegularExpression regexp("[\\\\@](\\w+)\\s*{([^}]+)}");
         QRegularExpressionMatch match = regexp.match(view);

         // remove {CMD}
         cmdName = match.captured(1);
         optList = match.captured(2).split(',');

      } else {
         // no options
         cmdName = view.mid(1);

      }

      DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);

      if (cmdPtr) {
         // special action is required

         int i = 0;
         while (text[i] == ' ' || text[i] == '\t') {
            ++i;
         }

         s_spaceBeforeCmd = text.left(i);

         if (cmdPtr->endsBrief && ! (inContext == OutputXRef && cmdName == "parblock")) {
            briefEndsAtDot = false;

            // this command forces the end of brief description
            setOutput(OutputMainDoc);
         }

         if (cmdPtr->func && cmdPtr->func(cmdName, optList)) {
            // handler wants to stop and reenter this parser

            s_parseMore = true;

            s_inputPosition = s_prevPosition + (yy_bp - s_bufferPosition);
            yyterminate();

         } else if (cmdPtr->func == nullptr) {
            // command without handler is processed later by docparser
            addToOutput(text);
         }

      } else {
         // some command was found, just pass it on
         addToOutput(text);
      }
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      // escaped formula command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      // language switch command
      static const QString outputLanguage = Config::getEnum("output-language");

      QString text   = QString::fromUtf8(commentscanYYtext);
      QString langId = text.trimmed().mid(2);

      if (! langId.isEmpty() && outputLanguage.compare(langId, Qt::CaseInsensitive) != 0) {
         // enable language specific section
         BEGIN(SkipLang);
      }
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      // start of a formula with custom environment
      QString text = QString::fromUtf8(commentscanYYtext);

      // this command forces the end of brief description
      setOutput(OutputMainDoc);

      formulaText = "\\begin";
      formulaEnv = text.trimmed().mid(2);

      if (formulaEnv.at(formulaEnv.length() - 1) == '{') {
         // remove trailing open brace
         formulaEnv = formulaEnv.left(formulaEnv.length() - 1);
      }

      formulaText += formulaEnv;
      formulaNewLines = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      // start of a inline formula
      formulaText     = "$";
      formulaNewLines = 0;
      BEGIN(ReadFormulaShort);
   }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
      // start of a block formula

      // this command forces the end of brief description
      setOutput(OutputMainDoc);

      formulaText      = "\\[";
      formulaNewLines  = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      // beginning of a group
      openGroup(current, yyFileName, yyLineNr);
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      // end of a group
      QString text = QString::fromUtf8(commentscanYYtext);

      closeGroup(current, yyFileName, yyLineNr, true);

      s_memberGroupHeader.clear();
      s_parseMore    = true;
      s_needNewEntry = true;

      s_inputPosition = s_prevPosition + (yy_bp - s_bufferPosition) + text.length();
      yyterminate();
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      // escaped character
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
      // normal word
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 33:
/* rule 33 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // explicit end autolist: e.g "  ."
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 34:
case 35:
YY_RULE_SETUP
{
      // start of autolist
      if (! Doxy_Globals::markdownSupport) {
         REJECT;

      } else {

         if (inContext != OutputXRef) {
            briefEndsAtDot = false;
            setOutput(OutputMainDoc);
         }

         QString text = QString::fromUtf8(commentscanYYtext);
         addToOutput(text);
      }
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      // start of autolist
      if (inContext != OutputXRef) {
         briefEndsAtDot = false;
         setOutput(OutputMainDoc);
      }

      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // horizontal line (dashed)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      // mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&mdash;");
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      // ndash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&ndash;");
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      // numbered item
      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext != OutputXRef) {
         // this command forces the end of brief description
         setOutput(OutputMainDoc);
      }

      addToOutput(text);
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      // . at start or in the middle of a word, or ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      // . with escaped space
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text[0]);
      addToOutput(text[2]);
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      // . with comma such as "e.g.,"
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      // ellipsis with escaped space
      addToOutput("... ");
   }
	YY_BREAK
case 47:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // internal ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{
      // at least one blank line or blank line command

      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext == OutputXRef) {
         // need to put the newlines after ending the XRef section

         if (! s_insideParBlock) {
            setOutput(OutputMainDoc);
         }

         for (int i = 0; i < text.length();  ) {
            if (text[i] == '\n') {
               addToOutput('\n');
               ++i;

            } else if (text.mid(i) == "\\internal_linebr")  {
               addToOutput('\n');
               i += 8;

            } else  {
               ++i;
            }
         }

      } else if (inContext != OutputBrief) {

         for (int i = 0; i< text.length(); ) {
            if (text[i] == '\n') {
               addToOutput('\n');
               i++;

            } else if (text.mid(i) == "\\internal_linebr")  {
                addToOutput('\n');
                i += 8;

            } else  {
               i++;

            }
         }

         setOutput(OutputMainDoc);

      } else {
          // inContext == OutputBrief, switch from brief to main docs
         endBrief(true);
      }

      yyLineNr += text.count('\n');
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      // potential end of a JavaDoc style comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);

      if (briefEndsAtDot) {
         briefEndsAtDot = false;
         setOutput(OutputMainDoc);
      }
   }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
{
      // newline
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput('\n');

      if (text[0] == '\n') {
         ++yyLineNr;
      }
   }
	YY_BREAK
case 51:
YY_RULE_SETUP
{
      // utf-8 code point
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      // catch all for anything else
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 53:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         addToOutput('\n');
         ++yyLineNr;
      }
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
{
      // ignore unimportant characters
   }
	YY_BREAK
case 56:
YY_RULE_SETUP
{
      // ignore every else
   }
	YY_BREAK
case 57:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput('\n');

      if (text[0] == '\n') {
         ++yyLineNr;
      }
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      // the special XML characters for iwhich the CDATA section is especially used
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput('\\');
      addToOutput(text[0]);
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 61:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 62:
YY_RULE_SETUP
{
      // end of inline formula
      formulaText += "$";
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 63:
YY_RULE_SETUP
{
      // end of block formula
      formulaText += "\\]";
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
      // end of custom env formula
      formulaText += "\\end";
      formulaText += formulaEnv;
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
      // any non-special character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text;
   }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      formulaNewLines++;
      formulaText += text[0];
      yyLineNr++;
   }
	YY_BREAK
case 67:
YY_RULE_SETUP
{
      // any other character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text[0];
   }
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\enum");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 71:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text,".", "::");
      BEGIN( Comment );
   }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\namespace");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 76:
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\package");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 79:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(removeRedundantWhiteSpace(text),".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_entryName = substitute(text,".","::");
      if (current->section == Entry::PROTOCOLDOC_SEC) {
         current->m_entryName += "-p";
      }

      // prepend outer scope name
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text,".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\%s",  csPrintable(s_currentCommand));
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      // second argument, include file
      QString text = QString::fromUtf8(commentscanYYtext);
      current->setData(EntryKey::Include_File, text);
      BEGIN( ClassDocArg3 );
   }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      // third argument, include file name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->setData(EntryKey::Include_Name, text);
      BEGIN( Comment );
   }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of concept command ------------------- */
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{
      // first argument, concept name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text,".","::");

      BEGIN( Comment );
   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\concept");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of {def,add,weak} group commands --------- */
case 98:
YY_RULE_SETUP
{
      // group name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;

      // lastDefGroup.groupname = text;
      // lastDefGroup.pri = current->groupingPri();
      // the .html stuff is for Qt compatibility

      if (current->m_entryName.endsWith(".html")) {
         current->m_entryName = current->m_entryName.left(current->m_entryName.length() - 5);
      }

      current->setData(EntryKey::Member_Type, "");
      BEGIN(GroupDocArg2);
   }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{
      // line continuation
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing group name after %s", csPrintable(current->groupDocCmd()) );
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
{
      // line continuation
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
      // title (stored in type)
      QString text = QString::fromUtf8(commentscanYYtext);
      current->appendData(EntryKey::Member_Type, text.trimmed());
   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if ( current->groupDocType == Entry::GROUPDOC_NORMAL && current->getData(EntryKey::Member_Type).isEmpty()) {
         // defgroup requires second argument
         warn(yyFileName, yyLineNr, "Missing title after \\defgroup %s", csPrintable(current->m_entryName) );
      }

      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
      // title (stored in type)
      QString text = QString::fromUtf8(commentscanYYtext);
      current->appendData(EntryKey::Member_Type, text.trimmed());
   }
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 106:
YY_RULE_SETUP
{
      // first argument, page name
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_entryName = stripQuotes(text);
      current->setData(EntryKey::Member_Args, QString());

      BEGIN( PageDocArg2 );
   }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\page");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{
      // second argument; page title
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 111:
YY_RULE_SETUP
{

      QString text = QString::fromUtf8(commentscanYYtext);

      text = substitute(substitute(text, "@<","&lt;"),  "@>", "&gt;");
      text = substitute(substitute(text, "\\<","&lt;"), "\\>","&gt;");

      current->appendData(EntryKey::Member_Args, text);
   }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->appendData(EntryKey::Member_Args, text);
   }
	YY_BREAK
/* --------- handle arguments of the param command ------------ */
case 113:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addToOutput('\\');
      }

      addToOutput(text);
   }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
      addToOutput(" , ");
   }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addToOutput('\\');
      }

      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{
      // no file name specified
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
      // first argument; name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = stripQuotes(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 121:
YY_RULE_SETUP
{
      // first argument
      newXRefItemKey = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputXRef);

      BEGIN(XRefItemParam2);
   }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{
      // missing arguments
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing first argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;

      BEGIN( Comment );
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
      // second argument
      QString text = QString::fromUtf8(commentscanYYtext);
      xrefItemTitle = stripQuotes(text);
      BEGIN(XRefItemParam3);
   }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing second argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;

      BEGIN( Comment );
   }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
      // third argument
      QString text = QString::fromUtf8(commentscanYYtext);

      xrefListTitle = stripQuotes(text);
      xrefKind = XRef_Item;

      BEGIN( Comment );
   }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr,"Missing third argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;

      BEGIN( Comment );
   }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 133:
YY_RULE_SETUP
{
      // argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->setData(EntryKey::Related_Class, text);
      BEGIN( Comment );
   }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument of \\%s command", csPrintable(s_currentCommand));
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 140:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionLabel = text;
      addToOutput(text);
      s_sectionTitle.clear();

      BEGIN(SectionTitle);
   }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\section command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');

      BEGIN( Comment );
   }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
      // invalid character for section label
      warn(yyFileName, yyLineNr, "Invalid or missing section label");
      BEGIN(Comment);
   }
	YY_BREAK
case 143:
/* rule 143 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);

      addSection();
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 144:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 16;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 146:
YY_RULE_SETUP
{
      // any character without special meaning
      QString text = QString::fromUtf8(commentscanYYtext);
      s_sectionTitle += text;
      addToOutput(text);
   }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
      // unescape escaped command
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text.mid(1);
      addToOutput(text);
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      // unescape escaped character
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text[1];
      addToOutput(text);
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      // anything else
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text;
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 150:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      // we add subpage labels as a kind of "inheritance" relation to prevent
      // needing to add another list to the Entry class.

      current->extends.append(BaseInfo(text, Public, Normal));
      BEGIN(SubpageTitle);
   }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\subpage command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');

      BEGIN( Comment );
   }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
{
      // no title, end command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 153:
YY_RULE_SETUP
{
      // add title, end of command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
{
      // no title, end of command
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 155:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addAnchor(text);
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\anchor command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 157:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing anchor label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 158:
/* rule 158 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // possible ends
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (text.mid(4) == s_blockName)  {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 159:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (s_blockName == "startuml")   {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 160:
YY_RULE_SETUP
{
      // some word
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text);
   }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
   }
	YY_BREAK
case 162:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      // start of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! (s_blockName == "code" || s_blockName == "verbatim")) {
         ++s_commentCount;
      }
      addToOutput(text);
   }
	YY_BREAK
case 163:
YY_RULE_SETUP
{
      // end of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (! (s_blockName == "code" || s_blockName == "verbatim")) {
         s_commentCount--;

         if (s_commentCount < 0) {
            warn(yyFileName, yyLineNr, "Found */ without matching /* while inside a \\%s block. "
               "Perhaps there is a missing \\end%s?\n", csPrintable(s_blockName), csPrintable(s_blockName));
         }
      }
   }
	YY_BREAK
case 164:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
{
      QString endTag = "end" + s_blockName;

      if (s_blockName == "startuml") {
         endTag = "enduml";
      }

      warn(yyFileName, yyLineNr, "Reached end of comment while inside a \\%s block, check for missing \\%s tag",
                 csPrintable(s_blockName), csPrintable(endTag) );

      yyterminate();
   }
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 165:
YY_RULE_SETUP
{
      s_guardExpr  = QString::fromUtf8(commentscanYYtext);
      s_roundCount = 1;

      BEGIN(GuardExpr);
   }
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
   }
	YY_BREAK
case 167:
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
      ++s_roundCount;
   }
	YY_BREAK
case 168:
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
      --s_roundCount;

      if (s_roundCount == 0) {
         handleGuard(s_guardExpr);
      }
   }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
{
      warn(yyFileName, yyLineNr, "Invalid expression '%s' for guard", csPrintable(s_guardExpr));
      unput(commentscanYYtext[0]);
      BEGIN(GuardParam);
   }
	YY_BREAK
case 170:
YY_RULE_SETUP
{
      // parameter of if/ifnot guard
      QString text = QString::fromUtf8(commentscanYYtext);
      handleGuard(text);
   }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         ++yyLineNr;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
{
      // line continuation
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 173:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      yyLineNr += text.count('\n');
      s_spaceBeforeIf.clear();

      BEGIN(Comment);
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{
      if (! s_spaceBeforeIf.isEmpty()) {
         addToOutput(s_spaceBeforeIf);
      }

      s_spaceBeforeIf.clear();
      BEGIN(Comment);
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 177:
/* rule 177 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_guardType = Guard_IfNot;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 178:
/* rule 178 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_guardType = Guard_If;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 179:
/* rule 179 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found \\endif without matching start command");

       } else {
         GuardedSection s   = s_guards.pop();
         bool parentVisible = s.parentVisible();

         if (parentVisible) {
            s_isEnabledSection = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 180:
/* rule 180 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName, yyLineNr, "Found \\else without matching start command");

      } else {

         if (! s_isEnabledSection && s_guards.top().parentVisible()) {
            s_guards.pop();
            s_guards.push(GuardedSection(true,true));

            s_isEnabledSection = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 181:
/* rule 181 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found \\elseif without matching start command");

       } else {

         if (! s_isEnabledSection && s_guards.top().parentVisible()) {
            s_guardType = Guard_If;
            s_guards.pop();

            BEGIN( GuardParam );
         }
      }
   }
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 184:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
   }
	YY_BREAK
case 186:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 187:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 188:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount--;

      if (s_condCount < 0 )   {
         // handle conditional section around \internal, see bug607743

         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 189:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 0 ) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 190:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 1)  {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 191:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 2) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 192:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 3) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 193:
YY_RULE_SETUP
{
      BEGIN(Comment);
   }
	YY_BREAK
case 194:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 195:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle argument of name command ------- */
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
      s_memberGroupHeader += ' ';
   }
	YY_BREAK
case 198:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_memberGroupHeader  += text[0];
      current->m_entryName += text[0];
   }
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 199:
YY_RULE_SETUP
{
      // group id
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_groups.append(Grouping(text, Grouping::GROUPING_INGROUP) );
      inGroupParamFound = true;
   }
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! inGroupParamFound) {
         warn(yyFileName,yyLineNr, "Missing group name for \\ingroup command");
      }

      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 202:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
{
      // end of fn declaration, pass to langParser as a "prototype"
      QString text = QString::fromUtf8(commentscanYYtext);

      if (braceCount == 0) {
         unputString(text);

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(s_functionProto);
         }

         BEGIN( Comment );
      }
   }
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      s_functionProto += ' ';
   }
	YY_BREAK
case 205:
YY_RULE_SETUP
{
      // non-special characters
      s_functionProto += QString::fromUtf8(commentscanYYtext);
   }
	YY_BREAK
case 206:
YY_RULE_SETUP
{
      s_functionProto += QString::fromUtf8(commentscanYYtext);
      braceCount++;
   }
	YY_BREAK
case 207:
YY_RULE_SETUP
{
      s_functionProto += QString::fromUtf8(commentscanYYtext);
      braceCount--;
   }
	YY_BREAK
case 208:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
{
      // end of overload declaration, pass to langParser as a "prototype"
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      if (s_functionProto.trimmed().isEmpty()) {
         // plain overload command
         addToOutput(theTranslator->trOverloadText());
         addToOutput('\n');

      }  else   {
         // overload declaration
         makeStructuralIndicator(Entry::OVERLOADDOC_SEC);

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(s_functionProto);
         }
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      s_functionProto += ' ';
   }
	YY_BREAK
case 211:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 212:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text), Public, Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\inherit command has no argument");

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 214:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing name for \\inherit command");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 215:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text),Public,Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName,yyLineNr, "Missing argument for \\%s command", csPrintable(s_currentCommand));
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 217:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle language specific sections ------- */
case 218:
YY_RULE_SETUP
{
      // language switch
      QString text = QString::fromUtf8(commentscanYYtext);
      QString langId = text.mid(2);

      if (langId.isEmpty() || Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) == 0) {
         // enable language specific section
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 219:
YY_RULE_SETUP
{
      /* any character not a *, @, backslash or new line */
   }
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
{
      // new line in verbatim block
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 221:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 222:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addCite();
      addToOutput(text);
      BEGIN(Comment);
   }
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\cite command has no label");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 224:
YY_RULE_SETUP
{
      // invalid character for cite label
      warn(yyFileName,yyLineNr, "Invalid or missing cite label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');

      setOutput(OutputMainDoc);
      addToOutput(" \\copydetails ");
      addToOutput(s_copyDocArg);

      addToOutput("\n");

      BEGIN(Comment);
   }
	YY_BREAK
case 226:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addToOutput(text);
   }
	YY_BREAK
case 227:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addToOutput(text);
   }
	YY_BREAK
case 228:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(ConceptDocArg1):
			case YY_STATE_EOF(ConceptDocArg2):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(ParamArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
			case YY_STATE_EOF(CdataSection):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1625 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1625 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1624);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static bool handleBrief(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   setOutput(OutputBrief);
   return false;
}

static bool handleProperty(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   s_functionProto.clear();
   braceCount = 0;
   BEGIN(FnParam);

   current->mtype = MethodType::Property;

   return stop;
}

static bool handleFn(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   s_functionProto.clear();
   braceCount = 0;
   BEGIN(FnParam);

   return stop;
}

static bool handleDef(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::DEFINEDOC_SEC);
   s_functionProto.clear();
   BEGIN(FnParam);

   return stop;
}

static bool handleOverload(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   s_functionProto.clear();
   BEGIN(OverloadParam);

   return false;
}

static bool handleEnum(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::ENUMDOC_SEC);
   BEGIN(EnumDocArg1);

   return stop;
}

static bool handleDefGroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_NORMAL;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleAddToGroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_ADD;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleWeakGroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_WEAK;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleNamespace(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
   BEGIN( NameSpaceDocArg1 );

   return stop;
}

static bool handlePackage(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
   BEGIN( PackageDocArg1 );

   return stop;
}

static bool handleClass(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop = makeStructuralIndicator(Entry::CLASSDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleConcept(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::CONCEPTDOC_SEC);
   BEGIN( ConceptDocArg1 );

   return stop;
}

static bool handleHeaderFile(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   BEGIN( ClassDocArg2 );
   return false;
}

static bool handleProtocol(const QString &str, const QStringList &list)
{
   (void) list;

   // Obj-C protocol
   bool stop = makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleCategory(const QString &str, const QStringList &list)
{
   (void) list;

   // Obj-C category
   bool stop = makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
   s_currentCommand = str;
   BEGIN( CategoryDocArg1 );

   return stop;
}

static bool handleUnion(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop = makeStructuralIndicator(Entry::UNIONDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleStruct(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleInterface(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop = makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleIdlException(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop = makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handlePage(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::PAGEDOC_SEC);
   BEGIN( PageDocArg1 );

   return stop;
}

static bool handleMainpage(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);

   if (stop) {
      current->m_entryName = QString();
   } else {
      current->m_entryName = "mainpage";
   }

   BEGIN( PageDocArg2 );

   return stop;
}

static bool handleFile(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::FILEDOC_SEC);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );

   return stop;
}

static bool handleParam(const QString &str, const QStringList &list)
{
  // process param and retval arguments to escape leading underscores
  // in case of markdown processing

   (void) str;
   (void) list;

   addToOutput("@param ");
   BEGIN( ParamArg1 );

   return false;
}

static bool handleRetval(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   addToOutput("@retval ");
   BEGIN( ParamArg1 );

   return false;
}

static bool handleDir(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::DIRDOC_SEC);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );

   return stop;
}

static bool handleExample(const QString &str, const QStringList &list)
{
   (void) str;

   Entry::Sections section = Entry::EXAMPLE_SEC;

   for (auto item : list) {
      QString opt = item.trimmed().toLower();

      if (opt == "lineno") {
         section = Entry::EXAMPLE_LINENO_SEC;

      } else {
         warn(yyFileName, yyLineNr, "Unsupported option '%s' for command '\\%s'", csPrintable(opt), csPrintable(str));
      }
   }

   bool stop = makeStructuralIndicator(section);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );

   return stop;
}

static bool handleDetails(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (inContext != OutputBrief) {
      // treat @details outside brief description as a new paragraph
      addToOutput("\\internal_linebr\\internal_linebr");
   }

   setOutput(OutputMainDoc);

   return false;
}

static bool handleName(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MEMBERGRP_SEC);

   if (! stop) {
      s_memberGroupHeader.resize(0);
      BEGIN( NameParam );

      if (s_memberGroupId != DOX_NOGROUP) {
         // end of previous member group
         closeGroup(current, yyFileName, yyLineNr, true, true);
       }
   }

   return stop;
}

static bool handleTodo(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Todo;
   setOutput(OutputXRef);
   xrefKind = XRef_Todo;

   return false;
}

static bool handleTest(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Test;
   setOutput(OutputXRef);
   xrefKind = XRef_Test;

   return false;
}

static bool handleBug(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Bug;
   setOutput(OutputXRef);
   xrefKind = XRef_Bug;

   return false;
}

static bool handleDeprecated(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Deprecated;
   setOutput(OutputXRef);
   xrefKind = XRef_Deprecated;

   return false;
}

static bool handleXRefItem(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Item;
   BEGIN(XRefItemParam1);

   return false;
}

static bool handleParBlock(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_insideParBlock)   {
      warn(yyFileName,yyLineNr, "Found \\parblock command while already in a parblock");
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addToOutput("@parblock ");
   s_insideParBlock = true;

   return false;
}

static bool handleEndParBlock(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (! s_insideParBlock) {
      warn(yyFileName,yyLineNr, "Found \\endparblock command without matching \\parblock");
   }

   addToOutput("@endparblock");
   setOutput(OutputMainDoc);    // to end a parblock inside a xrefitem like context
   s_insideParBlock = false;

   return false;
}

static bool handleRelated(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName,yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = Simple;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleRelatedAlso(const QString &str, const QStringList &list)
{

   (void) list;

   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName, yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = Duplicate;
   s_currentCommand = str;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleMemberOf(const QString &str, const QStringList &list)
{
   (void) list;

   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName, yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = MemberOf;
   s_currentCommand = str;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleRefItem(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   addToOutput("@refitem ");
   BEGIN(LineParam);

   return false;
}

static bool handleSection(const QString &str, const QStringList &list)
{
   (void) list;

   setOutput(OutputMainDoc);
   addToOutput("@" + str + " ");
   BEGIN(SectionLabel);

   if (str == "section") {
      s_sectionLevel = 1;

   } else if (str == "subsection") {
      s_sectionLevel = 2;

   } else if (str == "subsubsection") {
      s_sectionLevel = 3;

   } else if (str == "paragraph") {
      s_sectionLevel = 4;

   }

   return false;
}

static bool handleSubpage(const QString &str, const QStringList &list)
{
   (void) list;

   if (current->section != Entry::EMPTY_SEC && current->section != Entry::PAGEDOC_SEC &&
         current->section != Entry::MAINPAGEDOC_SEC) {

      warn(yyFileName, yyLineNr, "Found \\subpage command in a comment block that is not marked as a page");
  }

  if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.clear();
  }

   addToOutput("@" + str + " ");
   BEGIN(SubpageLabel);

   return false;
}

static bool handleAnchor(const QString &str, const QStringList &list)
{
   (void) list;

   addToOutput("@" + str + " ");
   BEGIN(AnchorLabel);

   return false;
}

static bool handleCite(const QString &str, const QStringList &list)
{
   (void) list;

   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("@" + str + " ");
   BEGIN(CiteLabel);

   return false;
}

static bool handleFormatBlock(const QString &str, const QStringList &list)
{
   if (list.isEmpty()) {
      addToOutput("@" + str + " ");

   } else {
      addToOutput("@" + str + "{" + list.join(",") + "} ");
   }

   s_blockName    = str;
   s_commentCount = 0;
   BEGIN(FormatBlock);

   return false;
}

static bool handleAddIndex(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   addToOutput("@addindex ");

   BEGIN(LineParam);

   return false;
}

static bool handleIf(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   s_isEnabledSection = false;
   s_guardType        = Guard_If;
   s_spaceBeforeIf    = s_spaceBeforeCmd;
   BEGIN(GuardParam);

   return false;
}

static bool handleIfNot(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   s_isEnabledSection = false;
   s_guardType        = Guard_IfNot;
   s_spaceBeforeIf    = s_spaceBeforeCmd;

   BEGIN(GuardParam);

   return false;
}

static bool handleElseIf(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      s_guardType     = s_isEnabledSection ? Guard_Skip : Guard_If;
      s_spaceBeforeIf = s_spaceBeforeCmd;
      BEGIN(GuardParam);
   }

   return false;
}

static bool handleElse(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      s_spaceBeforeIf = s_spaceBeforeCmd;
      BEGIN( SkipGuardedSection );
   }

   return false;
}

static bool handleEndIf(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_guards.isEmpty())   {
      warn(yyFileName,yyLineNr, "Found \\endif without matching start command");

   } else {
      s_guards.pop();
   }

   s_isEnabledSection = false;
   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   BEGIN( GuardParamEnd );

   return false;
}

static bool handleIngroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   inGroupParamFound = false;
   BEGIN( InGroupParam );

   return false;
}

static bool handleNoSubGrouping(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->subGrouping = false;

   return false;
}

static bool handleShowInitializer(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->initLines = 100000;  // ON
   return false;
}

static bool handleHideInitializer(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->initLines = 0;

   return false;
}

static bool handleCallgraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callGraph = true;

   return false;
}

static bool handleHideCallgraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callGraph = false;
   return false;
}

static bool handleCallergraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callerGraph = true;
   return false;
}

static bool handleHideCallergraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callerGraph = false;

   return false;
}

static bool handleReferencedByRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencedByRelation = true;

   return false;
}

static bool handleHideReferencedByRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencedByRelation = false;

   return false;
}

static bool handleReferencesRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencesRelation = true;

   return false;
}

static bool handleHideReferencesRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencesRelation = false;

   return false;
}

static bool handleInternal(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_internalDocs) {
      addToOutput(" \\internal ");
      s_processInternalDocs = true;

   } else {
      // make sure some whitespace before an \internal command
      // is not treated as "documentation"

      if (current->getData(EntryKey::Main_Docs).trimmed().isEmpty()) {
         current->setData(EntryKey::Main_Docs, QString());
      }

      s_condCount = 0;
      BEGIN( SkipInternal );
  }

  return false;
}

static bool handleStatic(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   endBrief();
   current->stat = true;

   return false;
}

static bool handlePure(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   endBrief();
   current->virt = Specifier::Pure;

   return false;
}

static bool handlePrivate(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = Protection::Private;

   return false;
}

static bool handlePrivateSection(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = (s_protection = Protection::Private);

   return false;
}

static bool handleProtected(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = Protection::Protected;

   return false;
}

static bool handleProtectedSection(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = (s_protection = Protection::Protected);

   return false;
}

static bool handlePublic(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = Protection::Public;

   return false;
}

static bool handlePublicSection(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = (s_protection = Protection::Public);
   return false;
}

static bool handleToc(const QString &str, const QStringList &list)
{
   (void) str;

   if (current->section == Entry::PAGEDOC_SEC || current->section == Entry::MAINPAGEDOC_SEC) {

      for (auto &item : list) {
         QString option = item.trimmed().toLower();

         int level = 5;
         int i     = option.find(':');

         if (i > 0) {
            // found something like "html:4"
            bool ok = false;
            level = option.mid(i + 1).toInteger<int>(&ok);

            if (ok) {
               level  = (level >  5 ? 5 : level);
               level  = (level <= 0 ? 5 : level);
               option = option.left(i).trimmed();

            } else {
               warn(yyFileName, yyLineNr, "Unknown option level specified with \\tableofcontents: `%s'", csPrintable(option));
               option = "";
            }
         }

         if (! option.isEmpty()) {
            if (option == "html") {
               current->localToc.enableHtml(level);

            } else if (option == "latex") {
               current->localToc.enableLatex(level);

            } else if (option == "xml") {
               current->localToc.enableXml(level);

            } else if (option == "docbook") {
               current->localToc.enableDocbook(level);

            } else {
               warn(yyFileName, yyLineNr, "Unknown option specified with \\tableofcontents: `%s'", csPrintable(option));
            }
         }
      }

      if (current->localToc.nothingEnabled()) {
         // for backward compatibility
         current->localToc.enableHtml(5);
         current->localToc.enableXml(5);
      }
   }

   return false;
}

static bool handleInherit(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   BEGIN(InheritParam);

   return false;
}

static bool handleExtends(const QString &str, const QStringList &list)
{
   (void) list;
   s_currentCommand = str;
   BEGIN(ExtendsParam);

   return false;
}

static bool handleCopyBrief(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (current->getData(EntryKey::Brief_Docs).isEmpty() && current->getData(EntryKey::Main_Docs).isEmpty()) {

      // if we do not have a brief or detailed description yet,
      // then the @copybrief should end up in the brief description.
      // otherwise it will be copied inline (see bug691315 & bug700788)

      setOutput(OutputBrief);
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copybrief ");
   return false;
}

static bool handleCopyDetails(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   setOutput(OutputMainDoc);

   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copydetails ");
   return false;
}

static bool handleCopyDoc(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   setOutput(OutputBrief);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copybrief ");
   s_copyDocArg.resize(0);
   BEGIN(CopyDoc);

   return false;
}

static void checkFormula()
{
   if (YY_START == ReadFormulaShort || YY_START == ReadFormulaLong) {
      warn(yyFileName, yyLineNr, "End of comment block while inside formula.");
   }
}

// main entry point
bool parseCommentBlock(ParserInterface *parser, QSharedPointer<Entry> curEntry, const QString &comment,
                  const QString &fileName, int &lineNr, bool isBrief, bool isAutoBrief, bool isInbody,
                  Protection &r_protection, int &r_position, bool &r_newEntryNeeded )
{
   initParser();
   s_guards.clear();

   if (comment.isEmpty()) {
      // avoid empty strings
      return false;
   }

   if (Doxy_Globals::markdownSupport) {
      s_inputString = processMarkdown(fileName, lineNr, QSharedPointer<Entry>(), comment);

      QStringView tmp(s_inputString);

      while (tmp.startsWith(" ")) {
         tmp = tmp.mid(1);
      }

      while (tmp.startsWith("\n")) {
         tmp = tmp.mid(1);
      }

      if (tmp.startsWith("<br>")) {
         tmp = tmp.mid(4);
      }

      s_inputString = QString(tmp);

   } else {
      s_inputString  = comment;
   }

   s_inputString.append(" ");

   yyFileName       = fileName;
   yyLineNr         = lineNr;
   langParser       = parser;
   current          = curEntry;
   current->docLine = (lineNr > 1 ? lineNr : 1);

   briefEndsAtDot   = isAutoBrief;
   inBody           = isInbody;
   s_protection     = r_protection;
   s_inputPosition  = r_position;
   s_outputXRef     = QString();
   xrefKind         = XRef_None;

   xrefAppendFlag   = false;
   insidePre        = false;
   s_needNewEntry   = false;
   s_parseMore      = false;

   if (! isBrief && ! isAutoBrief && ! current->getData(EntryKey::Main_Docs).isEmpty()) {
      // add newline separator between detailed comment blocks
      current->appendData(EntryKey::Main_Docs, "\n");
   }

   if (isBrief || isAutoBrief) {
      setOutput(OutputBrief);

   } else {
      setOutput(OutputMainDoc);
   }

   s_condCount    = 0;
   s_sectionLevel = 0;

   s_spaceBeforeCmd.clear();
   s_spaceBeforeIf.clear();

   if (! current->getData(EntryKey::Main_Docs).isEmpty()) {
      // separate detailed doc fragments
      current->appendData(EntryKey::Main_Docs,  "\n\n");
   }

   if (! current->getData(EntryKey::Inbody_Docs).isEmpty() && isInbody) {
      // separate in body fragments
      current->appendData(EntryKey::Inbody_Docs, "\n\n");
   }

   commentscanYYrestart(commentscanYYin);
   BEGIN( Comment );
   commentscanYYlex();

   setOutput(OutputMainDoc);

   if (YY_START == OverloadParam) {
      // comment ended with \overload
      addToOutput(theTranslator->trOverloadText());
   }

   if (! s_guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Documentation block ended in the middle of a conditional section");
   }

   if (s_insideParBlock) {
      warn(yyFileName, yyLineNr, "Documentation block ended while inside a \\parblock. Missing \\endparblock");
   }

   // removes blank lines from the detailed docs
   current->setData(EntryKey::Main_Docs, trimEmptyLines(current->getData(EntryKey::Main_Docs), current->docLine));

   if (current->section == Entry::FILEDOC_SEC && current->getData(EntryKey::Main_Docs).isEmpty()) {
      // to allow a comment block with just a @file command
      current->setData(EntryKey::Main_Docs, "\n\n");
   }

   if (current->section == Entry::MEMBERGRP_SEC && s_memberGroupId == DOX_NOGROUP) {
      // @name section but no group started yet
      openGroup(current, yyFileName, yyLineNr, true);
   }

   checkFormula();
   r_protection = s_protection;

   groupAddDocs(curEntry);
   r_newEntryNeeded = s_needNewEntry;

   if (s_parseMore && r_position == s_inputPosition) {
      // did not proceed during this call, do not continue or there will be an infinate loop
      s_parseMore = false;
   }

   if (s_parseMore) {
      r_position = s_inputPosition;
   } else {
      r_position = 0;
   }

   lineNr = yyLineNr;

   return s_parseMore;
}

void groupEnterFile(const QString &fileName, int)
{
   s_openCount = 0;
   s_autoGroupStack.clear();
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupDocs.clear();
   s_memberGroupRelates.clear();
   s_compoundName = fileName;
}

void groupLeaveFile(const QString &fileName, int line)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();

   if (! s_autoGroupStack.isEmpty()) {
      warn(fileName, line, "End of file while inside a group\n");

   } else if (s_openCount > 0)  {
      warn(fileName, line, "End of file with unbalanced group command\n");
   }
}

void groupEnterCompound(const QString &fileName, int line, const QString &name)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      warn(fileName, line, "Try to put compound %s inside a member group\n", csPrintable(name));
   }

   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();
   s_compoundName = name;

   int i = s_compoundName.indexOf('(');

   if (i != -1) {
      // strip category (Obj-C)
      s_compoundName=s_compoundName.left(i);
   }

   if (s_compoundName.isEmpty()) {
      s_compoundName=fileName;
   }
}

void groupLeaveCompound(const QString &, int, const QString &)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);
   s_compoundName.resize(0);
}

static int findExistingGroup(int &groupId, const QSharedPointer<MemberGroupInfo> info)
{
   for (auto di = Doxy_Globals::memGrpInfoDict.begin(); di != Doxy_Globals::memGrpInfoDict.end(); ++di) {

      auto mi = *di;

      if (s_compoundName == mi->compoundName && ! mi->header.isEmpty() &&
               mi->header.compare(info->header, Qt::CaseInsensitive) == 0) {

         // same file or scope, not a nameless group, same header name
         return (int)di.key();    // put the item in this group
      }
   }

   groupId++; // start new group
   return groupId;
}

void openGroup(QSharedPointer<Entry> e, const QString &, int, bool forceOpen)
{
   if (! forceOpen) {
      ++s_openCount;
   }

   if (e->section == Entry::GROUPDOC_SEC) {
      // auto group
      s_autoGroupStack.push( QMakeShared<Grouping>(e->m_entryName, e->groupingPri()) );

   } else {
      // start of a member group

      if (s_memberGroupId == DOX_NOGROUP) {
         // no group started yet
         static int curGroupId = 0;

         QSharedPointer<MemberGroupInfo> info = QMakeShared<MemberGroupInfo>();

         info->header = s_memberGroupHeader.trimmed();
         info->compoundName = s_compoundName;
         s_memberGroupId = findExistingGroup(curGroupId, info);

         Doxy_Globals::memGrpInfoDict.insert(s_memberGroupId, info);

         s_memberGroupRelates = e->getData(EntryKey::Related_Class);
         e->mGrpId = s_memberGroupId;
      }
   }
}

void closeGroup(QSharedPointer<Entry> e, const QString &fileName, int line, bool isInline, bool forceClose)
{
   if (! forceClose) {

      if (s_openCount < 1) {
         warn(fileName, line, "Unbalanced Group Command");
      } else {
         --s_openCount;
      }
   }

   if (s_memberGroupId != DOX_NOGROUP) {
      // end of member group

      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         // known group
         info->doc     = s_memberGroupDocs;
         info->docFile = fileName;
         info->docLine = line;
      }

      s_memberGroupId = DOX_NOGROUP;
      s_memberGroupRelates.resize(0);
      s_memberGroupDocs.resize(0);

      if (! isInline) {
         e->mGrpId = DOX_NOGROUP;
      }

   } else if (! s_autoGroupStack.isEmpty()) {
      // end of auto group
      QSharedPointer<Grouping> grp = s_autoGroupStack.pop();

      if (! isInline && ! e->m_groups.empty()) {
         e->m_groups.removeLast();
      }

      if (! isInline) {
         initGroupInfo(e);
      }
   }
}

void initGroupInfo(QSharedPointer<Entry> e)
{
   e->mGrpId  = s_memberGroupId;
   e->setData(EntryKey::Related_Class, s_memberGroupRelates);

   if (! s_autoGroupStack.isEmpty()) {
      e->m_groups.append(*s_autoGroupStack.top());
   }
}

static void groupAddDocs(QSharedPointer<Entry> e)
{
   if (e->section == Entry::MEMBERGRP_SEC) {
      s_memberGroupDocs = e->getData(EntryKey::Brief_Docs).trimmed();

      e->setData(EntryKey::Main_Docs, trimEmptyLines(e->getData(EntryKey::Main_Docs), e->docLine));

      if (! s_memberGroupDocs.isEmpty() && ! e->getData(EntryKey::Main_Docs).isEmpty()) {
         s_memberGroupDocs+="\n\n";
      }

      s_memberGroupDocs += e->getData(EntryKey::Main_Docs);
      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         info->doc      = s_memberGroupDocs;
         info->docFile  = e->getData(EntryKey::MainDocs_File);
         info->docLine  = e->docLine;
         info->setRefItems(e->m_specialLists);
      }

      e->setData(EntryKey::Brief_Docs, "");
      e->setData(EntryKey::Main_Docs,  "");
   }
}

static void handleGuard(const QString &expr)
{
   CondParser prs;
   bool sectionEnabled = prs.parse(yyFileName, yyLineNr, expr.trimmed());
   bool parentEnabled  = true;

   if (! s_guards.isEmpty()) {
      parentEnabled = s_guards.top().isEnabled();
   }

   if (parentEnabled) {
      if ( (sectionEnabled && s_guardType == Guard_If) || (! sectionEnabled && s_guardType == Guard_IfNot)) {
         // section is visible
         s_guards.push(GuardedSection(true, true));
         s_isEnabledSection = true;
         BEGIN( GuardParamEnd );

      } else {
         // section is invisible
         if (s_guardType != Guard_Skip) {
            s_guards.push(GuardedSection(false, true));
         }

         BEGIN( SkipGuardedSection );
      }

   } else {
      // invisible because of parent
      s_guards.push(GuardedSection(false, false));
      BEGIN( SkipGuardedSection );
   }
}

