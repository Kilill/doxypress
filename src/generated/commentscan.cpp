/*************************************************************************
 *
 * Copyright (C) 2014-2016 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License version 2
 * is hereby granted. No representations are made about the suitability of
 * this software for any purpose. It is provided "as is" without express or
 * implied warranty. See the GNU General Public License for more details.
 *
 * Documents produced by DoxyPress are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 205
#define YY_END_OF_BUFFER 206
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[761] =
    {   0,
       79,   79,  123,  123,  137,  137,  152,  152,  196,  196,
      143,  143,  206,  205,   46,  205,   46,  205,   45,  205,
       46,  205,   46,  205,   46,  205,   46,  205,   44,   46,
      205,   46,  205,   46,  205,   27,   46,  205,   46,  205,
       46,  205,   46,  205,   46,  205,   46,  205,   46,  205,
       44,   46,  205,   46,  205,   46,  205,   92,  205,   91,
      205,   92,  205,   89,   92,  205,   92,  205,   92,  205,
      205,   93,  205,  113,  205,  112,  205,  113,  205,  110,
      113,  205,  113,  205,   74,  205,   74,  205,   73,  205,
       74,  205,   74,  205,   74,  205,   70,   74,  205,   74,

      205,   74,  205,   78,  205,   77,  205,   78,  205,   75,
       78,  205,   78,  205,   78,  205,   78,  205,   82,  205,
       81,  205,   79,   82,  205,   79,   82,  205,   82,  205,
       79,   82,  205,   79,   82,  205,   82,  205,   74,  205,
       73,  205,   74,  205,   74,  205,   74,  205,   74,  205,
       74,  205,  101,  205,  100,  205,   98,  101,  205,  101,
      205,  105,  205,  104,  205,  105,  205,  105,  205,  109,
      205,  108,  205,  109,  205,  109,  205,   97,  205,   94,
      205,   97,  205,   95,   97,  205,   97,  205,   97,  205,
       60,  205,   59,  205,   60,  205,   57,   60,  205,   60,

      205,   64,  205,   64,  205,   63,  205,   64,  205,   64,
      205,   64,  205,   61,   64,  205,   64,  205,   64,  205,
       68,  205,   67,  205,   68,  205,   65,   68,  205,   68,
      205,   85,  205,   83,  205,  205,   87,  205,   88,  205,
      205,  119,  205,  118,  205,  117,  119,  205,  119,  205,
      123,  126,  205,  120,  205,  123,  126,  205,  126,  205,
      126,  205,  128,  205,  127,  205,  205,  131,  205,  131,
      205,  129,  205,  131,  205,  131,  205,  137,  141,  205,
      138,  205,  141,  205,  141,  205,  141,  205,  141,  205,
      141,  205,  116,  205,  114,  205,  116,  205,  150,  205,

      150,  205,  148,  205,  142,  150,  205,  147,  150,  205,
      150,  205,  153,  205,  152,  153,  205,  151,  205,  153,
      205,  160,  161,  205,  159,  205,  161,  205,  161,  205,
      161,  205,  171,  172,  205,  162,  205,  172,  205,  172,
      205,  172,  205,  175,  205,  173,  205,  175,  205,  179,
      205,  177,  205,  176,  179,  205,  179,  205,  182,  185,
      205,  180,  205,  183,  185,  205,  184,  185,  205,  185,
      205,  185,  205,  188,  205,  186,  205,  188,  205,  191,
      205,  190,  205,  191,  205,  189,  191,  205,  191,  205,
      194,  205,  193,  205,  194,  205,  192,  194,  205,  194,

      205,   54,   56,  205,   55,  205,   56,  205,   56,  205,
      134,  205,  133,  205,  132,  134,  205,  134,  205,   49,
       50,  205,   48,  205,   50,  205,   50,  205,  196,  198,
      205,  197,  205,  198,  205,  198,  205,  198,  205,  201,
      205,  200,  205,  199,  201,  205,  201,  205,  203,  204,
      205,  202,  205,  204,  205,  143,  205,  143,  146,  205,
      144,  205,  145,  205,   43,    4,   36,   38,   40,   38,
       26,   26,   18,   26,   18,   18,   24,   25,   20,   26,
       27,   18,   18,   18,   18,   30,   31,   36,   28,   89,
       89,   90,   89,   93,  110,  110,  111,   70,   70,   72,

       70,   75,   75,   76,   75,   79,   79,   79,   79,   79,
       79,   80,   79,   98,   99,  102,  103,  107,  106,  107,
       95,   95,   96,   95,   57,   57,   57,   58,   61,   61,
       62,   61,   65,   65,   66,   83,   84,   87,   86,  117,
      123,  120,  123,  125,  125,  122,  127,  130,  137,  140,
      139,  115,  142,  147,  149,  152,  151,  160,  171,  174,
      176,  178,  182,  181,  187,  189,  189,  192,  192,   54,
      132,   49,  196,  195,  199,  203,  143,   26,   37,   35,
       42,   38,   42,   42,   42,   38,   42,   42,   39,    6,
       34,    1,    1,    2,   18,   18,   22,   23,   20,    5,

       18,   18,   32,   35,   29,   89,   89,   70,   75,   75,
       79,   79,   79,   95,   95,   57,   57,   57,   57,   61,
       65,  124,   51,   52,   53,   47,  195,  199,   42,   42,
       16,   33,    1,   19,    2,   18,   18,   18,   89,   69,
       75,   79,   79,   71,   95,   57,   57,   57,   65,  124,
      155,  163,   47,  199,   15,   41,    6,   13,   18,   21,
       18,   18,   89,   75,   79,   95,    3,   14,    7,   18,
       21,   18,   18,   89,   75,   79,   95,   83,  157,  165,
       18,   18,   18,   89,   75,   79,   95,  136,  156,  154,
      164,   18,   18,   18,   89,   91,  112,   73,   75,   77,

       79,   81,  100,  104,  108,   94,   95,   59,   63,   67,
       85,   88,  118,  121,  128,  129,  135,  138,  114,  148,
      158,  159,  162,  173,  177,  180,  186,  190,  193,  133,
       48,  197,  200,  202,   12,    9,    8,   18,   18,    5,
       18,  166,   11,   10,   18,   18,   18,   18,  169,   17,
       18,   17,   18,  170,  167,   17,   18,  170,  168,   43
    } ;

static yyconst flex_int16_t yy_accept[1141] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   11,
       11,   11,   11,   12,   13,   14,   15,   17,   19,   21,
       23,   25,   27,   29,   32,   34,   36,   39,   41,   43,

       45,   47,   49,   51,   54,   56,   58,   60,   62,   64,
       67,   69,   71,   72,   74,   76,   78,   80,   83,   85,
       87,   89,   91,   93,   95,   97,  100,  102,  104,  106,
      108,  110,  113,  115,  117,  119,  121,  123,  126,  129,
      131,  134,  137,  139,  141,  143,  145,  147,  149,  151,
      153,  155,  157,  160,  162,  164,  166,  168,  170,  172,
      174,  176,  178,  180,  182,  184,  187,  189,  191,  193,
      195,  197,  200,  202,  204,  206,  208,  210,  212,  214,
      217,  219,  221,  223,  225,  227,  230,  232,  234,  236,
      237,  239,  241,  242,  244,  246,  249,  251,  254,  256,

      259,  261,  263,  265,  267,  268,  270,  272,  274,  276,
      278,  281,  283,  285,  287,  289,  291,  293,  295,  297,
      299,  301,  303,  305,  308,  311,  313,  315,  318,  320,
      322,  325,  327,  329,  331,  333,  336,  338,  340,  342,
      344,  346,  348,  350,  352,  354,  357,  359,  362,  364,
      367,  370,  372,  374,  376,  378,  380,  382,  384,  386,
      389,  391,  393,  395,  397,  400,  402,  405,  407,  409,
      411,  413,  415,  418,  420,  423,  425,  427,  429,  432,
      434,  436,  438,  440,  442,  444,  447,  449,  452,  454,
      456,  458,  461,  463,  465,  465,  465,  465,  465,  466,

      466,  466,  467,  467,  467,  467,  467,  467,  468,  469,
      470,  470,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  472,  472,  473,  474,
      475,  476,  477,  478,  479,  481,  482,  482,  483,  484,
      485,  486,  486,  486,  486,  486,  486,  486,  487,  488,
      489,  489,  490,  490,  490,  490,  490,  490,  491,  492,
      492,  492,  492,  493,  494,  494,  495,  496,  496,  497,
      497,  497,  498,  498,  498,  498,  498,  498,  499,  499,
      499,  500,  500,  500,  501,  501,  501,  501,  502,  502,
      503,  504,  504,  504,  504,  505,  506,  506,  507,  508,

      508,  509,  510,  511,  511,  511,  512,  512,  513,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  515,  515,  516,  516,  516,  517,  517,
      519,  519,  519,  520,  520,  521,  521,  521,  522,  523,
      523,  523,  523,  524,  525,  526,  526,  526,  527,  527,
      528,  528,  529,  529,  529,  529,  529,  529,  530,  530,
      530,  531,  531,  532,  532,  532,  532,  533,  534,  534,
      535,  535,  536,  536,  537,  537,  537,  538,  538,  539,
      539,  540,  540,  541,  541,  542,  543,  544,  544,  545,
      546,  546,  547,  547,  548,  548,  548,  548,  548,  549,

      549,  550,  551,  552,  552,  552,  552,  553,  553,  553,
      554,  555,  555,  556,  556,  557,  558,  558,  558,  559,
      559,  559,  559,  560,  560,  560,  560,  560,  560,  560,
      561,  561,  562,  562,  563,  563,  564,  564,  565,  565,
      565,  566,  566,  567,  567,  568,  568,  568,  569,  569,
      570,  570,  570,  571,  571,  571,  572,  572,  573,  573,
      573,  574,  575,  575,  576,  576,  576,  577,  577,  578,
      579,  579,  579,  579,  579,  580,  581,  582,  584,  585,
      586,  588,  589,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  591,  591,  591,  591,  591,  591,  592,

      593,  594,  595,  596,  597,  598,  599,  599,  600,  601,
      602,  603,  603,  603,  603,  603,  604,  605,  605,  606,
      607,  607,  608,  608,  608,  608,  608,  608,  609,  610,
      610,  611,  612,  612,  613,  613,  614,  614,  614,  614,
      614,  614,  614,  615,  615,  616,  617,  618,  619,  620,
      620,  620,  621,  621,  622,  622,  622,  622,  622,  622,
      622,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  624,  625,
      626,  626,  626,  627,  627,  628,  628,  629,  629,  629,

      629,  629,  629,  629,  630,  631,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  633,
      634,  635,  636,  637,  637,  637,  638,  639,  639,  639,
      639,  640,  640,  640,  641,  641,  641,  642,  643,  643,
      644,  645,  645,  645,  645,  646,  646,  647,  648,  649,
      649,  649,  650,  650,  650,  650,  650,  650,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  652,
      652,  652,  652,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  654,  654,  654,  655,
      655,  655,  655,  656,  656,  656,  657,  657,  657,  657,

      657,  657,  657,  659,  659,  659,  659,  660,  661,  662,
      663,  663,  664,  664,  664,  665,  666,  666,  666,  666,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  668,  669,  669,
      669,  669,  669,  670,  670,  670,  670,  670,  671,  672,
      673,  674,  675,  675,  675,  676,  677,  677,  677,  677,
      678,  678,  678,  678,  678,  678,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  680,  680,
      680,  680,  680,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      682,  683,  684,  685,  685,  685,  686,  687,  687,  687,
      687,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  690,  691,  691,
      691,  692,  692,  692,  692,  692,  692,  692,  692,  692,

      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  693,  694,  695,  697,  698,  699,
      701,  703,  704,  705,  706,  708,  709,  710,  711,  712,
      713,  714,  715,  716,  717,  717,  718,  718,  718,  718,
      718,  718,  718,  718,  719,  720,  721,  722,  723,  723,
      723,  723,  723,  723,  724,  725,  726,  727,  728,  729,
      730,  731,  732,  733,  734,  735,  735,  735,  735,  736,
      737,  738,  739,  740,  741,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  743,  743,  743,  744,
      745,  745,  745,  746,  746,  747,  747,  747,  747,  747,

      747,  747,  747,  747,  747,  747,  747,  747,  748,  748,
      749,  749,  749,  749,  749,  749,  749,  750,  750,  750,
      752,  752,  754,  754,  754,  755,  756,  756,  758,  758,
      758,  759,  759,  759,  759,  759,  759,  760,  761,  761
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   32,   32,   36,   37,   38,   39,   40,
       32,   41,   32,   42,   43,   32,   32,   32,   32,   32,
       44,   45,   46,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   32,   57,   58,   59,   60,
       61,   62,   32,   63,   64,   65,   66,   67,   68,   69,
       70,   32,   71,   72,   73,   74,    1,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
        7,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       18,   18,   19,   20,   21,   22,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,    1,   24,    1,   25,   23,   23,   23,
       23,   23,   23,   23,   23,   26,   23,   23,   23,   27,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       28,   29,   30,   31,   32
    } ;

static yyconst flex_int16_t yy_base[1373] =
    {   0,
        0,    0,    0,   74,  146,  220, 5015, 5014,  294,    0,
      369,    0,  444,  518,  592,  666,  740,    0,  815,    0,
       74,   75,   77,   80,  890,  964, 1038,    0, 1113,    0,
     1188,    0, 1263,    0,   87,   90, 1338,    0,   91,   95,
     1413,    0,  109,  121,  158,  183,   82,   96, 1488, 1563,
      128,  140,  190,  205,  237,  243,   99,  112, 1638,    0,
      244,  452,  131,  134, 1713,    0, 1788,    0,  234,  449,
      456,  458, 1863,    0,  196,  463,  467,  469, 1938, 2012,
      135,  136,  193,  246, 5015, 9593, 9593,  500,  209, 5007,
     5003, 4985,  181,  531, 2081, 2140,  553, 2207,  603, 2280,

       98,  250,  625,  690,  478,  626, 9593, 9593, 5003,  468,
      488, 1503, 5006, 9593, 9593, 9593,    0,   90,  556, 9593,
      549,  697,  919, 1526, 4985,  915,  575,  269, 9593, 9593,
     5000,  537,  616, 4981, 1578, 9593, 9593, 2352,  934,  977,
     1587, 9593, 2043,  927, 1001, 1967, 2089, 4981, 1009,  281,
     9593, 9593,    0,  657, 9593, 9593, 4996,  944, 9593, 9593,
     4990, 1537, 9593, 9593, 4989, 1500, 1572, 2136, 9593, 9593,
        0, 1984, 1551, 9593, 1976, 2049, 2099, 2166, 4972, 2202,
     1993,  719, 9593, 9593,    0, 4976, 2071, 9593, 4968, 2125,
        0, 9593, 2174, 9593, 9593,    0, 4933,  536, 9593, 4933,

     2218, 2192, 9593,    0, 4930, 9593,  469, 9593, 4969, 4928,
        0, 9593, 9593, 4955, 4928, 4886,  131, 9593, 9593, 2198,
     9593,  275, 9593, 9593,  607, 2244, 9593,  581, 9593, 4890,
        0, 9593, 9593,   54,  600,    0, 9593, 9593,  892, 1564,
     9593, 9593, 2253, 9593, 9593,    0, 2262,    0, 9593, 9593,
     9593, 9593, 2266, 9593, 9593, 2270, 9593, 9593,    0,  164,
     4889, 9593, 9593,    0,  244, 4888,    0, 9593, 4875, 4874,
     9593, 9593,    0, 4874,    0, 9593, 4902, 4871,    0, 9593,
     9593, 4843,  120, 9593, 9593, 4898, 4868,    0, 9593, 4837,
        0,    0, 9593, 9593, 2037, 2419, 2486, 1963, 1998, 4833,

     4872, 9593,    0, 4855, 4851,    0,  199,  512, 9593, 9593,
     2560, 4847,  564, 4854,  669,  933,   71,  544,  216,  596,
     2285,  626,  619, 4818, 4803, 9593, 4851,  643, 2634, 4793,
     4806,  946, 9593, 9593,    0, 2320, 2363,  681, 2151, 2217,
     2274, 2707,  639, 2042,  996, 1008, 2185,  725, 2291, 2385,
     1013, 9593, 1515, 2302, 2327, 2377, 4858, 9593, 2052,  882,
     2386, 1522, 9593, 2394, 4861, 9593,  517, 4854,  622, 4839,
     1616, 9593, 4803, 2417, 2451, 4837, 2480, 2463, 2497, 2514,
     2524, 2075, 1628, 9593, 4801, 2531, 2541, 4834, 4849, 9593,
     2414, 2090, 2428, 1972, 9593, 2571, 4848,  485, 2779, 2853,

     4842, 9593, 2573, 2324, 2592, 4841, 2233, 9593, 2605, 2644,
     2652, 4824, 2669, 2678, 2598, 2695, 2732,    0, 2736, 2617,
     2758, 2094,    0, 2248, 9593, 4788, 4835, 9593, 2302, 9593,
     4782, 4832, 9593, 2390, 9593, 4777, 4826, 9593, 2646, 2485,
     2666, 2413, 9593, 2754, 2806, 2814,    0, 2880, 4809, 2908,
     2473, 9593, 4773, 2838, 2930, 4807, 2938, 2891, 2829, 2955,
     2947, 2519, 9593, 4771, 2972, 2980,    0, 4810, 4818, 4808,
     2550, 9593, 4767, 4806, 4762, 2560, 9593, 4758,    0, 2712,
     9593, 4757,    0, 4753,  643, 9593, 4764, 4761, 9593, 4798,
     2744, 9593, 4747,    0, 4746,  905, 4795, 4794, 9593, 4742,

        0, 9593, 9593, 4739, 4740, 2763, 9593, 4739, 2186, 9593,
     2436, 2773, 9593, 4738, 2842, 9593, 4747, 4735,    0,  419,
     4734, 4728,    0, 4725, 4731, 4732,  859, 4720, 2902, 9593,
     4719,    0, 2913, 9593, 4718,    0, 2917, 9593, 4715, 2964,
     9593, 4712,  695, 4760,  696, 4745, 4709,  711, 4754,  974,
     4705, 4669,    0, 4717,  541,    0, 4667,    0, 1530, 4660,
        0,    0, 4659, 4693,    0, 4651,    0, 4650,    0, 4654,
     4648, 4682,    0, 4656,  938, 4643, 9593, 9593, 4633, 3029,
     4632, 4639, 9593, 4639,  944, 4602, 4587, 1475, 1562, 1597,
     1560, 2769, 9593, 1475, 1572, 2006, 4593, 4592, 4633, 1018,

     2988,    0, 1029, 2456, 9593, 9593,    0,    0,    0, 2751,
     2785, 2993, 1541, 2140, 2997, 9593, 3055, 3004, 2124, 2968,
     3005, 3043,    0, 4587, 3080, 3087, 4584, 4615, 3075, 3088,
     3090,  891, 3146, 3118, 3154, 3177, 4625, 2868, 3003, 4580,
     4577, 4573, 3099, 3162, 3170, 3207, 3232, 3240, 3248, 4563,
     4562,    0,    0, 4599, 4560, 4549, 4557, 4556, 4555,    0,
        0, 4554, 4544, 4543, 4547, 4540, 4535, 4530, 4527, 4518,
     4530, 4519, 4520, 4522, 2740, 4509, 4521, 4521, 4510, 4508,
     4507, 4506, 4505,    0, 4504,    0, 4503, 9593, 9593, 9593,
     4502, 4532, 2284, 4500,    0, 4499, 4536, 4497, 4496, 2096,

     4495, 4511,    0, 3106, 2325, 9593, 2029, 3625, 3620,  616,
     2147, 3649, 3062, 2288, 3124, 2116, 3624, 3612, 9593, 2329,
     9593,    0, 2701, 3596, 3618, 2966, 3152, 3262, 3270, 3275,
     3263, 3602, 3286, 9593, 3292, 3598, 3281, 3347, 3421, 3295,
     9593, 3593, 3586, 3576, 3313,    0, 3374, 3448, 3341, 3573,
     3565, 3605, 3555, 3555, 3548, 3536, 3525,    0, 3515, 3503,
     3502, 3348, 3491, 3486, 3484, 3461, 3464, 3456, 9593, 3447,
     3438, 3440, 9593, 3417, 3416, 3397, 3390, 3389, 3388, 3387,
     3383, 3382, 3376, 3364, 3349, 2401, 3342, 3341, 3382, 3329,
     3328, 3327, 9593, 3362, 3188, 9593, 3349, 3291, 3279, 2304,

     3173, 3304, 9593, 2320, 3274, 3285, 2886, 3250, 3317, 3322,
     3456, 3437, 3264, 3253, 3457, 3465, 3251, 3232, 3231, 3468,
     3502, 3224, 3222, 3214, 3200, 3202, 3196, 3195, 3194, 3188,
     3187, 3177, 3171, 3166, 3177, 1985, 3158, 3154, 2425, 3145,
     3135, 3131, 3124, 3116, 3111, 3113, 3080, 3088,  115, 3073,
     3076, 3072, 1563, 3064, 3063, 3062, 3058, 3045, 3044, 3043,
     3034, 3027, 3025, 3018, 3011, 3004, 3033, 9593, 2986, 2977,
     2173, 3305, 9593, 2993, 3310, 2960, 2940, 2486, 9593, 3137,
     3129, 3367, 2952, 2945, 3496, 3511, 2943, 2939, 2931, 3508,
     3545, 3567, 2930, 2923, 2914, 9593, 2913, 2906, 2905, 2896,

     2895, 2889, 2886,  150, 2877, 2858, 2861, 2858, 2853, 2832,
     2823, 2830, 2821, 2826, 2825, 2819, 2815, 9593, 2795,    0,
        0, 2790, 9593, 2770, 2636, 2759, 2760, 2770, 2765, 2764,
     2757, 2756, 2752, 2733, 2715, 2709, 2702, 2683, 2682, 2678,
     2661, 2653, 2638, 2631, 2210, 2668, 3379, 2624, 2616, 2718,
     3436, 3323, 3514, 2614, 2613, 3555, 3574, 2605, 2603, 2590,
     3561, 2589, 2588, 2577, 2564, 2562, 2551, 2550, 2546, 2545,
     2545, 2546,    0, 2535, 2535, 2521, 2520, 9593, 2509, 2498,
     2488, 2478, 2457, 2452, 2451,    0, 9593, 9593, 2450, 2457,
     9593, 2457, 2419, 2405, 2399, 2399, 2387, 2379, 2373, 2371,

     2351, 2344, 2338, 2328, 2323, 2311, 2310, 2292, 2285, 2251,
     3472, 2291, 2286, 3017, 3498, 3550, 3584, 9593, 9593, 3586,
     3603, 9593, 9593, 9593, 3593, 9593, 9593, 9593, 9593, 9593,
     9593, 9593, 9593, 9593, 2238, 9593, 2227, 2215, 2214, 2206,
     2213, 2177, 2150, 9593, 9593, 9593, 9593, 9593, 2123, 2120,
     2714, 2124, 2082, 9593, 9593, 9593, 9593, 9593, 9593, 9593,
     9593, 9593, 9593, 9593, 9593, 2108, 2100, 3533, 9593, 9593,
     9593, 3403, 3537, 2072, 3589, 2034, 2029, 2008, 2006, 1974,
     1937, 1939, 1934, 1931, 1912, 9593, 1899, 1909, 9593, 9593,
     1602, 3615, 2844,  223, 3596, 1547, 1527, 1498, 1487, 1482,

     1454, 1448,  963,  977, 3029,  926,  910, 3427,  680, 3625,
      897,  881,  868,  554,  520,  451, 9593, 3066,  429, 3219,
     1913, 3630,  413,  191, 3254, 9593,  190, 3408,  642,  116,
     3559,   58, 1502,   16, 3581, 2178, 9593, 3640, 9593, 3685,
     3717, 3749, 3781, 3813, 3845, 3877, 3909, 3941, 3973, 4005,
     4037, 4069, 4101, 4133, 4165, 4197, 4229, 4261, 4293, 4325,
     4357, 4389, 4421, 4453, 4485, 4517, 4542, 4562, 4579, 4600,
     4619, 4640, 4671, 4697, 4729, 4739, 4756, 4787, 4818, 4849,
     4881, 4907, 4939, 4966, 4997, 5028, 5059, 5077, 5109, 5141,
     5173, 5199, 5209, 5240, 5271, 5302, 5333, 5343, 5360, 5378,

     5410, 5428, 5460, 5492, 5523, 5540, 5572, 5604, 5635, 5662,
     5694, 5712, 5744, 5754, 5771, 5781, 5798, 5830, 5848, 5880,
     5912, 5932, 5964, 5996, 6022, 6053, 6063, 6078, 6098, 6111,
     6138, 6148, 6165, 6180, 6206, 6233, 6259, 6285, 6317, 6334,
     6359, 6390, 6421, 6452, 6484, 6499, 6531, 6557, 6583, 6615,
     6647, 6674, 6700, 6731, 6762, 6793, 6825, 6856, 6874, 6906,
     6938, 6970, 6996, 7022, 7053, 7063, 7094, 7125, 7156, 7187,
     7202, 7219, 7244, 7262, 7294, 7312, 7344, 7376, 7401, 7419,
     7451, 7483, 7514, 7541, 7573, 7591, 7623, 7640, 7665, 7682,
     7707, 7739, 7757, 7789, 7821, 3624, 7841, 7856, 7888, 7920,

     7935, 7967, 7985, 8000, 8027, 8059, 8090, 3629, 8116, 8143,
     8161, 3634, 8187, 8208, 8234, 8244, 8276, 8291, 8317, 8343,
     8375, 8402, 8429, 8461, 8492, 8518, 8544, 8575, 8606, 8637,
     8652, 8662, 8679, 8689, 8704, 8736, 8746, 8756, 3650, 8776,
     8808, 8826, 8843, 8870, 3641, 8901, 8928, 8938, 8964, 8990,
     9013, 9045, 9071, 9103, 9130, 9156, 9166, 9197, 9228, 9245,
     9260, 9278, 9305, 9336, 9368, 9400, 9432, 9464, 9496, 9528,
     9560, 3655
    } ;

static yyconst flex_int16_t yy_def[1373] =
    {   0,
     1140, 1140, 1139,    3, 1141, 1141, 1142, 1142, 1139,    9,
     1139,   11, 1143, 1143, 1144, 1144, 1139,   17, 1139,   19,
     1145, 1145, 1146, 1146, 1147, 1147, 1139,   27, 1139,   29,
     1139,   31, 1139,   33, 1148, 1148, 1139,   37, 1149, 1149,
     1139,   41, 1150, 1150, 1151, 1151, 1152, 1152, 1153, 1153,
     1154, 1154, 1155, 1155, 1156, 1156, 1157, 1157, 1139,   59,
     1158, 1158, 1159, 1159, 1139,   65, 1139,   67, 1160, 1160,
     1160, 1160, 1139,   73, 1161, 1161, 1162, 1162, 1163, 1163,
     1164, 1164, 1165, 1165, 1139, 1139, 1139, 1139, 1139, 1166,
     1167, 1168, 1168, 1169, 1139, 1170, 1171, 1172, 1171, 1139,

     1139, 1168, 1168, 1169, 1168, 1139, 1139, 1139, 1173, 1174,
     1174, 1174, 1175, 1139, 1139, 1139, 1176, 1177, 1139, 1139,
     1139, 1139, 1178, 1178, 1139, 1179, 1139, 1180, 1139, 1139,
     1181, 1182, 1182, 1139, 1182, 1139, 1139, 1183, 1184, 1184,
     1184, 1139, 1184, 1139, 1139, 1185, 1185, 1139, 1186, 1187,
     1139, 1139, 1188, 1139, 1139, 1139, 1189, 1139, 1139, 1139,
     1190, 1139, 1139, 1139, 1191, 1192, 1192, 1192, 1139, 1139,
     1193, 1194, 1139, 1139, 1139, 1139, 1195, 1195, 1139, 1196,
     1139, 1197, 1139, 1139, 1198, 1199, 1139, 1139, 1200, 1139,
     1201, 1139, 1139, 1139, 1139, 1202, 1139, 1203, 1139, 1204,

     1139, 1205, 1139, 1206, 1139, 1139, 1139, 1139, 1207, 1139,
     1208, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1209, 1139, 1139, 1209, 1139, 1139, 1139, 1139, 1139,
     1210, 1139, 1139, 1139, 1139, 1211, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1212, 1139, 1213, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1214, 1215,
     1139, 1139, 1139, 1216, 1217, 1139, 1218, 1139, 1139, 1139,
     1139, 1139, 1219, 1139, 1220, 1139, 1139, 1139, 1221, 1139,
     1139, 1139, 1139, 1139, 1139, 1222, 1139, 1223, 1139, 1139,
     1224, 1224, 1139, 1139, 1139, 1225, 1225, 1139, 1139, 1139,

     1226, 1139, 1227, 1228, 1229, 1230, 1139, 1229, 1139, 1139,
     1231, 1229, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1232, 1225, 1232,
      329,  329, 1139, 1139, 1233, 1234, 1234, 1235, 1235, 1235,
     1235, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1229,
     1139, 1139, 1229, 1229, 1139, 1139, 1236, 1139, 1237, 1238,
     1237, 1139, 1139, 1237, 1239, 1139, 1240, 1241, 1240, 1139,
     1139, 1139, 1139, 1139, 1242, 1139, 1242, 1243, 1244, 1242,
     1243, 1245, 1139, 1139, 1139, 1244, 1244, 1246, 1247, 1139,
     1248, 1249, 1248, 1139, 1139, 1248, 1250, 1250, 1251, 1251,

     1250, 1139, 1252, 1253, 1252, 1250, 1139, 1139, 1252, 1139,
     1254, 1139, 1254, 1255, 1256, 1254, 1139, 1257, 1255, 1256,
     1256, 1258, 1259, 1139, 1139, 1139, 1260, 1139, 1139, 1139,
     1139, 1261, 1139, 1139, 1139, 1139, 1262, 1139, 1263, 1264,
     1263, 1139, 1139, 1263, 1265, 1139, 1266, 1265, 1139, 1267,
     1139, 1139, 1139, 1139, 1268, 1139, 1268, 1269, 1270, 1268,
     1269, 1139, 1139, 1139, 1270, 1270, 1271, 1272, 1273, 1272,
     1139, 1139, 1139, 1274, 1139, 1139, 1139, 1139, 1275, 1139,
     1139, 1139, 1276, 1139, 1277, 1139, 1278, 1139, 1139, 1279,
     1139, 1139, 1139, 1280, 1139, 1139, 1281, 1281, 1139, 1139,

     1282, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1283, 1139,
     1283, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1284, 1139,
     1139, 1139, 1285, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1286, 1139, 1139, 1139, 1287, 1139, 1139, 1139, 1139,
     1139, 1139, 1288, 1289, 1288, 1139, 1139, 1290, 1291, 1290,
     1139, 1139, 1292, 1139, 1139, 1293, 1139, 1294, 1139, 1139,
     1295, 1296, 1139, 1297, 1298, 1139, 1299, 1139, 1300, 1139,
     1139, 1301, 1302, 1303, 1139, 1304, 1139, 1139, 1304, 1305,
     1304, 1303, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1306, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1307,

     1307, 1308, 1139, 1309, 1139, 1139, 1310, 1311, 1312, 1313,
     1313, 1139, 1139, 1139, 1139, 1139, 1304, 1139, 1139, 1314,
     1314, 1315, 1316, 1139, 1317, 1317, 1139, 1318, 1319, 1319,
     1320, 1139, 1321, 1322, 1322, 1323, 1324, 1139, 1325, 1139,
     1139, 1139, 1326, 1326, 1327, 1328, 1329, 1330, 1330, 1139,
     1139, 1331, 1332, 1333, 1139, 1139, 1139, 1139, 1139, 1334,
     1335, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1336, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1337, 1139, 1338, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1339, 1139, 1340, 1139, 1139, 1139,

     1139, 1341, 1342, 1343, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1344, 1344, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1345, 1346, 1347, 1348, 1349, 1349, 1139, 1139, 1350,
     1351, 1139, 1352, 1139, 1352, 1139, 1353, 1354, 1354, 1355,
     1139, 1139, 1139, 1139, 1356, 1357, 1358, 1358, 1359, 1139,
     1139, 1360, 1139, 1139, 1139, 1139, 1139, 1361, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1340, 1139,
     1139, 1139, 1139, 1362, 1343, 1139, 1139, 1139, 1139, 1139,

     1139, 1363, 1139, 1139, 1139, 1139, 1346, 1139, 1349, 1349,
     1139, 1351, 1139, 1139, 1353, 1355, 1139, 1139, 1139, 1356,
     1364, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1365, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1362, 1139, 1139, 1139,
     1139, 1366, 1139, 1363, 1363, 1139, 1139, 1346, 1139, 1349,
     1349, 1351, 1139, 1139, 1353, 1355, 1139, 1139, 1139, 1356,
     1364, 1364, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1367,
     1368, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1366, 1366, 1139, 1139, 1346,
     1349, 1349, 1351, 1139, 1139, 1353, 1355, 1139, 1139, 1139,
     1356, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1369, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1370, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1346, 1349, 1349, 1351, 1139, 1139, 1353,
     1355, 1139, 1139, 1139, 1356, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1371, 1139, 1139,
     1139, 1346, 1139, 1372, 1349, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1371, 1371, 1346, 1372, 1349, 1139, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1346, 1372, 1349,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1346,
     1372, 1349, 1139, 1139, 1139, 1139, 1139, 1139, 1372, 1139,
     1139, 1139, 1372, 1139, 1139, 1372, 1139, 1372,    0, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139
    } ;

static yyconst flex_int16_t yy_nxt[9669] =
    {   0,
       87,   88,   89,   87,   88,   87,   90,   87,   91,   87,
       87,   87,   87,   87,   92,   87,   93,   94,   87,   92,
       92,   92,   87,   95,   87,   96,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   87,   98,   87,   99,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       87,   87,   87,   87,   87,  100,  156,  156,  100,  160,
      157,  157,  160,  161,  219,  973,  161,  101,  102,  192,
      103,  104,  192,  199,  105,  105,  106,  199,  219,  348,

       86,  242,  348,   86,  200,  520,  590,  368,  200,  521,
      207,  208,  370,  207,  242,  209,  201, 1135,  158,  158,
      201,  162,  207,  208,  162,  207,  220,  209,  590,  228,
      229,  193,  228,  255,  193,  202,  255,  289,  289,  202,
      220,  228,  229,  243,  228,  106,  107,  107,  108,  107,
      107,  107,  109,  210,  107,  107,  243,  107,  107,  107,
      212,  107,  213,  107,  111,  210,  563,  923,  111,  107,
      107,  214,  230, 1134,  924,  256,  215,  505,  256,  290,
      290,  544,  504,  216,  230,  212,  546,  213,  307,  107,
      112,  107,  232,  562,  233,  292,  214,  308,  276,  972,

      575,  215,  217,  575,  293,  294,  306,  232,  216,  233,
      298,  299,  277,  298,  973,  234,  107,  107,  107,  107,
      107,  107,  108,  107,  107,  107,  109,  217,  107,  107,
      234,  107,  107,  107,  235,  107,  268,  107,  111,  237,
      278,  238,  111,  107,  107,  237,  249,  238,  292,  235,
     1132,  348,  591,  300,  348,  250,  251,  293,  294,  269,
      973,  549,  239,  107,  112,  107,  551,  609,  239,  252,
      386,  386,  386,  386,  591,  306,  509,  387,  269,  509,
     1109,  240,  420,  420,  420,  420,  510,  240,  253,  421,
      107,  107,  107,  107,  115,  115,  116,  115,  115,  115,

      115,  115,  117,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  115,  119,  115,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  115,  115,  115,  115,  118,  120,
      121,  122,  121,  121,  120,  120,  120,  123,  120,  120,
      120,  120,  120,  120,  120,  120,  124,  120,  120,  120,
      120,  125,  120,  120,  120,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  120,  127,  120,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  120,
      120,  120,  128,  126,  129,  129,  130,  129,  129,  129,
      131,  268,  129,  129,  249,  129,  129,  129,  268,  129,
      268,  129,  133,  250,  251,  276,  133,  134,  129,  280,
      496,  280, 1130,  496,  269,  497,  670,  252,  671,  277,
      281,  270,  281,  270, 1127,  360,  361,  129,  135,  129,
      361,  632,  282,  269,  282,  353,  253,  354,  354,  354,

      270,  295,  270,  306,  295, 1139,  361,  278, 1125,  401,
      361,  283,  361,  283,  129,  129,  129,  129,  129,  129,
      130,  129,  129,  129,  131,  296,  129,  129,  576,  129,
      129,  129,  361,  129,  368,  129,  133,  306,  486,  370,
      133,  134,  129,  309,  297,  305,  310,  305,  311,  487,
      374,  374,  374,  374,  392,  393,  306,  371,  372,  393,
      371,  129,  135,  129,  590,  583,  375,  305,  583,  305,
      305,  376,  305,  305,  305,  313,  383,  384,  306,  383,
      488,  393,  515,  516,  590,  515,  689,  973,  129,  129,
      129,  129,  136,  136,  137,  136,  136,  136,  138,  337,

      136,  136,  373,  136,  136,  136,  590,  136, 1139,  136,
      140, 1139,  973,  690,  140,  141,  142,  305, 1139,  305,
      305,  385,  305,  305,  305,  517,  349,  355,  306,  349,
      355,  590,  307, 1139,  393,  136,  143,  136,  393,  368,
      348,  350,  356,  348,  370,  486,  522,  347,  347,  337,
      306,  520,  596,  590,  590,  521,  487,  800,  424,  425,
      393,  424,  136,  136,  136,  136,  136,  136,  137,  136,
      136,  136,  138,  596,  136,  136,  590,  136,  136,  136,
      800,  136,  603,  136,  140,  603,  609,  488,  140,  141,
      142,  351,  352, 1133,  351,  601,  347,  347,  374,  374,

      374,  374,  309,  426,  305,  310,  305,  311,  585,  136,
      143,  136,  544,  544,  375,  306,  602,  546,  546,  376,
      465,  465,  465,  465,  609,  609,  348,  466,  549,  348,
      585,  586,  587,  551,  313, 1121,  136,  136,  136,  136,
      120,  144,  145,  144,  144,  120,  120,  120,  146,  120,
      120,  120,  120,  120,  120,  120,  120,  147,  120,  120,
      120,  120,  148,  120,  120,  120,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  120,  127,  120,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      120,  120,  120,  150,  149,  151,  151,  152,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  151,  154,
      151,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  151,  151,  151,  151,  153,
      163,  163,  164,  163,  163,  163,  165,  402,  163,  163,

      621,  163,  163,  163,  621,  163,  496,  163,  167,  496,
      677,  497,  167,  163,  163,  402,  374,  374,  374,  374,
      374,  374,  374,  374,  678, 1124,  621,  377,  410,  410,
      410,  410,  375,  163,  168,  163,  375,  376,  382,  575,
      402,  376,  575,  524,  411,  429,  430,  525,  429,  412,
      973,  404,  405,  526,  605,  527,  405, 1123,  402,  588,
      163,  163,  163,  163,  163,  163,  164,  163,  163,  163,
      165,  589,  163,  163, 1119,  163,  163,  163,  405,  163,
      588,  163,  167, 1139,  707, 1118,  167,  163,  163,  606,
      431,  549,  379,  589, 1139,  405,  551,  351,  352,  405,

      351, 1139,  410,  410,  410,  410,  707,  163,  168,  163,
      417,  410,  410,  417,  351,  352,  607,  351,  411,  720,
      418,  405,  720,  412, 1116,  613,  411,  614,  614,  614,
      603,  412,  973,  603,  163,  163,  163,  163,  169,  169,
      170,  169,  169,  169,  169,  169,  171,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  169,  173,  169,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  169,  169,
      169,  169,  172,  174,  175,  176,  175,  175,  174,  174,
      174,  177,  174,  174,  174,  174,  174,  174,  174,  174,
      178,  174,  174,  174,  174,  179,  174,  174,  174,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  174,  181,  174,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  174,  174,  174,  182,  180,  183,  183,
      184,  183,  183,  183,  183,  183,  185,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  183,  187,  183,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  183,  183,
      183,  183,  186,   86,   86,  188,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,

      189,  189,  189,  189,  189,  189,   86,  190,   86,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,   86,   86,   86,   86,  189,  194,  194,
      195,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  194,  197,  194,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,

      196,  196,  196,  196,  196,  196,  196,  196,  194,  194,
      194,  194,  196,   86,   86,  203,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,   86,  205,   86,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,   86,   86,   86,   86,  204,  221,  222,
      223,  221,  222,  221,  221,  221,  221,  221,  221,  224,

      221,  221,  221,  221,  362,  363,  221,  362, 1115, 1114,
      221,  221,  221,  221,  710,  714,  619,  440,  441,  619,
     1139,  361,  441,  362,  363,  361,  362,  380,  380,  380,
      380,  221,  226,  221,  377,  692,  710,  714,  434,  435,
      306,  434,  619,  375,  441,  619,  609,  361,  376,  364,
     1136,  973,  451,  452,  693,  451,  973, 1113,  221,  221,
      221,  221,  221,  221,  222,  223,  221,  222,  221,  221,
      221,  221,  221,  221,  224,  221,  221,  221,  221,  394,
      395,  221,  394,  436, 1112,  221,  221,  221,  221, 1139,
      441,  711,  590,  406,  441, 1139,  393,  453,  592,  379,

      393,  592,  715, 1111, 1139,  405,  221,  226,  221,  405,
      528,  402,  711,  590,  928,  524,  441,  371,  372,  525,
      371,  593,  393,  715,  396,  526, 1069,  527,  929,  383,
      384,  405,  383,  221,  221,  221,  221,  221,  244,  244,
      245,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  244,  247,  244,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  246,  246,  246,  244,  244,
      244,  244,  246,  257,  257,  258,  257,  257,  257,  257,
      257,  259,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  257,  261,  257,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  257,  257,  257,  257,  260,  262,  262,
      263,  262,  262,  262,  262,  262,  264,  262,  262,  262,

      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  262,  266,  262,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  262,  262,
      262,  262,  265,  271,  271,  272,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,

      273,  273,  273,  273,  273,  273,  271,  274,  271,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  271,  271,  271,  271,  273,  284,  284,
      285,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  609, 1107, 1106,
      284,  284,  284,  284,  298,  299, 1105,  298,  410,  410,
      410,  410, 1129,  394,  395,  413,  394,  454,  454,  454,
      454,  284,  287,  284,  411,  446,  446,  446,  446,  412,
     1104, 1103,  447,  455,  462,  463, 1102,  462,  456,  298,

      299, 1101,  298,  448,  448,  448,  449,  300,  284,  284,
      284,  284,  284,  284,  285,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284, 1100,  907,  716,  284,  284,  284,  284,  295,  464,
      415,  295,  300,  349,  407,  408,  349,  407,  908, 1139,
      454,  454,  454,  454,  716,  284,  287,  284,  612,  797,
     1139,  405,  296, 1099,  347,  405,  455, 1139, 1098,  360,
      361,  456,  471,  472,  361,  471,  626,  626,  626,  626,
      797,  297,  284,  284,  284,  284,  314,  405, 1097,  409,
      416,  416,  416,  416, 1096,  638,  361,  413,  638,  315,

      454,  454,  454,  454,  721,  418,  411,  457,  630,  316,
      317,  412,  630,  347,  318,  319,  455,  473, 1094,  320,
      321,  456,  322,  323, 1090,  619,  476,  477,  619,  476,
      316,  317, 1089, 1088,  630,  318,  319,  442,  443,  721,
      442,  320,  321,  324,  325,  322,  323,  326,  326,  326,
      326,  804,  603, 1139,  441,  603,  327,  613,  441,  614,
      614,  614,  415,  326,  326,  328,  721,  460,  460,  460,
      460,  478,  459,  804,  457,  480,  481,  801,  480, 1087,
      441, 1085,  444,  455,  330, 1084,  355,  509,  456,  355,
      509,  331,  332,  491,  492,  609,  491,  510,  801,  506,

      507,  356,  506,  454,  454,  454,  454,  347,  610, 1083,
      333,  945,  334,  335,  326,  326,  326,  326,  603,  455,
      482,  603,  609,  327,  456,  489,  489,  489,  489, 1082,
      326,  326,  330,  945,  407,  408,  490,  407,  493,  459,
     1138,  489,  489,  490,  508,  512,  513, 1011,  512,  424,
      425,  328,  424,  339,  529,  530,  347,  529,  340,  341,
     1081,  609,  489,  533,  534, 1080,  533,  537,  538, 1011,
      537,  540,  541, 1079,  540,  603,  611,  333,  603,  334,
      335,  342,  605, 1078,  342,  786,  592, 1077,  786,  592,
      514,  489,  349,  343,  343,  349,  344,  345, 1076,  531,

      346,  346,  347,  429,  430,  296,  429,  356,  535,  593,
     1071,  594,  539,  347,  590, 1070,  542,  606,  609,  353,
     1067,  354,  354,  354,  297,  595,  796,  306,  355,  796,
      720,  355,  594,  720,  305,  590,  305,  305,  871,  305,
      305,  305,  635,  356,  607,  306,  635,  595, 1066,  347,
      590,  347,  397,  397,  299,  397,  397,  397,  398,  871,
      397,  397,  347,  397,  397,  397,  337,  397,  635,  397,
      400,  590, 1065, 1064,  400,  397,  401,  305,  355,  305,
      305,  355,  305,  305,  305, 1063,  615,  616,  306,  615,
     1062,  434,  435,  612,  434,  397,  400,  397,  347,  347,

     1061,  617,  786, 1139,  361,  786, 1060,  618,  361,  337,
      306,  360,  361, 1059,  442,  443,  361,  442,  374,  374,
      374,  374,  397,  397,  397,  397,  326,  326,  326,  326,
      361,  392,  393, 1058,  375, 1057,  393, 1139,  361,  376,
     1139, 1056,  326,  326,  570, 1139,  393, 1139,  347, 1055,
      393,  622,  380,  380,  380,  380,  618,  603,  393,  377,
      603, 1054, 1053,  326,  374,  374,  374,  374,  375, 1052,
      331,  332,  393,  376,  451,  452,  911,  451, 1051,  912,
      375, 1139, 1139, 1139, 1139,  376,  382,  603, 1139,  333,
      603,  334,  335,  326,  326,  326,  326, 1139,  386,  386,

      386,  386, 1139,  644, 1050,  387,  723,  644, 1049,  326,
      326,  326, 1048,  516, 1046,  380,  380,  380,  380, 1045,
      462,  463,  377,  462,  379,  374,  374,  374,  374,  644,
      570,  375,  386,  386,  386,  386,  376,  331,  332,  387,
     1044,  375, 1139, 1139, 1139, 1139,  376,  382, 1043, 1139,
      950,  471,  472, 1139,  471, 1042,  333, 1041,  334,  335,
      577,  476,  477,  577,  476,  577,  577,  577,  577,  577,
      577,  577,  578,  577,  579,  577,  579,  580,  577,  402,
     1040, 1039,  577,  577,  577,  582, 1038,  379,  392,  393,
      404,  405, 1037,  393, 1035,  405,  973,  402, 1139,  420,

      420,  420,  420,  577,  577,  577,  421, 1034, 1033, 1139,
      405,  402, 1032, 1031,  405,  393, 1139,  405,  420,  420,
      420,  420,  404,  405, 1030,  421, 1029,  405,  631,  402,
      577,  577,  577,  577,  577,  603,  405,  991,  603, 1028,
      991, 1139, 1139, 1139, 1139,  410,  410,  410,  410,  405,
     1027, 1026, 1024,  416,  416,  416,  416, 1139, 1139, 1139,
      413,  411,  636,  440,  441, 1023,  412, 1022,  441,  411,
     1139, 1139, 1139, 1139,  412, 1019, 1018, 1139, 1139,  417,
      410,  410,  417, 1139,  441, 1013, 1139, 1012,  441,  418,
      441, 1139,  873, 1010, 1009,  411,  416,  416,  416,  416,

      412, 1008,  603,  413, 1139,  603, 1139, 1139,  342, 1007,
      441,  342,  411,  480,  481, 1086,  480,  412, 1086,  603,
      343,  343,  603,  344,  345,  415, 1006,  346,  346,  347,
     1005, 1004,  296,  417,  410,  410,  417,  417,  410,  410,
      417,  773, 1139,  418,  773,  491,  492,  418,  491,  411,
     1003,  297,  603,  411,  412,  603,  807, 1002,  412, 1139,
     1139, 1139, 1139, 1001,  506,  507, 1139,  506,  415, 1014,
      713,  440,  441,  713,  512,  513,  441,  512,  347,  397,
      397, 1000,  397,  397,  397,  632,  603,  397,  397,  603,
      397,  397,  397,  593,  397,  609,  633,  400,  441,  774,

      999,  400,  397,  401,  998,  997,  726,  446,  446,  446,
      446,  645,  996,  995,  447,  446,  446,  446,  446,  994,
      993,  992,  397,  400,  397,  448,  448,  448,  449,  609,
      465,  465,  465,  465,  990,  727,  449,  466,  989,  454,
      454,  454,  454,  515,  516,  603,  515,  986,  603,  397,
      397,  397,  397,  397,  397,  455,  397,  397,  397,  632,
      456,  397,  397,  985,  397,  397,  397,  984,  397,  638,
      397,  400,  638,  983,  982,  400,  397,  397,  981,  418,
      980,  446,  446,  446,  446,  979,  517,  603,  447,  978,
      603, 1108,  454,  454,  454,  454,  397,  400,  397,  448,

      448,  448,  449,  529,  530,  977,  529,  973,  455,  446,
      446,  446,  446,  456,  533,  534,  447,  533,  537,  538,
      976,  537,  975,  397,  397,  397,  397,  648,  648,  648,
      449,  460,  460,  460,  460,  974,  971,  970,  457, 1139,
     1139, 1139, 1139,  969,  968,  878, 1139,  455,  454,  454,
      454,  454,  456,  967,  966, 1139,  460,  460,  460,  460,
     1139,  965,  964,  457,  455,  540,  541,  603,  540,  456,
      603,  963,  455,  465,  465,  465,  465,  456,  962,  960,
      466, 1139, 1139, 1139, 1139,  360,  621,  959, 1139,  720,
      621,  958,  720,  955,  615,  616,  721,  615,  615,  616,

      954,  615,  949,  459,  638,  615,  616,  638,  615,  728,
      609, 1139,  621,  729,  418,  618,  948,  803,  603,  618,
      729,  603, 1139,  621,  944,  809,  618,  621,  459,  577,
     1117,  721,  577, 1117,  577,  577,  577,  577,  577,  577,
      577,  578,  577,  579,  577,  579,  704,  577,  943,  621,
      703,  577,  577,  577,  582,  942,  615,  616,  721,  615,
      360,  361,  941,  713,  618,  361,  713, 1126,  618,  940,
     1126,  730,  577,  705,  577,  618,  939,  618,  938, 1072,
      306,  733,  733,  733,  733,  937,  593,  361,  735,  735,
      735,  735,  392,  630,  936,  935,  934,  630,  731,  577,

      577,  577,  577,  577,  734, 1139,  630,  392,  393,  933,
      630,  734,  393,  932,  931,  930,  440,  644,  309,  630,
      305,  644,  305,  795,  402,  802,  618,  927,  802,  926,
      603,  306,  630,  603,  393,  404,  635,  925,  603,  922,
      635,  603,  402,  644,  921,  737,  397,  397,  803,  397,
      397,  397,  632,  603,  397,  397,  603,  397,  397,  397,
     1139,  397,  635,  397,  739,  920,  919,  917,  739,  397,
      397, 1139,  635,  609,  872,  916,  635,  872, 1139, 1139,
      644,  609,  915,  402,  644,  951,  914,  440,  441,  397,
      739,  397,  441,  952,  404,  405,  609,  873,  635,  405,

      309,  402,  305,  913,  305,  795,  644,  810,  446,  446,
      446,  446,  910,  306,  441,  746,  397,  397,  397,  397,
     1128,  405,  909, 1128,  906,  745,  747,  747,  747,  449,
      905,  904,  740,  749,  749,  749,  749,  903,  902,  901,
      447,  446,  446,  446,  446,  900,  899,  898,  447,  446,
      446,  446,  446,  897,  449, 1131,  447,  896, 1131,  648,
      648,  648,  449,  615,  616,  895,  615,  648,  648,  648,
      449,  615,  616,  894,  615,  893,  615,  616,  728,  615,
      360,  361,  889,  888,  618,  361,  811,  733,  733,  733,
      733,  730,  618,  735,  735,  735,  735,  618,  392,  393,

      306,  402,  887,  393,  884,  875,  947,  361,  875,  947,
      734,  875,  404,  405,  875,  883,  734,  405,  603,  402,
      879,  603,  812,  603,  603,  393,  603,  603,  803,  873,
      440,  441,  877,  618,  803,  441,  876,  870,  869,  405,
      815,  618,  749,  749,  749,  749,  618,  397,  397,  447,
      397,  397,  397,  632,  816,  397,  397,  441,  397,  397,
      397,  609,  397,  449,  633,  739,  609,  609,  880,  739,
      397,  401,  820,  868, 1016,  446,  446,  446,  446,  703,
      947,  881,  746,  947,  360,  361,  866,  865,  864,  361,
      397,  739,  397,  747,  747,  747,  449,  832,  833,  565,

      863,  862,  834,  873,  603,  835,  836,  603,  861, 1128,
      837,  361, 1128,  838,  839,  953,  840,  397,  397,  397,
      397,  397,  397,  860,  397,  397,  397,  632,  603,  397,
      397,  603,  397,  397,  397,  859,  397,  603,  397,  739,
      603,  858,  857,  739,  397,  397,  856,  855,  854,  446,
      446,  446,  446,  853,  360,  361,  746,  615,  616,  361,
      615,  852, 1093,  851,  397,  739,  397,  747,  747,  747,
      449,  402,  728, 1068,  392,  393, 1068,  850,  618,  393,
      609,  361,  404,  405, 1120,  440,  441,  405,  882,  402,
      441,  397,  397,  397,  397,  849, 1069,  848, 1015, 1073,

      299,  393, 1073,  446,  446,  446,  446,  847,  885,  405,
      746,  846,  441,  392,  393,  845,  886,  402,  393,  890,
      844,  891,  891,  891,  449,  440,  441,  618,  404,  405,
      441,  360,  361,  405, 1092,  402,  361, 1092, 1073,  299,
      393, 1073, 1074,  843,  956,  842,  446,  446,  446,  446,
      841,  603,  441,  746,  603,  405,  961, 1069,  361,  957,
     1131,  831,  830, 1131,  891,  891,  891,  449,  446,  446,
      446,  446,  392,  393,  829,  746, 1017,  393,  440,  441,
      402,  300, 1137,  441,  828, 1137,  891,  891,  891,  449,
      603,  404,  405,  603,  609,  827,  405,  603,  402,  393,

      603,  360,  361,  392,  393,  441,  361,  826,  393,  402,
      440,  441, 1075,  825,  824,  441, 1092, 1020,  405, 1092,
      404,  405,  469, 1025,  823,  405,  603,  402,  361,  603,
      393, 1128,  822,  609, 1128,  819, 1021,  441,  695, 1069,
      609,  298,  299, 1110,  298,  818,  695,  405, 1095,  695,
      695,  722,  817,  722,  722,  722,  725,  814,  725,  725,
      725,  813,  609,  722,  695,  722,  722,  722,  808,  609,
      806,  805,  695,  593,  609,  695,  695,  725,  799,  725,
      725,  725, 1122,  798, 1074,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  159,  159,  159,  159,  159,  159,  159,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,

      198,  198,  198,  198,  198,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,

      218,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,

      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,

      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  301,  301,  793,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  304,
      792,  791,  790,  565,  788,  787,  693,  785,  784,  783,
      782,  781,  780,  779,  304,  778,  304,  304,  304,  777,
      776,  775,  772,  304,  305,  771,  305,  305,  770,  305,
      768,  767,  766,  305,  305,  765,  305,  305,  305,  312,
      764,  312,  312,  312,  312,  763,  312,  762,  761,  760,

      312,  312,  312,  312,  312,  312,  329,  329,  329,  759,
      757,  756,  755,  754,  329,  753,  469,  751,  750,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  744,  329,
      329,  336,  743,  336,  336,  742,  336,  741,  382,  736,
      336,  336,  732,  336,  336,  336,  338,  338,  338,  719,
      718,  717,  709,  708,  338,  706, 1139,  306,  306,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  306,  338,
      338,  357,  357,  703,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,

      357,  357,  357,  359,  573,  701,  700,  699,  698,  359,
      565,  359,  359,  359,  359,  359,  696,  694,  359,  359,
      359,  359,  359,  359,  691,  688,  687,  549,  359,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  367,  686,  367,  367,  367,  685,  544,  684,  683,
      367,  369,  682,  369,  369,  681,  680,  679,  369,  676,
      369,  369,  369,  675,  674,  673,  672,  369,  378,  378,
      378,  378,  669,  518,  378,  668,  667,  666,  665,  664,

      499,  499,  378,  663,  662,  378,  660,  493,  488,  378,
      659,  378,  378,  378,  658,  657,  656,  378,  378,  381,
      381,  381,  381,  475,  655,  469,  653,  469,  651,  455,
      650,  647,  438,  381,  642,  381,  381,  381,  433,  641,
      381,  428,  381,  381,  381,  640,  411,  632,  632,  381,
      388,  388,  388,  388,  632,  390,  388,  382,  627,  375,
      624,  368,  623,  366,  358,  604,  602,  599,  598,  597,
      584,  388,  306,  388,  388,  388,  306,  573,  302,  571,
      388,  389,  389,  568,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,

      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  391,  566,  565,  562,  560,  559,  391,
      557,  391,  391,  391,  391,  391,  555,  554,  391,  391,
      391,  391,  391,  391,  552,  547,  518,  504,  391,  399,
      399,  503,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  403,  403,  502,  500,  499,  495,  488,  403,  484,
      403,  403,  403,  403,  403,  475,  403,  403,  403,  403,
      403,  403,  403,  469,  455,  438,  433,  403,  414,  414,

      414,  414,  428,  411,  414,  390,  390,  375,  366,  358,
      306,  303,  414,  302, 1139,  414,  114,  114, 1139,  414,
     1139,  414,  414,  414, 1139, 1139, 1139,  414,  414,  419,
      419,  419,  419, 1139, 1139, 1139, 1139,  419, 1139, 1139,
     1139, 1139, 1139,  419, 1139,  419,  419, 1139, 1139, 1139,
      419, 1139,  419,  419,  419, 1139, 1139, 1139, 1139,  419,
      422,  422,  422,  422, 1139, 1139,  422, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139,  422, 1139,  422,  422,  422, 1139, 1139, 1139, 1139,
      422,  423, 1139, 1139,  423, 1139, 1139, 1139, 1139,  423,

     1139,  423,  423,  423, 1139, 1139, 1139, 1139,  423,  427,
      427, 1139,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  432,  432, 1139,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  437,  437, 1139,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,  437,  439, 1139, 1139, 1139, 1139,
     1139,  439, 1139,  439,  439,  439,  439,  439, 1139, 1139,
      439,  439,  439,  439,  439,  439, 1139, 1139, 1139, 1139,
      439,  445, 1139,  445,  445,  445, 1139, 1139, 1139, 1139,
      445,  450,  450,  450,  450, 1139, 1139,  450, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139,  450,  450, 1139,
     1139, 1139,  450, 1139,  450,  450,  450, 1139, 1139, 1139,
     1139,  450,  458,  458,  458,  458, 1139, 1139,  458, 1139,
     1139, 1139, 1139, 1139, 1139, 1139,  458, 1139, 1139,  458,
     1139, 1139, 1139,  458, 1139,  458,  458,  458, 1139, 1139,

     1139,  458,  458,  461,  461,  461,  461, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139,  461, 1139,  461,
      461, 1139, 1139, 1139,  461, 1139,  461,  461,  461, 1139,
     1139, 1139, 1139,  461,  467,  467,  467,  467, 1139, 1139,
      467, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139,  467, 1139,  467,  467,  467,
     1139, 1139, 1139, 1139,  467,  468, 1139,  468,  468,  468,
     1139, 1139, 1139, 1139,  468,  470, 1139,  470, 1139, 1139,
     1139, 1139,  470, 1139,  470,  470,  470, 1139, 1139, 1139,
     1139,  470,  474,  474, 1139,  474, 1139, 1139, 1139, 1139,

      474, 1139,  474,  474,  474, 1139, 1139, 1139, 1139,  474,
      479,  479, 1139,  479,  479,  479,  479,  479,  479,  479,
      479, 1139,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479, 1139,  479,  479,  479,  479,  479,  479,
      479,  479,  483, 1139, 1139,  483, 1139, 1139, 1139, 1139,
      483, 1139,  483,  483,  483, 1139, 1139, 1139, 1139,  483,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485, 1139,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  487,  487, 1139,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487, 1139,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  489,  489, 1139,  489, 1139,  489,
      489,  489, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139,  489,  489,  489, 1139,  489,  489, 1139, 1139,
     1139, 1139, 1139,  489,  494, 1139, 1139,  494, 1139, 1139,
     1139, 1139,  494, 1139,  494,  494,  494, 1139, 1139, 1139,
     1139,  494,  498,  498, 1139,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,

      498,  498,  498,  498,  501,  501, 1139,  501, 1139,  501,
      501,  501,  501,  501,  501, 1139,  501,  501,  501,  501,
     1139,  501,  501,  501,  501, 1139,  501, 1139,  501,  501,
      501,  501,  501,  501,  501,  501,  511, 1139, 1139,  511,
     1139, 1139, 1139, 1139,  511, 1139, 1139, 1139, 1139,  511,
      511, 1139,  511, 1139, 1139, 1139, 1139,  511, 1139,  511,
      511,  511,  519,  519, 1139,  519, 1139,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519, 1139,  519, 1139,  519,  519,  519,  519,
      519,  519,  519,  519,  523,  523, 1139,  523, 1139,  523,

      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523, 1139,  523, 1139,  523,  523,
      523,  523,  523,  523,  523,  523,  532, 1139, 1139,  532,
     1139, 1139, 1139, 1139,  532, 1139,  532,  532,  532, 1139,
     1139, 1139, 1139,  532,  536,  536, 1139,  536,  536,  536,
      536,  536,  536, 1139, 1139,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536, 1139,  536, 1139,  536,  536,
      536,  536,  536,  536,  536,  536,  543, 1139,  543,  543,
      543, 1139, 1139, 1139, 1139,  543,  545, 1139,  545,  545,
     1139, 1139, 1139,  545, 1139,  545,  545,  545, 1139, 1139,

     1139, 1139,  545,  548, 1139,  548,  548,  548, 1139, 1139,
     1139, 1139,  548,  550, 1139,  550,  550, 1139, 1139, 1139,
      550, 1139,  550,  550,  550, 1139, 1139, 1139, 1139,  550,
      553,  553, 1139,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553, 1139,  553, 1139,  553,  553,  553,  553,  553,  553,
      553,  553,  556, 1139, 1139,  556, 1139, 1139, 1139, 1139,
      556, 1139,  556,  556,  556, 1139, 1139, 1139, 1139,  556,
      558,  558, 1139,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558, 1139,  558,  558,  558,  558,  558,

      558,  558,  558, 1139,  558,  558,  558,  558,  558,  558,
      558,  558,  561,  561, 1139,  561,  561,  561,  561,  561,
      561,  561,  561, 1139,  561,  561,  561,  561,  561,  561,
      561,  561,  561, 1139,  561, 1139,  561,  561,  561,  561,
      561,  561,  561,  561,  564, 1139,  564,  564,  564,  564,
      564, 1139, 1139, 1139,  564, 1139,  564,  564,  564, 1139,
     1139, 1139, 1139,  564,  567,  567, 1139,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567, 1139,  567,  567,
      567,  567,  567,  567,  567,  567,  569,  569,  569,  569,

      569,  569,  569,  569,  569, 1139, 1139,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  329,  329,
      329, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139,  329,  329,  329,  329,  329,  329,  329,  329,  329,
     1139,  329,  329,  301,  301, 1139,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  304, 1139,  304,  304,  304,
     1139, 1139, 1139, 1139,  304,  572,  572, 1139, 1139, 1139,

      572, 1139,  572,  572,  572, 1139, 1139, 1139, 1139,  572,
      305, 1139,  305,  305, 1139,  305, 1139, 1139, 1139,  305,
      305, 1139,  305,  305,  305,  574, 1139, 1139,  574, 1139,
     1139, 1139, 1139,  574, 1139,  574,  574,  574,  581, 1139,
     1139,  581, 1139,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      600, 1139,  600,  600,  600, 1139, 1139, 1139,  600,  608,
     1139, 1139, 1139, 1139, 1139, 1139, 1139,  608, 1139,  608,
      608,  608,  336, 1139,  336,  336, 1139,  336, 1139, 1139,

     1139,  336,  336, 1139,  336,  336,  336,  338, 1139, 1139,
      338, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,  338,  338,
      338,  338,  338,  357,  357, 1139,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  359, 1139, 1139, 1139, 1139,
     1139,  359, 1139,  359,  359,  359,  359,  359, 1139, 1139,
      359,  359,  359,  359,  359,  359, 1139, 1139, 1139, 1139,
      359,  620, 1139, 1139, 1139, 1139, 1139,  620, 1139,  620,

     1139,  620,  620,  620, 1139, 1139,  620,  620,  620,  620,
      620,  620, 1139, 1139, 1139, 1139,  620,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  369,
     1139,  369,  369, 1139, 1139, 1139,  369, 1139,  369,  369,
      369, 1139, 1139, 1139, 1139,  369,  367, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139,  367, 1139,  367,  367,  367, 1139, 1139, 1139, 1139,
      367,  378,  378,  378,  378, 1139, 1139,  378, 1139, 1139,

     1139, 1139, 1139, 1139, 1139,  378, 1139, 1139,  378, 1139,
     1139, 1139,  378, 1139,  378,  378,  378, 1139, 1139, 1139,
      378,  378,  381,  381,  381,  381, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139,  381, 1139,  381,  381,
      381, 1139, 1139,  381, 1139,  381,  381,  381, 1139, 1139,
     1139, 1139,  381,  388,  388,  388,  388, 1139, 1139,  388,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139,  388, 1139,  388,  388,  388, 1139,
     1139, 1139, 1139,  388,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  625, 1139,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  628, 1139,  628, 1139,
     1139,  628, 1139,  628,  628,  628, 1139, 1139, 1139, 1139,
      628,  389,  389, 1139,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  391, 1139, 1139, 1139, 1139, 1139,  391,
     1139,  391,  391,  391,  391,  391, 1139, 1139,  391,  391,
      391,  391,  391,  391, 1139, 1139, 1139, 1139,  391,  629,
     1139, 1139, 1139, 1139, 1139,  629, 1139,  629, 1139,  629,

      629,  629, 1139, 1139,  629,  629,  629,  629,  629,  629,
     1139, 1139, 1139, 1139,  629,  397,  397, 1139,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  399,  399, 1139,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  403,
      403, 1139, 1139, 1139, 1139, 1139,  403, 1139,  403,  403,
      403,  403,  403, 1139,  403,  403,  403,  403,  403,  403,

      403, 1139, 1139, 1139, 1139,  403,  634, 1139, 1139, 1139,
     1139, 1139,  634, 1139,  634, 1139,  634,  634,  634, 1139,
     1139,  634,  634,  634,  634,  634,  634, 1139, 1139, 1139,
     1139,  634,  414,  414,  414,  414, 1139, 1139,  414, 1139,
     1139, 1139, 1139, 1139, 1139, 1139,  414, 1139, 1139,  414,
     1139, 1139, 1139,  414, 1139,  414,  414,  414, 1139, 1139,
     1139,  414,  414,  419,  419,  419,  419, 1139, 1139, 1139,
     1139,  419, 1139, 1139, 1139, 1139, 1139,  419, 1139,  419,
      419, 1139, 1139, 1139,  419, 1139,  419,  419,  419, 1139,
     1139, 1139, 1139,  419,  422,  422,  422,  422, 1139, 1139,

      422, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139,  422, 1139,  422,  422,  422,
     1139, 1139, 1139, 1139,  422,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637, 1139,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  639, 1139, 1139,
      639, 1139, 1139, 1139, 1139,  639, 1139, 1139, 1139, 1139,
     1139, 1139, 1139,  639, 1139, 1139, 1139, 1139,  639, 1139,
      639,  639,  639, 1139, 1139, 1139, 1139,  639,  423, 1139,
     1139,  423, 1139, 1139, 1139, 1139,  423, 1139,  423,  423,

      423, 1139, 1139, 1139, 1139,  423,  427,  427, 1139,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  432,  432,
     1139,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      437,  437, 1139,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  439, 1139, 1139, 1139, 1139, 1139,  439, 1139,
      439,  439,  439,  439,  439, 1139, 1139,  439,  439,  439,
      439,  439,  439, 1139, 1139, 1139, 1139,  439,  643, 1139,
     1139, 1139, 1139, 1139,  643, 1139,  643, 1139,  643,  643,
      643, 1139, 1139,  643,  643,  643,  643,  643,  643, 1139,
     1139, 1139, 1139,  643,  450,  450,  450,  450, 1139, 1139,
      450, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
      450,  450, 1139, 1139, 1139,  450, 1139,  450,  450,  450,
     1139, 1139, 1139, 1139,  450,  646, 1139,  646,  646,  646,
     1139, 1139, 1139, 1139,  646,  649,  649,  649,  649, 1139,

     1139,  649, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139,  649,  649, 1139, 1139, 1139,  649, 1139,  649,  649,
      649, 1139, 1139, 1139, 1139,  649,  458,  458,  458,  458,
     1139, 1139,  458, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
      458, 1139, 1139,  458, 1139, 1139, 1139,  458, 1139,  458,
      458,  458, 1139, 1139, 1139,  458,  458,  461,  461,  461,
      461, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139,  461, 1139,  461,  461, 1139, 1139, 1139,  461, 1139,
      461,  461,  461, 1139, 1139, 1139, 1139,  461,  467,  467,
      467,  467, 1139, 1139,  467, 1139, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,  467,
     1139,  467,  467,  467, 1139, 1139, 1139, 1139,  467,  652,
     1139, 1139, 1139, 1139,  652, 1139,  652,  652,  652, 1139,
     1139, 1139, 1139,  652,  470, 1139,  470, 1139, 1139, 1139,
     1139,  470, 1139,  470,  470,  470, 1139, 1139, 1139, 1139,
      470,  654, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139,  654, 1139,  654,  654,
      654, 1139, 1139, 1139, 1139,  654,  474,  474, 1139,  474,
     1139, 1139, 1139, 1139,  474, 1139,  474,  474,  474, 1139,
     1139, 1139, 1139,  474,  479,  479, 1139,  479,  479,  479,

      479,  479,  479,  479,  479, 1139,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479, 1139,  479,  479,
      479,  479,  479,  479,  479,  479,  483, 1139, 1139,  483,
     1139, 1139, 1139, 1139,  483, 1139,  483,  483,  483, 1139,
     1139, 1139, 1139,  483,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485, 1139,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  487,  487, 1139,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487, 1139,  487,  487,

      487,  487,  487,  487,  487,  487,  487,  487,  661, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139,  661, 1139,  661,  661,  661, 1139, 1139,
     1139, 1139,  661,  494, 1139, 1139,  494, 1139, 1139, 1139,
     1139,  494, 1139,  494,  494,  494, 1139, 1139, 1139, 1139,
      494,  498,  498, 1139,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  501,  501, 1139,  501, 1139,  501,  501,
      501,  501,  501,  501, 1139,  501,  501,  501,  501, 1139,

      501,  501,  501,  501, 1139,  501, 1139,  501,  501,  501,
      501,  501,  501,  501,  501,  511, 1139, 1139,  511, 1139,
     1139, 1139, 1139,  511, 1139, 1139, 1139, 1139,  511,  511,
     1139,  511, 1139, 1139, 1139, 1139,  511, 1139,  511,  511,
      511,  519,  519, 1139,  519, 1139,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519, 1139,  519, 1139,  519,  519,  519,  519,  519,
      519,  519,  519,  523,  523, 1139,  523, 1139,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523, 1139,  523, 1139,  523,  523,  523,

      523,  523,  523,  523,  523,  532, 1139, 1139,  532, 1139,
     1139, 1139, 1139,  532, 1139,  532,  532,  532, 1139, 1139,
     1139, 1139,  532,  536,  536, 1139,  536,  536,  536,  536,
      536,  536, 1139, 1139,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536, 1139,  536, 1139,  536,  536,  536,
      536,  536,  536,  536,  536,  545, 1139,  545,  545, 1139,
     1139, 1139,  545, 1139,  545,  545,  545, 1139, 1139, 1139,
     1139,  545,  543, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139,  543, 1139,  543,
      543,  543, 1139, 1139, 1139, 1139,  543,  550, 1139,  550,

      550, 1139, 1139, 1139,  550, 1139,  550,  550,  550, 1139,
     1139, 1139, 1139,  550,  548, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,  548,
     1139,  548,  548,  548, 1139, 1139, 1139, 1139,  548,  553,
      553, 1139,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
     1139,  553, 1139,  553,  553,  553,  553,  553,  553,  553,
      553,  556, 1139, 1139,  556, 1139, 1139, 1139, 1139,  556,
     1139,  556,  556,  556, 1139, 1139, 1139, 1139,  556,  558,
      558, 1139,  558,  558,  558,  558,  558,  558,  558,  558,

      558,  558,  558, 1139,  558,  558,  558,  558,  558,  558,
      558,  558, 1139,  558,  558,  558,  558,  558,  558,  558,
      558,  561,  561, 1139,  561,  561,  561,  561,  561,  561,
      561,  561, 1139,  561,  561,  561,  561,  561,  561,  561,
      561,  561, 1139,  561, 1139,  561,  561,  561,  561,  561,
      561,  561,  561,  564, 1139,  564,  564,  564,  564,  564,
     1139, 1139, 1139,  564, 1139,  564,  564,  564, 1139, 1139,
     1139, 1139,  564,  697, 1139, 1139, 1139, 1139,  697, 1139,
      697,  697,  697, 1139, 1139, 1139, 1139,  697,  567,  567,
     1139,  567,  567,  567,  567,  567,  567,  567,  567,  567,

      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567, 1139,  567,  567,  567,  567,  567,  567,  567,  567,
      569,  569,  569,  569,  569,  569,  569,  569,  569, 1139,
     1139,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  572,  572, 1139, 1139, 1139,  572, 1139,  572,
      572,  572, 1139, 1139, 1139, 1139,  572,  702,  702, 1139,
      702,  702,  702,  702, 1139,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  574,

      574, 1139,  574, 1139, 1139, 1139, 1139,  574, 1139,  574,
      574,  574,  305, 1139,  305,  305, 1139,  305, 1139, 1139,
     1139,  305,  305, 1139,  305,  305,  305,  581, 1139, 1139,
      581, 1139,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  712,
      712, 1139,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  600, 1139, 1139,  600, 1139, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139,  600, 1139,  600,  600,  600,  329, 1139, 1139,
      329, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,  329, 1139,
      329,  329,  329,  724,  724, 1139,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724, 1139,  724,  724,  608, 1139, 1139, 1139, 1139,
     1139, 1139, 1139,  608, 1139,  608,  608,  608,  338, 1139,
     1139,  338, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,  338,
      338,  338,  338,  338,  620, 1139, 1139, 1139, 1139, 1139,
      620, 1139,  620,  620,  620,  620,  620, 1139, 1139,  620,
      620,  620,  620,  620,  620, 1139, 1139, 1139, 1139,  620,
      359, 1139, 1139, 1139, 1139, 1139,  359, 1139,  359,  359,
      359,  359,  359, 1139, 1139,  359,  359,  359,  359,  359,
      359, 1139, 1139, 1139, 1139,  359,  367, 1139,  367,  367,
      367, 1139, 1139, 1139, 1139,  367,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  625,  625,  625,  625,  625,  628, 1139,
      628, 1139, 1139,  628, 1139,  628,  628,  628, 1139, 1139,
     1139, 1139,  628,  629, 1139, 1139, 1139, 1139, 1139,  629,
     1139,  629,  629,  629,  629,  629, 1139, 1139,  629,  629,
      629,  629,  629,  629, 1139, 1139, 1139, 1139,  629,  391,
     1139, 1139, 1139, 1139, 1139,  391, 1139,  391,  391,  391,
      391,  391, 1139, 1139,  391,  391,  391,  391,  391,  391,
     1139, 1139, 1139, 1139,  391,  738,  738, 1139,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  634,  634, 1139,
     1139, 1139, 1139, 1139,  634, 1139,  634,  634,  634,  634,
      634, 1139,  634,  634,  634,  634,  634,  634,  634, 1139,
     1139, 1139, 1139,  634,  403,  403, 1139, 1139, 1139, 1139,
     1139,  403, 1139,  403,  403,  403,  403,  403, 1139,  403,
      403,  403,  403,  403,  403,  403, 1139, 1139, 1139, 1139,
      403,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  639, 1139, 1139,  639, 1139, 1139, 1139,

     1139,  639, 1139, 1139, 1139, 1139, 1139, 1139, 1139,  639,
     1139, 1139, 1139, 1139,  639, 1139,  639,  639,  639, 1139,
     1139, 1139, 1139,  639,  643, 1139, 1139, 1139, 1139, 1139,
      643, 1139,  643,  643,  643,  643,  643, 1139, 1139,  643,
      643,  643,  643,  643,  643, 1139, 1139, 1139, 1139,  643,
      439, 1139, 1139, 1139, 1139, 1139,  439, 1139,  439,  439,
      439,  439,  439, 1139, 1139,  439,  439,  439,  439,  439,
      439, 1139, 1139, 1139, 1139,  439,  748,  748,  748,  748,
     1139, 1139,  748, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139,  748,  748, 1139, 1139, 1139,  748, 1139,  748,

      748,  748, 1139, 1139, 1139, 1139,  748,  646,  646,  646,
      646, 1139, 1139,  646, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139,  646, 1139, 1139, 1139,  646, 1139,
      646,  646,  646, 1139, 1139, 1139, 1139,  646,  649,  649,
      649,  649, 1139, 1139,  649, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139,  649,  649, 1139, 1139, 1139,  649,
     1139,  649,  649,  649, 1139, 1139, 1139, 1139,  649,  652,
     1139, 1139, 1139, 1139,  652, 1139,  652,  652,  652, 1139,
     1139, 1139, 1139,  652,  654, 1139,  654,  654,  654, 1139,
     1139, 1139, 1139,  654,  752, 1139,  752, 1139, 1139, 1139,

     1139,  752, 1139,  752,  752,  752, 1139, 1139, 1139, 1139,
      752,  661, 1139,  661,  661,  661, 1139, 1139, 1139, 1139,
      661,  758, 1139, 1139, 1139, 1139,  758, 1139,  758,  758,
      758, 1139, 1139, 1139, 1139,  758,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769, 1139,  769,  769,  769,  769, 1139,  769,
     1139, 1139,  769,  769,  769,  769,  769,  769,  543, 1139,
      543,  543,  543, 1139, 1139, 1139, 1139,  543,  548, 1139,
      548,  548,  548, 1139, 1139, 1139, 1139,  548,  789, 1139,
      789,  789,  789,  789,  789, 1139, 1139, 1139,  789, 1139,

      789,  789,  789, 1139, 1139, 1139, 1139,  789,  702,  702,
     1139,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      794, 1139, 1139,  794, 1139, 1139, 1139, 1139,  794, 1139,
      794,  794,  794,  312, 1139,  312, 1139,  312,  312, 1139,
      312, 1139, 1139, 1139,  312,  312, 1139,  312,  312,  312,
      712,  712, 1139,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  329, 1139, 1139,  329, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139,  329, 1139,  329,  329,  329,  724,  724,
     1139,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      725,  725,  725,  725,  725,  338, 1139, 1139,  338, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139,  338,  338,  338,  338,
      338,  305,  305, 1139,  305, 1139, 1139, 1139, 1139, 1139,

     1139, 1139,  305, 1139,  305,  305, 1139,  305,  305, 1139,
     1139,  305,  305, 1139,  305,  305,  305, 1139,  305,  359,
     1139, 1139, 1139, 1139, 1139,  359, 1139,  359,  359,  359,
      359,  359, 1139, 1139,  359,  359,  359,  359,  359,  359,
     1139, 1139, 1139, 1139,  359,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  391, 1139, 1139,
     1139, 1139, 1139,  391, 1139,  391,  391,  391,  391,  391,
     1139, 1139,  391,  391,  391,  391,  391,  391, 1139, 1139,

     1139, 1139,  391,  738,  738, 1139,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  403,  403, 1139, 1139, 1139,
     1139, 1139,  403, 1139,  403,  403,  403,  403,  403, 1139,
      403,  403,  403,  403,  403,  403,  403, 1139, 1139, 1139,
     1139,  403,  439, 1139, 1139, 1139, 1139, 1139,  439, 1139,
      439,  439,  439,  439,  439, 1139, 1139,  439,  439,  439,
      439,  439,  439, 1139, 1139, 1139, 1139,  439,  821, 1139,
      821,  821,  821, 1139, 1139, 1139, 1139,  821,  748,  748,

      748,  748, 1139, 1139,  748, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139,  748,  748, 1139, 1139, 1139,  748,
     1139,  748,  748,  748, 1139, 1139, 1139, 1139,  748,  646,
      646,  646,  646, 1139, 1139,  646, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139,  646, 1139, 1139, 1139,
      646, 1139,  646,  646,  646, 1139, 1139, 1139, 1139,  646,
      752, 1139,  752, 1139, 1139, 1139, 1139,  752, 1139,  752,
      752,  752, 1139, 1139, 1139, 1139,  752,  758, 1139, 1139,
     1139, 1139,  758, 1139,  758,  758,  758, 1139, 1139, 1139,
     1139,  758,  867,  867, 1139,  867, 1139, 1139, 1139, 1139,

      867, 1139,  867,  867,  867,  874,  874, 1139,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  892,  892,  892,
      892, 1139, 1139,  892, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139,  892,  892, 1139, 1139, 1139,  892, 1139,
      892,  892,  892, 1139, 1139, 1139, 1139,  892,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918, 1139,  918,  918,  918,  918,
     1139,  918, 1139,  918, 1139,  918,  918,  918,  918,  918,

      946,  946, 1139,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987, 1139,
      987,  987,  987,  987, 1139,  987, 1139, 1139, 1139,  987,
      987,  987,  987,  987,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988, 1139,  988,  988,  988,  988, 1139,  988, 1139, 1139,
     1139,  988,  988,  988,  988,  988, 1036, 1036, 1036, 1036,

     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1139, 1036, 1036, 1036, 1036, 1139, 1036,
     1139, 1139, 1139, 1036, 1036, 1036, 1036, 1036, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1139, 1047, 1047, 1047, 1047,
     1139, 1047, 1139, 1139, 1139, 1047, 1047, 1047, 1047, 1047,
     1091, 1091, 1139, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091,   85, 1139, 1139, 1139, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139
    } ;

static yyconst flex_int16_t yy_chk[9669] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,   21,   22,    4,   23,
       21,   22,   24,   23,   47, 1134,   24,    4,    4,   35,
        4,    4,   36,   39,    4,    4,    4,   40,   48,  101,

       35,   57,  101,   36,   39,  234,  317,  118,   40,  234,
       43,   43,  118,   43,   58,   43,   39, 1132,   21,   22,
       40,   23,   44,   44,   24,   44,   47,   44,  317,   51,
       51,   35,   51,   63,   36,   39,   64,   81,   82,   40,
       48,   52,   52,   57,   52,    4,    5,    5,    5,    5,
        5,    5,    5,   43,    5,    5,   58,    5,    5,    5,
       45,    5,   45,    5,    5,   44,  283,  849,    5,    5,
        5,   45,   51, 1130,  849,   63,   45,  217,   64,   81,
       82,  260,  217,   45,   52,   46,  260,   46,   93,    5,
        5,    5,   53,  283,   53,   83,   46,   93,   75,  904,

      307,   46,   45,  307,   83,   83,   93,   54,   46,   54,
       89,   89,   75,   89,  904,   53,    5,    5,    5,    5,
        6,    6,    6,    6,    6,    6,    6,   46,    6,    6,
       54,    6,    6,    6,   53,    6,   69,    6,    6,   55,
       75,   55,    6,    6,    6,   56,   61,   56,   84,   54,
     1127,  102,  319,   89,  102,   61,   61,   84,   84,   69,
     1124,  265,   55,    6,    6,    6,  265, 1094,   56,   61,
      128,  128,  128,  128,  319,  102,  222,  128,   69,  222,
     1094,   55,  150,  150,  150,  150,  222,   56,   61,  150,
        6,    6,    6,    6,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   13,   13,   13,   13,   13,   13,
       13,   70,   13,   13,   62,   13,   13,   13,   71,   13,
       72,   13,   13,   62,   62,   76,   13,   13,   13,   77,
      207,   78, 1123,  207,   70,  207,  520,   62,  520,   76,
       77,   71,   78,   72, 1119,  110,  110,   13,   13,   13,
      110,  398,   77,   70,   78,  105,   62,  105,  105,  105,

       71,   88,   72,  105,   88,  111,  111,   76, 1116,  398,
      111,   77,  110,   78,   13,   13,   13,   13,   14,   14,
       14,   14,   14,   14,   14,   88,   14,   14,  308,   14,
       14,   14,  111,   14,  367,   14,   14,  308,  198,  367,
       14,   14,   14,   94,   88,   94,   94,   94,   94,  198,
      121,  121,  121,  121,  132,  132,   94,  119,  119,  132,
      119,   14,   14,   14,  318,  313,  121,   97,  313,   97,
       97,  121,   97,   97,   97,   94,  127,  127,   97,  127,
      198,  132,  228,  228,  318,  228,  555, 1115,   14,   14,
       14,   14,   15,   15,   15,   15,   15,   15,   15,   97,

       15,   15,  119,   15,   15,   15,  318,   15,  225,   15,
       15,  225, 1114,  555,   15,   15,   15,   99,  225,   99,
       99,  127,   99,   99,   99,  228,  103,  106,   99,  103,
      106,  320,  103,  133,  133,   15,   15,   15,  133,  369,
      343,  103,  106,  343,  369,  485,  235,  103,  106,   99,
      103,  235,  322,  320,  323,  235,  485,  710,  154,  154,
      133,  154,   15,   15,   15,   15,   16,   16,   16,   16,
       16,   16,   16,  322,   16,   16,  323,   16,   16,   16,
      710,   16,  338,   16,   16,  338, 1129,  485,   16,   16,
       16,  104,  104, 1129,  104,  328,  103,  106,  122,  122,

      122,  122,  104,  154,  104,  104,  104,  104,  315,   16,
       16,   16,  543,  545,  122,  104,  328,  543,  545,  122,
      182,  182,  182,  182, 1109,  338,  348,  182,  548,  348,
      315,  315,  315,  548,  104, 1109,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       25,   25,   25,   25,   25,   25,   25,  632,   25,   25,

      360,   25,   25,   25,  360,   25,  496,   25,   25,  496,
      527,  496,   25,   25,   25,  632,  126,  126,  126,  126,
      123,  123,  123,  123,  527, 1113,  360,  123,  144,  144,
      144,  144,  126,   25,   25,   25,  123,  126,  126,  575,
      139,  123,  575,  239,  144,  158,  158,  239,  158,  144,
     1112,  139,  139,  239,  332,  239,  139, 1111,  139,  316,
       25,   25,   25,   25,   26,   26,   26,   26,   26,   26,
       26,  316,   26,   26, 1107,   26,   26,   26,  139,   26,
      316,   26,   26,  140,  585, 1106,   26,   26,   26,  332,
      158,  550,  123,  316,  140,  140,  550,  345,  345,  140,

      345,  140,  145,  145,  145,  145,  585,   26,   26,   26,
      149,  149,  149,  149,  351,  351,  332,  351,  145,  600,
      149,  140,  600,  145, 1104,  346,  149,  346,  346,  346,
      603,  149, 1103,  603,   26,   26,   26,   26,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,  112,  112,   49,  112, 1102, 1101,
       49,   49,   49,   49,  588,  594,  353,  166,  166,  353,
      112,  112,  166,  362,  362,  112,  362,  124,  124,  124,
      124,   49,   49,   49,  124,  559,  588,  594,  162,  162,
      353,  162,  613,  124,  166,  613, 1133,  112,  124,  112,
     1133, 1100,  173,  173,  559,  173, 1099, 1098,   49,   49,
       49,   49,   49,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,  135,
      135,   50,  135,  162, 1097,   50,   50,   50,   50,  167,
      167,  589,  591,  141,  167,  135,  135,  173,  590,  124,

      135,  590,  595, 1096,  141,  141,   50,   50,   50,  141,
      240,  141,  589,  591,  853,  240,  167,  371,  371,  240,
      371,  590,  135,  595,  135,  240, 1091,  240,  853,  383,
      383,  141,  383,   50,   50,   50,   50,   50,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79, 1121, 1088, 1087,
       79,   79,   79,   79,  298,  298, 1085,  298,  146,  146,
      146,  146, 1121,  394,  394,  146,  394,  175,  175,  175,
      175,   79,   79,   79,  146,  172,  172,  172,  172,  146,
     1084, 1083,  172,  175,  181,  181, 1082,  181,  175,  299,

      299, 1081,  299,  172,  172,  172,  172,  298,   79,   79,
       79,   79,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80, 1080,  836,  596,   80,   80,   80,   80,  295,  181,
      146,  295,  299,  344,  143,  143,  344,  143,  836,  143,
      176,  176,  176,  176,  596,   80,   80,   80,  344,  707,
      143,  143,  295, 1079,  344,  143,  176,  143, 1078,  359,
      359,  176,  187,  187,  359,  187,  382,  382,  382,  382,
      707,  295,   80,   80,   80,   80,   95,  143, 1077,  143,
      147,  147,  147,  147, 1076,  422,  359,  147,  422,   95,

      177,  177,  177,  177,  700,  422,  147,  177,  392,   95,
       95,  147,  392,  344,   95,   95,  177,  187, 1074,   95,
       95,  177,   95,   95, 1067,  619,  190,  190,  619,  190,
       95,   95, 1066, 1053,  392,   95,   95,  168,  168,  700,
      168,   95,   95,   95,   95,   95,   95,   96,   96,   96,
       96,  716,  339,  168,  168,  339,   96,  614,  168,  614,
      614,  614,  147,   96,   96,   96,  700,  178,  178,  178,
      178,  190,  177,  716,  178,  193,  193,  711,  193, 1052,
      168, 1050,  168,  178,   96, 1049,  347,  509,  178,  347,
      509,   96,   96,  202,  202,  339,  202,  509,  711,  220,

      220,  347,  220,  180,  180,  180,  180,  347,  339, 1043,
       96,  871,   96,   96,   98,   98,   98,   98,  340,  180,
      193,  340, 1136,   98,  180,  201,  201,  201,  201, 1042,
       98,   98,   98,  871,  407,  407,  202,  407,  202,  178,
     1136,  201,  201,  201,  220,  226,  226,  945,  226,  424,
      424,   98,  424,   98,  243,  243,  347,  243,   98,   98,
     1041,  340,  201,  247,  247, 1040,  247,  253,  253,  945,
      253,  256,  256, 1039,  256,  341,  340,   98,  341,   98,
       98,  100,  341, 1038,  100,  693,  321, 1037,  693,  321,
      226,  201,  349,  100,  100,  349,  100,  100, 1035,  243,

      100,  100,  100,  429,  429,  100,  429,  349,  247,  321,
     1013,  321,  253,  349,  714, 1012,  256,  341,  341,  354,
     1010,  354,  354,  354,  100,  321,  705,  354,  355,  705,
      720,  355,  321,  720,  336,  714,  336,  336,  800,  336,
      336,  336,  404,  355,  341,  336,  404,  321, 1009,  355,
      804,  100,  138,  138, 1008,  138,  138,  138,  138,  800,
      138,  138,  349,  138,  138,  138,  336,  138,  404,  138,
      138,  804, 1007, 1006,  138,  138,  138,  337,  356,  337,
      337,  356,  337,  337,  337, 1005,  350,  350,  337,  350,
     1004,  434,  434,  356,  434,  138,  138,  138,  355,  356,

     1003,  350,  786,  361,  361,  786, 1002,  350,  361,  337,
      350,  364,  364, 1001,  442,  442,  364,  442,  374,  374,
      374,  374,  138,  138,  138,  138,  296,  296,  296,  296,
      361,  391,  391, 1000,  374,  999,  391,  511,  364,  374,
      511,  998,  296,  296,  296,  393,  393,  511,  356,  997,
      393,  364,  375,  375,  375,  375,  350,  604,  391,  375,
      604,  996,  995,  296,  378,  378,  378,  378,  375,  994,
      296,  296,  393,  375,  451,  451,  839,  451,  993,  839,
      378,  377,  377,  377,  377,  378,  378,  878,  377,  296,
      878,  296,  296,  297,  297,  297,  297,  377,  379,  379,

      379,  379,  377,  440,  992,  379,  604,  440,  990,  297,
      297,  297,  989,  985,  984,  380,  380,  380,  380,  983,
      462,  462,  380,  462,  375,  381,  381,  381,  381,  440,
      297,  380,  386,  386,  386,  386,  380,  297,  297,  386,
      982,  381,  387,  387,  387,  387,  381,  381,  981,  387,
      878,  471,  471,  377,  471,  980,  297,  979,  297,  297,
      311,  476,  476,  311,  476,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  403,
      977,  976,  311,  311,  311,  311,  975,  380,  396,  396,
      403,  403,  974,  396,  972,  403,  971,  403,  405,  415,

      415,  415,  415,  311,  311,  311,  415,  970,  969,  405,
      405,  409,  968,  967,  405,  396,  405,  403,  420,  420,
      420,  420,  409,  409,  966,  420,  965,  409,  396,  409,
      311,  311,  311,  311,  311,  329,  405,  925,  329,  964,
      925,  329,  329,  329,  329,  410,  410,  410,  410,  409,
      963,  962,  960,  411,  411,  411,  411,  329,  329,  329,
      411,  410,  409,  439,  439,  959,  410,  958,  439,  411,
      413,  413,  413,  413,  411,  955,  954,  413,  329,  414,
      414,  414,  414,  441,  441,  949,  413,  948,  441,  414,
      439,  413,  946,  944,  943,  414,  416,  416,  416,  416,

      414,  942,  723,  416,  329,  723,  329,  329,  342,  941,
      441,  342,  416,  480,  480, 1051,  480,  416, 1051,  950,
      342,  342,  950,  342,  342,  411,  940,  342,  342,  342,
      939,  938,  342,  417,  417,  417,  417,  419,  419,  419,
      419,  675,  413,  417,  675,  491,  491,  419,  491,  417,
      937,  342,  610,  419,  417,  610,  723,  936,  419,  421,
      421,  421,  421,  935,  506,  506,  421,  506,  416,  950,
      592,  444,  444,  592,  512,  512,  444,  512,  342,  399,
      399,  934,  399,  399,  399,  399,  611,  399,  399,  611,
      399,  399,  399,  592,  399,  610,  399,  399,  444,  675,

      933,  399,  399,  399,  932,  931,  610,  445,  445,  445,
      445,  444,  930,  929,  445,  446,  446,  446,  446,  928,
      927,  926,  399,  399,  399,  445,  445,  445,  445,  611,
      459,  459,  459,  459,  924,  611,  446,  459,  922,  454,
      454,  454,  454,  515,  515, 1093,  515,  919, 1093,  399,
      399,  399,  399,  400,  400,  454,  400,  400,  400,  400,
      454,  400,  400,  917,  400,  400,  400,  916,  400,  638,
      400,  400,  638,  915,  914,  400,  400,  400,  913,  638,
      912,  448,  448,  448,  448,  911,  515,  807,  448,  910,
      807, 1093,  458,  458,  458,  458,  400,  400,  400,  448,

      448,  448,  448,  529,  529,  909,  529,  908,  458,  450,
      450,  450,  450,  458,  533,  533,  450,  533,  537,  537,
      907,  537,  906,  400,  400,  400,  400,  450,  450,  450,
      450,  455,  455,  455,  455,  905,  903,  902,  455,  457,
      457,  457,  457,  901,  900,  807,  457,  455,  461,  461,
      461,  461,  455,  899,  898,  457,  460,  460,  460,  460,
      457,  897,  895,  460,  461,  540,  540,  726,  540,  461,
      726,  894,  460,  465,  465,  465,  465,  460,  893,  889,
      465,  466,  466,  466,  466,  620,  620,  888,  466,  601,
      620,  887,  601,  884,  612,  612,  601,  612,  615,  615,

      883,  615,  877,  455,  639,  618,  618,  639,  618,  612,
      726,  457,  620,  615,  639,  612,  876,  874, 1014,  615,
      618, 1014,  621,  621,  870,  726,  618,  621,  460,  580,
     1105,  601,  580, 1105,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  869,  621,
      867,  580,  580,  580,  580,  866,  617,  617,  601,  617,
      622,  622,  865,  713,  612,  622,  713, 1118,  615,  864,
     1118,  617,  580,  580,  580,  618,  863,  617,  862, 1014,
      617,  625,  625,  625,  625,  861,  713,  622,  626,  626,
      626,  626,  629,  629,  860,  859,  858,  629,  622,  580,

      580,  580,  580,  580,  625,  630,  630,  631,  631,  857,
      630,  626,  631,  856,  855,  854,  643,  643,  704,  629,
      704,  643,  704,  704,  634,  715,  617,  852,  715,  851,
      881,  704,  630,  881,  631,  634,  634,  850,  880,  848,
      634,  880,  634,  643,  847,  631,  633,  633,  715,  633,
      633,  633,  633,  727,  633,  633,  727,  633,  633,  633,
      635,  633,  634,  633,  633,  846,  845,  844,  633,  633,
      633,  635,  635,  881,  801,  843,  635,  801,  635,  644,
      644,  880,  842,  636,  644,  880,  841,  645,  645,  633,
      633,  633,  645,  881,  636,  636,  727,  801,  635,  636,

      795,  636,  795,  840,  795,  795,  644,  727,  646,  646,
      646,  646,  838,  795,  645,  646,  633,  633,  633,  633,
     1120,  636,  837, 1120,  835,  645,  646,  646,  646,  646,
      834,  833,  636,  647,  647,  647,  647,  832,  831,  830,
      647,  648,  648,  648,  648,  829,  828,  827,  648,  649,
      649,  649,  649,  826,  647, 1125,  649,  825, 1125,  648,
      648,  648,  648,  728,  728,  824,  728,  649,  649,  649,
      649,  729,  729,  823,  729,  822,  730,  730,  728,  730,
      731,  731,  819,  818,  728,  731,  729,  733,  733,  733,
      733,  730,  729,  735,  735,  735,  735,  730,  737,  737,

      730,  740,  817,  737,  814,  802,  872,  731,  802,  872,
      733,  875,  740,  740,  875,  813,  735,  740,  809,  740,
      808,  809,  731,  810,  952,  737,  810,  952,  802,  872,
      745,  745,  806,  728,  875,  745,  805,  799,  798,  740,
      737,  729,  749,  749,  749,  749,  730,  738,  738,  749,
      738,  738,  738,  738,  740,  738,  738,  745,  738,  738,
      738,  809,  738,  749,  738,  738,  810,  952,  809,  738,
      738,  738,  745,  797,  952,  747,  747,  747,  747,  794,
      947,  810,  747,  947,  882,  882,  792,  791,  790,  882,
      738,  738,  738,  747,  747,  747,  747,  762,  762,  789,

      788,  787,  762,  947, 1072,  762,  762, 1072,  785, 1128,
      762,  882, 1128,  762,  762,  882,  762,  738,  738,  738,
      738,  739,  739,  784,  739,  739,  739,  739, 1108,  739,
      739, 1108,  739,  739,  739,  783,  739,  951,  739,  739,
      951,  782,  781,  739,  739,  739,  780,  779,  778,  748,
      748,  748,  748,  777,  812,  812,  748,  811,  811,  812,
      811,  776, 1072,  775,  739,  739,  739,  748,  748,  748,
      748,  816,  811, 1011,  815,  815, 1011,  774,  811,  815,
      951,  812,  816,  816, 1108,  820,  820,  816,  812,  816,
      820,  739,  739,  739,  739,  772, 1011,  771,  951, 1015,

     1015,  815, 1015,  821,  821,  821,  821,  770,  815,  816,
      821,  768,  820,  885,  885,  767,  816,  886,  885,  820,
      766,  821,  821,  821,  821,  890,  890,  811,  886,  886,
      890,  953,  953,  886, 1068,  886,  953, 1068, 1073, 1073,
      885, 1073, 1015,  765,  885,  764,  891,  891,  891,  891,
      763, 1016,  890,  891, 1016,  886,  890, 1068,  953,  886,
     1131,  761,  760, 1131,  891,  891,  891,  891,  892,  892,
      892,  892,  956,  956,  759,  892,  953,  956,  961,  961,
      957, 1073, 1135,  961,  757, 1135,  892,  892,  892,  892,
     1075,  957,  957, 1075, 1016,  756,  957, 1095,  957,  956,

     1095, 1017, 1017, 1020, 1020,  961, 1017,  755, 1020, 1021,
     1025, 1025, 1016,  754,  753, 1025, 1092,  956,  957, 1092,
     1021, 1021,  752,  961,  751, 1021, 1110, 1021, 1017, 1110,
     1020, 1122,  750, 1075, 1122,  744,  957, 1025, 1296, 1092,
     1095, 1138, 1138, 1095, 1138,  743, 1296, 1021, 1075, 1296,
     1296, 1308,  742, 1308, 1308, 1308, 1312,  736, 1312, 1312,
     1312,  732,  725, 1345, 1339, 1345, 1345, 1345,  724, 1110,
      718,  717, 1339,  712, 1122, 1339, 1339, 1372,  709, 1372,
     1372, 1372, 1110,  708, 1138, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,

     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,

     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,

     1149, 1149, 1149, 1149, 1149, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1156, 1156, 1156,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1159, 1159, 1159, 1159, 1159, 1159, 1159,

     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,

     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,

     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1166, 1166,  702,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1167,
      701,  699,  698,  697,  696,  694,  692,  691,  687,  685,
      683,  682,  681,  680, 1167,  679, 1167, 1167, 1167,  678,
      677,  676,  674, 1167, 1168,  673, 1168, 1168,  672, 1168,
      671,  670,  669, 1168, 1168,  668, 1168, 1168, 1168, 1169,
      667, 1169, 1169, 1169, 1169,  666, 1169,  665,  664,  663,

     1169, 1169, 1169, 1169, 1169, 1169, 1170, 1170, 1170,  662,
      659,  658,  657,  656, 1170,  655,  654,  651,  650, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,  642, 1170,
     1170, 1171,  641, 1171, 1171,  640, 1171,  637,  628,  627,
     1171, 1171,  624, 1171, 1171, 1171, 1172, 1172, 1172,  599,
      598,  597,  587,  586, 1172,  584,  582,  581,  579, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,  576, 1172,
     1172, 1173, 1173,  574, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,

     1173, 1173, 1173, 1174,  572,  571,  570,  568,  566, 1174,
      564, 1174, 1174, 1174, 1174, 1174,  563,  560, 1174, 1174,
     1174, 1174, 1174, 1174,  557,  554,  552,  551, 1174, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1176,  549, 1176, 1176, 1176,  547,  546,  544,  542,
     1176, 1177,  539, 1177, 1177,  535,  531,  528, 1177,  526,
     1177, 1177, 1177,  525,  524,  522,  521, 1177, 1178, 1178,
     1178, 1178,  518,  517, 1178,  514,  508,  505,  504,  500,

      498,  497, 1178,  495,  493, 1178,  490,  488,  487, 1178,
      484, 1178, 1178, 1178,  482,  478,  475, 1178, 1178, 1179,
     1179, 1179, 1179,  474,  473,  470,  469,  468,  464,  456,
      453,  449,  437, 1179,  436, 1179, 1179, 1179,  432,  431,
     1179,  427, 1179, 1179, 1179,  426,  412,  406,  401, 1179,
     1180, 1180, 1180, 1180,  397,  389, 1180,  388,  385,  376,
      373,  370,  368,  365,  357,  331,  330,  327,  325,  324,
      314, 1180,  312, 1180, 1180, 1180,  305,  304,  301,  300,
     1180, 1181, 1181,  290, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1182,  287,  286,  282,  278,  277, 1182,
      274, 1182, 1182, 1182, 1182, 1182,  270,  269, 1182, 1182,
     1182, 1182, 1182, 1182,  266,  261,  230,  216, 1182, 1183,
     1183,  215, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1184, 1184,  214,  210,  209,  205,  200, 1184,  197,
     1184, 1184, 1184, 1184, 1184,  189, 1184, 1184, 1184, 1184,
     1184, 1184, 1184,  186,  179,  165,  161, 1184, 1185, 1185,

     1185, 1185,  157,  148, 1185,  134,  131,  125,  113,  109,
       92,   91, 1185,   90,   85, 1185,    8,    7,    0, 1185,
        0, 1185, 1185, 1185,    0,    0,    0, 1185, 1185, 1186,
     1186, 1186, 1186,    0,    0,    0,    0, 1186,    0,    0,
        0,    0,    0, 1186,    0, 1186, 1186,    0,    0,    0,
     1186,    0, 1186, 1186, 1186,    0,    0,    0,    0, 1186,
     1187, 1187, 1187, 1187,    0,    0, 1187,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1187,    0, 1187, 1187, 1187,    0,    0,    0,    0,
     1187, 1188,    0,    0, 1188,    0,    0,    0,    0, 1188,

        0, 1188, 1188, 1188,    0,    0,    0,    0, 1188, 1189,
     1189,    0, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1190, 1190,    0, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1191, 1191,    0, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1192,    0,    0,    0,    0,
        0, 1192,    0, 1192, 1192, 1192, 1192, 1192,    0,    0,
     1192, 1192, 1192, 1192, 1192, 1192,    0,    0,    0,    0,
     1192, 1193,    0, 1193, 1193, 1193,    0,    0,    0,    0,
     1193, 1194, 1194, 1194, 1194,    0,    0, 1194,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1194, 1194,    0,
        0,    0, 1194,    0, 1194, 1194, 1194,    0,    0,    0,
        0, 1194, 1195, 1195, 1195, 1195,    0,    0, 1195,    0,
        0,    0,    0,    0,    0,    0, 1195,    0,    0, 1195,
        0,    0,    0, 1195,    0, 1195, 1195, 1195,    0,    0,

        0, 1195, 1195, 1196, 1196, 1196, 1196,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1196,    0, 1196,
     1196,    0,    0,    0, 1196,    0, 1196, 1196, 1196,    0,
        0,    0,    0, 1196, 1197, 1197, 1197, 1197,    0,    0,
     1197,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1197,    0, 1197, 1197, 1197,
        0,    0,    0,    0, 1197, 1198,    0, 1198, 1198, 1198,
        0,    0,    0,    0, 1198, 1199,    0, 1199,    0,    0,
        0,    0, 1199,    0, 1199, 1199, 1199,    0,    0,    0,
        0, 1199, 1200, 1200,    0, 1200,    0,    0,    0,    0,

     1200,    0, 1200, 1200, 1200,    0,    0,    0,    0, 1200,
     1201, 1201,    0, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201,    0, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201,    0, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1202,    0,    0, 1202,    0,    0,    0,    0,
     1202,    0, 1202, 1202, 1202,    0,    0,    0,    0, 1202,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203,    0, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1204, 1204,    0, 1204, 1204, 1204, 1204, 1204,

     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204,    0, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1205, 1205,    0, 1205,    0, 1205,
     1205, 1205,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1205, 1205, 1205,    0, 1205, 1205,    0,    0,
        0,    0,    0, 1205, 1206,    0,    0, 1206,    0,    0,
        0,    0, 1206,    0, 1206, 1206, 1206,    0,    0,    0,
        0, 1206, 1207, 1207,    0, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,

     1207, 1207, 1207, 1207, 1208, 1208,    0, 1208,    0, 1208,
     1208, 1208, 1208, 1208, 1208,    0, 1208, 1208, 1208, 1208,
        0, 1208, 1208, 1208, 1208,    0, 1208,    0, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1209,    0,    0, 1209,
        0,    0,    0,    0, 1209,    0,    0,    0,    0, 1209,
     1209,    0, 1209,    0,    0,    0,    0, 1209,    0, 1209,
     1209, 1209, 1210, 1210,    0, 1210,    0, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210,    0, 1210,    0, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1211, 1211,    0, 1211,    0, 1211,

     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211,    0, 1211,    0, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1212,    0,    0, 1212,
        0,    0,    0,    0, 1212,    0, 1212, 1212, 1212,    0,
        0,    0,    0, 1212, 1213, 1213,    0, 1213, 1213, 1213,
     1213, 1213, 1213,    0,    0, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213,    0, 1213,    0, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1214,    0, 1214, 1214,
     1214,    0,    0,    0,    0, 1214, 1215,    0, 1215, 1215,
        0,    0,    0, 1215,    0, 1215, 1215, 1215,    0,    0,

        0,    0, 1215, 1216,    0, 1216, 1216, 1216,    0,    0,
        0,    0, 1216, 1217,    0, 1217, 1217,    0,    0,    0,
     1217,    0, 1217, 1217, 1217,    0,    0,    0,    0, 1217,
     1218, 1218,    0, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218,    0, 1218,    0, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1219,    0,    0, 1219,    0,    0,    0,    0,
     1219,    0, 1219, 1219, 1219,    0,    0,    0,    0, 1219,
     1220, 1220,    0, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220,    0, 1220, 1220, 1220, 1220, 1220,

     1220, 1220, 1220,    0, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1221, 1221,    0, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221,    0, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221,    0, 1221,    0, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1222,    0, 1222, 1222, 1222, 1222,
     1222,    0,    0,    0, 1222,    0, 1222, 1222, 1222,    0,
        0,    0,    0, 1222, 1223, 1223,    0, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223,    0, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1224, 1224,    0,    0, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1225, 1225,
     1225,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
        0, 1225, 1225, 1226, 1226,    0, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1227,    0, 1227, 1227, 1227,
        0,    0,    0,    0, 1227, 1228, 1228,    0,    0,    0,

     1228,    0, 1228, 1228, 1228,    0,    0,    0,    0, 1228,
     1229,    0, 1229, 1229,    0, 1229,    0,    0,    0, 1229,
     1229,    0, 1229, 1229, 1229, 1230,    0,    0, 1230,    0,
        0,    0,    0, 1230,    0, 1230, 1230, 1230, 1231,    0,
        0, 1231,    0, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1232,    0, 1232, 1232, 1232,    0,    0,    0, 1232, 1233,
        0,    0,    0,    0,    0,    0,    0, 1233,    0, 1233,
     1233, 1233, 1234,    0, 1234, 1234,    0, 1234,    0,    0,

        0, 1234, 1234,    0, 1234, 1234, 1234, 1235,    0,    0,
     1235,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1235, 1235,
     1235, 1235, 1235, 1236, 1236,    0, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1237,    0,    0,    0,    0,
        0, 1237,    0, 1237, 1237, 1237, 1237, 1237,    0,    0,
     1237, 1237, 1237, 1237, 1237, 1237,    0,    0,    0,    0,
     1237, 1238,    0,    0,    0,    0,    0, 1238,    0, 1238,

        0, 1238, 1238, 1238,    0,    0, 1238, 1238, 1238, 1238,
     1238, 1238,    0,    0,    0,    0, 1238, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1240,
        0, 1240, 1240,    0,    0,    0, 1240,    0, 1240, 1240,
     1240,    0,    0,    0,    0, 1240, 1241,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1241,    0, 1241, 1241, 1241,    0,    0,    0,    0,
     1241, 1242, 1242, 1242, 1242,    0,    0, 1242,    0,    0,

        0,    0,    0,    0,    0, 1242,    0,    0, 1242,    0,
        0,    0, 1242,    0, 1242, 1242, 1242,    0,    0,    0,
     1242, 1242, 1243, 1243, 1243, 1243,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1243,    0, 1243, 1243,
     1243,    0,    0, 1243,    0, 1243, 1243, 1243,    0,    0,
        0,    0, 1243, 1244, 1244, 1244, 1244,    0,    0, 1244,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1244,    0, 1244, 1244, 1244,    0,
        0,    0,    0, 1244, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,

     1245, 1245, 1245, 1245,    0, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1246,    0, 1246,    0,
        0, 1246,    0, 1246, 1246, 1246,    0,    0,    0,    0,
     1246, 1247, 1247,    0, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1248,    0,    0,    0,    0,    0, 1248,
        0, 1248, 1248, 1248, 1248, 1248,    0,    0, 1248, 1248,
     1248, 1248, 1248, 1248,    0,    0,    0,    0, 1248, 1249,
        0,    0,    0,    0,    0, 1249,    0, 1249,    0, 1249,

     1249, 1249,    0,    0, 1249, 1249, 1249, 1249, 1249, 1249,
        0,    0,    0,    0, 1249, 1250, 1250,    0, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1251, 1251,    0,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1252,
     1252,    0,    0,    0,    0,    0, 1252,    0, 1252, 1252,
     1252, 1252, 1252,    0, 1252, 1252, 1252, 1252, 1252, 1252,

     1252,    0,    0,    0,    0, 1252, 1253,    0,    0,    0,
        0,    0, 1253,    0, 1253,    0, 1253, 1253, 1253,    0,
        0, 1253, 1253, 1253, 1253, 1253, 1253,    0,    0,    0,
        0, 1253, 1254, 1254, 1254, 1254,    0,    0, 1254,    0,
        0,    0,    0,    0,    0,    0, 1254,    0,    0, 1254,
        0,    0,    0, 1254,    0, 1254, 1254, 1254,    0,    0,
        0, 1254, 1254, 1255, 1255, 1255, 1255,    0,    0,    0,
        0, 1255,    0,    0,    0,    0,    0, 1255,    0, 1255,
     1255,    0,    0,    0, 1255,    0, 1255, 1255, 1255,    0,
        0,    0,    0, 1255, 1256, 1256, 1256, 1256,    0,    0,

     1256,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1256,    0, 1256, 1256, 1256,
        0,    0,    0,    0, 1256, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257,    0, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1258,    0,    0,
     1258,    0,    0,    0,    0, 1258,    0,    0,    0,    0,
        0,    0,    0, 1258,    0,    0,    0,    0, 1258,    0,
     1258, 1258, 1258,    0,    0,    0,    0, 1258, 1259,    0,
        0, 1259,    0,    0,    0,    0, 1259,    0, 1259, 1259,

     1259,    0,    0,    0,    0, 1259, 1260, 1260,    0, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1261, 1261,
        0, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1262, 1262,    0, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1263,    0,    0,    0,    0,    0, 1263,    0,
     1263, 1263, 1263, 1263, 1263,    0,    0, 1263, 1263, 1263,
     1263, 1263, 1263,    0,    0,    0,    0, 1263, 1264,    0,
        0,    0,    0,    0, 1264,    0, 1264,    0, 1264, 1264,
     1264,    0,    0, 1264, 1264, 1264, 1264, 1264, 1264,    0,
        0,    0,    0, 1264, 1265, 1265, 1265, 1265,    0,    0,
     1265,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1265, 1265,    0,    0,    0, 1265,    0, 1265, 1265, 1265,
        0,    0,    0,    0, 1265, 1266,    0, 1266, 1266, 1266,
        0,    0,    0,    0, 1266, 1267, 1267, 1267, 1267,    0,

        0, 1267,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1267, 1267,    0,    0,    0, 1267,    0, 1267, 1267,
     1267,    0,    0,    0,    0, 1267, 1268, 1268, 1268, 1268,
        0,    0, 1268,    0,    0,    0,    0,    0,    0,    0,
     1268,    0,    0, 1268,    0,    0,    0, 1268,    0, 1268,
     1268, 1268,    0,    0,    0, 1268, 1268, 1269, 1269, 1269,
     1269,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1269,    0, 1269, 1269,    0,    0,    0, 1269,    0,
     1269, 1269, 1269,    0,    0,    0,    0, 1269, 1270, 1270,
     1270, 1270,    0,    0, 1270,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1270,
        0, 1270, 1270, 1270,    0,    0,    0,    0, 1270, 1271,
        0,    0,    0,    0, 1271,    0, 1271, 1271, 1271,    0,
        0,    0,    0, 1271, 1272,    0, 1272,    0,    0,    0,
        0, 1272,    0, 1272, 1272, 1272,    0,    0,    0,    0,
     1272, 1273,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1273,    0, 1273, 1273,
     1273,    0,    0,    0,    0, 1273, 1274, 1274,    0, 1274,
        0,    0,    0,    0, 1274,    0, 1274, 1274, 1274,    0,
        0,    0,    0, 1274, 1275, 1275,    0, 1275, 1275, 1275,

     1275, 1275, 1275, 1275, 1275,    0, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275,    0, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1276,    0,    0, 1276,
        0,    0,    0,    0, 1276,    0, 1276, 1276, 1276,    0,
        0,    0,    0, 1276, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277,    0, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1278, 1278,    0, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278,    0, 1278, 1278,

     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1279,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1279,    0, 1279, 1279, 1279,    0,    0,
        0,    0, 1279, 1280,    0,    0, 1280,    0,    0,    0,
        0, 1280,    0, 1280, 1280, 1280,    0,    0,    0,    0,
     1280, 1281, 1281,    0, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1282, 1282,    0, 1282,    0, 1282, 1282,
     1282, 1282, 1282, 1282,    0, 1282, 1282, 1282, 1282,    0,

     1282, 1282, 1282, 1282,    0, 1282,    0, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1283,    0,    0, 1283,    0,
        0,    0,    0, 1283,    0,    0,    0,    0, 1283, 1283,
        0, 1283,    0,    0,    0,    0, 1283,    0, 1283, 1283,
     1283, 1284, 1284,    0, 1284,    0, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284,    0, 1284,    0, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1285, 1285,    0, 1285,    0, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285,    0, 1285,    0, 1285, 1285, 1285,

     1285, 1285, 1285, 1285, 1285, 1286,    0,    0, 1286,    0,
        0,    0,    0, 1286,    0, 1286, 1286, 1286,    0,    0,
        0,    0, 1286, 1287, 1287,    0, 1287, 1287, 1287, 1287,
     1287, 1287,    0,    0, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287,    0, 1287,    0, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1288,    0, 1288, 1288,    0,
        0,    0, 1288,    0, 1288, 1288, 1288,    0,    0,    0,
        0, 1288, 1289,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1289,    0, 1289,
     1289, 1289,    0,    0,    0,    0, 1289, 1290,    0, 1290,

     1290,    0,    0,    0, 1290,    0, 1290, 1290, 1290,    0,
        0,    0,    0, 1290, 1291,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1291,
        0, 1291, 1291, 1291,    0,    0,    0,    0, 1291, 1292,
     1292,    0, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
        0, 1292,    0, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1293,    0,    0, 1293,    0,    0,    0,    0, 1293,
        0, 1293, 1293, 1293,    0,    0,    0,    0, 1293, 1294,
     1294,    0, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,

     1294, 1294, 1294,    0, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294,    0, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1295, 1295,    0, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295,    0, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295,    0, 1295,    0, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1297,    0, 1297, 1297, 1297, 1297, 1297,
        0,    0,    0, 1297,    0, 1297, 1297, 1297,    0,    0,
        0,    0, 1297, 1298,    0,    0,    0,    0, 1298,    0,
     1298, 1298, 1298,    0,    0,    0,    0, 1298, 1299, 1299,
        0, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,

     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299,    0, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,    0,
        0, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1301, 1301,    0,    0,    0, 1301,    0, 1301,
     1301, 1301,    0,    0,    0,    0, 1301, 1302, 1302,    0,
     1302, 1302, 1302, 1302,    0, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1303,

     1303,    0, 1303,    0,    0,    0,    0, 1303,    0, 1303,
     1303, 1303, 1304,    0, 1304, 1304,    0, 1304,    0,    0,
        0, 1304, 1304,    0, 1304, 1304, 1304, 1305,    0,    0,
     1305,    0, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1306,
     1306,    0, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1307,    0,    0, 1307,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1307,    0, 1307, 1307, 1307, 1309,    0,    0,
     1309,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1309,    0,
     1309, 1309, 1309, 1310, 1310,    0, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310,    0, 1310, 1310, 1311,    0,    0,    0,    0,
        0,    0,    0, 1311,    0, 1311, 1311, 1311, 1313,    0,
        0, 1313,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1313,
     1313, 1313, 1313, 1313, 1314,    0,    0,    0,    0,    0,
     1314,    0, 1314, 1314, 1314, 1314, 1314,    0,    0, 1314,
     1314, 1314, 1314, 1314, 1314,    0,    0,    0,    0, 1314,
     1315,    0,    0,    0,    0,    0, 1315,    0, 1315, 1315,
     1315, 1315, 1315,    0,    0, 1315, 1315, 1315, 1315, 1315,
     1315,    0,    0,    0,    0, 1315, 1316,    0, 1316, 1316,
     1316,    0,    0,    0,    0, 1316, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,

     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1318,    0,
     1318,    0,    0, 1318,    0, 1318, 1318, 1318,    0,    0,
        0,    0, 1318, 1319,    0,    0,    0,    0,    0, 1319,
        0, 1319, 1319, 1319, 1319, 1319,    0,    0, 1319, 1319,
     1319, 1319, 1319, 1319,    0,    0,    0,    0, 1319, 1320,
        0,    0,    0,    0,    0, 1320,    0, 1320, 1320, 1320,
     1320, 1320,    0,    0, 1320, 1320, 1320, 1320, 1320, 1320,
        0,    0,    0,    0, 1320, 1321, 1321,    0, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,

     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1322, 1322,    0,
        0,    0,    0,    0, 1322,    0, 1322, 1322, 1322, 1322,
     1322,    0, 1322, 1322, 1322, 1322, 1322, 1322, 1322,    0,
        0,    0,    0, 1322, 1323, 1323,    0,    0,    0,    0,
        0, 1323,    0, 1323, 1323, 1323, 1323, 1323,    0, 1323,
     1323, 1323, 1323, 1323, 1323, 1323,    0,    0,    0,    0,
     1323, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1324, 1325,    0,    0, 1325,    0,    0,    0,

        0, 1325,    0,    0,    0,    0,    0,    0,    0, 1325,
        0,    0,    0,    0, 1325,    0, 1325, 1325, 1325,    0,
        0,    0,    0, 1325, 1326,    0,    0,    0,    0,    0,
     1326,    0, 1326, 1326, 1326, 1326, 1326,    0,    0, 1326,
     1326, 1326, 1326, 1326, 1326,    0,    0,    0,    0, 1326,
     1327,    0,    0,    0,    0,    0, 1327,    0, 1327, 1327,
     1327, 1327, 1327,    0,    0, 1327, 1327, 1327, 1327, 1327,
     1327,    0,    0,    0,    0, 1327, 1328, 1328, 1328, 1328,
        0,    0, 1328,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1328, 1328,    0,    0,    0, 1328,    0, 1328,

     1328, 1328,    0,    0,    0,    0, 1328, 1329, 1329, 1329,
     1329,    0,    0, 1329,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1329,    0,    0,    0, 1329,    0,
     1329, 1329, 1329,    0,    0,    0,    0, 1329, 1330, 1330,
     1330, 1330,    0,    0, 1330,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1330, 1330,    0,    0,    0, 1330,
        0, 1330, 1330, 1330,    0,    0,    0,    0, 1330, 1331,
        0,    0,    0,    0, 1331,    0, 1331, 1331, 1331,    0,
        0,    0,    0, 1331, 1332,    0, 1332, 1332, 1332,    0,
        0,    0,    0, 1332, 1333,    0, 1333,    0,    0,    0,

        0, 1333,    0, 1333, 1333, 1333,    0,    0,    0,    0,
     1333, 1334,    0, 1334, 1334, 1334,    0,    0,    0,    0,
     1334, 1335,    0,    0,    0,    0, 1335,    0, 1335, 1335,
     1335,    0,    0,    0,    0, 1335, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336,    0, 1336, 1336, 1336, 1336,    0, 1336,
        0,    0, 1336, 1336, 1336, 1336, 1336, 1336, 1337,    0,
     1337, 1337, 1337,    0,    0,    0,    0, 1337, 1338,    0,
     1338, 1338, 1338,    0,    0,    0,    0, 1338, 1340,    0,
     1340, 1340, 1340, 1340, 1340,    0,    0,    0, 1340,    0,

     1340, 1340, 1340,    0,    0,    0,    0, 1340, 1341, 1341,
        0, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1342,    0,    0, 1342,    0,    0,    0,    0, 1342,    0,
     1342, 1342, 1342, 1343,    0, 1343,    0, 1343, 1343,    0,
     1343,    0,    0,    0, 1343, 1343,    0, 1343, 1343, 1343,
     1344, 1344,    0, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,

     1344, 1344, 1346,    0,    0, 1346,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1346,    0, 1346, 1346, 1346, 1347, 1347,
        0, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1348, 1348, 1348, 1348, 1348, 1349,    0,    0, 1349,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1349, 1349, 1349, 1349,
     1349, 1350, 1350,    0, 1350,    0,    0,    0,    0,    0,

        0,    0, 1350,    0, 1350, 1350,    0, 1350, 1350,    0,
        0, 1350, 1350,    0, 1350, 1350, 1350,    0, 1350, 1351,
        0,    0,    0,    0,    0, 1351,    0, 1351, 1351, 1351,
     1351, 1351,    0,    0, 1351, 1351, 1351, 1351, 1351, 1351,
        0,    0,    0,    0, 1351, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1353,    0,    0,
        0,    0,    0, 1353,    0, 1353, 1353, 1353, 1353, 1353,
        0,    0, 1353, 1353, 1353, 1353, 1353, 1353,    0,    0,

        0,    0, 1353, 1354, 1354,    0, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1355, 1355,    0,    0,    0,
        0,    0, 1355,    0, 1355, 1355, 1355, 1355, 1355,    0,
     1355, 1355, 1355, 1355, 1355, 1355, 1355,    0,    0,    0,
        0, 1355, 1356,    0,    0,    0,    0,    0, 1356,    0,
     1356, 1356, 1356, 1356, 1356,    0,    0, 1356, 1356, 1356,
     1356, 1356, 1356,    0,    0,    0,    0, 1356, 1357,    0,
     1357, 1357, 1357,    0,    0,    0,    0, 1357, 1358, 1358,

     1358, 1358,    0,    0, 1358,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1358, 1358,    0,    0,    0, 1358,
        0, 1358, 1358, 1358,    0,    0,    0,    0, 1358, 1359,
     1359, 1359, 1359,    0,    0, 1359,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1359,    0,    0,    0,
     1359,    0, 1359, 1359, 1359,    0,    0,    0,    0, 1359,
     1360,    0, 1360,    0,    0,    0,    0, 1360,    0, 1360,
     1360, 1360,    0,    0,    0,    0, 1360, 1361,    0,    0,
        0,    0, 1361,    0, 1361, 1361, 1361,    0,    0,    0,
        0, 1361, 1362, 1362,    0, 1362,    0,    0,    0,    0,

     1362,    0, 1362, 1362, 1362, 1363, 1363,    0, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1364, 1364, 1364,
     1364,    0,    0, 1364,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1364, 1364,    0,    0,    0, 1364,    0,
     1364, 1364, 1364,    0,    0,    0,    0, 1364, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365,    0, 1365, 1365, 1365, 1365,
        0, 1365,    0, 1365,    0, 1365, 1365, 1365, 1365, 1365,

     1366, 1366,    0, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,    0,
     1367, 1367, 1367, 1367,    0, 1367,    0,    0,    0, 1367,
     1367, 1367, 1367, 1367, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368,    0, 1368, 1368, 1368, 1368,    0, 1368,    0,    0,
        0, 1368, 1368, 1368, 1368, 1368, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369,    0, 1369, 1369, 1369, 1369,    0, 1369,
        0,    0,    0, 1369, 1369, 1369, 1369, 1369, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370,    0, 1370, 1370, 1370, 1370,
        0, 1370,    0,    0,    0, 1370, 1370, 1370, 1370, 1370,
     1371, 1371,    0, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2016 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <QFile>
#include <QStack>
#include <QRegExp>
#include <QVector>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <cite.h>
#include <condparser.h>
#include <config.h>
#include <default_args.h>
#include <doxy_globals.h>
#include <entry.h>
#include <formula.h>
#include <index.h>
#include <language.h>
#include <membergroup.h>
#include <message.h>
#include <outputlist.h>
#include <parse_base.h>
#include <parse_cstyle.h>
#include <parse_md.h>
#include <util.h>

#define YY_NO_INPUT 1
#define YY_NEVER_INTERACTIVE 1

// forward declarations
static bool handleBrief(const QString &);
static bool handleFn(const QString &);
static bool handleDef(const QString &);
static bool handleOverload(const QString &);
static bool handleEnum(const QString &);
static bool handleDefGroup(const QString &);
static bool handleAddToGroup(const QString &);
static bool handleWeakGroup(const QString &);
static bool handleNamespace(const QString &);
static bool handlePackage(const QString &);
static bool handleClass(const QString &);
static bool handleHeaderFile(const QString &);
static bool handleProtocol(const QString &);
static bool handleCategory(const QString &);
static bool handleUnion(const QString &);
static bool handleStruct(const QString &);
static bool handleInterface(const QString &);
static bool handleIdlException(const QString &);
static bool handlePage(const QString &);
static bool handleMainpage(const QString &);
static bool handleFile(const QString &);
static bool handleDir(const QString &);
static bool handleExample(const QString &);
static bool handleDetails(const QString &);
static bool handleName(const QString &);
static bool handleTodo(const QString &);
static bool handleTest(const QString &);
static bool handleBug(const QString &);
static bool handleSubpage(const QString &s);
static bool handleDeprecated(const QString &);
static bool handleXRefItem(const QString &);
static bool handleRelated(const QString &);
static bool handleRelatedAlso(const QString &);
static bool handleMemberOf(const QString &);
static bool handleRefItem(const QString &);
static bool handleSection(const QString &);
static bool handleAnchor(const QString &);
static bool handleCite(const QString &);
static bool handleFormatBlock(const QString &);
static bool handleAddIndex(const QString &);
static bool handleIf(const QString &);
static bool handleIfNot(const QString &);
static bool handleElseIf(const QString &);
static bool handleElse(const QString &);
static bool handleEndIf(const QString &);
static bool handleIngroup(const QString &);
static bool handleNoSubGrouping(const QString &);
static bool handleShowInitializer(const QString &);
static bool handleHideInitializer(const QString &);
static bool handleCallgraph(const QString &);
static bool handleHideCallgraph(const QString &);
static bool handleCallergraph(const QString &);
static bool handleHideCallergraph(const QString &);
static bool handleInternal(const QString &);
static bool handleLineBr(const QString &);
static bool handleStatic(const QString &);
static bool handlePure(const QString &);
static bool handlePrivate(const QString &);
static bool handlePrivateSection(const QString &);
static bool handleProtected(const QString &);
static bool handleProtectedSection(const QString &);
static bool handlePublic(const QString &s);
static bool handlePublicSection(const QString &s);
static bool handleToc(const QString &s);
static bool handleInherit(const QString &);
static bool handleExtends(const QString &);
static bool handleCopyDoc(const QString &);
static bool handleCopyBrief(const QString &);
static bool handleCopyDetails(const QString &);
static bool handleParBlock(const QString &);
static bool handleEndParBlock(const QString &);
static void handleGuard(const QString &expr);

static void checkFormula();

using DocCmdFunc = bool (*)(const QString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            false },
  { "short",           &handleBrief,            false },
  { "fn",              &handleFn,               false },
  { "var",             &handleFn,               false },
  { "typedef",         &handleFn,               false },
  { "property",        &handleFn,               false },
  { "def",             &handleDef,              false },
  { "overload",        &handleOverload,         false },
  { "enum",            &handleEnum,             false },
  { "defgroup",        &handleDefGroup,         false },
  { "group",           &handleDefGroup,         false },  
  { "addtogroup",      &handleAddToGroup,       false },
  { "weakgroup",       &handleWeakGroup,        false },
  { "namespace",       &handleNamespace,        false },
  { "package",         &handlePackage,          false },
  { "class",           &handleClass,            false },
  { "headerfile",      &handleHeaderFile,       false },
  { "protocol",        &handleProtocol,         false },
  { "category",        &handleCategory,         false },
  { "union",           &handleUnion,            false },
  { "struct",          &handleStruct,           false },
  { "interface",       &handleInterface,        false },
  { "idlexcept",       &handleIdlException,     false },
  { "page",            &handlePage,             false },
  { "mainpage",        &handleMainpage,         false },
  { "file",            &handleFile,             false },
  { "dir",             &handleDir,              false },
  { "example",         &handleExample,          false },
  { "details",         &handleDetails,          true  },
  { "name",            &handleName,             false },
  { "todo",            &handleTodo,             false }, // end brief will be done differently
  { "test",            &handleTest,             false }, // end brief will be done differently
  { "bug",             &handleBug,              false }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       false }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         false }, // end brief will be done differently
  { "related",         &handleRelated,          true  },
  { "relates",         &handleRelated,          true  },
  { "relatedalso",     &handleRelatedAlso,      true  },
  { "relatesalso",     &handleRelatedAlso,      true  },
  { "parblock",        &handleParBlock,         true  },
  { "endparblock",     &handleEndParBlock,      true  },
  { "refitem",         &handleRefItem,          true  },
  { "cite",            &handleCite,             false },
  { "subpage",         &handleSubpage,          true  },
  { "section",         &handleSection,          true  },
  { "subsection",      &handleSection,          true  },
  { "subsubsection",   &handleSection,          true  },
  { "paragraph",       &handleSection,          true  },
  { "anchor",          &handleAnchor,           true  },
  { "verbatim",        &handleFormatBlock,      true  },
  { "latexonly",       &handleFormatBlock,      false },
  { "htmlonly",        &handleFormatBlock,      false },
  { "xmlonly",         &handleFormatBlock,      false },
  { "docbookonly",     &handleFormatBlock,      false },
  { "rtfonly",         &handleFormatBlock,      false },
  { "manonly",         &handleFormatBlock,      false },
  { "dot",             &handleFormatBlock,      true  },
  { "msc",             &handleFormatBlock,      true  },
  { "startuml",        &handleFormatBlock,      true  },
  { "code",            &handleFormatBlock,      true  },
  { "addindex",        &handleAddIndex,         false },
  { "if",              &handleIf,               false },
  { "ifnot",           &handleIfNot,            false },
  { "elseif",          &handleElseIf,           false },
  { "else",            &handleElse,             false },
  { "endif",           &handleEndIf,            false },
  { "ingroup",         &handleIngroup,          false },
  { "nosubgrouping",   &handleNoSubGrouping,    false },
  { "showinitializer", &handleShowInitializer,  false },
  { "hideinitializer", &handleHideInitializer,  false },
  { "callgraph",       &handleCallgraph,        false },
  { "hidecallgraph",   &handleHideCallgraph,    false },
  { "callergraph",     &handleCallergraph,      false },
  { "hidecallergraph", &handleHideCallergraph,  false },
  { "internal",        &handleInternal,         true  },
  { "_linebr",         &handleLineBr,           false },
  { "static",          &handleStatic,           false },
  { "pure",            &handlePure,             false },
  { "private",         &handlePrivate,          false },
  { "privatesection",  &handlePrivateSection,   false },
  { "protected",       &handleProtected,        false },
  { "protectedsection",&handleProtectedSection, false },
  { "public",          &handlePublic,           false },
  { "publicsection",   &handlePublicSection,    false },
  { "tableofcontents", &handleToc,              false },
  { "inherit",         &handleInherit,          true  },
  { "extends",         &handleExtends,          true  },
  { "implements",      &handleExtends,          true  },
  { "memberof",        &handleMemberOf,         true  },
  { "arg",             0,                       true  },
  { "attention",       0,                       true  },
  { "author",          0,                       true  },
  { "authors",         0,                       true  },
  { "copydoc",         &handleCopyDoc,          true  },
  { "copybrief",       &handleCopyBrief,        false },
  { "copydetails",     &handleCopyDetails,      true  },
  { "copyright",       0,                       true  },
  { "date",            0,                       true  },
  { "dotfile",         0,                       true  },
  { "htmlinclude",     0,                       false },
  { "image",           0,                       true  },
  { "include",         0,                       true  },
  { "includelineno",   0,                       true  },
  { "invariant",       0,                       true  },
  { "latexinclude",    0,                       false },
  { "li",              0,                       true  },
  { "line",            0,                       true  },
  { "note",            0,                       true  },
  { "par",             0,                       true  },
  { "param",           0,                       true  },
  { "tparam",          0,                       true  },
  { "post",            0,                       true  },
  { "pre",             0,                       true  },
  { "remark",          0,                       true  },
  { "remarks",         0,                       true  },
  { "result",          0,                       true  },
  { "return",          0,                       true  },
  { "returns",         0,                       true  },
  { "exception",       0,                       true  },
  { "retval",          0,                       true  },
  { "sa",              0,                       true  },
  { "see",             0,                       true  },
  { "since",           0,                       true  },
  { "throw",           0,                       true  },
  { "throws",          0,                       true  },
  { "until",           0,                       true  },
  { "verbinclude",     0,                       false },
  { "version",         0,                       true  },
  { "warning",         0,                       true  },  
  { 0, 0, false }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a specific handler function
 */
class DocCmdMapper
{
 public:
   struct Cmd {
      DocCmdFunc func;
      bool endsBrief;
   };

   /** maps a command name to a handler function */
   static Cmd *map(const QString &name) {
      return instance()->find(name);
   }

   /** release the singleton */
   static void freeInstance() {
      delete s_instance;
      s_instance = 0;
   }

  private:
    static DocCmdMapper *instance() {
      if (s_instance == 0) {
         s_instance = new DocCmdMapper;
      }
      return s_instance;
   }

   DocCmdMapper() {
      DocCmdMap *p = docCmdMap;

      while (p->cmdName) {
         if (m_map.contains(p->cmdName)) {
            err("DocCmdMapper: command %s already added\n", p->cmdName);
            Doxy_Work::stopDoxyPress();
         }

         Cmd *cmd       = new Cmd;
         cmd->func      = p->handler;
         cmd->endsBrief = p->endsBrief;

         m_map.insert(p->cmdName, cmd);
         p++;
      }
   }

   Cmd *find(const QString &name) {
      return m_map.value(name);
   }

   QHash<QString, Cmd *> m_map;
   static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance = 0;
    
#define YY_NEVER_INTERACTIVE 1

enum XRefKind {
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext {
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType {
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
 public:
   GuardedSection(bool enabled, bool parentVisible)
      : m_enabled(enabled), m_parentVisible(parentVisible) {}
   bool isEnabled() const {
      return m_enabled;
   }
   bool parentVisible() const {
      return m_parentVisible;
   }

 private:
   bool m_enabled;
   bool m_parentVisible;
};

void openGroup(QSharedPointer<Entry> e, const QString &file, int line);
void closeGroup(QSharedPointer<Entry> e, const QString &file, int line, bool foundInline = false);
void initGroupInfo(QSharedPointer<Entry> e);
static void groupAddDocs(QSharedPointer<Entry> e);

static ParserInterface *langParser;          // the language parser that is calling us
static QString          inputString;         // input string
static int              inputPosition;       // read pointer
static int              prevPosition;
static char *           s_bufferPosition;

static QString          yyFileName;          // file name that is read from
static int              yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QString          formulaText;         // Running text of a formula
static QString          formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QString         *pOutputString;       // pointer to string to which the output is appended
static QString          outputXRef;          // temp argument of todo/test/../xrefitem commands
static QString          blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         //
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QString          functionProto;       // function prototype

static QStack<GuardedSection *> guards;      // tracks nested conditional sections (if,ifnot,..)
static QSharedPointer<Entry>  current;       // working entry

static bool             s_needNewEntry;
static int              s_docBlockContext; 

static QString          s_sectionLabel;
static QString          s_sectionTitle;
static int              s_sectionLevel;
static QString          xrefItemKey;
static QString          newXRefItemKey;
static QString          xrefItemTitle;
static QString          xrefListTitle;
static Protection       protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             s_parseMore;

static int              s_condCount;
static int              s_commentCount;
static QString          s_spaceBeforeCmd;
static QString          s_spaceBeforeIf;
static QString          s_copyDocArg;
static QString          s_guardExpr;
static int              s_roundCount;
static bool             s_insideParBlock;

static QStack<QSharedPointer<Grouping>> s_autoGroupStack;

static int              s_memberGroupId = DOX_NOGROUP;
static QString          s_memberGroupHeader;
static QString          s_memberGroupDocs;
static QString          s_memberGroupRelates;
static QString          s_compoundName;

static bool             s_internalDocs;   
static bool             s_processInternalDocs = false;  

static void initParser()
{
   s_sectionLabel.resize(0);
   s_sectionTitle.resize(0);
   s_memberGroupHeader.resize(0);

   s_insideParBlock = false;
   s_internalDocs   = Config::getBool("internal-docs"); 
}

static bool getDocSectionName(int s)
{
  switch(s) {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return true;
    default:
      return false;
  }
}

static bool makeStructuralIndicator(Entry::Sections s)
{
  if (getDocSectionName(current->section)) {
    return true;

  } else {
    s_needNewEntry     = true;
    current->section   = s;
    current->fileName  = yyFileName;
    current->startLine = yyLineNr;
    return false;
  }
}
static void lineCount()
{
  for (const char *c = commentscanYYtext ; *c ; ++c) {
    yyLineNr += (*c == '\n') ;
  }
}

static QString stripQuotes(const QString &s)
{
   QString name = s;

   if (name.isEmpty()) {
      return name;
   }

   if (name.at(0) == '"' && name.at(name.length() - 1) == '"') {
      name = name.mid(1, name.length() - 2);
   }

   return name;
}

static void addXRefItem(const QString &listName, const QString &itemTitle, const QString &listTitle, bool append)
{
   QSharedPointer<Entry> docEntry = current; // inBody && previous ? previous : current;

   if (listName.isEmpty()) {
      return;
   }

   auto refList = Doxy_Globals::xrefLists.find(listName);

   if (refList == Doxy_Globals::xrefLists.end()) {
      // new list
      Doxy_Globals::xrefLists.insert(listName, RefList(listName, listTitle, itemTitle));
      refList = Doxy_Globals::xrefLists.find(listName);
   }

   ListItemInfo *listItem;

   for (auto &item : docEntry->m_specialLists) {
      listItem = &item;

      if (listItem->type == listName) {
         break;
      }
   }
   
   if (listItem && append) {
      // already found item of same type just before this one

      RefItem *item = refList->getRefItem(listItem->itemId);
      assert(item != 0);

      item->text += " <p>";

      if (Doxy_Globals::markdownSupport) {
         item->text += processMarkdown(yyFileName, yyLineNr, current, outputXRef);
      } else {
         item->text += outputXRef;
      }

   } else {
      // new item

      int itemId  = refList->addRefItem();

      // if we have already an item from the same list type (e.g. a second @todo)
      // in the same Entry (i.e. lii!=0) then we reuse its link anchor.

      QString anchorLabel = QString("_%1%2").arg(listName).arg(itemId, 6, 10, QChar('0'));

      RefItem *item = refList->getRefItem(itemId);
      assert(item != 0);

      if (Doxy_Globals::markdownSupport) {
         item->text = processMarkdown(yyFileName, yyLineNr, current, outputXRef);
      } else {
         item->text = outputXRef;
      }

      item->listAnchor = anchorLabel;
      docEntry->addSpecialListItem(listName, itemId);

      QString cmdString = QString("\\xrefitem %1 %2.").arg(listName).arg(itemId);

      if (inBody) {
         docEntry->inbodyDocs += cmdString;
      } else {
         docEntry->doc += cmdString;
      }

      QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorLabel);

      if (si) {
         if (si->lineNr != -1) {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s, line %d)",
                  csPrintable(anchorLabel), csPrintable(si->fileName), si->lineNr);

         } else {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s)",
                  csPrintable(anchorLabel), csPrintable(si->fileName));
         }

      } else {
         si = QMakeShared<SectionInfo>(listName, yyLineNr, anchorLabel, s_sectionTitle, SectionInfo::Anchor, s_sectionLevel);
         Doxy_Globals::sectionDict.insert(anchorLabel, si);
         docEntry->m_anchors.append(*si);
      }
   }

   outputXRef.resize(0);
}

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QString addFormula()
{
   QString formLabel;
   QString fText = formulaText.simplified();

   auto f = Doxy_Globals::formulaDict.find(fText);

   if (f == Doxy_Globals::formulaDict.end()) {
      Formula temp = Formula(fText);

      Doxy_Globals::formulaList.append(temp);
      Doxy_Globals::formulaDict.insert(fText, temp);

      formLabel = QString("\\form#%1").arg(temp.getId());

      Doxy_Globals::formulaNameDict.insert(formLabel, temp);
      f = Doxy_Globals::formulaDict.find(fText);

   } else {
      formLabel = QString("\\form#%1").arg(f->getId());

   }

   for (int i = 0; i < formulaNewLines; i++) {
      formLabel += "@_fakenl";   // add fake newlines to
   }

   // keep the warnings correctly aligned
   return formLabel;
}

static void checkFormula();

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level >= 0 && level < 5) {
      return (SectionInfo::SectionType)level;
   }

   return SectionInfo::Anchor;
}

static void addSection()
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(s_sectionLabel);

   if (si) {
      if (si->lineNr != -1) {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName), si->lineNr);

      } else {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName));
      }

   } else {
      // create a new section element
      s_sectionTitle += QString::fromUtf8(commentscanYYtext).trimmed();

      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, s_sectionLabel, s_sectionTitle, 
                  sectionLevelToType(s_sectionLevel), s_sectionLevel);

      // add section to this entry
      current->m_anchors.append(*si);

      // add section to the global dictionary
      Doxy_Globals::sectionDict.insert(s_sectionLabel, si);

      // for a section the si->fileName is the physical file name. this will be replaced with the section name
      // in doctokenizer processSection()
   }
}

static void addCite()
{
   QString text = QString::fromUtf8(commentscanYYtext);
   Doxy_Globals::citeDict.insert(text);
}

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QString &s)
{
   uint len = s.length();

   int i = len - 1;
   QChar c;

   while (i >= 0 && ((c = s.at(i)) == ' ' || c == '\t' || c == '\r')) {
      i--;
   }

   if (i != len - 1) {
      // string up to and including char at pos i and \0 terminator
      s.resize(i + 2);
   }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
   bool xrefAppendToPrev = xrefAppendFlag;

   // determine append flag for the next item (i.e. the end of this item)
   xrefAppendFlag = ! inBody &&
                    inContext == OutputXRef && ctx == OutputXRef &&    // two consecutive xref items
                    newXRefKind == xrefKind &&                         // of the same kind
                    (xrefKind != XRef_Item ||
                    newXRefItemKey == xrefItemKey);                    // with the same key if \xrefitem

   if (inContext == OutputXRef) {

      // end of XRef section => add the item
      // See if we can append this new xref item to the previous one.
      // We know this at the start of the next item of the same
      // type and need to remember this until the end of that item.

    switch(xrefKind) {
         case XRef_Todo:
            addXRefItem("todo", theTranslator->trTodo(), theTranslator->trTodoList(), xrefAppendToPrev);
            break;

         case XRef_Test:
            addXRefItem("test", theTranslator->trTest(), theTranslator->trTestList(), xrefAppendToPrev);
            break;

         case XRef_Bug:
            addXRefItem("bug", theTranslator->trBug(), theTranslator->trBugList(), xrefAppendToPrev);
            break;

         case XRef_Deprecated:
            addXRefItem("deprecated", theTranslator->trDeprecated(), theTranslator->trDeprecatedList(), xrefAppendToPrev);
            break;

         case XRef_Item:  // user defined list
            addXRefItem(xrefItemKey, xrefItemTitle, xrefListTitle, xrefAppendToPrev);
            break;

         case XRef_None:
            assert(0);
            break;
      }
   }

  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;

   if (inContext != OutputXRef && inBody) {
      inContext = OutputInbody;
   }

  switch(inContext) {
      case OutputDoc:
         if (oldContext != inContext) {
            stripTrailingWhiteSpace(current->doc);

            if (current->docFile.isEmpty()) {
               current->docFile = yyFileName;
               current->docLine = yyLineNr;
            }
         }
         pOutputString = &current->doc;
         break;

      case OutputBrief:
         if (oldContext != inContext) {

            if (current->briefFile.isEmpty()) {
               current->briefFile = yyFileName;
               current->briefLine = yyLineNr;
            }
         }

         if (current->brief.trimmed().isEmpty())  {
            // we only want one brief description even if multiple are given
            pOutputString = &current->brief;

         } else {
            pOutputString = &current->doc;
            inContext = OutputDoc;             // need to switch to detailed docs, see bug 631380
         }
         break;

      case OutputXRef:
         pOutputString = &outputXRef;
         // first item found, so can not append to previous
         // xrefAppendFlag = false;
         break;

      case OutputInbody:
         pOutputString = &current->inbodyDocs;
         break;
   }
}

static void addAnchor(const QString &anchorName)
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorName);

   if (si) {
      // anchor name already exists         
      si->dupAnchor_cnt++;                 

   } else {
      // title is empty, level is zero
      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, anchorName, QString(""), SectionInfo::Anchor, 0);
      si->dupAnchor_fName = yyFileName; 

      Doxy_Globals::sectionDict.insert(anchorName, si);          
      current->m_anchors.append(*si);
   }
}

// add a string in the output
static inline void addOutput(const QString &s)
{
   *pOutputString += s;
}

static inline void addOutput(QChar s)
{
   *pOutputString += s;
}

static void endBrief(bool addToOutput = true)
{
   if (! current->brief.trimmed().isEmpty()) {
      // only go to the detailed description if we have
      // found some brief description and not just whitespace

      briefEndsAtDot = false;
      setOutput(OutputDoc);

      if (addToOutput) {
         QString text = QString::fromUtf8(commentscanYYtext);
         addOutput(text);
      }
   }
}

static void handleGuard(const QString &expr);

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   s_bufferPosition = buf;

   prevPosition = inputPosition;
   int c = 0;

   while (inputString[inputPosition] != 0) {

      QString tmp1    = inputString.at(inputPosition);
      QByteArray tmp2 = tmp1.toUtf8();

      if (c + tmp2.length() >= max_size)  {
         // buffer is full
         break;
      }

      c += tmp2.length();

      for (auto letters : tmp2) {
         *buf = letters;
          buf++;
      }

      inputPosition++;
   }

   return c;
}

/* start command character */
/* comment parsing states */

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38
#define CiteLabel 39
#define CopyDoc 40
#define GuardExpr 41

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  /* What can happen while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxy\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1140 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9593 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      // mail address
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // quoted text
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      // directory (or chain of commands)
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
{
      // HTML command ends a brief description
      setOutput(OutputDoc);

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
{
      // HTML command that ends a brief description
      if (current->lang == SrcLangExt_CSharp) {
         setOutput(OutputDoc);
      }

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      // start of a .NET XML style brief description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      setOutput(OutputBrief);
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      setOutput(OutputBrief);
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      setOutput(OutputDoc);
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // end of a brief or detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      QString tag = QString::fromUtf8(commentscanYYtext);

      int s = tag.indexOf("id=");

      if (s != -1) {
         // command has id attribute
         QChar c = tag[s + 3];

         if (c == '\'' || c == '"') {
            // valid start
            int e = tag.indexOf(c,s + 4);

            if (e != -1) {
               // found matching end

               QString id = tag.mid(s + 4, e-s-4);   // extract id
               addAnchor(id);
            }
         }
      }

      addOutput(tag);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      insidePre = true;
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      insidePre = false;
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      // RCS tag which end a brief description
      setOutput(OutputDoc);
      REJECT;
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      BEGIN(HtmlComment);
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      addOutput("\\endinternal ");

      if (! s_processInternalDocs) {
         warn(yyFileName, yyLineNr, "Found \\endinternal without matching \\internal");
      }

      s_processInternalDocs = false;
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      // might be a valid command
      // the {B}* in the front was added for bug620924

      QString text = QString::fromUtf8(commentscanYYtext);

      QString cmdName = text.trimmed().mid(1);
      DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);

      if (cmdPtr) {
         // special action is required

         int i = 0;
         while (text[i] == ' ' || text[i] == '\t') {
            i++;
         }

         s_spaceBeforeCmd = QString(text).left(i);

         if (cmdPtr->endsBrief && ! (inContext == OutputXRef && cmdName == "parblock")) {
            briefEndsAtDot = false;

            // this command forces the end of brief description
            setOutput(OutputDoc);
         }

         if (cmdPtr->func && cmdPtr->func(cmdName)) {
            // implicit split of the comment block into two entries 
            // restart the next block at the start of this command

            s_parseMore = true;

            inputPosition = prevPosition + (yy_bp - s_bufferPosition);     
            yyterminate();

         } else if (cmdPtr->func == nullptr) {
            // command without handler is processed later by parserdoc.cpp
            addOutput(text);
         }

      } else {
         // command not relevant
         addOutput(text);
      }
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      // escaped formula command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      // language switch command
      QString text = QString::fromUtf8(commentscanYYtext);

      QString langId = text.trimmed().mid(2);

      if (! langId.isEmpty() && Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) != 0) {
         // enable language specific section
         BEGIN(SkipLang);
      }
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      // start of a formula with custom environment
      QString text = QString::fromUtf8(commentscanYYtext);

      formulaText = "\\begin";
      formulaEnv = text.trimmed().mid(2);

      if (formulaEnv.at(formulaEnv.length() - 1) == '{') {
         // remove trailing open brace
         formulaEnv = formulaEnv.left(formulaEnv.length() - 1);
      }

      formulaText += formulaEnv;
      formulaNewLines = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      // start of a inline formula
      formulaText     = "$";
      formulaNewLines = 0;
      BEGIN(ReadFormulaShort);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      // start of a block formula
      formulaText      = "\\[";
      formulaNewLines  = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      // begin of a group
      // langParser->handleGroupStartCommand(s_memberGroupHeader);
      openGroup(current, yyFileName, yyLineNr);
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      // end of a group
      QString text = QString::fromUtf8(commentscanYYtext);

      closeGroup(current, yyFileName, yyLineNr, true);

      s_memberGroupHeader.resize(0);
      s_parseMore    = true;
      s_needNewEntry = true;

      inputPosition = prevPosition + (yy_bp - s_bufferPosition) + text.length();           
      yyterminate();
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      // escaped character
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      // normal word
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // explicit end autolist: e.g "  ."
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 29:
case 30:
YY_RULE_SETUP
{
      // start of autolist
      if (! Doxy_Globals::markdownSupport) {
         REJECT;

      } else {

         if (inContext != OutputXRef) {
            briefEndsAtDot = false;
            setOutput(OutputDoc);
         }

         QString text = QString::fromUtf8(commentscanYYtext);
         addOutput(text);
      }
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      // start of autolist
      if (inContext != OutputXRef) {
         briefEndsAtDot = false;
         setOutput(OutputDoc);
      }

      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // horizontal line (dashed)
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      // mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&mdash;");
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      // ndash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&ndash;");
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      // numbered item
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      // . at start or in the middle of a word, or ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      // . with escaped space
      QString text = QString::fromUtf8(commentscanYYtext);

      addOutput(text[0]);
      addOutput(text[2]);
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      // . with comma such as "e.g.,"
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      // ellipsis with escaped space
      addOutput("... ");
   }
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // internal ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{
      // at least one blank line (or blank line command)

      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext == OutputXRef) {
         // see bug 613024, need to put the newlines after ending the XRef section.

         if (! s_insideParBlock) {
            setOutput(OutputDoc);
         }

         for (int i = 0; i < text.length();  ) {
            if (text[i] == '\n') { 
               addOutput('\n'); 
               i++; 

            } else if (text.mid(i) == "\\_linebr")  { 
               addOutput('\n');
               i += 8;

            } else  {
               i++;
            }
         } 

      } else if (inContext != OutputBrief) {
      
         for (int i = 0; i< text.length(); ) {
            if (text[i] == '\n') {
               addOutput('\n');
               i++;

            } else if (text.mid(i) == "\\_linebr")  { 
                addOutput('\n');
                i += 8;

            } else  {
               i++;

            }
         }

         setOutput(OutputDoc);

      } else {
          // inContext == OutputBrief
          // only go to the detailed description if we have
          // found some brief description and not just whitespace

         endBrief(false);
      }

      lineCount();
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      // potential end of a JavaDoc style comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);

      if (briefEndsAtDot) {
         setOutput(OutputDoc);
         briefEndsAtDot = false;
      }
   }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{
      // newline      
      addOutput('\n');
      yyLineNr++;
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      // catch-all for anything else
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 47:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }   
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      // ignore unimportant characters
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // ignore every else
   }
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 51:
YY_RULE_SETUP
{
      // end of inline formula
      formulaText += "$";
      addOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      // end of block formula
      formulaText += "\\]";
      addOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      // end of custom env formula
      formulaText += "\\end";
      formulaText += formulaEnv;
      addOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // any non-special character
      QString text = QString::fromUtf8(commentscanYYtext); 
      formulaText += text;
   }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext); 

      formulaNewLines++;
      formulaText += text[0];
      yyLineNr++;
   }
	YY_BREAK
case 56:
YY_RULE_SETUP
{
      // any othe character
      QString text = QString::fromUtf8(commentscanYYtext); 
      formulaText += text[0]; 
   }
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext); 
      current->name = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\enum");

      addOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text  = QString::fromUtf8(commentscanYYtext); 
      current->name = substitute(text,".", "::");
      BEGIN( Comment );
   }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\namespace");

      addOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 65:
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\package");
      addOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 68:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = substitute(removeRedundantWhiteSpace(text),".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->name = substitute(text,".","::");
      if (current->section==Entry::PROTOCOLDOC_SEC) {
         current->name+="-p"; 
      }

      // prepend outer scope name
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = substitute(text,".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\%s", 
                  YY_START == ClassDocArg1 ? "class" : "category" );

      addOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 74:
YY_RULE_SETUP
{    
      // ignore other stuff
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      // second argument; include file
      QString text = QString::fromUtf8(commentscanYYtext);
      current->includeFile = text;
      BEGIN( ClassDocArg3 );
   }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addOutput('\n');

      if (text[0] == '\n')  {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ 
      // ignore other stuff
   }
	YY_BREAK
case 79:
YY_RULE_SETUP
{
      // third argument; include file name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->includeName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] =='\n') { 
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of {def,add,weak} group commands --------- */
case 83:
YY_RULE_SETUP
{
      // group name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->name = text;

      // lastDefGroup.groupname = text;
      // lastDefGroup.pri = current->groupingPri();
      // the .html stuff is for Qt compatibility

      if (current->name.endsWith(".html")) {
         current->name = current->name.left(current->name.length()-5);
      }

      current->type.resize(0);
      BEGIN(GroupDocArg2);
   }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing group name after %s", csPrintable(current->groupDocCmd()) );

      addOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      // title (stored in type)
      QString text = QString::fromUtf8(commentscanYYtext);
      current->type += text.trimmed();
   }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if ( current->groupDocType == Entry::GROUPDOC_NORMAL && current->type.isEmpty()) {
            // defgroup requires second argument
            warn(yyFileName, yyLineNr, "Missing title after \\defgroup %s",
                  csPrintable(current->name) );
      }

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 89:
YY_RULE_SETUP
{
      // first argument; page name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->name = stripQuotes(text);
      BEGIN( PageDocArg2 );
   }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{ 
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      // missing arguement
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\page");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{
      // second argument; page title
      QString text = QString::fromUtf8(commentscanYYtext);

      yyLineNr++;
      current->args = text;

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{
      // no file name specfied
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
      // first argument; name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = stripQuotes(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{ 
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 98:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      newXRefItemKey = text;
      setOutput(OutputXRef);

      BEGIN(XRefItemParam2);
   }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{
      // missing arguments
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing first argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      inContext = OutputDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
      // second argument
      QString text = QString::fromUtf8(commentscanYYtext);
      xrefItemTitle = stripQuotes(text);
      BEGIN(XRefItemParam3);
   }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing second argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      inContext = OutputDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
      // third argument
      QString text = QString::fromUtf8(commentscanYYtext);

      xrefListTitle = stripQuotes(text);
      xrefKind = XRef_Item;

      BEGIN( Comment );
   }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr,"Missing third argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      inContext = OutputDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 110:
YY_RULE_SETUP
{
      // argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->relates = text;                                          
      BEGIN( Comment );
   }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument of \\relates or \\memberof command");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 117:
YY_RULE_SETUP
{
      // first argyment
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionLabel = text;
      addOutput(text);
      s_sectionTitle.resize(0);

      BEGIN(SectionTitle);
   }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\section command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
      // invalid character for section label
      warn(yyFileName, yyLineNr, "Invalid or missing section label");
      BEGIN(Comment);
   }
	YY_BREAK
case 120:
/* rule 120 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 121:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      // any character without special meaning
      QString text = QString::fromUtf8(commentscanYYtext);
      s_sectionTitle += text;
      addOutput(text);
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      // unescape escaped command
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text.mid(1);               
      addOutput(text);
   }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
      // unescape escaped character
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text[1];
      addOutput(text);
   }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ 
      // anything else
      QString text = QString::fromUtf8(commentscanYYtext);
      
      s_sectionTitle += text;
      addOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 127:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      
      // we add subpage labels as a kind of "inheritance" relation to prevent
      // needing to add another list to the Entry class.

      current->extends.append(BaseInfo(text, Public, Normal));
      BEGIN(SubpageTitle);
   }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\subpage command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{
      // no title, end command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      // add title, end of command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      // no title, end of command
      unput(commentscanYYtext[0]);     
      BEGIN( Comment );
   }
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 132:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addAnchor(text);
      addOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\anchor command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing anchor label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // possible ends
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      if (text.mid(4) == blockName)  {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      if (blockName == "startuml")   {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ 
      // some word
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{ 
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
   }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      // start of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);

      s_commentCount++;
      addOutput(text);
   }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
      // end of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      s_commentCount--;

      if (s_commentCount < 0 && blockName != "verbatim") {
         warn(yyFileName, yyLineNr, "Found */ without matching /* while inside a \\%s block. "
            "Perhaps there is a missing \\end%s?\n", csPrintable(blockName), csPrintable(blockName));
      }
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
{
      QString endTag = "@end" + blockName;

      if (blockName == "startuml") {
         endTag = "enduml";
      }

      warn(yyFileName, yyLineNr, "Reached end of comment while inside a @%s block, check for missing @%s tag",
                 csPrintable(blockName), csPrintable(endTag) );

      yyterminate();
   }
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 142:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr  = text;
      s_roundCount = 1;
      BEGIN(GuardExpr);
   }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
      s_roundCount++;
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
      s_roundCount--;

      if (s_roundCount == 0) {
         handleGuard(s_guardExpr);
      }
   }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{      
      warn(yyFileName, yyLineNr, "Invalid expression '%s' for guard", csPrintable(s_guardExpr));
      unput(commentscanYYtext[0]);
      BEGIN(GuardParam);
   }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
      // parameter of if/ifnot guard
      QString text = QString::fromUtf8(commentscanYYtext);
      handleGuard(text);
   }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // next line is commented out due to bug620924
      // addOutput('\n');

      BEGIN( Comment );
   }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 150:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{
      s_spaceBeforeIf.resize(0);
      BEGIN(Comment);
   }
	YY_BREAK
case 152:
YY_RULE_SETUP
{  
      if (! s_spaceBeforeIf.isEmpty()) {
         // needed for 665313 in combation with bug620924
   
         addOutput(s_spaceBeforeIf);
      }

      s_spaceBeforeIf.resize(0);
      BEGIN(Comment);
   }
	YY_BREAK
case 153:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 154:
/* rule 154 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      guardType = Guard_IfNot;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 155:
/* rule 155 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      guardType = Guard_If;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 156:
/* rule 156 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found @endif without matching start command");

       } else {
         GuardedSection *s  = guards.pop();
         bool parentVisible = s->parentVisible();
         delete s;

         if (parentVisible) {
            enabledSectionFound = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 157:
/* rule 157 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (guards.isEmpty()) {
         warn(yyFileName, yyLineNr, "Found @else without matching start command");

      } else {

         if (! enabledSectionFound && guards.top()->parentVisible()) {
            delete guards.pop();
            guards.push(new GuardedSection(true,true));
            enabledSectionFound = true;

            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 158:
/* rule 158 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found @elseif without matching start command");

       } else {

         if (! enabledSectionFound && guards.top()->parentVisible()) {
            guardType = Guard_If;
            delete guards.pop();

            BEGIN( GuardParam );
         }
      }
   }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
{ 
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // addOutput('\n');
   }
	YY_BREAK
case 160:
YY_RULE_SETUP
{ 
      // skip non-special characters
   }
	YY_BREAK
case 161:
YY_RULE_SETUP
{ 
      // any other character
   }
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
{ 
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  { 
         yyLineNr++;
      }

      addOutput('\n');
   }
	YY_BREAK
case 163:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 164:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 165:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount--;
   
      if (s_condCount < 0 )   {
         // handle conditional section around \internal, see bug607743
      
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 166:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 0 ) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 167:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 1)  {                 
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 2) {      
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 169:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 3) {      
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 170:
YY_RULE_SETUP
{
      addOutput("\\endinternal ");
      BEGIN(Comment);
   }
	YY_BREAK
case 171:
YY_RULE_SETUP
{ 
      // skip non-special characters
   }
	YY_BREAK
case 172:
YY_RULE_SETUP
{ 
      // any other character
   }
	YY_BREAK
/* ----- handle argument of name command ------- */
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
{ 
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
{ 
      // line continuation
      yyLineNr++;
      addOutput('\n');
      s_memberGroupHeader+=' ';
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{ 
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_memberGroupHeader += text[0];
      current->name       += text[0];
   }
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 176:
YY_RULE_SETUP
{ 
      // group id
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_groups.append(Grouping(text, Grouping::GROUPING_INGROUP) ); 
      inGroupParamFound = true;
   }
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
{ 
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! inGroupParamFound) {
         warn(yyFileName,yyLineNr, "Missing group name for \\ingroup command");
      }

      if (text[0] == '\n')   {
         yyLineNr++; 
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
{ 
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 179:
YY_RULE_SETUP
{ 
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
{ 
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (braceCount == 0) {
         if (text[0] == '\n')   {
            yyLineNr++; 
         }
         
         addOutput('\n');        
         langParser->parsePrototype(functionProto);
         BEGIN( Comment );
      }
   }
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
{ 
      // line continuation
      yyLineNr++;
      functionProto += ' ';
   }
	YY_BREAK
case 182:
YY_RULE_SETUP
{ 
      // non-special characters
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
      braceCount++;
   }
	YY_BREAK
case 184:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
      braceCount--;
   }
	YY_BREAK
case 185:
YY_RULE_SETUP
{ 
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
{ 
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')  {
         yyLineNr++;
      }   

      if (functionProto.trimmed().isEmpty()) { 
         // plain overload command
         addOutput(theTranslator->trOverloadText());
         addOutput('\n');

      }  else   {
         // overload declaration      
         makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
         langParser->parsePrototype(functionProto);
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
{ 
      // line continuation
      yyLineNr++;
      functionProto += ' ';
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
{ 
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 189:
YY_RULE_SETUP
{ 
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text), Public, Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
{ 
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\inherit command has no argument");

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 191:
YY_RULE_SETUP
{ 
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing name for \\inherit command");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 192:
YY_RULE_SETUP
{ 
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text),Public,Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
{ 
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName,yyLineNr, "\\extends or \\implements command has no argument");

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 194:
YY_RULE_SETUP
{ 
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle language specific sections ------- */
case 195:
YY_RULE_SETUP
{
      /* language switch */
      QString text = QString::fromUtf8(commentscanYYtext);
      QString langId = text.mid(2);

      if (langId.isEmpty() || Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) == 0) {
         // enable language specific section
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 196:
YY_RULE_SETUP
{ 
      /* any character not a *, @, backslash or new line */
   }
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
{ 
      /* new line in verbatim block */
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 198:
YY_RULE_SETUP
{ 
      /* any other character */
   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 199:
YY_RULE_SETUP
{ 
      // found argyment
      QString text = QString::fromUtf8(commentscanYYtext);

      addCite();
      addOutput(text);
      BEGIN(Comment);
   }
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
{ 
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\cite command has no label" );

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 201:
YY_RULE_SETUP
{ 
      // invalid character for cite label
      warn(yyFileName,yyLineNr, "Invalid or missing cite label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')   {
         yyLineNr++; 
      }
      
      addOutput('\n');

      setOutput(OutputDoc);
      addOutput("\\copydetails ");
      addOutput(s_copyDocArg);

      addOutput("\n");

      BEGIN(Comment);
   }
	YY_BREAK
case 203:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addOutput(text);
   }
	YY_BREAK
case 204:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addOutput(text);
   }
	YY_BREAK
case 205:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1140 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1140 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1139);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static bool handleBrief(const QString &)
{
   setOutput(OutputBrief);
   return false;
}

static bool handleFn(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   functionProto.resize(0);
   braceCount = 0;
   BEGIN(FnParam);

   return stop;
}

static bool handleDef(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::DEFINEDOC_SEC);
   functionProto.resize(0);
   BEGIN(FnParam);
   return stop;
}

static bool handleOverload(const QString &)
{
   functionProto.resize(0);
   BEGIN(OverloadParam);
   return false;
}

static bool handleEnum(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::ENUMDOC_SEC);
   BEGIN(EnumDocArg1);
   return stop;
}

static bool handleDefGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_NORMAL;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleAddToGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_ADD;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleWeakGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_WEAK;
   BEGIN( GroupDocArg1 );
   return stop;
}

static bool handleNamespace(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
   BEGIN( NameSpaceDocArg1 );
   return stop;
}

static bool handlePackage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
   BEGIN( PackageDocArg1 );
   return stop;
}

static bool handleClass(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::CLASSDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleHeaderFile(const QString &)
{
   BEGIN( ClassDocArg2 );
   return false;
}

static bool handleProtocol(const QString &)
{
   // Obj-C protocol
   bool stop = makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleCategory(const QString &)
{
   // Obj-C category
   bool stop = makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
   BEGIN( CategoryDocArg1 );
   return stop;
}

static bool handleUnion(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::UNIONDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleStruct(const QString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleInterface(const QString &)
{
  bool stop = makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleIdlException(const QString &)
{
  bool stop = makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handlePage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::PAGEDOC_SEC);
   BEGIN( PageDocArg1 );
   return stop;
}

static bool handleMainpage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
   
   if (! stop) {
      current->name = "mainpage";
   }
   
   BEGIN( PageDocArg2 );
   return stop;
}

static bool handleFile(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::FILEDOC_SEC);

   if (! stop) {
      current->name = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleDir(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::DIRDOC_SEC);

   if (! stop) {
      current->name = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleExample(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::EXAMPLE_SEC);

   if (! stop) {
      current->name = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleDetails(const QString &)
{
   if (inContext != OutputBrief) {
      // treat @details outside brief description as a new paragraph
      addOutput("\n\n"); 
   }

   setOutput(OutputDoc);
   return false;
}

static bool handleName(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERGRP_SEC);

   if (! stop) {  
      s_memberGroupHeader.resize(0);
      BEGIN( NameParam );

      if (s_memberGroupId != DOX_NOGROUP) {
         // end of previous member group
    
         closeGroup(current,yyFileName,yyLineNr,true);
       }
  }

  return stop;
}

static bool handleTodo(const QString &)
{
   newXRefKind = XRef_Todo;
   setOutput(OutputXRef);
   xrefKind = XRef_Todo;
   return false;
}

static bool handleTest(const QString &)
{
   newXRefKind = XRef_Test;
   setOutput(OutputXRef);
   xrefKind = XRef_Test;
   return false;
}

static bool handleBug(const QString &)
{
   newXRefKind = XRef_Bug;
   setOutput(OutputXRef);
   xrefKind = XRef_Bug;
   return false;
}

static bool handleDeprecated(const QString &)
{
   newXRefKind = XRef_Deprecated;
   setOutput(OutputXRef);
   xrefKind = XRef_Deprecated;
   return false;
}

static bool handleXRefItem(const QString &)
{
   newXRefKind = XRef_Item;
   BEGIN(XRefItemParam1);
   return false;
}

static bool handleParBlock(const QString &)
{
   if (s_insideParBlock)   {
      warn(yyFileName,yyLineNr, "Found \\parblock command while already in a parblock");
   }
   
   if (! s_spaceBeforeCmd.isEmpty()) {
      addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }
   
   addOutput("@parblock ");
   s_insideParBlock = true;

   return false;
}

static bool handleEndParBlock(const QString &)
{
   if (! s_insideParBlock) {
     warn(yyFileName,yyLineNr, "Found \\endparblock command without matching \\parblock");
   }

   addOutput("@endparblock");
   setOutput(OutputDoc); // to end a parblock inside a xrefitem like context
   s_insideParBlock = false;

   return false;
}

static bool handleRelated(const QString &)
{
   BEGIN(RelatesParam1);
   return false;
}

static bool handleRelatedAlso(const QString &)
{
   current->relatesType = Duplicate;
   BEGIN(RelatesParam1);
   return false;
}

static bool handleMemberOf(const QString &)
{
   current->relatesType = MemberOf;
   BEGIN(RelatesParam1);
   return false;
}

static bool handleRefItem(const QString &)
{
   addOutput("@refitem ");
   BEGIN(LineParam);
   return false;
}

static bool handleSection(const QString &s)
{
   setOutput(OutputDoc);
   addOutput("@"+s+" ");
   BEGIN(SectionLabel);

   if (s == "section") {
      s_sectionLevel = 1;

   } else if (s == "subsection") {
      s_sectionLevel = 2;

   } else if (s == "subsubsection") {
      s_sectionLevel = 3;

   } else if (s == "paragraph") {
      s_sectionLevel = 4;

   }

   return false;
}

static bool handleSubpage(const QString &s)
{
   if (current->section != Entry::EMPTY_SEC && current->section != Entry::PAGEDOC_SEC && 
         current->section != Entry::MAINPAGEDOC_SEC) {

      warn(yyFileName,yyLineNr, "Found \\subpage command in a comment block that is not marked as a page");
  }

  if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
  }

   addOutput("@"+s+" ");
   BEGIN(SubpageLabel);

   return false;
}

static bool handleAnchor(const QString &s)
{
   addOutput("@"+s+" ");
   BEGIN(AnchorLabel);
   return false;
}

static bool handleCite(const QString &s)
{
   if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addOutput("@" + s + " ");
   BEGIN(CiteLabel);
   return false;
}

static bool handleFormatBlock(const QString &s)
{
   addOutput("@" + s + " ");

   blockName      = s;
   s_commentCount = 0;
   BEGIN(FormatBlock);

   return false;
}

static bool handleAddIndex(const QString &)
{
   addOutput("@addindex ");
   BEGIN(LineParam);
   return false;
}

static bool handleIf(const QString &)
{
   enabledSectionFound = false;
   guardType = Guard_If;
   s_spaceBeforeIf = s_spaceBeforeCmd;
   BEGIN(GuardParam);
   return false;
}

static bool handleIfNot(const QString &)
{
   enabledSectionFound = false;
   guardType = Guard_IfNot;
   s_spaceBeforeIf = s_spaceBeforeCmd;
   BEGIN(GuardParam);
   return false;
}

static bool handleElseIf(const QString &)
{
   if (guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");
   } else {
      guardType = enabledSectionFound ? Guard_Skip : Guard_If;
      BEGIN(GuardParam);
   }
   
   return false;
}

static bool handleElse(const QString &)
{
   if (guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");
   } else {
      BEGIN( SkipGuardedSection );
   }

   return false;
}

static bool handleEndIf(const QString &)
{
   if (guards.isEmpty())   {
      warn(yyFileName,yyLineNr, "Found \\endif without matching start command");
   
   } else {
      delete guards.pop();
   }
   
   enabledSectionFound = false;
   if (! s_spaceBeforeCmd.isEmpty()) {
      addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   BEGIN( GuardParamEnd );
   return false;
}

static bool handleIngroup(const QString &)
{
   inGroupParamFound = false;
   BEGIN( InGroupParam );
   return false;
}

static bool handleNoSubGrouping(const QString &)
{
   current->subGrouping = false;
   return false;
}

static bool handleShowInitializer(const QString &)
{
   current->initLines = 100000;  // ON
   return false;
}

static bool handleHideInitializer(const QString &)
{
   current->initLines = 0;       
   return false;
}

static bool handleCallgraph(const QString &)
{
   current->callGraph = true; 
   return false;
}

static bool handleHideCallgraph(const QString &)
{
   current->callGraph = false; 
   return false;
}

static bool handleCallergraph(const QString &)
{
   current->callerGraph = true; 
   return false;
}

static bool handleHideCallergraph(const QString &)
{
   current->callerGraph = false; 
   return false;
}

static bool handleInternal(const QString &)
{
   if (s_internalDocs) {
      // re-enabled for bug640828
      addOutput("\\internal ");
      s_processInternalDocs = true;

   } else {
      // make sure some whitespace before an \internal command
      // is not treated as "documentation"

      if (current->doc.trimmed().isEmpty()) {
         current->doc.resize(0);
      }

      s_condCount = 0;
      BEGIN( SkipInternal );  
  }

  return false;
}

static bool handleLineBr(const QString &)
{
   addOutput('\n');
   return false;
}

static bool handleStatic(const QString &)
{
   endBrief();
   current->stat = true;
   return false;
}

static bool handlePure(const QString &)
{
   endBrief();
   current->virt = Pure;
   return false;
}

static bool handlePrivate(const QString &)
{
  current->protection = Private;
  return false;
}

static bool handlePrivateSection(const QString &)
{
   current->protection = protection = Private;
   return false;
}

static bool handleProtected(const QString &)
{
   current->protection = Protected;
   return false;
}

static bool handleProtectedSection(const QString &)
{
   current->protection = protection = Protected ;
   return false;
}

static bool handlePublic(const QString &)
{
   current->protection = Public;
   return false;
}

static bool handlePublicSection(const QString &)
{
   current->protection = protection = Public;
   return false;
}

static bool handleToc(const QString &)
{
   if (current->section == Entry::PAGEDOC_SEC || current->section==Entry::MAINPAGEDOC_SEC) {
      current->stat = true;  // we 'abuse' stat to pass whether or the TOC is enabled
   }
   return false;
}

static bool handleInherit(const QString &)
{
   BEGIN(InheritParam);
   return false;
}

static bool handleExtends(const QString &)
{
   BEGIN(ExtendsParam);
   return false;
}

static bool handleCopyBrief(const QString &)
{
   if (current->brief.isEmpty() && current->doc.isEmpty()) {

      // if we don't have a brief or detailed description yet,
      // then the @copybrief should end up in the brief description.
      // otherwise it will be copied inline (see bug691315 & bug700788)

      setOutput(OutputBrief);
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addOutput("\\copybrief ");
   return false;
}

static bool handleCopyDetails(const QString &)
{
   setOutput(OutputDoc);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addOutput("\\copydetails ");
   return false;
}

static bool handleCopyDoc(const QString &)
{
   setOutput(OutputBrief);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addOutput("\\copybrief ");
   s_copyDocArg.resize(0);
   BEGIN(CopyDoc);

   return false;
}

static void checkFormula()
{
   if (YY_START == ReadFormulaShort || YY_START == ReadFormulaLong) {
      warn(yyFileName, yyLineNr, "End of comment block while inside formula.");
   }
}

// main entry point
bool parseCommentBlock(ParserInterface *parser, QSharedPointer<Entry> curEntry, const QString &comment,
                  const QString &fileName, int &lineNr, bool isBrief, bool isAutoBrief, bool isInbody,
                  Protection &r_protection, int &r_position, bool &r_newEntryNeeded )
{
   initParser();

   guards.clear();
   langParser = parser;
   current    = curEntry;

   if (comment.isEmpty()) {
      // avoid empty strings
      return FALSE;
   }

   inputString    = comment;
   inputString.append(" ");

   inputPosition  = r_position;
   yyFileName     = fileName;
   yyLineNr       = lineNr;
   protection     = r_protection;
   s_needNewEntry = false;
   xrefKind       = XRef_None;
   xrefAppendFlag = false;
   insidePre      = false;
   s_parseMore    = false;
   inBody         = isInbody;

   outputXRef.resize(0); 

   if (isBrief || isAutoBrief) {
      setOutput(OutputBrief);

   } else {
      setOutput(OutputDoc);
   }

   briefEndsAtDot = isAutoBrief;
  
   s_condCount    = 0;
   s_sectionLevel = 0;

   s_spaceBeforeCmd.resize(0);
   s_spaceBeforeIf.resize(0);

   printlex(commentscanYY_flex_debug, true, __FILE__, fileName);

   if (! current->doc.isEmpty()) {
      // separate detailed doc fragments
      current->doc += "\n\n";
   }

   if (! current->inbodyDocs.isEmpty() && isInbody) {
      // separate in body fragments
      current->inbodyDocs += "\n\n";
   }

   Debug::print(Debug::CommentScan, 0, "-----------\nCommentScanner: %s:%d\n"
                "input=[\n%s]\n", csPrintable(fileName), lineNr, csPrintable(comment) );
              
   commentscanYYrestart(commentscanYYin);   
   BEGIN( Comment );

   commentscanYYlex();
   setOutput(OutputDoc);

   if (YY_START == OverloadParam) {
      // comment ended with \overload
      addOutput(theTranslator->trOverloadText());
   }

   if (! guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Documentation block ended in the middle of a conditional section");
   }

   if (s_insideParBlock) {
      warn(yyFileName, yyLineNr, "Documentation block ended while inside a \\parblock. Missing \\endparblock");
   }

   // removes blank lines from the detailed docs
   current->doc = trimEmptyLines(current->doc, current->docLine);

   if (current->section == Entry::FILEDOC_SEC && current->doc.isEmpty()) {
      // to allow a comment block with just a @file command
      current->doc = "\n\n";
   }

   if (current->section == Entry::MEMBERGRP_SEC && s_memberGroupId == DOX_NOGROUP) {
      // @name section but no group started yet
      openGroup(current, yyFileName, yyLineNr);
   }

   if (Doxy_Globals::markdownSupport) {
      current->brief      = processMarkdown(fileName, lineNr, current, current->brief);
      current->doc        = processMarkdown(fileName, lineNr, current, current->doc);
      current->inbodyDocs = processMarkdown(fileName, lineNr, current, current->inbodyDocs);
   }

   Debug::print(Debug::CommentScan, 0, "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n===========\n",
                current->briefLine,  qPrintable(current->brief), current->docLine, qPrintable(current->doc),
                current->inbodyLine, qPrintable(current->inbodyDocs) );

   checkFormula();
   r_protection = protection;

   groupAddDocs(curEntry);
   r_newEntryNeeded = s_needNewEntry;
    
   if (s_parseMore && r_position == inputPosition) {
      // did not proceed during this call, do not continue or there will be an infinate loop
      s_parseMore = false;
   }

   if (s_parseMore) {
      r_position = inputPosition;
   } else {
      r_position = 0;
   }

   lineNr = yyLineNr;

   printlex(commentscanYY_flex_debug, false, __FILE__, fileName);

   return s_parseMore;
}

void groupEnterFile(const QString &fileName, int)
{
   s_autoGroupStack.clear();
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupDocs.resize(0);
   s_memberGroupRelates.resize(0);
   s_compoundName = fileName;
}

void groupLeaveFile(const QString &fileName, int line)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);

   if (! s_autoGroupStack.isEmpty()) {
      warn(fileName, line, "End of file while inside a group\n");
   }
}

void groupEnterCompound(const QString &fileName, int line, const QString &name)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      warn(fileName, line, "Try to put compound %s inside a member group\n", qPrintable(name));
   }

   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);
   s_compoundName = name;

   int i = s_compoundName.indexOf('(');

   if (i != -1) {
      // strip category (Obj-C)
      s_compoundName=s_compoundName.left(i);
   }

   if (s_compoundName.isEmpty()) {
      s_compoundName=fileName;
   }
}

void groupLeaveCompound(const QString &, int, const QString &)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);
   s_compoundName.resize(0);
}

static int findExistingGroup(int &groupId, const QSharedPointer<MemberGroupInfo> info)
{
   for (auto di = Doxy_Globals::memGrpInfoDict.begin(); di != Doxy_Globals::memGrpInfoDict.end(); ++di) {

      auto mi = *di;

      if (s_compoundName == mi->compoundName && ! mi->header.isEmpty() && 
               mi->header.compare(info->header, Qt::CaseInsensitive) == 0) {

         // same file or scope, not a nameless group, same header name

         return (int)di.key();    // put the item in this group
      }
   }

   groupId++; // start new group
   return groupId;
}

void openGroup(QSharedPointer<Entry> e, const QString &, int)
{
   if (e->section == Entry::GROUPDOC_SEC) {
      // auto group
      s_autoGroupStack.push( QMakeShared<Grouping>(e->name, e->groupingPri()) ); 

   } else {
      // start of a member group

      if (s_memberGroupId == DOX_NOGROUP) {
         // no group started yet
         static int curGroupId = 0;

         QSharedPointer<MemberGroupInfo> info = QMakeShared<MemberGroupInfo>();

         info->header = s_memberGroupHeader.trimmed();
         info->compoundName = s_compoundName;
         s_memberGroupId = findExistingGroup(curGroupId, info);

         Doxy_Globals::memGrpInfoDict.insert(s_memberGroupId, info);

         s_memberGroupRelates = e->relates;
         e->mGrpId = s_memberGroupId;
      }
   }
}

void closeGroup(QSharedPointer<Entry> e, const QString &fileName, int line, bool foundInline)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      // end of member group

      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         // known group
         info->doc = s_memberGroupDocs;
         info->docFile = fileName;
         info->docLine = line;
      }

      s_memberGroupId = DOX_NOGROUP;
      s_memberGroupRelates.resize(0);
      s_memberGroupDocs.resize(0);

      if (! foundInline) {
         e->mGrpId = DOX_NOGROUP;
      }

   } else if (! s_autoGroupStack.isEmpty()) {
      // end of auto group
      QSharedPointer<Grouping> grp = s_autoGroupStack.pop();

      // see bug577005: we should not remove the last group for e
      if (! foundInline) {
         e->m_groups.removeLast();
      }
     
      if (! foundInline) {
         initGroupInfo(e);
      }
   }
}

void initGroupInfo(QSharedPointer<Entry> e)
{
   e->mGrpId  = s_memberGroupId;
   e->relates = s_memberGroupRelates;

   if (! s_autoGroupStack.isEmpty()) {
      e->m_groups.append(*s_autoGroupStack.top());
   }
}

static void groupAddDocs(QSharedPointer<Entry> e)
{
   if (e->section == Entry::MEMBERGRP_SEC) {
      s_memberGroupDocs = e->brief.trimmed();
      e->doc = trimEmptyLines(e->doc, e->docLine);

      if (! s_memberGroupDocs.isEmpty() && ! e->doc.isEmpty()) {
         s_memberGroupDocs+="\n\n";
      }

      s_memberGroupDocs += e->doc;
      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         info->doc     = s_memberGroupDocs;
         info->docFile = e->docFile;
         info->docLine = e->docLine;
         info->setRefItems(e->m_specialLists);
      }

      e->doc.resize(0);
      e->brief.resize(0);
   }
}

static void handleGuard(const QString &expr)
{
   CondParser prs;
   bool sectionEnabled = prs.parse(yyFileName, yyLineNr, expr.trimmed());
   bool parentEnabled  = true;

   if (! guards.isEmpty()) {
      parentEnabled = guards.top()->isEnabled();
   }

   if (parentEnabled) {
      if ( (sectionEnabled && guardType == Guard_If) || (!sectionEnabled && guardType == Guard_IfNot)) {
         // section is visible
         guards.push(new GuardedSection(true, true));
         enabledSectionFound = true;
         BEGIN( GuardParamEnd );

      } else {
         // section is invisible
         if (guardType != Guard_Skip) {
            guards.push(new GuardedSection(false, true));
         }

         BEGIN( SkipGuardedSection );
      }

   } else {
      // invisible because of parent
      guards.push(new GuardedSection(false, false));
      BEGIN( SkipGuardedSection );
   }
}

