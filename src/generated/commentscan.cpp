/*************************************************************************
 *
 * Copyright (C) 2014-2017 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License version 2
 * is hereby granted. No representations are made about the suitability of
 * this software for any purpose. It is provided "as is" without express or
 * implied warranty. See the GNU General Public License for more details.
 *
 * Documents produced by DoxyPress are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 209
#define YY_END_OF_BUFFER 210
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[781] =
    {   0,
       79,   79,  127,  127,  141,  141,  156,  156,  200,  200,
      147,  147,  210,  209,   46,  209,   46,  209,   45,  209,
       46,  209,   46,  209,   46,  209,   46,  209,   44,   46,
      209,   46,  209,   46,  209,   27,   46,  209,   46,  209,
       46,  209,   46,  209,   46,  209,   46,  209,   46,  209,
       44,   46,  209,   46,  209,   46,  209,   92,  209,   91,
      209,   92,  209,   89,   92,  209,   92,  209,   92,  209,
      209,   93,  209,  117,  209,  116,  209,  117,  209,  114,
      117,  209,  117,  209,   74,  209,   74,  209,   73,  209,
       74,  209,   74,  209,   74,  209,   70,   74,  209,   74,

      209,   74,  209,   78,  209,   77,  209,   78,  209,   75,
       78,  209,   78,  209,   78,  209,   78,  209,   82,  209,
       81,  209,   79,   82,  209,   79,   82,  209,   82,  209,
       79,   82,  209,   79,   82,  209,   82,  209,   74,  209,
       73,  209,   74,  209,   74,  209,   74,  209,   74,  209,
       74,  209,  105,  209,  104,  209,  102,  105,  209,  105,
      209,  109,  209,  108,  209,  109,  209,  109,  209,  113,
      209,  112,  209,  113,  209,  113,  209,  101,  209,   98,
      209,  101,  209,   99,  101,  209,  101,  209,  101,  209,
       97,  209,   97,  209,   95,   97,  209,   96,   97,  209,

    16478,   60,  209,   59,  209,   60,  209,   57,   60,  209,
       60,  209,   64,  209,   64,  209,   63,  209,   64,  209,
       64,  209,   64,  209,   61,   64,  209,   64,  209,   64,
      209,   68,  209,   67,  209,   68,  209,   65,   68,  209,
       68,  209,   85,  209,   83,  209,  209,   87,  209,   88,
      209,  209,  123,  209,  122,  209,  121,  123,  209,  123,
      209,  127,  130,  209,  124,  209,  127,  130,  209,  130,
      209,  130,  209,  132,  209,  131,  209,  209,  135,  209,
      135,  209,  133,  209,  135,  209,  135,  209,  141,  145,
      209,  142,  209,  145,  209,  145,  209,  145,  209,  145,

      209,  145,  209,  120,  209,  118,  209,  120,  209,  154,
      209,  154,  209,  152,  209,  146,  154,  209,  151,  154,
      209,  154,  209,  157,  209,  156,  157,  209,  155,  209,
      157,  209,  164,  165,  209,  163,  209,  165,  209,  165,
      209,  165,  209,  175,  176,  209,  166,  209,  176,  209,
      176,  209,  176,  209,  179,  209,  177,  209,  179,  209,
      183,  209,  181,  209,  180,  183,  209,  183,  209,  186,
      189,  209,  184,  209,  187,  189,  209,  188,  189,  209,
      189,  209,  189,  209,  192,  209,  190,  209,  192,  209,
      195,  209,  194,  209,  195,  209,  193,  195,  209,  195,

      209,  198,  209,  197,  209,  198,  209,  196,  198,  209,
      198,  209,   54,   56,  209,   55,  209,   56,  209,   56,
      209,  138,  209,  137,  209,  136,  138,  209,  138,  209,
       49,   50,  209,   48,  209,   50,  209,   50,  209,  200,
      202,  209,  201,  209,  202,  209,  202,  209,  202,  209,
      205,  209,  204,  209,  203,  205,  209,  205,  209,  207,
      208,  209,  206,  209,  208,  209,  147,  209,  147,  150,
      209,  148,  209,  149,  209,   46,   43,    4,   46,   46,
       36,   38,   40,   38,   26,   26,   18,   26,   18,   18,
       24,   25,   20,   26,   27,   18,   18,   18,   18,   30,

       31,   36,   28,   89,   89,   90,   89,   93,  114,  114,
      115,   70,   70,   72,   70,   75,   75,   76,   75,   79,
       79,   79,   79,   79,   79,   80,   79,  102,  103,  106,
      107,  111,  110,  111,   99,   99,  100,   99,   96,16478,
     8286,   96,16478,   57,   57,   57,   58,   61,   61,   62,
       61,   65,   65,   66,   83,   84,   87,   86,  121,  127,
      124,  127,  129,  129,  126,  131,  134,  141,  144,  143,
      119,  146,  151,  153,  156,  155,  164,  175,  178,  180,
      182,  186,  185,  191,  193,  193,  196,  196,   54,  136,
       49,  200,  199,  203,  207,  147,   26,   46,   37,   35,

       42,   38,   42,   42,   42,   38,   42,   42,   39,    6,
       34,    1,    1,    2,   18,   18,   22,   23,   20,    5,
       18,   18,   32,   35,   29,   89,   89,   70,   75,   75,
       79,   79,   79,   99,   99,   57,   57,   57,   57,   61,
       65,  128,   51,   52,   53,   47,  199,  203,   42,   42,
       16,   33,    1,   19,    2,   18,   18,   18,   89,   69,
       75,   79,   79,   71,   99,   57,   57,   57,   65,  128,
      159,  167,   47,  203,   15,   41,    6,   13,   18,   21,
       18,   18,   89,   75,   79,   99,    3,   14,    7,   18,
       21,   18,   18,   89,   75,   79,   99,   83,  161,  169,

       18,   18,   18,   89,   75,   79,   99,  140,  160,  158,
      168,   18,   18,   18,   89,   91,  116,   73,   75,   77,
       79,   81,  104,  108,  112,   98,   99,   59,   63,   67,
       85,   88,  122,  125,  132,  133,  139,  142,  118,  152,
      162,  163,  166,  177,  181,  184,  190,  194,  197,  137,
       48,  201,  204,  206,   12,    9,    8,   18,   18,    5,
       18,  170,   11,   10,   18,   18,   18,   18,  173,   17,
       18,   17,   18,  174,  171,   17,   18,  174,  172,   43
    } ;

static yyconst flex_int16_t yy_accept[1155] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    5,    5,    5,    5,    6,    7,    7,
        7,    7,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   10,
       11,   11,   11,   11,   11,   12,   13,   14,   15,   17,
       19,   21,   23,   25,   27,   29,   32,   34,   36,   39,

       41,   43,   45,   47,   49,   51,   54,   56,   58,   60,
       62,   64,   67,   69,   71,   72,   74,   76,   78,   80,
       83,   85,   87,   89,   91,   93,   95,   97,  100,  102,
      104,  106,  108,  110,  113,  115,  117,  119,  121,  123,
      126,  129,  131,  134,  137,  139,  141,  143,  145,  147,
      149,  151,  153,  155,  157,  160,  162,  164,  166,  168,
      170,  172,  174,  176,  178,  180,  182,  184,  187,  189,
      191,  193,  195,  198,  202,  204,  206,  208,  211,  213,
      215,  217,  219,  221,  223,  225,  228,  230,  232,  234,
      236,  238,  241,  243,  245,  247,  248,  250,  252,  253,

      255,  257,  260,  262,  265,  267,  270,  272,  274,  276,
      278,  279,  281,  283,  285,  287,  289,  292,  294,  296,
      298,  300,  302,  304,  306,  308,  310,  312,  314,  316,
      319,  322,  324,  326,  329,  331,  333,  336,  338,  340,
      342,  344,  347,  349,  351,  353,  355,  357,  359,  361,
      363,  365,  368,  370,  373,  375,  378,  381,  383,  385,
      387,  389,  391,  393,  395,  397,  400,  402,  404,  406,
      408,  411,  413,  416,  418,  420,  422,  424,  426,  429,
      431,  434,  436,  438,  440,  443,  445,  447,  449,  451,
      453,  455,  458,  460,  463,  465,  467,  469,  472,  474,

      476,  477,  477,  477,  477,  477,  478,  478,  478,  479,
      480,  480,  480,  481,  481,  481,  481,  482,  483,  484,
      484,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  486,  486,  487,  488,  489,
      490,  491,  492,  493,  495,  496,  496,  497,  498,  499,
      500,  500,  500,  500,  500,  500,  500,  501,  502,  503,
      503,  504,  504,  504,  504,  504,  504,  505,  506,  506,
      506,  506,  507,  508,  508,  509,  510,  510,  511,  511,
      511,  512,  512,  512,  512,  512,  512,  513,  513,  513,
      514,  514,  514,  515,  515,  515,  515,  516,  516,  517,

      518,  518,  518,  518,  519,  520,  520,  521,  522,  522,
      523,  524,  525,  525,  525,  526,  526,  527,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  529,  529,  530,  530,  530,  531,  531,  533,
      533,  533,  534,  534,  535,  535,  535,  536,  537,  537,
      537,  537,  538,  539,  541,  541,  542,  544,  545,  545,
      545,  546,  546,  547,  547,  548,  548,  548,  548,  548,
      548,  549,  549,  549,  550,  550,  551,  551,  551,  551,
      552,  553,  553,  554,  554,  555,  555,  556,  556,  556,
      557,  557,  558,  558,  559,  559,  560,  560,  561,  562,

      563,  563,  564,  565,  565,  566,  566,  567,  567,  567,
      567,  567,  568,  568,  569,  570,  571,  571,  571,  571,
      572,  572,  572,  573,  574,  574,  575,  575,  576,  577,
      577,  577,  578,  578,  578,  578,  579,  579,  579,  579,
      579,  579,  579,  580,  580,  581,  581,  582,  582,  583,
      583,  584,  584,  584,  585,  585,  586,  586,  587,  587,
      587,  588,  588,  589,  589,  589,  590,  590,  590,  591,
      591,  592,  592,  592,  593,  594,  594,  595,  595,  595,
      596,  596,  597,  598,  598,  598,  598,  599,  599,  600,
      601,  602,  604,  605,  606,  608,  609,  610,  610,  610,

      610,  610,  610,  610,  610,  610,  610,  611,  611,  611,
      611,  611,  611,  612,  613,  614,  615,  616,  617,  618,
      619,  619,  620,  621,  622,  623,  623,  623,  623,  623,
      624,  625,  625,  626,  627,  627,  628,  628,  628,  628,
      628,  628,  629,  630,  630,  631,  632,  632,  633,  633,
      634,  634,  634,  634,  634,  634,  634,  635,  635,  636,
      637,  638,  639,  640,  640,  640,  641,  641,  642,  642,
      642,  642,  642,  642,  642,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,

      643,  643,  644,  645,  646,  646,  646,  647,  647,  648,
      648,  649,  649,  649,  649,  649,  649,  649,  650,  651,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  653,  654,  655,  656,  657,  657,  657,
      658,  659,  659,  659,  659,  660,  660,  660,  661,  661,
      661,  662,  663,  663,  664,  665,  665,  665,  665,  666,
      666,  667,  668,  669,  669,  669,  670,  670,  670,  670,
      670,  670,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  672,  672,  672,  672,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      674,  674,  674,  675,  675,  675,  675,  676,  676,  676,
      677,  677,  677,  677,  677,  677,  677,  679,  679,  679,
      679,  680,  681,  682,  683,  683,  684,  684,  684,  685,
      686,  686,  686,  686,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  688,  689,  689,  689,  689,  689,  690,  690,  690,
      690,  690,  691,  692,  693,  694,  695,  695,  695,  696,

      697,  697,  697,  697,  698,  698,  698,  698,  698,  698,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  700,  700,  700,  700,  700,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  702,  703,  704,  705,  705,  705,
      706,  707,  707,  707,  707,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  709,  709,  709,  709,  709,  709,  709,  709,

      709,  710,  711,  711,  711,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  713,  714,
      715,  717,  718,  719,  721,  723,  724,  725,  726,  728,
      729,  730,  731,  732,  733,  734,  735,  736,  737,  737,
      738,  738,  738,  738,  738,  738,  738,  738,  739,  740,
      741,  742,  743,  743,  743,  743,  743,  743,  744,  745,
      746,  747,  748,  749,  750,  751,  752,  753,  754,  755,
      755,  755,  755,  756,  757,  758,  759,  760,  761,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,

      763,  763,  763,  764,  765,  765,  765,  766,  766,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  768,  768,  769,  769,  769,  769,  769,  769,
      769,  770,  770,  770,  772,  772,  774,  774,  774,  775,
      776,  776,  778,  778,  778,  779,  779,  779,  779,  779,
      779,  780,  781,  781
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   32,   32,   36,   37,   38,   39,   40,
       32,   41,   32,   42,   43,   32,   32,   32,   32,   32,
       44,   45,   46,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   32,   57,   58,   59,   60,
       61,   62,   32,   63,   64,   65,   66,   67,   68,   69,
       70,   32,   71,   72,   73,   74,    1,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76
    } ;

static yyconst flex_int32_t yy_meta[77] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
        7,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       18,   18,   19,   20,   21,   22,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,    1,   24,    1,   25,   23,   23,   23,
       23,   23,   23,   23,   23,   26,   23,   23,   23,   27,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       28,   29,   30,   31,   32,   33
    } ;

static yyconst flex_int16_t yy_base[1390] =
    {   0,
        0,    0,    0,   75,  147,  221, 5135, 5128,  295,    0,
      371,    0,  447,  521,  595,  669,  743,    0,  819,    0,
       75,   76,   78,   81,  895,  969, 1043,    0, 1119,    0,
     1195,    0, 1271,    0, 1347,    0,   88,   91, 1423,    0,
       92,   96, 1499,    0,  110,  122,  159,  184,   83,   97,
     1575, 1651,  129,  141,  191,  206,  238,  244,  100,  113,
     1727,    0,  245,  455,  132,  135, 1803,    0, 1879,    0,
      235,  452,  459,  461, 1955,    0,  197,  466,  470,  472,
     2031, 2105,  136,  137,  194,  247, 5130,10033, 5049,  503,
      210,   94,  100,   93,  486,  537, 2174, 2242,  559, 2310,

      609, 2384,  109,  557,  925, 2130,  624,  631,10033,10033,
     5115,  491,  524, 1590, 5118,10033,10033,10033,    0,  165,
      568,10033,  693,  705, 1613, 2060, 5097,  715,  655,  270,
    10033,10033, 5112,  598,  682, 5093, 1666,10033,10033, 2459,
      939,  983, 1675,10033, 2165,  920,  932, 2197, 2252, 5063,
     1007,  282,10033,10033,    0,  942,10033,10033, 5074,  951,
    10033,10033, 5073,  958,10033,10033, 5072, 1584, 1587, 2260,
    10033,    0,10033,  174,10033,10033,    0, 1621, 2079,10033,
     2056, 2068, 2320, 2342, 5055, 2134, 2093,  727,10033,10033,
        0, 5056, 2139,10033, 5054, 2160,    0,10033, 2229,10033,

    10033,    0, 5024,  487,10033, 5025, 2366, 2239,10033,    0,
     5022,10033,  472,10033, 5061, 5020,    0,10033,10033, 5047,
     5051, 5012,  216,10033,10033, 2243,10033,  276,10033,10033,
      647, 2286,10033,  620,10033, 5016,    0,10033,10033,   52,
      504,    0,10033,10033,  599,  970,10033,10033, 2294,10033,
    10033,    0, 2301,    0,10033,10033,10033,10033, 2306,10033,
    10033, 2356,10033,10033,    0,  259, 5015,10033,10033,    0,
      484, 5014,    0,10033, 5007, 5006,10033,10033,    0, 5010,
        0,10033, 5039, 5002,    0,10033,10033, 4974,  442,10033,
    10033, 5029, 4999,    0,10033, 4995,    0,    0,10033,10033,

     4965,  994, 2526, 2593, 1676, 2337, 4992, 5028,10033,  194,
        0, 5010,  179, 5006,    0,  203,  236,10033,10033, 2667,
     5005,  536, 5013,  524,  968,  532, 1651,  627,  654, 2395,
      168,  668, 4977, 4962,10033, 5010,  536, 2742, 4952, 4965,
     1636,10033,10033,    0, 2397, 2470, 2153, 2368, 2364, 2436,
     2815,  570, 2425,  719, 1015, 2429,  675, 2430, 2521,  732,
    10033,  926, 1683, 2493, 2504, 5017,10033, 2173,  887, 2431,
     1609,10033, 2495, 5013,10033,  894, 5006,  898, 4991, 1713,
    10033, 4952, 2552, 2559, 4985, 2587, 2604, 2085, 2621, 2611,
     2581, 2192,10033, 4949, 2638, 2646, 4982, 4997,10033, 2613,

     1667, 2678, 2347,10033, 2687, 4996,  488, 2887, 2961, 4994,
    10033, 2701, 2166, 2710, 4993, 2517,10033, 2751, 2757, 2779,
     4976, 2789, 2822, 2801, 2846, 2854,    0, 2911, 2871, 2881,
     1019,    0, 2540,10033, 4940, 4990,10033, 2564,10033, 4938,
     4988,10033, 2651,10033, 4935, 4985,10033, 2680, 2224, 2754,
     2657,10033, 2899,  975, 1686,10033, 2217, 2933, 2922,    0,
     2988, 4962, 3016, 2667,10033, 4926, 2946, 3038, 4960, 3046,
     2999, 3063, 3071, 3079, 2713,10033, 4924, 3083, 3096,    0,
     4960, 4967, 4957, 2816,10033, 4916, 4953, 4912, 2841,10033,
     4908,    0, 2865,10033, 4907,    0, 4906, 2425,10033, 4915,

     4876,10033, 4913, 2876,10033, 4863,    0, 4862, 2159, 4906,
     4905,10033, 4848,    0,10033,10033, 4844, 4845, 2938,10033,
     4844, 2169,10033, 2280, 2993,10033, 4843, 3025,10033, 4853,
     4810,    0,  422, 4809, 4794,    0, 4791, 4797, 4801,  863,
     4789, 3010,10033, 4788,    0, 3021,10033, 4787,    0, 3055,
    10033, 4786, 3088,10033, 4785, 1000, 4829, 1610, 4814, 4778,
     1616, 4826, 2062, 4808, 4770,    0, 4818,  511,    0, 4768,
        0,  622, 4766,    0,    0, 4763, 4798,    0, 4748,    0,
     4747,    0, 4751, 4745, 4778,    0,  614, 4782, 2095, 4773,
    10033,10033, 4772, 3145, 4771, 4774,10033, 4774, 2119, 4738,

     4723, 2218,  935, 2362, 2227, 2523,10033, 2269, 2241, 2249,
     4723, 4722, 4763, 2221, 3104,    0, 2326, 2544,10033,10033,
        0,    0,    0, 2809, 3121, 3105, 2366, 3096, 3127,10033,
     3171, 3178, 2391, 3120, 3184, 3186,    0, 4722, 3208, 3220,
     4717, 4746, 3209, 3216, 3218, 1692, 3274, 3237, 3246, 3282,
     4756, 2702, 2725, 4712, 4711, 4707, 3228, 3249, 3285, 3312,
     3320, 3347, 3355, 4704, 4703,    0,    0, 4740, 4700, 4688,
     4693, 4692, 4691,    0,    0, 4690, 4686, 4684, 4688, 4682,
     4681, 4680, 4679, 4670, 4682, 4672, 4675, 4679, 2729, 4666,
     4678, 4678, 4639, 3769, 3764, 3761, 3759,    0, 3758,    0,

     3756,10033,10033,10033, 3754, 3779, 2484, 3746,    0, 3745,
     3782, 3737, 3735, 2083, 3733, 3776,    0, 3348, 2506,10033,
     2373, 3724, 3712,   65, 2448, 3740, 2837, 2467, 3122, 2320,
     3710, 3686,10033, 2752,10033,    0, 2826, 3668, 3687, 3326,
     3334, 3378, 3382, 3386, 3374, 3668, 3411,10033, 3418, 3649,
     3388, 3458, 3532, 3428,10033, 3648, 3643, 3638, 3461,    0,
     3487, 3496, 3422, 3631, 3630, 3666, 3622, 3621, 3619, 3616,
     3614,    0, 3611, 3609, 3607, 3503, 3604, 3602, 3598, 3596,
     3598, 3592,10033, 3580, 3573, 3557,10033, 3550, 3553, 3534,
     3533, 3533, 3531, 3520, 3514, 3513, 3511, 3500, 3499, 2893,

     3487, 3453, 3477, 3434, 3433, 3426,10033, 3467, 3509,10033,
     3432, 3408, 3396, 2504, 3427, 3436,10033, 2528, 3386, 3396,
     3132, 3359, 3523, 3538, 3562, 3563, 3376, 3366, 3569, 3577,
     3365, 3358, 3356, 3571, 3615, 3352, 3350, 3348, 3340, 3344,
     3342, 3330, 3320, 3303, 3302, 3283, 3281, 3261, 3264, 2003,
     3246, 3243, 2852, 3237, 3243, 3233, 3225, 3218, 3210, 3206,
     3193, 3205, 1544, 3183, 3184, 3170, 2000, 3163, 3162, 3156,
     3154, 3148, 3146, 3141, 3134, 3133, 3126, 3115, 3090, 3089,
     3122,10033, 3072, 3083, 2394, 3605,10033, 3100, 3607, 3064,
     3056, 3131,10033, 3623, 3308, 3608, 3066, 3062, 3621, 3636,

     3055, 3054, 3047, 3628, 3684, 3692, 3046, 3030, 3029,10033,
     3028, 3022, 3014, 3005, 3004, 3003, 2995,  588, 2986, 2979,
     2971, 2979, 2963, 2956, 2937, 2948, 2936, 2940, 2939, 2938,
     2934,10033, 2929,    0,    0, 2927,10033, 2907, 2976, 2889,
     2886, 2896, 2890, 2881, 2879, 2872, 2870, 2860, 2859, 2853,
     2822, 2812, 2803, 2798, 2786, 2774, 2765, 2745, 2534, 2776,
     3640, 2736, 2725, 3435, 3647, 3673, 3698, 2727, 2723, 3701,
     3704, 2722, 2716, 2715, 3712, 2708, 2702, 2701, 2700, 2693,
     2686, 2685, 2673, 2659, 2669, 2660,    0, 2644, 2648, 2633,
     2628,10033, 2639, 2629, 2604, 2600, 2594, 2589, 2574,    0,

    10033,10033, 2558, 2568,10033, 2564, 2551, 2533, 2524, 2524,
     2518, 2511, 2510, 2495, 2478, 2466, 2449, 2436, 2430, 2411,
     2404, 2399, 2393, 2381, 3658, 2412, 2396, 3177, 3697, 3731,
     3721,10033,10033, 3729, 3761,10033,10033,10033, 3732,10033,
    10033,10033,10033,10033,10033,10033,10033,10033, 2347,10033,
     2334, 2319, 2320, 2319, 2324, 2301, 2277,10033,10033,10033,
    10033,10033, 2267, 2252, 3057, 2256, 2250,10033,10033,10033,
    10033,10033,10033,10033,10033,10033,10033,10033,10033, 2276,
     2275, 3757,10033,10033,10033, 3437, 3751, 2227, 3758, 2212,
     2204, 2166, 2115, 2101, 2088, 2067, 2043, 2039, 2038,10033,

     1658, 1660,10033,10033, 1683, 3767, 3182, 1582, 3768, 1649,
     1625, 1613, 1568, 1526,  982,  966,  934,  955, 3247,  899,
      884, 3304,  443, 3776,  865,  833,  667,  632,  594,  545,
    10033, 3335,  535, 3464, 2008, 3518,  498,  479, 3473,10033,
      415, 3509, 2176,  218, 3510,  139,  207,   17, 3547, 2124,
    10033, 3785,10033, 3834, 3867, 3900, 3933, 3966, 3999, 4032,
     4065, 4098, 4131, 4164, 4197, 4230, 4263, 4296, 4329, 4362,
     4395, 4428, 4461, 4494, 4527, 4560, 4593, 4626, 4659, 4692,
     4718, 4739, 4761, 4787, 4807, 4833, 4865, 4892, 4925, 4936,
     4954, 4986, 5018, 5050, 5083, 5110, 5143, 5171, 5203, 5235,

     5267, 5286, 5319, 5352, 5385, 5412, 5423, 5455, 5466, 5498,
     5530, 5562, 5594, 5605, 5623, 5642, 5675, 5694, 5727, 5760,
     5792, 5809, 5842, 5875, 5907, 5934, 5967, 5986, 6019, 6030,
     6048, 6059, 6077, 6110, 6129, 6162, 6195, 6216, 6249, 6282,
     6309, 6340, 6351, 6367, 6388, 6401, 6428, 6439, 6456, 6471,
     6497, 6524, 6551, 6578, 6611, 6629, 6655, 6687, 6719, 6751,
     6784, 6800, 6833, 6860, 6887, 6920, 6953, 6981, 7008, 7040,
     7072, 7104, 7137, 7169, 7188, 7221, 7254, 7287, 7314, 7341,
     7373, 7405, 7416, 7448, 7480, 7512, 7544, 7560, 7578, 7604,
     7623, 7656, 7675, 7708, 7741, 7767, 7786, 7819, 7852, 7884,

     7911, 7944, 7963, 7996, 8014, 8040, 8058, 8084, 8117, 8136,
     8169, 8202, 3711, 8223, 8239, 8272, 8305, 8321, 8354, 8373,
     8388, 8415, 8448, 8480, 3772, 8506, 8533, 8552, 3782, 8578,
     8599, 8626, 8637, 8670, 8686, 8713, 8740, 8773, 8801, 8829,
     8862, 8894, 8921, 8948, 8980, 9012, 9044, 9060, 9071, 9089,
     9100, 9116, 9149, 9160, 9171, 3796, 9192, 9225, 9244, 9261,
     9288, 3801, 9320, 9347, 9358, 9384, 9410, 9433, 9466, 9493,
     9526, 9554, 9581, 9592, 9624, 9656, 9674, 9690, 9709, 9736,
     9768, 9801, 9834, 9867, 9900, 9933, 9966, 9999, 3806
    } ;

static yyconst flex_int16_t yy_def[1390] =
    {   0,
     1154, 1154, 1153,    3, 1155, 1155, 1156, 1156, 1153,    9,
     1153,   11, 1157, 1157, 1158, 1158, 1153,   17, 1153,   19,
     1159, 1159, 1160, 1160, 1161, 1161, 1153,   27, 1153,   29,
     1153,   31, 1153,   33, 1153,   35, 1162, 1162, 1153,   39,
     1163, 1163, 1153,   43, 1164, 1164, 1165, 1165, 1166, 1166,
     1167, 1167, 1168, 1168, 1169, 1169, 1170, 1170, 1171, 1171,
     1153,   61, 1172, 1172, 1173, 1173, 1153,   67, 1153,   69,
     1174, 1174, 1174, 1174, 1153,   75, 1175, 1175, 1176, 1176,
     1177, 1177, 1178, 1178, 1179, 1179, 1153, 1153, 1153, 1153,
     1153, 1180, 1181, 1182, 1182, 1183, 1153, 1184, 1185, 1186,

     1185, 1153, 1153, 1182, 1182, 1183, 1182, 1153, 1153, 1153,
     1187, 1188, 1188, 1188, 1189, 1153, 1153, 1153, 1190, 1191,
     1153, 1153, 1153, 1153, 1192, 1192, 1153, 1193, 1153, 1194,
     1153, 1153, 1195, 1196, 1196, 1153, 1196, 1153, 1153, 1197,
     1198, 1198, 1198, 1153, 1198, 1153, 1153, 1199, 1199, 1153,
     1200, 1201, 1153, 1153, 1202, 1153, 1153, 1153, 1203, 1153,
     1153, 1153, 1204, 1153, 1153, 1153, 1205, 1206, 1206, 1206,
     1153, 1207, 1153, 1208, 1153, 1153, 1209, 1210, 1153, 1153,
     1153, 1153, 1211, 1211, 1153, 1212, 1153, 1213, 1153, 1153,
     1214, 1215, 1153, 1153, 1216, 1153, 1217, 1153, 1153, 1153,

     1153, 1218, 1153, 1219, 1153, 1220, 1153, 1221, 1153, 1222,
     1153, 1153, 1153, 1153, 1223, 1153, 1224, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1225, 1153, 1153,
     1225, 1153, 1153, 1153, 1153, 1153, 1226, 1153, 1153, 1153,
     1153, 1227, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1228, 1153, 1229, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1230, 1231, 1153, 1153, 1153, 1232,
     1233, 1153, 1234, 1153, 1153, 1153, 1153, 1153, 1235, 1153,
     1236, 1153, 1153, 1153, 1237, 1153, 1153, 1153, 1153, 1153,
     1153, 1238, 1153, 1239, 1153, 1153, 1240, 1240, 1153, 1153,

     1153, 1153, 1241, 1241, 1153, 1153, 1153, 1242, 1153, 1242,
     1243, 1244, 1244, 1245, 1246, 1153, 1245, 1153, 1153, 1247,
     1245, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1248, 1241, 1248,  338,
      338, 1153, 1153, 1249, 1250, 1250, 1251, 1251, 1251, 1251,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1245, 1153,
     1153, 1245, 1245, 1153, 1153, 1252, 1153, 1253, 1254, 1253,
     1153, 1153, 1253, 1255, 1153, 1256, 1257, 1256, 1153, 1153,
     1153, 1153, 1153, 1258, 1153, 1258, 1259, 1260, 1258, 1259,
     1261, 1153, 1153, 1153, 1260, 1260, 1262, 1263, 1153, 1264,

     1265, 1264, 1153, 1153, 1264, 1266, 1266, 1267, 1267, 1266,
     1153, 1268, 1269, 1268, 1266, 1153, 1153, 1268, 1153, 1270,
     1153, 1270, 1271, 1272, 1270, 1153, 1273, 1271, 1272, 1272,
     1274, 1275, 1153, 1153, 1153, 1276, 1153, 1153, 1153, 1153,
     1277, 1153, 1153, 1153, 1153, 1278, 1153, 1279, 1280, 1279,
     1153, 1153, 1279, 1281, 1153, 1153, 1281, 1282, 1153, 1283,
     1282, 1153, 1284, 1153, 1153, 1153, 1153, 1285, 1153, 1285,
     1286, 1287, 1285, 1286, 1153, 1153, 1153, 1287, 1287, 1288,
     1289, 1290, 1289, 1153, 1153, 1153, 1291, 1153, 1153, 1153,
     1153, 1292, 1153, 1153, 1153, 1293, 1153, 1294, 1153, 1295,

     1153, 1153, 1296, 1153, 1153, 1153, 1297, 1153, 1153, 1298,
     1298, 1153, 1153, 1299, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1300, 1153, 1300, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1301, 1153, 1153, 1153, 1302, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1303, 1153, 1153, 1153, 1304, 1153,
     1153, 1153, 1153, 1153, 1153, 1305, 1306, 1305, 1153, 1153,
     1307, 1308, 1307, 1153, 1153, 1309, 1153, 1153, 1310, 1153,
     1311, 1153, 1153, 1312, 1313, 1153, 1314, 1315, 1153, 1316,
     1153, 1317, 1153, 1153, 1318, 1319, 1318, 1320, 1153, 1321,
     1153, 1153, 1321, 1322, 1321, 1320, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1153, 1323, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1324, 1324, 1325, 1153, 1326, 1153, 1153,
     1327, 1328, 1329, 1330, 1330, 1153, 1153, 1153, 1153, 1153,
     1321, 1153, 1153, 1331, 1331, 1332, 1333, 1153, 1334, 1334,
     1153, 1335, 1336, 1336, 1337, 1153, 1338, 1339, 1339, 1340,
     1341, 1153, 1342, 1153, 1153, 1153, 1343, 1343, 1344, 1345,
     1346, 1347, 1347, 1153, 1153, 1348, 1349, 1350, 1153, 1153,
     1153, 1153, 1153, 1351, 1352, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1353, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1354, 1153, 1355,

     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1356, 1153,
     1357, 1153, 1153, 1153, 1153, 1358, 1359, 1360, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1361, 1361, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1362, 1363, 1364, 1365, 1366,
     1366, 1153, 1153, 1367, 1368, 1153, 1369, 1153, 1369, 1153,
     1370, 1371, 1371, 1372, 1153, 1153, 1153, 1153, 1373, 1374,
     1375, 1375, 1376, 1153, 1153, 1377, 1153, 1153, 1153, 1153,
     1153, 1378, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153, 1357, 1153, 1153, 1153, 1153, 1379, 1360, 1153,
     1153, 1153, 1153, 1153, 1153, 1380, 1153, 1153, 1153, 1153,
     1363, 1153, 1366, 1366, 1153, 1368, 1153, 1153, 1370, 1372,
     1153, 1153, 1153, 1373, 1381, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1382, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1379, 1153, 1153, 1153, 1153, 1383, 1153, 1380, 1380, 1153,
     1153, 1363, 1153, 1366, 1366, 1368, 1153, 1153, 1370, 1372,

     1153, 1153, 1153, 1373, 1381, 1381, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1384, 1385, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1383,
     1383, 1153, 1153, 1363, 1366, 1366, 1368, 1153, 1153, 1370,
     1372, 1153, 1153, 1153, 1373, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1386, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1387,

     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1363, 1366, 1366,
     1368, 1153, 1153, 1370, 1372, 1153, 1153, 1153, 1373, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1388, 1153, 1153, 1153, 1363, 1153, 1389, 1366, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1388, 1388, 1363, 1389, 1366, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1363, 1389, 1366, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1363, 1389, 1366, 1153, 1153, 1153, 1153,
     1153, 1153, 1389, 1153, 1153, 1153, 1389, 1153, 1153, 1389,
     1153, 1389,    0, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153
    } ;

static yyconst flex_int16_t yy_nxt[10110] =
    {   0,
       89,   90,   91,   89,   90,   89,   92,   89,   93,   89,
       89,   89,   89,   89,   94,   89,   95,   96,   89,   94,
       94,   94,   89,   97,   89,   98,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   89,  100,   89,  101,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       89,   89,   89,   89,   89,   89,  102,  158,  158,  102,
      162,  159,  159,  162,  163,  225,  987,  163,  103,  104,
      198,  105,  106,  198,  205,  107,  107,  108,  205,  225,

      309,   88,  248,  533,   88,  206,  814,  534,  311,  206,
      357,  213,  214,  357,  213,  248,  215,  207,  315,  160,
      160,  207,  164,  213,  214,  164,  213,  226,  215,  814,
      234,  235,  199,  234,  261,  199,  208,  261,  295,  295,
      208,  226,  234,  235,  249,  234,  108,  109,  109,  110,
      109,  109,  109,  111,  216,  109,  109,  249,  109,  109,
      109,  218,  109,  219,  109,  113,  216,  301,  310,  113,
      109,  109,  220,  236,  313,  455,  262,  221,  455,  262,
      296,  296,  377,  301,  222,  236,  218,  379,  219,  456,
      109,  114,  109,  238,  610,  239,  298,  220, 1149,  282,

      309,  586,  221,  223,  589,  299,  300,  589,  238,  222,
      239,  305,  306,  283,  305,  610,  240,  109,  109,  109,
      109,  109,  109,  110,  109,  109,  109,  111,  223,  109,
      109,  240,  109,  109,  109,  241,  109,  274,  109,  113,
      243,  284,  244,  113,  109,  109,  243,  255,  244,  298,
      241,  623,  590,  587,  307, 1150,  256,  257,  299,  300,
      275,  315,  518,  245,  109,  114,  109,  517,  310,  245,
      258,  395,  395,  395,  395, 1148,  557,  522,  396,  275,
      522,  559,  246,  429,  429,  429,  429,  523,  246,  259,
      430,  109,  109,  109,  109,  117,  117,  118,  117,  117,

      117,  117,  117,  119,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  117,  121,
      117,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  117,  117,  117,  117,  120,
      120,  122,  123,  124,  123,  123,  122,  122,  122,  125,
      122,  122,  122,  122,  122,  122,  122,  122,  126,  122,
      122,  122,  122,  127,  122,  122,  122,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  122,  129,  122,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  122,  122,  122,  130,  128,  128,  131,  131,  132,
      131,  131,  131,  133,  274,  131,  131,  255,  131,  131,
      131,  274,  131,  274,  131,  135,  256,  257,  282,  135,
      136,  131,  286,  509,  286, 1146,  509,  275,  510,  684,
      258,  685,  283,  287,  276,  287,  276,  623,  576,  499,
      131,  137,  131,  316,  646,  288,  275,  288, 1135,  259,

      500,  562,  317,  276,  302,  276,  564,  302,  369,  370,
      284,  315,  410,  370,  289,  575,  289,  131,  131,  131,
      131,  131,  131,  132,  131,  131,  131,  133,  303,  131,
      131,  501,  131,  131,  131,  370,  131,  597,  131,  135,
      597, 1153,  370,  135,  136,  131,  370,  304,  987,  318,
      535,  314,  319,  314,  320,  533,  703, 1144,  357,  534,
      301,  357,  315,  599,  131,  137,  131,  604,  370,  380,
      381,  357,  380,  314,  357,  314,  314,  301,  314,  314,
      314,  322,  315,  704,  315,  599,  600,  601,  615,  604,
     1141,  131,  131,  131,  131,  138,  138,  139,  138,  138,

      138,  140, 1139,  138,  138,  346,  138,  138,  138,  616,
      138,  301,  138,  142,  382,  401,  402,  142,  143,  144,
      402,  528,  529,  314,  528,  314,  314,  706,  314,  314,
      314,  301,  364,  301,  315,  364,  586,  986,  138,  145,
      138,  362,  402,  363,  363,  363,  707,  365, 1153,  315,
      537, 1153,  987,  356,  538,  346,  392,  393, 1153,  392,
      539,  987,  540,  605,  530,  138,  138,  138,  138,  138,
      138,  139,  138,  138,  138,  140,  357,  138,  138,  357,
      138,  138,  138,  301,  138,  605,  138,  142,  587,  604,
      987,  142,  143,  144,  383,  383,  383,  383,  301, 1153,

      402,  394,  356,  604,  402,  301,  383,  383,  383,  383,
      384,  604,  138,  145,  138,  385,  383,  383,  383,  383,
      360,  361,  384,  360, 1138,  604,  402,  385,  478,  478,
      478,  478,  384,  360,  361,  479,  360,  385,  391,  138,
      138,  138,  138,  122,  146,  147,  146,  146,  122,  122,
      122,  148,  122,  122,  122,  122,  122,  122,  122,  122,
      149,  122,  122,  122,  122,  150,  122,  122,  122,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  122,  129,  122,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  122,  122,  122,  152,  151,  151,  153,
      153,  154,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  153,  156,  153,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  153,
      153,  153,  153,  155,  155,  165,  165,  166,  165,  165,

      165,  167,  987,  165,  165,  635,  165,  165,  165,  635,
      165,  377,  165,  169,  691,  377,  379,  169,  165,  165,
      379,  419,  419,  419,  419, 1137,  358,  633,  692,  358,
      633,  635,  316,  419,  419,  419,  419,  420,  165,  170,
      165,  359,  421,  433,  434,  411,  433,  356, 1133,  420,
      315,  315,  438,  439,  421,  438,  413,  414, 1132,  443,
      444,  414,  443,  411,  725,  165,  165,  165,  165,  165,
      165,  166,  165,  165,  165,  167,  455,  165,  165,  455,
      165,  165,  165,  414,  165,  725,  165,  169,  435, 1153,
      456,  169,  165,  165,  602,  302,  356,  440,  302,  301,

     1153,  414, 1130,  987,  445,  414,  603, 1153,  426,  419,
      419,  426,  165,  170,  165,  602,  541,  557,  427,  303,
      652,  537,  559,  652,  420,  538, 1129,  414,  603,  421,
      427,  539,  627,  540,  628,  628,  628, 1128,  304,  165,
      165,  165,  165,  171,  171,   88,  171,  171,  171,  171,
      171,  172,  171,  171,  171,  171,  171,  171,  173,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  171,  171,  171,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  171,  171,  171,  171,  174,  174,  175,
      175,  176,  175,  175,  175,  175,  175,  177,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  175,  179,  175,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  175,
      175,  175,  175,  178,  178,  180,  181,  182,  181,  181,

      180,  180,  180,  183,  180,  180,  180,  180,  180,  180,
      180,  180,  184,  180,  180,  180,  180,  185,  180,  180,
      180,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  180,  187,
      180,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  180,  180,  180,  188,  186,
      186,  189,  189,  190,  189,  189,  189,  189,  189,  191,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  189,  193,  189,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  189,  189,  189,  189,  192,  192,   88,   88,  194,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
       88,  196,   88,  195,  195,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,   88,   88,   88,
       88,  195,  195,  200,  200,  201,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  200,  203,  200,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  200,  200,  200,  200,  202,  202,   88,

       88,  209,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,   88,  211,   88,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,   88,
       88,   88,   88,  210,  210,  227,  228,  229,  227,  228,
      227,  227,  227,  227,  227,  227,  230,  227,  227,  227,
      227,  371,  372,  227,  371,  987,  937,  227,  227,  227,

      227,  449,  450,  938, 1153,  450,  450, 1153,  370,  450,
      371,  372,  370,  371,  383,  383,  383,  383,  227,  232,
      227,  386,  459,  459,  459,  459,  623,  557,  450,  460,
      384,  450,  559,  562,  370,  385,  373,  987,  564, 1123,
      461,  461,  461,  462,  619,  227,  227,  227,  227,  227,
      227,  227,  228,  229,  227,  228,  227,  227,  227,  227,
      227,  227,  230,  227,  227,  227,  227,  403,  404,  227,
      403,  604, 1127,  227,  227,  227,  227,  305,  306,  620,
      305,  415, 1126, 1153,  402,  644,  388,  455,  402,  644,
      455,  604, 1153,  414,  227,  232,  227,  414,  411,  411,

      362,  456,  363,  363,  363, 1125,  621, 1083,  315, 1121,
      402,  644,  405,  604,  380,  381,  411,  380, 1120,  414,
      307,  227,  227,  227,  227,  227,  227,  250,  250,  251,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      250,  253,  250,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  250,  250,  250,

      250,  252,  252,  263,  263,  264,  263,  263,  263,  263,
      263,  265,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  263,  267,  263,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  263,  263,  263,  263,  266,  266,  268,
      268,  269,  268,  268,  268,  268,  268,  270,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  268,  268,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  268,  272,  268,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  268,
      268,  268,  268,  271,  271,  277,  277,  278,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  277,  280,

      277,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  277,  277,  277,  277,  279,
      279,  290,  290,  291,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      921,  942,  623,  290,  290,  290,  290,  467,  467,  467,
      467,  389,  389,  389,  389,  943,  922, 1143,  386,  467,
      467,  467,  467,  468,  290,  293,  290,  384,  469,  562,
      464,  465,  385,  464,  564,  468,  395,  395,  395,  395,
      469,  735, 1119,  396,  475,  476,  589,  475, 1118,  589,

     1117,  290,  290,  290,  290,  290,  290,  291,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290, 1116,  466,  735,  290,  290,  290,
      290,  360,  361,  388,  360,  467,  467,  467,  467,  477,
      484,  485,  318,  484,  314,  319,  314,  320,  290,  293,
      290,  468, 1115,  735,  617,  315,  469,  617, 1114,  721,
      509,  489,  490,  509,  489,  510,  416,  417,  623,  416,
      522, 1153, 1113,  522,  322,  290,  290,  290,  290,  323,
      523,  721, 1153,  414,  649,  486, 1152,  414,  649, 1153,
      369,  370,  324,  392,  393,  370,  392,  623,  419,  419,

      419,  419,  325,  326,  301,  422,  491,  327,  328,  414,
      649,  418,  329,  330,  420,  331,  332,  370,  455,  421,
      623,  455,  734,  325,  326,  734, 1112, 1147,  327,  328,
      493,  494,  456,  493,  329,  330,  333,  334,  331,  332,
      504,  505,  658,  504,  519,  520,  658,  519,  301,  335,
      335,  335,  335,  425,  425,  425,  425,  724,  336,  604,
      422,  451,  452, 1111,  451,  335,  335,  337,  658,  420,
      424,  729, 1110, 1108,  421,  495,  730, 1153,  450,  724,
      604, 1153,  450,  503, 1153,  506,  339,  525,  526,  521,
      525, 1153,  729,  340,  341,  542,  543,  730,  542, 1104,

     1103, 1102,  546,  547,  450,  546,  453,  550,  551,  728,
      550, 1101,  342, 1099,  343,  344,  301,  335,  335,  335,
      335,  467,  467,  467,  467,  424,  336,  617,  470, 1098,
      617,  728,  527,  335,  335,  339, 1097,  468,  305,  306,
      544,  305,  469,  473,  473,  473,  473,  548,  403,  404,
      470,  403,  552, 1096,  337,  818,  348,  553,  554,  468,
      553,  349,  350,  606,  469,  617,  606,  633,  617,  617,
      633, 1095,  617,  502,  502,  502,  502,  818, 1094, 1093,
      342,  307,  343,  344,  301,  351,  607, 1092,  351,  502,
      502,  503,  633,  472, 1091,  633,  606,  352,  352,  606,

      353,  354,  555,  811,  355,  355,  356, 1090,  623,  303,
      502,  314,  623,  314,  314,  472,  314,  314,  314,  607,
     1085,  608,  315,  625,  811,  624,  358,  499,  304,  358,
      364,  358,  959,  364,  358,  609, 1084,  617,  500,  502,
      617,  626,  608,  346,  619,  365,  365,  356, 1153,  370,
     1081,  356,  356,  370,  959,  356, 1080,  609,  301,  406,
      406,  306,  406,  406,  406,  407, 1079,  406,  406,  501,
      406,  406,  406, 1078,  406,  370,  406,  409,  815,  620,
      623,  409,  406,  410,  314,  800,  314,  314,  800,  314,
      314,  314, 1077,  604,  364,  315,  356,  364, 1076,  815,

      356,  356,  406,  409,  406,  364,  621,  810,  364,  365,
      810, 1075,  369,  370,  604,  356,  346,  370,  416,  417,
      626,  416,  629,  630,  727,  629,  356,  727, 1074,  406,
      406,  406,  406,  335,  335,  335,  335,  631,  885,  370,
     1073,  433,  434,  632,  433,  617,  315,  607,  617,  335,
      335,  583,  636,  383,  383,  383,  383, 1072,  604,  885,
      389,  389,  389,  389,  356,  438,  439,  386,  438,  384,
      335, 1025, 1071, 1070,  385,  356,  384,  340,  341,  604,
     1069,  385,  640,  640,  640,  640, 1068, 1067, 1153, 1153,
     1153, 1153,  632, 1025,  737, 1153,  342, 1066,  343,  344,

      335,  335,  335,  335, 1153,  383,  383,  383,  383, 1153,
     1065, 1064,  383,  383,  383,  383,  335,  335,  335, 1063,
     1062,  384,  389,  389,  389,  389,  385,  391,  384,  386,
      401,  402,  388,  385,  391,  402,  529,  583,  384,  395,
      395,  395,  395,  385,  340,  341,  396, 1153, 1153, 1153,
     1153, 1060,  443,  444, 1153,  443, 1059,  402,  451,  452,
     1153,  451, 1058,  342, 1057,  343,  344,  591,  464,  465,
      591,  464,  591,  591,  591,  591,  591,  591,  591,  592,
      591,  593,  591,  593,  594,  591, 1056, 1055, 1054,  591,
      591,  591,  596, 1053,  388, 1153,  402,  449,  450, 1052,

      402, 1051,  450,  652,  401,  402,  652,  411, 1049,  402,
      591,  591,  591,  427,  475,  476, 1153,  475,  413,  414,
      987, 1048,  402,  414,  450,  411,  652, 1153,  414,  652,
      787,  402,  414,  787, 1153, 1047,  427,  591,  591,  591,
      591,  591,  591,  617,  645,  414,  617, 1046, 1045, 1153,
     1153, 1153, 1153,  734,  414, 1044,  734,  411,  419,  419,
      419,  419, 1043, 1042, 1041, 1153, 1153, 1153,  413,  414,
     1040, 1153,  450,  414,  420,  411,  450, 1038, 1037,  421,
      425,  425,  425,  425, 1036, 1033, 1153,  422,  788, 1032,
     1153, 1153, 1153, 1153, 1027,  414,  420, 1153,  450, 1026,

      887,  421,  429,  429,  429,  429, 1153, 1024,  650,  430,
      617, 1153, 1153,  617, 1153, 1153,  351,  484,  485,  351,
      484, 1023, 1022,  426,  419,  419,  426,  617,  352,  352,
      617,  353,  354,  427, 1021,  355,  355,  356,  727,  420,
      303,  727,  489,  490,  421,  489, 1020,  425,  425,  425,
      425, 1019,  424,  623,  422,  426,  419,  419,  426,  304,
     1018,  607, 1153,  420,  740,  427,  493,  494,  421,  493,
     1017,  420,  429,  429,  429,  429,  421,  504,  505,  430,
      504,  821, 1153, 1153, 1153, 1153,  356,  406,  406, 1153,
      406,  406,  406,  646,  800,  406,  406,  800,  406,  406,

      406, 1016,  406,  925,  647,  409,  926, 1015, 1014,  409,
      406,  410,  426,  419,  419,  426,  449,  450, 1013,  424,
     1012,  450,  427,  459,  459,  459,  459, 1011,  420, 1010,
      406,  409,  406,  421,  459,  459,  459,  459, 1009,  519,
      520,  460,  519,  450,  462, 1008, 1007,  467,  467,  467,
      467, 1006,  461,  461,  461,  462,  659,  406,  406,  406,
      406,  406,  406,  468,  406,  406,  406,  646,  469,  406,
      406, 1004,  406,  406,  406, 1003,  406, 1005,  406,  409,
     1005, 1000,  999,  409,  406,  406,  998,  997,  996,  459,
      459,  459,  459,  995,  525,  526,  460,  525,  994,  993,

      467,  467,  467,  467,  406,  409,  406,  461,  461,  461,
      462,  542,  543,  992,  542,  991,  468,  459,  459,  459,
      459,  469,  546,  547,  460,  546,  528,  529,  987,  528,
      990,  406,  406,  406,  406,  662,  662,  662,  462,  473,
      473,  473,  473,  989,  988,  985,  470, 1153, 1153, 1153,
     1153,  984,  983,  982, 1153,  468,  550,  551, 1100,  550,
      469, 1100,  981, 1153,  478,  478,  478,  478, 1153,  530,
      980,  479,  473,  473,  473,  473,  979,  978,  977,  470,
      467,  467,  467,  467,  478,  478,  478,  478,  468,  553,
      554,  479,  553,  469,  976,  974,  468, 1153, 1153, 1153,

     1153,  469,  973,  972, 1153,  734,  629,  630,  734,  629,
      969,  472,  735,  627,  968,  628,  628,  628,  963, 1153,
      962,  742,  617,  816,  817,  617,  816,  632,  629,  630,
      958,  629,  617,  617,  957,  617,  617,  369,  635,  717,
      956,  955,  635,  743,  472,  591,  817,  735,  591,  632,
      591,  591,  591,  591,  591,  591,  591,  592,  591,  593,
      591,  593,  718,  591,  635,  623,  954,  591,  591,  591,
      596,  741,  629,  630,  735,  629,  632,  953,  617,  629,
      630,  617,  629,  617,  952,  951,  617,  744,  591,  719,
      591,  892,  950,  632,  743,  964,  315,  949,  632,  948,

      632, 1153,  635,  369,  370,  947,  635,  946,  370,  747,
      747,  747,  747,  945,  944,  591,  591,  591,  591,  591,
      591,  749,  749,  749,  749,  941,  401,  644,  635, 1122,
      370,  644,  748, 1153,  644,  401,  402,  940,  644, 1086,
      402,  745,  632,  411,  748,  449,  658,  939, 1131,  632,
      658, 1131, 1153,  644,  413,  649,  936,  935,  934,  649,
      644,  411,  402, 1153,  649,  933, 1153,  658,  649,  931,
     1153,  658,  658,  751,  406,  406,  930,  406,  406,  406,
      646,  649,  406,  406,  929,  406,  406,  406,  411,  406,
      649,  406,  753,  658,  928,  927,  753,  406,  406,  413,

      414,  924,  449,  450,  414,  617,  411,  450,  617,  617,
      923,  920,  617,  459,  459,  459,  459,  406,  753,  406,
      760,  763,  763,  763,  763,  919,  414,  617,  460,  450,
      617,  761,  761,  761,  462,  617, 1140,  754,  617, 1140,
      759,  918,  462,  917,  406,  406,  406,  406,  459,  459,
      459,  459,  623,  916,  915,  460,  459,  459,  459,  459,
      318, 1134,  314,  460,  314,  809,  662,  662,  662,  462,
      623,  914,  966,  315,  662,  662,  662,  462,  623,  629,
      630,  913,  629,  629,  630,  823,  629,  629,  630,  824,
      629,  369,  370,  912,  742,  911,  370,  910,  825,  909,

      632,  908,  744,  907,  632,  401,  402,  903,  632,  902,
      402,  315,  747,  747,  747,  747,  901,  898,  370,  749,
      749,  749,  749,  763,  763,  763,  763,  897,  886,  893,
      460,  886,  402,  826,  411,  748,  617,  889,  617,  617,
      889,  617,  748,  891,  462,  413,  414,  829,  890,  632,
      414,  887,  411,  632,  884,  883,  882,  632,  406,  406,
      817,  406,  406,  406,  646, 1142,  406,  406, 1142,  406,
      406,  406,  414,  406, 1145,  647,  753, 1145,  449,  450,
      753,  406,  410,  450,  717,  880, 1028,  830,  459,  459,
      459,  459,  879,  878,  578,  760, 1107,  459,  459,  459,

      459,  406,  753,  406,  760,  450,  761,  761,  761,  462,
     1142, 1145,  877, 1142, 1145,  761,  761,  761,  462, 1142,
      834,  318, 1142,  314,  617,  314,  809,  617,  406,  406,
      406,  406,  406,  406,  315,  406,  406,  406,  646,  617,
      406,  406,  617,  406,  406,  406,  876,  406, 1151,  406,
      753, 1151,  846,  847,  753,  406,  406,  848,  875,  874,
      849,  850,  623,  629,  630,  851,  629,  623,  852,  853,
      873,  854,  872,  871,  894,  406,  753,  406,  742,  870,
      369,  370,  623,  411,  632,  370,  401,  402,  449,  450,
      869,  402,  868,  450,  413,  414,  867,  895,  866,  414,

      865,  411,  406,  406,  406,  406,  961,  370,  889,  961,
      864,  889,  863,  402,  896,  450,  459,  459,  459,  459,
      899,  414,  904,  760,  617,  369,  370,  617,  900,  887,
      370,  817,  862,  632,  905,  905,  905,  462,  401,  402,
      861,  961,  411,  402,  961,  449,  450,  860,  617,  859,
      450,  617,  370,  413,  414,  858,  967,  857,  414, 1082,
      411,  856, 1082,  855,  887,  402,  845,  623,  844,  970,
      843,  965,  450,  842,  617,  841,  975,  617,  840,  839,
      414,  838, 1083,  482,  971,  459,  459,  459,  459,  837,
      836,  623,  760,  459,  459,  459,  459,  833, 1087,  306,

      760, 1087,  832,  905,  905,  905,  462,  831,  828, 1029,
      411,  905,  905,  905,  462,  369,  370,  623,  401,  402,
      370,  413,  414,  402, 1030,  709,  414,  827,  411,  449,
      450,  623,  617,  709,  450,  617,  709,  709,  369,  370,
      822, 1088,  370,  370,  820,  402,  401,  402,  414,  449,
      450,  402, 1087,  306,  450, 1087,  450,  819, 1106,  617,
     1031, 1106,  617, 1034,  607,  370, 1035,  411, 1106,  617,
      813, 1106,  617,  402, 1039,  623,  450,  617,  413,  414,
      617, 1083,  812,  414,  807,  411,  305,  306,  806,  305,
      805, 1083,  804, 1089,  736,  307,  736,  736,  736,  578,

      802,  801,  623,  707,  739,  414,  739,  739,  739,  799,
      709,  798,  623,  797,  796, 1124,  795, 1109,  709,  794,
      623,  709,  709,  736,  793,  736,  736,  736,  739, 1088,
      739,  739,  739, 1136,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  157,

      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  197,  197,

      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  233,  233,  233,  233,

      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  273,  273,  273,  273,  273,  273,

      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  292,  292,  292,  292,  292,  292,  292,

      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  308,  308,  792,  308,  308,  308,  308,  308,

      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  312,  791,  790,  789,  786,
      785,  784,  782,  781,  780,  779,  778,  777,  776,  775,
      312,  774,  312,  312,  312,  773,  771,  770,  769,  312,
      312,  314,  768,  314,  314,  767,  314,  482,  765,  764,
      314,  314,  758,  314,  314,  314,  757,  756,  755,  391,
      314,  321,  750,  321,  321,  321,  321,  746,  321,  733,
      732,  731,  321,  321,  321,  321,  321,  321,  723,  722,
      720, 1153,  321,  338,  338,  338,  315,  315,  315,  717,

      586,  338,  715,  714,  713,  712,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  578,  338,  338,  338,  345,
      710,  345,  345,  708,  345,  705,  702,  701,  345,  345,
      562,  345,  345,  345,  700,  699,  557,  698,  345,  347,
      347,  347,  697,  696,  695,  694,  693,  347,  690,  689,
      688,  687,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  686,  347,  347,  347,  366,  366,  683,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  368,  531,

      682,  681,  680,  679,  368,  678,  368,  368,  368,  368,
      368,  512,  512,  368,  368,  368,  368,  368,  368,  677,
      676,  674,  506,  368,  368,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  376,  501,
      376,  376,  376,  673,  672,  671,  670,  376,  376,  378,
      488,  378,  378,  669,  482,  667,  378,  482,  378,  378,
      378,  665,  468,  664,  661,  378,  378,  387,  387,  387,
      387,  447,  656,  387,  442,  655,  437,  654,  420,  646,

      646,  387,  646,  399,  387,  391,  641,  384,  387,  638,
      387,  387,  387,  377,  637,  375,  387,  387,  387,  390,
      390,  390,  390,  367,  618,  616,  613,  612,  611,  598,
      315,  315,  586,  390,  309,  390,  390,  390,  584,  301,
      390,  581,  390,  390,  390,  579,  578,  575,  573,  390,
      390,  397,  397,  397,  397,  572,  570,  397,  568,  567,
      565,  560,  531,  517,  516,  515,  513,  512,  508,  501,
      497,  488,  397,  482,  397,  397,  397,  468,  447,  442,
      437,  397,  397,  398,  398,  420,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,

      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  400,  399,  399,  384,
      375,  367,  400,  301,  400,  400,  400,  400,  400, 1153,
      116,  400,  400,  400,  400,  400,  400,  116, 1153, 1153,
     1153,  400,  400,  408,  408, 1153,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  412,  412, 1153, 1153,
     1153, 1153, 1153,  412, 1153,  412,  412,  412,  412,  412,
     1153,  412,  412,  412,  412,  412,  412,  412, 1153, 1153,

     1153, 1153,  412,  412,  423,  423,  423,  423, 1153, 1153,
      423, 1153, 1153, 1153, 1153, 1153, 1153, 1153,  423, 1153,
     1153,  423, 1153, 1153, 1153,  423, 1153,  423,  423,  423,
     1153, 1153, 1153,  423,  423,  423,  428,  428,  428,  428,
     1153, 1153, 1153, 1153,  428, 1153, 1153, 1153, 1153, 1153,
      428, 1153,  428,  428, 1153, 1153, 1153,  428, 1153,  428,
      428,  428, 1153, 1153, 1153, 1153,  428,  428,  431,  431,
      431,  431, 1153, 1153,  431, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,  431,
     1153,  431,  431,  431, 1153, 1153, 1153, 1153,  431,  431,

      432, 1153, 1153,  432, 1153, 1153, 1153, 1153,  432, 1153,
      432,  432,  432, 1153, 1153, 1153, 1153,  432,  432,  436,
      436, 1153,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  441,  441, 1153,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  446,  446, 1153,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,

      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  448, 1153,
     1153, 1153, 1153, 1153,  448, 1153,  448,  448,  448,  448,
      448, 1153, 1153,  448,  448,  448,  448,  448,  448, 1153,
     1153, 1153, 1153,  448,  448,  454, 1153,  454,  454,  454,
     1153, 1153, 1153, 1153,  454,  454,  457, 1153, 1153,  457,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,  457, 1153,
     1153, 1153,  457, 1153, 1153, 1153, 1153,  457, 1153,  457,
      457,  457, 1153, 1153, 1153, 1153,  457,  457,  458, 1153,
      458,  458,  458, 1153, 1153, 1153, 1153,  458,  458,  463,

      463,  463,  463, 1153, 1153,  463, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153,  463,  463, 1153, 1153, 1153,
      463, 1153,  463,  463,  463, 1153, 1153, 1153, 1153,  463,
      463,  471,  471,  471,  471, 1153, 1153,  471, 1153, 1153,
     1153, 1153, 1153, 1153, 1153,  471, 1153, 1153,  471, 1153,
     1153, 1153,  471, 1153,  471,  471,  471, 1153, 1153, 1153,
      471,  471,  471,  474,  474,  474,  474, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153,  474, 1153,  474,
      474, 1153, 1153, 1153,  474, 1153,  474,  474,  474, 1153,
     1153, 1153, 1153,  474,  474,  480,  480,  480,  480, 1153,

     1153,  480, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153,  480, 1153,  480,  480,
      480, 1153, 1153, 1153, 1153,  480,  480,  481, 1153,  481,
      481,  481, 1153, 1153, 1153, 1153,  481,  481,  483, 1153,
      483, 1153, 1153, 1153, 1153,  483, 1153,  483,  483,  483,
     1153, 1153, 1153, 1153,  483,  483,  487,  487, 1153,  487,
     1153, 1153, 1153, 1153,  487, 1153,  487,  487,  487, 1153,
     1153, 1153, 1153,  487,  487,  492,  492, 1153,  492,  492,
      492,  492,  492,  492,  492,  492, 1153,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492, 1153,  492,

      492,  492,  492,  492,  492,  492,  492,  492,  496, 1153,
     1153,  496, 1153, 1153, 1153, 1153,  496, 1153,  496,  496,
      496, 1153, 1153, 1153, 1153,  496,  496,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498, 1153,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      500,  500, 1153,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500, 1153,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  502,  502, 1153,  502, 1153,  502,  502,

      502, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153,  502,  502,  502, 1153,  502,  502, 1153, 1153, 1153,
     1153, 1153,  502,  507, 1153, 1153,  507, 1153, 1153, 1153,
     1153,  507, 1153,  507,  507,  507, 1153, 1153, 1153, 1153,
      507,  507,  511,  511, 1153,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  514,  514, 1153,  514, 1153,
      514,  514,  514,  514,  514,  514, 1153,  514,  514,  514,
      514, 1153,  514,  514,  514,  514, 1153,  514, 1153,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  524, 1153,
     1153,  524, 1153, 1153, 1153, 1153,  524, 1153, 1153, 1153,
     1153,  524,  524, 1153,  524, 1153, 1153, 1153, 1153,  524,
     1153,  524,  524,  524,  532,  532, 1153,  532, 1153,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532, 1153,  532, 1153,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  536,  536, 1153,
      536, 1153,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536, 1153,  536,
     1153,  536,  536,  536,  536,  536,  536,  536,  536,  536,

      545, 1153, 1153,  545, 1153, 1153, 1153, 1153,  545, 1153,
      545,  545,  545, 1153, 1153, 1153, 1153,  545,  545,  549,
      549, 1153,  549,  549,  549,  549,  549,  549, 1153, 1153,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
     1153,  549, 1153,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  556, 1153,  556,  556,  556, 1153, 1153, 1153,
     1153,  556,  556,  558, 1153,  558,  558, 1153, 1153, 1153,
      558, 1153,  558,  558,  558, 1153, 1153, 1153, 1153,  558,
      558,  561, 1153,  561,  561,  561, 1153, 1153, 1153, 1153,
      561,  561,  563, 1153,  563,  563, 1153, 1153, 1153,  563,

     1153,  563,  563,  563, 1153, 1153, 1153, 1153,  563,  563,
      566,  566, 1153,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566, 1153,  566, 1153,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  569, 1153, 1153,  569, 1153, 1153, 1153,
     1153,  569, 1153,  569,  569,  569, 1153, 1153, 1153, 1153,
      569,  569,  571,  571, 1153,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571, 1153,  571,  571,  571,
      571,  571,  571,  571,  571, 1153,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  574,  574, 1153,  574,  574,

      574,  574,  574,  574,  574,  574, 1153,  574,  574,  574,
      574,  574,  574,  574,  574,  574, 1153,  574, 1153,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  577, 1153,
      577,  577,  577,  577,  577, 1153, 1153, 1153,  577, 1153,
      577,  577,  577, 1153, 1153, 1153, 1153,  577,  577,  580,
      580, 1153,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580, 1153,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  582,  582,  582,  582,  582,  582,  582,  582,
      582, 1153, 1153,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  338,  338,  338, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,  338,  338,
      338,  338,  338,  338,  338,  338,  338, 1153,  338,  338,
      308,  308, 1153,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  312, 1153,  312,  312,  312, 1153, 1153,
     1153, 1153,  312,  312,  585,  585, 1153, 1153, 1153,  585,
     1153,  585,  585,  585, 1153, 1153, 1153, 1153,  585,  585,

      314, 1153,  314,  314, 1153,  314, 1153, 1153, 1153,  314,
      314, 1153,  314,  314,  314,  588, 1153, 1153,  588, 1153,
     1153, 1153, 1153,  588, 1153,  588,  588,  588,  595, 1153,
     1153,  595, 1153,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  614, 1153,  614,  614,  614, 1153, 1153, 1153,  614,
      622, 1153, 1153, 1153, 1153, 1153, 1153, 1153,  622, 1153,
      622,  622,  622,  345, 1153,  345,  345, 1153,  345, 1153,
     1153, 1153,  345,  345, 1153,  345,  345,  345,  347, 1153,

     1153,  347, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,  347,
      347,  347,  347,  347,  366,  366, 1153,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  368, 1153, 1153,
     1153, 1153, 1153,  368, 1153,  368,  368,  368,  368,  368,
     1153, 1153,  368,  368,  368,  368,  368,  368, 1153, 1153,
     1153, 1153,  368,  368,  634, 1153, 1153, 1153, 1153, 1153,
      634, 1153,  634, 1153,  634,  634,  634, 1153, 1153,  634,

      634,  634,  634,  634,  634, 1153, 1153, 1153, 1153,  634,
      634,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  378, 1153,  378,  378, 1153, 1153,
     1153,  378, 1153,  378,  378,  378, 1153, 1153, 1153, 1153,
      378,  378,  376, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153,  376, 1153,  376,
      376,  376, 1153, 1153, 1153, 1153,  376,  376,  387,  387,
      387,  387, 1153, 1153,  387, 1153, 1153, 1153, 1153, 1153,

     1153, 1153,  387, 1153, 1153,  387, 1153, 1153, 1153,  387,
     1153,  387,  387,  387, 1153, 1153, 1153,  387,  387,  387,
      390,  390,  390,  390, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153,  390, 1153,  390,  390,  390, 1153,
     1153,  390, 1153,  390,  390,  390, 1153, 1153, 1153, 1153,
      390,  390,  397,  397,  397,  397, 1153, 1153,  397, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153,  397, 1153,  397,  397,  397, 1153, 1153,
     1153, 1153,  397,  397,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639, 1153,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  642, 1153,  642,
     1153, 1153,  642, 1153,  642,  642,  642, 1153, 1153, 1153,
     1153,  642,  642,  398,  398, 1153,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  400, 1153, 1153, 1153,
     1153, 1153,  400, 1153,  400,  400,  400,  400,  400, 1153,
     1153,  400,  400,  400,  400,  400,  400, 1153, 1153, 1153,
     1153,  400,  400,  643, 1153, 1153, 1153, 1153, 1153,  643,

     1153,  643, 1153,  643,  643,  643, 1153, 1153,  643,  643,
      643,  643,  643,  643, 1153, 1153, 1153, 1153,  643,  643,
      406,  406, 1153,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  408,  408, 1153,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  412,  412, 1153, 1153,
     1153, 1153, 1153,  412, 1153,  412,  412,  412,  412,  412,

     1153,  412,  412,  412,  412,  412,  412,  412, 1153, 1153,
     1153, 1153,  412,  412,  648, 1153, 1153, 1153, 1153, 1153,
      648, 1153,  648, 1153,  648,  648,  648, 1153, 1153,  648,
      648,  648,  648,  648,  648, 1153, 1153, 1153, 1153,  648,
      648,  423,  423,  423,  423, 1153, 1153,  423, 1153, 1153,
     1153, 1153, 1153, 1153, 1153,  423, 1153, 1153,  423, 1153,
     1153, 1153,  423, 1153,  423,  423,  423, 1153, 1153, 1153,
      423,  423,  423,  428,  428,  428,  428, 1153, 1153, 1153,
     1153,  428, 1153, 1153, 1153, 1153, 1153,  428, 1153,  428,
      428, 1153, 1153, 1153,  428, 1153,  428,  428,  428, 1153,

     1153, 1153, 1153,  428,  428,  431,  431,  431,  431, 1153,
     1153,  431, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153,  431, 1153,  431,  431,
      431, 1153, 1153, 1153, 1153,  431,  431,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651, 1153,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      653, 1153, 1153,  653, 1153, 1153, 1153, 1153,  653, 1153,
     1153, 1153, 1153, 1153, 1153, 1153,  653, 1153, 1153, 1153,
     1153,  653, 1153,  653,  653,  653, 1153, 1153, 1153, 1153,

      653,  653,  432, 1153, 1153,  432, 1153, 1153, 1153, 1153,
      432, 1153,  432,  432,  432, 1153, 1153, 1153, 1153,  432,
      432,  436,  436, 1153,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  441,  441, 1153,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  446,  446, 1153,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,

      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      448, 1153, 1153, 1153, 1153, 1153,  448, 1153,  448,  448,
      448,  448,  448, 1153, 1153,  448,  448,  448,  448,  448,
      448, 1153, 1153, 1153, 1153,  448,  448,  657, 1153, 1153,
     1153, 1153, 1153,  657, 1153,  657, 1153,  657,  657,  657,
     1153, 1153,  657,  657,  657,  657,  657,  657, 1153, 1153,
     1153, 1153,  657,  657,  457, 1153, 1153,  457, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153,  457, 1153, 1153, 1153,
      457, 1153, 1153, 1153, 1153,  457, 1153,  457,  457,  457,

     1153, 1153, 1153, 1153,  457,  457,  463,  463,  463,  463,
     1153, 1153,  463, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153,  463,  463, 1153, 1153, 1153,  463, 1153,  463,
      463,  463, 1153, 1153, 1153, 1153,  463,  463,  660, 1153,
      660,  660,  660, 1153, 1153, 1153, 1153,  660,  660,  663,
      663,  663,  663, 1153, 1153,  663, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153,  663,  663, 1153, 1153, 1153,
      663, 1153,  663,  663,  663, 1153, 1153, 1153, 1153,  663,
      663,  471,  471,  471,  471, 1153, 1153,  471, 1153, 1153,
     1153, 1153, 1153, 1153, 1153,  471, 1153, 1153,  471, 1153,

     1153, 1153,  471, 1153,  471,  471,  471, 1153, 1153, 1153,
      471,  471,  471,  474,  474,  474,  474, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153,  474, 1153,  474,
      474, 1153, 1153, 1153,  474, 1153,  474,  474,  474, 1153,
     1153, 1153, 1153,  474,  474,  480,  480,  480,  480, 1153,
     1153,  480, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153,  480, 1153,  480,  480,
      480, 1153, 1153, 1153, 1153,  480,  480,  666, 1153, 1153,
     1153, 1153,  666, 1153,  666,  666,  666, 1153, 1153, 1153,
     1153,  666,  666,  483, 1153,  483, 1153, 1153, 1153, 1153,

      483, 1153,  483,  483,  483, 1153, 1153, 1153, 1153,  483,
      483,  668, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153,  668, 1153,  668,  668,
      668, 1153, 1153, 1153, 1153,  668,  668,  487,  487, 1153,
      487, 1153, 1153, 1153, 1153,  487, 1153,  487,  487,  487,
     1153, 1153, 1153, 1153,  487,  487,  492,  492, 1153,  492,
      492,  492,  492,  492,  492,  492,  492, 1153,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492, 1153,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  496,
     1153, 1153,  496, 1153, 1153, 1153, 1153,  496, 1153,  496,

      496,  496, 1153, 1153, 1153, 1153,  496,  496,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498, 1153,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  500,  500, 1153,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500, 1153,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  675, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,  675,
     1153,  675,  675,  675, 1153, 1153, 1153, 1153,  675,  675,

      507, 1153, 1153,  507, 1153, 1153, 1153, 1153,  507, 1153,
      507,  507,  507, 1153, 1153, 1153, 1153,  507,  507,  511,
      511, 1153,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  514,  514, 1153,  514, 1153,  514,  514,  514,
      514,  514,  514, 1153,  514,  514,  514,  514, 1153,  514,
      514,  514,  514, 1153,  514, 1153,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  524, 1153, 1153,  524, 1153,
     1153, 1153, 1153,  524, 1153, 1153, 1153, 1153,  524,  524,

     1153,  524, 1153, 1153, 1153, 1153,  524, 1153,  524,  524,
      524,  532,  532, 1153,  532, 1153,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532, 1153,  532, 1153,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  536,  536, 1153,  536, 1153,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536, 1153,  536, 1153,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  545, 1153, 1153,
      545, 1153, 1153, 1153, 1153,  545, 1153,  545,  545,  545,
     1153, 1153, 1153, 1153,  545,  545,  549,  549, 1153,  549,

      549,  549,  549,  549,  549, 1153, 1153,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549, 1153,  549, 1153,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  558,
     1153,  558,  558, 1153, 1153, 1153,  558, 1153,  558,  558,
      558, 1153, 1153, 1153, 1153,  558,  558,  556, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153,  556, 1153,  556,  556,  556, 1153, 1153, 1153,
     1153,  556,  556,  563, 1153,  563,  563, 1153, 1153, 1153,
      563, 1153,  563,  563,  563, 1153, 1153, 1153, 1153,  563,
      563,  561, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1153, 1153,  561, 1153,  561,  561,
      561, 1153, 1153, 1153, 1153,  561,  561,  566,  566, 1153,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566, 1153,  566,
     1153,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      569, 1153, 1153,  569, 1153, 1153, 1153, 1153,  569, 1153,
      569,  569,  569, 1153, 1153, 1153, 1153,  569,  569,  571,
      571, 1153,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571, 1153,  571,  571,  571,  571,  571,  571,
      571,  571, 1153,  571,  571,  571,  571,  571,  571,  571,

      571,  571,  574,  574, 1153,  574,  574,  574,  574,  574,
      574,  574,  574, 1153,  574,  574,  574,  574,  574,  574,
      574,  574,  574, 1153,  574, 1153,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  577, 1153,  577,  577,  577,
      577,  577, 1153, 1153, 1153,  577, 1153,  577,  577,  577,
     1153, 1153, 1153, 1153,  577,  577,  711, 1153, 1153, 1153,
     1153,  711, 1153,  711,  711,  711, 1153, 1153, 1153, 1153,
      711,  711,  580,  580, 1153,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580, 1153,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  582,  582,  582,  582,  582,
      582,  582,  582,  582, 1153, 1153,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  585,  585,
     1153, 1153, 1153,  585, 1153,  585,  585,  585, 1153, 1153,
     1153, 1153,  585,  585,  716,  716, 1153,  716,  716,  716,
      716, 1153,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  588,  588, 1153,
      588, 1153, 1153, 1153, 1153,  588, 1153,  588,  588,  588,

      314, 1153,  314,  314, 1153,  314, 1153, 1153, 1153,  314,
      314, 1153,  314,  314,  314,  595, 1153, 1153,  595, 1153,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  726,  726,
     1153,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  614, 1153, 1153,  614, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153,  614, 1153,  614,  614,  614,  338, 1153, 1153,
      338, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,  338, 1153,
      338,  338,  338,  738,  738, 1153,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738, 1153,  738,  738,  738,  622, 1153, 1153, 1153,
     1153, 1153, 1153, 1153,  622, 1153,  622,  622,  622,  347,
     1153, 1153,  347, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

      347,  347,  347,  347,  347,  634, 1153, 1153, 1153, 1153,
     1153,  634, 1153,  634,  634,  634,  634,  634, 1153, 1153,
      634,  634,  634,  634,  634,  634, 1153, 1153, 1153, 1153,
      634,  634,  368, 1153, 1153, 1153, 1153, 1153,  368, 1153,
      368,  368,  368,  368,  368, 1153, 1153,  368,  368,  368,
      368,  368,  368, 1153, 1153, 1153, 1153,  368,  368,  376,
     1153,  376,  376,  376, 1153, 1153, 1153, 1153,  376,  376,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  642, 1153,  642, 1153, 1153,  642, 1153,
      642,  642,  642, 1153, 1153, 1153, 1153,  642,  642,  643,
     1153, 1153, 1153, 1153, 1153,  643, 1153,  643,  643,  643,
      643,  643, 1153, 1153,  643,  643,  643,  643,  643,  643,
     1153, 1153, 1153, 1153,  643,  643,  400, 1153, 1153, 1153,
     1153, 1153,  400, 1153,  400,  400,  400,  400,  400, 1153,
     1153,  400,  400,  400,  400,  400,  400, 1153, 1153, 1153,
     1153,  400,  400,  752,  752, 1153,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,

      752,  752,  752,  752,  752,  752,  648,  648, 1153, 1153,
     1153, 1153, 1153,  648, 1153,  648,  648,  648,  648,  648,
     1153,  648,  648,  648,  648,  648,  648,  648, 1153, 1153,
     1153, 1153,  648,  648,  412,  412, 1153, 1153, 1153, 1153,
     1153,  412, 1153,  412,  412,  412,  412,  412, 1153,  412,
      412,  412,  412,  412,  412,  412, 1153, 1153, 1153, 1153,
      412,  412,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  653, 1153, 1153,  653, 1153,

     1153, 1153, 1153,  653, 1153, 1153, 1153, 1153, 1153, 1153,
     1153,  653, 1153, 1153, 1153, 1153,  653, 1153,  653,  653,
      653, 1153, 1153, 1153, 1153,  653,  653,  657, 1153, 1153,
     1153, 1153, 1153,  657, 1153,  657,  657,  657,  657,  657,
     1153, 1153,  657,  657,  657,  657,  657,  657, 1153, 1153,
     1153, 1153,  657,  657,  448, 1153, 1153, 1153, 1153, 1153,
      448, 1153,  448,  448,  448,  448,  448, 1153, 1153,  448,
      448,  448,  448,  448,  448, 1153, 1153, 1153, 1153,  448,
      448,  762,  762,  762,  762, 1153, 1153,  762, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153,  762,  762, 1153,

     1153, 1153,  762, 1153,  762,  762,  762, 1153, 1153, 1153,
     1153,  762,  762,  660,  660,  660,  660, 1153, 1153,  660,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
      660, 1153, 1153, 1153,  660, 1153,  660,  660,  660, 1153,
     1153, 1153, 1153,  660,  660,  663,  663,  663,  663, 1153,
     1153,  663, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153,  663,  663, 1153, 1153, 1153,  663, 1153,  663,  663,
      663, 1153, 1153, 1153, 1153,  663,  663,  666, 1153, 1153,
     1153, 1153,  666, 1153,  666,  666,  666, 1153, 1153, 1153,
     1153,  666,  666,  668, 1153,  668,  668,  668, 1153, 1153,

     1153, 1153,  668,  668,  766, 1153,  766, 1153, 1153, 1153,
     1153,  766, 1153,  766,  766,  766, 1153, 1153, 1153, 1153,
      766,  766,  675, 1153,  675,  675,  675, 1153, 1153, 1153,
     1153,  675,  675,  772, 1153, 1153, 1153, 1153,  772, 1153,
      772,  772,  772, 1153, 1153, 1153, 1153,  772,  772,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783, 1153,  783,  783,  783,
      783, 1153,  783, 1153, 1153,  783,  783,  783,  783,  783,
      783,  783,  556, 1153,  556,  556,  556, 1153, 1153, 1153,
     1153,  556,  556,  561, 1153,  561,  561,  561, 1153, 1153,

     1153, 1153,  561,  561,  803, 1153,  803,  803,  803,  803,
      803, 1153, 1153, 1153,  803, 1153,  803,  803,  803, 1153,
     1153, 1153, 1153,  803,  803,  716,  716, 1153,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  808, 1153,
     1153,  808, 1153, 1153, 1153, 1153,  808, 1153,  808,  808,
      808,  321, 1153,  321, 1153,  321,  321, 1153,  321, 1153,
     1153, 1153,  321,  321, 1153,  321,  321,  321,  726,  726,
     1153,  726,  726,  726,  726,  726,  726,  726,  726,  726,

      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  338, 1153, 1153,  338, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153,  338, 1153,  338,  338,  338,  738,  738, 1153,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      739,  739,  739,  739,  739,  347, 1153, 1153,  347, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1153, 1153,  347,  347,  347,  347,
      347,  314,  314, 1153,  314, 1153, 1153, 1153, 1153, 1153,
     1153, 1153,  314, 1153,  314,  314, 1153,  314,  314, 1153,
     1153,  314,  314, 1153,  314,  314,  314, 1153,  314,  368,
     1153, 1153, 1153, 1153, 1153,  368, 1153,  368,  368,  368,
      368,  368, 1153, 1153,  368,  368,  368,  368,  368,  368,
     1153, 1153, 1153, 1153,  368,  368,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  400,

     1153, 1153, 1153, 1153, 1153,  400, 1153,  400,  400,  400,
      400,  400, 1153, 1153,  400,  400,  400,  400,  400,  400,
     1153, 1153, 1153, 1153,  400,  400,  752,  752, 1153,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  412,
      412, 1153, 1153, 1153, 1153, 1153,  412, 1153,  412,  412,
      412,  412,  412, 1153,  412,  412,  412,  412,  412,  412,
      412, 1153, 1153, 1153, 1153,  412,  412,  448, 1153, 1153,
     1153, 1153, 1153,  448, 1153,  448,  448,  448,  448,  448,

     1153, 1153,  448,  448,  448,  448,  448,  448, 1153, 1153,
     1153, 1153,  448,  448,  835, 1153,  835,  835,  835, 1153,
     1153, 1153, 1153,  835,  835,  762,  762,  762,  762, 1153,
     1153,  762, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153,  762,  762, 1153, 1153, 1153,  762, 1153,  762,  762,
      762, 1153, 1153, 1153, 1153,  762,  762,  660,  660,  660,
      660, 1153, 1153,  660, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153,  660, 1153, 1153, 1153,  660, 1153,
      660,  660,  660, 1153, 1153, 1153, 1153,  660,  660,  766,
     1153,  766, 1153, 1153, 1153, 1153,  766, 1153,  766,  766,

      766, 1153, 1153, 1153, 1153,  766,  766,  772, 1153, 1153,
     1153, 1153,  772, 1153,  772,  772,  772, 1153, 1153, 1153,
     1153,  772,  772,  881,  881, 1153,  881, 1153, 1153, 1153,
     1153,  881, 1153,  881,  881,  881,  888,  888, 1153,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  906,
      906,  906,  906, 1153, 1153,  906, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153,  906,  906, 1153, 1153, 1153,
      906, 1153,  906,  906,  906, 1153, 1153, 1153, 1153,  906,

      906,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932, 1153,  932,
      932,  932,  932, 1153,  932, 1153,  932, 1153,  932,  932,
      932,  932,  932,  932,  960,  960, 1153,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1153, 1001, 1001, 1001, 1001, 1153,
     1001, 1153, 1153, 1153, 1001, 1001, 1001, 1001, 1001, 1001,

     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1153, 1002, 1002,
     1002, 1002, 1153, 1002, 1153, 1153, 1153, 1002, 1002, 1002,
     1002, 1002, 1002, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1153, 1050, 1050, 1050, 1050, 1153, 1050, 1153, 1153, 1153,
     1050, 1050, 1050, 1050, 1050, 1050, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1153, 1061, 1061, 1061, 1061, 1153, 1061,
     1153, 1153, 1153, 1061, 1061, 1061, 1061, 1061, 1061, 1105,

     1105, 1153, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105,   87, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153
    } ;

static yyconst flex_int16_t yy_chk[10110] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    4,   21,   22,    4,
       23,   21,   22,   24,   23,   49, 1148,   24,    4,    4,
       37,    4,    4,   38,   41,    4,    4,    4,   42,   50,

       92,   37,   59,  240,   38,   41,  724,  240,   93,   42,
      103,   45,   45,  103,   45,   60,   45,   41,   94,   21,
       22,   42,   23,   46,   46,   24,   46,   49,   46,  724,
       53,   53,   37,   53,   65,   38,   41,   66,   83,   84,
       42,   50,   54,   54,   59,   54,    4,    5,    5,    5,
        5,    5,    5,    5,   45,    5,    5,   60,    5,    5,
        5,   47,    5,   47,    5,    5,   46,   94,   92,    5,
        5,    5,   47,   53,   93,  174,   65,   47,  174,   66,
       83,   84,  120,  103,   47,   54,   48,  120,   48,  174,
        5,    5,    5,   55,  331,   55,   85,   48, 1146,   77,

      310,  313,   48,   47,  316,   85,   85,  316,   56,   48,
       56,   91,   91,   77,   91,  331,   55,    5,    5,    5,
        5,    6,    6,    6,    6,    6,    6,    6,   48,    6,
        6,   56,    6,    6,    6,   55,    6,   71,    6,    6,
       57,   77,   57,    6,    6,    6,   58,   63,   58,   86,
       56, 1147,  317,  313,   91, 1147,   63,   63,   86,   86,
       71,  317,  223,   57,    6,    6,    6,  223,  310,   58,
       63,  130,  130,  130,  130, 1144,  266,  228,  130,   71,
      228,  266,   57,  152,  152,  152,  152,  228,   58,   63,
      152,    6,    6,    6,    6,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,   13,   13,
       13,   13,   13,   13,   72,   13,   13,   64,   13,   13,
       13,   73,   13,   74,   13,   13,   64,   64,   78,   13,
       13,   13,   79,  213,   80, 1141,  213,   72,  213,  533,
       64,  533,   78,   79,   73,   80,   74, 1123,  289,  204,
       13,   13,   13,   95,  407,   79,   72,   80, 1123,   64,

      204,  271,   95,   73,   90,   74,  271,   90,  112,  112,
       78,   95,  407,  112,   79,  289,   80,   13,   13,   13,
       13,   14,   14,   14,   14,   14,   14,   14,   90,   14,
       14,  204,   14,   14,   14,  112,   14,  322,   14,   14,
      322,  113,  113,   14,   14,   14,  113,   90, 1138,   96,
      241,   96,   96,   96,   96,  241,  568, 1137,  104,  241,
       95,  104,   96,  324,   14,   14,   14,  326,  113,  121,
      121,  352,  121,   99,  352,   99,   99,   90,   99,   99,
       99,   96,  104,  568,   99,  324,  324,  324,  337,  326,
     1133,   14,   14,   14,   14,   15,   15,   15,   15,   15,

       15,   15, 1130,   15,   15,   99,   15,   15,   15,  337,
       15,   96,   15,   15,  121,  134,  134,   15,   15,   15,
      134,  234,  234,  101,  234,  101,  101,  572,  101,  101,
      101,  104,  108,   99,  101,  108,  587,  918,   15,   15,
       15,  107,  134,  107,  107,  107,  572,  108,  231,  107,
      245,  231,  918,  108,  245,  101,  129,  129,  231,  129,
      245, 1129,  245,  328,  234,   15,   15,   15,   15,   16,
       16,   16,   16,   16,   16,   16,  357,   16,   16,  357,
       16,   16,   16,  101,   16,  328,   16,   16,  587,  329,
     1128,   16,   16,   16,  123,  123,  123,  123,  107,  135,

      135,  129,  108,  332,  135,  108,  124,  124,  124,  124,
      123,  329,   16,   16,   16,  123,  128,  128,  128,  128,
      354,  354,  124,  354, 1127,  332,  135,  124,  188,  188,
      188,  188,  128,  360,  360,  188,  360,  128,  128,   16,
       16,   16,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   25,   25,   25,   25,   25,

       25,   25, 1126,   25,   25,  369,   25,   25,   25,  369,
       25,  376,   25,   25,  540,  378,  376,   25,   25,   25,
      378,  146,  146,  146,  146, 1125,  105,  362,  540,  105,
      362,  369,  105,  147,  147,  147,  147,  146,   25,   25,
       25,  105,  146,  156,  156,  141,  156,  105, 1121,  147,
      105,  362,  160,  160,  147,  160,  141,  141, 1120,  164,
      164,  141,  164,  141,  603,   25,   25,   25,   25,   26,
       26,   26,   26,   26,   26,   26,  454,   26,   26,  454,
       26,   26,   26,  141,   26,  603,   26,   26,  156,  142,
      454,   26,   26,   26,  325,  302,  105,  160,  302,  105,

      142,  142, 1118, 1117,  164,  142,  325,  142,  151,  151,
      151,  151,   26,   26,   26,  325,  246,  556,  151,  302,
      431,  246,  556,  431,  151,  246, 1116,  142,  325,  151,
      431,  246,  355,  246,  355,  355,  355, 1115,  302,   26,
       26,   26,   26,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,  114,  114,   51,  114, 1114,  863,   51,   51,   51,

       51,  168,  168,  863,  169,  169,  168,  114,  114,  169,
      371,  371,  114,  371,  125,  125,  125,  125,   51,   51,
       51,  125,  178,  178,  178,  178, 1108,  558,  168,  178,
      125,  169,  558,  561,  114,  125,  114, 1113,  561, 1108,
      178,  178,  178,  178,  341,   51,   51,   51,   51,   51,
       51,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,  137,  137,   52,
      137,  327, 1112,   52,   52,   52,   52,  305,  305,  341,
      305,  143, 1111,  137,  137,  401,  125,  455,  137,  401,
      455,  327,  143,  143,   52,   52,   52,  143,  646,  143,

      363,  455,  363,  363,  363, 1110,  341, 1105,  363, 1102,
      137,  401,  137,  327,  380,  380,  646,  380, 1101,  143,
      305,   52,   52,   52,   52,   52,   52,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
      850,  867, 1135,   81,   81,   81,   81,  181,  181,  181,
      181,  126,  126,  126,  126,  867,  850, 1135,  126,  182,
      182,  182,  182,  181,   81,   81,   81,  126,  181,  563,
      179,  179,  126,  179,  563,  182,  388,  388,  388,  388,
      182,  714, 1099,  388,  187,  187,  589,  187, 1098,  589,

     1097,   81,   81,   81,   81,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82, 1096,  179,  714,   82,   82,   82,
       82,  106,  106,  126,  106,  186,  186,  186,  186,  187,
      193,  193,  106,  193,  106,  106,  106,  106,   82,   82,
       82,  186, 1095,  714,  347,  106,  186,  347, 1094,  599,
      509,  196,  196,  509,  196,  509,  145,  145, 1150,  145,
      522,  145, 1093,  522,  106,   82,   82,   82,   82,   97,
      522,  599,  145,  145,  413,  193, 1150,  145,  413,  145,
      368,  368,   97,  392,  392,  368,  392,  347,  148,  148,

      148,  148,   97,   97,  106,  148,  196,   97,   97,  145,
      413,  145,   97,   97,  148,   97,   97,  368,  457,  148,
     1143,  457,  614,   97,   97,  614, 1092, 1143,   97,   97,
      199,  199,  457,  199,   97,   97,   97,   97,   97,   97,
      208,  208,  449,  208,  226,  226,  449,  226,   97,   98,
       98,   98,   98,  149,  149,  149,  149,  602,   98,  605,
      149,  170,  170, 1091,  170,   98,   98,   98,  449,  149,
      148,  609, 1090, 1088,  149,  199,  610,  170,  170,  602,
      605,  524,  170,  208,  524,  208,   98,  232,  232,  226,
      232,  524,  609,   98,   98,  249,  249,  610,  249, 1081,

     1080, 1067,  253,  253,  170,  253,  170,  259,  259,  608,
      259, 1066,   98, 1064,   98,   98,   98,  100,  100,  100,
      100,  183,  183,  183,  183,  149,  100,  617,  183, 1063,
      617,  608,  232,  100,  100,  100, 1057,  183,  306,  306,
      249,  306,  183,  184,  184,  184,  184,  253,  403,  403,
      184,  403,  259, 1056,  100,  730,  100,  262,  262,  184,
      262,  100,  100,  604,  184,  349,  604,  627,  349,  348,
      627, 1055,  348,  207,  207,  207,  207,  730, 1054, 1053,
      100,  306,  100,  100,  100,  102,  604, 1052,  102,  207,
      207,  207,  633,  183, 1051,  633,  330,  102,  102,  330,

      102,  102,  262,  721,  102,  102,  102, 1049,  349,  102,
      207,  345,  348,  345,  345,  184,  345,  345,  345,  330,
     1027,  330,  345,  349,  721,  348,  353,  498,  102,  353,
      356,  358,  885,  356,  358,  330, 1026,  350,  498,  207,
      350,  353,  330,  345,  350,  356,  358,  353,  370,  370,
     1024,  356,  358,  370,  885,  102, 1023,  330,  102,  140,
      140, 1022,  140,  140,  140,  140, 1021,  140,  140,  498,
      140,  140,  140, 1020,  140,  370,  140,  140,  725,  350,
      350,  140,  140,  140,  346,  707,  346,  346,  707,  346,
      346,  346, 1019,  728,  364,  346,  353,  364, 1018,  725,

      356,  358,  140,  140,  140,  365,  350,  719,  365,  364,
      719, 1017,  373,  373,  728,  364,  346,  373,  416,  416,
      365,  416,  359,  359,  606,  359,  365,  606, 1016,  140,
      140,  140,  140,  303,  303,  303,  303,  359,  814,  373,
     1015,  433,  433,  359,  433,  618,  359,  606,  618,  303,
      303,  303,  373,  383,  383,  383,  383, 1014,  818,  814,
      384,  384,  384,  384,  364,  438,  438,  384,  438,  383,
      303,  959, 1013, 1012,  383,  365,  384,  303,  303,  818,
     1011,  384,  391,  391,  391,  391, 1010, 1009,  386,  386,
      386,  386,  359,  959,  618,  386,  303, 1008,  303,  303,

      304,  304,  304,  304,  386,  387,  387,  387,  387,  386,
     1007, 1006,  390,  390,  390,  390,  304,  304,  304, 1004,
     1003,  387,  389,  389,  389,  389,  387,  387,  390,  389,
      400,  400,  384,  390,  390,  400,  999,  304,  389,  395,
      395,  395,  395,  389,  304,  304,  395,  396,  396,  396,
      396,  998,  443,  443,  396,  443,  997,  400,  451,  451,
      386,  451,  996,  304,  995,  304,  304,  320,  464,  464,
      320,  464,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  994,  993,  991,  320,
      320,  320,  320,  990,  389,  402,  402,  448,  448,  989,

      402,  988,  448,  652,  405,  405,  652,  412,  986,  405,
      320,  320,  320,  652,  475,  475,  414,  475,  412,  412,
      985,  984,  402,  412,  448,  412,  653,  414,  414,  653,
      689,  405,  414,  689,  414,  983,  653,  320,  320,  320,
      320,  320,  320,  338,  405,  412,  338,  982,  981,  338,
      338,  338,  338,  734,  414,  980,  734,  418,  419,  419,
      419,  419,  979,  978,  977,  338,  338,  338,  418,  418,
      976,  450,  450,  418,  419,  418,  450,  974,  973,  419,
      420,  420,  420,  420,  972,  969,  338,  420,  689,  968,
      422,  422,  422,  422,  963,  418,  420,  422,  450,  962,

      960,  420,  424,  424,  424,  424,  422,  958,  418,  424,
      624,  422,  338,  624,  338,  338,  351,  484,  484,  351,
      484,  957,  956,  423,  423,  423,  423,  737,  351,  351,
      737,  351,  351,  423,  955,  351,  351,  351,  727,  423,
      351,  727,  489,  489,  423,  489,  954,  425,  425,  425,
      425,  953,  420,  624,  425,  426,  426,  426,  426,  351,
      952,  727,  422,  425,  624,  426,  493,  493,  425,  493,
      951,  426,  429,  429,  429,  429,  426,  504,  504,  429,
      504,  737,  430,  430,  430,  430,  351,  408,  408,  430,
      408,  408,  408,  408,  800,  408,  408,  800,  408,  408,

      408,  950,  408,  853,  408,  408,  853,  949,  948,  408,
      408,  408,  428,  428,  428,  428,  453,  453,  947,  425,
      946,  453,  428,  459,  459,  459,  459,  945,  428,  944,
      408,  408,  408,  428,  458,  458,  458,  458,  943,  519,
      519,  458,  519,  453,  459,  942,  941,  467,  467,  467,
      467,  940,  458,  458,  458,  458,  453,  408,  408,  408,
      408,  409,  409,  467,  409,  409,  409,  409,  467,  409,
      409,  938,  409,  409,  409,  936,  409,  939,  409,  409,
      939,  933,  931,  409,  409,  409,  930,  929,  928,  461,
      461,  461,  461,  927,  525,  525,  461,  525,  926,  925,

      471,  471,  471,  471,  409,  409,  409,  461,  461,  461,
      461,  542,  542,  924,  542,  923,  471,  463,  463,  463,
      463,  471,  546,  546,  463,  546,  528,  528,  922,  528,
      921,  409,  409,  409,  409,  463,  463,  463,  463,  468,
      468,  468,  468,  920,  919,  917,  468,  470,  470,  470,
      470,  916,  915,  914,  470,  468,  550,  550, 1065,  550,
      468, 1065,  913,  470,  472,  472,  472,  472,  470,  528,
      912,  472,  473,  473,  473,  473,  911,  909,  908,  473,
      474,  474,  474,  474,  478,  478,  478,  478,  473,  553,
      553,  478,  553,  473,  907,  903,  474,  479,  479,  479,

      479,  474,  902,  901,  479,  615,  626,  626,  615,  626,
      898,  468,  615,  628,  897,  628,  628,  628,  891,  470,
      890,  626,  625,  729,  888,  625,  729,  626,  629,  629,
      884,  629,  892,  821,  883,  892,  821,  634,  634,  881,
      880,  879,  634,  629,  473,  594,  729,  615,  594,  629,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  634,  625,  878,  594,  594,  594,
      594,  625,  631,  631,  615,  631,  626,  877, 1028,  632,
      632, 1028,  632, 1107,  876,  875, 1107,  631,  594,  594,
      594,  821,  874,  631,  632,  892,  631,  873,  629,  872,

      632,  635,  635,  636,  636,  871,  635,  870,  636,  639,
      639,  639,  639,  869,  868,  594,  594,  594,  594,  594,
      594,  640,  640,  640,  640,  866,  643,  643,  635, 1107,
      636,  643,  639,  644,  644,  645,  645,  865,  644, 1028,
      645,  636,  631,  648,  640,  657,  657,  864, 1119,  632,
      657, 1119,  649,  643,  648,  648,  862,  861,  860,  648,
      644,  648,  645,  649,  649,  859,  658,  658,  649,  858,
      649,  658,  657,  645,  647,  647,  857,  647,  647,  647,
      647,  648,  647,  647,  856,  647,  647,  647,  650,  647,
      649,  647,  647,  658,  855,  854,  647,  647,  647,  650,

      650,  852,  659,  659,  650, 1122,  650,  659, 1122,  895,
      851,  849,  895,  660,  660,  660,  660,  647,  647,  647,
      660,  661,  661,  661,  661,  848,  650,  740,  661,  659,
      740,  660,  660,  660,  660,  741, 1132,  650,  741, 1132,
      659,  847,  661,  846,  647,  647,  647,  647,  662,  662,
      662,  662,  895,  845,  844,  662,  663,  663,  663,  663,
      718, 1122,  718,  663,  718,  718,  662,  662,  662,  662,
      740,  843,  895,  718,  663,  663,  663,  663,  741,  742,
      742,  842,  742,  743,  743,  740,  743,  744,  744,  741,
      744,  745,  745,  841,  742,  840,  745,  839,  743,  838,

      742,  837,  744,  836,  743,  751,  751,  833,  744,  832,
      751,  744,  747,  747,  747,  747,  831,  828,  745,  749,
      749,  749,  749,  763,  763,  763,  763,  827,  815,  822,
      763,  815,  751,  745,  754,  747,  964,  816, 1086,  964,
      816, 1086,  749,  820,  763,  754,  754,  751,  819,  742,
      754,  815,  754,  743,  813,  812,  811,  744,  752,  752,
      816,  752,  752,  752,  752, 1134,  752,  752, 1134,  752,
      752,  752,  754,  752, 1139,  752,  752, 1139,  759,  759,
      752,  752,  752,  759,  808,  806,  964,  754,  761,  761,
      761,  761,  805,  804,  803,  761, 1086,  762,  762,  762,

      762,  752,  752,  752,  762,  759,  761,  761,  761,  761,
     1142, 1145,  802, 1142, 1145,  762,  762,  762,  762, 1136,
      759,  809, 1136,  809,  823,  809,  809,  823,  752,  752,
      752,  752,  753,  753,  809,  753,  753,  753,  753,  824,
      753,  753,  824,  753,  753,  753,  801,  753, 1149,  753,
      753, 1149,  776,  776,  753,  753,  753,  776,  799,  798,
      776,  776, 1136,  825,  825,  776,  825,  823,  776,  776,
      797,  776,  796,  795,  823,  753,  753,  753,  825,  794,
      826,  826,  824,  830,  825,  826,  829,  829,  834,  834,
      793,  829,  792,  834,  830,  830,  791,  824,  790,  830,

      789,  830,  753,  753,  753,  753,  886,  826,  889,  886,
      788,  889,  786,  829,  826,  834,  835,  835,  835,  835,
      829,  830,  834,  835,  894,  896,  896,  894,  830,  886,
      896,  889,  785,  825,  835,  835,  835,  835,  899,  899,
      784,  961,  900,  899,  961,  904,  904,  782,  965,  781,
      904,  965,  896,  900,  900,  780,  896,  779,  900, 1025,
      900,  778, 1025,  777,  961,  899,  775,  894,  774,  899,
      773,  894,  904,  771,  966,  770,  904,  966,  769,  768,
      900,  767, 1025,  766,  900,  905,  905,  905,  905,  765,
      764,  965,  905,  906,  906,  906,  906,  758, 1029, 1029,

      906, 1029,  757,  905,  905,  905,  905,  756,  750,  965,
      971,  906,  906,  906,  906,  967,  967,  966,  970,  970,
      967,  971,  971,  970,  966, 1313,  971,  746,  971,  975,
      975,  739, 1030, 1313,  975, 1030, 1313, 1313, 1031, 1031,
      738, 1029,  967, 1031,  732,  970, 1034, 1034,  971, 1039,
     1039, 1034, 1087, 1087, 1039, 1087,  975,  731, 1082, 1089,
      967, 1082, 1089,  970,  726, 1031,  971, 1035, 1106, 1109,
      723, 1106, 1109, 1034,  975, 1030, 1039, 1124, 1035, 1035,
     1124, 1082,  722, 1035,  716, 1035, 1152, 1152,  715, 1152,
      713, 1106,  712, 1030, 1325, 1087, 1325, 1325, 1325,  711,

      710,  708, 1089,  706, 1329, 1035, 1329, 1329, 1329,  705,
     1356,  701, 1109,  699,  697, 1109,  696, 1089, 1356,  695,
     1124, 1356, 1356, 1362,  694, 1362, 1362, 1362, 1389, 1152,
     1389, 1389, 1389, 1124, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1159,

     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1162, 1162,

     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1165, 1165, 1165,

     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1168, 1168, 1168, 1168,

     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1171, 1171, 1171, 1171, 1171,

     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1174, 1174, 1174, 1174, 1174, 1174,

     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1177, 1177, 1177, 1177, 1177, 1177, 1177,

     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1180, 1180,  693, 1180, 1180, 1180, 1180, 1180,

     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1181,  692,  691,  690,  688,
      687,  686,  685,  684,  683,  682,  681,  680,  679,  678,
     1181,  677, 1181, 1181, 1181,  676,  673,  672,  671, 1181,
     1181, 1182,  670, 1182, 1182,  669, 1182,  668,  665,  664,
     1182, 1182,  656, 1182, 1182, 1182,  655,  654,  651,  642,
     1182, 1183,  641, 1183, 1183, 1183, 1183,  638, 1183,  613,
      612,  611, 1183, 1183, 1183, 1183, 1183, 1183,  601,  600,
      598,  596, 1183, 1184, 1184, 1184,  595,  593,  590,  588,

      585, 1184,  584,  583,  581,  579, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184,  577, 1184, 1184, 1184, 1185,
      576, 1185, 1185,  573, 1185,  570,  567,  565, 1185, 1185,
      564, 1185, 1185, 1185,  562,  560,  559,  557, 1185, 1186,
     1186, 1186,  555,  552,  548,  544,  541, 1186,  539,  538,
      537,  535, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186,  534, 1186, 1186, 1186, 1187, 1187,  531, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1188,  530,

      527,  521,  518,  517, 1188,  513, 1188, 1188, 1188, 1188,
     1188,  511,  510, 1188, 1188, 1188, 1188, 1188, 1188,  508,
      506,  503,  501, 1188, 1188, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1190,  500,
     1190, 1190, 1190,  497,  495,  491,  488, 1190, 1190, 1191,
      487, 1191, 1191,  486,  483,  482, 1191,  481, 1191, 1191,
     1191,  477,  469,  466,  462, 1191, 1191, 1192, 1192, 1192,
     1192,  446,  445, 1192,  441,  440,  436,  435,  421,  415,

      410, 1192,  406,  398, 1192,  397,  394,  385, 1192,  382,
     1192, 1192, 1192,  379,  377,  374, 1192, 1192, 1192, 1193,
     1193, 1193, 1193,  366,  340,  339,  336,  334,  333,  323,
      321,  314,  312, 1193,  308, 1193, 1193, 1193,  307,  301,
     1193,  296, 1193, 1193, 1193,  293,  292,  288,  284, 1193,
     1193, 1194, 1194, 1194, 1194,  283,  280, 1194,  276,  275,
      272,  267,  236,  222,  221,  220,  216,  215,  211,  206,
      203,  195, 1194,  192, 1194, 1194, 1194,  185,  167,  163,
      159, 1194, 1194, 1195, 1195,  150, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,

     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1196,  136,  133,  127,
      115,  111, 1196,   89, 1196, 1196, 1196, 1196, 1196,   87,
        8, 1196, 1196, 1196, 1196, 1196, 1196,    7,    0,    0,
        0, 1196, 1196, 1197, 1197,    0, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1198, 1198,    0,    0,
        0,    0,    0, 1198,    0, 1198, 1198, 1198, 1198, 1198,
        0, 1198, 1198, 1198, 1198, 1198, 1198, 1198,    0,    0,

        0,    0, 1198, 1198, 1199, 1199, 1199, 1199,    0,    0,
     1199,    0,    0,    0,    0,    0,    0,    0, 1199,    0,
        0, 1199,    0,    0,    0, 1199,    0, 1199, 1199, 1199,
        0,    0,    0, 1199, 1199, 1199, 1200, 1200, 1200, 1200,
        0,    0,    0,    0, 1200,    0,    0,    0,    0,    0,
     1200,    0, 1200, 1200,    0,    0,    0, 1200,    0, 1200,
     1200, 1200,    0,    0,    0,    0, 1200, 1200, 1201, 1201,
     1201, 1201,    0,    0, 1201,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1201,
        0, 1201, 1201, 1201,    0,    0,    0,    0, 1201, 1201,

     1202,    0,    0, 1202,    0,    0,    0,    0, 1202,    0,
     1202, 1202, 1202,    0,    0,    0,    0, 1202, 1202, 1203,
     1203,    0, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1204, 1204,    0, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1205, 1205,    0, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,

     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1206,    0,
        0,    0,    0,    0, 1206,    0, 1206, 1206, 1206, 1206,
     1206,    0,    0, 1206, 1206, 1206, 1206, 1206, 1206,    0,
        0,    0,    0, 1206, 1206, 1207,    0, 1207, 1207, 1207,
        0,    0,    0,    0, 1207, 1207, 1208,    0,    0, 1208,
        0,    0,    0,    0,    0,    0,    0,    0, 1208,    0,
        0,    0, 1208,    0,    0,    0,    0, 1208,    0, 1208,
     1208, 1208,    0,    0,    0,    0, 1208, 1208, 1209,    0,
     1209, 1209, 1209,    0,    0,    0,    0, 1209, 1209, 1210,

     1210, 1210, 1210,    0,    0, 1210,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1210, 1210,    0,    0,    0,
     1210,    0, 1210, 1210, 1210,    0,    0,    0,    0, 1210,
     1210, 1211, 1211, 1211, 1211,    0,    0, 1211,    0,    0,
        0,    0,    0,    0,    0, 1211,    0,    0, 1211,    0,
        0,    0, 1211,    0, 1211, 1211, 1211,    0,    0,    0,
     1211, 1211, 1211, 1212, 1212, 1212, 1212,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1212,    0, 1212,
     1212,    0,    0,    0, 1212,    0, 1212, 1212, 1212,    0,
        0,    0,    0, 1212, 1212, 1213, 1213, 1213, 1213,    0,

        0, 1213,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1213,    0, 1213, 1213,
     1213,    0,    0,    0,    0, 1213, 1213, 1214,    0, 1214,
     1214, 1214,    0,    0,    0,    0, 1214, 1214, 1215,    0,
     1215,    0,    0,    0,    0, 1215,    0, 1215, 1215, 1215,
        0,    0,    0,    0, 1215, 1215, 1216, 1216,    0, 1216,
        0,    0,    0,    0, 1216,    0, 1216, 1216, 1216,    0,
        0,    0,    0, 1216, 1216, 1217, 1217,    0, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217,    0, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,    0, 1217,

     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1218,    0,
        0, 1218,    0,    0,    0,    0, 1218,    0, 1218, 1218,
     1218,    0,    0,    0,    0, 1218, 1218, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,    0, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1220, 1220,    0, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220,    0, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1221, 1221,    0, 1221,    0, 1221, 1221,

     1221,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1221, 1221, 1221,    0, 1221, 1221,    0,    0,    0,
        0,    0, 1221, 1222,    0,    0, 1222,    0,    0,    0,
        0, 1222,    0, 1222, 1222, 1222,    0,    0,    0,    0,
     1222, 1222, 1223, 1223,    0, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1224, 1224,    0, 1224,    0,
     1224, 1224, 1224, 1224, 1224, 1224,    0, 1224, 1224, 1224,
     1224,    0, 1224, 1224, 1224, 1224,    0, 1224,    0, 1224,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1225,    0,
        0, 1225,    0,    0,    0,    0, 1225,    0,    0,    0,
        0, 1225, 1225,    0, 1225,    0,    0,    0,    0, 1225,
        0, 1225, 1225, 1225, 1226, 1226,    0, 1226,    0, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226,    0, 1226,    0, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1227, 1227,    0,
     1227,    0, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,    0, 1227,
        0, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,

     1228,    0,    0, 1228,    0,    0,    0,    0, 1228,    0,
     1228, 1228, 1228,    0,    0,    0,    0, 1228, 1228, 1229,
     1229,    0, 1229, 1229, 1229, 1229, 1229, 1229,    0,    0,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
        0, 1229,    0, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1230,    0, 1230, 1230, 1230,    0,    0,    0,
        0, 1230, 1230, 1231,    0, 1231, 1231,    0,    0,    0,
     1231,    0, 1231, 1231, 1231,    0,    0,    0,    0, 1231,
     1231, 1232,    0, 1232, 1232, 1232,    0,    0,    0,    0,
     1232, 1232, 1233,    0, 1233, 1233,    0,    0,    0, 1233,

        0, 1233, 1233, 1233,    0,    0,    0,    0, 1233, 1233,
     1234, 1234,    0, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234,    0, 1234,    0, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1235,    0,    0, 1235,    0,    0,    0,
        0, 1235,    0, 1235, 1235, 1235,    0,    0,    0,    0,
     1235, 1235, 1236, 1236,    0, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236,    0, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236,    0, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1237, 1237,    0, 1237, 1237,

     1237, 1237, 1237, 1237, 1237, 1237,    0, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237,    0, 1237,    0, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1238,    0,
     1238, 1238, 1238, 1238, 1238,    0,    0,    0, 1238,    0,
     1238, 1238, 1238,    0,    0,    0,    0, 1238, 1238, 1239,
     1239,    0, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239,    0, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240,    0,    0, 1240, 1240, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1241, 1241, 1241,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241,    0, 1241, 1241,
     1242, 1242,    0, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1243,    0, 1243, 1243, 1243,    0,    0,
        0,    0, 1243, 1243, 1244, 1244,    0,    0,    0, 1244,
        0, 1244, 1244, 1244,    0,    0,    0,    0, 1244, 1244,

     1245,    0, 1245, 1245,    0, 1245,    0,    0,    0, 1245,
     1245,    0, 1245, 1245, 1245, 1246,    0,    0, 1246,    0,
        0,    0,    0, 1246,    0, 1246, 1246, 1246, 1247,    0,
        0, 1247,    0, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1248,    0, 1248, 1248, 1248,    0,    0,    0, 1248,
     1249,    0,    0,    0,    0,    0,    0,    0, 1249,    0,
     1249, 1249, 1249, 1250,    0, 1250, 1250,    0, 1250,    0,
        0,    0, 1250, 1250,    0, 1250, 1250, 1250, 1251,    0,

        0, 1251,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1251,
     1251, 1251, 1251, 1251, 1252, 1252,    0, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1253,    0,    0,
        0,    0,    0, 1253,    0, 1253, 1253, 1253, 1253, 1253,
        0,    0, 1253, 1253, 1253, 1253, 1253, 1253,    0,    0,
        0,    0, 1253, 1253, 1254,    0,    0,    0,    0,    0,
     1254,    0, 1254,    0, 1254, 1254, 1254,    0,    0, 1254,

     1254, 1254, 1254, 1254, 1254,    0,    0,    0,    0, 1254,
     1254, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1256,    0, 1256, 1256,    0,    0,
        0, 1256,    0, 1256, 1256, 1256,    0,    0,    0,    0,
     1256, 1256, 1257,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1257,    0, 1257,
     1257, 1257,    0,    0,    0,    0, 1257, 1257, 1258, 1258,
     1258, 1258,    0,    0, 1258,    0,    0,    0,    0,    0,

        0,    0, 1258,    0,    0, 1258,    0,    0,    0, 1258,
        0, 1258, 1258, 1258,    0,    0,    0, 1258, 1258, 1258,
     1259, 1259, 1259, 1259,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1259,    0, 1259, 1259, 1259,    0,
        0, 1259,    0, 1259, 1259, 1259,    0,    0,    0,    0,
     1259, 1259, 1260, 1260, 1260, 1260,    0,    0, 1260,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1260,    0, 1260, 1260, 1260,    0,    0,
        0,    0, 1260, 1260, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,

     1261, 1261, 1261, 1261,    0, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1262,    0, 1262,
        0,    0, 1262,    0, 1262, 1262, 1262,    0,    0,    0,
        0, 1262, 1262, 1263, 1263,    0, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1264,    0,    0,    0,
        0,    0, 1264,    0, 1264, 1264, 1264, 1264, 1264,    0,
        0, 1264, 1264, 1264, 1264, 1264, 1264,    0,    0,    0,
        0, 1264, 1264, 1265,    0,    0,    0,    0,    0, 1265,

        0, 1265,    0, 1265, 1265, 1265,    0,    0, 1265, 1265,
     1265, 1265, 1265, 1265,    0,    0,    0,    0, 1265, 1265,
     1266, 1266,    0, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1267, 1267,    0, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1268, 1268,    0,    0,
        0,    0,    0, 1268,    0, 1268, 1268, 1268, 1268, 1268,

        0, 1268, 1268, 1268, 1268, 1268, 1268, 1268,    0,    0,
        0,    0, 1268, 1268, 1269,    0,    0,    0,    0,    0,
     1269,    0, 1269,    0, 1269, 1269, 1269,    0,    0, 1269,
     1269, 1269, 1269, 1269, 1269,    0,    0,    0,    0, 1269,
     1269, 1270, 1270, 1270, 1270,    0,    0, 1270,    0,    0,
        0,    0,    0,    0,    0, 1270,    0,    0, 1270,    0,
        0,    0, 1270,    0, 1270, 1270, 1270,    0,    0,    0,
     1270, 1270, 1270, 1271, 1271, 1271, 1271,    0,    0,    0,
        0, 1271,    0,    0,    0,    0,    0, 1271,    0, 1271,
     1271,    0,    0,    0, 1271,    0, 1271, 1271, 1271,    0,

        0,    0,    0, 1271, 1271, 1272, 1272, 1272, 1272,    0,
        0, 1272,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1272,    0, 1272, 1272,
     1272,    0,    0,    0,    0, 1272, 1272, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273,    0, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1274,    0,    0, 1274,    0,    0,    0,    0, 1274,    0,
        0,    0,    0,    0,    0,    0, 1274,    0,    0,    0,
        0, 1274,    0, 1274, 1274, 1274,    0,    0,    0,    0,

     1274, 1274, 1275,    0,    0, 1275,    0,    0,    0,    0,
     1275,    0, 1275, 1275, 1275,    0,    0,    0,    0, 1275,
     1275, 1276, 1276,    0, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1277, 1277,    0, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1278, 1278,    0,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,

     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1279,    0,    0,    0,    0,    0, 1279,    0, 1279, 1279,
     1279, 1279, 1279,    0,    0, 1279, 1279, 1279, 1279, 1279,
     1279,    0,    0,    0,    0, 1279, 1279, 1280,    0,    0,
        0,    0,    0, 1280,    0, 1280,    0, 1280, 1280, 1280,
        0,    0, 1280, 1280, 1280, 1280, 1280, 1280,    0,    0,
        0,    0, 1280, 1280, 1281,    0,    0, 1281,    0,    0,
        0,    0,    0,    0,    0,    0, 1281,    0,    0,    0,
     1281,    0,    0,    0,    0, 1281,    0, 1281, 1281, 1281,

        0,    0,    0,    0, 1281, 1281, 1282, 1282, 1282, 1282,
        0,    0, 1282,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1282, 1282,    0,    0,    0, 1282,    0, 1282,
     1282, 1282,    0,    0,    0,    0, 1282, 1282, 1283,    0,
     1283, 1283, 1283,    0,    0,    0,    0, 1283, 1283, 1284,
     1284, 1284, 1284,    0,    0, 1284,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1284, 1284,    0,    0,    0,
     1284,    0, 1284, 1284, 1284,    0,    0,    0,    0, 1284,
     1284, 1285, 1285, 1285, 1285,    0,    0, 1285,    0,    0,
        0,    0,    0,    0,    0, 1285,    0,    0, 1285,    0,

        0,    0, 1285,    0, 1285, 1285, 1285,    0,    0,    0,
     1285, 1285, 1285, 1286, 1286, 1286, 1286,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1286,    0, 1286,
     1286,    0,    0,    0, 1286,    0, 1286, 1286, 1286,    0,
        0,    0,    0, 1286, 1286, 1287, 1287, 1287, 1287,    0,
        0, 1287,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1287,    0, 1287, 1287,
     1287,    0,    0,    0,    0, 1287, 1287, 1288,    0,    0,
        0,    0, 1288,    0, 1288, 1288, 1288,    0,    0,    0,
        0, 1288, 1288, 1289,    0, 1289,    0,    0,    0,    0,

     1289,    0, 1289, 1289, 1289,    0,    0,    0,    0, 1289,
     1289, 1290,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1290,    0, 1290, 1290,
     1290,    0,    0,    0,    0, 1290, 1290, 1291, 1291,    0,
     1291,    0,    0,    0,    0, 1291,    0, 1291, 1291, 1291,
        0,    0,    0,    0, 1291, 1291, 1292, 1292,    0, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292,    0, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,    0,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1293,
        0,    0, 1293,    0,    0,    0,    0, 1293,    0, 1293,

     1293, 1293,    0,    0,    0,    0, 1293, 1293, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,    0,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1295, 1295,    0, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295,    0, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1296,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1296,
        0, 1296, 1296, 1296,    0,    0,    0,    0, 1296, 1296,

     1297,    0,    0, 1297,    0,    0,    0,    0, 1297,    0,
     1297, 1297, 1297,    0,    0,    0,    0, 1297, 1297, 1298,
     1298,    0, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1299, 1299,    0, 1299,    0, 1299, 1299, 1299,
     1299, 1299, 1299,    0, 1299, 1299, 1299, 1299,    0, 1299,
     1299, 1299, 1299,    0, 1299,    0, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1300,    0,    0, 1300,    0,
        0,    0,    0, 1300,    0,    0,    0,    0, 1300, 1300,

        0, 1300,    0,    0,    0,    0, 1300,    0, 1300, 1300,
     1300, 1301, 1301,    0, 1301,    0, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301,    0, 1301,    0, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1302, 1302,    0, 1302,    0, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302,    0, 1302,    0, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1303,    0,    0,
     1303,    0,    0,    0,    0, 1303,    0, 1303, 1303, 1303,
        0,    0,    0,    0, 1303, 1303, 1304, 1304,    0, 1304,

     1304, 1304, 1304, 1304, 1304,    0,    0, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304,    0, 1304,    0,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1305,
        0, 1305, 1305,    0,    0,    0, 1305,    0, 1305, 1305,
     1305,    0,    0,    0,    0, 1305, 1305, 1306,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1306,    0, 1306, 1306, 1306,    0,    0,    0,
        0, 1306, 1306, 1307,    0, 1307, 1307,    0,    0,    0,
     1307,    0, 1307, 1307, 1307,    0,    0,    0,    0, 1307,
     1307, 1308,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1308,    0, 1308, 1308,
     1308,    0,    0,    0,    0, 1308, 1308, 1309, 1309,    0,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,    0, 1309,
        0, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1310,    0,    0, 1310,    0,    0,    0,    0, 1310,    0,
     1310, 1310, 1310,    0,    0,    0,    0, 1310, 1310, 1311,
     1311,    0, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311,    0, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1311,    0, 1311, 1311, 1311, 1311, 1311, 1311, 1311,

     1311, 1311, 1312, 1312,    0, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312,    0, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312,    0, 1312,    0, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1314,    0, 1314, 1314, 1314,
     1314, 1314,    0,    0,    0, 1314,    0, 1314, 1314, 1314,
        0,    0,    0,    0, 1314, 1314, 1315,    0,    0,    0,
        0, 1315,    0, 1315, 1315, 1315,    0,    0,    0,    0,
     1315, 1315, 1316, 1316,    0, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316,    0, 1316, 1316, 1316, 1316,

     1316, 1316, 1316, 1316, 1316, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317,    0,    0, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1318, 1318,
        0,    0,    0, 1318,    0, 1318, 1318, 1318,    0,    0,
        0,    0, 1318, 1318, 1319, 1319,    0, 1319, 1319, 1319,
     1319,    0, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1320, 1320,    0,
     1320,    0,    0,    0,    0, 1320,    0, 1320, 1320, 1320,

     1321,    0, 1321, 1321,    0, 1321,    0,    0,    0, 1321,
     1321,    0, 1321, 1321, 1321, 1322,    0,    0, 1322,    0,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1323, 1323,
        0, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1324,    0,    0, 1324,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1324,    0, 1324, 1324, 1324, 1326,    0,    0,
     1326,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1326,    0,
     1326, 1326, 1326, 1327, 1327,    0, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327,    0, 1327, 1327, 1327, 1328,    0,    0,    0,
        0,    0,    0,    0, 1328,    0, 1328, 1328, 1328, 1330,
        0,    0, 1330,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1330, 1330, 1330, 1330, 1330, 1331,    0,    0,    0,    0,
        0, 1331,    0, 1331, 1331, 1331, 1331, 1331,    0,    0,
     1331, 1331, 1331, 1331, 1331, 1331,    0,    0,    0,    0,
     1331, 1331, 1332,    0,    0,    0,    0,    0, 1332,    0,
     1332, 1332, 1332, 1332, 1332,    0,    0, 1332, 1332, 1332,
     1332, 1332, 1332,    0,    0,    0,    0, 1332, 1332, 1333,
        0, 1333, 1333, 1333,    0,    0,    0,    0, 1333, 1333,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1334, 1334, 1335,    0, 1335,    0,    0, 1335,    0,
     1335, 1335, 1335,    0,    0,    0,    0, 1335, 1335, 1336,
        0,    0,    0,    0,    0, 1336,    0, 1336, 1336, 1336,
     1336, 1336,    0,    0, 1336, 1336, 1336, 1336, 1336, 1336,
        0,    0,    0,    0, 1336, 1336, 1337,    0,    0,    0,
        0,    0, 1337,    0, 1337, 1337, 1337, 1337, 1337,    0,
        0, 1337, 1337, 1337, 1337, 1337, 1337,    0,    0,    0,
        0, 1337, 1337, 1338, 1338,    0, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1339, 1339,    0,    0,
        0,    0,    0, 1339,    0, 1339, 1339, 1339, 1339, 1339,
        0, 1339, 1339, 1339, 1339, 1339, 1339, 1339,    0,    0,
        0,    0, 1339, 1339, 1340, 1340,    0,    0,    0,    0,
        0, 1340,    0, 1340, 1340, 1340, 1340, 1340,    0, 1340,
     1340, 1340, 1340, 1340, 1340, 1340,    0,    0,    0,    0,
     1340, 1340, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1342,    0,    0, 1342,    0,

        0,    0,    0, 1342,    0,    0,    0,    0,    0,    0,
        0, 1342,    0,    0,    0,    0, 1342,    0, 1342, 1342,
     1342,    0,    0,    0,    0, 1342, 1342, 1343,    0,    0,
        0,    0,    0, 1343,    0, 1343, 1343, 1343, 1343, 1343,
        0,    0, 1343, 1343, 1343, 1343, 1343, 1343,    0,    0,
        0,    0, 1343, 1343, 1344,    0,    0,    0,    0,    0,
     1344,    0, 1344, 1344, 1344, 1344, 1344,    0,    0, 1344,
     1344, 1344, 1344, 1344, 1344,    0,    0,    0,    0, 1344,
     1344, 1345, 1345, 1345, 1345,    0,    0, 1345,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1345, 1345,    0,

        0,    0, 1345,    0, 1345, 1345, 1345,    0,    0,    0,
        0, 1345, 1345, 1346, 1346, 1346, 1346,    0,    0, 1346,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1346,    0,    0,    0, 1346,    0, 1346, 1346, 1346,    0,
        0,    0,    0, 1346, 1346, 1347, 1347, 1347, 1347,    0,
        0, 1347,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1347, 1347,    0,    0,    0, 1347,    0, 1347, 1347,
     1347,    0,    0,    0,    0, 1347, 1347, 1348,    0,    0,
        0,    0, 1348,    0, 1348, 1348, 1348,    0,    0,    0,
        0, 1348, 1348, 1349,    0, 1349, 1349, 1349,    0,    0,

        0,    0, 1349, 1349, 1350,    0, 1350,    0,    0,    0,
        0, 1350,    0, 1350, 1350, 1350,    0,    0,    0,    0,
     1350, 1350, 1351,    0, 1351, 1351, 1351,    0,    0,    0,
        0, 1351, 1351, 1352,    0,    0,    0,    0, 1352,    0,
     1352, 1352, 1352,    0,    0,    0,    0, 1352, 1352, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353,    0, 1353, 1353, 1353,
     1353,    0, 1353,    0,    0, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1354,    0, 1354, 1354, 1354,    0,    0,    0,
        0, 1354, 1354, 1355,    0, 1355, 1355, 1355,    0,    0,

        0,    0, 1355, 1355, 1357,    0, 1357, 1357, 1357, 1357,
     1357,    0,    0,    0, 1357,    0, 1357, 1357, 1357,    0,
        0,    0,    0, 1357, 1357, 1358, 1358,    0, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359,    0,
        0, 1359,    0,    0,    0,    0, 1359,    0, 1359, 1359,
     1359, 1360,    0, 1360,    0, 1360, 1360,    0, 1360,    0,
        0,    0, 1360, 1360,    0, 1360, 1360, 1360, 1361, 1361,
        0, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1363,    0,    0, 1363,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1363,    0, 1363, 1363, 1363, 1364, 1364,    0,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1365, 1365, 1365, 1365, 1365, 1366,    0,    0, 1366,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1366, 1366, 1366, 1366,
     1366, 1367, 1367,    0, 1367,    0,    0,    0,    0,    0,
        0,    0, 1367,    0, 1367, 1367,    0, 1367, 1367,    0,
        0, 1367, 1367,    0, 1367, 1367, 1367,    0, 1367, 1368,
        0,    0,    0,    0,    0, 1368,    0, 1368, 1368, 1368,
     1368, 1368,    0,    0, 1368, 1368, 1368, 1368, 1368, 1368,
        0,    0,    0,    0, 1368, 1368, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1370,

        0,    0,    0,    0,    0, 1370,    0, 1370, 1370, 1370,
     1370, 1370,    0,    0, 1370, 1370, 1370, 1370, 1370, 1370,
        0,    0,    0,    0, 1370, 1370, 1371, 1371,    0, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1372,
     1372,    0,    0,    0,    0,    0, 1372,    0, 1372, 1372,
     1372, 1372, 1372,    0, 1372, 1372, 1372, 1372, 1372, 1372,
     1372,    0,    0,    0,    0, 1372, 1372, 1373,    0,    0,
        0,    0,    0, 1373,    0, 1373, 1373, 1373, 1373, 1373,

        0,    0, 1373, 1373, 1373, 1373, 1373, 1373,    0,    0,
        0,    0, 1373, 1373, 1374,    0, 1374, 1374, 1374,    0,
        0,    0,    0, 1374, 1374, 1375, 1375, 1375, 1375,    0,
        0, 1375,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1375, 1375,    0,    0,    0, 1375,    0, 1375, 1375,
     1375,    0,    0,    0,    0, 1375, 1375, 1376, 1376, 1376,
     1376,    0,    0, 1376,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1376,    0,    0,    0, 1376,    0,
     1376, 1376, 1376,    0,    0,    0,    0, 1376, 1376, 1377,
        0, 1377,    0,    0,    0,    0, 1377,    0, 1377, 1377,

     1377,    0,    0,    0,    0, 1377, 1377, 1378,    0,    0,
        0,    0, 1378,    0, 1378, 1378, 1378,    0,    0,    0,
        0, 1378, 1378, 1379, 1379,    0, 1379,    0,    0,    0,
        0, 1379,    0, 1379, 1379, 1379, 1380, 1380,    0, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1381,
     1381, 1381, 1381,    0,    0, 1381,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1381, 1381,    0,    0,    0,
     1381,    0, 1381, 1381, 1381,    0,    0,    0,    0, 1381,

     1381, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,    0, 1382,
     1382, 1382, 1382,    0, 1382,    0, 1382,    0, 1382, 1382,
     1382, 1382, 1382, 1382, 1383, 1383,    0, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384,    0, 1384, 1384, 1384, 1384,    0,
     1384,    0,    0,    0, 1384, 1384, 1384, 1384, 1384, 1384,

     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385,    0, 1385, 1385,
     1385, 1385,    0, 1385,    0,    0,    0, 1385, 1385, 1385,
     1385, 1385, 1385, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
        0, 1386, 1386, 1386, 1386,    0, 1386,    0,    0,    0,
     1386, 1386, 1386, 1386, 1386, 1386, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387,    0, 1387, 1387, 1387, 1387,    0, 1387,
        0,    0,    0, 1387, 1387, 1387, 1387, 1387, 1387, 1388,

     1388,    0, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2017 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <QFile>
#include <QStack>
#include <QRegExp>
#include <QVector>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <cite.h>
#include <condparser.h>
#include <config.h>
#include <default_args.h>
#include <doxy_globals.h>
#include <entry.h>
#include <formula.h>
#include <index.h>
#include <language.h>
#include <membergroup.h>
#include <message.h>
#include <outputlist.h>
#include <parse_base.h>
#include <parse_cstyle.h>
#include <parse_md.h>
#include <util.h>

#define YY_NO_INPUT 1
#define YY_NEVER_INTERACTIVE 1

// forward declarations
static bool handleBrief(const QString &);
static bool handleFn(const QString &);
static bool handleDef(const QString &);
static bool handleOverload(const QString &);
static bool handleEnum(const QString &);
static bool handleDefGroup(const QString &);
static bool handleAddToGroup(const QString &);
static bool handleWeakGroup(const QString &);
static bool handleNamespace(const QString &);
static bool handlePackage(const QString &);
static bool handleClass(const QString &);
static bool handleHeaderFile(const QString &);
static bool handleProtocol(const QString &);
static bool handleCategory(const QString &);
static bool handleUnion(const QString &);
static bool handleStruct(const QString &);
static bool handleInterface(const QString &);
static bool handleIdlException(const QString &);
static bool handlePage(const QString &);
static bool handleMainpage(const QString &);
static bool handleFile(const QString &);
static bool handleDir(const QString &);
static bool handleExample(const QString &);
static bool handleDetails(const QString &);
static bool handleName(const QString &);
static bool handleTodo(const QString &);
static bool handleTest(const QString &);
static bool handleBug(const QString &);
static bool handleSubpage(const QString &s);
static bool handleDeprecated(const QString &);
static bool handleXRefItem(const QString &);
static bool handleRelated(const QString &);
static bool handleRelatedAlso(const QString &);
static bool handleMemberOf(const QString &);
static bool handleRefItem(const QString &);
static bool handleSection(const QString &);
static bool handleAnchor(const QString &);
static bool handleCite(const QString &);
static bool handleFormatBlock(const QString &);
static bool handleAddIndex(const QString &);
static bool handleIf(const QString &);
static bool handleIfNot(const QString &);
static bool handleElseIf(const QString &);
static bool handleElse(const QString &);
static bool handleEndIf(const QString &);
static bool handleIngroup(const QString &);
static bool handleNoSubGrouping(const QString &);
static bool handleShowInitializer(const QString &);
static bool handleHideInitializer(const QString &);
static bool handleCallgraph(const QString &);
static bool handleHideCallgraph(const QString &);
static bool handleCallergraph(const QString &);
static bool handleHideCallergraph(const QString &);
static bool handleInternal(const QString &);
static bool handleLineBr(const QString &);
static bool handleStatic(const QString &);
static bool handlePure(const QString &);
static bool handlePrivate(const QString &);
static bool handlePrivateSection(const QString &);
static bool handleProtected(const QString &);
static bool handleProtectedSection(const QString &);
static bool handlePublic(const QString &s);
static bool handlePublicSection(const QString &s);
static bool handleToc(const QString &s);
static bool handleInherit(const QString &);
static bool handleExtends(const QString &);
static bool handleCopyDoc(const QString &);
static bool handleCopyBrief(const QString &);
static bool handleCopyDetails(const QString &);
static bool handleParBlock(const QString &);
static bool handleEndParBlock(const QString &);
static void handleGuard(const QString &expr);
static bool handleParam(const QString &);
static bool handleRetval(const QString &);

static void checkFormula();

using DocCmdFunc = bool (*)(const QString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            false },
  { "short",           &handleBrief,            false },
  { "fn",              &handleFn,               false },
  { "var",             &handleFn,               false },
  { "typedef",         &handleFn,               false },
  { "property",        &handleFn,               false },
  { "def",             &handleDef,              false },
  { "overload",        &handleOverload,         false },
  { "enum",            &handleEnum,             false },
  { "defgroup",        &handleDefGroup,         false },
  { "group",           &handleDefGroup,         false },
  { "addtogroup",      &handleAddToGroup,       false },
  { "weakgroup",       &handleWeakGroup,        false },
  { "namespace",       &handleNamespace,        false },
  { "package",         &handlePackage,          false },
  { "class",           &handleClass,            false },
  { "headerfile",      &handleHeaderFile,       false },
  { "protocol",        &handleProtocol,         false },
  { "category",        &handleCategory,         false },
  { "union",           &handleUnion,            false },
  { "struct",          &handleStruct,           false },
  { "interface",       &handleInterface,        false },
  { "idlexcept",       &handleIdlException,     false },
  { "page",            &handlePage,             false },
  { "mainpage",        &handleMainpage,         false },
  { "file",            &handleFile,             false },
  { "dir",             &handleDir,              false },
  { "example",         &handleExample,          false },
  { "details",         &handleDetails,          true  },
  { "name",            &handleName,             false },
  { "todo",            &handleTodo,             false }, // end brief will be done differently
  { "test",            &handleTest,             false }, // end brief will be done differently
  { "bug",             &handleBug,              false }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       false }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         false }, // end brief will be done differently
  { "related",         &handleRelated,          true  },
  { "relates",         &handleRelated,          true  },
  { "relatedalso",     &handleRelatedAlso,      true  },
  { "relatesalso",     &handleRelatedAlso,      true  },
  { "parblock",        &handleParBlock,         true  },
  { "endparblock",     &handleEndParBlock,      true  },
  { "refitem",         &handleRefItem,          true  },
  { "cite",            &handleCite,             false },
  { "subpage",         &handleSubpage,          true  },
  { "section",         &handleSection,          true  },
  { "subsection",      &handleSection,          true  },
  { "subsubsection",   &handleSection,          true  },
  { "paragraph",       &handleSection,          true  },
  { "anchor",          &handleAnchor,           true  },
  { "verbatim",        &handleFormatBlock,      true  },
  { "latexonly",       &handleFormatBlock,      false },
  { "htmlonly",        &handleFormatBlock,      false },
  { "xmlonly",         &handleFormatBlock,      false },
  { "docbookonly",     &handleFormatBlock,      false },
  { "rtfonly",         &handleFormatBlock,      false },
  { "manonly",         &handleFormatBlock,      false },
  { "dot",             &handleFormatBlock,      true  },
  { "msc",             &handleFormatBlock,      true  },
  { "startuml",        &handleFormatBlock,      true  },
  { "code",            &handleFormatBlock,      true  },
  { "addindex",        &handleAddIndex,         false },
  { "if",              &handleIf,               false },
  { "ifnot",           &handleIfNot,            false },
  { "elseif",          &handleElseIf,           false },
  { "else",            &handleElse,             false },
  { "endif",           &handleEndIf,            false },
  { "ingroup",         &handleIngroup,          false },
  { "nosubgrouping",   &handleNoSubGrouping,    false },
  { "showinitializer", &handleShowInitializer,  false },
  { "hideinitializer", &handleHideInitializer,  false },
  { "callgraph",       &handleCallgraph,        false },
  { "hidecallgraph",   &handleHideCallgraph,    false },
  { "callergraph",     &handleCallergraph,      false },
  { "hidecallergraph", &handleHideCallergraph,  false },
  { "internal",        &handleInternal,         true  },
  { "_linebr",         &handleLineBr,           false },
  { "static",          &handleStatic,           false },
  { "pure",            &handlePure,             false },
  { "private",         &handlePrivate,          false },
  { "privatesection",  &handlePrivateSection,   false },
  { "protected",       &handleProtected,        false },
  { "protectedsection",&handleProtectedSection, false },
  { "public",          &handlePublic,           false },
  { "publicsection",   &handlePublicSection,    false },
  { "tableofcontents", &handleToc,              false },
  { "inherit",         &handleInherit,          true  },
  { "extends",         &handleExtends,          true  },
  { "implements",      &handleExtends,          true  },
  { "memberof",        &handleMemberOf,         true  },
  { "arg",             0,                       true  },
  { "attention",       0,                       true  },
  { "author",          0,                       true  },
  { "authors",         0,                       true  },
  { "copydoc",         &handleCopyDoc,          true  },
  { "copybrief",       &handleCopyBrief,        false },
  { "copydetails",     &handleCopyDetails,      true  },
  { "copyright",       0,                       true  },
  { "date",            0,                       true  },
  { "dotfile",         0,                       true  },
  { "htmlinclude",     0,                       false },
  { "image",           0,                       true  },
  { "include",         0,                       true  },
  { "includelineno",   0,                       true  },
  { "invariant",       0,                       true  },
  { "latexinclude",    0,                       false },
  { "li",              0,                       true  },
  { "line",            0,                       true  },
  { "note",            0,                       true  },
  { "par",             0,                       true  },
  { "param",           &handleParam,            true  },
  { "tparam",          0,                       true  },
  { "post",            0,                       true  },
  { "pre",             0,                       true  },
  { "remark",          0,                       true  },
  { "remarks",         0,                       true  },
  { "result",          0,                       true  },
  { "return",          0,                       true  },
  { "returns",         0,                       true  },
  { "exception",       0,                       true  },
  { "retval",          &handleRetval,           true  },
  { "sa",              0,                       true  },
  { "see",             0,                       true  },
  { "since",           0,                       true  },
  { "throw",           0,                       true  },
  { "throws",          0,                       true  },
  { "until",           0,                       true  },
  { "verbinclude",     0,                       false },
  { "version",         0,                       true  },
  { "warning",         0,                       true  },
  { 0, 0, false }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a specific handler function
 */
class DocCmdMapper
{
 public:
   struct Cmd {
      DocCmdFunc func;
      bool endsBrief;
   };

   /** maps a command name to a handler function */
   static Cmd *map(const QString &name) {
      return instance()->find(name);
   }

   /** release the singleton */
   static void freeInstance() {
      delete s_instance;
      s_instance = 0;
   }

  private:
    static DocCmdMapper *instance() {
      if (s_instance == nullptr) {
         s_instance = new DocCmdMapper;
      }
      return s_instance;
   }

   DocCmdMapper() {
      DocCmdMap *p = docCmdMap;

      while (p->cmdName) {
         if (m_map.contains(p->cmdName)) {
            err("DocCmdMapper: command %s already added\n", p->cmdName);
            Doxy_Work::stopDoxyPress();
         }

         Cmd *cmd       = new Cmd;
         cmd->func      = p->handler;
         cmd->endsBrief = p->endsBrief;

         m_map.insert(p->cmdName, cmd);
         p++;
      }
   }

   Cmd *find(const QString &name) {
      return m_map.value(name);
   }

   QHash<QString, Cmd *> m_map;
   static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance = 0;

#define YY_NEVER_INTERACTIVE 1

enum XRefKind {
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext {
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType {
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
 public:
   GuardedSection(bool enabled, bool parentVisible)
      : m_enabled(enabled), m_parentVisible(parentVisible) {}
   bool isEnabled() const {
      return m_enabled;
   }
   bool parentVisible() const {
      return m_parentVisible;
   }

 private:
   bool m_enabled;
   bool m_parentVisible;
};

void openGroup(QSharedPointer<Entry> e, const QString &file, int line);
void closeGroup(QSharedPointer<Entry> e, const QString &file, int line, bool foundInline = false);
void initGroupInfo(QSharedPointer<Entry> e);
static void groupAddDocs(QSharedPointer<Entry> e);

static ParserInterface *langParser;          // the language parser that is calling us
static QString          inputString;         // input string
static int              inputPosition;       // read pointer
static int              prevPosition;
static char *           s_bufferPosition;

static QString          yyFileName;          // file name that is read from
static int              yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QString          formulaText;         // Running text of a formula
static QString          formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QString         *pOutputString;       // pointer to string to which the output is appended
static QString          outputXRef;          // temp argument of todo/test/../xrefitem commands
static QString          blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         //
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QString          functionProto;       // function prototype

static QStack<GuardedSection> s_guards;      // tracks nested conditional sections (if, ifnot, ..)
static QSharedPointer<Entry>  current;       // working entry

static bool             s_needNewEntry;
static int              s_docBlockContext;

static QString          s_sectionLabel;
static QString          s_sectionTitle;
static int              s_sectionLevel;
static QString          xrefItemKey;
static QString          newXRefItemKey;
static QString          xrefItemTitle;
static QString          xrefListTitle;
static Protection       protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             s_parseMore;

static int              s_condCount;
static int              s_commentCount;
static QString          s_spaceBeforeCmd;
static QString          s_spaceBeforeIf;
static QString          s_copyDocArg;
static QString          s_guardExpr;
static int              s_roundCount;
static bool             s_insideParBlock;

static QStack<QSharedPointer<Grouping>> s_autoGroupStack;

static int              s_memberGroupId = DOX_NOGROUP;
static QString          s_memberGroupHeader;
static QString          s_memberGroupDocs;
static QString          s_memberGroupRelates;
static QString          s_compoundName;

static bool             s_internalDocs;
static bool             s_processInternalDocs = false;

static void initParser()
{
   s_sectionLabel.resize(0);
   s_sectionTitle.resize(0);
   s_memberGroupHeader.resize(0);

   s_insideParBlock = false;
   s_internalDocs   = Config::getBool("internal-docs");
}

static bool getDocSectionName(int s)
{
  switch(s) {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return true;
    default:
      return false;
  }
}

static bool makeStructuralIndicator(Entry::Sections s)
{
  if (getDocSectionName(current->section)) {
    return true;

  } else {
    s_needNewEntry     = true;
    current->section   = s;
    current->fileName  = yyFileName;
    current->startLine = yyLineNr;
    return false;
  }
}
static void lineCount()
{
  for (const char *c = commentscanYYtext ; *c ; ++c) {
    yyLineNr += (*c == '\n') ;
  }
}

static QString stripQuotes(const QString &s)
{
   QString name = s;

   if (name.isEmpty()) {
      return name;
   }

   if (name.at(0) == '"' && name.at(name.length() - 1) == '"') {
      name = name.mid(1, name.length() - 2);
   }

   return name;
}

static void addXRefItem(const QString &listName, const QString &itemTitle, const QString &listTitle, bool append)
{
   QSharedPointer<Entry> docEntry = current; // inBody && previous ? previous : current;

   if (listName.isEmpty()) {
      return;
   }

   auto refList = Doxy_Globals::xrefLists.find(listName);

   if (refList == Doxy_Globals::xrefLists.end()) {
      // new list
      Doxy_Globals::xrefLists.insert(listName, RefList(listName, listTitle, itemTitle));
      refList = Doxy_Globals::xrefLists.find(listName);
   }

   ListItemInfo *listItem;

   for (auto &item : docEntry->m_specialLists) {
      listItem = &item;

      if (listItem->type == listName) {
         break;
      }
   }

   if (listItem && append) {
      // already found item of same type just before this one

      RefItem *item = refList->getRefItem(listItem->itemId);
      assert(item != 0);

      item->text += " <p>";

      if (Doxy_Globals::markdownSupport) {
         item->text += processMarkdown(yyFileName, yyLineNr, current, outputXRef);
      } else {
         item->text += outputXRef;
      }

   } else {
      // new item

      int itemId  = refList->addRefItem();

      // if we have already an item from the same list type (e.g. a second @todo)
      // in the same Entry (i.e. lii!=0) then we reuse its link anchor.

      QString anchorLabel = QString("_%1%2").arg(listName).arg(itemId, 6, 10, QChar('0'));

      RefItem *item = refList->getRefItem(itemId);
      assert(item != 0);

      if (Doxy_Globals::markdownSupport) {
         item->text = processMarkdown(yyFileName, yyLineNr, current, outputXRef);
      } else {
         item->text = outputXRef;
      }

      item->listAnchor = anchorLabel;
      docEntry->addSpecialListItem(listName, itemId);

      QString cmdString = QString("\\xrefitem %1 %2.").arg(listName).arg(itemId);

      if (inBody) {
         docEntry->inbodyDocs += cmdString;
      } else {
         docEntry->doc += cmdString;
      }

      QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorLabel);

      if (si) {
         if (si->lineNr != -1) {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s, line %d)",
                  csPrintable(anchorLabel), csPrintable(si->fileName), si->lineNr);

         } else {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s)",
                  csPrintable(anchorLabel), csPrintable(si->fileName));
         }

      } else {
         si = QMakeShared<SectionInfo>(listName, yyLineNr, anchorLabel, s_sectionTitle, SectionInfo::Anchor, s_sectionLevel);
         Doxy_Globals::sectionDict.insert(anchorLabel, si);
         docEntry->m_anchors.append(*si);
      }
   }

   outputXRef.resize(0);
}

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QString addFormula()
{
   QString formLabel;
   QString fText = formulaText.simplified();

   auto f = Doxy_Globals::formulaDict.find(fText);

   if (f == Doxy_Globals::formulaDict.end()) {
      Formula temp = Formula(fText);

      Doxy_Globals::formulaList.append(temp);
      Doxy_Globals::formulaDict.insert(fText, temp);

      formLabel = QString("\\form#%1").arg(temp.getId());

      Doxy_Globals::formulaNameDict.insert(formLabel, temp);
      f = Doxy_Globals::formulaDict.find(fText);

   } else {
      formLabel = QString("\\form#%1").arg(f->getId());

   }

   for (int i = 0; i < formulaNewLines; i++) {
      formLabel += "@_fakenl";   // add fake newlines to
   }

   // keep the warnings correctly aligned
   return formLabel;
}

static void checkFormula();

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level >= 0 && level < 5) {
      return (SectionInfo::SectionType)level;
   }

   return SectionInfo::Anchor;
}

static void addSection()
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(s_sectionLabel);

   if (si) {
      if (si->lineNr != -1) {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName), si->lineNr);

      } else {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName));
      }

   } else {
      // create a new section element
      s_sectionTitle += QString::fromUtf8(commentscanYYtext).trimmed();

      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, s_sectionLabel, s_sectionTitle,
                  sectionLevelToType(s_sectionLevel), s_sectionLevel);

      // add section to this entry
      current->m_anchors.append(*si);

      // add section to the global dictionary
      Doxy_Globals::sectionDict.insert(s_sectionLabel, si);

      // for a section the si->fileName is the physical file name. this will be replaced with the section name
      // in doctokenizer processSection()
   }
}

static void addCite()
{
   QString text = QString::fromUtf8(commentscanYYtext);
   Doxy_Globals::citeDict.insert(text);
}

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QString &s)
{
   uint len = s.length();

   int i = len - 1;
   QChar c;

   while (i >= 0 && ((c = s.at(i)) == ' ' || c == '\t' || c == '\r')) {
      i--;
   }

   if (i != len - 1) {
      // string up to and including char at pos i and \0 terminator
      s.resize(i + 2);
   }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
   bool xrefAppendToPrev = xrefAppendFlag;

   // determine append flag for the next item (i.e. the end of this item)
   xrefAppendFlag = ! inBody &&
                    inContext == OutputXRef && ctx == OutputXRef &&    // two consecutive xref items
                    newXRefKind == xrefKind &&                         // of the same kind
                    (xrefKind != XRef_Item ||
                    newXRefItemKey == xrefItemKey);                    // with the same key if \xrefitem

   if (inContext == OutputXRef) {

      // end of XRef section => add the item
      // See if we can append this new xref item to the previous one.
      // We know this at the start of the next item of the same
      // type and need to remember this until the end of that item.

    switch(xrefKind) {
         case XRef_Todo:
            addXRefItem("todo", theTranslator->trTodo(), theTranslator->trTodoList(), xrefAppendToPrev);
            break;

         case XRef_Test:
            addXRefItem("test", theTranslator->trTest(), theTranslator->trTestList(), xrefAppendToPrev);
            break;

         case XRef_Bug:
            addXRefItem("bug", theTranslator->trBug(), theTranslator->trBugList(), xrefAppendToPrev);
            break;

         case XRef_Deprecated:
            addXRefItem("deprecated", theTranslator->trDeprecated(), theTranslator->trDeprecatedList(), xrefAppendToPrev);
            break;

         case XRef_Item:  // user defined list
            addXRefItem(xrefItemKey, xrefItemTitle, xrefListTitle, xrefAppendToPrev);
            break;

         case XRef_None:
            assert(0);
            break;
      }
   }

  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;

   if (inContext != OutputXRef && inBody) {
      inContext = OutputInbody;
   }

  switch(inContext) {
      case OutputDoc:
         if (oldContext != inContext) {
            stripTrailingWhiteSpace(current->doc);

            if (current->docFile.isEmpty()) {
               current->docFile = yyFileName;
               current->docLine = yyLineNr;
            }
         }
         pOutputString = &current->doc;
         break;

      case OutputBrief:
         if (oldContext != inContext) {

            if (current->briefFile.isEmpty()) {
               current->briefFile = yyFileName;
               current->briefLine = yyLineNr;
            }
         }

         if (current->brief.trimmed().isEmpty())  {
            // we only want one brief description even if multiple are given
            pOutputString = &current->brief;

         } else {
            pOutputString = &current->doc;
            inContext = OutputDoc;             // need to switch to detailed docs, see bug 631380
         }
         break;

      case OutputXRef:
         pOutputString = &outputXRef;
         // first item found, so can not append to previous
         // xrefAppendFlag = false;
         break;

      case OutputInbody:
         pOutputString = &current->inbodyDocs;
         break;
   }
}

static void addAnchor(const QString &anchorName)
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorName);

   if (si) {
      // anchor name already exists
      si->dupAnchor_cnt++;

   } else {
      // title is empty, level is zero
      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, anchorName, QString(""), SectionInfo::Anchor, 0);
      si->dupAnchor_fName = yyFileName;

      Doxy_Globals::sectionDict.insert(anchorName, si);
      current->m_anchors.append(*si);
   }
}

// add a string in the output
static inline void addOutput(const QString &s)
{
   *pOutputString += s;
}

static inline void addOutput(QChar s)
{
   *pOutputString += s;
}

static void endBrief(bool addToOutput = true)
{
   if (! current->brief.trimmed().isEmpty()) {
      // only go to the detailed description if we have
      // found some brief description and not just whitespace

      briefEndsAtDot = false;
      setOutput(OutputDoc);

      if (addToOutput) {
         QString text = QString::fromUtf8(commentscanYYtext);
         addOutput(text);
      }
   }
}

static void handleGuard(const QString &expr);

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   s_bufferPosition = buf;

   prevPosition = inputPosition;
   int c = 0;

   while (inputString[inputPosition] != 0) {

      QString tmp1    = inputString.at(inputPosition);
      QByteArray tmp2 = tmp1.toUtf8();

      if (c + tmp2.length() >= max_size)  {
         // buffer is full
         break;
      }

      c += tmp2.length();

      for (auto letters : tmp2) {
         *buf = letters;
          buf++;
      }

      inputPosition++;
   }

   return c;
}

/* start command character */
/* comment parsing states */

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define ParamArg1 13
#define EnumDocArg1 14
#define NameSpaceDocArg1 15
#define PackageDocArg1 16
#define GroupDocArg1 17
#define GroupDocArg2 18
#define SectionLabel 19
#define SectionTitle 20
#define SubpageLabel 21
#define SubpageTitle 22
#define FormatBlock 23
#define LineParam 24
#define GuardParam 25
#define GuardParamEnd 26
#define SkipGuardedSection 27
#define SkipInternal 28
#define NameParam 29
#define InGroupParam 30
#define FnParam 31
#define OverloadParam 32
#define InheritParam 33
#define ExtendsParam 34
#define ReadFormulaShort 35
#define ReadFormulaLong 36
#define AnchorLabel 37
#define HtmlComment 38
#define SkipLang 39
#define CiteLabel 40
#define CopyDoc 41
#define GuardExpr 42

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  /* What can happen while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxy\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1154 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 10033 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      // mail address
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // quoted text
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      // directory (or chain of commands)
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
{
      // HTML command ends a brief description
      setOutput(OutputDoc);

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
{
      // HTML command that ends a brief description
      if (current->lang == SrcLangExt_CSharp) {
         setOutput(OutputDoc);
      }

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      // start of a .NET XML style brief description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      setOutput(OutputBrief);
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      setOutput(OutputBrief);
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      setOutput(OutputDoc);
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // end of a brief or detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      QString tag = QString::fromUtf8(commentscanYYtext);

      int s = tag.indexOf("id=");

      if (s != -1) {
         // command has id attribute
         QChar c = tag[s + 3];

         if (c == '\'' || c == '"') {
            // valid start
            int e = tag.indexOf(c,s + 4);

            if (e != -1) {
               // found matching end

               QString id = tag.mid(s + 4, e-s-4);   // extract id
               addAnchor(id);
            }
         }
      }

      addOutput(tag);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      insidePre = true;
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      insidePre = false;
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      // RCS tag which end a brief description
      setOutput(OutputDoc);
      REJECT;
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      BEGIN(HtmlComment);
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      addOutput("\\endinternal ");

      if (! s_processInternalDocs) {
         warn(yyFileName, yyLineNr, "Found \\endinternal without matching \\internal");
      }

      s_processInternalDocs = false;
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      // might be a valid command
      // the {B}* in the front was added for bug620924

      QString text = QString::fromUtf8(commentscanYYtext);

      QString cmdName = text.trimmed().mid(1);
      DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);

      if (cmdPtr) {
         // special action is required

         int i = 0;
         while (text[i] == ' ' || text[i] == '\t') {
            i++;
         }

         s_spaceBeforeCmd = QString(text).left(i);

         if (cmdPtr->endsBrief && ! (inContext == OutputXRef && cmdName == "parblock")) {
            briefEndsAtDot = false;

            // this command forces the end of brief description
            setOutput(OutputDoc);
         }

         if (cmdPtr->func && cmdPtr->func(cmdName)) {
            // implicit split of the comment block into two entries
            // restart the next block at the start of this command

            s_parseMore = true;

            inputPosition = prevPosition + (yy_bp - s_bufferPosition);
            yyterminate();

         } else if (cmdPtr->func == nullptr) {
            // command without handler is processed later by parserdoc.cpp
            addOutput(text);
         }

      } else {
         // command not relevant
         addOutput(text);
      }
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      // escaped formula command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      // language switch command
      static const QString outputLanguage = Config::getEnum("output-language");

      QString text   = QString::fromUtf8(commentscanYYtext);
      QString langId = text.trimmed().mid(2);

      if (! langId.isEmpty() && outputLanguage.compare(langId, Qt::CaseInsensitive) != 0) {
         // enable language specific section
         BEGIN(SkipLang);
      }
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      // start of a formula with custom environment
      QString text = QString::fromUtf8(commentscanYYtext);

      formulaText = "\\begin";
      formulaEnv = text.trimmed().mid(2);

      if (formulaEnv.at(formulaEnv.length() - 1) == '{') {
         // remove trailing open brace
         formulaEnv = formulaEnv.left(formulaEnv.length() - 1);
      }

      formulaText += formulaEnv;
      formulaNewLines = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      // start of a inline formula
      formulaText     = "$";
      formulaNewLines = 0;
      BEGIN(ReadFormulaShort);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      // start of a block formula
      formulaText      = "\\[";
      formulaNewLines  = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      // beginning of a group     
      openGroup(current, yyFileName, yyLineNr);
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      // end of a group
      QString text = QString::fromUtf8(commentscanYYtext);

      closeGroup(current, yyFileName, yyLineNr, true);

      s_memberGroupHeader.clear();
      s_parseMore    = true;
      s_needNewEntry = true;

      inputPosition = prevPosition + (yy_bp - s_bufferPosition) + text.length();
      yyterminate();
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      // escaped character
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      // normal word
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // explicit end autolist: e.g "  ."
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 29:
case 30:
YY_RULE_SETUP
{
      // start of autolist
      if (! Doxy_Globals::markdownSupport) {
         REJECT;

      } else {

         if (inContext != OutputXRef) {
            briefEndsAtDot = false;
            setOutput(OutputDoc);
         }

         QString text = QString::fromUtf8(commentscanYYtext);
         addOutput(text);
      }
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      // start of autolist
      if (inContext != OutputXRef) {
         briefEndsAtDot = false;
         setOutput(OutputDoc);
      }

      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // horizontal line (dashed)
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      // mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&mdash;");
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      // ndash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&ndash;");
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      // numbered item
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      // . at start or in the middle of a word, or ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      // . with escaped space
      QString text = QString::fromUtf8(commentscanYYtext);

      addOutput(text[0]);
      addOutput(text[2]);
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      // . with comma such as "e.g.,"
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      // ellipsis with escaped space
      addOutput("... ");
   }
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // internal ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{
      // at least one blank line (or blank line command)

      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext == OutputXRef) {
         // see bug 613024, need to put the newlines after ending the XRef section.

         if (! s_insideParBlock) {
            setOutput(OutputDoc);
         }

         for (int i = 0; i < text.length();  ) {
            if (text[i] == '\n') {
               addOutput('\n');
               i++;

            } else if (text.mid(i) == "\\_linebr")  {
               addOutput('\n');
               i += 8;

            } else  {
               i++;
            }
         }

      } else if (inContext != OutputBrief) {

         for (int i = 0; i< text.length(); ) {
            if (text[i] == '\n') {
               addOutput('\n');
               i++;

            } else if (text.mid(i) == "\\_linebr")  {
                addOutput('\n');
                i += 8;

            } else  {
               i++;

            }
         }

         setOutput(OutputDoc);

      } else {
          // inContext == OutputBrief
          // only go to the detailed description if we have
          // found some brief description and not just whitespace

         endBrief(false);
      }

      lineCount();
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      // potential end of a JavaDoc style comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);

      if (briefEndsAtDot) {
         setOutput(OutputDoc);
         briefEndsAtDot = false;
      }
   }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{
      // newline
      addOutput('\n');
      yyLineNr++;
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      // catch-all for anything else
      QString text = QString::fromUtf8(commentscanYYtext);

      addOutput(text);
   }
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 47:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      // ignore unimportant characters
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // ignore every else
   }
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 51:
YY_RULE_SETUP
{
      // end of inline formula
      formulaText += "$";
      addOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      // end of block formula
      formulaText += "\\]";
      addOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      // end of custom env formula
      formulaText += "\\end";
      formulaText += formulaEnv;
      addOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // any non-special character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text;
   }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      formulaNewLines++;
      formulaText += text[0];
      yyLineNr++;
   }
	YY_BREAK
case 56:
YY_RULE_SETUP
{
      // any othe character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text[0];
   }
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\enum");

      addOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->name = substitute(text,".", "::");
      BEGIN( Comment );
   }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\namespace");

      addOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 65:
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\package");
      addOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 68:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = substitute(removeRedundantWhiteSpace(text),".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->name = substitute(text,".","::");
      if (current->section == Entry::PROTOCOLDOC_SEC) {
         current->name+="-p";
      }

      // prepend outer scope name
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->name = substitute(text,".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\%s",
                  YY_START == ClassDocArg1 ? "class" : "category" );

      addOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 74:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      // second argument, include file
      QString text = QString::fromUtf8(commentscanYYtext);
      current->includeFile = text;
      BEGIN( ClassDocArg3 );
   }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addOutput('\n');

      if (text[0] == '\n')  {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 78:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 79:
YY_RULE_SETUP
{
      // third argument, include file name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->includeName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] =='\n') {
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of {def,add,weak} group commands --------- */
case 83:
YY_RULE_SETUP
{
      // group name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->name = text;

      // lastDefGroup.groupname = text;
      // lastDefGroup.pri = current->groupingPri();
      // the .html stuff is for Qt compatibility

      if (current->name.endsWith(".html")) {
         current->name = current->name.left(current->name.length()-5);
      }

      current->type.resize(0);
      BEGIN(GroupDocArg2);
   }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing group name after %s", csPrintable(current->groupDocCmd()) );

      addOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      // title (stored in type)
      QString text = QString::fromUtf8(commentscanYYtext);
      current->type += text.trimmed();
   }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if ( current->groupDocType == Entry::GROUPDOC_NORMAL && current->type.isEmpty()) {
            // defgroup requires second argument
            warn(yyFileName, yyLineNr, "Missing title after \\defgroup %s",
                  csPrintable(current->name) );
      }

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 89:
YY_RULE_SETUP
{
      // first argument; page name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->name = stripQuotes(text);
      BEGIN( PageDocArg2 );
   }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      // missing arguement
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\page");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{
      // second argument; page title
      QString text = QString::fromUtf8(commentscanYYtext);

      yyLineNr++;
      current->args = text;

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the param command ------------ */
case 94:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addOutput('\\');
      }

      addOutput(text);
   }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
      addOutput(" , ");
   }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addOutput('\\');
      }

      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ 
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{
      // no file name specfied
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
      // first argument; name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = stripQuotes(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 102:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      newXRefItemKey = text;
      setOutput(OutputXRef);

      BEGIN(XRefItemParam2);
   }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{
      // missing arguments
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing first argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      inContext = OutputDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
      // second argument
      QString text = QString::fromUtf8(commentscanYYtext);
      xrefItemTitle = stripQuotes(text);
      BEGIN(XRefItemParam3);
   }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing second argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      inContext = OutputDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
      // third argument
      QString text = QString::fromUtf8(commentscanYYtext);

      xrefListTitle = stripQuotes(text);
      xrefKind = XRef_Item;

      BEGIN( Comment );
   }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr,"Missing third argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      inContext = OutputDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 114:
YY_RULE_SETUP
{
      // argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->relates = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument of \\relates or \\memberof command");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 121:
YY_RULE_SETUP
{
      // first argyment
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionLabel = text;
      addOutput(text);
      s_sectionTitle.resize(0);

      BEGIN(SectionTitle);
   }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\section command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      // invalid character for section label
      warn(yyFileName, yyLineNr, "Invalid or missing section label");
      BEGIN(Comment);
   }
	YY_BREAK
case 124:
/* rule 124 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 125:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      // any character without special meaning
      QString text = QString::fromUtf8(commentscanYYtext);
      s_sectionTitle += text;
      addOutput(text);
   }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
      // unescape escaped command
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text.mid(1);
      addOutput(text);
   }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
      // unescape escaped character
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text[1];
      addOutput(text);
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      // anything else
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text;
      addOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 131:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      // we add subpage labels as a kind of "inheritance" relation to prevent
      // needing to add another list to the Entry class.

      current->extends.append(BaseInfo(text, Public, Normal));
      BEGIN(SubpageTitle);
   }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\subpage command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{
      // no title, end command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
      // add title, end of command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
      // no title, end of command
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 136:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addAnchor(text);
      addOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\anchor command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing anchor label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 139:
/* rule 139 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // possible ends
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      if (text.mid(4) == blockName)  {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      if (blockName == "startuml")   {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      // some word
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
   }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      // start of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);

      s_commentCount++;
      addOutput(text);
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      // end of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      s_commentCount--;

      if (s_commentCount < 0 && blockName != "verbatim") {
         warn(yyFileName, yyLineNr, "Found */ without matching /* while inside a \\%s block. "
            "Perhaps there is a missing \\end%s?\n", csPrintable(blockName), csPrintable(blockName));
      }
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
{
      QString endTag = "@end" + blockName;

      if (blockName == "startuml") {
         endTag = "enduml";
      }

      warn(yyFileName, yyLineNr, "Reached end of comment while inside a @%s block, check for missing @%s tag",
                 csPrintable(blockName), csPrintable(endTag) );

      yyterminate();
   }
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 146:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr  = text;
      s_roundCount = 1;
      BEGIN(GuardExpr);
   }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
      s_roundCount++;
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
      s_roundCount--;

      if (s_roundCount == 0) {
         handleGuard(s_guardExpr);
      }
   }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{
      warn(yyFileName, yyLineNr, "Invalid expression '%s' for guard", csPrintable(s_guardExpr));
      unput(commentscanYYtext[0]);
      BEGIN(GuardParam);
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
{
      // parameter of if/ifnot guard
      QString text = QString::fromUtf8(commentscanYYtext);
      handleGuard(text);
   }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // next line is commented out due to bug620924
      // addOutput('\n');

      BEGIN( Comment );
   }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
{
      s_spaceBeforeIf.resize(0);
      BEGIN(Comment);
   }
	YY_BREAK
case 156:
YY_RULE_SETUP
{
      if (! s_spaceBeforeIf.isEmpty()) {
         // needed for 665313 in combation with bug620924

         addOutput(s_spaceBeforeIf);
      }

      s_spaceBeforeIf.resize(0);
      BEGIN(Comment);
   }
	YY_BREAK
case 157:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 158:
/* rule 158 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      guardType = Guard_IfNot;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 159:
/* rule 159 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      guardType = Guard_If;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 160:
/* rule 160 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found @endif without matching start command");

       } else {
         GuardedSection s   = s_guards.pop();
         bool parentVisible = s.parentVisible();        

         if (parentVisible) {
            enabledSectionFound = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 161:
/* rule 161 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName, yyLineNr, "Found @else without matching start command");

      } else {

         if (! enabledSectionFound && s_guards.top().parentVisible()) {
            s_guards.pop();
            s_guards.push(GuardedSection(true,true));

            enabledSectionFound = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 162:
/* rule 162 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found @elseif without matching start command");

       } else {

         if (! enabledSectionFound && s_guards.top().parentVisible()) {
            guardType = Guard_If;
            s_guards.pop();

            BEGIN( GuardParam );
         }
      }
   }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // addOutput('\n');
   }
	YY_BREAK
case 164:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 165:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addOutput('\n');
   }
	YY_BREAK
case 167:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 169:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount--;

      if (s_condCount < 0 )   {
         // handle conditional section around \internal, see bug607743

         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 170:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 0 ) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 171:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 1)  {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 172:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 2) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 173:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 3) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
{
      addOutput("\\endinternal ");
      BEGIN(Comment);
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle argument of name command ------- */
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
      s_memberGroupHeader+=' ';
   }
	YY_BREAK
case 179:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_memberGroupHeader += text[0];
      current->name       += text[0];
   }
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 180:
YY_RULE_SETUP
{
      // group id
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_groups.append(Grouping(text, Grouping::GROUPING_INGROUP) );
      inGroupParamFound = true;
   }
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! inGroupParamFound) {
         warn(yyFileName,yyLineNr, "Missing group name for \\ingroup command");
      }

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (braceCount == 0) {
         if (text[0] == '\n')   {
            yyLineNr++;
         }

         addOutput('\n');

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(functionProto);
         }   

         BEGIN( Comment );
      }
   }
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      functionProto += ' ';
   }
	YY_BREAK
case 186:
YY_RULE_SETUP
{
      // non-special characters
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
   }
	YY_BREAK
case 187:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
      braceCount++;
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
      braceCount--;
   }
	YY_BREAK
case 189:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')  {
         yyLineNr++;
      }

      if (functionProto.trimmed().isEmpty()) {
         // plain overload command
         addOutput(theTranslator->trOverloadText());
         addOutput('\n');

      }  else   {
         // overload declaration
         makeStructuralIndicator(Entry::OVERLOADDOC_SEC);

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(functionProto);
         }
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      functionProto += ' ';
   }
	YY_BREAK
case 192:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 193:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text), Public, Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\inherit command has no argument");

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 195:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing name for \\inherit command");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 196:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text),Public,Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName,yyLineNr, "\\extends or \\implements command has no argument");

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 198:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle language specific sections ------- */
case 199:
YY_RULE_SETUP
{
      /* language switch */
      QString text = QString::fromUtf8(commentscanYYtext);
      QString langId = text.mid(2);

      if (langId.isEmpty() || Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) == 0) {
         // enable language specific section
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 200:
YY_RULE_SETUP
{
      /* any character not a *, @, backslash or new line */
   }
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
{
      /* new line in verbatim block */
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 202:
YY_RULE_SETUP
{
      /* any other character */
   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 203:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addCite();
      addOutput(text);
      BEGIN(Comment);
   }
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\cite command has no label" );

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 205:
YY_RULE_SETUP
{
      // invalid character for cite label
      warn(yyFileName,yyLineNr, "Invalid or missing cite label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addOutput('\n');

      setOutput(OutputDoc);
      addOutput("\\copydetails ");
      addOutput(s_copyDocArg);

      addOutput("\n");

      BEGIN(Comment);
   }
	YY_BREAK
case 207:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addOutput(text);
   }
	YY_BREAK
case 208:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addOutput(text);
   }
	YY_BREAK
case 209:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(ParamArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1154 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1154 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1153);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static bool handleBrief(const QString &)
{
   setOutput(OutputBrief);
   return false;
}

static bool handleFn(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   functionProto.resize(0);
   braceCount = 0;
   BEGIN(FnParam);

   return stop;
}

static bool handleDef(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::DEFINEDOC_SEC);
   functionProto.resize(0);
   BEGIN(FnParam);
   return stop;
}

static bool handleOverload(const QString &)
{
   functionProto.resize(0);
   BEGIN(OverloadParam);
   return false;
}

static bool handleEnum(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::ENUMDOC_SEC);
   BEGIN(EnumDocArg1);
   return stop;
}

static bool handleDefGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_NORMAL;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleAddToGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_ADD;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleWeakGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_WEAK;
   BEGIN( GroupDocArg1 );
   return stop;
}

static bool handleNamespace(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
   BEGIN( NameSpaceDocArg1 );
   return stop;
}

static bool handlePackage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
   BEGIN( PackageDocArg1 );
   return stop;
}

static bool handleClass(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::CLASSDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleHeaderFile(const QString &)
{
   BEGIN( ClassDocArg2 );
   return false;
}

static bool handleProtocol(const QString &)
{
   // Obj-C protocol
   bool stop = makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleCategory(const QString &)
{
   // Obj-C category
   bool stop = makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
   BEGIN( CategoryDocArg1 );
   return stop;
}

static bool handleUnion(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::UNIONDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleStruct(const QString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleInterface(const QString &)
{
  bool stop = makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleIdlException(const QString &)
{
  bool stop = makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handlePage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::PAGEDOC_SEC);
   BEGIN( PageDocArg1 );
   return stop;
}

static bool handleMainpage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);

   if (! stop) {
      current->name = "mainpage";
   }

   BEGIN( PageDocArg2 );
   return stop;
}

static bool handleFile(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::FILEDOC_SEC);

   if (! stop) {
      current->name = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleParam(const QString &)
{
  // process param and retval arguments to escape leading underscores
  // in case of markdown processing

  addOutput("@param ");
  BEGIN( ParamArg1 );

  return false;
}

static bool handleRetval(const QString &)
{
  addOutput("@retval ");
  BEGIN( ParamArg1 );

  return false;
}

static bool handleDir(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::DIRDOC_SEC);

   if (! stop) {
      current->name = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleExample(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::EXAMPLE_SEC);

   if (! stop) {
      current->name = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleDetails(const QString &)
{
   if (inContext != OutputBrief) {
      // treat @details outside brief description as a new paragraph
      addOutput("\n\n");
   }

   setOutput(OutputDoc);
   return false;
}

static bool handleName(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERGRP_SEC);

   if (! stop) {
      s_memberGroupHeader.resize(0);
      BEGIN( NameParam );

      if (s_memberGroupId != DOX_NOGROUP) {
         // end of previous member group

         closeGroup(current,yyFileName,yyLineNr,true);
       }
  }

  return stop;
}

static bool handleTodo(const QString &)
{
   newXRefKind = XRef_Todo;
   setOutput(OutputXRef);
   xrefKind = XRef_Todo;
   return false;
}

static bool handleTest(const QString &)
{
   newXRefKind = XRef_Test;
   setOutput(OutputXRef);
   xrefKind = XRef_Test;
   return false;
}

static bool handleBug(const QString &)
{
   newXRefKind = XRef_Bug;
   setOutput(OutputXRef);
   xrefKind = XRef_Bug;
   return false;
}

static bool handleDeprecated(const QString &)
{
   newXRefKind = XRef_Deprecated;
   setOutput(OutputXRef);
   xrefKind = XRef_Deprecated;
   return false;
}

static bool handleXRefItem(const QString &)
{
   newXRefKind = XRef_Item;
   BEGIN(XRefItemParam1);
   return false;
}

static bool handleParBlock(const QString &)
{
   if (s_insideParBlock)   {
      warn(yyFileName,yyLineNr, "Found \\parblock command while already in a parblock");
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addOutput("@parblock ");
   s_insideParBlock = true;

   return false;
}

static bool handleEndParBlock(const QString &)
{
   if (! s_insideParBlock) {
     warn(yyFileName,yyLineNr, "Found \\endparblock command without matching \\parblock");
   }

   addOutput("@endparblock");
   setOutput(OutputDoc); // to end a parblock inside a xrefitem like context
   s_insideParBlock = false;

   return false;
}

static bool handleRelated(const QString &)
{
   BEGIN(RelatesParam1);
   return false;
}

static bool handleRelatedAlso(const QString &)
{
   current->relatesType = Duplicate;
   BEGIN(RelatesParam1);
   return false;
}

static bool handleMemberOf(const QString &)
{
   current->relatesType = MemberOf;
   BEGIN(RelatesParam1);
   return false;
}

static bool handleRefItem(const QString &)
{
   addOutput("@refitem ");
   BEGIN(LineParam);
   return false;
}

static bool handleSection(const QString &s)
{
   setOutput(OutputDoc);
   addOutput("@"+s+" ");
   BEGIN(SectionLabel);

   if (s == "section") {
      s_sectionLevel = 1;

   } else if (s == "subsection") {
      s_sectionLevel = 2;

   } else if (s == "subsubsection") {
      s_sectionLevel = 3;

   } else if (s == "paragraph") {
      s_sectionLevel = 4;

   }

   return false;
}

static bool handleSubpage(const QString &s)
{
   if (current->section != Entry::EMPTY_SEC && current->section != Entry::PAGEDOC_SEC &&
         current->section != Entry::MAINPAGEDOC_SEC) {

      warn(yyFileName,yyLineNr, "Found \\subpage command in a comment block that is not marked as a page");
  }

  if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
  }

   addOutput("@"+s+" ");
   BEGIN(SubpageLabel);

   return false;
}

static bool handleAnchor(const QString &s)
{
   addOutput("@"+s+" ");
   BEGIN(AnchorLabel);
   return false;
}

static bool handleCite(const QString &s)
{
   if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addOutput("@" + s + " ");
   BEGIN(CiteLabel);
   return false;
}

static bool handleFormatBlock(const QString &s)
{
   addOutput("@" + s + " ");

   blockName      = s;
   s_commentCount = 0;
   BEGIN(FormatBlock);

   return false;
}

static bool handleAddIndex(const QString &)
{
   addOutput("@addindex ");
   BEGIN(LineParam);
   return false;
}

static bool handleIf(const QString &)
{
   enabledSectionFound = false;
   guardType = Guard_If;
   s_spaceBeforeIf = s_spaceBeforeCmd;
   BEGIN(GuardParam);
   return false;
}

static bool handleIfNot(const QString &)
{
   enabledSectionFound = false;
   guardType = Guard_IfNot;
   s_spaceBeforeIf = s_spaceBeforeCmd;
   BEGIN(GuardParam);
   return false;
}

static bool handleElseIf(const QString &)
{
   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      guardType = enabledSectionFound ? Guard_Skip : Guard_If;
      BEGIN(GuardParam);
   }

   return false;
}

static bool handleElse(const QString &)
{
   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      BEGIN( SkipGuardedSection );
   }

   return false;
}

static bool handleEndIf(const QString &)
{
   if (s_guards.isEmpty())   {
      warn(yyFileName,yyLineNr, "Found \\endif without matching start command");

   } else {
      s_guards.pop();
   }

   enabledSectionFound = false;
   if (! s_spaceBeforeCmd.isEmpty()) {
      addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   BEGIN( GuardParamEnd );
   return false;
}

static bool handleIngroup(const QString &)
{
   inGroupParamFound = false;
   BEGIN( InGroupParam );
   return false;
}

static bool handleNoSubGrouping(const QString &)
{
   current->subGrouping = false;
   return false;
}

static bool handleShowInitializer(const QString &)
{
   current->initLines = 100000;  // ON
   return false;
}

static bool handleHideInitializer(const QString &)
{
   current->initLines = 0;
   return false;
}

static bool handleCallgraph(const QString &)
{
   current->callGraph = true;
   return false;
}

static bool handleHideCallgraph(const QString &)
{
   current->callGraph = false;
   return false;
}

static bool handleCallergraph(const QString &)
{
   current->callerGraph = true;
   return false;
}

static bool handleHideCallergraph(const QString &)
{
   current->callerGraph = false;
   return false;
}

static bool handleInternal(const QString &)
{
   if (s_internalDocs) {
      // re-enabled for bug640828
      addOutput("\\internal ");
      s_processInternalDocs = true;

   } else {
      // make sure some whitespace before an \internal command
      // is not treated as "documentation"

      if (current->doc.trimmed().isEmpty()) {
         current->doc.resize(0);
      }

      s_condCount = 0;
      BEGIN( SkipInternal );
  }

  return false;
}

static bool handleLineBr(const QString &)
{
   addOutput('\n');
   return false;
}

static bool handleStatic(const QString &)
{
   endBrief();
   current->stat = true;
   return false;
}

static bool handlePure(const QString &)
{
   endBrief();
   current->virt = Pure;
   return false;
}

static bool handlePrivate(const QString &)
{
  current->protection = Private;
  return false;
}

static bool handlePrivateSection(const QString &)
{
   current->protection = protection = Private;
   return false;
}

static bool handleProtected(const QString &)
{
   current->protection = Protected;
   return false;
}

static bool handleProtectedSection(const QString &)
{
   current->protection = protection = Protected ;
   return false;
}

static bool handlePublic(const QString &)
{
   current->protection = Public;
   return false;
}

static bool handlePublicSection(const QString &)
{
   current->protection = protection = Public;
   return false;
}

static bool handleToc(const QString &)
{
   if (current->section == Entry::PAGEDOC_SEC || current->section==Entry::MAINPAGEDOC_SEC) {
      current->stat = true;  // we 'abuse' stat to pass whether or the TOC is enabled
   }
   return false;
}

static bool handleInherit(const QString &)
{
   BEGIN(InheritParam);
   return false;
}

static bool handleExtends(const QString &)
{
   BEGIN(ExtendsParam);
   return false;
}

static bool handleCopyBrief(const QString &)
{
   if (current->brief.isEmpty() && current->doc.isEmpty()) {

      // if we don't have a brief or detailed description yet,
      // then the @copybrief should end up in the brief description.
      // otherwise it will be copied inline (see bug691315 & bug700788)

      setOutput(OutputBrief);
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addOutput("\\copybrief ");
   return false;
}

static bool handleCopyDetails(const QString &)
{
   setOutput(OutputDoc);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addOutput("\\copydetails ");
   return false;
}

static bool handleCopyDoc(const QString &)
{
   setOutput(OutputBrief);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addOutput("\\copybrief ");
   s_copyDocArg.resize(0);
   BEGIN(CopyDoc);

   return false;
}

static void checkFormula()
{
   if (YY_START == ReadFormulaShort || YY_START == ReadFormulaLong) {
      warn(yyFileName, yyLineNr, "End of comment block while inside formula.");
   }
}

// main entry point
bool parseCommentBlock(ParserInterface *parser, QSharedPointer<Entry> curEntry, const QString &comment,
                  const QString &fileName, int &lineNr, bool isBrief, bool isAutoBrief, bool isInbody,
                  Protection &r_protection, int &r_position, bool &r_newEntryNeeded )
{
   initParser();
   s_guards.clear();
 
   if (comment.isEmpty()) {
      // avoid empty strings
      return false;
   }

   langParser     = parser;
   current        = curEntry;
   inputString    = comment; 
   yyFileName     = fileName;
   yyLineNr       = lineNr;
   briefEndsAtDot = isAutoBrief;
   inBody         = isInbody;

   protection     = r_protection;
   inputPosition  = r_position;  
   
   xrefKind       = XRef_None;
   xrefAppendFlag = false;
   insidePre      = false;
   s_needNewEntry = false;
   s_parseMore    = false;   

   outputXRef.clear();
   inputString.append(" ");

   if (isBrief || isAutoBrief) {
      setOutput(OutputBrief);

   } else {
      setOutput(OutputDoc);
   }
 
   s_condCount    = 0;
   s_sectionLevel = 0;

   s_spaceBeforeCmd.clear();
   s_spaceBeforeIf.clear();
 
   if (! current->doc.isEmpty()) {
      // separate detailed doc fragments
      current->doc += "\n\n";
   }

   if (! current->inbodyDocs.isEmpty() && isInbody) {
      // separate in body fragments
      current->inbodyDocs += "\n\n";
   }
  
   commentscanYYrestart(commentscanYYin);
   BEGIN( Comment );

   commentscanYYlex();
   setOutput(OutputDoc);

   if (YY_START == OverloadParam) {
      // comment ended with \overload
      addOutput(theTranslator->trOverloadText());
   }

   if (! s_guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Documentation block ended in the middle of a conditional section");
   }

   if (s_insideParBlock) {
      warn(yyFileName, yyLineNr, "Documentation block ended while inside a \\parblock. Missing \\endparblock");
   }

   // removes blank lines from the detailed docs
   current->doc = trimEmptyLines(current->doc, current->docLine);

   if (current->section == Entry::FILEDOC_SEC && current->doc.isEmpty()) {
      // to allow a comment block with just a @file command
      current->doc = "\n\n";
   }

   if (current->section == Entry::MEMBERGRP_SEC && s_memberGroupId == DOX_NOGROUP) {
      // @name section but no group started yet
      openGroup(current, yyFileName, yyLineNr);
   }

   if (Doxy_Globals::markdownSupport) {
      current->brief      = processMarkdown(fileName, lineNr, current, current->brief);
      current->doc        = processMarkdown(fileName, lineNr, current, current->doc);
      current->inbodyDocs = processMarkdown(fileName, lineNr, current, current->inbodyDocs);
   }

   checkFormula();
   r_protection = protection;

   groupAddDocs(curEntry);
   r_newEntryNeeded = s_needNewEntry;

   if (s_parseMore && r_position == inputPosition) {
      // did not proceed during this call, do not continue or there will be an infinate loop
      s_parseMore = false;
   }

   if (s_parseMore) {
      r_position = inputPosition;
   } else {
      r_position = 0;
   }

   lineNr = yyLineNr;

   return s_parseMore;
}

void groupEnterFile(const QString &fileName, int)
{
   s_autoGroupStack.clear();
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupDocs.clear();
   s_memberGroupRelates.clear();
   s_compoundName = fileName;
}

void groupLeaveFile(const QString &fileName, int line)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();

   if (! s_autoGroupStack.isEmpty()) {
      warn(fileName, line, "End of file while inside a group\n");
   }
}

void groupEnterCompound(const QString &fileName, int line, const QString &name)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      warn(fileName, line, "Try to put compound %s inside a member group\n", qPrintable(name));
   }

   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();
   s_compoundName = name;

   int i = s_compoundName.indexOf('(');

   if (i != -1) {
      // strip category (Obj-C)
      s_compoundName=s_compoundName.left(i);
   }

   if (s_compoundName.isEmpty()) {
      s_compoundName=fileName;
   }
}

void groupLeaveCompound(const QString &, int, const QString &)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);
   s_compoundName.resize(0);
}

static int findExistingGroup(int &groupId, const QSharedPointer<MemberGroupInfo> info)
{
   for (auto di = Doxy_Globals::memGrpInfoDict.begin(); di != Doxy_Globals::memGrpInfoDict.end(); ++di) {

      auto mi = *di;

      if (s_compoundName == mi->compoundName && ! mi->header.isEmpty() &&
               mi->header.compare(info->header, Qt::CaseInsensitive) == 0) {

         // same file or scope, not a nameless group, same header name

         return (int)di.key();    // put the item in this group
      }
   }

   groupId++; // start new group
   return groupId;
}

void openGroup(QSharedPointer<Entry> e, const QString &, int)
{
   if (e->section == Entry::GROUPDOC_SEC) {
      // auto group
      s_autoGroupStack.push( QMakeShared<Grouping>(e->name, e->groupingPri()) );

   } else {
      // start of a member group

      if (s_memberGroupId == DOX_NOGROUP) {
         // no group started yet
         static int curGroupId = 0;

         QSharedPointer<MemberGroupInfo> info = QMakeShared<MemberGroupInfo>();

         info->header = s_memberGroupHeader.trimmed();
         info->compoundName = s_compoundName;
         s_memberGroupId = findExistingGroup(curGroupId, info);

         Doxy_Globals::memGrpInfoDict.insert(s_memberGroupId, info);

         s_memberGroupRelates = e->relates;
         e->mGrpId = s_memberGroupId;
      }
   }
}

void closeGroup(QSharedPointer<Entry> e, const QString &fileName, int line, bool foundInline)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      // end of member group

      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         // known group
         info->doc = s_memberGroupDocs;
         info->docFile = fileName;
         info->docLine = line;
      }

      s_memberGroupId = DOX_NOGROUP;
      s_memberGroupRelates.resize(0);
      s_memberGroupDocs.resize(0);

      if (! foundInline) {
         e->mGrpId = DOX_NOGROUP;
      }

   } else if (! s_autoGroupStack.isEmpty()) {
      // end of auto group
      QSharedPointer<Grouping> grp = s_autoGroupStack.pop();

      // see bug577005: we should not remove the last group for e
      if (! foundInline) {
         e->m_groups.removeLast();
      }

      if (! foundInline) {
         initGroupInfo(e);
      }
   }
}

void initGroupInfo(QSharedPointer<Entry> e)
{
   e->mGrpId  = s_memberGroupId;
   e->relates = s_memberGroupRelates;

   if (! s_autoGroupStack.isEmpty()) {
      e->m_groups.append(*s_autoGroupStack.top());
   }
}

static void groupAddDocs(QSharedPointer<Entry> e)
{
   if (e->section == Entry::MEMBERGRP_SEC) {
      s_memberGroupDocs = e->brief.trimmed();
      e->doc = trimEmptyLines(e->doc, e->docLine);

      if (! s_memberGroupDocs.isEmpty() && ! e->doc.isEmpty()) {
         s_memberGroupDocs+="\n\n";
      }

      s_memberGroupDocs += e->doc;
      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         info->doc     = s_memberGroupDocs;
         info->docFile = e->docFile;
         info->docLine = e->docLine;
         info->setRefItems(e->m_specialLists);
      }

      e->doc.resize(0);
      e->brief.resize(0);
   }
}

static void handleGuard(const QString &expr)
{
   CondParser prs;
   bool sectionEnabled = prs.parse(yyFileName, yyLineNr, expr.trimmed());
   bool parentEnabled  = true;

   if (! s_guards.isEmpty()) {
      parentEnabled = s_guards.top().isEnabled();
   }

   if (parentEnabled) {
      if ( (sectionEnabled && guardType == Guard_If) || (! sectionEnabled && guardType == Guard_IfNot)) {
         // section is visible
         s_guards.push(GuardedSection(true, true));
         enabledSectionFound = true;
         BEGIN( GuardParamEnd );

      } else {
         // section is invisible
         if (guardType != Guard_Skip) {
            s_guards.push(GuardedSection(false, true));
         }

         BEGIN( SkipGuardedSection );
      }

   } else {
      // invisible because of parent
      s_guards.push(GuardedSection(false, false));
      BEGIN( SkipGuardedSection );
   }
}

