/************************************************************************
*
* Copyright (c) 2014-2023 Barbara Geller & Ansel Sermersheim
* Copyright (c) 1997-2014 Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 244
#define YY_END_OF_BUFFER 245
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1015] =
    {   0,
      101,  101,  158,  158,  173,  173,  188,  188,  232,  232,
      179,  179,  245,  244,   62,  244,   62,  244,   60,  244,
       62,  244,   62,  244,   62,  244,   62,  244,   59,   62,
      244,   62,  244,   62,  244,   42,   62,  244,   62,  244,
       62,  244,   62,  244,   62,  244,   62,  244,   62,  244,
       62,  244,   59,   62,  244,   62,  244,   62,  244,  120,
      244,  119,  244,  120,  244,  117,  120,  244,  120,  244,
      120,  244,  123,  244,  121,  244,  123,  244,  123,  244,
      148,  244,  147,  244,  145,  148,  244,  148,  244,   96,
      244,   96,  244,   95,  244,   92,   96,  244,   96,  244,

       96,  244,   92,   96,  244,   96,  244,   96,  244,  100,
      244,   97,  244,  100,  244,   98,  100,  244,  100,  244,
      100,  244,  100,  244,  104,  244,  103,  244,  101,  104,
      244,  101,  104,  244,  104,  244,  101,  104,  244,  101,
      104,  244,  104,  244,   96,  244,   95,  244,   96,  244,
       96,  244,   96,  244,   96,  244,   96,  244,  108,  244,
      108,  244,  107,  244,  105,  108,  244,  108,  244,  108,
      244,  105,  108,  244,  108,  244,  108,  244,  136,  244,
      135,  244,  133,  136,  244,  136,  244,  140,  244,  139,
      244,  140,  244,  140,  244,  144,  244,  143,  244,  144,

      244,  144,  244,  132,  244,  129,  244,  132,  244,  130,
      132,  244,  132,  244,  132,  244,  128,  244,  126,  244,
      127,  128,  244,16508,  125,  128,  244,  128,  244,   82,
      244,   81,  244,   79,   82,  244,   82,  244,   86,  244,
       86,  244,   85,  244,   83,   86,  244,   86,  244,   86,
      244,   83,   86,  244,   86,  244,   86,  244,   90,  244,
       89,  244,   87,   90,  244,   90,  244,  112,  244,  111,
      244,  109,  112,  244,  112,  244,  114,  116,  244,  115,
      244,  116,  244,  154,  244,  153,  244,  152,  154,  244,
      154,  244,  158,  161,  244,  155,  244,  158,  161,  244,

      161,  244,  161,  244,  164,  244,  163,  244,  162,  164,
      244,  164,  244,  167,  244,  167,  244,  165,  244,  167,
      244,  167,  244,  173,  177,  244,  174,  244,  177,  244,
      177,  244,  177,  244,  177,  244,  177,  244,  151,  244,
      149,  244,  151,  244,  186,  244,  186,  244,  184,  244,
      178,  186,  244,  183,  186,  244,  186,  244,  189,  244,
      188,  189,  244,  187,  244,  189,  244,  196,  197,  244,
      195,  244,  197,  244,  197,  244,  197,  244,  207,  208,
      244,  198,  244,  208,  244,  208,  244,  208,  244,  211,
      244,  209,  244,  211,  244,  215,  244,  213,  244,  212,

      215,  244,  215,  244,  218,  221,  244,  216,  244,  219,
      221,  244,  220,  221,  244,  221,  244,  221,  244,  224,
      244,  222,  244,  224,  244,  227,  244,  226,  244,  225,
      227,  244,  227,  244,  230,  244,  229,  244,  228,  230,
      244,  230,  244,   76,   78,  244,   77,  244,   78,  244,
       78,  244,   78,  244,  170,  244,  169,  244,  168,  170,
      244,  170,  244,   65,   66,  244,   64,  244,   66,  244,
       66,  244,   15,  244,   14,  244,   15,  244,   15,  244,
       15,  244,   13,   15,  244,   15,  244,   15,  244,   15,
      244,  232,  234,  244,  233,  244,  234,  244,  234,  244,

      234,  244,  237,  244,  236,  244,  237,  244,  235,  237,
      244,  237,  244,  240,  243,  244,  238,  244,  241,  243,
      244,  242,  243,  244,  243,  244,  243,  244,  179,  244,
      179,  182,  244,  180,  244,  181,  244,   70,   71,  244,
       68,  244,   69,   71,  244,   71,  244,   71,  244,   58,
        4,   51,   53,   55,   53,   10,   41,   41,   32,   32,
       32,   32,   32,   39,   40,   34,   41,   42,   32,   32,
       32,   32,   32,   32,   61,   45,   46,   51,   43,  117,
      117,  118,  117,  122,  145,  146,   92,   92,   92,   94,
       92,   98,   98,   99,   98,  101,  101,  101,  101,  101,

      101,  102,  101,  105,  105,  105,  106,  105,  133,  134,
      137,  138,  142,  141,  142,  130,  130,  131,  130,  127,
    16508, 8316,   79,   79,   80,   83,   83,   83,   84,   83,
       87,   88,  109,  110,  114,  113,  152,  158,  155,  158,
      160,  160,  157,  162,  166,  173,  176,  175,  150,  178,
      183,  185,  188,  187,  196,  207,  210,  212,  214,  218,
      217,  223,  225,  228,   76,  168,   65,   12,   13,  232,
      231,  235,  240,  239,  179,   70,   41,   32,   52,   50,
       57,   53,   57,   57,   57,   53,   57,   57,   54,   10,
        6,   49,    1,    1,    2,   32,   32,   32,   36,   37,

       38,   32,   32,   34,    5,   32,   32,   32,   32,   32,
       47,   50,   44,  117,  117,  145,   92,   98,   98,  101,
      101,  101,  105,  130,  130,   79,   79,   79,   83,   87,
      159,  225,  228,   72,   73,   74,   75,   63,  231,  235,
      235,   67,   32,   57,   57,   24,   48,    1,   33,    2,
       31,   32,   32,   32,   32,   32,   32,   32,   32,   32,
      117,   91,   98,  101,  101,   93,  130,   79,   79,   87,
      159,  191,  199,   63,   11,  235,   32,   23,   56,    6,
       21,   31,   32,   32,   32,   35,   31,   35,   32,   32,
       32,   32,   32,   32,  117,   98,  101,  130,   79,   79,

       11,   32,    3,   22,    7,   32,   32,   32,   35,   32,
       32,   32,   32,   32,   32,  117,   98,  101,  130,  109,
      193,  201,   11,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,  117,   98,  101,  130,  172,  192,  190,
      200,   32,   32,   32,   32,   32,   32,   32,   32,   32,
      117,   98,  101,  130,  171,  194,   32,   25,   20,    8,
       16,   18,   32,   32,   32,   30,   32,   32,   32,   32,
      117,   98,  101,  130,  202,   32,    9,   17,   19,   32,
       32,   32,   32,   32,   32,   32,  117,   98,  101,  130,
       32,   32,   32,   32,   32,   32,   32,   32,  117,   98,

      101,  130,  205,   32,   32,   26,   32,   32,   32,   26,
       32,   32,   32,  117,   98,  101,  130,  206,  203,   32,
       32,   26,   32,   29,   32,   32,   29,   32,   32,  117,
       98,  101,  130,  206,   32,   32,   29,   32,   32,   32,
      117,   98,  101,  130,   32,   32,   32,   32,  117,   98,
      101,  130,  204,   32,   28,   32,   28,   32,   27,   32,
       60,  117,  119,  121,  147,   95,   97,   98,  101,  103,
      107,  135,  139,  143,  129,  130,  126,   81,   85,   89,
      111,  115,  153,  156,  163,  165,  174,  149,  184,  195,
      198,  209,  213,  216,  222,  226,  229,  169,   64,   14,

      233,  236,  238,   68,   27,   32,   28,   32,   27,   32,
        5,   27,   32,   58
    } ;

static yyconst flex_int16_t yy_accept[1715] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    5,    5,    5,    5,    5,    6,
        7,    7,    7,    7,    7,    8,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   10,   11,   11,   11,   11,
       11,   12,   13,   13,   13,   14,   15,   17,   19,   21,

       23,   25,   27,   29,   32,   34,   36,   39,   41,   43,
       45,   47,   49,   51,   53,   56,   58,   60,   62,   64,
       66,   69,   71,   73,   75,   77,   79,   81,   83,   85,
       88,   90,   92,   94,   96,   99,  101,  103,  106,  108,
      110,  112,  114,  116,  119,  121,  123,  125,  127,  129,
      132,  135,  137,  140,  143,  145,  147,  149,  151,  153,
      155,  157,  159,  161,  163,  165,  168,  170,  172,  175,
      177,  179,  181,  183,  186,  188,  190,  192,  194,  196,
      198,  200,  202,  204,  206,  208,  210,  213,  215,  217,
      219,  221,  225,  228,  230,  232,  234,  237,  239,  241,

      243,  245,  248,  250,  252,  255,  257,  259,  261,  263,
      266,  268,  270,  272,  275,  277,  280,  282,  284,  286,
      288,  291,  293,  296,  298,  301,  303,  305,  307,  309,
      312,  314,  316,  318,  320,  322,  324,  327,  329,  331,
      333,  335,  337,  339,  341,  343,  345,  347,  349,  351,
      354,  357,  359,  361,  364,  366,  368,  371,  373,  375,
      377,  379,  382,  384,  386,  388,  390,  392,  394,  396,
      398,  400,  403,  405,  408,  410,  413,  416,  418,  420,
      422,  424,  426,  428,  430,  433,  435,  437,  439,  442,
      444,  447,  449,  451,  453,  455,  457,  459,  462,  464,

      467,  469,  471,  473,  475,  477,  479,  481,  483,  486,
      488,  490,  492,  495,  497,  499,  501,  503,  505,  507,
      509,  512,  514,  517,  519,  522,  525,  527,  529,  531,
      534,  536,  538,  541,  543,  546,  548,  550,  550,  550,
      550,  550,  551,  551,  551,  552,  552,  552,  552,  552,
      553,  554,  555,  555,  556,  556,  556,  556,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  558,
      558,  559,  560,  561,  562,  563,  564,  565,  566,  568,
      569,  569,  570,  571,  572,  573,  574,  575,  576,  576,
      576,  576,  576,  576,  576,  577,  578,  579,  579,  580,

      580,  580,  580,  580,  580,  581,  582,  582,  582,  582,
      583,  584,  585,  585,  586,  586,  586,  586,  587,  587,
      587,  587,  587,  588,  589,  589,  589,  589,  590,  590,
      591,  591,  591,  592,  592,  593,  594,  594,  594,  594,
      595,  596,  596,  597,  598,  598,  599,  600,  601,  601,
      601,  602,  602,  603,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      605,  606,  606,  606,  607,  607,  608,  608,  608,  609,
      610,  610,  611,  611,  611,  612,  612,  614,  614,  614,
      615,  615,  616,  616,  616,  617,  618,  618,  618,  618,

      619,  620,  620,  622,  623,  623,  623,  624,  625,  625,
      625,  626,  626,  626,  626,  626,  627,  628,  628,  628,
      629,  629,  630,  630,  630,  631,  632,  632,  632,  633,
      633,  634,  634,  634,  635,  635,  636,  636,  637,  637,
      638,  638,  639,  640,  641,  641,  642,  643,  643,  644,
      644,  645,  645,  645,  645,  645,  646,  646,  647,  648,
      649,  649,  649,  649,  650,  650,  650,  651,  652,  652,
      653,  653,  654,  655,  655,  655,  656,  656,  656,  656,
      657,  657,  657,  657,  657,  657,  657,  658,  658,  659,
      659,  660,  660,  661,  661,  662,  662,  662,  663,  663,

      664,  664,  664,  664,  665,  665,  665,  665,  666,  666,
      666,  666,  667,  667,  668,  668,  668,  668,  669,  669,
      670,  670,  670,  670,  671,  672,  672,  672,  673,  673,
      673,  674,  674,  675,  675,  676,  677,  677,  677,  678,
      679,  679,  679,  679,  679,  680,  681,  682,  684,  685,
      686,  688,  689,  690,  690,  690,  690,  690,  690,  690,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  692,
      692,  692,  692,  692,  692,  693,  694,  695,  696,  697,
      697,  698,  699,  700,  701,  702,  703,  703,  704,  705,
      706,  707,  708,  709,  710,  711,  711,  711,  711,  711,

      712,  713,  713,  714,  715,  715,  716,  716,  717,  717,
      717,  717,  717,  718,  719,  719,  720,  721,  721,  722,
      722,  723,  723,  723,  723,  723,  724,  724,  724,  724,
      725,  725,  726,  726,  727,  728,  729,  729,  729,  730,
      731,  731,  731,  731,  731,  731,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  733,
      733,  734,  734,  735,  736,  737,  738,  738,  738,  739,
      739,  739,  739,  739,  740,  740,  741,  741,  741,  742,
      742,  742,  742,  743,  743,  744,  744,  744,  744,  745,

      746,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  748,  749,
      750,  751,  751,  752,  753,  754,  755,  755,  755,  756,
      756,  757,  758,  759,  760,  761,  761,  761,  761,  762,
      762,  762,  762,  763,  763,  763,  764,  765,  765,  766,
      767,  767,  767,  767,  767,  768,  768,  769,  770,  770,
      770,  771,  771,  771,  771,  771,  771,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  773,  773,
      773,  773,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  775,  775,  775,  775,  776,

      776,  776,  776,  777,  777,  777,  777,  778,  778,  779,
      779,  779,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  782,  782,  782,  782,  783,  784,  785,
      786,  787,  789,  790,  791,  792,  793,  794,  795,  795,
      796,  796,  796,  796,  797,  798,  798,  798,  798,  798,
      799,  799,  800,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  802,  802,  802,

      802,  802,  802,  802,  803,  803,  804,  804,  804,  805,
      805,  805,  805,  805,  805,  806,  806,  806,  806,  806,
      806,  807,  808,  809,  810,  811,  812,  813,  814,  815,
      816,  817,  817,  817,  817,  818,  819,  819,  819,  819,
      819,  820,  820,  820,  820,  820,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  822,  822,
      822,  822,  822,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  824,
      824,  824,  824,  824,  824,  824,  824,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  825,  825,  825,  826,
      827,  828,  829,  830,  831,  832,  833,  834,  835,  835,
      835,  835,  836,  837,  837,  837,  837,  837,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  840,  841,  841,  841,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  844,  845,
      846,  847,  848,  849,  850,  851,  852,  852,  852,  852,

      853,  854,  854,  854,  854,  854,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  858,  858,  859,  859,  859,  859,  859,  860,  860,
      861,  862,  863,  864,  865,  866,  867,  868,  869,  870,
      871,  872,  872,  872,  872,  873,  874,  874,  874,  874,
      874,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,

      875,  875,  875,  875,  875,  875,  875,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  877,  877,  878,  879,  880,  880,
      880,  880,  880,  881,  882,  883,  884,  885,  886,  887,
      888,  888,  888,  888,  889,  890,  890,  890,  890,  890,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  892,  892,  893,  894,  895,  896,  897,  898,

      899,  900,  900,  900,  900,  901,  902,  902,  902,  902,
      902,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      905,  905,  906,  908,  909,  910,  912,  913,  914,  915,
      915,  915,  915,  916,  917,  917,  917,  917,  917,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  919,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,

      920,  920,  920,  920,  921,  921,  922,  924,  926,  927,
      929,  930,  931,  931,  931,  931,  932,  933,  933,  933,
      933,  933,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  936,  936,  937,  939,  940,
      941,  942,  942,  942,  942,  943,  944,  944,  944,  944,
      944,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,

      945,  945,  945,  946,  946,  947,  948,  949,  950,  950,
      950,  950,  951,  952,  952,  952,  952,  952,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  955,
      955,  957,  959,  962,  964,  965,  966,  967,  969,  971,
      972,  973,  974,  975,  977,  978,  979,  980,  981,  982,
      983,  984,  985,  986,  987,  988,  989,  990,  991,  992,
      993,  994,  995,  996,  997,  998,  999, 1000, 1001, 1002,
     1003, 1004, 1005, 1007, 1009, 1011, 1012, 1014, 1014, 1014,

     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1015, 1015
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   23,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   36,   40,   41,   42,   43,   44,   45,
       36,   46,   47,   48,   49,   50,   36,   36,   51,   36,
       52,   53,   54,    1,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   36,   65,   66,   67,   68,
       69,   70,   36,   71,   72,   73,   74,   75,   76,   77,
       78,   36,   79,   80,   81,   82,    1,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84
    } ;

static yyconst flex_int32_t yy_meta[85] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   20,   20,   21,   22,   23,    1,   24,   25,   26,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,    1,   28,   29,   30,   27,   27,   27,   27,   27,
       27,   27,   27,   31,   27,   27,   27,   32,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   33,   34,
       35,   36,   37,   37
    } ;

static yyconst flex_int16_t yy_base[1968] =
    {   0,
        0,    0,    0,   83,  163,  245,   83,   84,  327,    0,
      411,    0,  495,  577,  659,  741,  823,    0,  907,    0,
      991,    0,   86,   87,   88,   89, 1075, 1157, 1239,    0,
     1323,    0, 1407,    0, 1491,    0, 1575,    0,   94,   97,
     1659,    0,  100,  101, 1743,    0,  118,  141,  181,  203,
      105,  106, 1827,    0,  200,  222,  121,  233,  236,  508,
      107,  108, 1911,    0,  264,  503,  109,  126, 1995,    0,
     2079,    0,  182,  258,  265,  500,  515,  532, 2163,    0,
      540,  547, 2245, 2246,  592,  595, 2314, 2396,  614,  640,
      114,  119,  678,  746, 7199,13045,13045,  558,  226, 7191,

        0, 7167,  127,  266, 2473, 2540,  678, 2615,  704, 7111,
     1115,  147,  202, 1117, 2427,  282,  618,13045,13045, 7186,
      517,  520, 2434,13045,13045,  167,  500,13045,13045,  190,
      217,13045,  773,  777, 2351, 2267, 7168,  783,  549,  195,
    13045,13045, 7184,  627,  671, 7162, 2462,13045,13045, 2697,
     1090, 1168, 2283,13045, 2552, 1196, 1200, 2560, 2276, 7165,
     2486,  304,13045, 2258, 2357, 2585, 2633, 7164, 2625,  613,
      311,13045,13045,    0,  700,13045,13045, 7180, 1148,13045,
    13045, 7179, 2383,13045,13045, 7178, 1087, 1170, 2728,13045,
    13045,  529,13045, 7120,13045,13045, 2659, 2466,13045, 2734,

     2738, 2761, 2767, 7158, 2785, 2492,  318,13045,13045, 7162,
     2511,13045,13045, 7156, 2522,    0,13045, 2589,13045,13045,
        0, 7110,  556,13045, 7120, 2785, 2866,13045,13045,    0,
     7108,13045,  619,13045, 7161, 7103,    0,13045,13045, 7145,
     7149, 7103,   74,13045,13045, 2629,13045,  208,13045,13045,
      636, 2668,13045, 2387,13045, 7098,    0,13045,13045,  166,
      465,    0,13045,13045,  744, 1072,13045,13045, 2795,13045,
    13045,    0, 2800,    0,13045,13045,13045,13045, 2814,13045,
    13045, 2818,13045,13045,  268, 7097,13045,13045,  508, 7096,
        0,13045, 7097, 7096, 7095,13045,13045,    0, 7090,    0,

    13045, 7135, 7088,13045,13045, 7144, 7138, 7121,13045,  122,
      511, 7084,    0,13045,13045, 7064,  550,13045,13045,    0,
     7126, 7079,    0,13045,13045,13045,13045, 2822,    0,    0,
    13045,13045,    0,13045,13045, 7078, 7085, 2805, 2941, 3016,
     2593, 2612, 7074, 7130,13045, 7112, 7102,    0,  235,  539,
    13045,13045, 3098, 7098,  632,  258, 2838,  712, 2797, 2773,
     1102,  566,  609, 2824,  647,  661,  706,  732,13045, 7109,
      558, 3181, 7048, 7057, 2675, 7050,13045,13045,    0, 2882,
     2899, 2292, 2382, 2846, 2926, 2885, 2921, 7034, 3013,  650,
     2345,  716,  796, 2939,  801, 2941, 2979,  808,13045, 1091,

     1195, 2968, 2975, 7109,13045, 2514, 2230, 2636, 1110,13045,
     2666,13045, 7047,  765,    0, 7090, 1224,13045, 7044, 3048,
     3191, 7087, 3059, 3195, 1228, 2498, 3199, 3222, 2303,13045,
     7007, 2842, 7012, 6994,13045, 2887, 2439, 2936, 2377,13045,
     2988, 6990,  702, 3281, 3363, 6989,13045, 3223, 2810, 3225,
     6988, 2608,13045, 3251, 3233, 3312, 6970, 3319, 3394,    0,
     3401, 3087, 3347, 3428, 3262, 1103, 3323, 3432, 6966, 3455,
     3459, 3351, 3463, 3467, 2645,13045, 6921, 3406,    0,    0,
     2886,13045, 6919, 6979,13045, 2931,13045, 6917, 6977,13045,
     3055,13045, 6915, 6975,13045, 3321, 2938, 3402, 3079,13045,

     3456, 1081, 2468,13045, 6912, 3491, 3495, 3499, 6955, 3098,
    13045, 6908, 3508, 3531, 6951, 3535, 3539, 3503, 3562, 3566,
     3182,13045, 6906, 3526,    0, 6954,    0, 3203,13045, 6901,
     6949, 6903, 3226,13045, 6897,    0, 3487,13045, 6896,    0,
     6895, 2525,13045, 6909, 6897,13045,    0, 3544,13045, 6892,
        0, 6891, 2330, 6951, 6950,13045, 6888,    0,13045,13045,
     6887, 6886, 3570,13045, 6885, 2254,13045, 2291, 3574,13045,
     6884, 3586,13045, 6887, 6882,    0,  234, 6888,  668,    0,
     6879, 6885, 6884,  731,  722, 3590,13045, 6871,    0, 3594,
    13045, 6870,    0, 3598,13045, 6869, 3602,13045, 6865, 1189,

        0, 6908, 6862, 2268,    0, 6905, 6860,    0, 6918, 6912,
      518,    0, 6855,    0, 1200, 6853, 6913,13045, 6907,13045,
     6891, 2209, 6849,    0,    0, 6848, 1172, 6896,    0, 6846,
        0, 3606,13045, 6845,    0,    0, 6843, 6882, 6842, 2572,
     6834, 6877,    0, 6878, 1121, 6866,13045,13045, 6864, 3644,
     6863, 6873,13045, 6873, 6857, 2382, 2385, 2448, 2435, 3612,
     2490, 2623, 2661, 2687, 2724, 2672, 2769, 2940,13045, 2790,
     2805, 2812, 2814, 2870, 6870, 1144, 3727,    0, 2341, 6806,
     2970, 3551,13045,13045,13045, 3555, 3806, 3732,    0,    0,
     3267, 3746, 3770, 3775, 3776, 3747, 2346, 3427, 3758,13045,

     3765, 3848, 2597, 3711, 3720, 3820, 6812, 2333, 6811, 3618,
     3866, 6810, 6856, 3734, 3777, 3843, 2427, 3928, 3891, 3893,
     3942, 6867, 2754, 2911, 6807,    0, 6806, 6805, 6804, 3855,
     3883, 3939, 6802, 3981, 3995, 3969, 6801, 6794,    0, 6847,
     6792, 6788, 6787, 6785, 6784,    0, 6783, 6782, 6781, 6792,
     6776, 6775, 6774, 6773, 6773, 6785, 6775, 6769, 6782, 3028,
     6768, 6780, 6775, 6758, 6757, 6756, 6752, 6751, 2359, 6749,
     2395, 6748,13045,13045,13045,13045, 6747, 6791, 2703, 6745,
     2647, 2950, 6744,    0, 6743,13045, 1215,    0, 6796, 6741,
     6740, 6739,13045, 2995, 3546, 6738, 6801,    0, 3564, 3009,

    13045, 6775, 2997, 3019, 3146, 3213, 3211, 3226, 3242, 3328,
     6780, 3066, 3371, 3741, 3397, 3520, 3561,13045, 3215,13045,
        0, 6726, 3287, 3786, 3841, 3962, 6725, 4041, 3985, 6752,
     3922, 4009, 3986, 4019, 4023, 4079, 4087, 4110, 4090, 6743,
     6742, 3878,13045, 4032, 6736, 4111, 4190, 4272, 4125,13045,
     6735, 6734, 6733, 6729, 4117, 6728, 4114, 4152, 6726, 6725,
     6765, 6723, 6715, 6719, 6717, 6716,    0, 6715, 6714, 6713,
     4162, 6711, 6710, 6709, 6707, 6706, 6695,13045, 6689, 6697,
     6689,13045, 6683, 6694, 6676, 6676, 6687, 6686, 6684, 6683,
     6681, 6680, 6679, 6678, 3479, 6677,    0,    0,    0, 6676,

     6675, 2455, 6715, 6673, 6671, 6670, 3890, 6663,13045, 6703,
     3617,13045, 6690, 3581, 6689, 3587, 3582, 3702, 3724, 4072,
     3813, 4073,13045, 3830, 3853, 3862, 3483, 4027, 4156, 4025,
     6637, 4081, 4167, 4177, 4179, 4181, 4249, 4250, 4303, 4127,
     6643, 6642, 6641, 4169, 4311, 6640, 6639, 6636, 6634, 4242,
     6633, 4338, 4344, 6632, 6631, 6630, 6633, 6627, 6626, 6624,
     6623, 6617, 6616, 6617, 6616, 6608, 6621, 2467, 6602, 6607,
     3569, 6601, 6595, 6594, 6593, 6592, 6597, 6599, 6550, 6548,
     2207, 6545, 6555, 6552, 1133, 6541, 6537, 6536, 6535, 6534,
     6528, 6526, 6525, 6524, 6587, 6580,    0, 6520, 6484, 2534,

     6480, 6479, 6478, 4302, 6477, 6525, 6495, 3875,13045, 3880,
     3975, 3969, 4062, 4124,13045, 4121, 6513, 4137, 4161, 4167,
     4243, 4307, 4278,13045, 4332, 4353, 4367, 4369, 4373, 4374,
     4368, 6472, 6471, 6470, 4370, 4377, 6469, 6468, 6467, 6466,
     4389, 6465, 6464, 6463, 6462,13045, 6461, 6460, 6459, 6458,
     6457, 6456, 6463, 1107, 6454, 6442, 6446, 6455, 6451, 6442,
     6436, 6446, 6438, 6435, 6433, 6430, 6428,13045, 6434,    0,
        0, 6426,13045, 6420, 3636, 6421, 6422, 6432, 6432, 6420,
     6418, 6417, 6410, 6409, 6408, 6404, 6403, 6401,13045, 6461,
     6455, 6398, 6397, 6395, 6394, 6392, 4393, 6391, 6427, 4209,

     4223, 4219, 4225, 6429, 4426, 4247, 4264,  561, 4397, 4398,
     4405, 4410, 4412, 4432, 4414, 4442, 4454, 4444, 6400, 6399,
     6398, 4482, 4489, 6397, 6396, 6394, 6393, 4495, 6386, 6385,
     6384, 6380, 6379, 6377, 6376, 6375, 6373, 6370, 6364, 6366,
        0, 6356, 6361, 6351, 6350,13045, 6361, 6351, 6347, 6358,
     6357, 6351, 6350,    0,13045,13045, 6349, 6344,13045, 6344,
     6331, 6324, 6324, 6339, 6338, 6337, 6334, 6332, 6330, 6329,
     6328, 6327, 6320, 6319, 6318, 6314, 6310, 4464, 6309, 6312,
     4291, 4298, 2313, 4476, 4477, 6335, 6329, 4468, 4485, 4520,
     4532, 4521, 4522, 4539, 4544, 4538, 6289, 6284, 6247, 4549,

     4558, 6242, 6237, 6233, 6230, 4561, 6229, 6228, 6227, 6226,
     6221, 6210, 6207, 6203, 6198, 6194, 6186,13045, 6182, 6171,
     6179, 6178, 6189, 6183, 6171, 6172, 6163, 6159, 6158,13045,
     6157, 6148, 6144, 3740, 6145, 6148, 6139, 6135, 6130, 6127,
     6126, 6119, 6117, 6113, 6112, 6109, 6108, 6107, 6106, 6102,
     4565, 6064,13045, 5097, 5096, 5095, 4593,13045, 4601,13045,
    13045,13045, 4558, 4574, 4582, 3290, 4603, 4607, 4614, 4623,
     4615, 5063, 5062, 5058, 4626, 4645, 5052, 5047, 5046, 5045,
     4639, 5043, 5041, 5040, 5039, 5037, 5034, 5033, 5029, 5018,
     4996, 4978, 4958, 4947, 4916, 4910, 4898, 4879, 4874, 4863,

     4862, 4853, 4836, 4809, 4790, 4767,13045, 4745, 4727, 4716,
       63,   64,  100,  238,  500,  511,  580,  637,  673,  697,
      708,  716,  757, 4628, 1036,13045,13045,13045, 1124, 4638,
     1150, 4646, 4636, 4652, 4675, 4683, 4694, 4704, 4711, 4671,
     1169, 2189, 2198, 4702, 4710, 2235, 2246, 2299, 2352, 4722,
     2361, 2362, 2372, 2400, 2406, 2430, 2486, 2495, 2503, 2519,
     2538, 2552, 2552, 2561, 2580, 2605, 2609, 2614, 2647, 2652,
     2662, 2663, 2679, 2690, 3788, 2687, 2688, 2702, 2707, 2709,
     2735, 2752, 2756, 2776, 2784, 2794, 2796, 2807, 2827, 2866,
     2881, 4699, 2895, 4723, 4718, 4730, 4738, 4746, 4754, 4765,

     4774, 2902, 2912, 2919, 4781, 4796, 2923, 2924, 2932, 2942,
     4802, 2952, 2953, 2970, 2974, 2975, 3001, 3011, 3022, 3023,
     3148, 3147, 3144, 3167, 3172, 3164, 3186, 3190, 3192, 3197,
     3204, 3231,13045, 3859, 3239, 3254, 3265, 3266, 3275, 3280,
     3284, 3293, 3294, 3315, 3317, 3321, 3322, 3329, 3331, 4767,
     3336, 4756, 4777, 4784, 4806, 4790, 4808, 4835, 4848, 3333,
     3344, 3351, 4851, 4870, 3355, 3356, 3370, 3371, 4854, 3372,
     3386, 3405, 3409, 3457, 3458, 3484, 3493, 3506, 3516, 3530,
     3528, 3560, 3572, 3574, 3665, 3670, 3963,13045, 3678, 3687,
     3688, 3689, 3694, 3706, 3717, 3718, 3724, 3726, 3730, 3732,

     3734, 3736, 3741, 4834, 3769, 4849, 3974, 4845, 4874, 4878,
     4890, 4891, 3796, 3797, 3818, 4901, 4928, 3831, 3839, 3844,
     3858, 4913, 3863, 3865, 3871, 3900, 3917, 3929, 3934, 3936,
     3962, 3963, 3960, 3973, 3980, 3986, 4003, 4020, 4161, 4019,
     4031, 4047, 4067, 4088, 4108, 4146, 4148, 4151, 4152, 4163,
     4167, 4193, 4197, 4199, 4895, 4204, 4891, 4526, 4907, 4934,
     4922, 4210, 4253, 4259, 4939, 4965, 4260, 4266, 4275, 4287,
     4975, 4293, 4299, 4320, 4328, 4336, 4347, 4361, 4372, 4378,
     4382, 4365, 4392, 4393, 4394, 4398, 4403, 4527, 4405, 4418,
     4423, 4431, 4437, 4442, 4446, 4453, 4455, 4459, 4461, 4473,

     4482, 4483, 4962, 4493, 4963, 4995, 4996, 4983, 4481, 4488,
     4490, 4985, 5005, 4495, 4500, 4501, 4512, 4991, 4517, 4519,
     4525, 4536, 4549, 4551, 4555, 4561, 4565, 4576, 4578, 4600,
     4601, 4613, 4618,13045, 4626, 4632, 4639, 4640, 4641, 4643,
     4647, 4648, 4656, 4662, 4668, 4673, 4678, 4682, 5012, 4689,
     4978, 5018, 5032, 5026,13045,13045,13045, 5040, 5062,13045,
    13045,13045,13045, 5046,13045,13045,13045,13045,13045,13045,
    13045,13045,13045,13045,13045,13045,13045,13045,13045,13045,
    13045,13045,13045,13045,13045,13045,13045,13045,13045,13045,
    13045,13045, 5025, 4860, 5050, 4702, 4924, 4831, 4833, 4727,

     4770, 4881, 4987, 4753, 4953, 4924, 4789, 5019, 5008, 4795,
     4968, 5075,13045, 5128, 5165, 5202, 5239, 5276, 5313, 5350,
     5387, 5424, 5461, 5498, 5535, 5572, 5609, 5646, 5683, 5720,
     5757, 5794, 5831, 5868, 5905, 5942, 5979, 6016, 6053, 6090,
     6127, 6157, 6180, 6200, 6226, 6248, 6274, 6310, 6341, 6371,
     6407, 6443, 6479, 6515, 6552, 6583, 6620, 6652, 6688, 6724,
     6760, 6796, 6832, 6868, 6904, 6940, 6961, 6998, 7035, 7072,
     7103, 7139, 7175, 7211, 7247, 7283, 7319, 7349, 7370, 7407,
     7428, 7465, 7502, 7523, 7560, 7597, 7633, 7665, 7702, 7723,
     7760, 7790, 7820, 7857, 7878, 7915, 7952, 7989, 8026, 8047,

     8070, 8107, 8144, 8181, 8212, 8248, 8278, 8301, 8317, 5078,
     5089, 8335, 8366, 8399, 8430, 8461, 8491, 8521, 8557, 8593,
     8630, 8666, 8696, 8733, 8764, 8795, 8832, 8869, 8901, 8932,
     8968, 9004, 9041, 9077, 9113, 9149, 9185, 9221, 9251, 9272,
     9309, 9346, 9383, 9414, 9445, 9481, 9517, 9553, 9589, 9625,
     9661, 9691, 9721, 9751, 9772, 9809, 9830, 9867, 9904, 9934,
     9955, 9992,10029,10065,10097,10134,10155,10192,10222,10252,
    10282,10312,10349,10370,10407,10444,10481,10518, 5095,10550,
    10573,10594,10631,10668,10705,10741,10767,10804,10825,10843,
    10875,10911, 6139,10939,10974, 6150, 6172,11010,11037,11068,

    11098,11135,11165,11196,11227,11264,11296,11328,11365,11401,
    11431,11462,11493,11529,11565,11595,11625,11655,11692,11722,
    11752,11784, 6159,11816,11837,11860,11896,11929,11950,11970,
    12002, 6210,12035,12070,12107, 6258,12143,12175,12203,12240,
    12271,12308,12340,12371,12407,12443,12473,12503, 6240, 6350,
    12524,12556,12579,12600,12620,12652,12689,12721,12748,12785,
    12822,12859,12896,12933,12970,13007, 6322
    } ;

static yyconst flex_int16_t yy_def[1968] =
    {   0,
     1714, 1714, 1713,    3, 1715, 1715, 1716, 1716, 1713,    9,
     1713,   11, 1717, 1717, 1718, 1718, 1713,   17, 1713,   19,
     1713,   21, 1719, 1719, 1720, 1720, 1721, 1721, 1713,   29,
     1713,   31, 1713,   33, 1713,   35, 1713,   37, 1722, 1722,
     1713,   41, 1723, 1723, 1713,   45, 1724, 1724, 1725, 1725,
     1726, 1726, 1713,   53, 1727, 1727, 1728, 1728, 1729, 1729,
     1730, 1730, 1713,   63, 1731, 1731, 1732, 1732, 1713,   69,
     1713,   71, 1733, 1733, 1733, 1733, 1733, 1733, 1713,   79,
     1734, 1734, 1735, 1735, 1736, 1736, 1737, 1737, 1738, 1738,
     1739, 1739, 1740, 1740, 1713, 1713, 1713, 1713, 1713, 1741,

     1742, 1743, 1743, 1744, 1713, 1745, 1746, 1747, 1746, 1713,
     1713, 1713, 1743, 1743, 1744, 1743, 1713, 1713, 1713, 1748,
     1749, 1749, 1749, 1713, 1713, 1713, 1713, 1713, 1713, 1750,
     1713, 1713, 1713, 1713, 1751, 1752, 1713, 1753, 1713, 1754,
     1713, 1713, 1755, 1756, 1756, 1713, 1756, 1713, 1713, 1757,
     1758, 1758, 1758, 1713, 1758, 1713, 1713, 1759, 1760, 1713,
     1761, 1762, 1713, 1713, 1713, 1763, 1764, 1713, 1765, 1713,
     1766, 1713, 1713, 1767, 1713, 1713, 1713, 1768, 1713, 1713,
     1713, 1769, 1713, 1713, 1713, 1770, 1771, 1771, 1771, 1713,
     1713, 1772, 1713, 1713, 1713, 1713, 1773, 1713, 1713, 1713,

     1713, 1774, 1775, 1713, 1776, 1713, 1777, 1713, 1713, 1778,
     1713, 1713, 1713, 1779, 1713, 1780, 1713, 1713, 1713, 1713,
     1781, 1713, 1782, 1713, 1783, 1713, 1713, 1713, 1713, 1784,
     1713, 1713, 1713, 1713, 1785, 1713, 1786, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1787, 1713, 1713,
     1787, 1713, 1713, 1713, 1713, 1713, 1788, 1713, 1713, 1713,
     1713, 1789, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1790, 1713, 1791, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1792, 1713, 1713, 1713, 1793, 1713,
     1794, 1713, 1713, 1713, 1713, 1713, 1713, 1795, 1713, 1796,

     1713, 1713, 1713, 1713, 1713, 1797, 1798, 1713, 1713, 1713,
     1713, 1713, 1799, 1713, 1713, 1713, 1713, 1713, 1713, 1800,
     1801, 1713, 1802, 1713, 1713, 1713, 1713, 1713, 1803, 1803,
     1713, 1713, 1804, 1713, 1713, 1713, 1713, 1713, 1805, 1805,
     1713, 1713, 1713, 1806, 1713, 1807, 1808, 1809, 1713, 1808,
     1713, 1713, 1713, 1808, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1810, 1805,  372,  372,  372,  372, 1713, 1713, 1811, 1812,
     1812, 1813, 1813, 1813, 1813, 1813, 1813, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1808, 1713, 1713, 1808,

     1808, 1713, 1713, 1814, 1713, 1815, 1816, 1815, 1713, 1713,
     1815, 1713, 1713, 1817, 1818, 1713, 1713, 1713, 1713, 1713,
     1819, 1713, 1820, 1820, 1821, 1822, 1819, 1820, 1713, 1713,
     1713, 1822, 1823, 1824, 1713, 1825, 1826, 1825, 1713, 1713,
     1825, 1827, 1827, 1828, 1828, 1827, 1713, 1829, 1830, 1829,
     1827, 1713, 1713, 1829, 1713, 1831, 1713, 1713, 1832, 1833,
     1832, 1834, 1831, 1832, 1834, 1835, 1713, 1836, 1713, 1837,
     1837, 1838, 1836, 1837, 1713, 1713, 1713, 1838, 1839, 1840,
     1713, 1713, 1713, 1841, 1713, 1713, 1713, 1713, 1842, 1713,
     1713, 1713, 1713, 1843, 1713, 1844, 1845, 1844, 1713, 1713,

     1844, 1713, 1846, 1713, 1713, 1713, 1847, 1848, 1713, 1713,
     1713, 1713, 1713, 1849, 1713, 1850, 1850, 1851, 1849, 1850,
     1713, 1713, 1713, 1851, 1852, 1853, 1854, 1713, 1713, 1713,
     1855, 1713, 1713, 1713, 1713, 1856, 1713, 1713, 1713, 1857,
     1713, 1858, 1713, 1859, 1713, 1713, 1860, 1713, 1713, 1713,
     1861, 1713, 1713, 1862, 1862, 1713, 1713, 1863, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1864, 1713, 1864, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1865, 1713, 1713, 1713, 1866,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1867, 1713,
     1713, 1713, 1868, 1713, 1713, 1713, 1713, 1713, 1713, 1869,

     1870, 1713, 1713, 1871, 1872, 1713, 1713, 1873, 1713, 1713,
     1713, 1874, 1713, 1875, 1713, 1713, 1876, 1713, 1877, 1713,
     1713, 1713, 1713, 1878, 1879, 1713, 1880, 1881, 1882, 1713,
     1883, 1713, 1713, 1713, 1884, 1885, 1713, 1713, 1713, 1886,
     1713, 1887, 1888, 1889, 1713, 1890, 1713, 1713, 1890, 1713,
     1890, 1889, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1891, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1892, 1892, 1893, 1713, 1894,
     1886, 1886, 1713, 1713, 1713, 1886, 1895, 1886, 1896, 1897,
     1898, 1898, 1898, 1898, 1898, 1713, 1713, 1713, 1713, 1713,

     1890, 1713, 1713, 1899, 1899, 1900, 1713, 1901, 1713, 1902,
     1902, 1713, 1903, 1904, 1904, 1905, 1713, 1906, 1907, 1907,
     1908, 1909, 1713, 1910, 1713, 1911, 1713, 1713, 1713, 1912,
     1912, 1913, 1713, 1914, 1914, 1915, 1713, 1713, 1916, 1917,
     1713, 1713, 1713, 1713, 1713, 1918, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1919, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1920, 1713,
     1921, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1922, 1713, 1713, 1923, 1713, 1713, 1924, 1925, 1926, 1713,
     1713, 1713, 1713, 1713, 1927, 1713, 1928, 1929, 1930, 1713,

     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1931, 1931, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1932, 1933, 1713, 1927, 1927, 1927, 1934, 1935, 1927, 1936,
     1937, 1937, 1937, 1937, 1937, 1713, 1713, 1938, 1939, 1713,
     1713, 1940, 1713, 1940, 1713, 1941, 1942, 1942, 1943, 1713,
     1713, 1713, 1713, 1713, 1944, 1713, 1945, 1946, 1713, 1713,
     1947, 1713, 1713, 1713, 1713, 1713, 1948, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1949, 1950, 1951, 1713,

     1713, 1952, 1953, 1713, 1713, 1713, 1927, 1713, 1713, 1954,
     1955, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1956, 1713, 1713, 1713, 1713, 1713, 1927, 1927, 1927,
     1713, 1713, 1927, 1937, 1937, 1937, 1937, 1937, 1713, 1939,
     1713, 1713, 1713, 1941, 1943, 1713, 1713, 1713, 1713, 1944,
     1713, 1946, 1946, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1957, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1958, 1959, 1951, 1713, 1713, 1952,

     1713, 1713, 1713, 1927, 1713, 1954, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1960, 1713, 1713, 1956, 1956, 1713, 1713,
     1927, 1927, 1927, 1713, 1927, 1937, 1937, 1937, 1937, 1937,
     1939, 1713, 1713, 1713, 1941, 1943, 1713, 1713, 1713, 1713,
     1944, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1961,
     1962, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1958,
     1959, 1713, 1713, 1713, 1713, 1713, 1927, 1713, 1713, 1713,

     1713, 1713, 1713, 1960, 1960, 1713, 1713, 1713, 1927, 1927,
     1927, 1927, 1937, 1937, 1937, 1937, 1937, 1939, 1713, 1713,
     1713, 1941, 1943, 1713, 1713, 1713, 1713, 1944, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1963, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1964, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1927, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1927, 1927, 1927,
     1713, 1937, 1937, 1937, 1937, 1939, 1713, 1713, 1713, 1941,

     1943, 1713, 1713, 1713, 1713, 1944, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1927, 1713, 1713, 1713, 1713, 1713, 1965, 1713, 1966, 1713,
     1713, 1713, 1927, 1927, 1927, 1713, 1937, 1937, 1937, 1937,
     1939, 1713, 1713, 1713, 1941, 1943, 1713, 1713, 1713, 1713,
     1944, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,

     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1927, 1713, 1713, 1713, 1713, 1965, 1965,
     1966, 1966, 1927, 1927, 1927, 1937, 1937, 1937, 1937, 1939,
     1713, 1713, 1713, 1941, 1943, 1713, 1713, 1713, 1713, 1944,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1927, 1713, 1927, 1927, 1927, 1937, 1937, 1937, 1937,

     1939, 1713, 1713, 1713, 1941, 1943, 1713, 1713, 1713, 1713,
     1944, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1927,
     1713, 1927, 1927, 1927, 1937, 1937, 1937, 1937, 1939, 1713,
     1713, 1713, 1941, 1943, 1713, 1713, 1713, 1713, 1944, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,

     1713, 1713, 1713, 1927, 1713, 1927, 1713, 1927, 1937, 1937,
     1937, 1939, 1713, 1713, 1713, 1941, 1943, 1713, 1713, 1713,
     1713, 1944, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1927, 1713, 1927, 1713, 1937, 1937,
     1939, 1713, 1713, 1713, 1941, 1943, 1713, 1713, 1713, 1713,
     1944, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,

     1713, 1713, 1927, 1713, 1927, 1937, 1937, 1939, 1713, 1713,
     1713, 1941, 1943, 1713, 1713, 1713, 1713, 1944, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1927, 1713,
     1927, 1937, 1937, 1939, 1713, 1713, 1713, 1941, 1943, 1713,
     1713, 1713, 1713, 1944, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1927, 1713, 1713, 1967, 1713, 1967, 1967, 1967,

     1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967,
     1967, 1967,    0, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,

     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,

     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713
    } ;

static yyconst flex_int16_t yy_nxt[13130] =
    {   0,
       97,   98,   99,   97,   98,   97,  100,   97,  101,   97,
       97,   97,   97,   97,   97,  102,   97,  103,  104,   97,
      102,  102,  102,   97,   97,  105,   97,   97,   97,  106,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,   97,  108,   97,  109,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,   97,   97,
       97,   97,   97,  110,  111,  125,  125,  111,  177,  177,
      181,  181,  178,  178,  182,  182,  217,  112,  113,  217,

      114,  115,  224,  224,  116,  116,  117,  245,  245,  268,
      268,  281,  126,  126,  225,  225,  330, 1379, 1380,  233,
      234,  330,  233,  258,  235,  259,  331,  332,  281,  226,
      226,  331,  332,  561,  349,  127,  127,  562,  179,  179,
      183,  183,  233,  234,  350,  233,  218,  235,  395,  218,
      260,  395,  227,  227, 1381,  621,  348,  246,  246,  269,
      269,  282,  117,  118,  118,  119,  118,  118,  118,  120,
      236,  118,  118,  261,  118,  118,  118,  118,  282,  118,
      621,  118,  122,  238,  292,  239,  122,  118,  118,  118,
      118,  118,  412,  236,  412,  240,  432,  432,  432,  432,

      241,  254,  255,  395,  254,  238,  395,  239,  415,  566,
      242,  293,  566,  416,  118,  123,  118,  240,  417,  418,
      567,  417,  241,  254,  255,  577,  254,  341,  342,  578,
      341,  348,  242,  243,  293,  258,  645,  259,  263,  645,
      264,  118,  118,  118,  118,  118,  118,  119,  118,  118,
      118,  120,  256,  118,  118,  243,  118,  118,  118,  118,
      292,  118,  260,  118,  122,  265,  275,  292,  122,  118,
      118,  118,  118,  118,  256,  654,  276,  277,  343,  351,
      419,  347,  352,  347,  353,  261,  601,  293,  266,  352,
      352,  602, 1382,  278,  294,  348,  118,  123,  118,  755,

      400,  756,  401,  401,  401,  465,  465,  465,  465,  655,
      293,  348,  478,  478,  478,  478,  279,  294,  355,  524,
      524,  524,  524,  118,  118,  118,  118,  128,  128,  129,
      128,  128,  128,  128,  128,  130,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  128,  131,
      128,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,

      130,  130,  130,  130,  130,  128,  128,  128,  128,  130,
      130,  132,  133,  134,  133,  133,  132,  132,  132,  135,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  136,
      132,  132,  132,  132,  137,  132,  132,  132,  132,  132,
      132,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  132,  139,  132,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  132,
      132,  132,  140,  138,  138,  141,  141,  142,  141,  141,

      141,  143,  292,  141,  141,  275,  141,  141,  141,  141,
      263,  141,  264,  141,  145,  276,  277,  292,  145,  141,
      146,  141,  141,  141,  577,  412,  605,  412,  579,  294,
      502,  606,  278,  502,  292,  407,  408,  265, 1713,  408,
      408,  622,  301,  408,  295,  504,  141,  147,  141,  301,
      429,  430,  294,  429, 1383,  279,  646,  302,  543,  338,
      266,  295,  338,  413,  302, 1384,  622,  295,  348,  408,
      544,  775,  408,  141,  141,  141,  141,  141,  141,  142,
      141,  141,  141,  143,  295,  141,  141,  339,  141,  141,
      141,  141,  303,  141,  314,  141,  145,  314,  776,  303,

      145,  141,  146,  141,  141,  141,  315,  667,  545,  315,
      340, 1187,  431,  626,  475,  476,  324,  475,  677,  402,
      553,  316,  402,  553,  316,  554,  325,  326,  141,  147,
      141,  625,  667,  653, 1385,  403,  653, 1713, 1187,  678,
     1713,  394,  324,  327,  317,  437,  438,  317, 1713,  666,
      438,  395,  325,  326,  395,  141,  141,  141,  141,  148,
      148,  149,  148,  148,  148,  150,  328,  148,  148,  327,
      148,  148,  148,  148,  666,  148,  477,  148,  152,  438,
      334,  672,  152,  148,  153,  148,  154,  148,  335, 1713,
      438, 1386,  328,  347,  438,  347,  347,  394,  347,  347,

      347,  481,  482,  335,  481,  335,  672,  348,  717,  673,
      148,  155,  148,  660,  660,  660,  660,  398,  399,  347,
      398,  347,  347,  438,  347,  347,  347, 1387,  757,  446,
      336,  337,  381,  348,  673,  758,  674,  148,  148,  148,
      148,  148,  148,  149,  148,  148,  148,  150,  334,  148,
      148, 1388,  148,  148,  148,  148,  335,  148,  381,  148,
      152,  674, 1389,  483,  152,  148,  153,  148,  154,  148,
     1390,  335,  666,  335,  420,  420,  420,  420,  420,  420,
      420,  420,  760,  415,  420,  420,  420,  420,  416,  764,
      762,  421,  148,  155,  148,  421,  422,  666,  336,  337,

      422,  421,  395,  581,  763,  395,  422,  582,  425,  398,
      399, 1391,  398,  583,  697,  584,  698,  698,  698,  148,
      148,  148,  148,  132,  156,  157,  156,  156,  132,  132,
      132,  158,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  159,  132,  132,  132,  132,  160,  132,  132,  132,
      132,  132,  132,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  132,  139,  132,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      161,  132,  132,  132,  162,  161,  161,  163,  164,  165,
      164,  164,  163,  163,  163,  166,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  167,  163,  163,  163,  163,
      168,  163,  163,  163,  163,  163,  163,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  163,  170,
      163,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  163,  163,  163,  171,  169,
      169,  172,  172,  173,  172,  172,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  172,  175,  172,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  172,
      172,  172,  172,  174,  174,  184,  184,  185,  184,  184,
      184,  186,  502,  184,  184,  502,  184,  184,  184,  184,
     1393,  184,  703,  184,  188,  703,  447,  504,  188,  184,

      184,  184,  184,  184,  723,  497,  498,  723,  449,  450,
      498,  409,  410,  450,  409,  460,  389,  447,  396,  389,
      348,  396,  645,  666,  349,  645,  184,  189,  184,  390,
      390,  581,  391,  392,  397,  585,  393,  393,  394,  498,
      394,  583,  450,  584,  339,  819,  348,  666,  819,  486,
      487, 1258,  486,  184,  184,  184,  184,  184,  184,  185,
      184,  184,  184,  186, 1140,  184,  184,  340,  184,  184,
      184,  184,  666,  184, 1713,  184,  188, 1260,  786, 1141,
      188,  184,  184,  184,  184,  184, 1713,  450, 1713,  498,
      788,  450, 1078,  498,  394, 1713,  394,  455,  455,  455,

      455,  455,  455,  455,  455,  778, 1079,  601,  184,  189,
      184,  488,  602,  400,  456,  401,  401,  401,  456,  457,
      450,  786,  498,  457,  348,  417,  418,  779,  417,  711,
      711,  711,  711,  788, 1402,  184,  184,  184,  184,  190,
      190,  191,  190,  190,  190,  190,  190,  192,  190,  190,
      190,  190,  190,  190,  190,  193,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      190,  194,  190,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  190,  190,  190,
      190,  192,  192,  195,  195,  196,  195,  195,  195,  195,
      195,  197,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  195,  198,  195,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,

      197,  195,  195,  195,  195,  197,  197,  199,  200,  201,
      200,  200,  199,  199,  199,  202,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  203,  199,  199,  199,  199,
      204,  199,  199,  199,  199,  199,  199,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  199,  206,
      199,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  199,  199,  199,  207,  205,
      205,  208,  208,  209,  208,  208,  208,  208,  208,  210,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  208,  211,  208,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  208,
      208,  208,  208,  210,  210,  212,  212,  213,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  212,  212,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  212,  215,  212,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  212,  212,  212,  212,  214,  214,  219,
      219,  220,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      219,  222,  219,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  219,  219,  219,
      219,  221,  221,  228,  228,  229,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  228,  231,  228,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  228,  228,  228,  228,  230,  230,  247,  248,  249,
      247,  248,  247,  247,  247,  247,  247,  247,  247,  250,
      247,  247,  247,  247,  251,  251,  247,  251,  251,  251,
      247,  247,  247,  247,  247,  247,  247,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  247,  252,
      247,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,

      251,  251,  251,  251,  251,  247,  247,  247,  247,  247,
      247,  270,  270,  271,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  270,  273,  270,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  270,
      270,  270,  270,  272,  272,  283,  283,  284,  283,  283,

      283,  283,  283,  285,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  283,  286,  283,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  283,  283,  283,  283,  285,  285,  287,
      287,  288,  287,  287,  287,  287,  287,  289,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,

      287,  287,  287,  287,  287,  287,  287,  287,  287,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      287,  290,  287,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  287,  287,  287,
      287,  289,  289,  296,  296,  297,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  298,  298,  298,  298,  298,  298,  298,

      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  296,  299,  296,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  296,  296,  296,  296,  298,  298,  305,  305,  705,
      782,  306,  306,  705, 1403,  566,  307,  307,  566,  467,
      467,  467,  467, 1404,  308,  308,  567, 1073,  427,  427,
      427,  427,  309,  309, 1074,  782,  468,  463,  463,  463,
      463,  469,  705,  310,  310,  421,  605,  311,  311,  451,
      422,  606, 1713,  679,  456, 1713,  679,  312,  312,  457,

     1407, 1713,  450, 1713,  429,  430,  450,  429,  310,  310,
      447, 1408,  311,  311,  318,  318,  319,  318,  318,  318,
      320,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  553,  318,  318,  553,  450,  554,  318,  318,  318,
      318,  318,  679,  318,  690,  679,  396,  703,  426,  396,
      703,  415,  420,  420,  420,  420,  416,  462,  467,  467,
      467,  467,  696, 1256, 1409,  318,  322,  318,  394,  421,
      680,  424,  424,  424,  422,  468,  425,  601,  439,  440,
      469,  439,  602,  679,  491,  492,  679,  491,  572,  573,
     1256,  572,  318,  318,  318,  318,  318,  318,  319,  318,

      318,  318,  320,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  605,  318,  318,  803, 1410,  606,  318,
      318,  318,  318,  318,  394,  318, 1412, 1413,  398,  399,
      804,  398,  426,  447,  690,  409,  410, 1414,  409,  574,
      351,  803,  347,  352,  347,  353,  493,  318,  322,  318,
      352,  352, 1713,  408,  447,  804,  348,  408,  715,  691,
      680,  786,  715,  439,  440, 1415,  439,  510,  511,  502,
      510, 1416,  502,  788,  318,  318,  318,  318,  356,  355,
     1713,  438,  805,  806,  504,  438,  408,  458,  455,  455,
      458,  715,  357,  521,  522, 1417,  521,  411,  460,  432,

      432,  432,  432,  358,  456,  359,  360,  805,  806,  457,
      361,  362,  528,  529,  438,  528,  363,  364,  365,  366,
      367,  368, 1057,  533,  534,  441,  533,  543,  358,  512,
      359,  360,  407,  408,  807,  361,  362,  408, 1058,  544,
      786,  363,  364,  365,  366,  367,  368,  369,  369,  369,
      369, 1418,  788,  452,  453,  523,  452,  370, 1713,  807,
     1419,  458,  455,  455,  458,  369,  408,  369, 1420,  371,
     1713,  450,  460,  679,  530,  450,  679,  545,  456, 1713,
      461,  461,  461,  457, 1421,  535,  467,  467,  467,  467,
      537,  538,  371,  537,  341,  342,  373,  341,  703,  374,

      375,  703, 1422,  468,  450,  471,  471,  471,  469,  452,
      453,  376,  452,  341,  342,  454,  341, 1423,  377, 1424,
      378,  379,  369,  369,  369,  369,  467,  467,  467,  467,
      563,  564,  370,  563,  473,  473,  473,  473, 1141,  795,
      369,  462,  369,  468,  371,  343,  475,  476,  469,  475,
      680,  468,  539,  897, 1713,  408,  469, 1141,  898,  408,
      506,  506,  506,  506,  343,  808,  472,  371, 1425,  569,
      570,  383,  569,  668,  384,  385,  668, 1426,  386,  508,
      508,  508,  509,  683,  407,  408,  387,  684,  408,  408,
      808, 1141,  565,  377,  809,  378,  379,  442,  442,  669,

      442,  442,  442,  443,  895,  442,  442,  895,  442,  442,
      442,  442, 1427,  442,  472,  442,  445, 1428,  408,  809,
      445,  442,  442,  442,  446,  442,  685, 1429, 1430,  499,
      500,  571,  499,  706,  810,  513,  513,  513,  513,  513,
      513,  513,  513,  686, 1431, 1432, 1713,  498,  442,  445,
      442,  498,  514,  687, 1434,  723,  514,  515,  723,  810,
     1435,  515,  513,  513,  513,  513,  460, 1436,  519,  519,
      519,  519, 1437,  666, 1438,  442,  442,  442,  442,  514,
      498,  517,  517,  517,  515,  514,  513,  513,  513,  513,
      515,  501,  546,  546,  546,  546,  586,  587,  666,  586,

     1439,  590,  591,  514,  590,  666,  338,  664,  515,  338,
      546,  665,  546,  666,  547,  594,  595, 1440,  594,  597,
      598, 1441,  597,  632,  633,  668,  632,  661,  668,  720,
      666,  662,  664,  720,  339,  813,  665,  547,  666,  814,
      663, 1442,  518,  432,  432,  432,  432,  679,  518, 1443,
      679,  669,  661,  815,  670,  816,  662,  340,  588, 1444,
      813, 1445,  720,  592,  814,  663,  546,  548,  549,  671,
      548,  656, 1446,  546,  546,  546,  546,  596,  815,  670,
      816,  599,  657,  658,  659,  634,  679,  481,  482,  679,
      481,  546, 1447,  546,  671,  547,  656,  347,  690,  347,

      347,  817,  347,  347,  347,  437,  438,  657,  658,  659,
      438,  348,  723,  692,  347,  723,  347,  347,  547,  347,
      347,  347,  679,  460,  680,  679,  817,  679,  348,  550,
      679, 1448,  486,  487,  683,  486,  381,  690,  684,  438,
      402,  812,  396,  402,  812,  396, 1449,  546,  369,  369,
      369,  369,  694,  381, 1713,  438,  403,  731,  403,  438,
     1451,  731,  394,  680,  394, 1460,  369,  669,  369,  402,
      639,  679,  402,  690,  679, 1461,  402,  685,  690,  402,
      699,  700, 1462,  699,  621,  403, 1465, 1466,  438,  695,
      731,  394,  696,  639,  693, 1467,  701,  373,  394,  680,

      374,  375,  702,  820,  687, 1468,  437,  438,  348,  621,
      912,  438,  376,  912,  389, 1470, 1471,  389,  394,  377,
      394,  378,  379,  369,  369,  369,  369,  390,  390,  882,
      391,  392,  882, 1472,  393,  393,  394, 1473, 1474,  824,
      438,  369,  339,  369,  914,  639,  820,  394,  680,  420,
      420,  420,  420,  915,  394,  716,  491,  492,  702,  491,
      420,  420,  420,  420, 1475,  340,  421,  812,  639,  914,
      812,  422,  373,  820, 1476,  374,  375,  421,  915,  640,
      499,  500,  422,  499,  425, 1477, 1478,  376,  465,  465,
      465,  465,  394,  669,  377,  883,  378,  379,  647,  510,

      511,  647,  510,  647,  647,  647,  647,  647,  647,  647,
      647,  648,  647,  649,  647,  649,  650,  647,  651,  651,
      651,  647,  647,  647,  647,  647,  647,  652,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  647,
      647,  647,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  647,  647,  647,  647,
      647,  647,  679,  521,  522,  679,  521,  916, 1713, 1713,
     1713, 1713,  427,  427,  427,  427,  420,  420,  420,  420,

      427,  427,  427,  427,  528,  529, 1713,  528, 1713,  421,
     1713, 1479,  916,  421,  422, 1480,  819,  421,  422,  819,
      425, 1141,  422,  420,  420,  420,  420,  533,  534,  447,
      533, 1713, 1481, 1713,  455,  455,  455,  455, 1141, 1141,
      421,  449,  450, 1713,  450,  422,  450,  425,  450, 1482,
      447,  456, 1713, 1483,  917, 1484,  457,  447,  918,  680,
     1485, 1713, 1713,  465,  465,  465,  465, 1486,  679,  449,
      450,  679,  426,  919,  450,  450,  920,  450,  447,  917,
      426,  442,  442,  918,  442,  442,  442,  717,  927,  442,
      442,  927,  442,  442,  442,  442, 1487,  442,  919,  718,

      445,  920, 1489,  450,  445,  442,  442,  442,  446,  442,
     1266, 1266, 1266,  463,  463,  463,  463, 1490,  721,  690,
      458,  455,  455,  458,  467,  467,  467,  467, 1491, 1492,
      456,  460,  442,  445,  442,  457,  831,  456, 1493,  497,
      498,  468,  457, 1494,  498,  680,  469, 1495,  463,  463,
      463,  463,  478,  478,  478,  478, 1496, 1497,  921,  442,
      442,  442,  442,  442,  442,  456,  442,  442,  442,  717,
      457,  442,  442,  498,  442,  442,  442,  442, 1498,  442,
     1499,  442,  445,  921, 1500, 1501,  445,  442,  442,  442,
      442,  442, 1502,  462, 1503,  458,  455,  455,  458, 1505,

     1513,  666,  458,  455,  455,  458,  460,  478,  478,  478,
      478, 1514,  456,  460,  442,  445,  442,  457, 1515,  456,
     1713,  498, 1518, 1519,  457,  498,  666,  924,  462,  458,
      455,  455,  458,  473,  473,  473,  473, 1520, 1521, 1523,
      460,  442,  442,  442,  442,  697,  456,  698,  698,  698,
      468,  457,  924, 1524,  498,  469,  467,  467,  467,  467,
      467,  467,  467,  467,  473,  473,  473,  473,  467,  467,
      467,  467, 1525,  468,  497,  498, 1526,  468,  469,  498,
      895,  468,  469,  895,  927,  468,  469,  927,  537,  538,
      469,  537,  506,  506,  506,  506,  506,  506,  506,  506,

      506,  506,  506,  506,  524,  524,  524,  524,  498,  513,
      513,  513,  513,  472,  509,  735,  735,  735,  509,  508,
      508,  508,  509,  732, 1527, 1528,  514,  524,  524,  524,
      524,  515,  519,  519,  519,  519,  513,  513,  513,  513,
      513,  513,  513,  513,  472,  548,  549,  679,  548,  514,
      679, 1529,  679,  514,  515,  679,  679,  514,  515,  679,
     1530,  925,  515,  519,  519,  519,  519,  513,  513,  513,
      513,  563,  564, 1531,  563,  569,  570,  351,  569,  347,
      514,  347,  911, 1532,  514,  515,  925,  572,  573,  515,
      572,  586,  587,  348,  586,  590,  591, 1533,  590,  594,

      595,  926,  594,  597,  598, 1141,  597,  632,  633,  825,
      632, 1008,  518,  660,  660,  660,  660, 1010,  907,  842,
      842,  842,  842, 1011,  680,  826,  926, 1534, 1061,  680,
      351, 1062,  347,  680,  347,  911, 1008, 1159,  574, 1535,
     1159, 1536, 1010,  518,  647,  843,  348,  647, 1011,  647,
      647,  647,  647,  647,  647,  647,  647,  648,  647,  649,
      647,  649,  799,  647,  651,  651,  651,  647,  647,  647,
      647,  647,  647,  652,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  647,  800,  647,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  647,  647,  647,  647,  647,  647,  819,  407,
      705,  819, 1537,  679,  705,  820,  679, 1538, 1713,  705,
     1012, 1307,  922,  705, 1307,  922, 1540,  679,  699,  700,
      679,  699,  437,  715, 1541, 1542, 1543,  715, 1013,  699,
      700, 1544,  699,  705,  836, 1012,  699,  700,  923,  699,
      702,  679,  705, 1545,  679,  837,  679,  679,  820,  679,
      679,  702,  838, 1013, 1546, 1547,  715,  679,  702, 1433,
      679, 1548, 1433, 1549,  348, 1713,  715, 1550,  690, 1551,

      715, 1552,  829, 1553,  832,  820,  827,  827, 1554,  827,
      680,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  690,  827,  680,  827,  702,  690,  690,  715,
      827,  827,  827,  827,  827,  827, 1556,  702,  407,  408,
      833,  928,  679,  408,  702,  679,  835,  834,  680,  699,
      700, 1016,  699,  680,  680, 1562, 1563,  827,  827,  827,
     1488,  437,  438, 1488,  680,  837,  438,  844,  844,  844,
      844,  702,  408,  497,  731, 1019, 1016, 1564,  731,  842,
      842,  842,  842, 1020,  827,  827,  823,  827,  827,  827,
     1567,  679,  839,  843,  679,  438,  666,  447, 1568, 1713,

     1019, 1713,  731, 1569,  929,  843,  731,  731, 1020,  449,
      720, 1713,  720, 1100,  720,  846,  720, 1570,  447,  680,
     1713,  666, 1572,  679, 1573, 1101,  679,  702,  442,  442,
     1574,  442,  442,  442,  717,  731,  442,  442, 1100,  442,
      442,  442,  442,  720,  442,  720,  442,  848,  447, 1004,
     1101,  848,  442,  442,  442,  442,  442,  497,  498, 1575,
      449,  450,  498,  679, 1539,  450,  679, 1539,  680,  447,
      857,  857,  857,  857,  690, 1507, 1576,  934, 1507,  442,
      848,  442,  506,  506,  506,  506,  679,  679, 1577,  679,
      679,  498,  509, 1578,  450, 1579,  506,  506,  506,  506,

      680,  735,  735,  735,  509, 1102,  442,  442,  442,  442,
      679,  855, 1103,  679,  849,  735,  735,  735,  509,  930,
      679, 1580, 1581,  679,  679, 1582,  679,  679,  679,  679,
     1102,  679, 1583,  844,  844,  844,  844, 1103,  690, 1584,
      680,  827,  827,  936,  827, 1585,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  933,  827,  843,
      827,  690, 1586,  680,  680,  827,  827,  827,  827,  827,
      827,  690,  935, 1014, 1018,  690, 1014, 1018,  937, 1587,
      699,  700,  927,  699, 1023,  927, 1588,  680,  699,  700,
     1589,  699,  827,  827,  827,  938,  836,  680, 1021, 1015,

      923,  680,  702,  680,  939,  680, 1590,  666,  407,  408,
      702,  699,  700,  408,  699,  857,  857,  857,  857,  827,
      827,  932,  827,  827,  827, 1105, 1591,  838, 1105,  437,
      438,  447,  666,  702,  438,  497,  498,  509, 1018,  348,
      498, 1018,  408,  449,  450,  407,  408, 1592,  450,  940,
      408, 1015,  447,  506,  506,  506,  506,  679,  702, 1024,
      679, 1106, 1539,  438,  923, 1539,  702, 1593,  679,  498,
      944,  679,  953,  953,  953,  509,  950,  450,  679,  408,
      679,  679,  679,  679,  945,  679, 1106,  437,  438,  702,
      442,  442,  438,  442,  442,  442,  717, 1031,  442,  442,

     1107,  442,  442,  442,  442, 1594,  442, 1595,  718,  848,
     1596, 1597, 1108,  848,  442,  442,  442,  446,  442,  964,
      965,  438, 1598, 1022,  966, 1107, 1599,  967,  968,  690,
     1025,  690,  969,  690,  680,  970,  971, 1108,  972, 1035,
     1028,  442,  848,  442,  679,  680, 1027,  679, 1026, 1181,
      679,  679, 1600,  679,  679,  680, 1601,  680, 1602,  680,
      497,  498, 1182, 1604, 1183,  498, 1609, 1184,  442,  442,
      442,  442,  442,  442, 1181,  442,  442,  442,  717,  679,
      442,  442,  679,  442,  442,  442,  442, 1182,  442, 1183,
      442,  848, 1184, 1185,  498,  848,  442,  442,  442,  442,

      442,  690,  690,  679,  699,  700,  679,  699,  679, 1610,
     1186,  679, 1041, 1030, 1109, 1611, 1614,  447, 1185, 1029,
      836,  680, 1615,  442,  848,  442,  702,  680,  680,  449,
      450, 1616, 1111,  679,  450, 1186,  679, 1254,  447,  506,
      506,  506,  506, 1617, 1255,  506,  506,  506,  506, 1619,
      442,  442,  442,  442,  679, 1620,  680,  679,  953,  953,
      953,  509, 1254,  450,  953,  953,  953,  509,  679, 1255,
      679,  679, 1097,  679,  679,  679, 1621,  679,  679, 1110,
      680, 1036,  702,  447, 1622,  680,  407,  408,  437,  438,
     1112,  408, 1623,  438,  679,  449,  450,  679,  679,  679,

      450,  679,  679, 1624,  447,  690,  679,  497,  498,  679,
      680, 1191,  498,  679, 1191,  679,  679, 1625,  679,  690,
      408,  690,  438, 1115, 1113,  690,  690, 1105, 1626,  450,
     1105,  680, 1117,  679, 1627, 1118,  679, 1122, 1628, 1114,
     1116,  498, 1141,  679, 1123,  680,  679,  680, 1629, 1630,
     1631,  680,  680, 1015, 1632, 1191, 1128, 1189, 1191, 1633,
     1178, 1635,  407,  408,  690,  679,  690,  408,  679,  679,
     1188,  680,  679, 1190, 1636,  680,  680, 1257, 1259, 1637,
     1257, 1259, 1194,  680,  690, 1192,  679, 1638,  680,  679,
      680, 1193,  680, 1639,  690,  447,  408, 1195, 1640, 1196,

      437,  438, 1641, 1258, 1260,  438,  690,  449,  450, 1642,
      680, 1643,  450,  497,  498, 1644,  447, 1645,  498, 1251,
      680,  679,  679,  679,  679,  679,  679, 1558, 1634, 1646,
     1558, 1634,  680, 1191,  438, 1263, 1191, 1200, 1647, 1648,
      679,  450,  680,  679, 1201,  679,  680,  498,  679, 1650,
     1206, 1655, 1266, 1266, 1266, 1264,  407,  408, 1656,  679,
     1657,  408,  679,  680,  447, 1660,  679,  437,  438,  679,
     1661, 1662,  438,  690,  690,  679,  449,  450,  679,  497,
      498,  450, 1663,  679,  498,  447,  679, 1665, 1267, 1666,
      408,  690, 1268, 1265, 1330, 1667,  690, 1330,  680,  680,

      680,  438, 1332, 1271,  679, 1332, 1668,  679,  679, 1270,
      450,  679, 1269,  498, 1275,  679, 1333,  680,  679, 1669,
     1258, 1670,  680, 1276,  679, 1671, 1281,  679, 1260,  679,
     1324, 1672,  679,  407,  408, 1673,  680,  679,  408, 1330,
      679, 1334, 1330,  680,  437,  438, 1674, 1332, 1675,  438,
     1332,  447,  680,  679, 1335,  690,  679,  497,  498,  690,
      680, 1336,  498,  449,  450, 1258,  690,  408,  450, 1340,
     1676, 1677,  447, 1260, 1337,  690,  679, 1339,  438,  679,
     1344,  680, 1392,  573,  679,  680, 1338,  679, 1678,  407,
      408,  498,  680, 1350,  408,  679, 1679,  450,  679, 1345,

      679,  680, 1680,  679, 1394,  679,  680, 1395,  679, 1681,
     1682, 1683,  679, 1684,  680,  679,  447, 1685, 1686,  679,
      437,  438,  679,  408,  679,  438, 1687,  679,  449,  450,
      680,  679, 1688,  450,  679,  690, 1401,  447, 1689,  679,
      497,  498,  679, 1690, 1396,  498,  690,  679, 1691, 1398,
      679, 1397, 1692,  680,  438,  679,  690,  679,  679,  342,
      679,  680,  450,  690, 1450, 1698,  679, 1405,  679,  679,
     1378,  679,  680, 1399,  498, 1406, 1400,  680, 1507,  690,
     1452, 1507,  680, 1453, 1377,  679, 1701, 1411,  679,  680,
      690, 1507,  407,  408, 1507, 1455,  680,  408,  690,  437,

      438,  680,  447, 1454,  438,  690,  690,  679,  680,  679,
      679, 1456,  679, 1376,  449,  450,  680,  690, 1705,  450,
      497,  498,  690,  447,  680,  498,  408, 1457, 1458, 1375,
     1504, 1506,  680,  438,  680,  679,  679, 1459,  679,  679,
     1702,  690,  690,  680, 1463,  680, 1558,  690,  450, 1558,
      679, 1711, 1708,  679,  498,  680, 1508, 1374,  690, 1464,
      690, 1694,  680, 1373, 1694, 1469,  407,  408,  680,  437,
      438,  408,  497,  498,  438,  679,  447,  498,  679, 1558,
     1510, 1509, 1558,  690,  680,  690,  680,  690,  449,  450,
     1372,  679,  679,  450,  679,  679,  679,  447, 1699,  679,

      408, 1555, 1511,  438, 1557, 1700,  498, 1371,  679,  407,
      408,  679,  680,  680,  408, 1512, 1370, 1369, 1516,  437,
      438, 1522,  450,  680,  438, 1697,  690,  680, 1697, 1559,
      690,  497,  498,  690,  447,  679,  498, 1517,  679, 1368,
      407,  408,  690,  408, 1367,  408,  449,  450, 1703, 1560,
     1561,  450,  680,  438, 1603,  447,  680,  437,  438,  690,
     1565, 1605,  438,  679,  679,  498,  679,  679,  680,  680,
     1366,  447, 1571,  680,  408, 1365,  690, 1606, 1608, 1694,
      450, 1364, 1694,  449,  450,  680,  690, 1566,  450, 1707,
     1607,  438,  447,  497,  498, 1612,  679,  679,  498,  679,

      679,  407,  408,  437,  438,  690,  408, 1706,  438,  497,
      498,  447,  680,  679,  498, 1363,  679,  450, 1649, 1694,
      690, 1613, 1694,  449,  450, 1362, 1697,  498,  450, 1697,
     1651, 1618,  447, 1695,  342,  408, 1695,  438, 1712,  690,
      680,  680, 1704,  498,  407,  408, 1361,  690,  690,  408,
     1360, 1695,  342, 1654, 1695, 1658,  680,  450,  437,  438,
      690, 1664, 1652,  438,  497,  498, 1653, 1710,  447,  498,
      690,  690, 1359,  680,  680, 1659,  341,  342,  408,  341,
      449,  450, 1693, 1358, 1696,  450, 1709, 1357, 1356,  447,
      680, 1355,  438, 1354, 1353, 1352,  680, 1351,  498, 1349,

     1348, 1347,  343,  680,  676,  689, 1346,  676,  676,  676,
      680,  784, 1343,  676,  450,  689, 1342, 1341,  689,  689,
      689,  784, 1328, 1327, 1326,  784,  784, 1696,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,

      121,  121,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,

      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  280,  280,  280,  280,  280,  280,

      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,

      300,  300,  300,  300,  300,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  344,  344, 1325,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  346,  821,  689, 1323,  821,  821,
      821, 1322, 1321, 1320, 1319,  784,  689, 1318, 1317,  689,
      689,  689, 1316,  346, 1315,  784,  346,  346,  346,  784,
      784, 1314, 1313,  346,  347, 1312,  347,  347,  830,  347,

     1311,  830,  830,  830, 1310,  347,  347, 1309, 1308,  347,
      347,  347,  354, 1306,  354,  354,  354,  354, 1305,  354,
      354,  354, 1304, 1303, 1302,  354,  354,  354, 1301,  354,
      354,  354,  372,  372,  372,  372,  821, 1300, 1299,  821,
      821,  821,  372, 1298, 1297, 1296, 1295, 1294,  372,  372,
     1293,  372,  372,  372, 1292,  372,  372,  372,  372, 1291,
      372,  372,  380, 1290,  380,  380,  995,  380, 1289,  995,
      995,  995, 1288,  380,  380, 1287,  995,  380,  380,  380,
      382,  382,  382,  382,  830,  830, 1286,  830,  830,  830,
      382, 1285, 1284, 1283, 1282, 1280,  382,  382, 1279,  382,

      382,  382, 1278,  382,  382,  382,  382, 1277,  382,  382,
      404,  404, 1274,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  406,  830, 1273,
      406,  830,  830,  830, 1272,  406, 1262,  406,  406,  406,
      406,  406, 1261, 1253, 1252, 1250,  406,  406,  406, 1249,
      406,  406,  406, 1248, 1247, 1246,  996,  406,  414,  996,
      996,  996, 1245, 1244, 1243, 1242,  996, 1241,  414, 1240,
      414,  414, 1239, 1238, 1237, 1236, 1235,  414, 1234, 1233,

      414,  414,  414, 1232, 1231, 1229, 1228,  414,  423,  423,
      423,  423, 1227, 1226,  423, 1225, 1224, 1223, 1222, 1221,
     1220, 1219, 1217, 1141,  423, 1216,  423,  423, 1215,  423,
     1214, 1213, 1212,  423, 1211, 1210,  423,  423,  423, 1209,
     1208, 1207,  423,  423,  428,  428,  428,  428, 1205, 1204,
      428, 1203, 1202, 1199, 1198, 1197, 1015, 1180, 1179, 1177,
      428, 1176, 1175,  428, 1174, 1173, 1089, 1089, 1172,  428,
     1171, 1170,  428,  428,  428, 1169, 1168, 1167,  428,  428,
      424,  424,  424,  424, 1166, 1165,  424, 1164, 1163, 1162,
     1161, 1160, 1158, 1157, 1154, 1153,  424, 1152,  424,  424,

     1151,  424, 1150, 1149, 1148,  424, 1147, 1146,  424,  424,
      424, 1145, 1141, 1144, 1143,  424,  433,  433,  433,  433,
     1142, 1139,  433, 1138, 1137, 1136, 1135, 1134, 1133, 1132,
     1131, 1130, 1129, 1127, 1126, 1125, 1124, 1121, 1120, 1119,
      923,  433, 1099,  798,  433,  433,  433, 1098, 1096, 1095,
     1094,  433,  434,  434, 1093,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  436,
     1092, 1089,  436, 1089, 1088, 1087, 1086,  436, 1085,  436,

      436,  436,  436,  436, 1084, 1083, 1082, 1081,  436,  436,
      436, 1080,  436,  436,  436, 1077, 1076, 1075, 1072,  436,
      444,  444, 1071,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  448,  448, 1070,
     1069,  448, 1067, 1066, 1065, 1064,  448, 1063,  448,  448,
      448,  448,  448, 1060, 1059,  448, 1056,  448,  448,  448,
     1055,  448,  448,  448, 1054, 1053, 1052, 1051,  448,  459,
      459,  459,  459, 1050, 1049,  459, 1048, 1047, 1046,  459,

     1045, 1044, 1043, 1042, 1040,  459, 1039,  459,  459, 1038,
     1037, 1034, 1033, 1032,  459, 1024, 1009,  459,  459,  459,
     1007,  798, 1005,  459,  459,  464,  464,  464,  464, 1003,
     1002,  464, 1001,  629,  999,  998,  994,  993,  992,  991,
      990,  464,  989,  988,  464,  987,  986,  985,  984,  983,
      464,  982,  981,  464,  464,  464,  980,  979,  978,  464,
      464,  461,  461,  461,  461,  977,  976,  461,  975,  974,
      973,  461,  963,  962,  961,  960,  959,  461,  958,  461,
      461,  957,  956,  527,  955,  954,  461,  951,  949,  461,
      461,  461,  948,  947,  946,  943,  461,  466,  466,  466,

      466,  942,  941,  466,  690,  931,  823,  669,  913,  909,
      908,  906,  905,  904,  629,  901,  900,  896,  779,  894,
      893,  892,  466,  891,  890,  466,  466,  466,  889,  888,
      887,  886,  466,  470,  470,  470,  470,  885,  884,  470,
      881,  880,  879,  877,  876,  875,  874,  873,  872,  470,
      871,  470,  470,  870,  869,  868,  866,  865,  470,  864,
      863,  470,  470,  470,  862,  527,  860,  470,  470,  474,
      474,  474,  474,  859,  856,  474,  854,  853,  852,  851,
      850,  425,  845,  841,  840,  474,  823,  818,  474,  802,
      801, 1713,  348,  348,  474,  348,  798,  474,  474,  474,

      643,  796,  794,  474,  474,  471,  471,  471,  471,  793,
      792,  471,  791,  790,  629,  785,  783,  781,  618,  618,
      780,  471,  777,  471,  471,  774,  773,  772,  605,  770,
      471,  601,  768,  471,  471,  471,  767,  766,  765,  761,
      471,  479,  479,  479,  479,  760,  759,  479,  757,  754,
      575,  753,  752,  751,  750,  749,  556,  556,  748,  747,
      550,  545,  745,  744,  743,  742,  479,  532,  741,  479,
      479,  479,  527,  738,  514,  737,  479,  480,  736,  733,
      480,  495,  729,  490,  728,  485,  727,  480,  725,  468,
      480,  480,  480,  456,  717,  717,  717,  480,  484,  484,

      435,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  489,  489,  425,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  494,  494,  712,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,

      494,  494,  494,  494,  494,  494,  494,  494,  494,  496,
      421,  709,  496,  415,  707,  405,  388,  496,  688,  496,
      496,  496,  496,  496,  682,  681,  675,  348,  496,  496,
      496,  348,  496,  496,  496,  643,  345,  641,  638,  496,
      503,  637,  630,  503,  629,  625,  503,  623,  620,  618,
      618,  616,  615,  613,  503,  611,  610,  609,  503,  607,
      603,  575,  561,  560,  559,  503,  557,  556,  503,  503,
      503,  552,  545,  541,  532,  503,  507,  507,  507,  507,
      527,  514,  507,  505,  495,  490,  485,  468,  456,  435,
      435,  421,  405,  388,  507,  507,  348,  345, 1713, 1713,

     1713,  507, 1713, 1713,  507,  507,  507, 1713, 1713, 1713,
     1713,  507,  516,  516,  516,  516, 1713, 1713,  516, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,  516, 1713,
      516,  516, 1713, 1713, 1713, 1713, 1713,  516, 1713, 1713,
      516,  516,  516, 1713, 1713, 1713,  516,  516,  520,  520,
      520,  520, 1713, 1713,  520, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713,  520, 1713, 1713,  520, 1713, 1713,
     1713, 1713, 1713,  520, 1713, 1713,  520,  520,  520, 1713,
     1713, 1713,  520,  520,  517,  517,  517,  517, 1713, 1713,
      517, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,

      517, 1713,  517,  517, 1713, 1713, 1713, 1713, 1713,  517,
     1713, 1713,  517,  517,  517, 1713, 1713, 1713, 1713,  517,
      525,  525,  525,  525, 1713, 1713,  525, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713,  525, 1713, 1713,  525,  525,
      525, 1713, 1713, 1713, 1713,  525,  526, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713,  526, 1713,  526, 1713,
     1713, 1713, 1713, 1713, 1713,  526, 1713, 1713,  526,  526,
      526, 1713, 1713, 1713, 1713,  526,  531,  531, 1713,  531,
     1713, 1713, 1713, 1713, 1713, 1713,  531, 1713, 1713,  531,

      531,  531, 1713, 1713, 1713, 1713,  531,  536,  536, 1713,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536, 1713,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  540, 1713, 1713,  540, 1713, 1713,
     1713, 1713, 1713, 1713,  540, 1713, 1713,  540,  540,  540,
     1713, 1713, 1713, 1713,  540,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
     1713,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  544,  544, 1713,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544, 1713,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  551,
     1713, 1713,  551, 1713, 1713, 1713, 1713, 1713, 1713,  551,
     1713, 1713,  551,  551,  551, 1713, 1713, 1713, 1713,  551,
      555,  555, 1713,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  558,  558, 1713,

      558, 1713,  558,  558,  558,  558,  558,  558,  558,  558,
     1713,  558,  558,  558,  558, 1713,  558,  558,  558,  558,
      558,  558, 1713,  558, 1713,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  568, 1713, 1713,  568, 1713, 1713,
     1713, 1713, 1713, 1713,  568, 1713, 1713, 1713, 1713,  568,
      568, 1713,  568, 1713, 1713, 1713, 1713, 1713, 1713,  568,
     1713, 1713,  568,  568,  568,  576,  576, 1713,  576, 1713,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
     1713,  576, 1713,  576,  576,  576,  576,  576,  576,  576,

      576,  576,  580,  580, 1713,  580, 1713,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580, 1713,  580, 1713,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  589,
     1713, 1713,  589, 1713, 1713, 1713, 1713, 1713, 1713,  589,
     1713, 1713,  589,  589,  589, 1713, 1713, 1713, 1713,  589,
      593,  593, 1713,  593,  593,  593,  593,  593,  593,  593,
      593, 1713, 1713,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593, 1713,  593, 1713,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  600, 1713, 1713,

     1713, 1713, 1713, 1713, 1713, 1713, 1713,  600, 1713,  600,
      600, 1713, 1713, 1713, 1713, 1713,  600, 1713, 1713,  600,
      600,  600, 1713, 1713, 1713, 1713,  600,  604, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713,  604, 1713,  604,
      604, 1713, 1713, 1713, 1713, 1713,  604, 1713, 1713,  604,
      604,  604, 1713, 1713, 1713, 1713,  604,  608,  608, 1713,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608, 1713,  608, 1713,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  612, 1713, 1713,  612, 1713, 1713,

     1713, 1713, 1713, 1713,  612, 1713, 1713,  612,  612,  612,
     1713, 1713, 1713, 1713,  612,  614,  614, 1713,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614, 1713,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614, 1713,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  617,  617, 1713,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  619,
      619, 1713,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  624,  624, 1713,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624, 1713,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624, 1713,  624, 1713,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  627, 1713, 1713,  627, 1713, 1713, 1713,
     1713,  627, 1713,  627, 1713, 1713,  627,  627,  627, 1713,
     1713, 1713, 1713,  627,  628, 1713,  628,  628,  628,  628,
      628, 1713, 1713, 1713,  628, 1713,  628, 1713, 1713,  628,

      628,  628, 1713, 1713, 1713, 1713,  628,  631,  631, 1713,
      631,  631,  631,  631,  631,  631,  631,  631, 1713, 1713,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631, 1713,  631, 1713,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635, 1713, 1713,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  636,  636, 1713,  636,  636,  636,  636,  636,  636,
     1713,  636,  636,  636,  636,  636,  636,  636,  636,  636,

      636,  636,  636, 1713, 1713,  636,  636,  636, 1713, 1713,
      636,  636,  636,  636,  636,  636,  636,  636,  372,  372,
      372,  372, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713,  372,  372, 1713,  372,  372,  372,
     1713,  372,  372,  372,  372, 1713,  372,  372,  344,  344,
     1713,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  642, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713,  642,  642, 1713,

     1713, 1713, 1713, 1713,  642, 1713, 1713,  642,  642,  642,
     1713, 1713, 1713, 1713,  642,  347, 1713,  347,  347, 1713,
      347, 1713, 1713, 1713, 1713, 1713,  347,  347, 1713, 1713,
      347,  347,  347,  644, 1713, 1713,  644, 1713, 1713, 1713,
     1713, 1713, 1713,  644, 1713, 1713,  644,  644,  644,  380,
     1713,  380,  380, 1713,  380, 1713, 1713, 1713, 1713, 1713,
      380,  380, 1713, 1713,  380,  380,  380,  382, 1713, 1713,
      382, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713,  382,  382, 1713,  382,  382,  382,  382,  404,

      404, 1713,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  406, 1713, 1713,  406,
     1713, 1713, 1713, 1713,  406, 1713,  406,  406,  406,  406,
      406, 1713, 1713, 1713, 1713,  406,  406,  406, 1713,  406,
      406,  406, 1713, 1713, 1713, 1713,  406,  704, 1713, 1713,
      704, 1713, 1713, 1713, 1713,  704, 1713,  704, 1713,  704,
      704,  704, 1713, 1713, 1713, 1713,  704,  704,  704, 1713,
      704,  704,  704, 1713, 1713, 1713, 1713,  704,  414, 1713,

     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,  414, 1713,
      414,  414, 1713, 1713, 1713, 1713, 1713,  414, 1713, 1713,
      414,  414,  414, 1713, 1713, 1713, 1713,  414,  708, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713,  708, 1713, 1713,
      708,  708,  708, 1713, 1713, 1713, 1713,  708,  428,  428,
      428,  428, 1713, 1713,  428, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713,  428, 1713, 1713,  428, 1713, 1713,
     1713, 1713, 1713,  428, 1713, 1713,  428,  428,  428, 1713,
     1713, 1713,  428,  428,  424,  424,  424,  424, 1713, 1713,

      424, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
      424, 1713,  424,  424, 1713,  424, 1713, 1713, 1713,  424,
     1713, 1713,  424,  424,  424, 1713, 1713, 1713, 1713,  424,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710, 1713,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  433,  433,  433,
      433, 1713, 1713,  433, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713,  433, 1713, 1713,  433,  433,  433, 1713, 1713,

     1713, 1713,  433,  713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713,  713, 1713, 1713,  713, 1713,
     1713, 1713,  713, 1713, 1713,  713,  713,  713, 1713, 1713,
     1713, 1713,  713,  434,  434, 1713,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      436, 1713, 1713,  436, 1713, 1713, 1713, 1713,  436, 1713,
      436,  436,  436,  436,  436, 1713, 1713, 1713, 1713,  436,
      436,  436, 1713,  436,  436,  436, 1713, 1713, 1713, 1713,

      436,  714, 1713, 1713,  714, 1713, 1713, 1713, 1713,  714,
     1713,  714, 1713,  714,  714,  714, 1713, 1713, 1713, 1713,
      714,  714,  714, 1713,  714,  714,  714, 1713, 1713, 1713,
     1713,  714,  442,  442, 1713,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  444,
      444, 1713,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  448,  448, 1713, 1713,
      448, 1713, 1713, 1713, 1713,  448, 1713,  448,  448,  448,
      448,  448, 1713, 1713,  448, 1713,  448,  448,  448, 1713,
      448,  448,  448, 1713, 1713, 1713, 1713,  448,  719, 1713,
     1713,  719, 1713, 1713, 1713, 1713,  719, 1713,  719, 1713,
      719,  719,  719, 1713, 1713, 1713, 1713,  719,  719,  719,
     1713,  719,  719,  719, 1713, 1713, 1713, 1713,  719,  464,
      464,  464,  464, 1713, 1713,  464, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713,  464, 1713, 1713,  464, 1713,
     1713, 1713, 1713, 1713,  464, 1713, 1713,  464,  464,  464,

     1713, 1713, 1713,  464,  464,  461,  461,  461,  461, 1713,
     1713,  461, 1713, 1713, 1713,  461, 1713, 1713, 1713, 1713,
     1713,  461, 1713,  461,  461, 1713, 1713, 1713, 1713, 1713,
      461, 1713, 1713,  461,  461,  461, 1713, 1713, 1713, 1713,
      461,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722, 1713,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  466,  466,
      466,  466, 1713, 1713,  466, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,

     1713, 1713, 1713,  466, 1713, 1713,  466,  466,  466, 1713,
     1713, 1713, 1713,  466,  724, 1713, 1713,  724, 1713, 1713,
      724, 1713, 1713, 1713,  724, 1713, 1713, 1713, 1713, 1713,
     1713, 1713,  724, 1713, 1713, 1713, 1713, 1713, 1713,  724,
     1713, 1713,  724,  724,  724, 1713, 1713, 1713, 1713,  724,
      474,  474,  474,  474, 1713, 1713,  474, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713,  474, 1713, 1713,  474,
     1713, 1713, 1713, 1713, 1713,  474, 1713, 1713,  474,  474,
      474, 1713, 1713, 1713,  474,  474,  471,  471,  471,  471,
     1713, 1713,  471, 1713, 1713, 1713, 1713, 1713, 1713, 1713,

     1713, 1713,  471, 1713,  471,  471, 1713, 1713, 1713, 1713,
     1713,  471, 1713, 1713,  471,  471,  471, 1713, 1713, 1713,
     1713,  471,  479,  479,  479,  479, 1713, 1713,  479, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713,  479, 1713, 1713,
      479,  479,  479, 1713, 1713, 1713, 1713,  479,  726, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
      726, 1713, 1713, 1713, 1713, 1713, 1713,  726, 1713, 1713,
      726,  726,  726, 1713, 1713, 1713, 1713,  726,  480, 1713,
     1713,  480, 1713, 1713, 1713, 1713, 1713, 1713,  480, 1713,

     1713,  480,  480,  480, 1713, 1713, 1713, 1713,  480,  484,
      484, 1713,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  489,  489, 1713,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  494,  494, 1713,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,

      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      496, 1713, 1713,  496, 1713, 1713, 1713, 1713,  496, 1713,
      496,  496,  496,  496,  496, 1713, 1713, 1713, 1713,  496,
      496,  496, 1713,  496,  496,  496, 1713, 1713, 1713, 1713,
      496,  730, 1713, 1713,  730, 1713, 1713, 1713, 1713,  730,
     1713,  730, 1713,  730,  730,  730, 1713, 1713, 1713, 1713,
      730,  730,  730, 1713,  730,  730,  730, 1713, 1713, 1713,
     1713,  730,  503, 1713, 1713,  503, 1713, 1713,  503, 1713,
     1713, 1713, 1713, 1713, 1713, 1713,  503, 1713, 1713, 1713,

      503, 1713, 1713, 1713, 1713, 1713, 1713,  503, 1713, 1713,
      503,  503,  503, 1713, 1713, 1713, 1713,  503,  734,  734,
      734,  734, 1713, 1713,  734, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713,  734,  734, 1713, 1713,
     1713, 1713, 1713,  734, 1713, 1713,  734,  734,  734, 1713,
     1713, 1713, 1713,  734,  507,  507,  507,  507, 1713, 1713,
      507, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713,  507,  507, 1713, 1713, 1713, 1713, 1713,  507,
     1713, 1713,  507,  507,  507, 1713, 1713, 1713, 1713,  507,
      520,  520,  520,  520, 1713, 1713,  520, 1713, 1713, 1713,

     1713, 1713, 1713, 1713, 1713, 1713,  520, 1713, 1713,  520,
     1713, 1713, 1713, 1713, 1713,  520, 1713, 1713,  520,  520,
      520, 1713, 1713, 1713,  520,  520,  517,  517,  517,  517,
     1713, 1713,  517, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713,  517, 1713,  517,  517, 1713, 1713, 1713, 1713,
     1713,  517, 1713, 1713,  517,  517,  517, 1713, 1713, 1713,
     1713,  517,  525,  525,  525,  525, 1713, 1713,  525, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713,  525, 1713, 1713,
      525,  525,  525, 1713, 1713, 1713, 1713,  525,  739, 1713,

     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
      739, 1713, 1713, 1713, 1713, 1713, 1713,  739, 1713, 1713,
      739,  739,  739, 1713, 1713, 1713, 1713,  739,  526, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,  526, 1713,
      526, 1713, 1713, 1713, 1713, 1713, 1713,  526, 1713, 1713,
      526,  526,  526, 1713, 1713, 1713, 1713,  526,  740, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713,  740, 1713, 1713,
      740,  740,  740, 1713, 1713, 1713, 1713,  740,  531,  531,
     1713,  531, 1713, 1713, 1713, 1713, 1713, 1713,  531, 1713,

     1713,  531,  531,  531, 1713, 1713, 1713, 1713,  531,  536,
      536, 1713,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536, 1713,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  540, 1713, 1713,  540,
     1713, 1713, 1713, 1713, 1713, 1713,  540, 1713, 1713,  540,
      540,  540, 1713, 1713, 1713, 1713,  540,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542, 1713,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  544,  544, 1713,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544, 1713,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  746, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
      746, 1713, 1713,  746,  746,  746, 1713, 1713, 1713, 1713,
      746,  551, 1713, 1713,  551, 1713, 1713, 1713, 1713, 1713,
     1713,  551, 1713, 1713,  551,  551,  551, 1713, 1713, 1713,
     1713,  551,  555,  555, 1713,  555,  555,  555,  555,  555,

      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  558,
      558, 1713,  558, 1713,  558,  558,  558,  558,  558,  558,
      558,  558, 1713,  558,  558,  558,  558, 1713,  558,  558,
      558,  558,  558,  558, 1713,  558, 1713,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  568, 1713, 1713,  568,
     1713, 1713, 1713, 1713, 1713, 1713,  568, 1713, 1713, 1713,
     1713,  568,  568, 1713,  568, 1713, 1713, 1713, 1713, 1713,
     1713,  568, 1713, 1713,  568,  568,  568,  576,  576, 1713,

      576, 1713,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576, 1713,  576, 1713,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  580,  580, 1713,  580, 1713,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580, 1713,
      580, 1713,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  589, 1713, 1713,  589, 1713, 1713, 1713, 1713, 1713,
     1713,  589, 1713, 1713,  589,  589,  589, 1713, 1713, 1713,
     1713,  589,  593,  593, 1713,  593,  593,  593,  593,  593,

      593,  593,  593, 1713, 1713,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593, 1713,  593, 1713,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  600,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,  600,
     1713,  600,  600, 1713, 1713, 1713, 1713, 1713,  600, 1713,
     1713,  600,  600,  600, 1713, 1713, 1713, 1713,  600,  769,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,  769, 1713,
     1713,  769,  769,  769, 1713, 1713, 1713, 1713,  769,  604,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,  604,

     1713,  604,  604, 1713, 1713, 1713, 1713, 1713,  604, 1713,
     1713,  604,  604,  604, 1713, 1713, 1713, 1713,  604,  771,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,  771, 1713,
     1713,  771,  771,  771, 1713, 1713, 1713, 1713,  771,  608,
      608, 1713,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608, 1713,  608, 1713,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  612, 1713, 1713,  612,
     1713, 1713, 1713, 1713, 1713, 1713,  612, 1713, 1713,  612,

      612,  612, 1713, 1713, 1713, 1713,  612,  614,  614, 1713,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614, 1713,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614, 1713,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  617,  617, 1713,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  619,  619, 1713,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  624,  624,
     1713,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624, 1713,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624, 1713,  624, 1713,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  787, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713,  787, 1713,  787,  787,  787,  787,
      787, 1713, 1713, 1713,  787, 1713,  787, 1713, 1713,  787,
      787,  787, 1713, 1713, 1713, 1713,  787,  628, 1713,  628,
      628,  628,  628,  628, 1713, 1713, 1713,  628, 1713,  628,

     1713, 1713,  628,  628,  628, 1713, 1713, 1713, 1713,  628,
      789, 1713, 1713,  789, 1713, 1713, 1713, 1713,  789, 1713,
      789, 1713, 1713,  789,  789,  789, 1713, 1713, 1713, 1713,
      789,  631,  631, 1713,  631,  631,  631,  631,  631,  631,
      631,  631, 1713, 1713,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631, 1713,  631, 1713,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635, 1713,
     1713,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,

      635,  635,  635,  635,  635,  636,  636, 1713,  636,  636,
      636,  636,  636,  636, 1713,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636, 1713, 1713,  636,
      636,  636, 1713, 1713,  636,  636,  636,  636,  636,  636,
      636,  636,  372, 1713, 1713,  372, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713,  372, 1713, 1713,
      372,  372,  372,  372,  642, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713,  642,  642, 1713, 1713,
     1713, 1713, 1713,  642, 1713, 1713,  642,  642,  642, 1713,

     1713, 1713, 1713,  642,  797,  797, 1713,  797,  797,  797,
      797, 1713,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  644,  644, 1713,  644, 1713, 1713, 1713, 1713, 1713,
     1713,  644, 1713, 1713,  644,  644,  644,  347, 1713,  347,
      347, 1713,  347, 1713, 1713, 1713, 1713, 1713,  347,  347,
     1713, 1713,  347,  347,  347,  811,  811, 1713,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,

      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  676, 1713, 1713,  676, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713,  676, 1713, 1713,
      676,  676,  676,  822, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713,  822, 1713,  822, 1713,  822,  822,
     1713, 1713, 1713, 1713, 1713,  822, 1713, 1713,  822,  822,
      822, 1713, 1713,  822,  828,  828, 1713,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,

      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  382, 1713, 1713,  382, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713,  382,  382, 1713,  382,
      382,  382,  382,  704, 1713, 1713,  704, 1713, 1713, 1713,
     1713,  704, 1713,  704,  704,  704,  704,  704, 1713, 1713,
     1713, 1713,  704,  704,  704, 1713,  704,  704,  704, 1713,
     1713, 1713, 1713,  704,  406, 1713, 1713,  406, 1713, 1713,
     1713, 1713,  406, 1713,  406,  406,  406,  406,  406, 1713,
     1713, 1713, 1713,  406,  406,  406, 1713,  406,  406,  406,

     1713, 1713, 1713, 1713,  406,  414, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713,  414, 1713,  414,  414, 1713,
     1713, 1713, 1713, 1713,  414, 1713, 1713,  414,  414,  414,
     1713, 1713, 1713, 1713,  414,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713,  713, 1713, 1713,  713, 1713, 1713,
     1713,  713, 1713, 1713,  713,  713,  713, 1713, 1713, 1713,

     1713,  713,  714, 1713, 1713,  714, 1713, 1713, 1713, 1713,
      714, 1713,  714,  714,  714,  714,  714, 1713, 1713, 1713,
     1713,  714,  714,  714, 1713,  714,  714,  714, 1713, 1713,
     1713, 1713,  714,  436, 1713, 1713,  436, 1713, 1713, 1713,
     1713,  436, 1713,  436,  436,  436,  436,  436, 1713, 1713,
     1713, 1713,  436,  436,  436, 1713,  436,  436,  436, 1713,
     1713, 1713, 1713,  436,  847,  847, 1713,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,

      847,  719,  719, 1713, 1713,  719, 1713, 1713, 1713, 1713,
      719, 1713,  719,  719,  719,  719,  719, 1713, 1713,  719,
     1713,  719,  719,  719, 1713,  719,  719,  719, 1713, 1713,
     1713, 1713,  719,  448,  448, 1713, 1713,  448, 1713, 1713,
     1713, 1713,  448, 1713,  448,  448,  448,  448,  448, 1713,
     1713,  448, 1713,  448,  448,  448, 1713,  448,  448,  448,
     1713, 1713, 1713, 1713,  448,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,

      722,  722,  724, 1713, 1713,  724, 1713, 1713,  724, 1713,
     1713, 1713,  724, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
      724, 1713, 1713, 1713, 1713, 1713, 1713,  724, 1713, 1713,
      724,  724,  724, 1713, 1713, 1713, 1713,  724,  726, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
      726, 1713, 1713, 1713, 1713, 1713, 1713,  726, 1713, 1713,
      726,  726,  726, 1713, 1713, 1713, 1713,  726,  730, 1713,
     1713,  730, 1713, 1713, 1713, 1713,  730, 1713,  730,  730,
      730,  730,  730, 1713, 1713, 1713, 1713,  730,  730,  730,
     1713,  730,  730,  730, 1713, 1713, 1713, 1713,  730,  496,

     1713, 1713,  496, 1713, 1713, 1713, 1713,  496, 1713,  496,
      496,  496,  496,  496, 1713, 1713, 1713, 1713,  496,  496,
      496, 1713,  496,  496,  496, 1713, 1713, 1713, 1713,  496,
      734,  734,  734,  734, 1713, 1713,  734, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,  734,  734,
     1713, 1713, 1713, 1713, 1713,  734, 1713, 1713,  734,  734,
      734, 1713, 1713, 1713, 1713,  734,  858,  858,  858,  858,
     1713, 1713,  858, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713,  858, 1713, 1713, 1713, 1713,
     1713,  858, 1713, 1713,  858,  858,  858, 1713, 1713, 1713,

     1713,  858,  739, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713,  739, 1713, 1713, 1713, 1713, 1713,
     1713,  739, 1713, 1713,  739,  739,  739, 1713, 1713, 1713,
     1713,  739,  861, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713,  861, 1713,  861, 1713, 1713, 1713, 1713, 1713,
     1713,  861, 1713, 1713,  861,  861,  861, 1713, 1713, 1713,
     1713,  861,  867, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713,  867, 1713, 1713, 1713, 1713, 1713,
     1713,  867, 1713, 1713,  867,  867,  867, 1713, 1713, 1713,
     1713,  867,  878,  878,  878,  878,  878,  878,  878,  878,

      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      878, 1713,  878,  878,  878,  878,  878,  878, 1713,  878,
      878, 1713, 1713,  878,  878,  878,  878,  878,  878,  600,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,  600,
     1713,  600,  600, 1713, 1713, 1713, 1713, 1713,  600, 1713,
     1713,  600,  600,  600, 1713, 1713, 1713, 1713,  600,  604,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,  604,
     1713,  604,  604, 1713, 1713, 1713, 1713, 1713,  604, 1713,
     1713,  604,  604,  604, 1713, 1713, 1713, 1713,  604,  899,
     1713, 1713, 1713, 1713,  899, 1713, 1713, 1713, 1713, 1713,

     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
      899, 1713, 1713,  899,  899,  899, 1713, 1713, 1713, 1713,
      899,  787, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
      787, 1713,  787,  787,  787,  787,  787, 1713, 1713, 1713,
      787, 1713,  787, 1713, 1713,  787,  787,  787, 1713, 1713,
     1713, 1713,  787,  902, 1713, 1713,  902, 1713, 1713, 1713,
     1713,  902, 1713,  902, 1713, 1713,  902,  902,  902, 1713,
     1713, 1713, 1713,  902,  903, 1713,  903,  903,  903,  903,
      903, 1713, 1713, 1713,  903, 1713,  903, 1713, 1713,  903,
      903,  903, 1713, 1713, 1713, 1713,  903,  372, 1713, 1713,

      372, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713,  372, 1713, 1713,  372,  372,  372,  372,  797,
      797, 1713,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  910, 1713, 1713,  910,
     1713, 1713, 1713, 1713, 1713, 1713,  910, 1713, 1713,  910,
      910,  910,  354, 1713,  354, 1713,  354,  354, 1713,  354,
     1713, 1713, 1713, 1713, 1713,  354,  354, 1713, 1713,  354,

      354,  354,  811,  811, 1713,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  822,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
      822, 1713,  822, 1713,  822,  822, 1713, 1713, 1713, 1713,
     1713,  822, 1713, 1713,  822,  822,  822, 1713, 1713,  822,
      827,  827, 1713,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,

      827,  827,  827,  827,  827,  827,  827,  828,  828, 1713,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  382, 1713, 1713,  382, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,  382,
      382, 1713,  382,  382,  382,  382,  347,  347, 1713,  347,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,  347,
     1713,  347,  347, 1713,  347,  347, 1713, 1713, 1713, 1713,

      347,  347, 1713, 1713,  347,  347,  347, 1713,  347,  406,
     1713, 1713,  406, 1713, 1713, 1713, 1713,  406, 1713,  406,
      406,  406,  406,  406, 1713, 1713, 1713, 1713,  406,  406,
      406, 1713,  406,  406,  406, 1713, 1713, 1713, 1713,  406,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  436, 1713, 1713,
      436, 1713, 1713, 1713, 1713,  436, 1713,  436,  436,  436,
      436,  436, 1713, 1713, 1713, 1713,  436,  436,  436, 1713,

      436,  436,  436, 1713, 1713, 1713, 1713,  436,  847,  847,
     1713,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  448,  448, 1713, 1713,  448,
     1713, 1713, 1713, 1713,  448, 1713,  448,  448,  448,  448,
      448, 1713, 1713,  448, 1713,  448,  448,  448, 1713,  448,
      448,  448, 1713, 1713, 1713, 1713,  448,  496, 1713, 1713,
      496, 1713, 1713, 1713, 1713,  496, 1713,  496,  496,  496,
      496,  496, 1713, 1713, 1713, 1713,  496,  496,  496, 1713,

      496,  496,  496, 1713, 1713, 1713, 1713,  496,  858,  858,
      858,  858, 1713, 1713,  858, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713,  858, 1713, 1713,
     1713, 1713, 1713,  858, 1713, 1713,  858,  858,  858, 1713,
     1713, 1713, 1713,  858,  952,  952,  952,  952, 1713, 1713,
      952, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713,  952,  952, 1713, 1713, 1713, 1713, 1713,  952,
     1713, 1713,  952,  952,  952, 1713, 1713, 1713, 1713,  952,
      861, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
      861, 1713,  861, 1713, 1713, 1713, 1713, 1713, 1713,  861,

     1713, 1713,  861,  861,  861, 1713, 1713, 1713, 1713,  861,
      867, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713,  867, 1713, 1713, 1713, 1713, 1713, 1713,  867,
     1713, 1713,  867,  867,  867, 1713, 1713, 1713, 1713,  867,
      997, 1713, 1713,  997, 1713, 1713, 1713, 1713, 1713, 1713,
      997, 1713, 1713,  997,  997,  997, 1713, 1713, 1713, 1713,
      997, 1000, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1000, 1713, 1000, 1000, 1000, 1000, 1000, 1713, 1713, 1713,
     1000, 1713, 1000, 1713, 1713, 1000, 1000, 1000, 1713, 1713,
     1713, 1713, 1000,  903, 1713,  903,  903,  903,  903,  903,

     1713, 1713, 1713,  903, 1713,  903, 1713, 1713,  903,  903,
      903, 1713, 1713, 1713, 1713,  903, 1006, 1006, 1713, 1006,
     1713, 1713, 1713, 1713, 1713, 1713, 1006, 1713, 1713, 1006,
     1006, 1006,  354, 1713,  354, 1713,  354,  354, 1713,  354,
     1713, 1713, 1713, 1713, 1713,  354,  354, 1713, 1713,  354,
      354,  354, 1017, 1017, 1713, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1713, 1068,
     1068, 1068, 1068, 1068, 1068, 1713, 1068, 1068, 1713, 1068,
     1713, 1068, 1068, 1068, 1068, 1068, 1090, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1090, 1713, 1713,
     1090, 1713, 1713, 1713, 1713, 1713, 1713, 1090, 1713, 1713,
     1090, 1090, 1090, 1713, 1713, 1713, 1713, 1090, 1091, 1713,
     1713, 1713, 1713, 1713, 1091, 1713, 1713, 1091, 1713, 1713,
     1713, 1713, 1713, 1713, 1091, 1713, 1713, 1091, 1091, 1091,
     1713, 1713, 1713, 1713, 1091, 1104, 1104, 1713, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,

     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1713, 1155, 1155, 1155, 1155, 1155, 1155, 1713, 1155,
     1155, 1713, 1713, 1713, 1155, 1155, 1155, 1155, 1155, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1713, 1156,
     1156, 1156, 1156, 1156, 1156, 1713, 1156, 1156, 1713, 1713,
     1713, 1156, 1156, 1156, 1156, 1156, 1218, 1218, 1218, 1218,

     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1713, 1218, 1218, 1218, 1218,
     1218, 1218, 1713, 1218, 1218, 1713, 1713, 1713, 1218, 1218,
     1218, 1218, 1218, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1713, 1230, 1230, 1230, 1230, 1230, 1230, 1713,
     1230, 1230, 1713, 1713, 1713, 1230, 1230, 1230, 1230, 1230,
     1329, 1329, 1713, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,

     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1331, 1331, 1713,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331,   95, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,

     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713
    } ;

static yyconst flex_int16_t yy_chk[13130] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    4,    7,    8,    4,   23,   24,
       25,   26,   23,   24,   25,   26,   39,    4,    4,   40,

        4,    4,   43,   44,    4,    4,    4,   51,   52,   61,
       62,   67,    7,    8,   43,   44,   91, 1311, 1312,   47,
       47,   92,   47,   57,   47,   57,   91,   91,   68,   43,
       44,   92,   92,  243,  103,    7,    8,  243,   23,   24,
       25,   26,   48,   48,  103,   48,   39,   48,  112,   40,
       57,  112,   43,   44, 1313,  310,  103,   51,   52,   61,
       62,   67,    4,    5,    5,    5,    5,    5,    5,    5,
       47,    5,    5,   57,    5,    5,    5,    5,   68,    5,
      310,    5,    5,   49,   73,   49,    5,    5,    5,    5,
        5,    5,  126,   48,  126,   49,  140,  140,  140,  140,

       49,   55,   55,  113,   55,   50,  113,   50,  130,  248,
       49,   73,  248,  130,    5,    5,    5,   50,  131,  131,
      248,  131,   50,   56,   56,  260,   56,   99,   99,  260,
       99,  113,   50,   49,   73,   58,  349,   58,   59,  349,
       59,    5,    5,    5,    5,    6,    6,    6,    6,    6,
        6,    6,   55,    6,    6,   50,    6,    6,    6,    6,
       74,    6,   58,    6,    6,   59,   65,   75,    6,    6,
        6,    6,    6,    6,   56,  356,   65,   65,   99,  104,
      131,  104,  104,  104,  104,   58,  285,   74,   59,  104,
      104,  285, 1314,   65,   75,  104,    6,    6,    6,  577,

      116,  577,  116,  116,  116,  162,  162,  162,  162,  356,
       74,  116,  171,  171,  171,  171,   65,   75,  104,  207,
      207,  207,  207,    6,    6,    6,    6,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   13,   13,   13,   13,   13,

       13,   13,   76,   13,   13,   66,   13,   13,   13,   13,
       60,   13,   60,   13,   13,   66,   66,   77,   13,   13,
       13,   13,   13,   13,  261,  127,  289,  127,  261,   76,
      192,  289,   66,  192,   78,  121,  121,   60,  122,  122,
      121,  311,   81,  122,   77,  192,   13,   13,   13,   82,
      139,  139,   76,  139, 1315,   66,  350,   81,  223,   98,
       60,   78,   98,  127,   82, 1316,  311,   77,  350,  121,
      223,  611,  122,   13,   13,   13,   13,   14,   14,   14,
       14,   14,   14,   14,   78,   14,   14,   98,   14,   14,
       14,   14,   81,   14,   85,   14,   14,   86,  611,   82,

       14,   14,   14,   14,   14,   14,   85,  362,  223,   86,
       98, 1108,  139,  317,  170,  170,   89,  170,  371,  117,
      233,   85,  117,  233,   86,  233,   89,   89,   14,   14,
       14,  317,  362,  355, 1317,  117,  355,  251, 1108,  371,
      251,  117,   90,   89,   85,  144,  144,   86,  251,  363,
      144,  390,   90,   90,  390,   14,   14,   14,   14,   15,
       15,   15,   15,   15,   15,   15,   89,   15,   15,   90,
       15,   15,   15,   15,  363,   15,  170,   15,   15,  144,
       93,  365,   15,   15,   15,   15,   15,   15,   93,  145,
      145, 1318,   90,  107,  145,  107,  107,  117,  107,  107,

      107,  175,  175,   93,  175,   93,  365,  107,  443,  366,
       15,   15,   15,  358,  358,  358,  358,  392,  392,  109,
      392,  109,  109,  145,  109,  109,  109, 1319,  579,  443,
       93,   93,  107,  109,  366,  579,  367,   15,   15,   15,
       15,   16,   16,   16,   16,   16,   16,   16,   94,   16,
       16, 1320,   16,   16,   16,   16,   94,   16,  109,   16,
       16,  367, 1321,  175,   16,   16,   16,   16,   16,   16,
     1322,   94,  368,   94,  133,  133,  133,  133,  134,  134,
      134,  134,  585,  414,  138,  138,  138,  138,  414,  585,
      584,  133,   16,   16,   16,  134,  133,  368,   94,   94,

      134,  138,  395,  265,  584,  395,  138,  265,  138,  398,
      398, 1323,  398,  265,  393,  265,  393,  393,  393,   16,
       16,   16,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   27,   27,   27,   27,   27,
       27,   27,  502,   27,   27,  502,   27,   27,   27,   27,
     1325,   27,  400,   27,   27,  400,  151,  502,   27,   27,

       27,   27,   27,   27,  466,  187,  187,  466,  151,  151,
      187,  409,  409,  151,  409,  466,  111,  151,  114,  111,
      400,  114,  645,  361,  114,  645,   27,   27,   27,  111,
      111,  266,  111,  111,  114,  266,  111,  111,  111,  187,
      114,  266,  151,  266,  111,  676,  114,  361,  676,  179,
      179, 1329,  179,   27,   27,   27,   27,   28,   28,   28,
       28,   28,   28,   28, 1054,   28,   28,  111,   28,   28,
       28,   28,  361,   28,  152,   28,   28, 1331,  627, 1054,
       28,   28,   28,   28,   28,   28,  152,  152,  188,  188,
      627,  152,  985,  188,  111,  152,  114,  156,  156,  156,

      156,  157,  157,  157,  157,  615,  985,  600,   28,   28,
       28,  179,  600,  401,  156,  401,  401,  401,  157,  156,
      152,  787,  188,  157,  401,  417,  417,  615,  417,  425,
      425,  425,  425,  787, 1341,   28,   28,   28,   28,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   83,   84,  407,
      622,   83,   84,  407, 1342,  566,   83,   84,  566,  164,
      164,  164,  164, 1343,   83,   84,  566,  981,  136,  136,
      136,  136,   83,   84,  981,  622,  164,  159,  159,  159,
      159,  164,  407,   83,   84,  136,  604,   83,   84,  153,
      136,  604,  568,  382,  159,  568,  382,   83,   84,  159,

     1346,  153,  153,  568,  429,  429,  153,  429,   83,   84,
      153, 1347,   83,   84,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,  553,   87,   87,  553,  153,  553,   87,   87,   87,
       87,   87,  679,   87,  382,  679,  391,  697,  136,  391,
      697,  708,  135,  135,  135,  135,  708,  159,  165,  165,
      165,  165,  391, 1183, 1348,   87,   87,   87,  391,  135,
      382,  135,  135,  135,  135,  165,  135,  769,  439,  439,
      165,  439,  769,  383,  183,  183,  383,  183,  254,  254,
     1183,  254,   87,   87,   87,   87,   88,   88,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,  771,   88,   88,  656, 1349,  771,   88,
       88,   88,   88,   88,  391,   88, 1351, 1352,  115,  115,
      657,  115,  135,  717,  383,  123,  123, 1353,  123,  254,
      115,  656,  115,  115,  115,  115,  183,   88,   88,   88,
      115,  115,  123,  123,  717,  657,  115,  123,  437,  383,
      383,  902,  437,  147,  147, 1354,  147,  198,  198,  503,
      198, 1355,  503,  902,   88,   88,   88,   88,  105,  115,
      147,  147,  658,  659,  503,  147,  123,  161,  161,  161,
      161,  437,  105,  206,  206, 1356,  206,  123,  161,  426,

      426,  426,  426,  105,  161,  105,  105,  658,  659,  161,
      105,  105,  211,  211,  147,  211,  105,  105,  105,  105,
      105,  105,  968,  215,  215,  147,  215,  542,  105,  198,
      105,  105,  406,  406,  661,  105,  105,  406,  968,  542,
     1000,  105,  105,  105,  105,  105,  105,  106,  106,  106,
      106, 1357, 1000,  155,  155,  206,  155,  106,  155,  661,
     1358,  158,  158,  158,  158,  106,  406,  106, 1359,  106,
      155,  155,  158,  640,  211,  155,  640,  542,  158,  155,
      158,  158,  158,  158, 1360,  215,  166,  166,  166,  166,
      218,  218,  106,  218,  341,  341,  106,  341,  703,  106,

      106,  703, 1361,  166,  155,  166,  166,  166,  166,  452,
      452,  106,  452,  342,  342,  155,  342, 1362,  106, 1363,
      106,  106,  108,  108,  108,  108,  169,  169,  169,  169,
      246,  246,  108,  246,  167,  167,  167,  167, 1364,  640,
      108,  158,  108,  169,  108,  341,  475,  475,  169,  475,
      640,  167,  218,  781,  408,  408,  167, 1365,  781,  408,
      197,  197,  197,  197,  342,  662,  166,  108, 1366,  252,
      252,  108,  252,  666,  108,  108,  666, 1367,  108,  197,
      197,  197,  197,  375,  411,  411,  108,  375,  408,  411,
      662, 1368,  246,  108,  663,  108,  108,  150,  150,  666,

      150,  150,  150,  150,  779,  150,  150,  779,  150,  150,
      150,  150, 1369,  150,  167,  150,  150, 1370,  411,  663,
      150,  150,  150,  150,  150,  150,  375, 1371, 1372,  189,
      189,  252,  189,  411,  664,  200,  200,  200,  200,  201,
      201,  201,  201,  375, 1373, 1374,  189,  189,  150,  150,
      150,  189,  200,  375, 1376,  723,  201,  200,  723,  664,
     1377,  201,  202,  202,  202,  202,  723, 1378,  203,  203,
      203,  203, 1379,  665, 1380,  150,  150,  150,  150,  202,
      189,  202,  202,  202,  202,  203,  205,  205,  205,  205,
      203,  189,  226,  226,  226,  226,  269,  269,  665,  269,

     1381,  273,  273,  205,  273,  667,  338,  360,  205,  338,
      226,  360,  226,  360,  226,  279,  279, 1382,  279,  282,
      282, 1383,  282,  328,  328,  364,  328,  359,  364,  449,
      667,  359,  360,  449,  338,  670,  360,  226,  360,  671,
      359, 1384,  202,  432,  432,  432,  432,  384,  203, 1385,
      384,  364,  359,  672,  364,  673,  359,  338,  269, 1386,
      670, 1387,  449,  273,  671,  359,  226,  227,  227,  364,
      227,  357, 1388,  227,  227,  227,  227,  279,  672,  364,
      673,  282,  357,  357,  357,  328,  386,  481,  481,  386,
      481,  227, 1389,  227,  364,  227,  357,  380,  384,  380,

      380,  674,  380,  380,  380,  436,  436,  357,  357,  357,
      436,  380,  724,  384,  381,  724,  381,  381,  227,  381,
      381,  381,  387,  724,  384,  387,  674,  385,  381,  227,
      385, 1390,  486,  486,  385,  486,  380,  386,  385,  436,
      394,  668,  396,  394,  668,  396, 1391,  227,  339,  339,
      339,  339,  386,  381,  438,  438,  394,  497,  396,  438,
     1393,  497,  394,  386,  396, 1402,  339,  668,  339,  402,
      339,  681,  402,  387,  681, 1403,  403,  385,  385,  403,
      397,  397, 1404,  397,  782,  402, 1407, 1408,  438,  387,
      497,  402,  403,  339,  385, 1409,  397,  339,  403,  387,

      339,  339,  397,  794,  385, 1410,  441,  441,  397,  782,
      800,  441,  339,  800,  389, 1412, 1413,  389,  394,  339,
      396,  339,  339,  340,  340,  340,  340,  389,  389,  760,
      389,  389,  760, 1414,  389,  389,  389, 1415, 1416,  681,
      441,  340,  389,  340,  803,  340,  794,  402,  681,  420,
      420,  420,  420,  804,  403,  441,  491,  491,  397,  491,
      423,  423,  423,  423, 1417,  389,  420,  812,  340,  803,
      812,  420,  340,  794, 1418,  340,  340,  423,  804,  340,
      499,  499,  423,  499,  423, 1419, 1420,  340,  462,  462,
      462,  462,  389,  812,  340,  760,  340,  340,  353,  510,

      510,  353,  510,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  372,  521,  521,  372,  521,  805,  372,  372,
      372,  372,  421,  421,  421,  421,  424,  424,  424,  424,

      427,  427,  427,  427,  528,  528,  372,  528,  372,  421,
      372, 1421,  805,  424,  421, 1422,  819,  427,  424,  819,
      424, 1423,  427,  428,  428,  428,  428,  533,  533,  448,
      533,  450, 1424,  372,  455,  455,  455,  455, 1425, 1426,
      428,  448,  448,  450,  450,  428,  448,  428,  450, 1427,
      448,  455,  450, 1428,  806, 1429,  455,  454,  807,  372,
     1430,  372,  372,  465,  465,  465,  465, 1431,  691,  454,
      454,  691,  421,  808,  454,  448,  809,  450,  454,  806,
      427,  444,  444,  807,  444,  444,  444,  444,  823,  444,
      444,  823,  444,  444,  444,  444, 1432,  444,  808,  444,

      444,  809, 1435,  454,  444,  444,  444,  444,  444,  444,
     1266, 1266, 1266,  456,  456,  456,  456, 1436,  454,  691,
      458,  458,  458,  458,  467,  467,  467,  467, 1437, 1438,
      456,  458,  444,  444,  444,  456,  691,  458, 1439,  496,
      496,  467,  458, 1440,  496,  691,  467, 1441,  463,  463,
      463,  463,  472,  472,  472,  472, 1442, 1443,  810,  444,
      444,  444,  444,  445,  445,  463,  445,  445,  445,  445,
      463,  445,  445,  496,  445,  445,  445,  445, 1444,  445,
     1445,  445,  445,  810, 1446, 1447,  445,  445,  445,  445,
      445,  445, 1448,  456, 1449,  459,  459,  459,  459, 1451,

     1460,  813,  461,  461,  461,  461,  459,  478,  478,  478,
      478, 1461,  459,  461,  445,  445,  445,  459, 1462,  461,
      498,  498, 1465, 1466,  461,  498,  813,  815,  463,  464,
      464,  464,  464,  468,  468,  468,  468, 1467, 1468, 1470,
      464,  445,  445,  445,  445,  698,  464,  698,  698,  698,
      468,  464,  815, 1471,  498,  468,  470,  470,  470,  470,
      471,  471,  471,  471,  473,  473,  473,  473,  474,  474,
      474,  474, 1472,  470,  501,  501, 1473,  471,  470,  501,
      895,  473,  471,  895,  927,  474,  473,  927,  537,  537,
      474,  537,  506,  506,  506,  506,  507,  507,  507,  507,

      508,  508,  508,  508,  518,  518,  518,  518,  501,  513,
      513,  513,  513,  468,  506,  507,  507,  507,  507,  508,
      508,  508,  508,  501, 1474, 1475,  513,  524,  524,  524,
      524,  513,  514,  514,  514,  514,  516,  516,  516,  516,
      517,  517,  517,  517,  473,  548,  548,  795,  548,  514,
      795, 1476,  682,  516,  514,  682,  686,  517,  516,  686,
     1477,  816,  517,  519,  519,  519,  519,  520,  520,  520,
      520,  563,  563, 1478,  563,  569,  569,  799,  569,  799,
      519,  799,  799, 1479,  520,  519,  816,  572,  572,  520,
      572,  586,  586,  799,  586,  590,  590, 1480,  590,  594,

      594,  817,  594,  597,  597, 1481,  597,  632,  632,  682,
      632,  914,  514,  660,  660,  660,  660,  916,  795,  710,
      710,  710,  710,  917,  795,  686,  817, 1482,  971,  682,
      911,  971,  911,  686,  911,  911,  914, 1075,  572, 1483,
     1075, 1484,  916,  519,  650,  710,  911,  650,  917,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,

      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  677,  704,
      704,  677, 1485,  688,  704,  677,  688, 1486,  705,  705,
      918, 1234,  814,  705, 1234,  814, 1489,  692,  696,  696,
      692,  696,  714,  714, 1490, 1491, 1492,  714,  919,  699,
      699, 1493,  699,  704,  696,  918,  701,  701,  814,  701,
      696,  693,  705, 1494,  693,  699,  694,  695,  677,  694,
      695,  699,  701,  919, 1495, 1496,  714,  824,  701, 1375,
      824, 1497, 1375, 1498,  701,  715,  715, 1499,  692, 1500,

      715, 1501,  688, 1502,  692,  677,  687,  687, 1503,  687,
      688,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  693,  687,  692,  687,  696,  694,  695,  715,
      687,  687,  687,  687,  687,  687, 1505,  699,  706,  706,
      693,  824,  825,  706,  701,  825,  695,  694,  693,  702,
      702,  921,  702,  694,  695, 1513, 1514,  687,  687,  687,
     1434,  716,  716, 1434,  824,  702,  716,  711,  711,  711,
      711,  702,  706,  730,  730,  924,  921, 1515,  730,  842,
      842,  842,  842,  925,  687,  687,  687,  687,  687,  687,
     1518,  907,  706,  711,  907,  716,  926,  719, 1519,  720,

      924,  731,  731, 1520,  825,  842,  731,  730,  925,  719,
      719,  720,  720, 1008,  719,  716,  720, 1521,  719,  825,
      720,  926, 1523,  831, 1524, 1010,  831,  702,  718,  718,
     1525,  718,  718,  718,  718,  731,  718,  718, 1008,  718,
      718,  718,  718,  719,  718,  720,  718,  718,  721,  907,
     1010,  718,  718,  718,  718,  718,  718,  732,  732, 1526,
      721,  721,  732,  826, 1487,  721,  826, 1487,  907,  721,
      736,  736,  736,  736,  831, 1507, 1527,  831, 1507,  718,
      718,  718,  734,  734,  734,  734,  829,  833, 1528,  829,
      833,  732,  736, 1529,  721, 1530,  735,  735,  735,  735,

      831,  734,  734,  734,  734, 1011,  718,  718,  718,  718,
      832,  732, 1012,  832,  721,  735,  735,  735,  735,  826,
      834, 1531, 1532,  834,  835, 1533,  930,  835,  928,  930,
     1011,  928, 1534,  844,  844,  844,  844, 1012,  833, 1535,
      826,  828,  828,  833,  828, 1536,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  829,  828,  844,
      828,  832, 1537,  829,  833,  828,  828,  828,  828,  828,
      828,  834,  832,  920,  922,  835,  920,  922,  834, 1538,
      836,  836,  932,  836,  930,  932, 1540,  832,  837,  837,
     1541,  837,  828,  828,  828,  835,  836,  834,  928,  920,

      922,  835,  836,  930,  837,  928, 1542, 1013,  839,  839,
      837,  838,  838,  839,  838,  857,  857,  857,  857,  828,
      828,  828,  828,  828,  828, 1014, 1543,  838, 1014,  846,
      846,  849, 1013,  838,  846,  855,  855,  857, 1018,  838,
      855, 1018,  839,  849,  849,  940,  940, 1544,  849,  839,
      940, 1014,  849,  858,  858,  858,  858,  929,  836,  932,
      929, 1016, 1539,  846, 1018, 1539,  837, 1545,  933,  855,
      846,  933,  858,  858,  858,  858,  855,  849,  934,  940,
      935,  934,  936,  935,  849,  936, 1016,  944,  944,  838,
      847,  847,  944,  847,  847,  847,  847,  940,  847,  847,

     1019,  847,  847,  847,  847, 1546,  847, 1547,  847,  847,
     1548, 1549, 1020,  847,  847,  847,  847,  847,  847,  871,
      871,  944, 1550,  929,  871, 1019, 1551,  871,  871,  934,
      933,  935,  871,  936,  929,  871,  871, 1020,  871,  944,
      936,  847,  847,  847, 1021,  933,  935, 1021,  934, 1100,
      937,  938, 1552,  937,  938,  934, 1553,  935, 1554,  936,
      950,  950, 1101, 1556, 1102,  950, 1562, 1103,  847,  847,
      847,  847,  848,  848, 1100,  848,  848,  848,  848, 1023,
      848,  848, 1023,  848,  848,  848,  848, 1101,  848, 1102,
      848,  848, 1103, 1106,  950,  848,  848,  848,  848,  848,

      848,  937,  938, 1004,  939,  939, 1004,  939, 1022, 1563,
     1107, 1022,  950,  938, 1021, 1564, 1567,  945, 1106,  937,
      939, 1021, 1568,  848,  848,  848,  939,  937,  938,  945,
      945, 1569, 1023, 1025,  945, 1107, 1025, 1181,  945,  952,
      952,  952,  952, 1570, 1182,  953,  953,  953,  953, 1572,
      848,  848,  848,  848, 1026, 1573, 1023, 1026,  952,  952,
      952,  952, 1181,  945,  953,  953,  953,  953, 1027, 1182,
     1028, 1027, 1004, 1028, 1029, 1030, 1574, 1029, 1030, 1022,
     1004,  945,  939, 1036, 1575, 1022, 1031, 1031, 1035, 1035,
     1025, 1031, 1576, 1035, 1097, 1036, 1036, 1097, 1109, 1110,

     1036, 1109, 1110, 1577, 1036, 1026, 1111, 1041, 1041, 1111,
     1025, 1112, 1041, 1113, 1112, 1115, 1113, 1578, 1115, 1027,
     1031, 1028, 1035, 1028, 1026, 1029, 1030, 1105, 1579, 1036,
     1105, 1026, 1030, 1114, 1580, 1031, 1114, 1035, 1581, 1027,
     1029, 1041, 1582, 1116, 1036, 1027, 1116, 1028, 1583, 1584,
     1585, 1029, 1030, 1105, 1586, 1117, 1041, 1110, 1117, 1587,
     1097, 1589, 1118, 1118, 1113, 1178, 1115, 1118, 1178, 1188,
     1109, 1097, 1188, 1111, 1590, 1109, 1110, 1184, 1185, 1591,
     1184, 1185, 1115, 1111, 1114, 1113, 1189, 1592, 1112, 1189,
     1113, 1114, 1115, 1593, 1116, 1123, 1118, 1116, 1594, 1118,

     1122, 1122, 1595, 1184, 1185, 1122, 1117, 1123, 1123, 1596,
     1114, 1597, 1123, 1128, 1128, 1598, 1123, 1599, 1128, 1178,
     1116, 1190, 1192, 1193, 1190, 1192, 1193, 1558, 1588, 1600,
     1558, 1588, 1117, 1191, 1122, 1188, 1191, 1122, 1601, 1602,
     1194, 1123, 1178, 1194, 1123, 1195, 1188, 1128, 1195, 1604,
     1128, 1609, 1191, 1191, 1191, 1189, 1196, 1196, 1610, 1263,
     1611, 1196, 1263, 1189, 1201, 1614, 1251, 1200, 1200, 1251,
     1615, 1616, 1200, 1192, 1193, 1264, 1201, 1201, 1264, 1206,
     1206, 1201, 1617, 1265, 1206, 1201, 1265, 1619, 1192, 1620,
     1196, 1194, 1193, 1190, 1257, 1621, 1195, 1257, 1190, 1192,

     1193, 1200, 1259, 1196, 1267, 1259, 1622, 1267, 1268, 1195,
     1201, 1268, 1194, 1206, 1200, 1269, 1263, 1194, 1269, 1623,
     1257, 1624, 1195, 1201, 1270, 1625, 1206, 1270, 1259, 1324,
     1251, 1626, 1324, 1271, 1271, 1627, 1263, 1333, 1271, 1330,
     1333, 1264, 1330, 1251, 1275, 1275, 1628, 1332, 1629, 1275,
     1332, 1276, 1264, 1334, 1265, 1267, 1334, 1281, 1281, 1268,
     1265, 1267, 1281, 1276, 1276, 1330, 1269, 1271, 1276, 1271,
     1630, 1631, 1276, 1332, 1268, 1270, 1335, 1270, 1275, 1335,
     1275, 1267, 1324, 1632, 1336, 1268, 1269, 1336, 1633, 1340,
     1340, 1281, 1269, 1281, 1340, 1337, 1635, 1276, 1337, 1276,

     1392, 1270, 1636, 1392, 1333, 1338, 1324, 1334, 1338, 1637,
     1638, 1639, 1339, 1640, 1333, 1339, 1345, 1641, 1642, 1395,
     1344, 1344, 1395, 1340, 1394, 1344, 1643, 1394, 1345, 1345,
     1334, 1396, 1644, 1345, 1396, 1336, 1340, 1345, 1645, 1397,
     1350, 1350, 1397, 1646, 1335, 1350, 1337, 1398, 1647, 1337,
     1398, 1336, 1648, 1335, 1344, 1399, 1338, 1452, 1399, 1650,
     1452, 1336, 1345, 1339, 1392, 1696, 1400, 1344, 1450, 1400,
     1310, 1450, 1337, 1338, 1350, 1345, 1339, 1392, 1453, 1700,
     1394, 1453, 1338, 1395, 1309, 1454, 1700, 1350, 1454, 1339,
     1397, 1456, 1401, 1401, 1456, 1397, 1395, 1401, 1398, 1405,

     1405, 1394, 1406, 1396, 1405, 1704, 1399, 1455, 1396, 1457,
     1455, 1398, 1457, 1308, 1406, 1406, 1397, 1400, 1704, 1406,
     1411, 1411, 1701, 1406, 1398, 1411, 1401, 1399, 1400, 1306,
     1450, 1452, 1399, 1405, 1452, 1504, 1458, 1401, 1504, 1458,
     1701, 1707, 1456, 1400, 1405, 1450, 1508, 1710, 1406, 1508,
     1506, 1710, 1707, 1506, 1411, 1453, 1454, 1305, 1455, 1406,
     1457, 1694, 1454, 1304, 1694, 1411, 1459, 1459, 1456, 1463,
     1463, 1459, 1469, 1469, 1463, 1509, 1464, 1469, 1509, 1510,
     1457, 1455, 1510, 1698, 1455, 1699, 1457, 1458, 1464, 1464,
     1303, 1511, 1557, 1464, 1511, 1557, 1555, 1464, 1698, 1555,

     1459, 1504, 1458, 1463, 1506, 1699, 1469, 1302, 1559, 1512,
     1512, 1559, 1504, 1458, 1512, 1459, 1301, 1300, 1463, 1516,
     1516, 1469, 1464, 1508, 1516, 1697, 1509, 1506, 1697, 1509,
     1510, 1522, 1522, 1702, 1517, 1560, 1522, 1464, 1560, 1299,
     1561, 1561, 1511, 1512, 1298, 1561, 1517, 1517, 1702, 1511,
     1512, 1517, 1509, 1516, 1555, 1517, 1510, 1565, 1565, 1559,
     1516, 1557, 1565, 1603, 1605, 1522, 1603, 1605, 1511, 1557,
     1297, 1566, 1522, 1555, 1561, 1296, 1706, 1559, 1561, 1651,
     1517, 1295, 1651, 1566, 1566, 1559, 1560, 1517, 1566, 1706,
     1560, 1565, 1566, 1571, 1571, 1565, 1606, 1607, 1571, 1606,

     1607, 1608, 1608, 1612, 1612, 1705, 1608, 1705, 1612, 1618,
     1618, 1613, 1560, 1649, 1618, 1294, 1649, 1566, 1603, 1652,
     1711, 1566, 1652, 1613, 1613, 1293, 1693, 1571, 1613, 1693,
     1605, 1571, 1613, 1653, 1653, 1608, 1653, 1612, 1711, 1703,
     1603, 1605, 1703, 1618, 1654, 1654, 1292, 1606, 1607, 1654,
     1291, 1695, 1695, 1608, 1695, 1612, 1651, 1613, 1658, 1658,
     1709, 1618, 1606, 1658, 1664, 1664, 1607, 1709, 1659, 1664,
     1652, 1708, 1290, 1606, 1607, 1613, 1712, 1712, 1654, 1712,
     1659, 1659, 1649, 1289, 1653, 1659, 1708, 1288, 1287, 1659,
     1649, 1286, 1658, 1285, 1284, 1283, 1652, 1282, 1664, 1280,

     1279, 1278, 1695, 1693, 1810, 1811, 1277, 1810, 1810, 1810,
     1653, 1879, 1274, 1810, 1659, 1811, 1273, 1272, 1811, 1811,
     1811, 1879, 1256, 1255, 1254, 1879, 1879, 1712, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1715, 1715, 1715, 1715, 1715,
     1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715,
     1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715,
     1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715,

     1715, 1715, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,

     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1721, 1721, 1721,
     1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721,

     1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721,
     1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721,
     1721, 1721, 1721, 1721, 1722, 1722, 1722, 1722, 1722, 1722,
     1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722,
     1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722,
     1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722,
     1722, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1724, 1724,

     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1725, 1725, 1725, 1725, 1725,
     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725,
     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725,
     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725,
     1725, 1725, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,

     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1728, 1728, 1728, 1728,
     1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728,
     1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728,
     1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728,
     1728, 1728, 1728, 1729, 1729, 1729, 1729, 1729, 1729, 1729,
     1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729,

     1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729,
     1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729,
     1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730,
     1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730,
     1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730,
     1730, 1730, 1730, 1730, 1730, 1730, 1730, 1731, 1731, 1731,
     1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731,
     1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731,
     1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731,
     1731, 1731, 1731, 1731, 1732, 1732, 1732, 1732, 1732, 1732,

     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
     1732, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
     1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
     1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
     1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1734, 1734,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734,

     1734, 1734, 1734, 1734, 1734, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1737,
     1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737,
     1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737,

     1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737,
     1737, 1737, 1737, 1737, 1737, 1737, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1739, 1739, 1739, 1739, 1739, 1739, 1739,
     1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739,
     1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739,
     1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1741, 1741, 1252,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1742, 1893, 1896, 1250, 1893, 1893,
     1893, 1249, 1248, 1247, 1246, 1923, 1896, 1245, 1244, 1896,
     1896, 1896, 1243, 1742, 1242, 1923, 1742, 1742, 1742, 1923,
     1923, 1241, 1240, 1742, 1743, 1239, 1743, 1743, 1897, 1743,

     1238, 1897, 1897, 1897, 1237, 1743, 1743, 1236, 1235, 1743,
     1743, 1743, 1744, 1233, 1744, 1744, 1744, 1744, 1232, 1744,
     1744, 1744, 1231, 1229, 1228, 1744, 1744, 1744, 1227, 1744,
     1744, 1744, 1745, 1745, 1745, 1745, 1932, 1226, 1225, 1932,
     1932, 1932, 1745, 1224, 1223, 1222, 1221, 1220, 1745, 1745,
     1219, 1745, 1745, 1745, 1217, 1745, 1745, 1745, 1745, 1216,
     1745, 1745, 1746, 1215, 1746, 1746, 1949, 1746, 1214, 1949,
     1949, 1949, 1213, 1746, 1746, 1212, 1949, 1746, 1746, 1746,
     1747, 1747, 1747, 1747, 1936, 1936, 1211, 1936, 1936, 1936,
     1747, 1210, 1209, 1208, 1207, 1205, 1747, 1747, 1204, 1747,

     1747, 1747, 1203, 1747, 1747, 1747, 1747, 1202, 1747, 1747,
     1748, 1748, 1199, 1748, 1748, 1748, 1748, 1748, 1748, 1748,
     1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748,
     1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748,
     1748, 1748, 1748, 1748, 1748, 1748, 1748, 1749, 1967, 1198,
     1749, 1967, 1967, 1967, 1197, 1749, 1187, 1749, 1749, 1749,
     1749, 1749, 1186, 1180, 1179, 1177, 1749, 1749, 1749, 1176,
     1749, 1749, 1749, 1175, 1174, 1173, 1950, 1749, 1750, 1950,
     1950, 1950, 1172, 1171, 1170, 1169, 1950, 1168, 1750, 1167,
     1750, 1750, 1166, 1165, 1164, 1163, 1162, 1750, 1161, 1160,

     1750, 1750, 1750, 1158, 1157, 1153, 1152, 1750, 1751, 1751,
     1751, 1751, 1151, 1150, 1751, 1149, 1148, 1147, 1145, 1144,
     1143, 1142, 1140, 1139, 1751, 1138, 1751, 1751, 1137, 1751,
     1136, 1135, 1134, 1751, 1133, 1132, 1751, 1751, 1751, 1131,
     1130, 1129, 1751, 1751, 1752, 1752, 1752, 1752, 1127, 1126,
     1752, 1125, 1124, 1121, 1120, 1119, 1104, 1099, 1098, 1096,
     1752, 1095, 1094, 1752, 1093, 1092, 1091, 1090, 1088, 1752,
     1087, 1086, 1752, 1752, 1752, 1085, 1084, 1083, 1752, 1752,
     1753, 1753, 1753, 1753, 1082, 1081, 1753, 1080, 1079, 1078,
     1077, 1076, 1074, 1072, 1069, 1067, 1753, 1066, 1753, 1753,

     1065, 1753, 1064, 1063, 1062, 1753, 1061, 1060, 1753, 1753,
     1753, 1059, 1058, 1057, 1056, 1753, 1754, 1754, 1754, 1754,
     1055, 1053, 1754, 1052, 1051, 1050, 1049, 1048, 1047, 1045,
     1044, 1043, 1042, 1040, 1039, 1038, 1037, 1034, 1033, 1032,
     1017, 1754, 1007, 1006, 1754, 1754, 1754, 1005, 1003, 1002,
     1001, 1754, 1755, 1755,  999, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1756,
      998,  996, 1756,  995,  994,  993,  992, 1756,  991, 1756,

     1756, 1756, 1756, 1756,  990,  989,  988,  987, 1756, 1756,
     1756,  986, 1756, 1756, 1756,  984,  983,  982,  980, 1756,
     1757, 1757,  979, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1758, 1758,  978,
      977, 1758,  976,  975,  974,  973, 1758,  972, 1758, 1758,
     1758, 1758, 1758,  970,  969, 1758,  967, 1758, 1758, 1758,
      966, 1758, 1758, 1758,  965,  964,  963,  962, 1758, 1759,
     1759, 1759, 1759,  961,  960, 1759,  959,  958,  957, 1759,

      956,  955,  954,  951,  949, 1759,  948, 1759, 1759,  947,
      946,  943,  942,  941, 1759,  931,  915, 1759, 1759, 1759,
      913,  910,  908, 1759, 1759, 1760, 1760, 1760, 1760,  906,
      905, 1760,  904,  903,  901,  900,  896,  894,  893,  892,
      891, 1760,  890,  889, 1760,  888,  887,  886,  885,  884,
     1760,  883,  881, 1760, 1760, 1760,  880,  879,  877, 1760,
     1760, 1761, 1761, 1761, 1761,  876,  875, 1761,  874,  873,
      872, 1761,  870,  869,  868,  866,  865, 1761,  864, 1761,
     1761,  863,  862,  861,  860,  859, 1761,  856,  854, 1761,
     1761, 1761,  853,  852,  851,  845, 1761, 1762, 1762, 1762,

     1762,  841,  840, 1762,  830,  827,  822,  811,  802,  797,
      796,  792,  791,  790,  789,  785,  783,  780,  778,  777,
      772,  770, 1762,  768,  767, 1762, 1762, 1762,  766,  765,
      764,  763, 1762, 1763, 1763, 1763, 1763,  762,  761, 1763,
      759,  758,  757,  756,  755,  754,  753,  752,  751, 1763,
      750, 1763, 1763,  749,  748,  747,  745,  744, 1763,  743,
      742, 1763, 1763, 1763,  741,  740,  738, 1763, 1763, 1764,
     1764, 1764, 1764,  737,  733, 1764,  729,  728,  727,  725,
      722,  713,  712,  709,  707, 1764,  680,  675, 1764,  655,
      654,  652,  651,  649, 1764,  646,  644, 1764, 1764, 1764,

      642,  641,  639, 1764, 1764, 1765, 1765, 1765, 1765,  638,
      637, 1765,  634,  630,  628,  626,  623,  621,  619,  617,
      616, 1765,  613, 1765, 1765,  610,  609,  607,  606,  603,
     1765,  602,  599, 1765, 1765, 1765,  596,  592,  588,  583,
     1765, 1766, 1766, 1766, 1766,  582,  581, 1766,  578,  575,
      574,  571,  565,  562,  561,  557,  555,  554,  552,  550,
      545,  544,  541,  539,  535,  532, 1766,  531,  530, 1766,
     1766, 1766,  526,  523,  515,  512, 1766, 1767,  509,  505,
     1767,  494,  493,  489,  488,  484,  483, 1767,  477,  469,
     1767, 1767, 1767,  457,  451,  446,  442, 1767, 1768, 1768,

      434, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1768, 1768, 1768, 1768, 1769, 1769,  433, 1769, 1769,
     1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769,
     1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769,
     1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769,
     1769, 1769, 1770, 1770,  431, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,

     1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1771,
      422,  419, 1771,  416,  413,  404,  388, 1771,  376, 1771,
     1771, 1771, 1771, 1771,  374,  373,  370,  354, 1771, 1771,
     1771,  347, 1771, 1771, 1771,  346,  344,  343,  337, 1771,
     1772,  336,  322, 1772,  321,  316, 1772,  312,  308,  307,
      306,  303,  302,  299, 1772,  295,  294,  293, 1772,  290,
      286,  256,  242,  241,  240, 1772,  236,  235, 1772, 1772,
     1772,  231,  225,  222,  214, 1772, 1773, 1773, 1773, 1773,
      210,  204, 1773,  194,  186,  182,  178,  168,  160,  146,
      143,  137,  120,  110, 1773, 1773,  102,  100,   95,    0,

        0, 1773,    0,    0, 1773, 1773, 1773,    0,    0,    0,
        0, 1773, 1774, 1774, 1774, 1774,    0,    0, 1774,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1774,    0,
     1774, 1774,    0,    0,    0,    0,    0, 1774,    0,    0,
     1774, 1774, 1774,    0,    0,    0, 1774, 1774, 1775, 1775,
     1775, 1775,    0,    0, 1775,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1775,    0,    0, 1775,    0,    0,
        0,    0,    0, 1775,    0,    0, 1775, 1775, 1775,    0,
        0,    0, 1775, 1775, 1776, 1776, 1776, 1776,    0,    0,
     1776,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1776,    0, 1776, 1776,    0,    0,    0,    0,    0, 1776,
        0,    0, 1776, 1776, 1776,    0,    0,    0,    0, 1776,
     1777, 1777, 1777, 1777,    0,    0, 1777,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1777,    0,    0, 1777, 1777,
     1777,    0,    0,    0,    0, 1777, 1778,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1778,    0, 1778,    0,
        0,    0,    0,    0,    0, 1778,    0,    0, 1778, 1778,
     1778,    0,    0,    0,    0, 1778, 1779, 1779,    0, 1779,
        0,    0,    0,    0,    0,    0, 1779,    0,    0, 1779,

     1779, 1779,    0,    0,    0,    0, 1779, 1780, 1780,    0,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780,    0, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1781,    0,    0, 1781,    0,    0,
        0,    0,    0,    0, 1781,    0,    0, 1781, 1781, 1781,
        0,    0,    0,    0, 1781, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
        0, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,

     1782, 1782, 1783, 1783,    0, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783,    0, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1784,
        0,    0, 1784,    0,    0,    0,    0,    0,    0, 1784,
        0,    0, 1784, 1784, 1784,    0,    0,    0,    0, 1784,
     1785, 1785,    0, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1786, 1786,    0,

     1786,    0, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786,
        0, 1786, 1786, 1786, 1786,    0, 1786, 1786, 1786, 1786,
     1786, 1786,    0, 1786,    0, 1786, 1786, 1786, 1786, 1786,
     1786, 1786, 1786, 1786, 1787,    0,    0, 1787,    0,    0,
        0,    0,    0,    0, 1787,    0,    0,    0,    0, 1787,
     1787,    0, 1787,    0,    0,    0,    0,    0,    0, 1787,
        0,    0, 1787, 1787, 1787, 1788, 1788,    0, 1788,    0,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
        0, 1788,    0, 1788, 1788, 1788, 1788, 1788, 1788, 1788,

     1788, 1788, 1789, 1789,    0, 1789,    0, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789,    0, 1789,    0,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1790,
        0,    0, 1790,    0,    0,    0,    0,    0,    0, 1790,
        0,    0, 1790, 1790, 1790,    0,    0,    0,    0, 1790,
     1791, 1791,    0, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1791,    0,    0, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1791, 1791, 1791, 1791, 1791,    0, 1791,    0, 1791, 1791,
     1791, 1791, 1791, 1791, 1791, 1791, 1791, 1792,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 1792,    0, 1792,
     1792,    0,    0,    0,    0,    0, 1792,    0,    0, 1792,
     1792, 1792,    0,    0,    0,    0, 1792, 1793,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1793,    0, 1793,
     1793,    0,    0,    0,    0,    0, 1793,    0,    0, 1793,
     1793, 1793,    0,    0,    0,    0, 1793, 1794, 1794,    0,
     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
     1794, 1794,    0, 1794,    0, 1794, 1794, 1794, 1794, 1794,
     1794, 1794, 1794, 1794, 1795,    0,    0, 1795,    0,    0,

        0,    0,    0,    0, 1795,    0,    0, 1795, 1795, 1795,
        0,    0,    0,    0, 1795, 1796, 1796,    0, 1796, 1796,
     1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796,
     1796,    0, 1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796,
     1796, 1796,    0, 1796, 1796, 1796, 1796, 1796, 1796, 1796,
     1796, 1796, 1797, 1797,    0, 1797, 1797, 1797, 1797, 1797,
     1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797,
     1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797,
     1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1798,
     1798,    0, 1798, 1798, 1798, 1798, 1798, 1798, 1798, 1798,

     1798, 1798, 1798, 1798, 1798, 1798, 1798, 1798, 1798, 1798,
     1798, 1798, 1798, 1798, 1798, 1798, 1798, 1798, 1798, 1798,
     1798, 1798, 1798, 1798, 1798, 1798, 1799, 1799,    0, 1799,
     1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799,    0,
     1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799,
     1799,    0, 1799,    0, 1799, 1799, 1799, 1799, 1799, 1799,
     1799, 1799, 1799, 1800,    0,    0, 1800,    0,    0,    0,
        0, 1800,    0, 1800,    0,    0, 1800, 1800, 1800,    0,
        0,    0,    0, 1800, 1801,    0, 1801, 1801, 1801, 1801,
     1801,    0,    0,    0, 1801,    0, 1801,    0,    0, 1801,

     1801, 1801,    0,    0,    0,    0, 1801, 1802, 1802,    0,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,    0,    0,
     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1802,    0, 1802,    0, 1802, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1802, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803,    0,    0, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1804, 1804,    0, 1804, 1804, 1804, 1804, 1804, 1804,
        0, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804,

     1804, 1804, 1804,    0,    0, 1804, 1804, 1804,    0,    0,
     1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1805, 1805,
     1805, 1805,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1805, 1805,    0, 1805, 1805, 1805,
        0, 1805, 1805, 1805, 1805,    0, 1805, 1805, 1806, 1806,
        0, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
     1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
     1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
     1806, 1806, 1806, 1806, 1806, 1807,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1807, 1807,    0,

        0,    0,    0,    0, 1807,    0,    0, 1807, 1807, 1807,
        0,    0,    0,    0, 1807, 1808,    0, 1808, 1808,    0,
     1808,    0,    0,    0,    0,    0, 1808, 1808,    0,    0,
     1808, 1808, 1808, 1809,    0,    0, 1809,    0,    0,    0,
        0,    0,    0, 1809,    0,    0, 1809, 1809, 1809, 1812,
        0, 1812, 1812,    0, 1812,    0,    0,    0,    0,    0,
     1812, 1812,    0,    0, 1812, 1812, 1812, 1813,    0,    0,
     1813,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1813, 1813,    0, 1813, 1813, 1813, 1813, 1814,

     1814,    0, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1815,    0,    0, 1815,
        0,    0,    0,    0, 1815,    0, 1815, 1815, 1815, 1815,
     1815,    0,    0,    0,    0, 1815, 1815, 1815,    0, 1815,
     1815, 1815,    0,    0,    0,    0, 1815, 1816,    0,    0,
     1816,    0,    0,    0,    0, 1816,    0, 1816,    0, 1816,
     1816, 1816,    0,    0,    0,    0, 1816, 1816, 1816,    0,
     1816, 1816, 1816,    0,    0,    0,    0, 1816, 1817,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1817,    0,
     1817, 1817,    0,    0,    0,    0,    0, 1817,    0,    0,
     1817, 1817, 1817,    0,    0,    0,    0, 1817, 1818,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1818,    0,    0,
     1818, 1818, 1818,    0,    0,    0,    0, 1818, 1819, 1819,
     1819, 1819,    0,    0, 1819,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1819,    0,    0, 1819,    0,    0,
        0,    0,    0, 1819,    0,    0, 1819, 1819, 1819,    0,
        0,    0, 1819, 1819, 1820, 1820, 1820, 1820,    0,    0,

     1820,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1820,    0, 1820, 1820,    0, 1820,    0,    0,    0, 1820,
        0,    0, 1820, 1820, 1820,    0,    0,    0,    0, 1820,
     1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821,
     1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821,
     1821, 1821, 1821,    0, 1821, 1821, 1821, 1821, 1821, 1821,
     1821, 1821, 1821, 1821, 1821, 1821, 1821, 1822, 1822, 1822,
     1822,    0,    0, 1822,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1822,    0,    0, 1822, 1822, 1822,    0,    0,

        0,    0, 1822, 1823,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1823,    0,    0, 1823,    0,
        0,    0, 1823,    0,    0, 1823, 1823, 1823,    0,    0,
        0,    0, 1823, 1824, 1824,    0, 1824, 1824, 1824, 1824,
     1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,
     1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,
     1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,
     1825,    0,    0, 1825,    0,    0,    0,    0, 1825,    0,
     1825, 1825, 1825, 1825, 1825,    0,    0,    0,    0, 1825,
     1825, 1825,    0, 1825, 1825, 1825,    0,    0,    0,    0,

     1825, 1826,    0,    0, 1826,    0,    0,    0,    0, 1826,
        0, 1826,    0, 1826, 1826, 1826,    0,    0,    0,    0,
     1826, 1826, 1826,    0, 1826, 1826, 1826,    0,    0,    0,
        0, 1826, 1827, 1827,    0, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1828,
     1828,    0, 1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828,
     1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828,
     1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828,

     1828, 1828, 1828, 1828, 1828, 1828, 1829, 1829,    0,    0,
     1829,    0,    0,    0,    0, 1829,    0, 1829, 1829, 1829,
     1829, 1829,    0,    0, 1829,    0, 1829, 1829, 1829,    0,
     1829, 1829, 1829,    0,    0,    0,    0, 1829, 1830,    0,
        0, 1830,    0,    0,    0,    0, 1830,    0, 1830,    0,
     1830, 1830, 1830,    0,    0,    0,    0, 1830, 1830, 1830,
        0, 1830, 1830, 1830,    0,    0,    0,    0, 1830, 1831,
     1831, 1831, 1831,    0,    0, 1831,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1831,    0,    0, 1831,    0,
        0,    0,    0,    0, 1831,    0,    0, 1831, 1831, 1831,

        0,    0,    0, 1831, 1831, 1832, 1832, 1832, 1832,    0,
        0, 1832,    0,    0,    0, 1832,    0,    0,    0,    0,
        0, 1832,    0, 1832, 1832,    0,    0,    0,    0,    0,
     1832,    0,    0, 1832, 1832, 1832,    0,    0,    0,    0,
     1832, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833,
     1833, 1833, 1833,    0, 1833, 1833, 1833, 1833, 1833, 1833,
     1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833,
     1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1834, 1834,
     1834, 1834,    0,    0, 1834,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1834,    0,    0, 1834, 1834, 1834,    0,
        0,    0,    0, 1834, 1835,    0,    0, 1835,    0,    0,
     1835,    0,    0,    0, 1835,    0,    0,    0,    0,    0,
        0,    0, 1835,    0,    0,    0,    0,    0,    0, 1835,
        0,    0, 1835, 1835, 1835,    0,    0,    0,    0, 1835,
     1836, 1836, 1836, 1836,    0,    0, 1836,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1836,    0,    0, 1836,
        0,    0,    0,    0,    0, 1836,    0,    0, 1836, 1836,
     1836,    0,    0,    0, 1836, 1836, 1837, 1837, 1837, 1837,
        0,    0, 1837,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1837,    0, 1837, 1837,    0,    0,    0,    0,
        0, 1837,    0,    0, 1837, 1837, 1837,    0,    0,    0,
        0, 1837, 1838, 1838, 1838, 1838,    0,    0, 1838,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1838,    0,    0,
     1838, 1838, 1838,    0,    0,    0,    0, 1838, 1839,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1839,    0,    0,    0,    0,    0,    0, 1839,    0,    0,
     1839, 1839, 1839,    0,    0,    0,    0, 1839, 1840,    0,
        0, 1840,    0,    0,    0,    0,    0,    0, 1840,    0,

        0, 1840, 1840, 1840,    0,    0,    0,    0, 1840, 1841,
     1841,    0, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841,
     1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841,
     1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841,
     1841, 1841, 1841, 1841, 1841, 1841, 1842, 1842,    0, 1842,
     1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842,
     1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842,
     1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842,
     1842, 1842, 1842, 1843, 1843,    0, 1843, 1843, 1843, 1843,
     1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,

     1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
     1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
     1844,    0,    0, 1844,    0,    0,    0,    0, 1844,    0,
     1844, 1844, 1844, 1844, 1844,    0,    0,    0,    0, 1844,
     1844, 1844,    0, 1844, 1844, 1844,    0,    0,    0,    0,
     1844, 1845,    0,    0, 1845,    0,    0,    0,    0, 1845,
        0, 1845,    0, 1845, 1845, 1845,    0,    0,    0,    0,
     1845, 1845, 1845,    0, 1845, 1845, 1845,    0,    0,    0,
        0, 1845, 1846,    0,    0, 1846,    0,    0, 1846,    0,
        0,    0,    0,    0,    0,    0, 1846,    0,    0,    0,

     1846,    0,    0,    0,    0,    0,    0, 1846,    0,    0,
     1846, 1846, 1846,    0,    0,    0,    0, 1846, 1847, 1847,
     1847, 1847,    0,    0, 1847,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1847, 1847,    0,    0,
        0,    0,    0, 1847,    0,    0, 1847, 1847, 1847,    0,
        0,    0,    0, 1847, 1848, 1848, 1848, 1848,    0,    0,
     1848,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1848, 1848,    0,    0,    0,    0,    0, 1848,
        0,    0, 1848, 1848, 1848,    0,    0,    0,    0, 1848,
     1849, 1849, 1849, 1849,    0,    0, 1849,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1849,    0,    0, 1849,
        0,    0,    0,    0,    0, 1849,    0,    0, 1849, 1849,
     1849,    0,    0,    0, 1849, 1849, 1850, 1850, 1850, 1850,
        0,    0, 1850,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1850,    0, 1850, 1850,    0,    0,    0,    0,
        0, 1850,    0,    0, 1850, 1850, 1850,    0,    0,    0,
        0, 1850, 1851, 1851, 1851, 1851,    0,    0, 1851,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1851,    0,    0,
     1851, 1851, 1851,    0,    0,    0,    0, 1851, 1852,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1852,    0,    0,    0,    0,    0,    0, 1852,    0,    0,
     1852, 1852, 1852,    0,    0,    0,    0, 1852, 1853,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1853,    0,
     1853,    0,    0,    0,    0,    0,    0, 1853,    0,    0,
     1853, 1853, 1853,    0,    0,    0,    0, 1853, 1854,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1854,    0,    0,
     1854, 1854, 1854,    0,    0,    0,    0, 1854, 1855, 1855,
        0, 1855,    0,    0,    0,    0,    0,    0, 1855,    0,

        0, 1855, 1855, 1855,    0,    0,    0,    0, 1855, 1856,
     1856,    0, 1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856,
     1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856,
     1856, 1856, 1856, 1856, 1856, 1856,    0, 1856, 1856, 1856,
     1856, 1856, 1856, 1856, 1856, 1856, 1857,    0,    0, 1857,
        0,    0,    0,    0,    0,    0, 1857,    0,    0, 1857,
     1857, 1857,    0,    0,    0,    0, 1857, 1858, 1858, 1858,
     1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858,
     1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858,
     1858, 1858,    0, 1858, 1858, 1858, 1858, 1858, 1858, 1858,

     1858, 1858, 1858, 1858, 1859, 1859,    0, 1859, 1859, 1859,
     1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859,
     1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859,    0,
     1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859,
     1859, 1860,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1860,    0,    0, 1860, 1860, 1860,    0,    0,    0,    0,
     1860, 1861,    0,    0, 1861,    0,    0,    0,    0,    0,
        0, 1861,    0,    0, 1861, 1861, 1861,    0,    0,    0,
        0, 1861, 1862, 1862,    0, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1863,
     1863,    0, 1863,    0, 1863, 1863, 1863, 1863, 1863, 1863,
     1863, 1863,    0, 1863, 1863, 1863, 1863,    0, 1863, 1863,
     1863, 1863, 1863, 1863,    0, 1863,    0, 1863, 1863, 1863,
     1863, 1863, 1863, 1863, 1863, 1863, 1864,    0,    0, 1864,
        0,    0,    0,    0,    0,    0, 1864,    0,    0,    0,
        0, 1864, 1864,    0, 1864,    0,    0,    0,    0,    0,
        0, 1864,    0,    0, 1864, 1864, 1864, 1865, 1865,    0,

     1865,    0, 1865, 1865, 1865, 1865, 1865, 1865, 1865, 1865,
     1865, 1865, 1865, 1865, 1865, 1865, 1865, 1865, 1865, 1865,
     1865, 1865,    0, 1865,    0, 1865, 1865, 1865, 1865, 1865,
     1865, 1865, 1865, 1865, 1866, 1866,    0, 1866,    0, 1866,
     1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866,
     1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866,    0,
     1866,    0, 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866,
     1866, 1867,    0,    0, 1867,    0,    0,    0,    0,    0,
        0, 1867,    0,    0, 1867, 1867, 1867,    0,    0,    0,
        0, 1867, 1868, 1868,    0, 1868, 1868, 1868, 1868, 1868,

     1868, 1868, 1868,    0,    0, 1868, 1868, 1868, 1868, 1868,
     1868, 1868, 1868, 1868, 1868, 1868, 1868,    0, 1868,    0,
     1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1869,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1869,
        0, 1869, 1869,    0,    0,    0,    0,    0, 1869,    0,
        0, 1869, 1869, 1869,    0,    0,    0,    0, 1869, 1870,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1870,    0,
        0, 1870, 1870, 1870,    0,    0,    0,    0, 1870, 1871,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1871,

        0, 1871, 1871,    0,    0,    0,    0,    0, 1871,    0,
        0, 1871, 1871, 1871,    0,    0,    0,    0, 1871, 1872,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1872,    0,
        0, 1872, 1872, 1872,    0,    0,    0,    0, 1872, 1873,
     1873,    0, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873,
     1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873,
     1873, 1873, 1873, 1873,    0, 1873,    0, 1873, 1873, 1873,
     1873, 1873, 1873, 1873, 1873, 1873, 1874,    0,    0, 1874,
        0,    0,    0,    0,    0,    0, 1874,    0,    0, 1874,

     1874, 1874,    0,    0,    0,    0, 1874, 1875, 1875,    0,
     1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875,
     1875, 1875, 1875,    0, 1875, 1875, 1875, 1875, 1875, 1875,
     1875, 1875, 1875, 1875,    0, 1875, 1875, 1875, 1875, 1875,
     1875, 1875, 1875, 1875, 1876, 1876,    0, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1877, 1877,    0, 1877, 1877, 1877, 1877, 1877, 1877,
     1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877,

     1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877,
     1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1878, 1878,
        0, 1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878,
     1878,    0, 1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878,
     1878, 1878, 1878,    0, 1878,    0, 1878, 1878, 1878, 1878,
     1878, 1878, 1878, 1878, 1878, 1880,    0,    0,    0,    0,
        0,    0,    0,    0, 1880,    0, 1880, 1880, 1880, 1880,
     1880,    0,    0,    0, 1880,    0, 1880,    0,    0, 1880,
     1880, 1880,    0,    0,    0,    0, 1880, 1881,    0, 1881,
     1881, 1881, 1881, 1881,    0,    0,    0, 1881,    0, 1881,

        0,    0, 1881, 1881, 1881,    0,    0,    0,    0, 1881,
     1882,    0,    0, 1882,    0,    0,    0,    0, 1882,    0,
     1882,    0,    0, 1882, 1882, 1882,    0,    0,    0,    0,
     1882, 1883, 1883,    0, 1883, 1883, 1883, 1883, 1883, 1883,
     1883, 1883,    0,    0, 1883, 1883, 1883, 1883, 1883, 1883,
     1883, 1883, 1883, 1883, 1883, 1883,    0, 1883,    0, 1883,
     1883, 1883, 1883, 1883, 1883, 1883, 1883, 1883, 1884, 1884,
     1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884,    0,
        0, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884,
     1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884,

     1884, 1884, 1884, 1884, 1884, 1885, 1885,    0, 1885, 1885,
     1885, 1885, 1885, 1885,    0, 1885, 1885, 1885, 1885, 1885,
     1885, 1885, 1885, 1885, 1885, 1885, 1885,    0,    0, 1885,
     1885, 1885,    0,    0, 1885, 1885, 1885, 1885, 1885, 1885,
     1885, 1885, 1886,    0,    0, 1886,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1886,    0,    0,
     1886, 1886, 1886, 1886, 1887,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1887, 1887,    0,    0,
        0,    0,    0, 1887,    0,    0, 1887, 1887, 1887,    0,

        0,    0,    0, 1887, 1888, 1888,    0, 1888, 1888, 1888,
     1888,    0, 1888, 1888, 1888, 1888, 1888, 1888, 1888, 1888,
     1888, 1888, 1888, 1888, 1888, 1888, 1888, 1888, 1888, 1888,
     1888, 1888, 1888, 1888, 1888, 1888, 1888, 1888, 1888, 1888,
     1888, 1889, 1889,    0, 1889,    0,    0,    0,    0,    0,
        0, 1889,    0,    0, 1889, 1889, 1889, 1890,    0, 1890,
     1890,    0, 1890,    0,    0,    0,    0,    0, 1890, 1890,
        0,    0, 1890, 1890, 1890, 1891, 1891,    0, 1891, 1891,
     1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891,
     1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891,

     1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891,
     1891, 1891, 1892,    0,    0, 1892,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1892,    0,    0,
     1892, 1892, 1892, 1894,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1894,    0, 1894,    0, 1894, 1894,
        0,    0,    0,    0,    0, 1894,    0,    0, 1894, 1894,
     1894,    0,    0, 1894, 1895, 1895,    0, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1898,    0,    0, 1898,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1898, 1898,    0, 1898,
     1898, 1898, 1898, 1899,    0,    0, 1899,    0,    0,    0,
        0, 1899,    0, 1899, 1899, 1899, 1899, 1899,    0,    0,
        0,    0, 1899, 1899, 1899,    0, 1899, 1899, 1899,    0,
        0,    0,    0, 1899, 1900,    0,    0, 1900,    0,    0,
        0,    0, 1900,    0, 1900, 1900, 1900, 1900, 1900,    0,
        0,    0,    0, 1900, 1900, 1900,    0, 1900, 1900, 1900,

        0,    0,    0,    0, 1900, 1901,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1901,    0, 1901, 1901,    0,
        0,    0,    0,    0, 1901,    0,    0, 1901, 1901, 1901,
        0,    0,    0,    0, 1901, 1902, 1902, 1902, 1902, 1902,
     1902, 1902, 1902, 1902, 1902, 1902, 1902, 1902, 1902, 1902,
     1902, 1902, 1902, 1902, 1902, 1902, 1902, 1902, 1902, 1902,
     1902, 1902, 1902, 1902, 1902, 1902, 1902, 1902, 1902, 1902,
     1902, 1902, 1903,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1903,    0,    0, 1903,    0,    0,
        0, 1903,    0,    0, 1903, 1903, 1903,    0,    0,    0,

        0, 1903, 1904,    0,    0, 1904,    0,    0,    0,    0,
     1904,    0, 1904, 1904, 1904, 1904, 1904,    0,    0,    0,
        0, 1904, 1904, 1904,    0, 1904, 1904, 1904,    0,    0,
        0,    0, 1904, 1905,    0,    0, 1905,    0,    0,    0,
        0, 1905,    0, 1905, 1905, 1905, 1905, 1905,    0,    0,
        0,    0, 1905, 1905, 1905,    0, 1905, 1905, 1905,    0,
        0,    0,    0, 1905, 1906, 1906,    0, 1906, 1906, 1906,
     1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906,
     1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906,
     1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906,

     1906, 1907, 1907,    0,    0, 1907,    0,    0,    0,    0,
     1907,    0, 1907, 1907, 1907, 1907, 1907,    0,    0, 1907,
        0, 1907, 1907, 1907,    0, 1907, 1907, 1907,    0,    0,
        0,    0, 1907, 1908, 1908,    0,    0, 1908,    0,    0,
        0,    0, 1908,    0, 1908, 1908, 1908, 1908, 1908,    0,
        0, 1908,    0, 1908, 1908, 1908,    0, 1908, 1908, 1908,
        0,    0,    0,    0, 1908, 1909, 1909, 1909, 1909, 1909,
     1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909,
     1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909,
     1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909,

     1909, 1909, 1910,    0,    0, 1910,    0,    0, 1910,    0,
        0,    0, 1910,    0,    0,    0,    0,    0,    0,    0,
     1910,    0,    0,    0,    0,    0,    0, 1910,    0,    0,
     1910, 1910, 1910,    0,    0,    0,    0, 1910, 1911,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1911,    0,    0,    0,    0,    0,    0, 1911,    0,    0,
     1911, 1911, 1911,    0,    0,    0,    0, 1911, 1912,    0,
        0, 1912,    0,    0,    0,    0, 1912,    0, 1912, 1912,
     1912, 1912, 1912,    0,    0,    0,    0, 1912, 1912, 1912,
        0, 1912, 1912, 1912,    0,    0,    0,    0, 1912, 1913,

        0,    0, 1913,    0,    0,    0,    0, 1913,    0, 1913,
     1913, 1913, 1913, 1913,    0,    0,    0,    0, 1913, 1913,
     1913,    0, 1913, 1913, 1913,    0,    0,    0,    0, 1913,
     1914, 1914, 1914, 1914,    0,    0, 1914,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1914, 1914,
        0,    0,    0,    0,    0, 1914,    0,    0, 1914, 1914,
     1914,    0,    0,    0,    0, 1914, 1915, 1915, 1915, 1915,
        0,    0, 1915,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1915,    0,    0,    0,    0,
        0, 1915,    0,    0, 1915, 1915, 1915,    0,    0,    0,

        0, 1915, 1916,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1916,    0,    0,    0,    0,    0,
        0, 1916,    0,    0, 1916, 1916, 1916,    0,    0,    0,
        0, 1916, 1917,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1917,    0, 1917,    0,    0,    0,    0,    0,
        0, 1917,    0,    0, 1917, 1917, 1917,    0,    0,    0,
        0, 1917, 1918,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1918,    0,    0,    0,    0,    0,
        0, 1918,    0,    0, 1918, 1918, 1918,    0,    0,    0,
        0, 1918, 1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919,

     1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919,
     1919,    0, 1919, 1919, 1919, 1919, 1919, 1919,    0, 1919,
     1919,    0,    0, 1919, 1919, 1919, 1919, 1919, 1919, 1920,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1920,
        0, 1920, 1920,    0,    0,    0,    0,    0, 1920,    0,
        0, 1920, 1920, 1920,    0,    0,    0,    0, 1920, 1921,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1921,
        0, 1921, 1921,    0,    0,    0,    0,    0, 1921,    0,
        0, 1921, 1921, 1921,    0,    0,    0,    0, 1921, 1922,
        0,    0,    0,    0, 1922,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1922,    0,    0, 1922, 1922, 1922,    0,    0,    0,    0,
     1922, 1924,    0,    0,    0,    0,    0,    0,    0,    0,
     1924,    0, 1924, 1924, 1924, 1924, 1924,    0,    0,    0,
     1924,    0, 1924,    0,    0, 1924, 1924, 1924,    0,    0,
        0,    0, 1924, 1925,    0,    0, 1925,    0,    0,    0,
        0, 1925,    0, 1925,    0,    0, 1925, 1925, 1925,    0,
        0,    0,    0, 1925, 1926,    0, 1926, 1926, 1926, 1926,
     1926,    0,    0,    0, 1926,    0, 1926,    0,    0, 1926,
     1926, 1926,    0,    0,    0,    0, 1926, 1927,    0,    0,

     1927,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1927,    0,    0, 1927, 1927, 1927, 1927, 1928,
     1928,    0, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1929,    0,    0, 1929,
        0,    0,    0,    0,    0,    0, 1929,    0,    0, 1929,
     1929, 1929, 1930,    0, 1930,    0, 1930, 1930,    0, 1930,
        0,    0,    0,    0,    0, 1930, 1930,    0,    0, 1930,

     1930, 1930, 1931, 1931,    0, 1931, 1931, 1931, 1931, 1931,
     1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931,
     1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931,
     1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1933,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1933,    0, 1933,    0, 1933, 1933,    0,    0,    0,    0,
        0, 1933,    0,    0, 1933, 1933, 1933,    0,    0, 1933,
     1934, 1934,    0, 1934, 1934, 1934, 1934, 1934, 1934, 1934,
     1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934,
     1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934,

     1934, 1934, 1934, 1934, 1934, 1934, 1934, 1935, 1935,    0,
     1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935,
     1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935,
     1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935,
     1935, 1935, 1935, 1935, 1937,    0,    0, 1937,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1937,
     1937,    0, 1937, 1937, 1937, 1937, 1938, 1938,    0, 1938,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1938,
        0, 1938, 1938,    0, 1938, 1938,    0,    0,    0,    0,

     1938, 1938,    0,    0, 1938, 1938, 1938,    0, 1938, 1939,
        0,    0, 1939,    0,    0,    0,    0, 1939,    0, 1939,
     1939, 1939, 1939, 1939,    0,    0,    0,    0, 1939, 1939,
     1939,    0, 1939, 1939, 1939,    0,    0,    0,    0, 1939,
     1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940,
     1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940,
     1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940,
     1940, 1940, 1940, 1940, 1940, 1940, 1940, 1941,    0,    0,
     1941,    0,    0,    0,    0, 1941,    0, 1941, 1941, 1941,
     1941, 1941,    0,    0,    0,    0, 1941, 1941, 1941,    0,

     1941, 1941, 1941,    0,    0,    0,    0, 1941, 1942, 1942,
        0, 1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942,
     1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942,
     1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942,
     1942, 1942, 1942, 1942, 1942, 1943, 1943,    0,    0, 1943,
        0,    0,    0,    0, 1943,    0, 1943, 1943, 1943, 1943,
     1943,    0,    0, 1943,    0, 1943, 1943, 1943,    0, 1943,
     1943, 1943,    0,    0,    0,    0, 1943, 1944,    0,    0,
     1944,    0,    0,    0,    0, 1944,    0, 1944, 1944, 1944,
     1944, 1944,    0,    0,    0,    0, 1944, 1944, 1944,    0,

     1944, 1944, 1944,    0,    0,    0,    0, 1944, 1945, 1945,
     1945, 1945,    0,    0, 1945,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1945,    0,    0,
        0,    0,    0, 1945,    0,    0, 1945, 1945, 1945,    0,
        0,    0,    0, 1945, 1946, 1946, 1946, 1946,    0,    0,
     1946,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1946, 1946,    0,    0,    0,    0,    0, 1946,
        0,    0, 1946, 1946, 1946,    0,    0,    0,    0, 1946,
     1947,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1947,    0, 1947,    0,    0,    0,    0,    0,    0, 1947,

        0,    0, 1947, 1947, 1947,    0,    0,    0,    0, 1947,
     1948,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1948,    0,    0,    0,    0,    0,    0, 1948,
        0,    0, 1948, 1948, 1948,    0,    0,    0,    0, 1948,
     1951,    0,    0, 1951,    0,    0,    0,    0,    0,    0,
     1951,    0,    0, 1951, 1951, 1951,    0,    0,    0,    0,
     1951, 1952,    0,    0,    0,    0,    0,    0,    0,    0,
     1952,    0, 1952, 1952, 1952, 1952, 1952,    0,    0,    0,
     1952,    0, 1952,    0,    0, 1952, 1952, 1952,    0,    0,
        0,    0, 1952, 1953,    0, 1953, 1953, 1953, 1953, 1953,

        0,    0,    0, 1953,    0, 1953,    0,    0, 1953, 1953,
     1953,    0,    0,    0,    0, 1953, 1954, 1954,    0, 1954,
        0,    0,    0,    0,    0,    0, 1954,    0,    0, 1954,
     1954, 1954, 1955,    0, 1955,    0, 1955, 1955,    0, 1955,
        0,    0,    0,    0,    0, 1955, 1955,    0,    0, 1955,
     1955, 1955, 1956, 1956,    0, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1957,
     1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957,

     1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957,    0, 1957,
     1957, 1957, 1957, 1957, 1957,    0, 1957, 1957,    0, 1957,
        0, 1957, 1957, 1957, 1957, 1957, 1958,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1958,    0,    0,
     1958,    0,    0,    0,    0,    0,    0, 1958,    0,    0,
     1958, 1958, 1958,    0,    0,    0,    0, 1958, 1959,    0,
        0,    0,    0,    0, 1959,    0,    0, 1959,    0,    0,
        0,    0,    0,    0, 1959,    0,    0, 1959, 1959, 1959,
        0,    0,    0,    0, 1959, 1960, 1960,    0, 1960, 1960,
     1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960,

     1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960,
     1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960,
     1960, 1960, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961,    0, 1961, 1961, 1961, 1961, 1961, 1961,    0, 1961,
     1961,    0,    0,    0, 1961, 1961, 1961, 1961, 1961, 1962,
     1962, 1962, 1962, 1962, 1962, 1962, 1962, 1962, 1962, 1962,
     1962, 1962, 1962, 1962, 1962, 1962, 1962, 1962,    0, 1962,
     1962, 1962, 1962, 1962, 1962,    0, 1962, 1962,    0,    0,
        0, 1962, 1962, 1962, 1962, 1962, 1963, 1963, 1963, 1963,

     1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963,
     1963, 1963, 1963, 1963, 1963,    0, 1963, 1963, 1963, 1963,
     1963, 1963,    0, 1963, 1963,    0,    0,    0, 1963, 1963,
     1963, 1963, 1963, 1964, 1964, 1964, 1964, 1964, 1964, 1964,
     1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964,
     1964, 1964,    0, 1964, 1964, 1964, 1964, 1964, 1964,    0,
     1964, 1964,    0,    0,    0, 1964, 1964, 1964, 1964, 1964,
     1965, 1965,    0, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,

     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1966, 1966,    0,
     1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1966, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,

     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
/*************************************************************************
 *
 * Copyright (c) 2014-2023 Barbara Geller & Ansel Sermersheim
 * Copyright (c) 1997-2014 Dimitri van Heesch
 *
*************************************************************************/

#include <QFile>
#include <QStack>
#include <QVector>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <cite.h>
#include <commentscan.h>
#include <condparser.h>
#include <config.h>
#include <default_args.h>
#include <doxy_globals.h>
#include <entry.h>
#include <formula.h>
#include <index.h>
#include <language.h>
#include <membergroup.h>
#include <message.h>
#include <outputlist.h>
#include <parse_base.h>
#include <parse_cstyle.h>
#include <parse_md.h>
#include <util.h>

#define YY_NO_INPUT 1

// forward declarations
static bool handleBrief(const QString &str, const QStringList &list);
static bool handleFn(const QString &str, const QStringList &list);
static bool handleProperty(const QString &str, const QStringList &list);
static bool handleDef(const QString &str, const QStringList &list);
static bool handleOverload(const QString &str, const QStringList &list);
static bool handleEnum(const QString &str, const QStringList &list);
static bool handleDefGroup(const QString &str, const QStringList &list);
static bool handleAddToGroup(const QString &str, const QStringList &list);
static bool handleWeakGroup(const QString &str, const QStringList &list);
static bool handleNamespace(const QString &str, const QStringList &list);
static bool handlePackage(const QString &str, const QStringList &list);
static bool handleClass(const QString &str, const QStringList &list);
static bool handleConcept(const QString &str, const QStringList &list);
static bool handleHeaderFile(const QString &str, const QStringList &list);
static bool handleProtocol(const QString &str, const QStringList &list);
static bool handleCategory(const QString &str, const QStringList &list);
static bool handleUnion(const QString &str, const QStringList &list);
static bool handleStruct(const QString &str, const QStringList &list);;
static bool handleInterface(const QString &str, const QStringList &list);
static bool handleIdlException(const QString &str, const QStringList &list);
static bool handlePage(const QString &str, const QStringList &list);
static bool handleMainpage(const QString &str, const QStringList &list);
static bool handleFile(const QString &str, const QStringList &list);
static bool handleDir(const QString &str, const QStringList &list);
static bool handleExample(const QString &str, const QStringList &list);
static bool handleDetails(const QString &str, const QStringList &list);
static bool handleName(const QString &str, const QStringList &list);
static bool handleTodo(const QString &str, const QStringList &list);
static bool handleTest(const QString &str, const QStringList &list);
static bool handleBug(const QString &str, const QStringList &list);
static bool handleSubpage(const QString &str, const QStringList &list);
static bool handleDeprecated(const QString &str, const QStringList &list);
static bool handleXRefItem(const QString &str, const QStringList &list);
static bool handleRelated(const QString &str, const QStringList &list);
static bool handleRelatedAlso(const QString &str, const QStringList &list);
static bool handleMemberOf(const QString &str, const QStringList &list);
static bool handleRefItem(const QString &str, const QStringList &list);
static bool handleSection(const QString &str, const QStringList &list);
static bool handleAnchor(const QString &str, const QStringList &list);
static bool handleCite(const QString &str, const QStringList &list);
static bool handleFormatBlock(const QString &str, const QStringList &list);
static bool handleAddIndex(const QString &str, const QStringList &list);;
static bool handleIf(const QString &str, const QStringList &list);
static bool handleIfNot(const QString &str, const QStringList &list);
static bool handleElseIf(const QString &str, const QStringList &list);
static bool handleElse(const QString &str, const QStringList &list);
static bool handleEndIf(const QString &str, const QStringList &list);
static bool handleIngroup(const QString &str, const QStringList &list);
static bool handleNoSubGrouping(const QString &str, const QStringList &list);
static bool handleShowInitializer(const QString &str, const QStringList &list);
static bool handleHideInitializer(const QString &str, const QStringList &list);
static bool handleCallgraph(const QString &str, const QStringList &list);
static bool handleHideCallgraph(const QString &str, const QStringList &list);
static bool handleCallergraph(const QString &str, const QStringList &list);
static bool handleHideCallergraph(const QString &str, const QStringList &list);
static bool handleReferencedByRelation(const QString &str, const QStringList &list);
static bool handleHideReferencedByRelation(const QString &str, const QStringList &list);
static bool handleReferencesRelation(const QString &str, const QStringList &list);
static bool handleHideReferencesRelation(const QString &str, const QStringList &list);
static bool handleInternal(const QString &str, const QStringList &list);
static bool handleStatic(const QString &str, const QStringList &list);
static bool handlePure(const QString &str, const QStringList &list);
static bool handlePrivate(const QString &str, const QStringList &list);
static bool handlePrivateSection(const QString &str, const QStringList &list);
static bool handleProtected(const QString &str, const QStringList &list);
static bool handleProtectedSection(const QString &str, const QStringList &list);
static bool handlePublic(const QString &str, const QStringList &list);
static bool handlePublicSection(const QString &str, const QStringList &list);
static bool handleToc(const QString &str, const QStringList &list);
static bool handleInherit(const QString &str, const QStringList &list);
static bool handleExtends(const QString &str, const QStringList &list);
static bool handleCopyDoc(const QString &str, const QStringList &list);
static bool handleCopyBrief(const QString &str, const QStringList &list);
static bool handleCopyDetails(const QString &str, const QStringList &list);
static bool handleParBlock(const QString &str, const QStringList &list);
static bool handleEndParBlock(const QString &str, const QStringList &list);
static bool handleParam(const QString &str, const QStringList &list);
static bool handleRetval(const QString &str, const QStringList &list);
//   static void handleGuard(const QString &str, const QStringList &list);

static void checkFormula();

using DocCmdFunc = bool (*)(const QString &str, const QStringList &list);

struct DocCmdMap
{
   DocCmdMap(const char *x1, DocCmdFunc x2, bool x3) {
      cmdName   = QString::fromUtf8(x1);
      handler   = x2;
      endsBrief = x3;
   }

   QString cmdName;
   DocCmdFunc handler;
   bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "addindex",        &handleAddIndex,                 false },
  { "addtogroup",      &handleAddToGroup,               false },
  { "anchor",          &handleAnchor,                   true  },
  { "arg",             0,                               true  },
  { "attention",       0,                               true  },
  { "author",          0,                               true  },
  { "authors",         0,                               true  },
  { "brief",           &handleBrief,                    false },
  { "bug",             &handleBug,                      false },
  { "callergraph",     &handleCallergraph,              false },
  { "callgraph",       &handleCallgraph,                false },
  { "category",        &handleCategory,                 false },
  { "cite",            &handleCite,                     false },
  { "class",           &handleClass,                    false },
  { "code",            &handleFormatBlock,              true  },
  { "concept",         &handleConcept,                  false },
  { "copybrief",       &handleCopyBrief,                false },
  { "copydetails",     &handleCopyDetails,              true  },
  { "copydoc",         &handleCopyDoc,                  true  },
  { "copyright",       0,                               true  },
  { "date",            0,                               true  },
  { "def",             &handleDef,                      false },
  { "defgroup",        &handleDefGroup,                 false },
  { "deprecated",      &handleDeprecated,               false },
  { "details",         &handleDetails,                  true  },
  { "dir",             &handleDir,                      false },
  { "docbookinclude",  0,                               false },
  { "docbookonly",     &handleFormatBlock,              false },
  { "dot",             &handleFormatBlock,              true  },
  { "dotfile",         0,                               true  },
  { "else",            &handleElse,                     false },
  { "elseif",          &handleElseIf,                   false },
  { "endif",           &handleEndIf,                    false },
  { "endparblock",     &handleEndParBlock,              true  },
  { "enum",            &handleEnum,                     false },
  { "example",         &handleExample,                  false },
  { "exception",       0,                               true  },
  { "extends",         &handleExtends,                  true  },
  { "file",            &handleFile,                     false },
  { "fn",              &handleFn,                       false },
  { "group",           &handleDefGroup,                 false },
  { "headerfile",      &handleHeaderFile,               false },
  { "hidecallergraph", &handleHideCallergraph,          false },
  { "hidecallgraph",   &handleHideCallgraph,            false },
  { "hideinitializer", &handleHideInitializer,          false },
  { "hiderefby",       &handleHideReferencedByRelation, false },
  { "hiderefs",        &handleHideReferencesRelation,   false },
  { "htmlinclude",     0,                               false },
  { "htmlonly",        &handleFormatBlock,              false },
  { "idlexcept",       &handleIdlException,             false },
  { "if",              &handleIf,                       false },
  { "ifnot",           &handleIfNot,                    false },
  { "image",           0,                               true  },
  { "implements",      &handleExtends,                  true  },
  { "include",         0,                               true  },
  { "includelineno",   0,                               true  },
  { "ingroup",         &handleIngroup,                  false },
  { "inherit",         &handleInherit,                  true  },
  { "interface",       &handleInterface,                false },
  { "internal",        &handleInternal,                 true  },
  { "invariant",       0,                               true  },
  { "latexinclude",    0,                               false },
  { "latexonly",       &handleFormatBlock,              false },
  { "li",              0,                               true  },
  { "line",            0,                               true  },
  { "mainpage",        &handleMainpage,                 false },
  { "maninclude",      0,                               false },
  { "manonly",         &handleFormatBlock,              false },
  { "memberof",        &handleMemberOf,                 true  },
  { "msc",             &handleFormatBlock,              true  },
  { "name",            &handleName,                     false },
  { "namespace",       &handleNamespace,                false },
  { "nosubgrouping",   &handleNoSubGrouping,            false },
  { "note",            0,                               true  },
  { "overload",        &handleOverload,                 false },
  { "package",         &handlePackage,                  false },
  { "page",            &handlePage,                     false },
  { "par",             0,                               true  },
  { "paragraph",       &handleSection,                  true  },
  { "param",           &handleParam,                    true  },
  { "parblock",        &handleParBlock,                 true  },
  { "post",            0,                               true  },
  { "pre",             0,                               true  },
  { "private",         &handlePrivate,                  false },
  { "privatesection",  &handlePrivateSection,           false },
  { "property",        &handleProperty,                 false },
  { "protected",       &handleProtected,                false },
  { "protectedsection",&handleProtectedSection,         false },
  { "protocol",        &handleProtocol,                 false },
  { "public",          &handlePublic,                   false },
  { "publicsection",   &handlePublicSection,            false },
  { "pure",            &handlePure,                     false },
  { "refitem",         &handleRefItem,                  true  },
  { "related",         &handleRelated,                  true  },
  { "relatedalso",     &handleRelatedAlso,              true  },
  { "relates",         &handleRelated,                  true  },
  { "relatesalso",     &handleRelatedAlso,              true  },
  { "remark",          0,                               true  },
  { "remarks",         0,                               true  },
  { "result",          0,                               true  },
  { "return",          0,                               true  },
  { "returns",         0,                               true  },
  { "retval",          &handleRetval,                   true  },
  { "rtfinclude",      0,                               false },
  { "rtfonly",         &handleFormatBlock,              false },
  { "sa",              0,                               true  },
  { "section",         &handleSection,                  true  },
  { "see",             0,                               true  },
  { "short",           &handleBrief,                    false },
  { "showinitializer", &handleShowInitializer,          false },
  { "showrefby",       &handleReferencedByRelation,     false },
  { "showrefs",        &handleReferencesRelation,       false },
  { "since",           0,                               true  },
  { "snippet",         0,                               true  },
  { "snippetlineno",   0,                               true  },
  { "startuml",        &handleFormatBlock,              true  },
  { "static",          &handleStatic,                   false },
  { "struct",          &handleStruct,                   false },
  { "subpage",         &handleSubpage,                  true  },
  { "subsection",      &handleSection,                  true  },
  { "subsubsection",   &handleSection,                  true  },
  { "tableofcontents", &handleToc,                      false },
  { "test",            &handleTest,                     false },
  { "throw",           0,                               true  },
  { "throws",          0,                               true  },
  { "todo",            &handleTodo,                     false },
  { "tparam",          0,                               true  },
  { "typedef",         &handleFn,                       false },
  { "union",           &handleUnion,                    false },
  { "until",           0,                               true  },
  { "var",             &handleFn,                       false },
  { "verbatim",        &handleFormatBlock,              true  },
  { "verbinclude",     0,                               false },
  { "version",         0,                               true  },
  { "warning",         0,                               true  },
  { "weakgroup",       &handleWeakGroup,                false },
  { "xmlinclude",      0,                               false },
  { "xmlonly",         &handleFormatBlock,              false },
  { "xrefitem",        &handleXRefItem,                 false },
  { nullptr,           0,                               false }
};

//  Maps a command name (as found in a comment block) onto a specific handler function
class DocCmdMapper
{
  public:
    struct Cmd {
      DocCmdFunc func;
      bool endsBrief;
    };

    // maps a command name to a handler function
    static Cmd *map(const QString &name) {
      return instance()->find(name);
    }

    // release the instance
    static void freeInstance() {
      delete s_instance;
      s_instance = nullptr;
    }

  private:
    static DocCmdMapper *instance() {
      if (s_instance == nullptr) {
         s_instance = new DocCmdMapper;
      }

      return s_instance;
   }

   DocCmdMapper() {
      DocCmdMap *p = docCmdMap;

      while (! p->cmdName.isEmpty()) {
         if (m_map.contains(p->cmdName)) {
            err("DocCmdMapper: command %s already added\n", csPrintable(p->cmdName));
            Doxy_Work::stopDoxyPress();
         }

         Cmd *cmd       = new Cmd;
         cmd->func      = p->handler;
         cmd->endsBrief = p->endsBrief;

         m_map.insert(p->cmdName, cmd);
         ++p;
      }
   }

   Cmd *find(const QString &name) {
      return m_map.value(name);
   }

   QHash<QString, Cmd *> m_map;
   static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance = nullptr;

#define YY_NEVER_INTERACTIVE 1

enum XRefKind {
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext {
  OutputMainDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType {
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
 public:
   GuardedSection(bool enabled, bool parentVisible)
      : m_enabled(enabled), m_parentVisible(parentVisible)
   { }

   bool isEnabled() const {
      return m_enabled;
   }

   bool parentVisible() const {
      return m_parentVisible;
   }

 private:
   bool m_enabled;
   bool m_parentVisible;
};

static void groupAddDocs(QSharedPointer<Entry> e);

static QString          s_inputString;         // input string
static QString          s_currentCommand;
static int              s_inputPosition;       // read pointer
static int              s_prevPosition;
static char            *s_bufferPosition;

static QString          yyFileName;            // file name that is read from
static int              yyLineNr;              // line number in the input
static bool             inBody;                // was the comment found inside the body of a function?
static OutputContext    inContext;             // are we inside the brief, details or xref part
static bool             briefEndsAtDot;        // does the brief description stop at a dot
static QString          formulaText;           // Running text of a formula
static QString          formulaEnv;            // environment name
static int              formulaNewLines;       // amount of new lines in the formula

static QString          s_outputXRef;          // tmp argument of todo/test/../xrefitem commands
static QString          s_blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;              // kind of cross-reference command
static XRefKind         newXRefKind;
static GuardType        s_guardType;           // kind of guard for conditional section
static bool             s_isEnabledSection;
static QString          s_functionProto;       // function prototype

static bool             s_needNewEntry;
// static int           s_docBlockContext;

static QString          s_sectionLabel;
static QString          s_sectionTitle;
static int              s_sectionLevel;
static QString          xrefItemKey;
static QString          newXRefItemKey;
static QString          xrefItemTitle;
static QString          xrefListTitle;
static Protection       s_protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              s_braceCount;
static bool             insidePre;
static bool             s_parseMore;

static int              s_condCount;
static int              s_commentCount;
static QString          s_spaceBeforeCmd;
static QString          s_spaceBeforeIf;
static QString          s_copyDocArg;
static QString          s_guardExpr;
static int              s_roundCount;
static int              s_htmlDetails;
static bool             s_insideParBlock;

static int              s_openCount;
static int              s_memberGroupId = DOX_NOGROUP;
static QString          s_memberGroupHeader;
static QString          s_memberGroupDocs;
static QString          s_memberGroupRelates;
static QString          s_compoundName;

static QString          s_htmlAnchor;
static bool             s_isHtmlAnchor;

static bool             s_internalDocs;
static bool             s_processInternalDocs = false;

static ParserInterface        *langParser;        // the language parser calling us

static QSharedPointer<Entry>  s_docsEntry;        // which entry
static EntryKey               s_docsEnum;         // which enum in EntryKey (brief, main, inbody)

static QStack<GuardedSection> s_guards;           // tracks nested conditional sections (if, ifnot, ..)
static QSharedPointer<Entry>  current;            // working entry

static QStack<QSharedPointer<Grouping>> s_autoGroupStack;

// double declared
static void yyunput (int c, char *buf_ptr);

static void initParser()
{
   s_sectionLabel.resize(0);
   s_sectionTitle.resize(0);
   s_memberGroupHeader.resize(0);

   s_insideParBlock = false;
   s_internalDocs   = Config::getBool("internal-docs");
}

static bool getDocSectionName(int s)
{
  switch(s) {
    case Entry::CATEGORYDOC_SEC:
    case Entry::CLASSDOC_SEC:
    case Entry::CONCEPTDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::MEMBERGRP_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
      return true;

    default:
      return false;
  }
}

static bool makeStructuralIndicator(Entry::Sections s)
{
   if (getDocSectionName(current->section)) {
      return true;

   } else {
      s_needNewEntry     = true;

      current->section   = s;
      current->startLine = yyLineNr;
      current->docLine   = yyLineNr;

      current->setData(EntryKey::File_Name, yyFileName);

      return false;
   }
}

static QString stripQuotes(const QString &s)
{
   QString name = s;

   if (name.isEmpty()) {
      return name;
   }

   if (name.at(0) == '"' && name.at(name.length() - 1) == '"') {
      name = name.mid(1, name.length() - 2);
   }

   return name;
}

static void addXRefItem(const QString &listName, const QString &itemTitle, const QString &listTitle, bool append)
{
   QSharedPointer<Entry> docEntry = current; // inBody && previous ? previous : current;

   if (listName.isEmpty()) {
      return;
   }

   auto refList = Doxy_Globals::xrefLists.find(listName);

   if (refList == Doxy_Globals::xrefLists.end()) {
      // new list
      Doxy_Globals::xrefLists.insert(listName, RefList(listName, listTitle, itemTitle));
      refList = Doxy_Globals::xrefLists.find(listName);
   }

   ListItemInfo *listItem = nullptr;

   for (auto &item : docEntry->m_specialLists) {
      listItem = &item;

      if (listItem->type == listName) {
         break;
      }
   }

   if (listItem && append) {
      // already found item of same type just before this one

      RefItem *item = refList->getRefItem(listItem->itemId);
      assert(item != 0);

      item->text += " <p>";
      item->text += s_outputXRef;

   } else {
      // new item

      int itemId  = refList->addRefItem();

      // if we have already an item from the same list type (e.g. a second @todo)
      // in the same Entry (i.e. lii!=0) then we reuse its link anchor.

      QString anchorLabel = QString("_%1%2").formatArg(listName).formatArg(itemId, 6, 10, QChar('0'));

      RefItem *item = refList->getRefItem(itemId);
      assert(item != 0);

      item->text       = s_outputXRef;
      item->listAnchor = anchorLabel;

      docEntry->addSpecialListItem(listName, itemId);

      QString cmdString = QString(" \\xrefitem %1 %2.").formatArg(listName).formatArg(itemId);

      if (inBody) {
         docEntry->appendData(EntryKey::Inbody_Docs, cmdString);
      } else {
         docEntry->appendData(EntryKey::Main_Docs,   cmdString);
      }

      QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorLabel);

      if (si) {
         if (si->lineNr != -1) {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s, line %d)",
                  csPrintable(anchorLabel), csPrintable(si->fileName), si->lineNr);

         } else {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s)",
                  csPrintable(anchorLabel), csPrintable(si->fileName));
         }

      } else {
         si = QMakeShared<SectionInfo>(listName, yyLineNr, anchorLabel, s_sectionTitle, SectionInfo::Anchor, s_sectionLevel);
         Doxy_Globals::sectionDict.insert(anchorLabel, si);
         docEntry->m_anchors.append(*si);
      }
   }

   s_outputXRef.clear();
}

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QString addFormula()
{
   QString formLabel;

   auto f = Doxy_Globals::formulaDict.find(formulaText);

   if (f == Doxy_Globals::formulaDict.end()) {
      Formula tmp = Formula(formulaText);

      Doxy_Globals::formulaList.append(tmp);
      Doxy_Globals::formulaDict.insert(formulaText, tmp);

      formLabel = QString("\\form#%1").formatArg(tmp.getId());

      Doxy_Globals::formulaNameDict.insert(formLabel, tmp);
      f = Doxy_Globals::formulaDict.find(formulaText);

   } else {
      formLabel = QString("\\form#%1").formatArg(f->getId());

   }

   for (int i = 0; i < formulaNewLines; ++i) {
      // add fake newlines to keep the warnings correctly aligned
      formLabel += "@_fakenl";
   }

   return formLabel;
}

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level >= 0 && level < 5) {
      return (SectionInfo::SectionType)level;
   }

   return SectionInfo::Anchor;
}

static void addSection()
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(s_sectionLabel);

   if (si != nullptr) {

      if (si->lineNr != -1) {

         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",
               csPrintable(s_sectionLabel), csPrintable(si->fileName), si->lineNr);

      } else {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s)",
               csPrintable(s_sectionLabel), csPrintable(si->fileName));
      }

   } else {
      // create a new section element
      s_sectionTitle += QString::fromUtf8(commentscanYYtext).trimmed();

      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, s_sectionLabel, s_sectionTitle,
               sectionLevelToType(s_sectionLevel), s_sectionLevel);

      // add section to this entry
      current->m_anchors.append(*si);

      // add section to the global dictionary
      Doxy_Globals::sectionDict.insert(s_sectionLabel, si);

      // for a section the si->fileName is the physical file name, this will be replaced with the
      // section name in doctokenizer processSection()
   }
}

static void addCite()
{
   QString text = QString::fromUtf8(commentscanYYtext);
   if (text.startsWith('"')) {
      text.chop(1);
      text = text.mid(1);
   }

   Doxy_Globals::citeDict.insert(text);
}

static void lineCount()
{
   // commentscan, parse_py

   for (const char *p = commentscanYYtext; *p; ++p) {
      yyLineNr += (*p == '\n');
   }
}

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QString &str)
{
   if (str.isEmpty()) {
      return;
   }

   QString::const_iterator iter       = str.constEnd() - 1;
   QString::const_iterator iter_start = str.constBegin();
   QString::const_iterator iter_end   = str.constEnd();

   QChar c;

   while (true) {
      c = *iter;
      QStringView tmp = QStringView(iter, iter_end);

      if (c == ' ' || c == '\t' || c == '\r') {
         // normal whitespace

      } else if (tmp.endsWith("\\internal_linebr")) {
         // special line break marker

         iter -= 15;

      } else if (c == '\n') {
         // normal newline

      } else {
         // non-whitespace, done
         break;
      }

      if (iter == str.constBegin()) {
         break;
      }

      --iter;
   }

   // update the string
   str = QString(iter_start, iter+1);
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
   bool xrefAppendToPrev = xrefAppendFlag;

   // determine append flag for the next item (i.e. the end of this item)
   xrefAppendFlag = ! inBody &&
                    inContext == OutputXRef && ctx == OutputXRef &&    // two consecutive xref items
                    newXRefKind == xrefKind &&                         // of the same kind
                    (xrefKind != XRef_Item ||
                    newXRefItemKey == xrefItemKey);                    // with the same key if \xrefitem

   if (inContext == OutputXRef) {

      // end of XRef section => add the item
      // See if we can append this new xref item to the previous one.
      // We know this at the start of the next item of the same
      // type and need to remember this until the end of that item.

    switch(xrefKind) {
         case XRef_Todo:
            addXRefItem("todo", theTranslator->trTodo(), theTranslator->trTodoList(), xrefAppendToPrev);
            break;

         case XRef_Test:
            addXRefItem("test", theTranslator->trTest(), theTranslator->trTestList(), xrefAppendToPrev);
            break;

         case XRef_Bug:
            addXRefItem("bug", theTranslator->trBug(), theTranslator->trBugList(), xrefAppendToPrev);
            break;

         case XRef_Deprecated:
            // ensure the current entry is marked
            current->m_traits.setTrait(Entry::Virtue::Deprecated);

            addXRefItem("deprecated", theTranslator->trDeprecated(), theTranslator->trDeprecatedList(), xrefAppendToPrev);
            break;

         case XRef_Item:
            // user defined list
            addXRefItem(xrefItemKey, xrefItemTitle, xrefListTitle, xrefAppendToPrev);
            break;

         case XRef_None:
            assert(0);
            break;
      }
   }

  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;

   if (inContext != OutputXRef && inBody) {
      inContext = OutputInbody;
   }

  switch(inContext) {
      case OutputMainDoc:
         if (oldContext != inContext) {

            QString tmpDocs = current->getData(EntryKey::Main_Docs);
            stripTrailingWhiteSpace(tmpDocs);
            current->setData(EntryKey::Main_Docs, tmpDocs);

            if (current->getData(EntryKey::MainDocs_File).isEmpty()) {
               current->setData(EntryKey::MainDocs_File, yyFileName);
               current->docLine = yyLineNr;
            }
         }

         s_docsEntry = current;
         s_docsEnum  = EntryKey::Main_Docs;

         break;

      case OutputBrief:
         if (oldContext != inContext) {
            if (current->getData(EntryKey::Brief_File).isEmpty()) {
               current->setData(EntryKey::Brief_File, yyFileName);
               current->briefLine = yyLineNr;
            }
         }

         if (current->getData(EntryKey::Brief_Docs).trimmed().isEmpty())  {
            // only want one brief description even if multiple are given
            s_docsEntry = current;
            s_docsEnum  = EntryKey::Brief_Docs;

         } else {

            if (! current->getData(EntryKey::Main_Docs).isEmpty()) {
               // when appending parts add a new line
               current->appendData(EntryKey::Main_Docs, "\n");
            }

            s_docsEntry  = current;
            s_docsEnum   = EntryKey::Main_Docs;

            inContext    = OutputMainDoc;             // need to switch to detailed docs
         }
         break;

      case OutputInbody:
         s_docsEntry = current;
         s_docsEnum  = EntryKey::Inbody_Docs;
         break;

      case OutputXRef:
         // indicates s_outputXRef should be used for the output string
         s_docsEntry = QSharedPointer<Entry>();

         break;
   }
}

static void addAnchor(const QString &anchorName)
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorName);

   if (si) {
      // anchor name already exists
      si->dupAnchor_cnt++;

   } else {
      // title is empty, level is zero
      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, anchorName, QString(), SectionInfo::Anchor, 0);
      si->dupAnchor_fName = yyFileName;

      Doxy_Globals::sectionDict.insert(anchorName, si);
      current->m_anchors.append(*si);
   }
}

// add a string to one of the three doc outputs
static void addToOutput(const QString &str)
{
   if (s_docsEntry == nullptr) {
      // indicates s_outputXRef should be used for the output string
      s_outputXRef += str;

   } else {
      s_docsEntry->appendData(s_docsEnum, str);
   }
}

static void addToOutput(QChar c)
{
   if (s_docsEntry == nullptr) {
      // indicates s_outputXRef should be used for the output string
      s_outputXRef += c;

   } else {
      s_docsEntry->appendData(s_docsEnum, c);
   }
}

static void unputString(const QString &str) {

   auto iter     = str.storage_rbegin();
   auto iter_end = str.storage_rend();

   while (iter != iter_end) {
      unput(*iter);

      ++iter;
   }
}

static void endBrief(bool isOutput = true)
{
   if (! current->getData(EntryKey::Brief_Docs).trimmed().isEmpty()) {
      // only go to the detailed description if we found a brief description and not just whitespace

      briefEndsAtDot = false;
      setOutput(OutputMainDoc);

      if (isOutput) {
         QString text = QString::fromUtf8(commentscanYYtext);
         addToOutput(text);
      }
   }
}

static void handleGuard(const QString &expr);

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
   s_bufferPosition = buf;
   s_prevPosition   = s_inputPosition;

   //
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

/* start command character */
#define YY_NO_UNISTD_H 1
/* comment parsing states */

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define ConceptDocArg1 9
#define XRefItemParam1 10
#define XRefItemParam2 11
#define XRefItemParam3 12
#define FileDocArg1 13
#define ParamArg1 14
#define EnumDocArg1 15
#define NameSpaceDocArg1 16
#define PackageDocArg1 17
#define GroupDocArg1 18
#define GroupDocArg2 19
#define SectionLabel 20
#define SectionTitle 21
#define SubpageLabel 22
#define SubpageTitle 23
#define FormatBlock 24
#define LineParam 25
#define GuardParam 26
#define GuardParamEnd 27
#define SkipGuardedSection 28
#define SkipInternal 29
#define NameParam 30
#define InGroupParam 31
#define FnParam 32
#define OverloadParam 33
#define InheritParam 34
#define ExtendsParam 35
#define ReadFormulaShort 36
#define ReadFormulaRound 37
#define ReadFormulaLong 38
#define AnchorLabel 39
#define HtmlComment 40
#define HtmlAnchor 41
#define SkipLang 42
#define CiteLabel 43
#define CopyDoc 44
#define GuardExpr 45
#define CdataSection 46

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
  /* What can happen while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxy\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1714 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1713 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      // mail address
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // quoted text
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      // directory (or chain of commands)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
{
      // HTML command ends a brief description
      setOutput(OutputMainDoc);

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
{
      // HTML command that ends a brief description
      if (current->m_srcLang == SrcLangExt_CSharp) {
         setOutput(OutputMainDoc);
      }

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      // start of a HTML style details description
      QString text = QString::fromUtf8(commentscanYYtext);

      ++s_htmlDetails;

      setOutput(OutputMainDoc);
      addToOutput(text);
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      // end of a HTML style details description
      QString text = QString::fromUtf8(commentscanYYtext);

      if (s_htmlDetails != 0) {
         --s_htmlDetails;
      }

      addToOutput(text);
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
   // potential start of HTML anchor
   QString text = QString::fromUtf8(commentscanYYtext);

   s_htmlAnchor   = text;
   s_isHtmlAnchor = false;
   BEGIN(HtmlAnchor);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
   // only labels that can be converted to doxypress anchor
   QString text = QString::fromUtf8(commentscanYYtext);
   s_htmlAnchor += text;

   QString tag(text);

   int pos  = tag.indexOf("=");
   QChar ch = tag[pos + 1];

   QString id;

   if (ch == '\'' || ch == '"')  {
      // valid start

     int end = tag.indexOf(ch, pos + 2);

     if (end != -1) {
         // found matching end, extract id
         id = tag.mid(pos + 2, end - pos - 2);
         addAnchor(id);
     }

   } else {
     id = tag.mid(pos + 1);
     addAnchor(id);
   }

   if (! id.isEmpty() && ! s_isHtmlAnchor) {
     // only use first analogous to what is in docparser
     addToOutput("@anchor ");
     addToOutput(id);
     addToOutput(" ");

     s_isHtmlAnchor = true;
   }
 }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
   QString text = QString::fromUtf8(commentscanYYtext);
   s_htmlAnchor += text;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
   QString text = QString::fromUtf8(commentscanYYtext);

   if (! s_isHtmlAnchor) {
     addToOutput(s_htmlAnchor);
     addToOutput(text);

   } else if (text.length() == 1) {
     // to keep <a></a> pairs, otherwise single </a> present
     addToOutput("<a>");

   }

   BEGIN(Comment);
 }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{
   // newline
   QString text = QString::fromUtf8(commentscanYYtext);

   s_htmlAnchor += text;

   if (text[0] == '\n')  {
      ++yyLineNr;
   }
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
   // catch-all for anything else
   QString text = QString::fromUtf8(commentscanYYtext);
   s_htmlAnchor += text;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputMainDoc);
      addToOutput(text);
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      // end of a brief or detailed description
      QString text = QString::fromUtf8(commentscanYYtext);

      setOutput(OutputMainDoc);
      addToOutput(text);
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      // start of a .NET XML style brief description
      QString text = QString::fromUtf8(commentscanYYtext);

      if (s_htmlDetails == 0) {
         setOutput(OutputBrief);
      }

      addToOutput(text);
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      // end of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text);

      if (s_htmlDetails == 0) {
         setOutput(OutputMainDoc);
      }
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      QString tag = QString::fromUtf8(commentscanYYtext);

      int s = tag.indexOf("id=");

      if (s != -1) {
         // command has id attribute
         QChar c = tag[s + 3];

         if (c == '\'' || c == '"') {
            // valid start
            int e = tag.indexOf(c,s + 4);

            if (e != -1) {
               // found matching end

               QString id = tag.mid(s + 4, e-s-4);   // extract id
               addAnchor(id);
            }
         }
      }

      addToOutput(tag);
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      insidePre = true;
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      insidePre = false;
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      // RCS tag which end a brief description
      setOutput(OutputMainDoc);
      REJECT;
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      BEGIN(HtmlComment);
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      BEGIN(CdataSection);
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      addToOutput(" \\endinternal ");

      if (! s_processInternalDocs) {
         warn(yyFileName, yyLineNr, "Found \\endinternal without matching \\internal");
      }

      s_processInternalDocs = false;
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      // preserve spacing around \\internal_linebr
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
      if (! current->m_entryName.isEmpty()) {
         current->m_traits.setTrait(Entry::Virtue::BypassUndocWarn);
      }
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      // simulate calling addToOutPut()
      QString text = QString::fromUtf8(commentscanYYtext);
      s_docsEntry->appendData(EntryKey::Main_Docs, text);
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      // simulate calling addToOutPut()
      QString text = QString::fromUtf8(commentscanYYtext);
      s_docsEntry->appendData(EntryKey::Main_Docs, text);
   }
	YY_BREAK
case 31:
case 32:
YY_RULE_SETUP
{
      // might be a valid command
      QString text = QString::fromUtf8(commentscanYYtext);

      /* handle `\f{` and `@f{` as special cases */
      int idx = text.indexOf('{');

      if ((idx > 1) && (text[idx - 1] == 'f') && (text[idx - 2] == '\\' || text[idx - 2] =='@')) {
         REJECT;
      }

      QStringView view = QStringView(text).trimmed();

      QString cmdName;
      QStringList optList;

      if (view.contains('{')) {
         // cmd { options }

         QString tmp = view.mid(1, 2).toLower();

         if (tmp == "f{")  {
            // handle "\f{" and "@f{" elsewhere
            REJECT;
         }

         static QRegularExpression regexp("[\\\\@](\\w+)\\s*{([^}]+)}");
         QRegularExpressionMatch match = regexp.match(view);

         // remove {CMD}
         cmdName = match.captured(1);
         optList = match.captured(2).split(',');

      } else {
         // no options
         cmdName = view.mid(1);

      }

      DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);

      if (cmdPtr) {
         // special action is required

         int i = 0;
         while (text[i] == ' ' || text[i] == '\t') {
            ++i;
         }

         s_spaceBeforeCmd = text.left(i);

         if (cmdPtr->endsBrief && ! (inContext == OutputXRef && cmdName == "parblock")) {
            briefEndsAtDot = false;

            // this command forces the end of brief description
            setOutput(OutputMainDoc);
         }

         if (cmdPtr->func && cmdPtr->func(cmdName, optList)) {
            // handler wants to stop and reenter this parser

            s_parseMore = true;

            s_inputPosition = s_prevPosition + (yy_bp - s_bufferPosition);
            yyterminate();

         } else if (cmdPtr->func == nullptr) {
            // command without handler is processed later by docparser
            addToOutput(text);
         }

      } else {
         // some command was found, just pass it on
         addToOutput(text);
      }
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      // escaped formula command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      // language switch command
      static const QString outputLanguage = Config::getEnum("output-language");

      QString text   = QString::fromUtf8(commentscanYYtext);
      QString langId = text.trimmed().mid(2);

      if (! langId.isEmpty() && outputLanguage.compare(langId, Qt::CaseInsensitive) != 0) {
         // enable language specific section
         BEGIN(SkipLang);
      }
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      // start of a formula with custom environment
      QString text = QString::fromUtf8(commentscanYYtext);

      // this command forces the end of brief description
      setOutput(OutputMainDoc);

      formulaText = "\\begin";
      formulaEnv = text.trimmed().mid(2);

      if (formulaEnv.at(formulaEnv.length() - 1) == '{') {
         // remove trailing open brace
         formulaEnv = formulaEnv.left(formulaEnv.length() - 1);
      }

      formulaText += formulaEnv;
      formulaNewLines = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      // start of a inline formula
      formulaText     = "$";
      formulaNewLines = 0;
      BEGIN(ReadFormulaShort);
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      // start of a inline formula
      formulaText     = QString();
      formulaNewLines = 0;

      BEGIN(ReadFormulaRound);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      // start of a block formula,

      // command forces the end of brief description
      setOutput(OutputMainDoc);

      formulaText      = "\\[";
      formulaNewLines  = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      // beginning of a group
      openGroup(current, yyFileName, yyLineNr);
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      // end of a group
      QString text = QString::fromUtf8(commentscanYYtext);

      closeGroup(current, yyFileName, yyLineNr, true);

      s_memberGroupHeader.clear();
      s_parseMore    = true;
      s_needNewEntry = true;

      s_inputPosition = s_prevPosition + (yy_bp - s_bufferPosition) + text.length();
      yyterminate();
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      // escaped character
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      // normal word
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // explicit end autolist: e.g "  ."
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 44:
case 45:
YY_RULE_SETUP
{
      // start of autolist
      if (! Doxy_Globals::markdownSupport) {
         REJECT;

      } else {

         if (inContext != OutputXRef) {
            briefEndsAtDot = false;
            setOutput(OutputMainDoc);
         }

         QString text = QString::fromUtf8(commentscanYYtext);
         addToOutput(text);
      }
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      // start of autolist
      if (inContext != OutputXRef) {
         briefEndsAtDot = false;
         setOutput(OutputMainDoc);
      }

      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // horizontal line (dashed)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&mdash;");
   }
	YY_BREAK
case 51:
YY_RULE_SETUP
{
      // ndash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&ndash;");
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      // numbered item
      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext != OutputXRef) {
         // this command forces the end of brief description
         setOutput(OutputMainDoc);
      }

      addToOutput(text);
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      // . at start or in the middle of a word, or ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // . with escaped space
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text[0]);
      addToOutput(text[2]);
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
{
      // . with some syntax like "e.g.," or "e.g.:"
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 56:
YY_RULE_SETUP
{
      // ellipsis with escaped space
      addToOutput("... ");
   }
	YY_BREAK
case 57:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // internal ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
      // at least one blank line or blank line command

      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext == OutputXRef) {
         // need to put the newlines after ending the XRef section

         if (! s_insideParBlock) {
            setOutput(OutputMainDoc);
         }

         for (int i = 0; i < text.length();  ) {
            if (text[i] == '\n') {
               addToOutput('\n');
               ++i;

            } else if (text.mid(i) == "\\internal_linebr")  {
               addToOutput("\\internal_linebr");
               i += 16;

            } else  {
               ++i;
            }
         }

      } else if (inContext != OutputBrief) {

         for (int i = 0; i< text.length(); ) {
            if (text[i] == '\n') {
               addToOutput('\n');
               i++;

            } else if (text.mid(i) == "\\internal_linebr")  {
               addToOutput("\\internal_linebr");
               i += 16;

            } else  {
               i++;

            }
         }

         setOutput(OutputMainDoc);

      } else {
          // inContext == OutputBrief, switch from brief to main docs
         endBrief(true);
      }

      lineCount();
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      // potential end of a JavaDoc style comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);

      if (briefEndsAtDot) {
         briefEndsAtDot = false;
         setOutput(OutputMainDoc);
      }
   }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{
      // newline
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput('\n');

      if (text[0] == '\n') {
         ++yyLineNr;
      }
   }
	YY_BREAK
case 61:
YY_RULE_SETUP
{
      // utf-8 code point
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
      // catch all for anything else
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 63:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         addToOutput('\n');
         ++yyLineNr;
      }
   }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
      // ignore unimportant characters
   }
	YY_BREAK
case 66:
YY_RULE_SETUP
{
      // ignore every else
   }
	YY_BREAK
case 67:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput('\n');

      if (text[0] == '\n') {
         ++yyLineNr;
      }
   }
	YY_BREAK
case 69:
YY_RULE_SETUP
{
      // the special XML characters for iwhich the CDATA section is especially used
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput('\\');
      addToOutput(text[0]);
   }
	YY_BREAK
case 70:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 71:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 72:
YY_RULE_SETUP
{
      // end of inline formula
      formulaText += "$";
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      // end of inline formula
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 74:
YY_RULE_SETUP
{
      // end of block formula
      formulaText += "\\]";
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      // end of custom env formula
      formulaText += "\\end";
      formulaText += formulaEnv;
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 76:
YY_RULE_SETUP
{
      // any non-special character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text;
   }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      formulaNewLines++;
      formulaText += text[0];
      yyLineNr++;
   }
	YY_BREAK
case 78:
YY_RULE_SETUP
{
      // any other character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text[0];
   }
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\enum");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text  = QString::fromUtf8(commentscanYYtext);

      lineCount();
      current->m_entryName = substitute(removeRedundantWhiteSpace(text),".", "::");

      BEGIN( Comment );
   }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\namespace");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 87:
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\package");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      lineCount();
      current->m_entryName = substitute(removeRedundantWhiteSpace(text),".","::");

      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      lineCount();
      current->m_entryName = substitute(text,".","::");

      if (current->section == Entry::PROTOCOLDOC_SEC) {
         current->m_entryName += "-p";
      }

      // prepend outer scope name
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(commentscanYYtext);

      lineCount();
      current->m_entryName = substitute(text,".","::");

      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\%s",  csPrintable(s_currentCommand));
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
      // second argument, include file
      QString text = QString::fromUtf8(commentscanYYtext);
      current->setData(EntryKey::Include_File, text);
      BEGIN( ClassDocArg3 );
   }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
      // third argument, include file name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->setData(EntryKey::Include_Name, text);
      BEGIN( Comment );
   }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of concept command ------------------- */
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{
      // first argument, concept name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text, ".", "::");

      BEGIN( Comment );
   }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\concept");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of {def,add,weak} group commands --------- */
case 109:
YY_RULE_SETUP
{
      // group name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;

      // lastDefGroup.groupname = text;
      // lastDefGroup.pri = current->groupingPri();
      // the .html stuff is for Qt compatibility

      if (current->m_entryName.endsWith(".html")) {
         current->m_entryName = current->m_entryName.left(current->m_entryName.length() - 5);
      }

      current->setData(EntryKey::Member_Type, "");
      BEGIN(GroupDocArg2);
   }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{
      // line continuation
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing group name after %s", csPrintable(current->groupDocCmd()) );
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{
      // line continuation
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
      // title (stored in type)
      QString text = QString::fromUtf8(commentscanYYtext);
      current->appendData(EntryKey::Member_Type, text.trimmed());
   }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (current->groupDocType == Entry::GROUPDOC_NORMAL && current->getData(EntryKey::Member_Type).isEmpty()) {
         // defgroup requires second argument
         warn(yyFileName, yyLineNr, "Missing title after \\defgroup %s", csPrintable(current->m_entryName) );
      }

      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
      // title (stored in type)
      QString text = QString::fromUtf8(commentscanYYtext);
      current->appendData(EntryKey::Member_Type, text.trimmed());
   }
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 117:
YY_RULE_SETUP
{
      // first argument, page name
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_entryName = stripQuotes(text);
      current->setData(EntryKey::Member_Args, QString());

      BEGIN( PageDocArg2 );
   }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\page");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
{
      // second argument; page title
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 122:
YY_RULE_SETUP
{

      QString text = QString::fromUtf8(commentscanYYtext);

      text = substitute(substitute(text, "@<","&lt;"),  "@>", "&gt;");
      text = substitute(substitute(text, "\\<","&lt;"), "\\>","&gt;");

      current->appendData(EntryKey::Member_Args, text);
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->appendData(EntryKey::Member_Args, text);
   }
	YY_BREAK
/* --------- handle arguments of the param command ------------ */
case 124:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text);
   }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
      addToOutput(" , ");
   }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         ++yyLineNr;
      }

      addToOutput(" ");
    }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{
      // no file name specified
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      // first argument; name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = stripQuotes(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 133:
YY_RULE_SETUP
{
      // first argument
      newXRefItemKey = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputXRef);

      BEGIN(XRefItemParam2);
   }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{
      // missing arguments
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing first argument of \\xrefitem");

      if (text[0] == '\n') {
         ++yyLineNr;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;

      BEGIN( Comment );
   }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
      // second argument
      QString text = QString::fromUtf8(commentscanYYtext);
      xrefItemTitle = stripQuotes(text);
      BEGIN(XRefItemParam3);
   }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing second argument of \\xrefitem");

      if (text[0] == '\n') {
         ++yyLineNr;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;

      BEGIN( Comment );
   }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      // third argument
      QString text = QString::fromUtf8(commentscanYYtext);

      xrefListTitle = stripQuotes(text);
      xrefKind = XRef_Item;

      BEGIN( Comment );
   }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr,"Missing third argument of \\xrefitem");

      if (text[0] == '\n') {
         ++yyLineNr;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;

      BEGIN( Comment );
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 145:
YY_RULE_SETUP
{
      // argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->setData(EntryKey::Related_Class, text);
      BEGIN( Comment );
   }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument of \\%s command", csPrintable(s_currentCommand));
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 152:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionLabel = text;

      addToOutput(text);
      s_sectionTitle.clear();

      BEGIN(SectionTitle);
   }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\section command has no label");

      if (text[0] == '\n') {
         ++yyLineNr;
      }

      addToOutput('\n');

      BEGIN( Comment );
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
{
      // invalid character for section label
      warn(yyFileName, yyLineNr, "Invalid or missing section label");
      BEGIN(Comment);
   }
	YY_BREAK
case 155:
/* rule 155 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);

      addSection();
      addToOutput(text);

      BEGIN(Comment);
   }
	YY_BREAK
case 156:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 16;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);

      addSection();
      addToOutput(text);
      BEGIN(Comment);
   }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
{
      // line continuation
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 158:
YY_RULE_SETUP
{
      // any character without special meaning
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text;
      addToOutput(text);
   }
	YY_BREAK
case 159:
YY_RULE_SETUP
{
      // unescape escaped command
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text.mid(1);
      addToOutput(text);
   }
	YY_BREAK
case 160:
YY_RULE_SETUP
{
      // unescape escaped character
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text[1];
      addToOutput(text);
   }
	YY_BREAK
case 161:
YY_RULE_SETUP
{
      // anything else
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text;
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 162:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      // we add subpage labels as a kind of "inheritance" relation to prevent
      // needing to add another list to the Entry class.

      current->extends.append(BaseInfo(text, Public, Normal));
      BEGIN(SubpageTitle);
   }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\subpage command has no label");

      if (text[0] == '\n') {
         ++yyLineNr;
      }

      addToOutput('\n');

      BEGIN( Comment );
   }
	YY_BREAK
case 164:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
{
      // no title, end command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 166:
YY_RULE_SETUP
{
      // add title, end of command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 167:
YY_RULE_SETUP
{
      // no title, end of command
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 168:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addAnchor(text);
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\anchor command has no label");

      if (text[0] == '\n') {
         ++yyLineNr;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 170:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing anchor label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 171:
/* rule 171 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // possible ends
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (text.mid(4) == s_blockName)  {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 172:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (s_blockName == "startuml")   {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 173:
YY_RULE_SETUP
{
      // some word
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text);
   }
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         ++yyLineNr;
      }

      addToOutput('\n');
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      // start of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! (s_blockName == "code" || s_blockName == "verbatim")) {
         ++s_commentCount;
      }
      addToOutput(text);
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
{
      // end of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (! (s_blockName == "code" || s_blockName == "verbatim")) {
         s_commentCount--;

         if (s_commentCount < 0) {
            warn(yyFileName, yyLineNr, "Found */ without matching /* while inside a \\%s block. "
               "Perhaps there is a missing \\end%s?\n", csPrintable(s_blockName), csPrintable(s_blockName));
         }
      }
   }
	YY_BREAK
case 177:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
{
      QString endTag = "end" + s_blockName;

      if (s_blockName == "startuml") {
         endTag = "enduml";
      }

      warn(yyFileName, yyLineNr, "Reached end of comment while inside a \\%s block, check for missing \\%s tag",
                 csPrintable(s_blockName), csPrintable(endTag) );

      yyterminate();
   }
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 178:
YY_RULE_SETUP
{
      s_guardExpr  = QString::fromUtf8(commentscanYYtext);
      s_roundCount = 1;

      BEGIN(GuardExpr);
   }
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
      lineCount();
   }
	YY_BREAK
case 180:
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
      ++s_roundCount;
   }
	YY_BREAK
case 181:
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
      --s_roundCount;

      if (s_roundCount == 0) {
         handleGuard(s_guardExpr);
      }
   }
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
{
      warn(yyFileName, yyLineNr, "Invalid expression '%s' for guard", csPrintable(s_guardExpr));
      unput(commentscanYYtext[0]);
      BEGIN(GuardParam);
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      // parameter of if/ifnot guard
      QString text = QString::fromUtf8(commentscanYYtext);
      handleGuard(text);
   }
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         ++yyLineNr;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
{
      // line continuation
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 186:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      lineCount();
      s_spaceBeforeIf.clear();

      BEGIN(Comment);
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
{
      if (! s_spaceBeforeIf.isEmpty()) {
         addToOutput(s_spaceBeforeIf);
      }

      s_spaceBeforeIf.clear();
      BEGIN(Comment);
   }
	YY_BREAK
case 189:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 190:
/* rule 190 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_guardType = Guard_IfNot;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 191:
/* rule 191 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_guardType = Guard_If;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 192:
/* rule 192 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found \\endif without matching start command");

       } else {
         GuardedSection s   = s_guards.pop();
         bool parentVisible = s.parentVisible();

         if (parentVisible) {
            s_isEnabledSection = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 193:
/* rule 193 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName, yyLineNr, "Found \\else without matching start command");

      } else {

         if (! s_isEnabledSection && s_guards.top().parentVisible()) {
            s_guards.pop();
            s_guards.push(GuardedSection(true,true));

            s_isEnabledSection = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 194:
/* rule 194 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found \\elseif without matching start command");

       } else {

         if (! s_isEnabledSection && s_guards.top().parentVisible()) {
            s_guardType = Guard_If;
            s_guards.pop();

            BEGIN( GuardParam );
         }
      }
   }
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 196:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 197:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
   }
	YY_BREAK
case 199:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 200:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 201:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount--;

      if (s_condCount < 0 )   {
         // handle conditional section around \internal

         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 202:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 0 ) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 203:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 1)  {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 204:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 2) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 205:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 3) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 206:
YY_RULE_SETUP
{
      BEGIN(Comment);
   }
	YY_BREAK
case 207:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 208:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle argument of name command ------- */
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN(Comment);
   }
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
      s_memberGroupHeader += ' ';
   }
	YY_BREAK
case 211:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_memberGroupHeader  += text[0];
      current->m_entryName += text[0];
   }
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 212:
YY_RULE_SETUP
{
      // group id
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_groups.append(Grouping(text, Grouping::GROUPING_INGROUP) );
      inGroupParamFound = true;
   }
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! inGroupParamFound) {
         warn(yyFileName,yyLineNr, "Missing group name for \\ingroup command");
      }

      unputString(text);

      BEGIN(Comment);
   }
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 215:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
{
      // end of fn declaration, pass to langParser as a "prototype"
      QString text = QString::fromUtf8(commentscanYYtext);

      if (s_braceCount == 0) {
         unputString(text);

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(s_functionProto);
         }

         BEGIN( Comment );
      }
   }
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      s_functionProto += ' ';
   }
	YY_BREAK
case 218:
YY_RULE_SETUP
{
      // non-special characters
      s_functionProto += QString::fromUtf8(commentscanYYtext);
   }
	YY_BREAK
case 219:
YY_RULE_SETUP
{
      s_functionProto += QString::fromUtf8(commentscanYYtext);
      ++s_braceCount;
   }
	YY_BREAK
case 220:
YY_RULE_SETUP
{
      s_functionProto += QString::fromUtf8(commentscanYYtext);
      --s_braceCount;
   }
	YY_BREAK
case 221:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
{
      // end of overload declaration, pass to langParser as a "prototype"
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      if (s_functionProto.trimmed().isEmpty()) {
         // plain overload command
         addToOutput(theTranslator->trOverloadText());
         addToOutput('\n');

      }  else   {
         // overload declaration
         makeStructuralIndicator(Entry::OVERLOADDOC_SEC);

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(s_functionProto);
         }
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      s_functionProto += ' ';
   }
	YY_BREAK
case 224:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 225:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text), Public, Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\inherit command has no argument");

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 227:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing name for \\inherit command");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 228:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text),Public,Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName,yyLineNr, "Missing argument for \\%s command", csPrintable(s_currentCommand));
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 230:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle language specific sections ------- */
case 231:
YY_RULE_SETUP
{
      // language switch
      QString text = QString::fromUtf8(commentscanYYtext);
      QString langId = text.mid(2);

      if (langId.isEmpty() || Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) == 0) {
         // enable language specific section
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 232:
YY_RULE_SETUP
{
      /* any character not a *, @, backslash or new line */
   }
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
{
      // new line in verbatim block
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         ++yyLineNr;
      }
   }
	YY_BREAK
case 234:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 235:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addCite();
      addToOutput(text);
      BEGIN(Comment);
   }
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\cite command has no label");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 237:
YY_RULE_SETUP
{
      // invalid character for cite label
      warn(yyFileName, yyLineNr, "Invalid or missing cite label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
{
      setOutput(OutputMainDoc);
      addToOutput(" \\ilinebr\\ilinebr\\copydetails ");
      addToOutput(s_copyDocArg);

      addToOutput("\n");

      BEGIN(Comment);
   }
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n') {
         ++yyLineNr;
      }

      if (s_braceCount == 0) {

         setOutput(OutputMainDoc);
         addToOutput(" \\ilinebr\\ilinebr\\copydetails ");
         addToOutput(s_copyDocArg);

         addToOutput("\n");

         BEGIN(Comment);
      }
   }
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
{
      // line continuation
      ++yyLineNr;
   }
	YY_BREAK
case 240:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      s_copyDocArg += text;
      addToOutput(text);
   }
	YY_BREAK
case 241:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      s_copyDocArg += text;
      addToOutput(text);

      ++s_braceCount;
   }
	YY_BREAK
case 242:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      s_copyDocArg += text;
      addToOutput(text);

      --s_braceCount;
   }
	YY_BREAK
case 243:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      s_copyDocArg += text;
      addToOutput(text);
   }
	YY_BREAK
case 244:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(ConceptDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(ParamArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaRound):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(HtmlAnchor):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
			case YY_STATE_EOF(CdataSection):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1714 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1714 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1713);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static bool handleBrief(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   setOutput(OutputBrief);
   return false;
}

static bool handleProperty(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   s_functionProto.clear();
   s_braceCount = 0;
   BEGIN(FnParam);

   current->mtype = MethodType::Property;

   return stop;
}

static bool handleFn(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   s_functionProto.clear();
   s_braceCount = 0;
   BEGIN(FnParam);

   return stop;
}

static bool handleDef(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::DEFINEDOC_SEC);
   s_functionProto.clear();
   BEGIN(FnParam);

   return stop;
}

static bool handleOverload(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   s_functionProto.clear();
   BEGIN(OverloadParam);

   return false;
}

static bool handleEnum(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::ENUMDOC_SEC);
   BEGIN(EnumDocArg1);

   return stop;
}

static bool handleDefGroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_NORMAL;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleAddToGroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_ADD;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleWeakGroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_WEAK;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleNamespace(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
   BEGIN( NameSpaceDocArg1 );

   return stop;
}

static bool handlePackage(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
   BEGIN( PackageDocArg1 );

   return stop;
}

static bool handleClass(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop = makeStructuralIndicator(Entry::CLASSDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleConcept(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop = makeStructuralIndicator(Entry::CONCEPTDOC_SEC);
   s_currentCommand = str;
   BEGIN( ConceptDocArg1 );

   return stop;
}

static bool handleHeaderFile(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   BEGIN( ClassDocArg2 );
   return false;
}

static bool handleProtocol(const QString &str, const QStringList &list)
{
   (void) list;

   // Obj-C protocol
   bool stop = makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleCategory(const QString &str, const QStringList &list)
{
   (void) list;

   // Obj-C category
   bool stop = makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
   s_currentCommand = str;
   BEGIN( CategoryDocArg1 );

   return stop;
}

static bool handleUnion(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop = makeStructuralIndicator(Entry::UNIONDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleStruct(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleInterface(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop = makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleIdlException(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop = makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handlePage(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::PAGEDOC_SEC);
   BEGIN( PageDocArg1 );

   return stop;
}

static bool handleMainpage(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);

   if (stop) {
      current->m_entryName = QString();
   } else {
      current->m_entryName = "mainpage";
   }

   BEGIN( PageDocArg2 );

   return stop;
}

static bool handleFile(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::FILEDOC_SEC);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );

   return stop;
}

static bool handleParam(const QString &str, const QStringList &list)
{
  // process param and retval arguments to escape leading underscores
  // in case of markdown processing

   (void) str;
   (void) list;

   addToOutput("@param ");
   BEGIN( ParamArg1 );

   return false;
}

static bool handleRetval(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   addToOutput("@retval ");
   BEGIN( ParamArg1 );

   return false;
}

static bool handleDir(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::DIRDOC_SEC);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );

   return stop;
}

static bool handleExample(const QString &str, const QStringList &list)
{
   (void) str;

   Entry::Sections section = Entry::EXAMPLE_SEC;

   for (auto item : list) {
      QString opt = item.trimmed().toLower();

      if (opt == "lineno") {
         section = Entry::EXAMPLE_LINENO_SEC;

      } else {
         warn(yyFileName, yyLineNr, "Unsupported option '%s' for command '\\%s'", csPrintable(opt), csPrintable(str));
      }
   }

   bool stop = makeStructuralIndicator(section);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );

   return stop;
}

static bool handleDetails(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (inContext != OutputBrief) {
      // treat @details outside brief description as a new paragraph
      addToOutput("\\internal_linebr\\internal_linebr");
   }

   setOutput(OutputMainDoc);

   return false;
}

static bool handleName(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MEMBERGRP_SEC);

   if (! stop) {
      s_memberGroupHeader.resize(0);
      BEGIN( NameParam );

      if (s_memberGroupId != DOX_NOGROUP) {
         // end of previous member group
         closeGroup(current, yyFileName, yyLineNr, true, true);
       }
   }

   return stop;
}

static bool handleTodo(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Todo;
   setOutput(OutputXRef);
   xrefKind = XRef_Todo;

   return false;
}

static bool handleTest(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Test;
   setOutput(OutputXRef);
   xrefKind = XRef_Test;

   return false;
}

static bool handleBug(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Bug;
   setOutput(OutputXRef);
   xrefKind = XRef_Bug;

   return false;
}

static bool handleDeprecated(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Deprecated;
   setOutput(OutputXRef);
   xrefKind = XRef_Deprecated;

   return false;
}

static bool handleXRefItem(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Item;
   BEGIN(XRefItemParam1);

   return false;
}

static bool handleParBlock(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_insideParBlock)   {
      warn(yyFileName,yyLineNr, "Found \\parblock command while already in a parblock");
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addToOutput("@parblock ");
   s_insideParBlock = true;

   return false;
}

static bool handleEndParBlock(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (! s_insideParBlock) {
      warn(yyFileName,yyLineNr, "Found \\endparblock command without matching \\parblock");
   }

   addToOutput("@endparblock");
   setOutput(OutputMainDoc);    // to end a parblock inside a xrefitem like context
   s_insideParBlock = false;

   return false;
}

static bool handleRelated(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName,yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = Simple;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleRelatedAlso(const QString &str, const QStringList &list)
{

   (void) list;

   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName, yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = Duplicate;
   s_currentCommand = str;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleMemberOf(const QString &str, const QStringList &list)
{
   (void) list;

   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName, yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = MemberOf;
   s_currentCommand = str;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleRefItem(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   addToOutput("@refitem ");
   BEGIN(LineParam);

   return false;
}

static bool handleSection(const QString &str, const QStringList &list)
{
   (void) list;

   setOutput(OutputMainDoc);
   addToOutput("@" + str + " ");

   BEGIN(SectionLabel);

   if (str == "section") {
      s_sectionLevel = 1;

   } else if (str == "subsection") {
      s_sectionLevel = 2;

   } else if (str == "subsubsection") {
      s_sectionLevel = 3;

   } else if (str == "paragraph") {
      s_sectionLevel = 4;

   }

   return false;
}

static bool handleSubpage(const QString &str, const QStringList &list)
{
   (void) list;

   if (current->section != Entry::EMPTY_SEC && current->section != Entry::PAGEDOC_SEC &&
         current->section != Entry::MAINPAGEDOC_SEC) {

      warn(yyFileName, yyLineNr, "Found \\subpage command in a comment block that is not marked as a page");
  }

  if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.clear();
  }

   addToOutput("@" + str + " ");
   BEGIN(SubpageLabel);

   return false;
}

static bool handleAnchor(const QString &str, const QStringList &list)
{
   (void) list;

   addToOutput("@" + str + " ");
   BEGIN(AnchorLabel);

   return false;
}

static bool handleCite(const QString &str, const QStringList &list)
{
   (void) list;

   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("@" + str + " ");
   BEGIN(CiteLabel);

   return false;
}

static bool handleFormatBlock(const QString &str, const QStringList &list)
{
   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.clear();
   }
   if (list.isEmpty()) {
      addToOutput("@" + str + " ");

   } else {
      addToOutput("@" + str + "{" + list.join(",") + "} ");
   }

   s_blockName    = str;
   s_commentCount = 0;
   BEGIN(FormatBlock);

   return false;
}

static bool handleAddIndex(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   addToOutput("@addindex ");

   BEGIN(LineParam);

   return false;
}

static bool handleIf(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   s_isEnabledSection = false;
   s_guardType        = Guard_If;
   s_spaceBeforeIf    = s_spaceBeforeCmd;
   BEGIN(GuardParam);

   return false;
}

static bool handleIfNot(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   s_isEnabledSection = false;
   s_guardType        = Guard_IfNot;
   s_spaceBeforeIf    = s_spaceBeforeCmd;

   BEGIN(GuardParam);

   return false;
}

static bool handleElseIf(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      s_guardType     = s_isEnabledSection ? Guard_Skip : Guard_If;
      s_spaceBeforeIf = s_spaceBeforeCmd;
      BEGIN(GuardParam);
   }

   return false;
}

static bool handleElse(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      s_spaceBeforeIf = s_spaceBeforeCmd;
      BEGIN( SkipGuardedSection );
   }

   return false;
}

static bool handleEndIf(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_guards.isEmpty())   {
      warn(yyFileName,yyLineNr, "Found \\endif without matching start command");

   } else {
      s_guards.pop();
   }

   s_isEnabledSection = false;
   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   BEGIN( GuardParamEnd );

   return false;
}

static bool handleIngroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   inGroupParamFound = false;
   BEGIN( InGroupParam );

   return false;
}

static bool handleNoSubGrouping(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->subGrouping = false;

   return false;
}

static bool handleShowInitializer(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->initLines = 100000;  // ON
   return false;
}

static bool handleHideInitializer(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->initLines = 0;

   return false;
}

static bool handleCallgraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callGraph = true;

   return false;
}

static bool handleHideCallgraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callGraph = false;
   return false;
}

static bool handleCallergraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callerGraph = true;
   return false;
}

static bool handleHideCallergraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callerGraph = false;

   return false;
}

static bool handleReferencedByRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencedByRelation = true;

   return false;
}

static bool handleHideReferencedByRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencedByRelation = false;

   return false;
}

static bool handleReferencesRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencesRelation = true;

   return false;
}

static bool handleHideReferencesRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencesRelation = false;

   return false;
}

static bool handleInternal(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_internalDocs) {
      addToOutput(" \\internal ");
      s_processInternalDocs = true;

   } else {
      // make sure some whitespace before an \internal command
      // is not treated as "documentation"

      if (current->getData(EntryKey::Main_Docs).trimmed().isEmpty()) {
         current->setData(EntryKey::Main_Docs, QString());
      }

      s_condCount = 0;
      BEGIN( SkipInternal );
  }

  return false;
}

static bool handleStatic(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   endBrief();
   current->stat = true;

   return false;
}

static bool handlePure(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   endBrief();
   current->virt = Specifier::Pure;

   return false;
}

static bool handlePrivate(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = Protection::Private;

   return false;
}

static bool handlePrivateSection(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = (s_protection = Protection::Private);

   return false;
}

static bool handleProtected(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = Protection::Protected;

   return false;
}

static bool handleProtectedSection(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = (s_protection = Protection::Protected);

   return false;
}

static bool handlePublic(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = Protection::Public;

   return false;
}

static bool handlePublicSection(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = (s_protection = Protection::Public);
   return false;
}

static bool handleToc(const QString &str, const QStringList &list)
{
   (void) str;

   if (current->section == Entry::PAGEDOC_SEC || current->section == Entry::MAINPAGEDOC_SEC) {

      for (auto &item : list) {
         QString option = item.trimmed().toLower();

         int level = 5;
         int i     = option.find(':');

         if (i > 0) {
            // found something like "html:4"
            bool ok = false;
            level = option.mid(i + 1).toInteger<int>(&ok);

            if (ok) {
               level  = (level >  5 ? 5 : level);
               level  = (level <= 0 ? 5 : level);
               option = option.left(i).trimmed();

            } else {
               warn(yyFileName, yyLineNr, "Unknown option level specified with \\tableofcontents: `%s'", csPrintable(option));
               option = "";
            }
         }

         if (! option.isEmpty()) {
            if (option == "html") {
               current->localToc.enableHtml(level);

            } else if (option == "latex") {
               current->localToc.enableLatex(level);

            } else if (option == "xml") {
               current->localToc.enableXml(level);

            } else if (option == "docbook") {
               current->localToc.enableDocbook(level);

            } else {
               warn(yyFileName, yyLineNr, "Unknown option specified with \\tableofcontents: `%s'", csPrintable(option));
            }
         }
      }

      if (current->localToc.nothingEnabled()) {
         // for backward compatibility
         current->localToc.enableHtml(5);
         current->localToc.enableXml(5);
      }
   }

   return false;
}

static bool handleInherit(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   BEGIN(InheritParam);

   return false;
}

static bool handleExtends(const QString &str, const QStringList &list)
{
   (void) list;
   s_currentCommand = str;
   BEGIN(ExtendsParam);

   return false;
}

static bool handleCopyBrief(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (current->getData(EntryKey::Brief_Docs).isEmpty() && current->getData(EntryKey::Main_Docs).isEmpty()) {

      // if we do not have a brief or detailed description yet,
      // then the @copybrief should end up in the brief description,
      // otherwise it will be copied inline

      setOutput(OutputBrief);
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copybrief ");
   return false;
}

static bool handleCopyDetails(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   setOutput(OutputMainDoc);

   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copydetails ");
   return false;
}

static bool handleCopyDoc(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   setOutput(OutputBrief);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copybrief ");
   s_copyDocArg.resize(0);
   BEGIN(CopyDoc);

   return false;
}

static void checkFormula()
{
   if (YY_START == ReadFormulaShort || YY_START == ReadFormulaRound  || YY_START == ReadFormulaLong) {
      warn(yyFileName, yyLineNr, "End of comment block while inside formula.");
   }
}

// main entry point
bool parseCommentBlock(ParserInterface *parser, QSharedPointer<Entry> curEntry, const QString &comment,
                  const QString &fileName, int &lineNr, bool isBrief, bool isAutoBrief, bool isInbody,
                  Protection &r_protection, int &r_position, bool &r_newEntryNeeded )
{
   initParser();
   s_guards.clear();

   if (comment.isEmpty()) {
      // avoid empty strings
      return false;
   }

   if (Doxy_Globals::markdownSupport) {

      s_inputString = processMarkdown(fileName, lineNr, QSharedPointer<Entry>(), comment);

      QStringView tmp(s_inputString);

      while (tmp.startsWith(" ")) {
         tmp = tmp.mid(1);
      }

      while (tmp.startsWith("\n")) {
         tmp = tmp.mid(1);
      }

      if (tmp.startsWith("<br>")) {
         tmp = tmp.mid(4);
      }

      s_inputString = QString(tmp);

   } else {
      s_inputString  = comment;
   }

   s_inputString.append(" ");

   yyFileName       = fileName;
   yyLineNr         = lineNr;
   langParser       = parser;
   current          = curEntry;
   current->docLine = (lineNr > 1 ? lineNr : 1);

   briefEndsAtDot   = isAutoBrief;
   inBody           = isInbody;
   s_protection     = r_protection;
   s_inputPosition  = r_position;
   s_outputXRef     = QString();
   xrefKind         = XRef_None;

   xrefAppendFlag   = false;
   insidePre        = false;
   s_needNewEntry   = false;
   s_parseMore      = false;

   if (! isBrief && ! isAutoBrief && ! current->getData(EntryKey::Main_Docs).isEmpty()) {
      // add newline separator between detailed comment blocks
      current->appendData(EntryKey::Main_Docs, "\n");
   }

   if (isBrief || isAutoBrief) {
      setOutput(OutputBrief);

   } else {
      setOutput(OutputMainDoc);
   }

   s_condCount    = 0;
   s_sectionLevel = 0;

   s_spaceBeforeCmd.clear();
   s_spaceBeforeIf.clear();

   if (! current->getData(EntryKey::Main_Docs).isEmpty()) {
      // separate detailed doc fragments
      current->appendData(EntryKey::Main_Docs, "\n\n");
   }

   if (! current->getData(EntryKey::Inbody_Docs).isEmpty() && isInbody) {
      // separate in body fragments
      current->appendData(EntryKey::Inbody_Docs, "\n\n");
   }

   commentscanYYrestart(commentscanYYin);
   BEGIN(Comment);
   commentscanYYlex();

   setOutput(OutputMainDoc);

   if (YY_START == OverloadParam) {
      // comment ended with \overload
      addToOutput(theTranslator->trOverloadText());
   }

   if (! s_guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Documentation block ended in the middle of a conditional section");
   }

   if (s_insideParBlock) {
      warn(yyFileName, yyLineNr, "Documentation block ended while inside a \\parblock. Missing \\endparblock");
   }

   // removes blank lines from the detailed docs
   current->setData(EntryKey::Main_Docs, trimEmptyLines(current->getData(EntryKey::Main_Docs), current->docLine));

   if (current->section == Entry::FILEDOC_SEC && current->getData(EntryKey::Main_Docs).isEmpty()) {
      // to allow a comment block with just a @file command
      current->setData(EntryKey::Main_Docs, "\n\n");
   }

   if (current->section == Entry::MEMBERGRP_SEC && s_memberGroupId == DOX_NOGROUP) {
      // @name section but no group started yet
      openGroup(current, yyFileName, yyLineNr, true);
   }

   checkFormula();
   r_protection = s_protection;

   groupAddDocs(curEntry);
   r_newEntryNeeded = s_needNewEntry;

   if (s_parseMore && r_position == s_inputPosition) {
      // did not proceed during this call, do not continue or there will be an infinate loop
      s_parseMore = false;
   }

   if (s_parseMore) {
      r_position = s_inputPosition;
   } else {
      r_position = 0;
   }

   lineNr = yyLineNr;

   return s_parseMore;
}

void groupEnterFile(const QString &fileName, int)
{
   s_openCount = 0;
   s_autoGroupStack.clear();
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupDocs.clear();
   s_memberGroupRelates.clear();
   s_compoundName = fileName;
}

void groupLeaveFile(const QString &fileName, int line)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();

   if (! s_autoGroupStack.isEmpty()) {
      warn(fileName, line, "End of file while inside a group\n");

   } else if (s_openCount > 0)  {
      warn(fileName, line, "End of file with unbalanced group command\n");
   }
}

void groupEnterCompound(const QString &fileName, int line, const QString &name)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      warn(fileName, line, "Try to put compound %s inside a member group\n", csPrintable(name));
   }

   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();
   s_compoundName = name;

   int i = s_compoundName.indexOf('(');

   if (i != -1) {
      // strip category (Obj-C)
      s_compoundName=s_compoundName.left(i);
   }

   if (s_compoundName.isEmpty()) {
      s_compoundName=fileName;
   }
}

void groupLeaveCompound(const QString &, int, const QString &)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);
   s_compoundName.resize(0);
}

static int findExistingGroup(int &groupId, const QSharedPointer<MemberGroupInfo> info)
{
   for (auto di = Doxy_Globals::memGrpInfoDict.begin(); di != Doxy_Globals::memGrpInfoDict.end(); ++di) {

      auto mi = *di;

      if (s_compoundName == mi->compoundName && ! mi->header.isEmpty() &&
               mi->header.compare(info->header, Qt::CaseInsensitive) == 0) {

         // same file or scope, not a nameless group, same header name
         return (int)di.key();    // put the item in this group
      }
   }

   groupId++; // start new group
   return groupId;
}

void openGroup(QSharedPointer<Entry> e, const QString &, int, bool forceOpen)
{
   if (! forceOpen) {
      ++s_openCount;
   }

   if (e->section == Entry::GROUPDOC_SEC) {
      // auto group
      s_autoGroupStack.push( QMakeShared<Grouping>(e->m_entryName, e->groupingPri()) );

   } else {
      // start of a member group

      if (s_memberGroupId == DOX_NOGROUP) {
         // no group started yet
         static int curGroupId = 0;

         QSharedPointer<MemberGroupInfo> info = QMakeShared<MemberGroupInfo>();

         info->header = s_memberGroupHeader.trimmed();
         info->compoundName = s_compoundName;
         s_memberGroupId = findExistingGroup(curGroupId, info);

         Doxy_Globals::memGrpInfoDict.insert(s_memberGroupId, info);

         s_memberGroupRelates = e->getData(EntryKey::Related_Class);
         e->mGrpId = s_memberGroupId;
      }
   }
}

void closeGroup(QSharedPointer<Entry> e, const QString &fileName, int line, bool isInline, bool forceClose)
{
   if (! forceClose) {

      if (s_openCount < 1) {
         warn(fileName, line, "Unbalanced Group Command");
      } else {
         --s_openCount;
      }
   }

   if (s_memberGroupId != DOX_NOGROUP) {
      // end of member group

      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         // known group
         info->doc     = s_memberGroupDocs;
         info->docFile = fileName;
         info->docLine = line;
      }

      s_memberGroupId = DOX_NOGROUP;
      s_memberGroupRelates.resize(0);
      s_memberGroupDocs.resize(0);

      if (! isInline) {
         e->mGrpId = DOX_NOGROUP;
      }

   } else if (! s_autoGroupStack.isEmpty()) {
      // end of auto group
      QSharedPointer<Grouping> grp = s_autoGroupStack.pop();

      if (! isInline && ! e->m_groups.empty()) {
         e->m_groups.removeLast();
      }

      if (! isInline) {
         initGroupInfo(e);
      }
   }
}

void initGroupInfo(QSharedPointer<Entry> e)
{
   e->mGrpId  = s_memberGroupId;
   e->setData(EntryKey::Related_Class, s_memberGroupRelates);

   if (! s_autoGroupStack.isEmpty()) {
      e->m_groups.append(*s_autoGroupStack.top());
   }
}

static void groupAddDocs(QSharedPointer<Entry> e)
{
   if (e->section == Entry::MEMBERGRP_SEC) {
      s_memberGroupDocs = e->getData(EntryKey::Brief_Docs).trimmed();

      e->setData(EntryKey::Main_Docs, trimEmptyLines(e->getData(EntryKey::Main_Docs), e->docLine));

      if (! s_memberGroupDocs.isEmpty() && ! e->getData(EntryKey::Main_Docs).isEmpty()) {
         s_memberGroupDocs+="\n\n";
      }

      s_memberGroupDocs += e->getData(EntryKey::Main_Docs);
      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         info->doc      = s_memberGroupDocs;
         info->docFile  = e->getData(EntryKey::MainDocs_File);
         info->docLine  = e->docLine;
         info->setRefItems(e->m_specialLists);
      }

      e->setData(EntryKey::Brief_Docs, "");
      e->setData(EntryKey::Main_Docs,  "");
   }
}

static void handleGuard(const QString &expr)
{
   CondParser prs;
   bool sectionEnabled = prs.parse(yyFileName, yyLineNr, expr.trimmed());
   bool parentEnabled  = true;

   if (! s_guards.isEmpty()) {
      parentEnabled = s_guards.top().isEnabled();
   }

   if (parentEnabled) {
      if ( (sectionEnabled && s_guardType == Guard_If) || (! sectionEnabled && s_guardType == Guard_IfNot)) {
         // section is visible
         s_guards.push(GuardedSection(true, true));
         s_isEnabledSection = true;
         BEGIN( GuardParamEnd );

      } else {
         // section is invisible
         if (s_guardType != Guard_Skip) {
            s_guards.push(GuardedSection(false, true));
         }

         BEGIN( SkipGuardedSection );
      }

   } else {
      // invisible because of parent
      s_guards.push(GuardedSection(false, false));
      BEGIN( SkipGuardedSection );
   }
}

