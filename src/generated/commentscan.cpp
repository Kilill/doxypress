/************************************************************************
*
* Copyright (C) 2014-2020 Barbara Geller & Ansel Sermersheim
* Copyright (C) 1997-2014 by Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 227
#define YY_END_OF_BUFFER 228
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[914] =
    {   0,
       89,   89,  145,  145,  159,  159,  174,  174,  218,  218,
      165,  165,  228,  227,   51,  227,   51,  227,   49,  227,
       51,  227,   51,  227,   51,  227,   51,  227,   48,   51,
      227,   51,  227,   51,  227,   31,   51,  227,   51,  227,
       51,  227,   51,  227,   51,  227,   51,  227,   51,  227,
       51,  227,   48,   51,  227,   51,  227,   51,  227,  108,
      227,  107,  227,  108,  227,  105,  108,  227,  108,  227,
      108,  227,  111,  227,  109,  227,  111,  227,  111,  227,
      135,  227,  134,  227,  135,  227,  132,  135,  227,  135,
      227,   84,  227,   84,  227,   83,  227,   84,  227,   84,

      227,   84,  227,   80,   84,  227,   84,  227,   84,  227,
       88,  227,   85,  227,   88,  227,   86,   88,  227,   88,
      227,   88,  227,   88,  227,   92,  227,   91,  227,   89,
       92,  227,   89,   92,  227,   92,  227,   89,   92,  227,
       89,   92,  227,   92,  227,   84,  227,   83,  227,   84,
      227,   84,  227,   84,  227,   84,  227,   84,  227,   96,
      227,   96,  227,   95,  227,   96,  227,   96,  227,   96,
      227,   93,   96,  227,   96,  227,   96,  227,  123,  227,
      122,  227,  120,  123,  227,  123,  227,  127,  227,  126,
      227,  127,  227,  127,  227,  131,  227,  130,  227,  131,

      227,  131,  227,  119,  227,  116,  227,  119,  227,  117,
      119,  227,  119,  227,  119,  227,  115,  227,  115,  227,
      113,  115,  227,  114,  115,  227,16496,   70,  227,   69,
      227,   70,  227,   67,   70,  227,   70,  227,   74,  227,
       74,  227,   73,  227,   74,  227,   74,  227,   74,  227,
       71,   74,  227,   74,  227,   74,  227,   78,  227,   77,
      227,   78,  227,   75,   78,  227,   78,  227,  100,  227,
       99,  227,   97,  100,  227,  100,  227,  102,  104,  227,
      103,  227,  104,  227,  141,  227,  140,  227,  139,  141,
      227,  141,  227,  145,  148,  227,  142,  227,  145,  148,

      227,  148,  227,  148,  227,  150,  227,  149,  227,  227,
      153,  227,  153,  227,  151,  227,  153,  227,  153,  227,
      159,  163,  227,  160,  227,  163,  227,  163,  227,  163,
      227,  163,  227,  163,  227,  138,  227,  136,  227,  138,
      227,  172,  227,  172,  227,  170,  227,  164,  172,  227,
      169,  172,  227,  172,  227,  175,  227,  174,  175,  227,
      173,  227,  175,  227,  182,  183,  227,  181,  227,  183,
      227,  183,  227,  183,  227,  193,  194,  227,  184,  227,
      194,  227,  194,  227,  194,  227,  197,  227,  195,  227,
      197,  227,  201,  227,  199,  227,  198,  201,  227,  201,

      227,  204,  207,  227,  202,  227,  205,  207,  227,  206,
      207,  227,  207,  227,  207,  227,  210,  227,  208,  227,
      210,  227,  213,  227,  212,  227,  213,  227,  211,  213,
      227,  213,  227,  216,  227,  215,  227,  216,  227,  214,
      216,  227,  216,  227,   64,   66,  227,   65,  227,   66,
      227,   66,  227,  156,  227,  155,  227,  154,  156,  227,
      156,  227,   54,   55,  227,   53,  227,   55,  227,   55,
      227,  218,  220,  227,  219,  227,  220,  227,  220,  227,
      220,  227,  223,  227,  222,  227,  223,  227,  221,  223,
      227,  223,  227,  225,  226,  227,  224,  227,  226,  227,

      165,  227,  165,  168,  227,  166,  227,  167,  227,   59,
       60,  227,   57,  227,   58,   60,  227,   60,  227,   60,
      227,   47,    4,   40,   42,   44,   42,   30,   30,   22,
       22,   22,   22,   28,   29,   24,   30,   31,   22,   22,
       22,   22,   22,   50,   34,   35,   40,   32,  105,  105,
      106,  105,  110,  132,  132,  133,   80,   80,   82,   80,
       86,   86,   87,   86,   89,   89,   89,   89,   89,   89,
       90,   89,   93,   93,   94,   93,  120,  121,  124,  125,
      129,  128,  129,  117,  117,  118,  117,  114,16496, 8304,
      114,16496,   67,   67,   67,   68,   71,   71,   72,   71,

       75,   75,   76,   97,   98,  102,  101,  139,  145,  142,
      145,  147,  147,  144,  149,  152,  159,  162,  161,  137,
      164,  169,  171,  174,  173,  182,  193,  196,  198,  200,
      204,  203,  209,  211,  211,  214,  214,   64,  154,   54,
      218,  217,  221,  225,  165,   59,   30,   22,   41,   39,
       46,   42,   46,   46,   46,   42,   46,   46,   43,    6,
       38,    1,    1,    2,   22,   22,   26,   27,   22,   24,
        5,   22,   22,   22,   36,   39,   33,  105,  105,   80,
       86,   86,   89,   89,   89,   93,  117,  117,   67,   67,
       67,   67,   71,   75,  146,   61,   62,   63,   52,  217,

      221,  221,   56,   22,   46,   46,   16,   37,    1,   23,
        2,   21,   22,   22,   22,   22,   22,  105,   79,   86,
       89,   89,   81,  117,   67,   67,   67,   75,  146,  177,
      185,   52,  221,   22,   15,   45,    6,   13,   21,   22,
       25,   21,   25,   22,   22,   22,   22,  105,   86,   89,
      117,   22,    3,   14,    7,   22,   25,   22,   22,   22,
       22,  105,   86,   89,  117,   97,  179,  187,   22,   22,
       22,   22,   22,   22,  105,   86,   89,  117,  158,  178,
      176,  186,   22,   22,   22,   22,   22,  105,   86,   89,
      117,  157,  180,   22,   17,   12,    9,    8,   22,   20,

       22,   22,  105,   86,   89,  117,  188,   22,   11,   10,
       22,   22,   22,  105,   86,   89,  117,   22,   22,   22,
       22,  105,   86,   89,  117,  191,   22,   18,   22,   18,
       22,   22,  105,   86,   89,  117,  192,  189,   22,   18,
       22,   22,  105,   86,   89,  117,  192,   22,   22,  105,
       86,   89,  117,   22,   22,  105,   86,   89,  117,  190,
       22,   19,   22,   49,  105,  107,  109,  134,   83,   85,
       86,   89,   91,   95,  122,  126,  130,  116,  117,   69,
       73,   77,   99,  103,  140,  143,  150,  151,  160,  136,
      170,  181,  184,  195,  199,  202,  208,  212,  215,  155,

       53,  219,  222,  224,   57,   19,   22,   19,   22,    5,
       19,   22,   47
    } ;

static yyconst flex_int16_t yy_accept[1595] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   10,   11,   11,   11,   11,   11,   12,
       13,   13,   13,   14,   15,   17,   19,   21,   23,   25,

       27,   29,   32,   34,   36,   39,   41,   43,   45,   47,
       49,   51,   53,   56,   58,   60,   62,   64,   66,   69,
       71,   73,   75,   77,   79,   81,   83,   85,   87,   90,
       92,   94,   96,   98,  100,  102,  104,  107,  109,  111,
      113,  115,  117,  120,  122,  124,  126,  128,  130,  133,
      136,  138,  141,  144,  146,  148,  150,  152,  154,  156,
      158,  160,  162,  164,  166,  168,  170,  172,  175,  177,
      179,  181,  183,  186,  188,  190,  192,  194,  196,  198,
      200,  202,  204,  206,  208,  210,  213,  215,  217,  219,
      221,  224,  228,  230,  232,  234,  237,  239,  241,  243,

      245,  247,  249,  251,  254,  256,  258,  260,  262,  264,
      267,  269,  271,  273,  276,  278,  281,  283,  285,  287,
      289,  292,  294,  297,  299,  302,  304,  306,  308,  310,
      311,  313,  315,  317,  319,  321,  324,  326,  328,  330,
      332,  334,  336,  338,  340,  342,  344,  346,  348,  351,
      354,  356,  358,  361,  363,  365,  368,  370,  372,  374,
      376,  379,  381,  383,  385,  387,  389,  391,  393,  395,
      397,  400,  402,  405,  407,  410,  413,  415,  417,  419,
      421,  423,  425,  427,  429,  432,  434,  436,  438,  440,
      443,  445,  448,  450,  452,  454,  456,  458,  461,  463,

      466,  468,  470,  472,  475,  477,  479,  481,  483,  485,
      487,  489,  492,  494,  497,  499,  501,  503,  506,  508,
      510,  513,  515,  518,  520,  522,  522,  522,  522,  522,
      523,  523,  523,  524,  524,  524,  524,  524,  524,  525,
      526,  527,  527,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  529,  529,  530,
      531,  532,  533,  534,  535,  536,  538,  539,  539,  540,
      541,  542,  543,  544,  545,  545,  545,  545,  545,  545,
      545,  546,  547,  548,  548,  549,  549,  549,  549,  549,
      549,  550,  551,  551,  551,  551,  552,  553,  554,  554,

      555,  555,  556,  556,  556,  557,  557,  557,  557,  557,
      557,  558,  558,  558,  559,  559,  559,  560,  560,  560,
      560,  561,  561,  562,  563,  563,  563,  563,  564,  565,
      565,  566,  567,  567,  568,  569,  570,  570,  570,  571,
      571,  572,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      574,  574,  574,  575,  575,  576,  576,  576,  576,  577,
      578,  578,  579,  579,  579,  580,  580,  582,  582,  582,
      583,  583,  584,  584,  584,  585,  586,  586,  586,  586,
      587,  588,  590,  590,  591,  593,  594,  594,  594,  595,

      595,  596,  596,  597,  597,  597,  597,  597,  597,  598,
      598,  598,  599,  599,  600,  600,  600,  600,  601,  602,
      602,  603,  603,  604,  604,  605,  605,  605,  606,  606,
      607,  607,  608,  608,  609,  609,  610,  611,  612,  612,
      613,  614,  614,  615,  615,  616,  616,  616,  616,  616,
      617,  617,  618,  619,  620,  620,  620,  620,  621,  621,
      621,  622,  623,  623,  624,  624,  625,  626,  626,  626,
      627,  627,  627,  627,  628,  628,  628,  628,  628,  628,
      628,  629,  629,  630,  630,  631,  631,  632,  632,  633,
      633,  633,  634,  634,  635,  635,  636,  636,  636,  637,

      637,  638,  638,  638,  639,  639,  639,  640,  640,  641,
      641,  641,  642,  643,  643,  643,  644,  644,  644,  645,
      645,  646,  647,  647,  647,  648,  649,  649,  649,  649,
      649,  650,  651,  652,  654,  655,  656,  658,  659,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  661,  661,  661,  661,  661,  661,  662,  663,
      664,  665,  666,  666,  667,  668,  669,  669,  670,  671,
      672,  673,  674,  675,  675,  675,  675,  675,  676,  677,
      677,  678,  679,  679,  680,  680,  680,  680,  680,  680,
      680,  681,  682,  682,  683,  684,  684,  685,  685,  686,

      686,  686,  686,  686,  687,  687,  687,  687,  688,  688,
      689,  690,  691,  692,  693,  693,  693,  694,  694,  695,
      695,  695,  695,  695,  695,  695,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  697,  698,  699,  699,  699,  700,  700,
      701,  701,  702,  702,  702,  703,  703,  703,  703,  704,
      704,  705,  705,  705,  705,  706,  707,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  709,  710,  711,  712,  712,  713,  714,  714,

      714,  715,  715,  716,  717,  718,  718,  718,  718,  719,
      719,  719,  719,  720,  720,  720,  721,  722,  722,  723,
      724,  724,  724,  724,  724,  725,  725,  726,  727,  728,
      728,  728,  729,  729,  729,  729,  729,  729,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  731,
      731,  731,  731,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  733,  733,  733,  733,
      734,  734,  734,  734,  735,  735,  736,  736,  736,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  739,  739,
      739,  739,  740,  741,  742,  744,  745,  746,  747,  748,

      748,  749,  749,  749,  749,  750,  751,  751,  751,  751,
      751,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  753,
      753,  754,  754,  755,  755,  755,  755,  755,  755,  756,
      756,  756,  756,  756,  757,  758,  759,  760,  761,  762,
      763,  763,  763,  763,  764,  765,  765,  765,  765,  765,
      766,  766,  766,  766,  766,  766,  767,  767,  767,  767,

      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  768,  768,
      768,  768,  768,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  771,  772,  773,  774,  775,  776,  776,
      776,  776,  777,  778,  778,  778,  778,  778,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  781,  782,  782,  782,  783,  783,

      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  784,  784,  784,  784,
      784,  784,  784,  784,  785,  786,  787,  788,  789,  789,
      789,  789,  790,  791,  791,  791,  791,  791,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  795,  795,  796,  796,  796,  796,  797,  798,  799,
      800,  801,  802,  803,  804,  804,  804,  804,  805,  806,

      806,  806,  806,  806,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  809,  809,  810,  811,  811,
      811,  812,  813,  814,  815,  815,  815,  815,  816,  817,
      817,  817,  817,  817,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,

      818,  818,  818,  818,  819,  819,  820,  821,  822,  823,
      823,  823,  823,  824,  825,  825,  825,  825,  825,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  828,  828,  830,  832,
      833,  834,  834,  834,  834,  835,  836,  836,  836,  836,
      836,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  838,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  840,  840,  842,  843,  844,  844,
      844,  844,  845,  846,  846,  846,  846,  846,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  849,
      849,  850,  851,  851,  851,  851,  852,  853,  853,  853,
      853,  853,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  855,  855,  856,  857,  857,  857,  857,  858,

      859,  859,  859,  859,  859,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  862,  862,  865,  867,  868,  869,
      870,  872,  874,  875,  876,  877,  878,  880,  881,  882,
      883,  884,  885,  886,  887,  888,  889,  890,  891,  892,
      893,  894,  895,  896,  897,  898,  899,  900,  901,  902,
      903,  904,  905,  906,  908,  910,  911,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  914,  914

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   33,   33,   37,   38,   39,   40,   41,
       33,   42,   33,   43,   44,   45,   33,   33,   33,   33,
       46,   47,   48,    1,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   33,   59,   60,   61,   62,
       63,   64,   33,   65,   66,   67,   68,   69,   70,   71,
       72,   33,   73,   74,   75,   76,    1,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78
    } ;

static yyconst flex_int32_t yy_meta[79] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       19,   19,   20,   21,   22,   23,   24,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,    1,   26,   27,   28,   25,
       25,   25,   25,   25,   25,   25,   25,   29,   25,   25,
       25,   30,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   31,   32,   33,   34,   35,   35
    } ;

static yyconst flex_int16_t yy_base[1847] =
    {   0,
        0,    0,    0,   77,  151,  227,   77,   78,  303,    0,
      381,    0,  459,  535,  611,  687,  763,    0,  841,    0,
        0,    0,  919,    0,   80,   81,   82,   83,  997, 1073,
     1149,    0, 1227,    0, 1305,    0, 1383,    0, 1461,    0,
       90,   93, 1539,    0,   94,   99, 1617,    0,  112,  131,
      168,  191,   98,  100, 1695, 1773,  188,  201,  115,  145,
      217,  244,  119,  132, 1851,    0,  467,  483,  136,  141,
     1929,    0, 2007,    0,  239,  251,  252,  464, 2085,    0,
      471,  473,  499,  549, 2163, 2239,  165,  210,  204,  255,
      553,  628, 6590,11511,11511,  496,  519, 6581, 6576, 6557,

      192,  552, 2310, 2371,  570, 2440,  623, 6506, 2515,  104,
      105,  646,  712,  262,  644,11511,11511, 6575,  481,  575,
     1037,11511,11511,   87,  156,11511,11511,    0,  166,  514,
    11511,  258,  719, 1028, 1726, 6555, 1045,  602,  741,11511,
    11511, 6570,  660, 1006, 6550, 1743,11511,11511, 2589, 1083,
     1093, 1786,11511, 2270, 1120, 1734, 2189, 2316, 6551, 1811,
      749,11511, 1822, 2197, 2382, 2399, 6550, 2201, 1056, 1124,
    11511,11511,    0, 1748,11511,11511, 6565, 2211,11511,11511,
     6564, 2220,11511,11511, 6563, 1789, 2209, 2279,11511,    0,
    11511,  254,11511,11511,    0, 2407, 2265,11511, 2304, 2436,

     2467, 2479, 6546, 2505, 2289, 1132,11511,11511,    0, 6550,
     2298,11511,11511, 6549, 2355,    0,11511, 2431,11511,11511,
        0, 6508,  478,11511, 6518, 2540, 2664,11511,    0, 6506,
    11511,  283,11511, 6556, 6504,    0,11511,11511, 6542, 6546,
     6504,  211,11511,11511, 2498,11511,  669,11511,11511,  714,
     2516,11511, 1062,11511, 6499,    0,11511,11511,  238,  239,
        0,11511,11511, 1049, 1659,11511,11511, 2522,11511,11511,
        0, 2542,    0,11511,11511,11511,11511, 2566,11511,11511,
     2570,11511,11511,    0,  254, 6493,11511,11511,    0,  485,
     6492,    0,11511, 6494, 6493,11511,11511,    0, 6486,    0,

    11511, 6526, 6483,    0,11511,11511, 6464,   73,11511,11511,
        0, 6521, 6480,    0,11511, 6477,    0,    0,11511,11511,
        0,11511,11511, 6475, 6484, 2367, 2733, 2802, 2458, 2475,
     6473, 6523,11511,    0, 6506, 6501,    0,  206,  470,11511,
    11511, 2878, 6500,  507,  538,  509, 2589, 1696,  605,  519,
      595, 2581,  173,  596, 6472, 6457,11511, 6507,  622, 2955,
     6461, 1008, 6453,11511,11511,    0, 2627, 2663, 2350, 2359,
     2648, 2653, 2654, 6438, 3030,  584, 2691,  663, 1810, 2701,
      601, 2702, 2728, 1033,11511, 2269, 1817, 2711, 2730, 6507,
    11511, 2212,  685, 2312, 1762,11511, 2516,11511, 6448,  713,

     6500,  996, 6484, 2440,11511, 6444, 2759, 2830, 6482, 2841,
     2766, 2789, 2905, 2813, 2555, 2450,11511, 6442, 2819, 2867,
     6478, 6494,11511, 2731, 1693, 2778, 2509,11511, 2897, 6492,
      655, 3104, 3180, 6491,11511, 2911, 2161, 2914, 6490, 2574,
    11511, 2924, 2965, 2987, 6473, 2995, 3004, 3034, 3056, 3064,
        0, 3089, 3081, 3093,  736, 3131, 3135, 6472, 3165, 3143,
     3205, 3213, 3240, 2579,11511, 6432, 3230, 3257,    0,    0,
     2617,11511, 6431, 6485,11511, 2734,11511, 6428, 6482,11511,
     2849,11511, 6421, 6475,11511, 2927, 2257, 2954, 2860,11511,
     3002, 2625, 2666,11511, 2798, 3265, 3273,    0, 3288, 6458,

     3296, 2878,11511, 6418, 3310, 3318, 6453, 3335, 3327, 3352,
     3360, 3368, 2973,11511, 6413, 3372, 3393,    0, 6455, 6463,
     6453, 2982,11511, 6408, 6449, 6409, 3009,11511, 6403,    0,
     3021,11511, 6402,    0, 6401, 1712,11511, 6415, 6403,11511,
     6451, 3070,11511, 6397,    0, 6396, 1137, 6449, 6448,11511,
     6387,    0,11511,11511, 6386, 6385, 3154,11511, 6384, 1722,
    11511, 2331, 3160,11511, 6380, 3218,11511, 6383, 6377,    0,
      467, 6383,   61,    0, 6375, 6381, 6385,  574,  232, 3170,
    11511, 6371,    0, 3235,11511, 6370,    0, 3244,11511, 6369,
     3277,11511, 6367, 1034, 6419, 1070, 6404, 6364, 1087, 6416,

     1737, 6401, 6361,    0, 6413,  634,    0, 6359,    0,  196,
     6357,    0,    0, 6356, 1740, 6397,    0, 6352,    0, 6351,
        0,    0, 6350, 6383, 6349, 3098, 6341, 6379,    0, 6378,
     1003, 6367,11511,11511, 6366, 3436, 6365, 6372,11511, 6372,
     6325,  976, 6266, 6217, 1053, 1755,  462,  526, 2754,  978,
     2836,11511, 1753, 2163, 2167, 6220, 6219, 6262, 2224, 2700,
        0, 2388, 6203, 3346,11511,11511, 3514, 3341,    0,    0,
     3385, 3418, 3422, 3398, 2491, 3230, 3405,11511, 3471, 3532,
     2583, 3023, 3366, 3452, 6207,    0, 6206, 3548, 3554, 6204,
     6246, 3386, 3483, 3546, 2254, 3613, 3577, 3623, 3626, 6256,

     2936, 3076, 6201,    0, 6200, 6198, 6197, 3485, 3524, 3634,
     3662, 3693, 3701, 3709, 6194, 6193,    0,    0, 6241, 6191,
     6187, 6186, 6184, 6183,    0,    0, 6182, 6181, 6180, 6193,
     6178, 6177, 6175, 6174, 6174, 6186, 6172, 6160, 6173, 3195,
     6160, 6172, 6169, 6152, 6150, 6149, 6148, 6147,    0, 6144,
        0, 6141,11511,11511,11511, 6140, 6181, 2718, 6138,    0,
     6134,11511, 2292,    0, 6182, 6125, 6124, 6123,11511, 2453,
     3561, 6119, 6176,    0, 3559, 2781,11511, 6152, 2251, 6121,
     6120, 2154, 2281, 2312, 6155, 3279, 2321, 3301, 2305, 6128,
     6116,11511, 2853,11511,    0, 6099, 2917, 3596, 6098, 3732,

     3605, 6125, 3715, 3653, 3723, 3758, 3766, 3795, 3562, 6117,
     6112, 3762,11511, 3789, 6105, 3797, 3869, 3945, 3806,11511,
     6104, 6103, 6102, 6098, 3818,    0, 3898, 3974, 3843, 6097,
     6094, 6129, 6092, 6084, 6086, 6084, 6083,    0, 6078, 6071,
     6070, 3870, 6069, 6068, 6064, 6063, 6061, 6056,11511, 6050,
     6058, 6051,11511, 6044, 6056, 6038, 6038, 6049, 6047, 6046,
     6045, 6044, 6043, 6036, 6035, 3119, 6034, 6030, 2413, 6065,
     6027, 6026, 6025, 3424, 6024,11511, 6058, 3759,11511, 6047,
     6048, 6022, 6010, 2495, 2538, 3475, 3638,11511, 2572, 6005,
     6019, 3347, 3606, 5991, 3675, 3833, 3837, 3909, 3970, 3982,

     3839, 5992, 5991, 5990, 3983, 4004, 5985, 5981, 5979, 5973,
     3985, 4032, 5971, 5970, 5969, 5972, 5966, 5931, 5927, 5926,
     5925, 5924, 5922, 5918, 5913, 5929,  690, 5906, 5910, 3325,
     5909, 5904, 5902, 5901, 5867, 5870, 5872, 5859, 5860,  640,
     5854, 5864, 5859, 1077, 5851, 5850, 5849, 5844, 5842, 5841,
     5836, 5829, 5828, 5827, 2417, 5826, 5822, 5821, 3825, 5819,
     5865, 5839,11511, 5813, 5826, 2416, 2426, 3903,11511, 5850,
     3907, 5815, 5808, 3750,11511, 3748, 4010, 4011, 4040, 4041,
     5810, 5806, 5805, 4043, 4073, 5797, 5796, 5791, 5790, 4052,
     4106, 4128, 5788, 5787, 5786,11511, 5785, 5783, 5782, 5779,

     5778, 5777, 5785, 2494, 5772, 5759, 5763, 5772, 5768, 5759,
     5753, 5763, 5755, 5752, 5751, 5748, 5745,11511, 5751,    0,
        0, 5743,11511, 5737, 3429, 5735, 5733, 5743, 5743, 5726,
     5724, 5723, 5722, 5720, 5719, 5685, 5680, 5675, 5671, 5668,
     5661, 5660, 3875, 5659, 5685, 5653, 5641, 2571, 5676, 3984,
     5631, 5620, 3960, 4005, 4092, 4074, 4114, 4122, 5638, 5635,
     5630, 4134, 4148, 5628, 5627, 5626, 5618, 4141, 5611, 5604,
     5598, 5592, 5587, 5584, 5583, 5582, 5581, 5572, 5573,    0,
     5563, 5564, 5553, 5552,11511, 5560, 5550, 5512, 4572, 4570,
     4569, 4564,    0,11511,11511, 4561, 4553,11511, 4552, 4533,

     4527, 4527, 4539, 4530, 4527, 4526, 4523, 4519, 4515, 4506,
     4505, 4501, 4498, 4496, 4491, 4120, 4490, 4486, 4456, 4448,
     4042, 4493, 4491, 4172, 4080, 4173, 4174, 3906, 4451, 4448,
     4440, 4167, 4182, 4436, 4433, 4432, 4428, 4192, 4421, 4415,
     4412, 4402, 4397, 4388, 4377, 4375, 4374, 4370,11511, 4366,
     4353, 4350, 4348, 4353, 4342, 4331, 4331, 4328, 4327, 4326,
    11511, 4325, 4313, 4309, 3462, 4309, 4306, 4299, 4297, 4292,
     4291, 4290, 4288, 4286, 4280, 4278, 4276, 4267, 4260, 4255,
     4044, 4244,11511, 4271, 4264, 4178,11511,11511,11511, 4192,
     1006, 4194, 4204, 4212, 4227, 4217, 4215, 4225, 4250, 4213,

     4201, 4200, 4191, 4260, 4177, 4175, 4174, 4169, 4168, 4163,
     4159, 4155, 4153, 4129, 4120, 4105, 4102, 4084, 4076, 4082,
     4074, 4069, 4058, 3989, 3951, 3941, 3919, 3910,11511, 3871,
     3845,   94,  136,  137,  246,  440,  482,  513,  553,  615,
      698,  700,  706,  708, 4063, 1013,11511,11511, 1041, 4211,
     4220, 4253, 4258, 4263, 1072, 1703, 1731, 4269, 4283, 1743,
     1750, 1762, 1781, 4294, 1782, 1783, 2123, 2125, 2129, 2173,
     2174, 2200, 2230, 2252, 2272, 2276, 2298, 2311, 2331, 2336,
     2335, 2355, 2359, 2406, 2413, 2414, 2436, 3484, 2430, 2437,
     2480, 2481, 2492, 2494, 2506, 2537, 2551, 2558, 2565, 2572,

     2574, 2578, 2580, 4289, 2591, 4293, 4309, 4317, 4314, 2602,
     2603, 2612, 4316, 4358, 2619, 2621, 2628, 2629, 4361, 2634,
     2639, 2640, 2641, 2652, 2671, 2680, 2690, 2694, 2703, 2695,
     2712, 2713, 2711, 2737, 2747, 2749, 2761, 2762, 2770,11511,
     3488, 2782, 2784, 2789, 2808, 2809, 2815, 2816, 2840, 2841,
     2842, 2853, 2854, 2855, 2869, 4340, 2877, 4319, 4323, 4342,
     4376, 2878, 2900, 2931, 4383, 4402, 2932, 2933, 2941, 2953,
     4399, 2955, 2957, 2967, 2971, 2972, 2978, 2988, 2992, 2993,
     2994, 2990, 3018, 3027, 3037, 3053, 3057, 3565,11511, 3062,
     3064, 3069, 3079, 3080, 3081, 3093, 3102, 3114, 3129, 3133,

     3139, 3140, 3150, 4366, 3151, 3573, 4353, 4413, 3165, 3170,
     3171, 4424, 4433, 3175, 3176, 3210, 3217, 4436, 3218, 3219,
     3229, 3240, 3241, 3248, 3253, 3270, 3271, 3274, 3281, 3288,
     3293, 3305, 3306, 3592, 3304, 3313, 3314, 3326, 3334, 3338,
     3339, 3358, 3362, 3363, 3364, 3371, 3376, 3381, 4409, 3385,
     4448, 4447, 3390, 3405, 3406, 4450, 4484, 3415, 3417, 3430,
     3441, 4466, 3445, 3454, 3456, 3466, 3485, 3493, 3495, 3497,
     3503, 3496, 3531, 3532, 3548, 3552, 3553, 3645, 3554, 3561,
     3570, 3584, 3605, 3611, 3623, 3624, 3625, 3639, 3640, 3641,
     3643, 4472, 3648, 4439, 4487, 3643, 3644, 3650, 4496, 4519,

     3654, 3662, 3670, 3672, 4506, 3689, 3717, 3719, 3720, 3730,
     3734, 3737, 3738, 3739, 3746, 3754, 3761, 3763, 3768,11511,
     3769, 3778, 3784, 3785, 3789, 3790, 3791, 3794, 3796, 3798,
     3799, 3802, 3803, 4474, 3824, 4525, 4531,11511,11511,11511,
     4539, 4556,11511,11511,11511,11511, 4541,11511,11511,11511,
    11511,11511,11511,11511,11511,11511,11511,11511,11511,11511,
    11511,11511,11511,11511,11511,11511,11511,11511,11511,11511,
    11511,11511,11511, 4531, 4565, 3838, 3931, 3926, 3893, 3977,
     3933, 3978, 4039, 3866, 4025, 3979, 4048, 4076, 4109, 4107,
     4016, 4580,11511, 4627, 4662, 4697, 4732, 4767, 4802, 4837,

     4872, 4907, 4942, 4977, 5012, 5047, 5082, 5117, 5152, 5187,
     5222, 5257, 5292, 5327, 5362, 5397, 5432, 5467, 5502, 5537,
     5572, 5600, 5622, 5641, 5665, 5686, 5710, 5744, 5773, 4562,
     5792, 5826, 5860, 5894, 5929, 5958, 5993, 6023, 6057, 6091,
     6125, 6159, 6193, 6227, 6247, 6282, 6317, 6352, 6381, 4571,
     6415, 4580, 6449, 6483, 6517, 6551, 4588, 6570, 6590, 6625,
     6645, 6680, 6715, 6735, 6770, 6805, 6839, 6869, 6904, 6924,
     6959, 5584, 6978, 5592, 6997, 7032, 7052, 7087, 7122, 7142,
     7164, 7199, 7234, 7269, 7298, 7332, 5807, 7349, 7371, 7386,
     7416, 5615, 5841, 7438, 7467, 7498, 7527, 7556, 7575, 7603,

     7637, 7671, 7705, 7740, 7757, 7792, 7821, 7850, 7885, 7920,
     7950, 7979, 8013, 8047, 8081, 8116, 8150, 8184, 8218, 8252,
     8269, 8289, 8324, 8359, 8394, 8423, 8452, 8486, 8520, 5875,
     8554, 8588, 8622, 8656, 8673, 8692, 8720, 8740, 8775, 8795,
     8830, 8865, 8893, 8913, 8948, 8983, 9017, 9047, 9082, 9102,
     9137, 9156, 9184, 9203, 9231, 9266, 9286, 9321, 9356, 4203,
     9386, 9408, 9428, 9463, 9498, 9533, 9567, 9580, 9615, 9635,
     9652, 9682, 9717, 9751, 4596, 9777, 9810, 6038, 5634, 9844,
     9869, 9898, 5883, 9933, 9950, 9979,10008,10043,10073,10103,
    10138,10172,10189,10218,10247,10281,10315,10349,10366, 6106,

    10385, 6114,10402,10437, 6140, 6174, 4255,10467,10487,10509,
    10543,10574,10594,10613,10643, 5654,10674,10707,10742, 5699,
    10776,10806,10832,10867,10896,10931,10961,10990, 6208,11024,
    11058,11077,11094,11124,11146,11166,11196,11230,11265,11300,
    11335,11370,11405,11440,11475, 5679
    } ;

static yyconst flex_int16_t yy_def[1847] =
    {   0,
     1594, 1594, 1593,    3, 1595, 1595, 1596, 1596, 1593,    9,
     1593,   11, 1597, 1597, 1598, 1598, 1593,   17, 1593,   19,
     1594, 1594, 1593,   23, 1599, 1599, 1600, 1600, 1601, 1601,
     1593,   31, 1593,   33, 1593,   35, 1593,   37, 1593,   39,
     1602, 1602, 1593,   43, 1603, 1603, 1593,   47, 1604, 1604,
     1605, 1605, 1606, 1606, 1607, 1607, 1608, 1608, 1609, 1609,
     1610, 1610, 1611, 1611, 1593,   65, 1612, 1612, 1613, 1613,
     1593,   71, 1593,   73, 1614, 1614, 1614, 1614, 1593,   79,
     1615, 1615, 1616, 1616, 1617, 1617, 1618, 1618, 1619, 1619,
     1620, 1620, 1593, 1593, 1593, 1593, 1593, 1621, 1622, 1623,

     1623, 1624, 1593, 1625, 1626, 1627, 1626, 1593, 1593, 1593,
     1623, 1623, 1624, 1623, 1593, 1593, 1593, 1628, 1629, 1629,
     1629, 1593, 1593, 1593, 1593, 1593, 1593, 1630, 1631, 1593,
     1593, 1593, 1593, 1632, 1632, 1593, 1633, 1593, 1634, 1593,
     1593, 1635, 1636, 1636, 1593, 1636, 1593, 1593, 1637, 1638,
     1638, 1638, 1593, 1638, 1593, 1593, 1639, 1639, 1593, 1640,
     1641, 1593, 1593, 1593, 1642, 1642, 1593, 1643, 1593, 1644,
     1593, 1593, 1645, 1593, 1593, 1593, 1646, 1593, 1593, 1593,
     1647, 1593, 1593, 1593, 1648, 1649, 1649, 1649, 1593, 1650,
     1593, 1651, 1593, 1593, 1652, 1653, 1593, 1593, 1593, 1593,

     1654, 1654, 1593, 1655, 1593, 1656, 1593, 1593, 1657, 1658,
     1593, 1593, 1593, 1659, 1593, 1660, 1593, 1593, 1593, 1593,
     1661, 1593, 1662, 1593, 1663, 1593, 1593, 1593, 1664, 1593,
     1593, 1593, 1593, 1665, 1593, 1666, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1667, 1593, 1593, 1667,
     1593, 1593, 1593, 1593, 1593, 1668, 1593, 1593, 1593, 1593,
     1669, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1670, 1593, 1671, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1672, 1673, 1593, 1593, 1593, 1674, 1675,
     1593, 1676, 1593, 1593, 1593, 1593, 1593, 1677, 1593, 1678,

     1593, 1593, 1593, 1679, 1593, 1593, 1593, 1593, 1593, 1593,
     1680, 1681, 1593, 1682, 1593, 1593, 1683, 1683, 1593, 1593,
     1684, 1593, 1593, 1593, 1593, 1593, 1685, 1685, 1593, 1593,
     1593, 1686, 1593, 1687, 1688, 1689, 1690, 1593, 1689, 1593,
     1593, 1691, 1689, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1692, 1685,
      360,  360,  360, 1593, 1593, 1693, 1694, 1694, 1695, 1695,
     1695, 1695, 1695, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1689, 1593, 1593, 1689, 1689, 1593, 1593, 1696,
     1593, 1697, 1698, 1697, 1593, 1593, 1697, 1593, 1593, 1699,

     1700, 1699, 1593, 1593, 1593, 1593, 1593, 1701, 1593, 1701,
     1702, 1703, 1701, 1702, 1704, 1593, 1593, 1593, 1703, 1703,
     1705, 1706, 1593, 1707, 1708, 1707, 1593, 1593, 1707, 1709,
     1709, 1710, 1710, 1709, 1593, 1711, 1712, 1711, 1709, 1593,
     1593, 1711, 1593, 1713, 1593, 1713, 1714, 1715, 1713, 1593,
     1716, 1714, 1715, 1715, 1717, 1593, 1718, 1593, 1718, 1719,
     1720, 1718, 1719, 1593, 1593, 1593, 1720, 1720, 1721, 1722,
     1593, 1593, 1593, 1723, 1593, 1593, 1593, 1593, 1724, 1593,
     1593, 1593, 1593, 1725, 1593, 1726, 1727, 1726, 1593, 1593,
     1726, 1728, 1593, 1593, 1728, 1729, 1593, 1730, 1729, 1593,

     1731, 1593, 1593, 1593, 1593, 1732, 1593, 1732, 1733, 1734,
     1732, 1733, 1593, 1593, 1593, 1734, 1734, 1735, 1736, 1737,
     1736, 1593, 1593, 1593, 1738, 1593, 1593, 1593, 1593, 1739,
     1593, 1593, 1593, 1740, 1593, 1741, 1593, 1742, 1593, 1593,
     1743, 1593, 1593, 1593, 1744, 1593, 1593, 1745, 1745, 1593,
     1593, 1746, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1747,
     1593, 1747, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1748,
     1593, 1593, 1593, 1749, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1750, 1593, 1593, 1593, 1751, 1593, 1593, 1593,
     1593, 1593, 1593, 1752, 1753, 1752, 1593, 1593, 1754, 1755,

     1754, 1593, 1593, 1756, 1593, 1593, 1757, 1593, 1758, 1593,
     1593, 1759, 1760, 1593, 1761, 1762, 1763, 1593, 1764, 1593,
     1765, 1766, 1593, 1593, 1593, 1767, 1593, 1768, 1769, 1770,
     1593, 1771, 1593, 1593, 1771, 1772, 1771, 1770, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1773, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1774, 1774,
     1775, 1593, 1776, 1767, 1593, 1593, 1777, 1767, 1778, 1779,
     1780, 1780, 1780, 1593, 1593, 1593, 1593, 1593, 1771, 1593,
     1593, 1781, 1781, 1782, 1593, 1783, 1593, 1784, 1784, 1593,
     1785, 1786, 1786, 1787, 1593, 1788, 1789, 1789, 1790, 1791,

     1593, 1792, 1593, 1793, 1593, 1593, 1593, 1794, 1794, 1795,
     1796, 1797, 1798, 1798, 1593, 1593, 1799, 1800, 1801, 1593,
     1593, 1593, 1593, 1593, 1802, 1803, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1804, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1805, 1593,
     1806, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1807,
     1593, 1593, 1808, 1809, 1810, 1593, 1593, 1593, 1593, 1593,
     1811, 1593, 1812, 1813, 1814, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1815, 1815, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1816, 1817, 1593, 1811, 1818, 1819,

     1811, 1820, 1821, 1821, 1821, 1593, 1593, 1822, 1823, 1593,
     1593, 1824, 1593, 1824, 1593, 1825, 1826, 1826, 1827, 1593,
     1593, 1593, 1593, 1593, 1828, 1829, 1830, 1830, 1831, 1593,
     1593, 1832, 1593, 1593, 1593, 1593, 1593, 1833, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1834, 1835,
     1593, 1593, 1593, 1811, 1593, 1593, 1836, 1814, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1837, 1593, 1593, 1593,
     1593, 1593, 1811, 1593, 1593, 1811, 1821, 1821, 1821, 1593,

     1823, 1593, 1593, 1593, 1825, 1827, 1593, 1593, 1593, 1593,
     1828, 1838, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1839, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1834, 1593, 1593, 1593, 1811, 1593,
     1836, 1593, 1593, 1593, 1593, 1593, 1593, 1840, 1593, 1837,
     1837, 1593, 1593, 1811, 1593, 1811, 1821, 1821, 1821, 1823,
     1593, 1593, 1593, 1825, 1827, 1593, 1593, 1593, 1593, 1828,
     1838, 1838, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1841,
     1842, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1811, 1593, 1593, 1593, 1593, 1593, 1840, 1840,
     1593, 1593, 1811, 1811, 1821, 1821, 1821, 1823, 1593, 1593,
     1593, 1825, 1827, 1593, 1593, 1593, 1593, 1828, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1843,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1844, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1811, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1811, 1593, 1821, 1821, 1823, 1593, 1593,
     1593, 1825, 1827, 1593, 1593, 1593, 1593, 1828, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1811, 1593, 1593, 1593, 1593, 1845, 1593, 1593, 1593, 1811,
     1593, 1821, 1821, 1823, 1593, 1593, 1593, 1825, 1827, 1593,

     1593, 1593, 1593, 1828, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1811, 1593, 1593, 1593, 1845, 1845,
     1811, 1821, 1821, 1823, 1593, 1593, 1593, 1825, 1827, 1593,
     1593, 1593, 1593, 1828, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

     1593, 1593, 1593, 1811, 1593, 1811, 1821, 1821, 1823, 1593,
     1593, 1593, 1825, 1827, 1593, 1593, 1593, 1593, 1828, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1811, 1593, 1811, 1821, 1821,
     1823, 1593, 1593, 1593, 1825, 1827, 1593, 1593, 1593, 1593,
     1828, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

     1593, 1593, 1593, 1811, 1593, 1593, 1821, 1823, 1593, 1593,
     1593, 1825, 1827, 1593, 1593, 1593, 1593, 1828, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1811, 1593,
     1821, 1823, 1593, 1593, 1593, 1825, 1827, 1593, 1593, 1593,
     1593, 1828, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1811, 1593, 1821, 1823, 1593, 1593, 1593, 1825, 1827,

     1593, 1593, 1593, 1593, 1828, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1811, 1593, 1821, 1823, 1593, 1593, 1593,
     1825, 1827, 1593, 1593, 1593, 1593, 1828, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1811, 1593, 1846, 1593, 1846, 1846, 1846,
     1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
     1846, 1846,    0, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593
    } ;

static yyconst flex_int16_t yy_nxt[11590] =
    {   0,
       95,   96,   97,   95,   96,   95,   98,   95,   99,   95,
       95,   95,   95,   95,  100,   95,  101,  102,   95,  100,
      100,  100,   95,  103,   95,   95,  104,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,   95,  106,   95,  107,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,   95,   95,   95,   95,   95,  108,  109,  123,
      123,  109,  176,  176,  180,  180,  177,  177,  181,  181,
      110,  111,  217,  112,  113,  217,  224,  114,  114,  115,

      244,  224,  244,  124,  124,  381,  381,  225,  381,  381,
      398,  398,  225,  232,  233,  737,  232,  257,  234,  258,
      226,  267,  738,  125,  125,  226,  178,  178,  182,  182,
      614,  337,  232,  233,  267,  232,  218,  234,  280,  218,
      227,  259, 1291,  280,  245,  227,  245,  257,  613,  258,
      115,  116,  116,  117,  116,  116,  116,  118,  235,  116,
      116,  260,  116,  116,  116,  268,  116,  315,  116,  120,
      237,  259,  238,  120,  116,  116,  116,  235,  268,  398,
      398,  239,  281,  401, 1292, 1293,  240,  281,  403,  253,
      254,  260,  253,  237,  241,  238,  116,  121,  116,  338,

      655,  757,  253,  254,  239,  253,  318,  631,  339,  240,
      631,  316,  315,  399,  242,  319,  320,  241,  337,  262,
      758,  263,  655,  116,  116,  116,  116,  116,  116,  117,
      116,  116,  116,  118,  255,  116,  116,  242,  116,  116,
      116,  293,  116,  264,  116,  120,  262,  255,  263,  120,
      116,  116,  116,  293,  293,  493,  316,  318,  493,  407,
      407,  407,  407,  265,  555,  294,  319,  320,  556,  494,
      264,  595,  116,  121,  116,  408,  597,  294,  295,  386,
      409,  387,  387,  387,  547,  294,  740,  547,  337,  548,
      265,  571,  571,  744, 1294,  572,  573,  294,  295,  116,

      116,  116,  116,  126,  126,  127,  126,  126,  126,  126,
      126,  128,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  126,  130,
      126,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  126,  126,  126,  126,  129,
      129,  131,  132,  133,  132,  132,  131,  131,  131,  134,
      131,  131,  131,  131,  131,  131,  131,  131,  135,  131,

      131,  131,  131,  136,  131,  131,  131,  131,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  131,  138,  131,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  131,  131,  131,  139,  137,  137,  140,
      140,  141,  140,  140,  140,  142,  293,  140,  140,  274,
      140,  140,  140,  301,  140,  301,  140,  144,  275,  276,
      537,  144,  145,  140,  140,  274,  632,  302, 1295,  302,
      295,  538,  784,  277,  275,  276,  337,  326,  393,  394,

      326,  305,  600,  394,  140,  146,  140,  602,  639,  277,
      295,  639,  306,  278,  784,  404,  405,  303,  404,  303,
      329,  330,  327,  329,  539,  307,  735,  394,  736,  278,
     1296,  140,  140,  140,  140,  140,  140,  141,  140,  140,
      140,  142,  328,  140,  140,  308,  140,  140,  140,  642,
      140,  305,  140,  144,  640,  322,  650,  144,  145,  140,
      140, 1297,  306,  323,  340,  331,  336,  341,  336,  342,
      649,  406,  642,  643,  644,  307,  323,  323,  337,  650,
      140,  146,  140,  641,  336,  381,  336,  336,  381,  336,
      336,  336, 1593,  394,  649,  308,  337,  394,  344,  324,

      325, 1298,  381,  416,  417,  381,  416,  140,  140,  140,
      140,  147,  147,  148,  147,  147,  147,  149,  368,  147,
      147,  394,  147,  147,  147,  649,  147,  742,  147,  151,
      322,  649,  649,  151,  152,  153,  147,  336,  323,  336,
      336,  743,  336,  336,  336,  388,  649,  382,  388,  337,
      382,  323,  323,  338,  649,  649,  147,  154,  147,  418,
      389,  695,  383, 1299,  384,  385,  380,  384,  380,  649,
      560,  368,  337,  560,  324,  325,  660,  425,  426,  434,
      561,  754,  426,  147,  147,  147,  147,  147,  147,  148,
      147,  147,  147,  149, 1023,  147,  147,  661,  147,  147,

      147, 1024,  147,  683,  147,  151,  426,  683,  755,  151,
      152,  153,  147,  384,  385, 1593,  384,  380, 1593,  380,
      407,  407,  407,  407,  340, 1593,  336,  341,  336,  342,
      401,  683,  147,  154,  147,  403,  408,  701,  337, 1007,
      701,  409,  419,  419,  419,  419, 1300,  451, 1301,  420,
      453,  453,  453,  453, 1302, 1008, 1303,  454,  344,  147,
      147,  147,  147,  131,  155,  156,  155,  155,  131,  131,
      131,  157,  131,  131,  131,  131,  131,  131,  131,  131,
      158,  131,  131,  131,  131,  159,  131,  131,  131,  131,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,

      160,  160,  160,  160,  160,  160,  160,  160,  131,  138,
      131,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  131,  131,  131,  161,  160,
      160,  162,  163,  164,  163,  163,  162,  162,  162,  165,
      162,  162,  162,  162,  162,  162,  162,  162,  166,  162,
      162,  162,  162,  167,  162,  162,  162,  162,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  162,  169,  162,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,

      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  162,  162,  162,  170,  168,  168,  171,
      171,  172,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  171,  174,  171,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  171,  171,  171,  171,  173,  173,  183,  183,  184,

      183,  183,  183,  185,  631,  183,  183,  631,  183,  183,
      183,  649,  183,  401,  183,  187,  665,  779,  403,  187,
      183,  183,  183, 1593,  426, 1191, 1191, 1191,  426,  407,
      407,  407,  407,  649,  384,  385,  410,  384,  395,  396,
      779,  395,  183,  188,  183,  408,  407,  407,  407,  407,
      409,  595,  426,  666, 1593,  394,  597,  464,  465,  394,
      464, 1305,  408,  566,  567, 1187,  566,  409,  415,  183,
      183,  183,  183,  183,  183,  184,  183,  183,  183,  185,
      667,  183,  183,  394,  183,  183,  183,  595,  183,  435,
      183,  187,  597,  782,  397,  187,  183,  183,  183, 1593,

      437,  438,  575,  412,  600,  438,  576,  435,  568,  602,
     1593,  438,  577,  466,  578,  438,  782, 1593,  183,  188,
      183,  443,  443,  443,  443,  467,  467,  467,  467,  438,
     1028, 1310,  468,  516,  516,  516,  516,  444,  547,  438,
      517,  547,  445,  548, 1029,  183,  183,  183,  183,  189,
      189,   94,  189,  189,  189,  189,  189,  190,  189,  189,
      189,  189,  189,  189,  191,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  189,  189,  189,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  189,  189,  189,  189,  192,  192,  193,  193,  194,
      193,  193,  193,  193,  193,  195,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  193,  197,  193,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  193,

      193,  193,  193,  196,  196,  198,  199,  200,  199,  199,
      198,  198,  198,  201,  198,  198,  198,  198,  198,  198,
      198,  198,  202,  198,  198,  198,  198,  203,  198,  198,
      198,  198,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      198,  205,  198,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  198,  198,  198,
      206,  204,  204,  207,  207,  208,  207,  207,  207,  207,
      207,  209,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  207,  211,
      207,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  207,  207,  207,  207,  210,
      210,  212,  212,  213,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,

      214,  214,  214,  214,  214,  214,  212,  215,  212,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  212,  212,  212,  212,  214,  214,  219,
      219,  220,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  219,  222,  219,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  219,  219,  219,  219,  221,  221,   94,   94,  228,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,   94,  230,   94,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,   94,
       94,   94,   94,  229,  229,  246,  247,  248,  246,  247,

      246,  246,  246,  246,  246,  246,  249,  246,  246,  246,
      246,  693,  575,  246,  537,  693,  579,  246,  246,  246,
      246,  246,  577,  560,  578,  538,  560,  413,  413,  413,
      413,  648,  649,  561,  410,  443,  443,  443,  443,  693,
      246,  251,  246,  408,  427,  428,  762,  427,  409,  471,
      472,  444,  471,  648,  600,  649,  445,  764,  539,  602,
     1593,  426, 1311,  395,  396,  426,  395,  246,  246,  246,
      246,  246,  246,  246,  247,  248,  246,  247,  246,  246,
      246,  246,  246,  246,  249,  246,  246,  246,  246,  426,
     1312,  246,  439,  783,  787,  246,  246,  246,  246,  246,

      429,  412, 1315, 1593,  438,  473,  487,  488,  438, 1316,
      435,  488,  450,  443,  443,  450,  783,  787,  246,  251,
      246, 1317,  451,  456,  456,  456,  456,  675,  444,  676,
      676,  676,  438,  445,  386,  488,  387,  387,  387,  457,
     1318, 1320, 1321,  337,  458,  246,  246,  246,  246,  246,
      246,  269,  269,  270,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  269,  272,  269,  271,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  269,  269,  269,  269,  271,  271,  282,
      282,  283,  282,  282,  282,  282,  282,  284,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  282,  286,  282,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,

      285,  282,  282,  282,  282,  285,  285,  287,  287,  288,
      287,  287,  287,  287,  287,  289,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  287,  291,  287,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  287,
      287,  287,  287,  290,  290,  296,  296,  297,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      296,  299,  296,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  296,  296,  296,
      296,  298,  298,  309,  309,  310,  309,  309,  309,  311,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  698,
      309,  309, 1322,  698, 1323,  309,  309,  309, 1324,  309,
      443,  443,  443,  443,  788,  789,  884,  446,  456,  456,

      456,  456,  456,  456,  456,  456,  444,  698,  309,  313,
      309,  445,  476,  477,  457,  476,  788,  789,  457,  458,
      884,  481,  482,  458,  481,  793, 1593,  488,  793,  393,
      394,  488, 1325, 1326,  394,  309,  309,  309,  309,  309,
      309,  310,  309,  309,  309,  311,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  488,  309,  309,  394, 1327,
      435,  309,  309,  309,  448,  309,  502,  503,  478,  502,
      681,  440,  441,  681,  440,  709, 1593,  483,  435,  709,
      489,  490,  881,  489,  309,  313,  309, 1593,  438, 1328,
      513,  514,  438,  513, 1593,  337, 1593,  488,  762,  522,

      523,  488,  522,  709,  881,  505,  505,  505,  505,  764,
     1329,  309,  309,  309,  309,  345,  438,  449,  449,  449,
      449,  506,  504,  885,  446,  488,  507,  442,  346, 1593,
      394, 1330, 1593,  444,  394, 1593,  491, 1331,  445,  347,
      348,  889, 1593,  886,  349,  350,  515,  885,  649,  351,
      352,  662,  353,  354,  662,  524,  527,  528,  394,  527,
      662,  347,  348,  662,  889,  886,  349,  350,  326, 1080,
      649,  326,  351,  352,  355,  356,  353,  354,  357,  357,
      357,  357, 1080,  456,  456,  456,  456,  358, 1332,  662,
      459,  448,  662,  327,  357,  357,  670,  359, 1333,  457,

      462,  462,  462,  462,  458,  670, 1080,  459,  497,  497,
      497,  497,  529,  328, 1334,  498,  457,  359, 1335,  762,
      671,  458,  663,  762,  361,  362,  499,  499,  499,  500,
      764,  663,  531,  532,  764,  531,  363,  505,  505,  505,
      505,  404,  405,  364,  404,  365,  366,  357,  357,  357,
      357,  416,  417,  506,  416, 1048,  358,  461,  507,  329,
      330,  794,  329,  357,  357, 1336,  359,  649,  505,  505,
      505,  505, 1337, 1338,  461,  508,  329,  330, 1048,  329,
      511,  511,  511,  511,  506, 1339,  359,  508,  533,  507,
      649, 1341,  681,  370,  371,  681,  506,  372,  794,  557,

      558,  507,  557, 1342,  331,  373,  505,  505,  505,  505,
      427,  428,  364,  427,  365,  366,  375,  563,  564,  375,
      563,  331,  506,  580,  581,  794,  580,  507,  376,  376,
      966,  377,  378,  393,  394,  379,  379,  380,  394, 1343,
     1344,  327,  510,  584,  585, 1079,  584,  540,  540,  540,
      540, 1345,  966, 1346,  510,  559,  689,  689,  689,  689,
     1080,  328,  394,  540,  540, 1347,  541,  588,  589,  967,
      588,  591,  592,  565,  591,  440,  441,  684,  440,  582,
      464,  465,  651,  464,  681,  651,  541,  681,  380,  430,
      430,  967,  430,  430,  430,  431, 1348,  430,  430,  586,

      430,  430,  430,  649,  430,  652,  430,  433,  653, 1121,
     1349,  433,  430,  434,  430,  540,  645, 1350,  471,  472,
      646,  471,  654,  590, 1351,  649,  493,  593,  647,  493,
      653, 1352, 1121, 1353,  430,  433,  430, 1354,  645, 1355,
      494,  336,  646,  336,  336,  654,  336,  336,  336,  662,
     1357,  647,  662,  337,  662,  662,  665,  662,  662, 1362,
     1363,  430,  430,  430,  430,  542,  543,  493,  542, 1364,
      493,  540,  540,  540,  540,  368, 1367,  336, 1368,  336,
      336,  494,  336,  336,  336, 1369, 1370,  540,  540,  337,
      541, 1372,  382,  666,  670,  382, 1373, 1374, 1375,  670,

      670,  793,  388,  382,  793,  388,  382,  674,  794, 1376,
      541,  368,  388,  380,  672,  388,  673,  389,  389,  866,
      667,  544,  866,  380,  380,  663,  663,  389, 1377,  677,
      678,  388,  677,  380,  388,  476,  477, 1378,  476,  540,
      357,  357,  357,  357,  679,  794,  674, 1379,  425,  426,
      680, 1380,  380,  426,  337,  651,  357,  357,  651,  625,
      407,  407,  407,  407,  380, 1381, 1080,  407,  407,  407,
      407, 1382,  794, 1080,  380,  380,  408,  426,  652,  625,
     1080,  409,  879,  408,  380,  879,  361,  362,  409,  415,
      419,  419,  419,  419, 1383, 1593,  426,  420,  363,  493,

      426,  680,  493,  380, 1384,  364, 1385,  365,  366,  357,
      357,  357,  357,  494,  407,  407,  407,  407, 1386, 1387,
      419,  419,  419,  419,  426,  357,  357,  420,  625, 1388,
      408,  413,  413,  413,  413,  409,  415,  786,  410, 1390,
      786, 1391, 1593, 1593, 1593, 1593, 1392,  408,  625, 1593,
      481,  482,  409,  481,  793,  361,  362,  793, 1593,  626,
      652,  489,  490, 1593,  489, 1393, 1394,  363, 1593, 1593,
     1593, 1593, 1395, 1396,  364, 1593,  365,  366,  633,  502,
      503,  633,  502,  633,  633,  633,  633,  633,  633,  633,
      634,  633,  635,  633,  635,  636,  633, 1397, 1398, 1399,

      633,  633,  633,  633,  638,  412,  413,  413,  413,  413,
     1400, 1401, 1402,  410,  425,  426, 1593,  435,  892,  426,
     1593,  892,  408,  633,  633,  633, 1403,  409,  437,  438,
      435, 1593,  438,  438, 1405,  435,  438,  701, 1593, 1409,
      701,  437,  438,  426,  487,  488,  438,  451,  435,  488,
      633,  633,  633,  633,  633,  633,  662,  438,  694,  662,
      438, 1410, 1593, 1593, 1593, 1593,  443,  443,  443,  443,
      438, 1593,  488,  488,  513,  514,  488,  513, 1593, 1593,
      412, 1593,  444,  522,  523,  699,  522,  445,  449,  449,
      449,  449, 1411, 1414, 1415,  446, 1593, 1593, 1593, 1593,

      488, 1593, 1416, 1593,  444,  450,  443,  443,  450,  445,
      527,  528, 1593,  527, 1417,  451, 1419, 1593, 1420,  487,
      488,  444,  531,  532,  488,  531,  445,  663, 1421, 1593,
     1593,  375, 1422, 1423,  375,  453,  453,  453,  453, 1424,
      393,  683,  454,  376,  376,  683,  377,  378,  488, 1425,
      379,  379,  380, 1426, 1427, 1428,  327,  449,  449,  449,
      449, 1080,  448,  710,  446,  450,  443,  443,  450,  683,
     1593,  542,  543,  444,  542,  451,  328,  701,  445, 1429,
      701,  444,  453,  453,  453,  453,  445,  451, 1430,  454,
      450,  443,  443,  450, 1593, 1593, 1593, 1593, 1431,  662,

      451, 1593,  662,  380,  430,  430,  444,  430,  430,  430,
      695,  445,  430,  430, 1432,  430,  430,  430, 1433,  430,
      866,  696,  433,  866, 1435, 1436,  433,  430,  434,  430,
     1437,  448,  456,  456,  456,  456,  462,  462,  462,  462,
     1438, 1439, 1440,  459,  456,  456,  456,  456,  457,  430,
      433,  430,  457,  458, 1441,  557,  558,  458,  557,  771,
      457,  563,  564, 1442,  563,  458, 1593, 1593, 1593, 1593,
      663,  580,  581, 1593,  580, 1443,  430,  430,  430,  430,
      430,  430, 1593,  430,  430,  430,  695, 1593,  430,  430,
     1444,  430,  430,  430, 1445,  430,  853,  430,  433,  853,

     1446, 1447,  433,  430,  430,  430,  467,  467,  467,  467,
      461, 1448, 1450,  468,  462,  462,  462,  462, 1453,  566,
      567,  459,  566, 1454, 1455,  430,  433,  430, 1458, 1459,
      457,  467,  467,  467,  467,  458,  584,  585,  468,  584,
     1593,  456,  456,  456,  456,  588,  589,  675,  588,  676,
      676,  676,  430,  430,  430,  430,  854,  457, 1593, 1593,
     1593, 1593,  458, 1460,  568, 1593,  497,  497,  497,  497,
     1461, 1463, 1464,  498,  497,  497,  497,  497,  591,  592,
      786,  591, 1465,  786,  499,  499,  499,  500,  461,  497,
      497,  497,  497, 1466, 1467,  500,  498,  497,  497,  497,

      497, 1468,  887,  652,  498,  887, 1469,  499,  499,  499,
      500,  505,  505,  505,  505,  713,  713,  713,  500,  511,
      511,  511,  511, 1470, 1471,  888,  508,  506,  505,  505,
      505,  505,  507, 1472, 1473,  506, 1593, 1593, 1593, 1593,
      507, 1474,  662, 1593,  506,  662, 1475,  662,  892,  507,
      662,  892, 1593,  516,  516,  516,  516, 1593, 1476, 1477,
      517,  511,  511,  511,  511, 1478, 1479, 1480,  508,  505,
      505,  505,  505,  516,  516,  516,  516,  506, 1011, 1481,
      517, 1012,  507, 1593,  683,  506,  662, 1482,  683,  662,
      507, 1483, 1484,  510, 1593, 1593, 1593, 1593,  798,  677,

      678, 1593,  677,  425,  693,  801,  677,  678,  693,  677,
     1593, 1485,  683,  663,  806, 1486, 1487, 1488,  663,  662,
      680,  807,  662,  662, 1489,  662,  662,  680,  662, 1490,
     1098,  670,  693, 1098, 1491,  510,  633,  803, 1493,  633,
     1496,  633,  633,  633,  633,  633,  633,  633,  634,  633,
      635,  633,  635,  775,  633, 1497, 1498,  663,  633,  633,
      633,  633,  638, 1229,  670, 1501, 1229, 1502,  670,  393,
      394,  680,  677,  678,  394,  677,  968,  959,  680,  968,
     1503,  633,  776,  633,  804, 1340,  805,  808, 1340, 1389,
      663, 1504, 1389,  680,  663, 1506,  663,  337,  394,  969,

     1593,  693,  487,  709, 1507,  693, 1508,  709,  633,  633,
      633,  633,  633,  633,  799,  799, 1509,  799,  809,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  693,
      799,  709,  799,  677,  678, 1510,  677,  799,  799,  799,
      799, 1593,  709, 1511,  680, 1512,  709, 1513,  807,  812,
      812,  812,  812, 1514,  680,  814,  814,  814,  814,  799,
      799,  799,  662,  425,  426,  662, 1434, 1080,  426, 1434,
      709,  340,  813,  336, 1406,  336,  878, 1406,  813,  393,
      394, 1515, 1516,  435,  394,  337,  799,  799,  797,  799,
      799,  799,  426, 1434,  437,  698, 1434,  662, 1517,  698,

      662,  435, 1518, 1519, 1521,  680,  662,  662,  394,  662,
      662, 1522,  816,  430,  430,  901,  430,  430,  430,  695,
     1523,  430,  430,  698,  430,  430,  430,  874,  430, 1593,
      430,  818,  435,  663, 1524,  818,  430,  430,  430,  971,
     1593,  698,  971,  437,  438,  698, 1520, 1593,  438, 1520,
      435,  487,  488,  893,  662, 1525,  488,  662,  430,  818,
      430, 1526,  888,  497,  497,  497,  497,  974,  663,  698,
      826,  896,  438, 1527, 1528, 1529,  892,  663,  663,  892,
      488,  827,  827,  827,  500,  430,  430,  430,  430, 1530,
     1531, 1532,  819, 1533,  829,  829,  829,  829, 1535,  670,

      825,  498,  497,  497,  497,  497,  898, 1538, 1539,  498,
      497,  497,  497,  497, 1540,  500,  662,  498, 1543,  662,
      713,  713,  713,  500,  662,  663, 1544,  662,  713,  713,
      713,  500,  799,  799, 1545,  799, 1546,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  975,  799,  662,
      799,  662,  662, 1548,  662,  799,  799,  799,  799,  677,
      678,  670,  677,  812,  812,  812,  812,  677,  678,  670,
      677,  340,  897,  336,  806,  336,  878,  799,  799,  799,
      680, 1549,  900, 1550, 1551,  337,  813,  663,  680,  899,
      814,  814,  814,  814, 1552,  663,  677,  678, 1553,  677,

     1054, 1554, 1555, 1556,  799,  799,  895,  799,  799,  799,
     1557,  808,  435,  813,  425,  426, 1053,  680, 1558,  426,
      663,  337,  663,  437,  438, 1559,  662,  567,  438,  662,
      435,  680, 1560, 1561,  662,  487,  488,  662,  662,  680,
      488,  662, 1562,  426,  829,  829,  829,  829, 1563, 1564,
      905,  498,  438, 1565, 1566, 1567,  393,  394, 1568,  906,
     1569,  394, 1570, 1571,  488,  500, 1572, 1573,  680,  430,
      430,  911,  430,  430,  430,  695,  662,  430,  430,  662,
      430,  430,  430,  670,  430,  394,  696,  818,  330, 1043,
      976,  818,  430,  434,  430, 1578, 1290,  663,  977,  497,

      497,  497,  497,  980, 1050,  663,  826, 1050,  971,  663,
      662,  971,  670,  662,  430,  818,  430,  827,  827,  827,
      500,  923,  924,  393,  394, 1585,  925,  969,  394,  926,
      927,  888, 1577, 1289,  928, 1577, 1116,  929,  930,  670,
      931,  430,  430,  430,  430,  430,  430,  663,  430,  430,
      430,  695,  394,  430,  430,  670,  430,  430,  430, 1580,
      430,  662,  430,  818,  662, 1194, 1288,  818,  430,  430,
      430,  662,  670,  978,  662,  497,  497,  497,  497,  670,
     1287,  663,  826,  677,  678, 1050,  677, 1579, 1050, 1286,
      430,  818,  430,  827,  827,  827,  500, 1582,  806, 1285,

      425,  426,  487,  488,  680,  426, 1125,  488,  969, 1125,
      435,  662,  662, 1124,  662,  662,  670,  430,  430,  430,
      430,  437,  438,  670,  670,  670,  438,  979,  435,  426,
     1581,  488,  663,  497,  497,  497,  497, 1284, 1587, 1583,
      826,  662,  663, 1186,  662,  662, 1186,  984,  662,  990,
      438,  991,  991,  991,  500,  680,  670,  670,  393,  394,
      425,  426,  670,  394,  662,  426, 1187,  662,  985,  487,
      488,  670, 1056, 1586,  488,  662, 1055,  663,  662,  435,
     1592, 1125,  663,  663, 1125,  670,  670,  394, 1584,  426,
      437,  438, 1057,  662,  670,  438,  662,  435,  488, 1191,

     1191, 1191, 1058, 1245, 1062, 1588, 1283,  497,  497,  497,
      497, 1304,  663, 1068,  826, 1125,  663, 1282, 1125,  438,
      670,  662,  670, 1127,  662,  991,  991,  991,  500,  497,
      497,  497,  497, 1281, 1063,  663,  826, 1589,  670,  393,
      394, 1280, 1279, 1278,  394, 1126,  663,  991,  991,  991,
      500,  425,  426,  670,  435,  670,  426, 1591,  487,  488,
      670, 1277, 1590,  488,  663,  437,  438, 1276,  394, 1181,
      438, 1128,  435,  662,  662,  662,  662,  662,  662, 1250,
      426, 1275, 1250, 1132,  425,  426,  663,  488,  435,  426,
     1138, 1274,  663,  662,  438,  662,  662, 1133,  662,  437,

      438, 1273, 1187, 1272,  438,  662,  435, 1271,  662,  487,
      488, 1270, 1250,  426,  488, 1250, 1269, 1268,  760,  670,
      670,  662, 1267, 1266,  662, 1265, 1198,  760,  438,  393,
      394,  760,  760, 1193,  394, 1187, 1190, 1192,  488, 1263,
      670, 1199,  425,  426,  663,  663,  663,  426, 1262, 1261,
      670, 1204, 1253, 1251,  662, 1252,  435,  662,  394,  662,
     1254, 1260,  662, 1257,  663, 1256,  663,  437,  438, 1306,
      760,  426,  438, 1258,  435, 1255,  663,  487,  488,  760,
      393,  394,  488,  760,  760,  394,  425,  426, 1248,  435,
      662,  426,  663,  662,  662, 1247,  438,  662, 1259,  670,

      437,  438, 1307, 1246,  670,  438,  488,  435, 1264,  394,
      662,  487,  488,  662, 1244,  426,  488, 1308,  662, 1243,
     1406,  662, 1309, 1406, 1406,  663, 1242, 1406, 1313,  438,
      663,  393,  394,  425,  426, 1241,  394, 1240,  426, 1239,
      488,  662, 1314,  662,  662, 1238,  662, 1237, 1356, 1236,
     1235, 1234, 1358, 1319,  662,  670, 1233,  662, 1232, 1231,
      394,  663,  426,  670,  435,  663, 1230,  662, 1359,  670,
      662, 1361, 1228, 1365, 1360,  437,  438, 1227,  487,  488,
      438,  663,  435,  488, 1226, 1225, 1224, 1223,  670,  663,
     1222,  663, 1221,  393,  394,  663, 1220, 1404,  394,  670,

      425,  426, 1219, 1407,  438,  426, 1451,  488,  435, 1218,
      662, 1217,  663,  662,  663, 1366,  487,  488, 1371,  437,
      438,  488,  394, 1216,  438,  663,  435, 1449, 1215,  426,
      393,  394, 1214, 1213, 1212,  394, 1211, 1408,  663,  435,
      662,  425,  426,  662, 1412,  488,  426, 1210,  438,  662,
      437,  438,  662,  487,  488,  438, 1209,  435,  488,  394,
     1418, 1208, 1492, 1413,  393,  394, 1452,  425,  426,  394,
      426, 1207,  426,  662, 1206,  662,  662, 1456,  662,  438,
     1205,  663,  488,  487,  488,  670, 1457, 1203,  488, 1462,
      435, 1202, 1201,  394,  670, 1200,  426, 1495, 1494, 1197,

     1499,  437,  438, 1536,  393,  394,  438, 1196,  435,  394,
     1195,  663,  488,  425,  426, 1189, 1505, 1188,  426, 1185,
      663, 1184, 1534,  487,  488,  435, 1575,  330,  488, 1575,
      438, 1183, 1577,  394, 1500, 1577,  437,  438, 1574, 1182,
     1180,  438,  426,  435,  663, 1179,  663, 1178,  393,  394,
     1177, 1537,  488,  394, 1176, 1175,  425,  426,  487,  488,
     1541,  426,  435,  488, 1174,  438, 1575,  330, 1173, 1575,
     1547, 1576, 1172,  437,  438, 1171, 1170,  394,  438, 1169,
      435,  329,  330, 1542,  329,  426,  400,  488, 1168,  400,
      400,  400, 1167, 1166, 1165,  492,  400,  663,  492,  492,

      492, 1164,  438,  663,  496,  492, 1163,  496,  496,  496,
     1162,  331,  519, 1160,  496,  519,  519,  519, 1159, 1158,
      795, 1157,  519,  795,  795,  795, 1576,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  122,  122,  122,

      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,

      186,  186,  186,  186,  186,  186,  186,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,

      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  279,  279,  279,  279,  279,  279,  279,  279,

      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  304,  304,  304,

      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  332,  332, 1156,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  332,  332,  332,  335,  594, 1155,
     1154,  594,  594,  594, 1153, 1152,  599, 1151,  594,  599,
      599,  599, 1150, 1148,  335, 1080,  599,  335,  335,  335,
     1147, 1146, 1145, 1144,  335,  336, 1143,  336,  336,  659,
      336, 1142,  659,  659,  659,  336,  336, 1141,  659,  336,
      336,  336,  343, 1140,  343,  343,  343,  343,  802,  343,
     1139,  802,  802,  802,  343,  343,  343, 1137,  343,  343,
      343,  360,  360,  360,  360, 1136, 1135, 1134,  795, 1131,
      360,  795,  795,  795, 1130,  360,  360, 1129,  360,  360,
      360, 1123,  360,  360,  360,  360, 1122,  360,  360,  367,

      969,  367,  367,  802,  367, 1120,  802,  802,  802,  367,
      367, 1119, 1118,  367,  367,  367,  369,  369,  369,  369,
     1117, 1115, 1114,  802,  802,  369,  802,  802,  802, 1113,
      369,  369, 1112,  369,  369,  369, 1111,  369,  369,  369,
      369, 1110,  369,  369,  390,  390, 1109,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  392,
     1108, 1107,  392, 1106, 1105, 1104,  392, 1103,  392,  392,
      392,  392,  392, 1102, 1101, 1100,  392,  392,  392, 1099,

      392,  392,  392, 1097, 1096, 1093, 1092,  392,  402, 1091,
      402,  402, 1090, 1089, 1088, 1087,  402, 1086, 1085,  402,
      402,  402, 1084, 1080, 1083, 1082,  402,  411,  411,  411,
      411,  335, 1081,  411,  335,  335,  335, 1078, 1077, 1076,
     1075,  335,  411, 1074, 1073,  411, 1072, 1071, 1070, 1069,
      411, 1067, 1066,  411,  411,  411,  669, 1065, 1064,  411,
      411,  414,  414,  414,  414,  669, 1061, 1060,  669,  669,
      669, 1059, 1052, 1051,  888, 1047,  414, 1046,  414,  414,
      414, 1045,  774, 1044,  414, 1042, 1041,  414,  414,  414,
     1040, 1039, 1038, 1037,  414,  421,  421,  421,  421,  711,

     1036,  421,  711,  711,  711, 1035, 1034,  400, 1033,  711,
      400,  400,  400, 1032, 1031, 1030, 1027,  400,  421, 1026,
     1025,  421,  421,  421, 1022, 1021, 1020, 1019,  421,  422,
      422, 1017,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  424, 1016, 1015,  424, 1014, 1013,
     1010,  424, 1009,  424,  424,  424,  424,  424, 1006, 1005,
     1004,  424,  424,  424, 1003,  424,  424,  424, 1002, 1001,
     1000,  999,  424,  432,  432,  998,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  436,  436,
      997,  996,  436,  995,  994,  993,  436,  989,  436,  436,
      436,  436,  436,  988,  436,  987,  436,  436,  436,  986,
      436,  436,  436,  669,  983,  982,  981,  436,  447,  447,
      447,  447,  669,  975,  447,  669,  669,  669,  973,  972,
      965,  964,  963,  447,  962,  774,  447,  960,  958,  957,
      956,  447,  617,  954,  447,  447,  447,  953,  952,  951,
      447,  447,  452,  452,  452,  452,  950,  949,  948,  947,

      946,  452,  945,  944,  943,  942,  941,  452,  940,  452,
      452,  939,  938,  937,  936,  452,  935,  934,  452,  452,
      452,  933,  932,  922,  921,  452,  455,  455,  455,  455,
      719,  920,  455,  719,  719,  719,  919,  918,  726,  917,
      719,  726,  726,  726,  916,  915,  520,  914,  726,  455,
      913,  910,  455,  455,  455,  909,  908,  907,  904,  455,
      460,  460,  460,  460,  594,  903,  460,  594,  594,  594,
      902,  670,  894,  797,  594,  460,  891,  890,  460,  652,
      883,  882,  880,  460,  876,  875,  460,  460,  460,  873,
      872,  871,  460,  460,  463,  463,  463,  463,  599,  617,

      868,  599,  599,  599,  867,  758,  865,  864,  599,  463,
      863,  463,  463,  862,  861,  860,  859,  463,  858,  857,
      463,  463,  463,  856,  855,  852,  851,  463,  469,  469,
      469,  469,  912,  850,  469,  912,  912,  912,  848,  847,
      846,  845,  912,  844,  843,  842,  841,  840,  839,  837,
      836,  469,  835,  834,  469,  469,  469,  833,  520,  831,
      830,  469,  470,  824,  823,  470,  822,  821,  820,  415,
      815,  470,  811,  810,  470,  470,  470,  797,  792,  791,
      790,  470,  474,  474,  781,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,

      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  479,  479,  780,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  484,  484,  778,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  486,  777, 1593,
      486,  337,  337,  337,  486,  774,  486,  486,  486,  486,

      486,  629,  772,  770,  486,  486,  486,  769,  486,  486,
      486,  768,  767,  766,  617,  486,  495,  761,  759,  495,
      756,  753,  752,  600,  751,  750,  595,  749,  748,  495,
      747,  746,  745,  495,  741,  740,  739,  737,  734,  495,
      569,  733,  495,  495,  495,  732,  731,  730,  729,  495,
      501,  501,  501,  501,  550,  550,  501,  728,  727,  725,
      544,  539,  724,  723,  722,  721,  526,  501,  501,  720,
      520,  718,  520,  501,  716,  506,  501,  501,  501,  715,
      712,  485,  707,  501,  509,  509,  509,  509,  480,  706,
      509,  475,  705,  703,  457,  444,  695,  695,  695,  509,

      423,  415,  509,  690,  408,  687,  401,  509,  686,  685,
      509,  509,  509,  391,  374,  668,  509,  509,  512,  512,
      512,  512,  664,  658,  657,  656,  337,  337,  629,  333,
      627,  624,  623,  512,  620,  512,  512,  618,  617,  613,
      611,  512,  610,  608,  512,  512,  512,  606,  605,  603,
      598,  512,  518,  518,  518,  518,  569,  555,  518,  554,
      553,  551,  550,  546,  539,  535,  526,  520,  506,  485,
      480,  475,  457,  444,  423,  518,  423,  408,  518,  518,
      518,  391,  374,  337,  334,  518,  521,  333,  521, 1593,
     1593, 1593, 1593, 1593,  521, 1593, 1593,  521,  521,  521,

     1593, 1593, 1593, 1593,  521,  525,  525, 1593,  525, 1593,
     1593, 1593, 1593, 1593,  525, 1593, 1593,  525,  525,  525,
     1593, 1593, 1593, 1593,  525,  530,  530, 1593,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
     1593,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      534, 1593, 1593,  534, 1593, 1593, 1593, 1593, 1593,  534,
     1593, 1593,  534,  534,  534, 1593, 1593, 1593, 1593,  534,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,

      536,  536,  536, 1593,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  538,  538, 1593,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538, 1593,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      545, 1593, 1593,  545, 1593, 1593, 1593, 1593, 1593,  545,
     1593, 1593,  545,  545,  545, 1593, 1593, 1593, 1593,  545,
      549,  549, 1593,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,

      549,  549,  549,  549,  549,  552,  552, 1593,  552, 1593,
      552,  552,  552,  552,  552,  552,  552, 1593,  552,  552,
      552,  552, 1593,  552,  552,  552,  552,  552, 1593,  552,
     1593,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      562, 1593, 1593,  562, 1593, 1593, 1593, 1593, 1593,  562,
     1593, 1593, 1593, 1593,  562,  562, 1593,  562, 1593, 1593,
     1593, 1593, 1593,  562, 1593, 1593,  562,  562,  562,  570,
      570, 1593,  570, 1593,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570, 1593,  570, 1593,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  574,  574, 1593,  574, 1593,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574, 1593,  574, 1593,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  583,
     1593, 1593,  583, 1593, 1593, 1593, 1593, 1593,  583, 1593,
     1593,  583,  583,  583, 1593, 1593, 1593, 1593,  583,  587,
      587, 1593,  587,  587,  587,  587,  587,  587,  587, 1593,
     1593,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587, 1593,  587, 1593,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  596, 1593,  596,  596, 1593, 1593,

     1593, 1593,  596, 1593, 1593,  596,  596,  596, 1593, 1593,
     1593, 1593,  596,  601, 1593,  601,  601, 1593, 1593, 1593,
     1593,  601, 1593, 1593,  601,  601,  601, 1593, 1593, 1593,
     1593,  601,  604,  604, 1593,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604, 1593,  604, 1593,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  607, 1593, 1593,
      607, 1593, 1593, 1593, 1593, 1593,  607, 1593, 1593,  607,
      607,  607, 1593, 1593, 1593, 1593,  607,  609,  609, 1593,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,

      609,  609, 1593,  609,  609,  609,  609,  609,  609,  609,
      609,  609, 1593,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  612,  612, 1593,  612,  612,  612,  612,  612,
      612,  612,  612,  612, 1593,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612, 1593,  612, 1593,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  615, 1593, 1593,
      615, 1593, 1593, 1593,  615, 1593,  615, 1593, 1593,  615,
      615,  615, 1593, 1593, 1593, 1593,  615,  616, 1593,  616,
      616,  616,  616,  616, 1593, 1593,  616, 1593,  616, 1593,
     1593,  616,  616,  616, 1593, 1593, 1593, 1593,  616,  619,

      619, 1593,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619, 1593,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621, 1593, 1593,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  622,
      622, 1593,  622,  622,  622,  622,  622,  622, 1593,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622, 1593,
     1593,  622,  622,  622, 1593, 1593,  622,  622,  622,  622,

      622,  622,  622,  622,  360,  360,  360,  360, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,  360,  360,
     1593,  360,  360,  360, 1593,  360,  360,  360,  360, 1593,
      360,  360,  332,  332, 1593,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  628,  628, 1593,
     1593, 1593, 1593,  628, 1593, 1593,  628,  628,  628, 1593,
     1593, 1593, 1593,  628,  336, 1593,  336,  336, 1593,  336,
     1593, 1593, 1593, 1593,  336,  336, 1593, 1593,  336,  336,

      336,  630, 1593, 1593,  630, 1593, 1593, 1593, 1593, 1593,
      630, 1593, 1593,  630,  630,  630,  637, 1593, 1593,  637,
     1593,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  367, 1593,  367,  367, 1593,  367, 1593, 1593, 1593,
     1593,  367,  367, 1593, 1593,  367,  367,  367,  369, 1593,
     1593,  369, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593,  369,  369, 1593,  369,  369,  369,  369,  390,  390,

     1593,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  392, 1593, 1593,  392, 1593, 1593, 1593,
      392, 1593,  392,  392,  392,  392,  392, 1593, 1593, 1593,
      392,  392,  392, 1593,  392,  392,  392, 1593, 1593, 1593,
     1593,  392,  682, 1593, 1593,  682, 1593, 1593, 1593,  682,
     1593,  682, 1593,  682,  682,  682, 1593, 1593, 1593,  682,
      682,  682, 1593,  682,  682,  682, 1593, 1593, 1593, 1593,
      682,  402, 1593,  402,  402, 1593, 1593, 1593, 1593,  402,

     1593, 1593,  402,  402,  402, 1593, 1593, 1593, 1593,  402,
      400, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593,  400, 1593, 1593,
      400,  400,  400, 1593, 1593, 1593, 1593,  400,  411,  411,
      411,  411, 1593, 1593,  411, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593,  411, 1593, 1593,  411, 1593, 1593, 1593,
     1593,  411, 1593, 1593,  411,  411,  411, 1593, 1593, 1593,
      411,  411,  414,  414,  414,  414, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593,  414, 1593,  414,
      414,  414, 1593, 1593, 1593,  414, 1593, 1593,  414,  414,

      414, 1593, 1593, 1593, 1593,  414,  421,  421,  421,  421,
     1593, 1593,  421, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,  421,
     1593, 1593,  421,  421,  421, 1593, 1593, 1593, 1593,  421,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688, 1593,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  691, 1593,  691, 1593, 1593,
     1593,  691, 1593, 1593,  691,  691,  691, 1593, 1593, 1593,
     1593,  691,  422,  422, 1593,  422,  422,  422,  422,  422,

      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  424, 1593, 1593,
      424, 1593, 1593, 1593,  424, 1593,  424,  424,  424,  424,
      424, 1593, 1593, 1593,  424,  424,  424, 1593,  424,  424,
      424, 1593, 1593, 1593, 1593,  424,  692, 1593, 1593,  692,
     1593, 1593, 1593,  692, 1593,  692, 1593,  692,  692,  692,
     1593, 1593, 1593,  692,  692,  692, 1593,  692,  692,  692,
     1593, 1593, 1593, 1593,  692,  430,  430, 1593,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,

      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      432,  432, 1593,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  436,  436, 1593, 1593,  436,
     1593, 1593, 1593,  436, 1593,  436,  436,  436,  436,  436,
     1593,  436, 1593,  436,  436,  436, 1593,  436,  436,  436,
     1593, 1593, 1593, 1593,  436,  697, 1593, 1593,  697, 1593,
     1593, 1593,  697, 1593,  697, 1593,  697,  697,  697, 1593,

     1593, 1593,  697,  697,  697, 1593,  697,  697,  697, 1593,
     1593, 1593, 1593,  697,  447,  447,  447,  447, 1593, 1593,
      447, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,  447,
     1593, 1593,  447, 1593, 1593, 1593, 1593,  447, 1593, 1593,
      447,  447,  447, 1593, 1593, 1593,  447,  447,  452,  452,
      452,  452, 1593, 1593, 1593, 1593, 1593,  452, 1593, 1593,
     1593, 1593, 1593,  452, 1593,  452,  452, 1593, 1593, 1593,
     1593,  452, 1593, 1593,  452,  452,  452, 1593, 1593, 1593,
     1593,  452,  455,  455,  455,  455, 1593, 1593,  455, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

     1593, 1593, 1593, 1593, 1593,  455, 1593, 1593,  455,  455,
      455, 1593, 1593, 1593, 1593,  455,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700, 1593,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  702, 1593, 1593,  702, 1593, 1593, 1593, 1593, 1593,
      702, 1593, 1593, 1593, 1593, 1593, 1593, 1593,  702, 1593,
     1593, 1593, 1593, 1593,  702, 1593, 1593,  702,  702,  702,
     1593, 1593, 1593, 1593,  702,  460,  460,  460,  460, 1593,
     1593,  460, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

      460, 1593, 1593,  460, 1593, 1593, 1593, 1593,  460, 1593,
     1593,  460,  460,  460, 1593, 1593, 1593,  460,  460,  463,
      463,  463,  463, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593,  463, 1593,  463,  463, 1593, 1593,
     1593, 1593,  463, 1593, 1593,  463,  463,  463, 1593, 1593,
     1593, 1593,  463,  469,  469,  469,  469, 1593, 1593,  469,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593,  469, 1593, 1593,  469,
      469,  469, 1593, 1593, 1593, 1593,  469,  704, 1593, 1593,
     1593, 1593, 1593,  704, 1593, 1593,  704,  704,  704, 1593,

     1593, 1593, 1593,  704,  470, 1593, 1593,  470, 1593, 1593,
     1593, 1593, 1593,  470, 1593, 1593,  470,  470,  470, 1593,
     1593, 1593, 1593,  470,  474,  474, 1593,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  479,
      479, 1593,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  484,  484, 1593,  484,  484,  484,

      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  486,
     1593, 1593,  486, 1593, 1593, 1593,  486, 1593,  486,  486,
      486,  486,  486, 1593, 1593, 1593,  486,  486,  486, 1593,
      486,  486,  486, 1593, 1593, 1593, 1593,  486,  708, 1593,
     1593,  708, 1593, 1593, 1593,  708, 1593,  708, 1593,  708,
      708,  708, 1593, 1593, 1593,  708,  708,  708, 1593,  708,
      708,  708, 1593, 1593, 1593, 1593,  708,  495, 1593, 1593,
      495, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

      495, 1593, 1593, 1593,  495, 1593, 1593, 1593, 1593, 1593,
      495, 1593, 1593,  495,  495,  495, 1593, 1593, 1593, 1593,
      495,  501,  501,  501,  501, 1593, 1593,  501, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,  501,  501,
     1593, 1593, 1593, 1593,  501, 1593, 1593,  501,  501,  501,
     1593, 1593, 1593, 1593,  501,  714,  714,  714,  714, 1593,
     1593,  714, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593,  714,  714, 1593, 1593, 1593, 1593,  714, 1593,
     1593,  714,  714,  714, 1593, 1593, 1593, 1593,  714,  509,
      509,  509,  509, 1593, 1593,  509, 1593, 1593, 1593, 1593,

     1593, 1593, 1593, 1593,  509, 1593, 1593,  509, 1593, 1593,
     1593, 1593,  509, 1593, 1593,  509,  509,  509, 1593, 1593,
     1593,  509,  509,  512,  512,  512,  512, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,  512, 1593,
      512,  512, 1593, 1593, 1593, 1593,  512, 1593, 1593,  512,
      512,  512, 1593, 1593, 1593, 1593,  512,  518,  518,  518,
      518, 1593, 1593,  518, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
      518, 1593, 1593,  518,  518,  518, 1593, 1593, 1593, 1593,
      518,  717, 1593, 1593, 1593, 1593, 1593,  717, 1593, 1593,

      717,  717,  717, 1593, 1593, 1593, 1593,  717,  521, 1593,
      521, 1593, 1593, 1593, 1593, 1593,  521, 1593, 1593,  521,
      521,  521, 1593, 1593, 1593, 1593,  521,  719, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593,  719, 1593, 1593,  719,  719,  719,
     1593, 1593, 1593, 1593,  719,  525,  525, 1593,  525, 1593,
     1593, 1593, 1593, 1593,  525, 1593, 1593,  525,  525,  525,
     1593, 1593, 1593, 1593,  525,  530,  530, 1593,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,

     1593,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      534, 1593, 1593,  534, 1593, 1593, 1593, 1593, 1593,  534,
     1593, 1593,  534,  534,  534, 1593, 1593, 1593, 1593,  534,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536, 1593,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  538,  538, 1593,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538, 1593,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,

      726, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593,  726, 1593, 1593,
      726,  726,  726, 1593, 1593, 1593, 1593,  726,  545, 1593,
     1593,  545, 1593, 1593, 1593, 1593, 1593,  545, 1593, 1593,
      545,  545,  545, 1593, 1593, 1593, 1593,  545,  549,  549,
     1593,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  552,  552, 1593,  552, 1593,  552,  552,
      552,  552,  552,  552,  552, 1593,  552,  552,  552,  552,

     1593,  552,  552,  552,  552,  552, 1593,  552, 1593,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  562, 1593,
     1593,  562, 1593, 1593, 1593, 1593, 1593,  562, 1593, 1593,
     1593, 1593,  562,  562, 1593,  562, 1593, 1593, 1593, 1593,
     1593,  562, 1593, 1593,  562,  562,  562,  570,  570, 1593,
      570, 1593,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
     1593,  570, 1593,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  574,  574, 1593,  574, 1593,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574, 1593,  574, 1593,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  583, 1593, 1593,
      583, 1593, 1593, 1593, 1593, 1593,  583, 1593, 1593,  583,
      583,  583, 1593, 1593, 1593, 1593,  583,  587,  587, 1593,
      587,  587,  587,  587,  587,  587,  587, 1593, 1593,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
     1593,  587, 1593,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  596, 1593,  596,  596, 1593, 1593, 1593, 1593,
      596, 1593, 1593,  596,  596,  596, 1593, 1593, 1593, 1593,
      596,  594, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,  594, 1593,
     1593,  594,  594,  594, 1593, 1593, 1593, 1593,  594,  601,
     1593,  601,  601, 1593, 1593, 1593, 1593,  601, 1593, 1593,
      601,  601,  601, 1593, 1593, 1593, 1593,  601,  599, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593,  599, 1593, 1593,  599,  599,
      599, 1593, 1593, 1593, 1593,  599,  604,  604, 1593,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604, 1593,
      604, 1593,  604,  604,  604,  604,  604,  604,  604,  604,

      604,  607, 1593, 1593,  607, 1593, 1593, 1593, 1593, 1593,
      607, 1593, 1593,  607,  607,  607, 1593, 1593, 1593, 1593,
      607,  609,  609, 1593,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609, 1593,  609,  609,  609,
      609,  609,  609,  609,  609,  609, 1593,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  612,  612, 1593,  612,
      612,  612,  612,  612,  612,  612,  612,  612, 1593,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612, 1593,
      612, 1593,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  763, 1593, 1593, 1593, 1593, 1593, 1593, 1593,  763,

     1593,  763,  763,  763,  763,  763, 1593, 1593,  763, 1593,
      763, 1593, 1593,  763,  763,  763, 1593, 1593, 1593, 1593,
      763,  616, 1593,  616,  616,  616,  616,  616, 1593, 1593,
      616, 1593,  616, 1593, 1593,  616,  616,  616, 1593, 1593,
     1593, 1593,  616,  765, 1593, 1593,  765, 1593, 1593, 1593,
      765, 1593,  765, 1593, 1593,  765,  765,  765, 1593, 1593,
     1593, 1593,  765,  619,  619, 1593,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619, 1593,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  621, 1593, 1593,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  622,  622, 1593,  622,  622,  622,  622,
      622,  622, 1593,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622, 1593, 1593,  622,  622,  622, 1593, 1593,
      622,  622,  622,  622,  622,  622,  622,  622,  360, 1593,
     1593,  360, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593,  360, 1593, 1593,  360,  360,  360,  360,  628,  628,

     1593, 1593, 1593, 1593,  628, 1593, 1593,  628,  628,  628,
     1593, 1593, 1593, 1593,  628,  773,  773, 1593,  773,  773,
      773,  773, 1593,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      630,  630, 1593,  630, 1593, 1593, 1593, 1593, 1593,  630,
     1593, 1593,  630,  630,  630,  336, 1593,  336,  336, 1593,
      336, 1593, 1593, 1593, 1593,  336,  336, 1593, 1593,  336,
      336,  336,  637, 1593, 1593,  637, 1593,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,

      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  785,  785, 1593,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  659, 1593, 1593,  659, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593,  659, 1593, 1593,  659,  659,
      659,  796, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593,  796, 1593,  796, 1593,  796,  796, 1593, 1593, 1593,

     1593,  796, 1593, 1593,  796,  796,  796, 1593, 1593,  796,
      800,  800, 1593,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  369, 1593, 1593,  369, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,  369,  369,
     1593,  369,  369,  369,  369,  682, 1593, 1593,  682, 1593,
     1593, 1593,  682, 1593,  682,  682,  682,  682,  682, 1593,
     1593, 1593,  682,  682,  682, 1593,  682,  682,  682, 1593,

     1593, 1593, 1593,  682,  392, 1593, 1593,  392, 1593, 1593,
     1593,  392, 1593,  392,  392,  392,  392,  392, 1593, 1593,
     1593,  392,  392,  392, 1593,  392,  392,  392, 1593, 1593,
     1593, 1593,  392,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  691, 1593,
      691, 1593, 1593, 1593,  691, 1593, 1593,  691,  691,  691,
     1593, 1593, 1593, 1593,  691,  692, 1593, 1593,  692, 1593,
     1593, 1593,  692, 1593,  692,  692,  692,  692,  692, 1593,

     1593, 1593,  692,  692,  692, 1593,  692,  692,  692, 1593,
     1593, 1593, 1593,  692,  424, 1593, 1593,  424, 1593, 1593,
     1593,  424, 1593,  424,  424,  424,  424,  424, 1593, 1593,
     1593,  424,  424,  424, 1593,  424,  424,  424, 1593, 1593,
     1593, 1593,  424,  817,  817, 1593,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  697,  697,
     1593, 1593,  697, 1593, 1593, 1593,  697, 1593,  697,  697,
      697,  697,  697, 1593,  697, 1593,  697,  697,  697, 1593,

      697,  697,  697, 1593, 1593, 1593, 1593,  697,  436,  436,
     1593, 1593,  436, 1593, 1593, 1593,  436, 1593,  436,  436,
      436,  436,  436, 1593,  436, 1593,  436,  436,  436, 1593,
      436,  436,  436, 1593, 1593, 1593, 1593,  436,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  702, 1593, 1593,  702, 1593, 1593, 1593,
     1593, 1593,  702, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
      702, 1593, 1593, 1593, 1593, 1593,  702, 1593, 1593,  702,

      702,  702, 1593, 1593, 1593, 1593,  702,  704, 1593, 1593,
     1593, 1593, 1593,  704, 1593, 1593,  704,  704,  704, 1593,
     1593, 1593, 1593,  704,  708, 1593, 1593,  708, 1593, 1593,
     1593,  708, 1593,  708,  708,  708,  708,  708, 1593, 1593,
     1593,  708,  708,  708, 1593,  708,  708,  708, 1593, 1593,
     1593, 1593,  708,  486, 1593, 1593,  486, 1593, 1593, 1593,
      486, 1593,  486,  486,  486,  486,  486, 1593, 1593, 1593,
      486,  486,  486, 1593,  486,  486,  486, 1593, 1593, 1593,
     1593,  486,  828,  828,  828,  828, 1593, 1593,  828, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,  828,

      828, 1593, 1593, 1593, 1593,  828, 1593, 1593,  828,  828,
      828, 1593, 1593, 1593, 1593,  828,  711,  711,  711,  711,
     1593, 1593,  711, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593,  711, 1593, 1593, 1593, 1593,  711,
     1593, 1593,  711,  711,  711, 1593, 1593, 1593, 1593,  711,
      714,  714,  714,  714, 1593, 1593,  714, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593,  714,  714, 1593,
     1593, 1593, 1593,  714, 1593, 1593,  714,  714,  714, 1593,
     1593, 1593, 1593,  714,  717, 1593, 1593, 1593, 1593, 1593,
      717, 1593, 1593,  717,  717,  717, 1593, 1593, 1593, 1593,

      717,  832, 1593,  832, 1593, 1593, 1593, 1593, 1593,  832,
     1593, 1593,  832,  832,  832, 1593, 1593, 1593, 1593,  832,
      838, 1593, 1593, 1593, 1593, 1593,  838, 1593, 1593,  838,
      838,  838, 1593, 1593, 1593, 1593,  838,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849, 1593,  849,  849,  849,  849,
      849, 1593,  849,  849, 1593, 1593,  849,  849,  849,  849,
      849,  849,  763, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
      763, 1593,  763,  763,  763,  763,  763, 1593, 1593,  763,
     1593,  763, 1593, 1593,  763,  763,  763, 1593, 1593, 1593,

     1593,  763,  869, 1593, 1593,  869, 1593, 1593, 1593,  869,
     1593,  869, 1593, 1593,  869,  869,  869, 1593, 1593, 1593,
     1593,  869,  870, 1593,  870,  870,  870,  870,  870, 1593,
     1593,  870, 1593,  870, 1593, 1593,  870,  870,  870, 1593,
     1593, 1593, 1593,  870,  360, 1593, 1593,  360, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593,  360, 1593, 1593,
      360,  360,  360,  360,  773,  773, 1593,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  877,
     1593, 1593,  877, 1593, 1593, 1593, 1593, 1593,  877, 1593,
     1593,  877,  877,  877,  343, 1593,  343, 1593,  343,  343,
     1593,  343, 1593, 1593, 1593, 1593,  343,  343, 1593, 1593,
      343,  343,  343,  785,  785, 1593,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  796, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,  796, 1593,
      796, 1593,  796,  796, 1593, 1593, 1593, 1593,  796, 1593,

     1593,  796,  796,  796, 1593, 1593,  796,  799,  799, 1593,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  800,  800, 1593,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  369, 1593, 1593,
      369, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

      369,  369, 1593,  369,  369,  369,  369,  336,  336, 1593,
      336, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,  336,
     1593,  336,  336, 1593,  336,  336, 1593, 1593, 1593,  336,
      336, 1593, 1593,  336,  336,  336, 1593,  336,  392, 1593,
     1593,  392, 1593, 1593, 1593,  392, 1593,  392,  392,  392,
      392,  392, 1593, 1593, 1593,  392,  392,  392, 1593,  392,
      392,  392, 1593, 1593, 1593, 1593,  392,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,

      688,  688,  424, 1593, 1593,  424, 1593, 1593, 1593,  424,
     1593,  424,  424,  424,  424,  424, 1593, 1593, 1593,  424,
      424,  424, 1593,  424,  424,  424, 1593, 1593, 1593, 1593,
      424,  817,  817, 1593,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  436,  436, 1593, 1593,
      436, 1593, 1593, 1593,  436, 1593,  436,  436,  436,  436,
      436, 1593,  436, 1593,  436,  436,  436, 1593,  436,  436,
      436, 1593, 1593, 1593, 1593,  436,  486, 1593, 1593,  486,

     1593, 1593, 1593,  486, 1593,  486,  486,  486,  486,  486,
     1593, 1593, 1593,  486,  486,  486, 1593,  486,  486,  486,
     1593, 1593, 1593, 1593,  486,  828,  828,  828,  828, 1593,
     1593,  828, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593,  828,  828, 1593, 1593, 1593, 1593,  828, 1593,
     1593,  828,  828,  828, 1593, 1593, 1593, 1593,  828,  711,
      711,  711,  711, 1593, 1593,  711, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593,  711, 1593, 1593,
     1593, 1593,  711, 1593, 1593,  711,  711,  711, 1593, 1593,
     1593, 1593,  711,  832, 1593,  832, 1593, 1593, 1593, 1593,

     1593,  832, 1593, 1593,  832,  832,  832, 1593, 1593, 1593,
     1593,  832,  838, 1593, 1593, 1593, 1593, 1593,  838, 1593,
     1593,  838,  838,  838, 1593, 1593, 1593, 1593,  838,  955,
     1593, 1593, 1593, 1593, 1593, 1593, 1593,  955, 1593,  955,
      955,  955,  955,  955, 1593, 1593,  955, 1593,  955, 1593,
     1593,  955,  955,  955, 1593, 1593, 1593, 1593,  955,  870,
     1593,  870,  870,  870,  870,  870, 1593, 1593,  870, 1593,
      870, 1593, 1593,  870,  870,  870, 1593, 1593, 1593, 1593,
      870,  961,  961, 1593,  961, 1593, 1593, 1593, 1593, 1593,
      961, 1593, 1593,  961,  961,  961,  970,  970, 1593,  970,

      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  992,  992,  992,  992, 1593, 1593,  992, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,  992,  992,
     1593, 1593, 1593, 1593,  992, 1593, 1593,  992,  992,  992,
     1593, 1593, 1593, 1593,  992, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1593, 1018, 1018, 1018, 1018, 1018, 1593,
     1018, 1018, 1593, 1018, 1593, 1018, 1018, 1018, 1018, 1018,

     1049, 1049, 1593, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1593, 1094, 1094, 1094, 1094, 1094, 1593,
     1094, 1094, 1593, 1593, 1593, 1094, 1094, 1094, 1094, 1094,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1593, 1095,
     1095, 1095, 1095, 1095, 1593, 1095, 1095, 1593, 1593, 1593,

     1095, 1095, 1095, 1095, 1095, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1593, 1149, 1149, 1149, 1149, 1149, 1593,
     1149, 1149, 1593, 1593, 1593, 1149, 1149, 1149, 1149, 1149,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1593, 1161,
     1161, 1161, 1161, 1161, 1593, 1161, 1161, 1593, 1593, 1593,
     1161, 1161, 1161, 1161, 1161, 1249, 1249, 1593, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,

     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
       93, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593
    } ;

static yyconst flex_int16_t yy_chk[11590] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    4,    7,
        8,    4,   25,   26,   27,   28,   25,   26,   27,   28,
        4,    4,   41,    4,    4,   42,   45,    4,    4,    4,

       53,   46,   54,    7,    8,  110,  111,   45,  110,  111,
      124,  124,   46,   49,   49,  573,   49,   59,   49,   59,
       45,   63,  573,    7,    8,   46,   25,   26,   27,   28,
      308,  111,   50,   50,   64,   50,   41,   50,   69,   42,
       45,   59, 1232,   70,   53,   46,   54,   60,  308,   60,
        4,    5,    5,    5,    5,    5,    5,    5,   49,    5,
        5,   59,    5,    5,    5,   63,    5,   87,    5,    5,
       51,   60,   51,    5,    5,    5,    5,   50,   64,  125,
      125,   51,   69,  129, 1233, 1234,   51,   70,  129,   57,
       57,   60,   57,   52,   51,   52,    5,    5,    5,  101,

      353,  610,   58,   58,   52,   58,   89,  338,  101,   52,
      338,   87,   88,  125,   51,   89,   89,   52,  101,   61,
      610,   61,  353,    5,    5,    5,    5,    6,    6,    6,
        6,    6,    6,    6,   57,    6,    6,   52,    6,    6,
        6,   75,    6,   61,    6,    6,   62,   58,   62,    6,
        6,    6,    6,   76,   77,  192,   88,   90,  192,  132,
      132,  132,  132,   61,  242,   75,   90,   90,  242,  192,
       62,  285,    6,    6,    6,  132,  285,   76,   77,  114,
      132,  114,  114,  114,  232,   75,  579,  232,  114,  232,
       62,  259,  260,  579, 1235,  259,  260,   76,   77,    6,

        6,    6,    6,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   13,
       13,   13,   13,   13,   13,   13,   78,   13,   13,   67,
       13,   13,   13,   81,   13,   82,   13,   13,   67,   67,
      223,   13,   13,   13,   13,   68,  339,   81, 1236,   82,
       78,  223,  647,   67,   68,   68,  339,   96,  119,  119,

       96,   83,  290,  119,   13,   13,   13,  290,  344,   68,
       78,  344,   83,   67,  647,  130,  130,   81,  130,   82,
       97,   97,   96,   97,  223,   83,  571,  119,  571,   68,
     1237,   13,   13,   13,   13,   14,   14,   14,   14,   14,
       14,   14,   96,   14,   14,   83,   14,   14,   14,  346,
       14,   84,   14,   14,  345,   91,  350,   14,   14,   14,
       14, 1238,   84,   91,  102,   97,  102,  102,  102,  102,
      648,  130,  346,  346,  346,   84,   91,   91,  102,  350,
       14,   14,   14,  345,  105,  376,  105,  105,  376,  105,
      105,  105,  120,  120,  648,   84,  105,  120,  102,   91,

       91, 1239,  381,  138,  138,  381,  138,   14,   14,   14,
       14,   15,   15,   15,   15,   15,   15,   15,  105,   15,
       15,  120,   15,   15,   15,  349,   15,  578,   15,   15,
       92,  351,  354,   15,   15,   15,   15,  107,   92,  107,
      107,  578,  107,  107,  107,  115,  349,  112,  115,  107,
      112,   92,   92,  112,  351,  354,   15,   15,   15,  138,
      115,  431,  112, 1240,  378,  378,  115,  378,  112,  349,
      247,  107,  112,  247,   92,   92,  359,  143,  143,  431,
      247,  606,  143,   15,   15,   15,   15,   16,   16,   16,
       16,   16,   16,   16,  940,   16,   16,  359,   16,   16,

       16,  940,   16,  393,   16,   16,  143,  393,  606,   16,
       16,   16,   16,  113,  113,  250,  113,  115,  250,  112,
      133,  133,  133,  133,  113,  250,  113,  113,  113,  113,
      400,  393,   16,   16,   16,  400,  133,  455,  113,  927,
      455,  133,  139,  139,  139,  139, 1241,  455, 1242,  139,
      161,  161,  161,  161, 1243,  927, 1244,  161,  113,   16,
       16,   16,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   29,   29,   29,

       29,   29,   29,   29,  631,   29,   29,  631,   29,   29,
       29,  650,   29,  402,   29,   29,  362,  642,  402,   29,
       29,   29,   29,  144,  144, 1191, 1191, 1191,  144,  134,
      134,  134,  134,  650,  384,  384,  134,  384,  121,  121,
      642,  121,   29,   29,   29,  134,  137,  137,  137,  137,
      134,  594,  144,  362,  121,  121,  594,  169,  169,  121,
      169, 1246,  137,  253,  253, 1249,  253,  137,  137,   29,
       29,   29,   29,   30,   30,   30,   30,   30,   30,   30,
      362,   30,   30,  121,   30,   30,   30,  596,   30,  150,
       30,   30,  596,  645,  121,   30,   30,   30,   30,  151,

      150,  150,  264,  134,  599,  150,  264,  150,  253,  599,
      151,  151,  264,  169,  264,  151,  645,  151,   30,   30,
       30,  155,  155,  155,  155,  170,  170,  170,  170,  150,
      944, 1255,  170,  206,  206,  206,  206,  155,  547,  151,
      206,  547,  155,  547,  944,   30,   30,   30,   30,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  425,  265,   55,  536,  425,  265,   55,   55,   55,
       55,   55,  265,  560,  265,  536,  560,  135,  135,  135,
      135,  348,  348,  560,  135,  156,  156,  156,  156,  425,
       55,   55,   55,  135,  146,  146,  615,  146,  135,  174,
      174,  156,  174,  348,  601,  348,  156,  615,  536,  601,
      146,  146, 1256,  395,  395,  146,  395,   55,   55,   55,
       55,   55,   55,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,  146,
     1257,   56,  152,  646,  653,   56,   56,   56,   56,   56,

      146,  135, 1260,  152,  152,  174,  186,  186,  152, 1261,
      152,  186,  160,  160,  160,  160,  646,  653,   56,   56,
       56, 1262,  160,  163,  163,  163,  163,  379,  160,  379,
      379,  379,  152,  160,  387,  186,  387,  387,  387,  163,
     1263, 1265, 1266,  387,  163,   56,   56,   56,   56,   56,
       56,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,  437,
       85,   85, 1267,  437, 1268,   85,   85,   85, 1269,   85,
      157,  157,  157,  157,  654,  655,  782,  157,  164,  164,

      164,  164,  168,  168,  168,  168,  157,  437,   85,   85,
       85,  157,  178,  178,  164,  178,  654,  655,  168,  164,
      782,  182,  182,  168,  182,  659,  187,  187,  659,  392,
      392,  187, 1270, 1271,  392,   85,   85,   85,   85,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,  187,   86,   86,  392, 1272,
      695,   86,   86,   86,  157,   86,  197,  197,  178,  197,
      386,  154,  154,  386,  154,  487,  154,  182,  695,  487,
      188,  188,  779,  188,   86,   86,   86,  154,  154, 1273,
      205,  205,  154,  205,  154,  386,  188,  188,  763,  211,

      211,  188,  211,  487,  779,  199,  199,  199,  199,  763,
     1274,   86,   86,   86,   86,  103,  154,  158,  158,  158,
      158,  199,  197,  783,  158,  188,  199,  154,  103,  394,
      394, 1275,  562,  158,  394,  562,  188, 1276,  158,  103,
      103,  789,  562,  784,  103,  103,  205,  783,  787,  103,
      103,  369,  103,  103,  369,  211,  215,  215,  394,  215,
      370,  103,  103,  370,  789,  784,  103,  103,  326, 1277,
      787,  326,  103,  103,  103,  103,  103,  103,  104,  104,
      104,  104, 1278,  165,  165,  165,  165,  104, 1279,  662,
      165,  158,  662,  326,  104,  104,  369,  104, 1280,  165,

      166,  166,  166,  166,  165,  370, 1281,  166,  196,  196,
      196,  196,  215,  326, 1282,  196,  166,  104, 1283,  869,
      370,  166,  369,  955,  104,  104,  196,  196,  196,  196,
      869,  370,  218,  218,  955,  218,  104,  200,  200,  200,
      200,  404,  404,  104,  404,  104,  104,  106,  106,  106,
      106,  416,  416,  200,  416,  966,  106,  165,  200,  329,
      329,  770,  329,  106,  106, 1284,  106,  967,  201,  201,
      201,  201, 1285, 1286,  166,  201,  330,  330,  966,  330,
      202,  202,  202,  202,  201, 1287,  106,  202,  218,  201,
      967, 1289,  675,  106,  106,  675,  202,  106,  770,  245,

      245,  202,  245, 1290,  329,  106,  204,  204,  204,  204,
      427,  427,  106,  427,  106,  106,  109,  251,  251,  109,
      251,  330,  204,  268,  268,  770,  268,  204,  109,  109,
      884,  109,  109,  397,  397,  109,  109,  109,  397, 1291,
     1292,  109,  201,  272,  272, 1004,  272,  226,  226,  226,
      226, 1293,  884, 1294,  202,  245,  415,  415,  415,  415,
     1004,  109,  397,  226,  226, 1295,  226,  278,  278,  885,
      278,  281,  281,  251,  281,  440,  440,  397,  440,  268,
      464,  464,  352,  464,  681,  352,  226,  681,  109,  149,
      149,  885,  149,  149,  149,  149, 1296,  149,  149,  272,

      149,  149,  149,  889,  149,  352,  149,  149,  352, 1048,
     1297,  149,  149,  149,  149,  226,  347, 1298,  471,  471,
      347,  471,  352,  278, 1299,  889,  492,  281,  347,  492,
      352, 1300, 1048, 1301,  149,  149,  149, 1302,  347, 1303,
      492,  367,  347,  367,  367,  352,  367,  367,  367,  371,
     1305,  347,  371,  367,  372,  373,  371,  372,  373, 1310,
     1311,  149,  149,  149,  149,  227,  227,  493,  227, 1312,
      493,  227,  227,  227,  227,  367, 1315,  368, 1316,  368,
      368,  493,  368,  368,  368, 1317, 1318,  227,  227,  368,
      227, 1320,  377,  371,  371,  377, 1321, 1322, 1323,  372,

      373,  660,  380,  382,  660,  380,  382,  377,  660, 1324,
      227,  368,  388,  377,  372,  388,  373,  380,  382,  758,
      371,  227,  758,  380,  382,  372,  373,  388, 1325,  383,
      383,  389,  383,  388,  389,  476,  476, 1326,  476,  227,
      327,  327,  327,  327,  383,  660,  389, 1327,  424,  424,
      383, 1328,  389,  424,  383,  649,  327,  327,  649,  327,
      407,  407,  407,  407,  377, 1329, 1330,  411,  411,  411,
      411, 1331,  660, 1332,  380,  382,  407,  424,  649,  327,
     1333,  407,  776,  411,  388,  776,  327,  327,  411,  411,
      412,  412,  412,  412, 1334,  426,  426,  412,  327,  495,

      426,  383,  495,  389, 1335,  327, 1336,  327,  327,  328,
      328,  328,  328,  495,  414,  414,  414,  414, 1337, 1338,
      419,  419,  419,  419,  426,  328,  328,  419,  328, 1339,
      414,  408,  408,  408,  408,  414,  414,  651,  408, 1342,
      651, 1343,  410,  410,  410,  410, 1344,  408,  328,  410,
      481,  481,  408,  481,  793,  328,  328,  793,  410,  328,
      651,  489,  489,  410,  489, 1345, 1346,  328,  420,  420,
      420,  420, 1347, 1348,  328,  420,  328,  328,  342,  502,
      502,  342,  502,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342, 1349, 1350, 1351,

      342,  342,  342,  342,  342,  408,  413,  413,  413,  413,
     1352, 1353, 1354,  413,  429,  429,  410,  436,  797,  429,
      438,  797,  413,  342,  342,  342, 1355,  413,  436,  436,
      442,  438,  438,  436, 1357,  436,  438,  701,  438, 1362,
      701,  442,  442,  429,  486,  486,  442,  701,  442,  486,
      342,  342,  342,  342,  342,  342,  360,  436,  429,  360,
      438, 1363,  360,  360,  360,  360,  443,  443,  443,  443,
      442,  488,  488,  486,  513,  513,  488,  513,  360,  360,
      413,  360,  443,  522,  522,  442,  522,  443,  444,  444,
      444,  444, 1364, 1367, 1368,  444,  446,  446,  446,  446,

      488,  360, 1369,  446,  444,  447,  447,  447,  447,  444,
      527,  527,  446,  527, 1370,  447, 1372,  446, 1373,  491,
      491,  447,  531,  531,  491,  531,  447,  360, 1374,  360,
      360,  375, 1375, 1376,  375,  448,  448,  448,  448, 1377,
      682,  682,  448,  375,  375,  682,  375,  375,  491, 1378,
      375,  375,  375, 1379, 1380, 1381,  375,  449,  449,  449,
      449, 1382,  444,  491,  449,  450,  450,  450,  450,  682,
      446,  542,  542,  449,  542,  450,  375,  702,  449, 1383,
      702,  450,  453,  453,  453,  453,  450,  702, 1384,  453,
      452,  452,  452,  452,  454,  454,  454,  454, 1385,  626,

      452,  454,  626,  375,  432,  432,  452,  432,  432,  432,
      432,  452,  432,  432, 1386,  432,  432,  432, 1387,  432,
      866,  432,  432,  866, 1390, 1391,  432,  432,  432,  432,
     1392,  449,  456,  456,  456,  456,  457,  457,  457,  457,
     1393, 1394, 1395,  457,  460,  460,  460,  460,  456,  432,
      432,  432,  457,  456, 1396,  557,  557,  457,  557,  626,
      460,  563,  563, 1397,  563,  460,  459,  459,  459,  459,
      626,  580,  580,  459,  580, 1398,  432,  432,  432,  432,
      433,  433,  459,  433,  433,  433,  433,  459,  433,  433,
     1399,  433,  433,  433, 1400,  433,  740,  433,  433,  740,

     1401, 1402,  433,  433,  433,  433,  461,  461,  461,  461,
      457, 1403, 1405,  461,  462,  462,  462,  462, 1409,  566,
      566,  462,  566, 1410, 1411,  433,  433,  433, 1414, 1415,
      462,  467,  467,  467,  467,  462,  584,  584,  467,  584,
      459,  463,  463,  463,  463,  588,  588,  676,  588,  676,
      676,  676,  433,  433,  433,  433,  740,  463,  468,  468,
      468,  468,  463, 1416,  566,  468,  496,  496,  496,  496,
     1417, 1419, 1420,  496,  497,  497,  497,  497,  591,  591,
      786,  591, 1421,  786,  496,  496,  496,  496,  462,  499,
      499,  499,  499, 1422, 1423,  497,  499,  501,  501,  501,

      501, 1424,  788,  786,  501,  788, 1425,  499,  499,  499,
      499,  505,  505,  505,  505,  501,  501,  501,  501,  506,
      506,  506,  506, 1426, 1427,  788,  506,  505,  509,  509,
      509,  509,  505, 1428, 1429,  506,  508,  508,  508,  508,
      506, 1430,  668,  508,  509,  668, 1431,  664,  892,  509,
      664,  892,  508,  510,  510,  510,  510,  508, 1432, 1433,
      510,  511,  511,  511,  511, 1435, 1436, 1437,  511,  512,
      512,  512,  512,  516,  516,  516,  516,  511,  930, 1438,
      516,  930,  511,  683,  683,  512,  671, 1439,  683,  671,
      512, 1440, 1441,  506,  517,  517,  517,  517,  664,  674,

      674,  517,  674,  692,  692,  668,  677,  677,  692,  677,
      508, 1442,  683,  668,  674, 1443, 1444, 1445,  664,  672,
      674,  677,  672,  673, 1446,  874,  673,  677,  874, 1447,
     1025,  671,  692, 1025, 1448,  511,  636,  671, 1450,  636,
     1453,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636, 1454, 1455,  671,  636,  636,
      636,  636,  636, 1165,  672, 1458, 1165, 1459,  673,  684,
      684,  674,  679,  679,  684,  679,  886,  874,  677,  886,
     1460,  636,  636,  636,  672, 1288,  673,  679, 1288, 1341,
      672, 1461, 1341,  679,  673, 1463,  874,  679,  684,  886,

      693,  693,  708,  708, 1464,  693, 1465,  708,  636,  636,
      636,  636,  636,  636,  667,  667, 1466,  667,  684,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  693,
      667,  708,  667,  680,  680, 1467,  680,  667,  667,  667,
      667,  709,  709, 1468,  679, 1469,  709, 1470,  680,  688,
      688,  688,  688, 1471,  680,  689,  689,  689,  689,  667,
      667,  667,  771,  694,  694,  771, 1388, 1472,  694, 1388,
      709,  775,  688,  775, 1406,  775,  775, 1406,  689,  809,
      809, 1473, 1474,  697,  809,  775,  667,  667,  667,  667,
      667,  667,  694, 1434,  697,  697, 1434,  798, 1475,  697,

      798,  697, 1476, 1477, 1479,  680,  801,  893,  809,  801,
      893, 1480,  694,  696,  696,  809,  696,  696,  696,  696,
     1481,  696,  696,  697,  696,  696,  696,  771,  696,  698,
      696,  696,  699,  771, 1482,  696,  696,  696,  696,  887,
      698,  698,  887,  699,  699,  698, 1478,  698,  699, 1478,
      699,  710,  710,  798,  804, 1483,  710,  804,  696,  696,
      696, 1484,  887,  711,  711,  711,  711,  893,  798,  698,
      711,  801,  699, 1485, 1486, 1487,  895,  801,  893,  895,
      710,  711,  711,  711,  711,  696,  696,  696,  696, 1488,
     1489, 1490,  699, 1491,  712,  712,  712,  712, 1493,  804,

      710,  712,  713,  713,  713,  713,  804, 1496, 1497,  713,
      714,  714,  714,  714, 1498,  712,  803,  714, 1501,  803,
      713,  713,  713,  713,  805,  804, 1502,  805,  714,  714,
      714,  714,  800,  800, 1503,  800, 1504,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  895,  800,  976,
      800,  974,  976, 1506,  974,  800,  800,  800,  800,  806,
      806,  803,  806,  812,  812,  812,  812,  807,  807,  805,
      807,  878,  803,  878,  806,  878,  878,  800,  800,  800,
      806, 1507,  807, 1508, 1509,  878,  812,  803,  807,  805,
      814,  814,  814,  814, 1510,  805,  808,  808, 1511,  808,

      976, 1512, 1513, 1514,  800,  800,  800,  800,  800,  800,
     1515,  808,  819,  814,  816,  816,  974,  808, 1516,  816,
      976,  808,  974,  819,  819, 1517,  959, 1518,  819,  959,
      819,  806, 1519, 1521,  896,  825,  825,  896,  897,  807,
      825,  897, 1522,  816,  829,  829,  829,  829, 1523, 1524,
      816,  829,  819, 1525, 1526, 1527,  901,  901, 1528,  819,
     1529,  901, 1530, 1531,  825,  829, 1532, 1533,  808,  817,
      817,  825,  817,  817,  817,  817, 1043,  817,  817, 1043,
      817,  817,  817,  897,  817,  901,  817,  817, 1535,  959,
      896,  817,  817,  817,  817, 1576, 1231,  959,  897,  827,

      827,  827,  827,  901,  968,  896,  827,  968,  971,  897,
      898,  971, 1584,  898,  817,  817,  817,  827,  827,  827,
      827,  842,  842, 1128, 1128, 1584,  842,  968, 1128,  842,
      842,  971, 1577, 1230,  842, 1577, 1043,  842,  842, 1579,
      842,  817,  817,  817,  817,  818,  818, 1043,  818,  818,
      818,  818, 1128,  818,  818,  898,  818,  818,  818, 1579,
      818, 1053,  818,  818, 1053, 1128, 1228,  818,  818,  818,
      818,  899, 1578,  898,  899,  828,  828,  828,  828, 1581,
     1227,  898,  828,  900,  900, 1050,  900, 1578, 1050, 1226,
      818,  818,  818,  828,  828,  828,  828, 1581,  900, 1225,

      905,  905,  911,  911,  900,  905, 1054,  911, 1050, 1054,
      906,  977,  978, 1053,  977,  978,  899,  818,  818,  818,
      818,  906,  906, 1580, 1582, 1586,  906,  899,  906,  905,
     1580,  911, 1053,  912,  912,  912,  912, 1224, 1586, 1582,
      912,  979,  899, 1121,  979, 1181, 1121,  905, 1181,  911,
      906,  912,  912,  912,  912,  900,  977,  978,  980,  980,
      984,  984, 1591,  980, 1245,  984, 1121, 1245,  906,  990,
      990, 1585,  978, 1585,  990, 1056,  977, 1054, 1056,  985,
     1591, 1125,  977,  978, 1125, 1583,  979,  980, 1583,  984,
      985,  985,  979, 1055, 1587,  985, 1055,  985,  990, 1125,

     1125, 1125,  980, 1181,  984, 1587, 1223,  991,  991,  991,
      991, 1245,  979,  990,  991, 1057, 1181, 1222, 1057,  985,
     1056, 1116, 1588, 1056, 1116,  991,  991,  991,  991,  992,
      992,  992,  992, 1221,  985, 1245,  992, 1588, 1055, 1058,
     1058, 1220, 1219, 1218, 1058, 1055, 1056,  992,  992,  992,
      992, 1062, 1062, 1590, 1063, 1589, 1062, 1590, 1068, 1068,
     1057, 1217, 1589, 1068, 1055, 1063, 1063, 1216, 1058, 1116,
     1063, 1058, 1063, 1124, 1126, 1127, 1124, 1126, 1127, 1186,
     1062, 1215, 1186, 1062, 1132, 1132, 1057, 1068, 1133, 1132,
     1068, 1214, 1116, 1190, 1063, 1192, 1190, 1063, 1192, 1133,

     1133, 1213, 1186, 1212, 1133, 1193, 1133, 1211, 1193, 1138,
     1138, 1210, 1250, 1132, 1138, 1250, 1209, 1208, 1760, 1126,
     1127, 1251, 1207, 1206, 1251, 1205, 1132, 1760, 1133, 1194,
     1194, 1760, 1760, 1127, 1194, 1250, 1124, 1126, 1138, 1203,
     1192, 1133, 1198, 1198, 1124, 1126, 1127, 1198, 1202, 1201,
     1193, 1138, 1193, 1190, 1252, 1192, 1199, 1252, 1194, 1253,
     1194, 1200, 1253, 1197, 1190, 1196, 1192, 1199, 1199, 1251,
     1807, 1198, 1199, 1198, 1199, 1195, 1193, 1204, 1204, 1807,
     1254, 1254, 1204, 1807, 1807, 1254, 1258, 1258, 1185, 1259,
     1304, 1258, 1251, 1304, 1306, 1184, 1199, 1306, 1199, 1252,

     1259, 1259, 1252, 1182, 1253, 1259, 1204, 1259, 1204, 1254,
     1307, 1264, 1264, 1307, 1180, 1258, 1264, 1253, 1308, 1179,
     1358, 1308, 1254, 1358, 1359, 1252, 1178, 1359, 1258, 1259,
     1253, 1309, 1309, 1313, 1313, 1177, 1309, 1176, 1313, 1175,
     1264, 1356, 1259, 1360, 1356, 1174, 1360, 1173, 1304, 1172,
     1171, 1170, 1306, 1264, 1407, 1307, 1169, 1407, 1168, 1167,
     1309, 1304, 1313, 1308, 1314, 1306, 1166, 1404, 1307, 1359,
     1404, 1309, 1164, 1313, 1308, 1314, 1314, 1163, 1319, 1319,
     1314, 1307, 1314, 1319, 1162, 1160, 1159, 1158, 1360, 1308,
     1157, 1358, 1156, 1361, 1361, 1359, 1155, 1356, 1361, 1407,

     1365, 1365, 1154, 1360, 1314, 1365, 1407, 1319, 1366, 1153,
     1449, 1152, 1356, 1449, 1360, 1314, 1371, 1371, 1319, 1366,
     1366, 1371, 1361, 1151, 1366, 1407, 1366, 1404, 1150, 1365,
     1408, 1408, 1148, 1147, 1146, 1408, 1145, 1361, 1404, 1413,
     1494, 1412, 1412, 1494, 1365, 1371, 1412, 1144, 1366, 1451,
     1413, 1413, 1451, 1418, 1418, 1413, 1143, 1413, 1418, 1408,
     1371, 1142, 1449, 1366, 1452, 1452, 1408, 1456, 1456, 1452,
     1412, 1141, 1456, 1492, 1140, 1534, 1492, 1412, 1534, 1413,
     1139, 1449, 1418, 1462, 1462, 1494, 1413, 1137, 1462, 1418,
     1457, 1136, 1135, 1452, 1451, 1134, 1456, 1452, 1451, 1131,

     1456, 1457, 1457, 1494, 1495, 1495, 1457, 1130, 1457, 1495,
     1129, 1494, 1462, 1499, 1499, 1123, 1462, 1122, 1499, 1120,
     1451, 1119, 1492, 1505, 1505, 1500, 1536, 1536, 1505, 1536,
     1457, 1118, 1574, 1495, 1457, 1574, 1500, 1500, 1534, 1117,
     1115, 1500, 1499, 1500, 1492, 1114, 1534, 1113, 1537, 1537,
     1112, 1495, 1505, 1537, 1111, 1110, 1541, 1541, 1547, 1547,
     1499, 1541, 1542, 1547, 1109, 1500, 1575, 1575, 1108, 1575,
     1505, 1536, 1107, 1542, 1542, 1106, 1105, 1537, 1542, 1104,
     1542, 1592, 1592, 1500, 1592, 1541, 1630, 1547, 1103, 1630,
     1630, 1630, 1102, 1101, 1100, 1650, 1630, 1536, 1650, 1650,

     1650, 1099, 1542, 1574, 1652, 1650, 1097, 1652, 1652, 1652,
     1096, 1575, 1657, 1092, 1652, 1657, 1657, 1657, 1091, 1090,
     1775, 1089, 1657, 1775, 1775, 1775, 1592, 1594, 1594, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594,
     1594, 1594, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1596, 1596, 1596,

     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1596, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,

     1598, 1598, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601,
     1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601,
     1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601,

     1601, 1601, 1601, 1601, 1601, 1601, 1601, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1602, 1602, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,

     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,

     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,

     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611,
     1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611,
     1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611,
     1611, 1611, 1611, 1611, 1611, 1611, 1611, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,

     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615,
     1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615,
     1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615,
     1615, 1615, 1615, 1615, 1615, 1615, 1615, 1616, 1616, 1616,

     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,

     1618, 1618, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1620, 1621, 1621, 1088, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,

     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1622, 1672, 1087,
     1086, 1672, 1672, 1672, 1084, 1083, 1674, 1082, 1672, 1674,
     1674, 1674, 1081, 1079, 1622, 1078, 1674, 1622, 1622, 1622,
     1077, 1076, 1075, 1074, 1622, 1623, 1073, 1623, 1623, 1692,
     1623, 1072, 1692, 1692, 1692, 1623, 1623, 1071, 1692, 1623,
     1623, 1623, 1624, 1070, 1624, 1624, 1624, 1624, 1779, 1624,
     1069, 1779, 1779, 1779, 1624, 1624, 1624, 1067, 1624, 1624,
     1624, 1625, 1625, 1625, 1625, 1066, 1065, 1064, 1816, 1061,
     1625, 1816, 1816, 1816, 1060, 1625, 1625, 1059, 1625, 1625,
     1625, 1052, 1625, 1625, 1625, 1625, 1051, 1625, 1625, 1626,

     1049, 1626, 1626, 1846, 1626, 1047, 1846, 1846, 1846, 1626,
     1626, 1046, 1045, 1626, 1626, 1626, 1627, 1627, 1627, 1627,
     1044, 1042, 1041, 1820, 1820, 1627, 1820, 1820, 1820, 1040,
     1627, 1627, 1039, 1627, 1627, 1627, 1038, 1627, 1627, 1627,
     1627, 1037, 1627, 1627, 1628, 1628, 1036, 1628, 1628, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1629,
     1035, 1034, 1629, 1033, 1032, 1031, 1629, 1030, 1629, 1629,
     1629, 1629, 1629, 1029, 1028, 1027, 1629, 1629, 1629, 1026,

     1629, 1629, 1629, 1024, 1022, 1019, 1017, 1629, 1631, 1016,
     1631, 1631, 1015, 1014, 1013, 1012, 1631, 1011, 1010, 1631,
     1631, 1631, 1009, 1008, 1007, 1006, 1631, 1632, 1632, 1632,
     1632, 1687, 1005, 1632, 1687, 1687, 1687, 1003, 1002, 1001,
     1000, 1687, 1632,  999,  998, 1632,  997,  995,  994,  993,
     1632,  989,  988, 1632, 1632, 1632, 1693,  987,  986, 1632,
     1632, 1633, 1633, 1633, 1633, 1693,  983,  982, 1693, 1693,
     1693,  981,  973,  972,  970,  965, 1633,  964, 1633, 1633,
     1633,  962,  961,  960, 1633,  958,  957, 1633, 1633, 1633,
      956,  954,  953,  952, 1633, 1634, 1634, 1634, 1634, 1730,

      951, 1634, 1730, 1730, 1730,  950,  949, 1783,  948, 1730,
     1783, 1783, 1783,  947,  946,  945,  943, 1783, 1634,  942,
      941, 1634, 1634, 1634,  939,  938,  937,  936, 1634, 1635,
     1635,  935, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1636,  934,  933, 1636,  932,  931,
      929, 1636,  928, 1636, 1636, 1636, 1636, 1636,  926,  925,
      924, 1636, 1636, 1636,  923, 1636, 1636, 1636,  922,  921,
      920,  919, 1636, 1637, 1637,  918, 1637, 1637, 1637, 1637,

     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1638, 1638,
      917,  916, 1638,  915,  914,  913, 1638,  910, 1638, 1638,
     1638, 1638, 1638,  909, 1638,  908, 1638, 1638, 1638,  907,
     1638, 1638, 1638, 1778,  904,  903,  902, 1638, 1639, 1639,
     1639, 1639, 1778,  894, 1639, 1778, 1778, 1778,  891,  890,
      883,  882,  881, 1639,  880,  877, 1639,  875,  873,  872,
      871, 1639,  870,  868, 1639, 1639, 1639,  867,  865,  864,
     1639, 1639, 1640, 1640, 1640, 1640,  863,  862,  861,  860,

      859, 1640,  858,  857,  856,  855,  854, 1640,  852, 1640,
     1640,  851,  850,  848,  847, 1640,  846,  845, 1640, 1640,
     1640,  844,  843,  841,  840, 1640, 1641, 1641, 1641, 1641,
     1800,  839, 1641, 1800, 1800, 1800,  837,  836, 1802,  835,
     1800, 1802, 1802, 1802,  834,  833,  832,  831, 1802, 1641,
      830,  824, 1641, 1641, 1641,  823,  822,  821,  815, 1641,
     1642, 1642, 1642, 1642, 1805,  811, 1642, 1805, 1805, 1805,
      810,  802,  799,  796, 1805, 1642,  791,  790, 1642,  785,
      781,  780,  778, 1642,  773,  772, 1642, 1642, 1642,  768,
      767,  766, 1642, 1642, 1643, 1643, 1643, 1643, 1806,  765,

      761, 1806, 1806, 1806,  759,  757,  756,  752, 1806, 1643,
      750, 1643, 1643,  748,  747,  746,  745, 1643,  744,  743,
     1643, 1643, 1643,  742,  741,  739,  738, 1643, 1644, 1644,
     1644, 1644, 1829,  737, 1644, 1829, 1829, 1829,  736,  735,
      734,  733, 1829,  732,  731,  730,  729,  728,  727,  724,
      723, 1644,  722,  721, 1644, 1644, 1644,  720,  719,  716,
      715, 1644, 1645,  707,  706, 1645,  705,  703,  700,  691,
      690, 1645,  687,  685, 1645, 1645, 1645,  663,  658,  657,
      656, 1645, 1646, 1646,  644, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,

     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1647, 1647,  643,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1648, 1648,  641, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1649,  640,  638,
     1649,  637,  635,  632, 1649,  630, 1649, 1649, 1649, 1649,

     1649,  628,  627,  625, 1649, 1649, 1649,  624, 1649, 1649,
     1649,  623,  620,  618,  616, 1649, 1651,  614,  611, 1651,
      608,  605,  603,  602,  600,  598,  597,  595,  593, 1651,
      590,  586,  582, 1651,  577,  576,  575,  572,  569, 1651,
      568,  565, 1651, 1651, 1651,  559,  556,  555,  551, 1651,
     1653, 1653, 1653, 1653,  549,  548, 1653,  546,  544,  541,
      539,  538,  535,  533,  529,  526,  525, 1653, 1653,  524,
      521,  520,  519, 1653,  515,  507, 1653, 1653, 1653,  504,
      500,  484,  483, 1653, 1654, 1654, 1654, 1654,  479,  478,
     1654,  474,  473,  466,  458,  445,  439,  434,  430, 1654,

      422,  421, 1654,  418,  409,  406,  403, 1654,  401,  399,
     1654, 1654, 1654,  390,  374,  363, 1654, 1654, 1655, 1655,
     1655, 1655,  361,  358,  356,  355,  343,  336,  335,  332,
      331,  325,  324, 1655,  316, 1655, 1655,  313,  312,  307,
      303, 1655,  302,  299, 1655, 1655, 1655,  295,  294,  291,
      286, 1655, 1656, 1656, 1656, 1656,  255,  241, 1656,  240,
      239,  235,  234,  230,  225,  222,  214,  210,  203,  185,
      181,  177,  167,  159,  145, 1656,  142,  136, 1656, 1656,
     1656,  118,  108,  100,   99, 1656, 1658,   98, 1658,   93,
        0,    0,    0,    0, 1658,    0,    0, 1658, 1658, 1658,

        0,    0,    0,    0, 1658, 1659, 1659,    0, 1659,    0,
        0,    0,    0,    0, 1659,    0,    0, 1659, 1659, 1659,
        0,    0,    0,    0, 1659, 1660, 1660,    0, 1660, 1660,
     1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,
     1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,
        0, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,
     1661,    0,    0, 1661,    0,    0,    0,    0,    0, 1661,
        0,    0, 1661, 1661, 1661,    0,    0,    0,    0, 1661,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,

     1662, 1662, 1662,    0, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1663, 1663,    0, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,    0, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1664,    0,    0, 1664,    0,    0,    0,    0,    0, 1664,
        0,    0, 1664, 1664, 1664,    0,    0,    0,    0, 1664,
     1665, 1665,    0, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,

     1665, 1665, 1665, 1665, 1665, 1666, 1666,    0, 1666,    0,
     1666, 1666, 1666, 1666, 1666, 1666, 1666,    0, 1666, 1666,
     1666, 1666,    0, 1666, 1666, 1666, 1666, 1666,    0, 1666,
        0, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1667,    0,    0, 1667,    0,    0,    0,    0,    0, 1667,
        0,    0,    0,    0, 1667, 1667,    0, 1667,    0,    0,
        0,    0,    0, 1667,    0,    0, 1667, 1667, 1667, 1668,
     1668,    0, 1668,    0, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668,    0, 1668,    0, 1668, 1668, 1668, 1668, 1668,

     1668, 1668, 1668, 1668, 1669, 1669,    0, 1669,    0, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669,    0, 1669,    0,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1670,
        0,    0, 1670,    0,    0,    0,    0,    0, 1670,    0,
        0, 1670, 1670, 1670,    0,    0,    0,    0, 1670, 1671,
     1671,    0, 1671, 1671, 1671, 1671, 1671, 1671, 1671,    0,
        0, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671,    0, 1671,    0, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1673,    0, 1673, 1673,    0,    0,

        0,    0, 1673,    0,    0, 1673, 1673, 1673,    0,    0,
        0,    0, 1673, 1675,    0, 1675, 1675,    0,    0,    0,
        0, 1675,    0,    0, 1675, 1675, 1675,    0,    0,    0,
        0, 1675, 1676, 1676,    0, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676,    0, 1676,    0, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1677,    0,    0,
     1677,    0,    0,    0,    0,    0, 1677,    0,    0, 1677,
     1677, 1677,    0,    0,    0,    0, 1677, 1678, 1678,    0,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,

     1678, 1678,    0, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678,    0, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1679, 1679,    0, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1679, 1679,    0, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1679, 1679, 1679,    0, 1679,    0, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1680,    0,    0,
     1680,    0,    0,    0, 1680,    0, 1680,    0,    0, 1680,
     1680, 1680,    0,    0,    0,    0, 1680, 1681,    0, 1681,
     1681, 1681, 1681, 1681,    0,    0, 1681,    0, 1681,    0,
        0, 1681, 1681, 1681,    0,    0,    0,    0, 1681, 1682,

     1682,    0, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682,    0, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1683, 1683, 1683, 1683, 1683, 1683,
     1683, 1683, 1683, 1683,    0,    0, 1683, 1683, 1683, 1683,
     1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683,
     1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1684,
     1684,    0, 1684, 1684, 1684, 1684, 1684, 1684,    0, 1684,
     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,    0,
        0, 1684, 1684, 1684,    0,    0, 1684, 1684, 1684, 1684,

     1684, 1684, 1684, 1684, 1685, 1685, 1685, 1685,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1685, 1685,
        0, 1685, 1685, 1685,    0, 1685, 1685, 1685, 1685,    0,
     1685, 1685, 1686, 1686,    0, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1688, 1688,    0,
        0,    0,    0, 1688,    0,    0, 1688, 1688, 1688,    0,
        0,    0,    0, 1688, 1689,    0, 1689, 1689,    0, 1689,
        0,    0,    0,    0, 1689, 1689,    0,    0, 1689, 1689,

     1689, 1690,    0,    0, 1690,    0,    0,    0,    0,    0,
     1690,    0,    0, 1690, 1690, 1690, 1691,    0,    0, 1691,
        0, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1691, 1694,    0, 1694, 1694,    0, 1694,    0,    0,    0,
        0, 1694, 1694,    0,    0, 1694, 1694, 1694, 1695,    0,
        0, 1695,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1695, 1695,    0, 1695, 1695, 1695, 1695, 1696, 1696,

        0, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1697,    0,    0, 1697,    0,    0,    0,
     1697,    0, 1697, 1697, 1697, 1697, 1697,    0,    0,    0,
     1697, 1697, 1697,    0, 1697, 1697, 1697,    0,    0,    0,
        0, 1697, 1698,    0,    0, 1698,    0,    0,    0, 1698,
        0, 1698,    0, 1698, 1698, 1698,    0,    0,    0, 1698,
     1698, 1698,    0, 1698, 1698, 1698,    0,    0,    0,    0,
     1698, 1699,    0, 1699, 1699,    0,    0,    0,    0, 1699,

        0,    0, 1699, 1699, 1699,    0,    0,    0,    0, 1699,
     1700,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1700,    0,    0,
     1700, 1700, 1700,    0,    0,    0,    0, 1700, 1701, 1701,
     1701, 1701,    0,    0, 1701,    0,    0,    0,    0,    0,
        0,    0,    0, 1701,    0,    0, 1701,    0,    0,    0,
        0, 1701,    0,    0, 1701, 1701, 1701,    0,    0,    0,
     1701, 1701, 1702, 1702, 1702, 1702,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1702,    0, 1702,
     1702, 1702,    0,    0,    0, 1702,    0,    0, 1702, 1702,

     1702,    0,    0,    0,    0, 1702, 1703, 1703, 1703, 1703,
        0,    0, 1703,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1703,
        0,    0, 1703, 1703, 1703,    0,    0,    0,    0, 1703,
     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
     1704,    0, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1704, 1704, 1704, 1705,    0, 1705,    0,    0,
        0, 1705,    0,    0, 1705, 1705, 1705,    0,    0,    0,
        0, 1705, 1706, 1706,    0, 1706, 1706, 1706, 1706, 1706,

     1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706,
     1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706,
     1706, 1706, 1706, 1706, 1706, 1706, 1706, 1707,    0,    0,
     1707,    0,    0,    0, 1707,    0, 1707, 1707, 1707, 1707,
     1707,    0,    0,    0, 1707, 1707, 1707,    0, 1707, 1707,
     1707,    0,    0,    0,    0, 1707, 1708,    0,    0, 1708,
        0,    0,    0, 1708,    0, 1708,    0, 1708, 1708, 1708,
        0,    0,    0, 1708, 1708, 1708,    0, 1708, 1708, 1708,
        0,    0,    0,    0, 1708, 1709, 1709,    0, 1709, 1709,
     1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709,

     1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709,
     1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709,
     1710, 1710,    0, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1710, 1710, 1711, 1711,    0,    0, 1711,
        0,    0,    0, 1711,    0, 1711, 1711, 1711, 1711, 1711,
        0, 1711,    0, 1711, 1711, 1711,    0, 1711, 1711, 1711,
        0,    0,    0,    0, 1711, 1712,    0,    0, 1712,    0,
        0,    0, 1712,    0, 1712,    0, 1712, 1712, 1712,    0,

        0,    0, 1712, 1712, 1712,    0, 1712, 1712, 1712,    0,
        0,    0,    0, 1712, 1713, 1713, 1713, 1713,    0,    0,
     1713,    0,    0,    0,    0,    0,    0,    0,    0, 1713,
        0,    0, 1713,    0,    0,    0,    0, 1713,    0,    0,
     1713, 1713, 1713,    0,    0,    0, 1713, 1713, 1714, 1714,
     1714, 1714,    0,    0,    0,    0,    0, 1714,    0,    0,
        0,    0,    0, 1714,    0, 1714, 1714,    0,    0,    0,
        0, 1714,    0,    0, 1714, 1714, 1714,    0,    0,    0,
        0, 1714, 1715, 1715, 1715, 1715,    0,    0, 1715,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1715,    0,    0, 1715, 1715,
     1715,    0,    0,    0,    0, 1715, 1716, 1716, 1716, 1716,
     1716, 1716, 1716, 1716, 1716, 1716, 1716,    0, 1716, 1716,
     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
     1716, 1717,    0,    0, 1717,    0,    0,    0,    0,    0,
     1717,    0,    0,    0,    0,    0,    0,    0, 1717,    0,
        0,    0,    0,    0, 1717,    0,    0, 1717, 1717, 1717,
        0,    0,    0,    0, 1717, 1718, 1718, 1718, 1718,    0,
        0, 1718,    0,    0,    0,    0,    0,    0,    0,    0,

     1718,    0,    0, 1718,    0,    0,    0,    0, 1718,    0,
        0, 1718, 1718, 1718,    0,    0,    0, 1718, 1718, 1719,
     1719, 1719, 1719,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1719,    0, 1719, 1719,    0,    0,
        0,    0, 1719,    0,    0, 1719, 1719, 1719,    0,    0,
        0,    0, 1719, 1720, 1720, 1720, 1720,    0,    0, 1720,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1720,    0,    0, 1720,
     1720, 1720,    0,    0,    0,    0, 1720, 1721,    0,    0,
        0,    0,    0, 1721,    0,    0, 1721, 1721, 1721,    0,

        0,    0,    0, 1721, 1722,    0,    0, 1722,    0,    0,
        0,    0,    0, 1722,    0,    0, 1722, 1722, 1722,    0,
        0,    0,    0, 1722, 1723, 1723,    0, 1723, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1724,
     1724,    0, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1725, 1725,    0, 1725, 1725, 1725,

     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725,
     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725,
     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1726,
        0,    0, 1726,    0,    0,    0, 1726,    0, 1726, 1726,
     1726, 1726, 1726,    0,    0,    0, 1726, 1726, 1726,    0,
     1726, 1726, 1726,    0,    0,    0,    0, 1726, 1727,    0,
        0, 1727,    0,    0,    0, 1727,    0, 1727,    0, 1727,
     1727, 1727,    0,    0,    0, 1727, 1727, 1727,    0, 1727,
     1727, 1727,    0,    0,    0,    0, 1727, 1728,    0,    0,
     1728,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1728,    0,    0,    0, 1728,    0,    0,    0,    0,    0,
     1728,    0,    0, 1728, 1728, 1728,    0,    0,    0,    0,
     1728, 1729, 1729, 1729, 1729,    0,    0, 1729,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1729, 1729,
        0,    0,    0,    0, 1729,    0,    0, 1729, 1729, 1729,
        0,    0,    0,    0, 1729, 1731, 1731, 1731, 1731,    0,
        0, 1731,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1731, 1731,    0,    0,    0,    0, 1731,    0,
        0, 1731, 1731, 1731,    0,    0,    0,    0, 1731, 1732,
     1732, 1732, 1732,    0,    0, 1732,    0,    0,    0,    0,

        0,    0,    0,    0, 1732,    0,    0, 1732,    0,    0,
        0,    0, 1732,    0,    0, 1732, 1732, 1732,    0,    0,
        0, 1732, 1732, 1733, 1733, 1733, 1733,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1733,    0,
     1733, 1733,    0,    0,    0,    0, 1733,    0,    0, 1733,
     1733, 1733,    0,    0,    0,    0, 1733, 1734, 1734, 1734,
     1734,    0,    0, 1734,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1734,    0,    0, 1734, 1734, 1734,    0,    0,    0,    0,
     1734, 1735,    0,    0,    0,    0,    0, 1735,    0,    0,

     1735, 1735, 1735,    0,    0,    0,    0, 1735, 1736,    0,
     1736,    0,    0,    0,    0,    0, 1736,    0,    0, 1736,
     1736, 1736,    0,    0,    0,    0, 1736, 1737,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1737,    0,    0, 1737, 1737, 1737,
        0,    0,    0,    0, 1737, 1738, 1738,    0, 1738,    0,
        0,    0,    0,    0, 1738,    0,    0, 1738, 1738, 1738,
        0,    0,    0,    0, 1738, 1739, 1739,    0, 1739, 1739,
     1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739,
     1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739,

        0, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739,
     1740,    0,    0, 1740,    0,    0,    0,    0,    0, 1740,
        0,    0, 1740, 1740, 1740,    0,    0,    0,    0, 1740,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741,    0, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1742, 1742,    0, 1742, 1742,
     1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742,
     1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742,    0, 1742,
     1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742,

     1743,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1743,    0,    0,
     1743, 1743, 1743,    0,    0,    0,    0, 1743, 1744,    0,
        0, 1744,    0,    0,    0,    0,    0, 1744,    0,    0,
     1744, 1744, 1744,    0,    0,    0,    0, 1744, 1745, 1745,
        0, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745,
     1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745,
     1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745,
     1745, 1745, 1745, 1746, 1746,    0, 1746,    0, 1746, 1746,
     1746, 1746, 1746, 1746, 1746,    0, 1746, 1746, 1746, 1746,

        0, 1746, 1746, 1746, 1746, 1746,    0, 1746,    0, 1746,
     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1747,    0,
        0, 1747,    0,    0,    0,    0,    0, 1747,    0,    0,
        0,    0, 1747, 1747,    0, 1747,    0,    0,    0,    0,
        0, 1747,    0,    0, 1747, 1747, 1747, 1748, 1748,    0,
     1748,    0, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748,
     1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748,
        0, 1748,    0, 1748, 1748, 1748, 1748, 1748, 1748, 1748,
     1748, 1748, 1749, 1749,    0, 1749,    0, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749,    0, 1749,    0, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1750,    0,    0,
     1750,    0,    0,    0,    0,    0, 1750,    0,    0, 1750,
     1750, 1750,    0,    0,    0,    0, 1750, 1751, 1751,    0,
     1751, 1751, 1751, 1751, 1751, 1751, 1751,    0,    0, 1751,
     1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751,
        0, 1751,    0, 1751, 1751, 1751, 1751, 1751, 1751, 1751,
     1751, 1751, 1752,    0, 1752, 1752,    0,    0,    0,    0,
     1752,    0,    0, 1752, 1752, 1752,    0,    0,    0,    0,
     1752, 1753,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1753,    0,
        0, 1753, 1753, 1753,    0,    0,    0,    0, 1753, 1754,
        0, 1754, 1754,    0,    0,    0,    0, 1754,    0,    0,
     1754, 1754, 1754,    0,    0,    0,    0, 1754, 1755,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1755,    0,    0, 1755, 1755,
     1755,    0,    0,    0,    0, 1755, 1756, 1756,    0, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,    0,
     1756,    0, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,

     1756, 1757,    0,    0, 1757,    0,    0,    0,    0,    0,
     1757,    0,    0, 1757, 1757, 1757,    0,    0,    0,    0,
     1757, 1758, 1758,    0, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758,    0, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758,    0, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1759, 1759,    0, 1759,
     1759, 1759, 1759, 1759, 1759, 1759, 1759, 1759,    0, 1759,
     1759, 1759, 1759, 1759, 1759, 1759, 1759, 1759, 1759,    0,
     1759,    0, 1759, 1759, 1759, 1759, 1759, 1759, 1759, 1759,
     1759, 1761,    0,    0,    0,    0,    0,    0,    0, 1761,

        0, 1761, 1761, 1761, 1761, 1761,    0,    0, 1761,    0,
     1761,    0,    0, 1761, 1761, 1761,    0,    0,    0,    0,
     1761, 1762,    0, 1762, 1762, 1762, 1762, 1762,    0,    0,
     1762,    0, 1762,    0,    0, 1762, 1762, 1762,    0,    0,
        0,    0, 1762, 1763,    0,    0, 1763,    0,    0,    0,
     1763,    0, 1763,    0,    0, 1763, 1763, 1763,    0,    0,
        0,    0, 1763, 1764, 1764,    0, 1764, 1764, 1764, 1764,
     1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764,
     1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764,    0, 1764,
     1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1765, 1765,

     1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765,    0,    0,
     1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765,
     1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765,
     1765, 1765, 1765, 1766, 1766,    0, 1766, 1766, 1766, 1766,
     1766, 1766,    0, 1766, 1766, 1766, 1766, 1766, 1766, 1766,
     1766, 1766, 1766,    0,    0, 1766, 1766, 1766,    0,    0,
     1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1767,    0,
        0, 1767,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1767,    0,    0, 1767, 1767, 1767, 1767, 1768, 1768,

        0,    0,    0,    0, 1768,    0,    0, 1768, 1768, 1768,
        0,    0,    0,    0, 1768, 1769, 1769,    0, 1769, 1769,
     1769, 1769,    0, 1769, 1769, 1769, 1769, 1769, 1769, 1769,
     1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769,
     1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769,
     1770, 1770,    0, 1770,    0,    0,    0,    0,    0, 1770,
        0,    0, 1770, 1770, 1770, 1771,    0, 1771, 1771,    0,
     1771,    0,    0,    0,    0, 1771, 1771,    0,    0, 1771,
     1771, 1771, 1772,    0,    0, 1772,    0, 1772, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772,

     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1773, 1773,    0,
     1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773,
     1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773,
     1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773,
     1773, 1773, 1774,    0,    0, 1774,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1774,    0,    0, 1774, 1774,
     1774, 1776,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1776,    0, 1776,    0, 1776, 1776,    0,    0,    0,

        0, 1776,    0,    0, 1776, 1776, 1776,    0,    0, 1776,
     1777, 1777,    0, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1780,    0,    0, 1780,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1780, 1780,
        0, 1780, 1780, 1780, 1780, 1781,    0,    0, 1781,    0,
        0,    0, 1781,    0, 1781, 1781, 1781, 1781, 1781,    0,
        0,    0, 1781, 1781, 1781,    0, 1781, 1781, 1781,    0,

        0,    0,    0, 1781, 1782,    0,    0, 1782,    0,    0,
        0, 1782,    0, 1782, 1782, 1782, 1782, 1782,    0,    0,
        0, 1782, 1782, 1782,    0, 1782, 1782, 1782,    0,    0,
        0,    0, 1782, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1785,    0,
     1785,    0,    0,    0, 1785,    0,    0, 1785, 1785, 1785,
        0,    0,    0,    0, 1785, 1786,    0,    0, 1786,    0,
        0,    0, 1786,    0, 1786, 1786, 1786, 1786, 1786,    0,

        0,    0, 1786, 1786, 1786,    0, 1786, 1786, 1786,    0,
        0,    0,    0, 1786, 1787,    0,    0, 1787,    0,    0,
        0, 1787,    0, 1787, 1787, 1787, 1787, 1787,    0,    0,
        0, 1787, 1787, 1787,    0, 1787, 1787, 1787,    0,    0,
        0,    0, 1787, 1788, 1788,    0, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1789, 1789,
        0,    0, 1789,    0,    0,    0, 1789,    0, 1789, 1789,
     1789, 1789, 1789,    0, 1789,    0, 1789, 1789, 1789,    0,

     1789, 1789, 1789,    0,    0,    0,    0, 1789, 1790, 1790,
        0,    0, 1790,    0,    0,    0, 1790,    0, 1790, 1790,
     1790, 1790, 1790,    0, 1790,    0, 1790, 1790, 1790,    0,
     1790, 1790, 1790,    0,    0,    0,    0, 1790, 1791, 1791,
     1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1791, 1791, 1791, 1792,    0,    0, 1792,    0,    0,    0,
        0,    0, 1792,    0,    0,    0,    0,    0,    0,    0,
     1792,    0,    0,    0,    0,    0, 1792,    0,    0, 1792,

     1792, 1792,    0,    0,    0,    0, 1792, 1793,    0,    0,
        0,    0,    0, 1793,    0,    0, 1793, 1793, 1793,    0,
        0,    0,    0, 1793, 1794,    0,    0, 1794,    0,    0,
        0, 1794,    0, 1794, 1794, 1794, 1794, 1794,    0,    0,
        0, 1794, 1794, 1794,    0, 1794, 1794, 1794,    0,    0,
        0,    0, 1794, 1795,    0,    0, 1795,    0,    0,    0,
     1795,    0, 1795, 1795, 1795, 1795, 1795,    0,    0,    0,
     1795, 1795, 1795,    0, 1795, 1795, 1795,    0,    0,    0,
        0, 1795, 1796, 1796, 1796, 1796,    0,    0, 1796,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1796,

     1796,    0,    0,    0,    0, 1796,    0,    0, 1796, 1796,
     1796,    0,    0,    0,    0, 1796, 1797, 1797, 1797, 1797,
        0,    0, 1797,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1797,    0,    0,    0,    0, 1797,
        0,    0, 1797, 1797, 1797,    0,    0,    0,    0, 1797,
     1798, 1798, 1798, 1798,    0,    0, 1798,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1798, 1798,    0,
        0,    0,    0, 1798,    0,    0, 1798, 1798, 1798,    0,
        0,    0,    0, 1798, 1799,    0,    0,    0,    0,    0,
     1799,    0,    0, 1799, 1799, 1799,    0,    0,    0,    0,

     1799, 1801,    0, 1801,    0,    0,    0,    0,    0, 1801,
        0,    0, 1801, 1801, 1801,    0,    0,    0,    0, 1801,
     1803,    0,    0,    0,    0,    0, 1803,    0,    0, 1803,
     1803, 1803,    0,    0,    0,    0, 1803, 1804, 1804, 1804,
     1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804,
     1804, 1804, 1804, 1804, 1804,    0, 1804, 1804, 1804, 1804,
     1804,    0, 1804, 1804,    0,    0, 1804, 1804, 1804, 1804,
     1804, 1804, 1808,    0,    0,    0,    0,    0,    0,    0,
     1808,    0, 1808, 1808, 1808, 1808, 1808,    0,    0, 1808,
        0, 1808,    0,    0, 1808, 1808, 1808,    0,    0,    0,

        0, 1808, 1809,    0,    0, 1809,    0,    0,    0, 1809,
        0, 1809,    0,    0, 1809, 1809, 1809,    0,    0,    0,
        0, 1809, 1810,    0, 1810, 1810, 1810, 1810, 1810,    0,
        0, 1810,    0, 1810,    0,    0, 1810, 1810, 1810,    0,
        0,    0,    0, 1810, 1811,    0,    0, 1811,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1811,    0,    0,
     1811, 1811, 1811, 1811, 1812, 1812,    0, 1812, 1812, 1812,
     1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812,
     1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812,

     1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1813,
        0,    0, 1813,    0,    0,    0,    0,    0, 1813,    0,
        0, 1813, 1813, 1813, 1814,    0, 1814,    0, 1814, 1814,
        0, 1814,    0,    0,    0,    0, 1814, 1814,    0,    0,
     1814, 1814, 1814, 1815, 1815,    0, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1817,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1817,    0,
     1817,    0, 1817, 1817,    0,    0,    0,    0, 1817,    0,

        0, 1817, 1817, 1817,    0,    0, 1817, 1818, 1818,    0,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1819, 1819,    0, 1819, 1819, 1819, 1819, 1819,
     1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819,
     1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819,
     1819, 1819, 1819, 1819, 1819, 1819, 1819, 1821,    0,    0,
     1821,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1821, 1821,    0, 1821, 1821, 1821, 1821, 1822, 1822,    0,
     1822,    0,    0,    0,    0,    0,    0,    0,    0, 1822,
        0, 1822, 1822,    0, 1822, 1822,    0,    0,    0, 1822,
     1822,    0,    0, 1822, 1822, 1822,    0, 1822, 1823,    0,
        0, 1823,    0,    0,    0, 1823,    0, 1823, 1823, 1823,
     1823, 1823,    0,    0,    0, 1823, 1823, 1823,    0, 1823,
     1823, 1823,    0,    0,    0,    0, 1823, 1824, 1824, 1824,
     1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,
     1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,
     1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,

     1824, 1824, 1825,    0,    0, 1825,    0,    0,    0, 1825,
        0, 1825, 1825, 1825, 1825, 1825,    0,    0,    0, 1825,
     1825, 1825,    0, 1825, 1825, 1825,    0,    0,    0,    0,
     1825, 1826, 1826,    0, 1826, 1826, 1826, 1826, 1826, 1826,
     1826, 1826, 1826, 1826, 1826, 1826, 1826, 1826, 1826, 1826,
     1826, 1826, 1826, 1826, 1826, 1826, 1826, 1826, 1826, 1826,
     1826, 1826, 1826, 1826, 1826, 1826, 1827, 1827,    0,    0,
     1827,    0,    0,    0, 1827,    0, 1827, 1827, 1827, 1827,
     1827,    0, 1827,    0, 1827, 1827, 1827,    0, 1827, 1827,
     1827,    0,    0,    0,    0, 1827, 1828,    0,    0, 1828,

        0,    0,    0, 1828,    0, 1828, 1828, 1828, 1828, 1828,
        0,    0,    0, 1828, 1828, 1828,    0, 1828, 1828, 1828,
        0,    0,    0,    0, 1828, 1830, 1830, 1830, 1830,    0,
        0, 1830,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1830, 1830,    0,    0,    0,    0, 1830,    0,
        0, 1830, 1830, 1830,    0,    0,    0,    0, 1830, 1831,
     1831, 1831, 1831,    0,    0, 1831,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1831,    0,    0,
        0,    0, 1831,    0,    0, 1831, 1831, 1831,    0,    0,
        0,    0, 1831, 1832,    0, 1832,    0,    0,    0,    0,

        0, 1832,    0,    0, 1832, 1832, 1832,    0,    0,    0,
        0, 1832, 1833,    0,    0,    0,    0,    0, 1833,    0,
        0, 1833, 1833, 1833,    0,    0,    0,    0, 1833, 1834,
        0,    0,    0,    0,    0,    0,    0, 1834,    0, 1834,
     1834, 1834, 1834, 1834,    0,    0, 1834,    0, 1834,    0,
        0, 1834, 1834, 1834,    0,    0,    0,    0, 1834, 1835,
        0, 1835, 1835, 1835, 1835, 1835,    0,    0, 1835,    0,
     1835,    0,    0, 1835, 1835, 1835,    0,    0,    0,    0,
     1835, 1836, 1836,    0, 1836,    0,    0,    0,    0,    0,
     1836,    0,    0, 1836, 1836, 1836, 1837, 1837,    0, 1837,

     1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837,
     1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837,
     1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837,
     1837, 1838, 1838, 1838, 1838,    0,    0, 1838,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1838, 1838,
        0,    0,    0,    0, 1838,    0,    0, 1838, 1838, 1838,
        0,    0,    0,    0, 1838, 1839, 1839, 1839, 1839, 1839,
     1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839,
     1839, 1839, 1839,    0, 1839, 1839, 1839, 1839, 1839,    0,
     1839, 1839,    0, 1839,    0, 1839, 1839, 1839, 1839, 1839,

     1840, 1840,    0, 1840, 1840, 1840, 1840, 1840, 1840, 1840,
     1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840,
     1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840,
     1840, 1840, 1840, 1840, 1840, 1841, 1841, 1841, 1841, 1841,
     1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841,
     1841, 1841, 1841,    0, 1841, 1841, 1841, 1841, 1841,    0,
     1841, 1841,    0,    0,    0, 1841, 1841, 1841, 1841, 1841,
     1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842,
     1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842,    0, 1842,
     1842, 1842, 1842, 1842,    0, 1842, 1842,    0,    0,    0,

     1842, 1842, 1842, 1842, 1842, 1843, 1843, 1843, 1843, 1843,
     1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
     1843, 1843, 1843,    0, 1843, 1843, 1843, 1843, 1843,    0,
     1843, 1843,    0,    0,    0, 1843, 1843, 1843, 1843, 1843,
     1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844,
     1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844,    0, 1844,
     1844, 1844, 1844, 1844,    0, 1844, 1844,    0,    0,    0,
     1844, 1844, 1844, 1844, 1844, 1845, 1845,    0, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,

     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2020 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <QFile>
#include <QStack>
#include <QVector>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <cite.h>
#include <condparser.h>
#include <config.h>
#include <default_args.h>
#include <doxy_globals.h>
#include <entry.h>
#include <formula.h>
#include <index.h>
#include <language.h>
#include <membergroup.h>
#include <message.h>
#include <outputlist.h>
#include <parse_base.h>
#include <parse_cstyle.h>
#include <parse_md.h>
#include <util.h>

#define YY_NO_INPUT 1

// forward declarations
static bool handleBrief(const QString &str, const QStringList &list);
static bool handleFn(const QString &str, const QStringList &list);
static bool handleProperty(const QString &str, const QStringList &list);
static bool handleDef(const QString &str, const QStringList &list);
static bool handleOverload(const QString &str, const QStringList &list);
static bool handleEnum(const QString &str, const QStringList &list);
static bool handleDefGroup(const QString &str, const QStringList &list);
static bool handleAddToGroup(const QString &str, const QStringList &list);
static bool handleWeakGroup(const QString &str, const QStringList &list);
static bool handleNamespace(const QString &str, const QStringList &list);
static bool handlePackage(const QString &str, const QStringList &list);
static bool handleClass(const QString &str, const QStringList &list);
static bool handleConcept(const QString &str, const QStringList &list);
static bool handleHeaderFile(const QString &str, const QStringList &list);
static bool handleProtocol(const QString &str, const QStringList &list);
static bool handleCategory(const QString &str, const QStringList &list);
static bool handleUnion(const QString &str, const QStringList &list);
static bool handleStruct(const QString &str, const QStringList &list);;
static bool handleInterface(const QString &str, const QStringList &list);
static bool handleIdlException(const QString &str, const QStringList &list);
static bool handlePage(const QString &str, const QStringList &list);
static bool handleMainpage(const QString &str, const QStringList &list);
static bool handleFile(const QString &str, const QStringList &list);
static bool handleDir(const QString &str, const QStringList &list);
static bool handleExample(const QString &str, const QStringList &list);
static bool handleDetails(const QString &str, const QStringList &list);
static bool handleName(const QString &str, const QStringList &list);
static bool handleTodo(const QString &str, const QStringList &list);
static bool handleTest(const QString &str, const QStringList &list);
static bool handleBug(const QString &str, const QStringList &list);
static bool handleSubpage(const QString &str, const QStringList &list);
static bool handleDeprecated(const QString &str, const QStringList &list);
static bool handleXRefItem(const QString &str, const QStringList &list);
static bool handleRelated(const QString &str, const QStringList &list);
static bool handleRelatedAlso(const QString &str, const QStringList &list);
static bool handleMemberOf(const QString &str, const QStringList &list);
static bool handleRefItem(const QString &str, const QStringList &list);
static bool handleSection(const QString &str, const QStringList &list);
static bool handleAnchor(const QString &str, const QStringList &list);
static bool handleCite(const QString &str, const QStringList &list);
static bool handleFormatBlock(const QString &str, const QStringList &list);
static bool handleAddIndex(const QString &str, const QStringList &list);;
static bool handleIf(const QString &str, const QStringList &list);
static bool handleIfNot(const QString &str, const QStringList &list);
static bool handleElseIf(const QString &str, const QStringList &list);
static bool handleElse(const QString &str, const QStringList &list);
static bool handleEndIf(const QString &str, const QStringList &list);
static bool handleIngroup(const QString &str, const QStringList &list);
static bool handleNoSubGrouping(const QString &str, const QStringList &list);
static bool handleShowInitializer(const QString &str, const QStringList &list);
static bool handleHideInitializer(const QString &str, const QStringList &list);
static bool handleCallgraph(const QString &str, const QStringList &list);
static bool handleHideCallgraph(const QString &str, const QStringList &list);
static bool handleCallergraph(const QString &str, const QStringList &list);
static bool handleHideCallergraph(const QString &str, const QStringList &list);
static bool handleReferencedByRelation(const QString &str, const QStringList &list);
static bool handleHideReferencedByRelation(const QString &str, const QStringList &list);
static bool handleReferencesRelation(const QString &str, const QStringList &list);
static bool handleHideReferencesRelation(const QString &str, const QStringList &list);
static bool handleInternal(const QString &str, const QStringList &list);
static bool handleStatic(const QString &str, const QStringList &list);
static bool handlePure(const QString &str, const QStringList &list);
static bool handlePrivate(const QString &str, const QStringList &list);
static bool handlePrivateSection(const QString &str, const QStringList &list);
static bool handleProtected(const QString &str, const QStringList &list);
static bool handleProtectedSection(const QString &str, const QStringList &list);
static bool handlePublic(const QString &str, const QStringList &list);
static bool handlePublicSection(const QString &str, const QStringList &list);
static bool handleToc(const QString &str, const QStringList &list);
static bool handleInherit(const QString &str, const QStringList &list);
static bool handleExtends(const QString &str, const QStringList &list);
static bool handleCopyDoc(const QString &str, const QStringList &list);
static bool handleCopyBrief(const QString &str, const QStringList &list);
static bool handleCopyDetails(const QString &str, const QStringList &list);
static bool handleParBlock(const QString &str, const QStringList &list);
static bool handleEndParBlock(const QString &str, const QStringList &list);
static bool handleParam(const QString &str, const QStringList &list);
static bool handleRetval(const QString &str, const QStringList &list);
//   static void handleGuard(const QString &str, const QStringList &list);

static void checkFormula();

using DocCmdFunc = bool (*)(const QString &str, const QStringList &list);

struct DocCmdMap
{
   DocCmdMap(const char *x1, DocCmdFunc x2, bool x3) {
      cmdName   = QString::fromUtf8(x1);
      handler   = x2;
      endsBrief = x3;
   }

   QString cmdName;
   DocCmdFunc handler;
   bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "addindex",        &handleAddIndex,                 false },
  { "addtogroup",      &handleAddToGroup,               false },
  { "anchor",          &handleAnchor,                   true  },
  { "arg",             0,                               true  },
  { "attention",       0,                               true  },
  { "author",          0,                               true  },
  { "authors",         0,                               true  },
  { "brief",           &handleBrief,                    false },
  { "bug",             &handleBug,                      false },
  { "callergraph",     &handleCallergraph,              false },
  { "callgraph",       &handleCallgraph,                false },
  { "category",        &handleCategory,                 false },
  { "cite",            &handleCite,                     false },
  { "class",           &handleClass,                    false },
  { "code",            &handleFormatBlock,              true  },
  { "concept",         &handleConcept,                  false },
  { "copybrief",       &handleCopyBrief,                false },
  { "copydetails",     &handleCopyDetails,              true  },
  { "copydoc",         &handleCopyDoc,                  true  },
  { "copyright",       0,                               true  },
  { "date",            0,                               true  },
  { "def",             &handleDef,                      false },
  { "defgroup",        &handleDefGroup,                 false },
  { "deprecated",      &handleDeprecated,               false },
  { "details",         &handleDetails,                  true  },
  { "dir",             &handleDir,                      false },
  { "docbookinclude",  0,                               false },
  { "docbookonly",     &handleFormatBlock,              false },
  { "dot",             &handleFormatBlock,              true  },
  { "dotfile",         0,                               true  },
  { "else",            &handleElse,                     false },
  { "elseif",          &handleElseIf,                   false },
  { "endif",           &handleEndIf,                    false },
  { "endparblock",     &handleEndParBlock,              true  },
  { "enum",            &handleEnum,                     false },
  { "example",         &handleExample,                  false },
  { "exception",       0,                               true  },
  { "extends",         &handleExtends,                  true  },
  { "file",            &handleFile,                     false },
  { "fn",              &handleFn,                       false },
  { "group",           &handleDefGroup,                 false },
  { "headerfile",      &handleHeaderFile,               false },
  { "hidecallergraph", &handleHideCallergraph,          false },
  { "hidecallgraph",   &handleHideCallgraph,            false },
  { "hideinitializer", &handleHideInitializer,          false },
  { "hiderefby",       &handleHideReferencedByRelation, false },
  { "hiderefs",        &handleHideReferencesRelation,   false },
  { "htmlinclude",     0,                               false },
  { "htmlonly",        &handleFormatBlock,              false },
  { "idlexcept",       &handleIdlException,             false },
  { "if",              &handleIf,                       false },
  { "ifnot",           &handleIfNot,                    false },
  { "image",           0,                               true  },
  { "implements",      &handleExtends,                  true  },
  { "include",         0,                               true  },
  { "includelineno",   0,                               true  },
  { "ingroup",         &handleIngroup,                  false },
  { "inherit",         &handleInherit,                  true  },
  { "interface",       &handleInterface,                false },
  { "internal",        &handleInternal,                 true  },
  { "invariant",       0,                               true  },
  { "latexinclude",    0,                               false },
  { "latexonly",       &handleFormatBlock,              false },
  { "li",              0,                               true  },
  { "line",            0,                               true  },
  { "mainpage",        &handleMainpage,                 false },
  { "maninclude",      0,                               false },
  { "manonly",         &handleFormatBlock,              false },
  { "memberof",        &handleMemberOf,                 true  },
  { "msc",             &handleFormatBlock,              true  },
  { "name",            &handleName,                     false },
  { "namespace",       &handleNamespace,                false },
  { "nosubgrouping",   &handleNoSubGrouping,            false },
  { "note",            0,                               true  },
  { "overload",        &handleOverload,                 false },
  { "package",         &handlePackage,                  false },
  { "page",            &handlePage,                     false },
  { "par",             0,                               true  },
  { "paragraph",       &handleSection,                  true  },
  { "param",           &handleParam,                    true  },
  { "parblock",        &handleParBlock,                 true  },
  { "post",            0,                               true  },
  { "pre",             0,                               true  },
  { "private",         &handlePrivate,                  false },
  { "privatesection",  &handlePrivateSection,           false },
  { "property",        &handleProperty,                 false },
  { "protected",       &handleProtected,                false },
  { "protectedsection",&handleProtectedSection,         false },
  { "protocol",        &handleProtocol,                 false },
  { "public",          &handlePublic,                   false },
  { "publicsection",   &handlePublicSection,            false },
  { "pure",            &handlePure,                     false },
  { "refitem",         &handleRefItem,                  true  },
  { "related",         &handleRelated,                  true  },
  { "relatedalso",     &handleRelatedAlso,              true  },
  { "relates",         &handleRelated,                  true  },
  { "relatesalso",     &handleRelatedAlso,              true  },
  { "remark",          0,                               true  },
  { "remarks",         0,                               true  },
  { "result",          0,                               true  },
  { "return",          0,                               true  },
  { "returns",         0,                               true  },
  { "retval",          &handleRetval,                   true  },
  { "rtfinclude",      0,                               false },
  { "rtfonly",         &handleFormatBlock,              false },
  { "sa",              0,                               true  },
  { "section",         &handleSection,                  true  },
  { "see",             0,                               true  },
  { "short",           &handleBrief,                    false },
  { "showinitializer", &handleShowInitializer,          false },
  { "showrefby",       &handleReferencedByRelation,     false },
  { "showrefs",        &handleReferencesRelation,       false },
  { "since",           0,                               true  },
  { "snippet",         0,                               true  },
  { "snippetlineno",   0,                               true  },
  { "startuml",        &handleFormatBlock,              true  },
  { "static",          &handleStatic,                   false },
  { "struct",          &handleStruct,                   false },
  { "subpage",         &handleSubpage,                  true  },
  { "subsection",      &handleSection,                  true  },
  { "subsubsection",   &handleSection,                  true  },
  { "tableofcontents", &handleToc,                      false },
  { "test",            &handleTest,                     false },
  { "throw",           0,                               true  },
  { "throws",          0,                               true  },
  { "todo",            &handleTodo,                     false },
  { "tparam",          0,                               true  },
  { "typedef",         &handleFn,                       false },
  { "union",           &handleUnion,                    false },
  { "until",           0,                               true  },
  { "var",             &handleFn,                       false },
  { "verbatim",        &handleFormatBlock,              true  },
  { "verbinclude",     0,                               false },
  { "version",         0,                               true  },
  { "warning",         0,                               true  },
  { "weakgroup",       &handleWeakGroup,                false },
  { "xmlinclude",      0,                               false },
  { "xmlonly",         &handleFormatBlock,              false },
  { "xrefitem",        &handleXRefItem,                 false },
  { nullptr,          0,                               false }
};

//  Maps a command name (as found in a comment block) onto a specific handler function
class DocCmdMapper
{
  public:
    struct Cmd {
      DocCmdFunc func;
      bool endsBrief;
    };

    // maps a command name to a handler function
    static Cmd *map(const QString &name) {
      return instance()->find(name);
    }

    // release the instance
    static void freeInstance() {
      delete s_instance;
      s_instance = nullptr;
    }

  private:
    static DocCmdMapper *instance() {
      if (s_instance == nullptr) {
         s_instance = new DocCmdMapper;
      }

      return s_instance;
   }

   DocCmdMapper() {
      DocCmdMap *p = docCmdMap;

      while (! p->cmdName.isEmpty()) {
         if (m_map.contains(p->cmdName)) {
            err("DocCmdMapper: command %s already added\n", csPrintable(p->cmdName));
            Doxy_Work::stopDoxyPress();
         }

         Cmd *cmd       = new Cmd;
         cmd->func      = p->handler;
         cmd->endsBrief = p->endsBrief;

         m_map.insert(p->cmdName, cmd);
         ++p;
      }
   }

   Cmd *find(const QString &name) {
      return m_map.value(name);
   }

   QHash<QString, Cmd *> m_map;
   static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance = nullptr;

#define YY_NEVER_INTERACTIVE 1

enum XRefKind {
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext {
  OutputMainDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType {
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
 public:
   GuardedSection(bool enabled, bool parentVisible)
      : m_enabled(enabled), m_parentVisible(parentVisible) {}

   bool isEnabled() const {
      return m_enabled;
   }

   bool parentVisible() const {
      return m_parentVisible;
   }

 private:
   bool m_enabled;
   bool m_parentVisible;
};

void openGroup(QSharedPointer<Entry> e, const QString &file, int line);
void closeGroup(QSharedPointer<Entry> e, const QString &file, int line, bool foundInline = false);
void initGroupInfo(QSharedPointer<Entry> e);
static void groupAddDocs(QSharedPointer<Entry> e);

static QString          s_inputString;         // input string
static QString          s_currentCommand;
static int              s_inputPosition;       // read pointer
static int              s_prevPosition;
static char            *s_bufferPosition;

static QString          yyFileName;            // file name that is read from
static int              yyLineNr;              // line number in the input
static bool             inBody;                // was the comment found inside the body of a function?
static OutputContext    inContext;             // are we inside the brief, details or xref part
static bool             briefEndsAtDot;        // does the brief description stop at a dot
static QString          formulaText;           // Running text of a formula
static QString          formulaEnv;            // environment name
static int              formulaNewLines;       // amount of new lines in the formula

static QString          s_outputXRef;          // tmp argument of todo/test/../xrefitem commands
static QString          s_blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;              // kind of cross-reference command
static XRefKind         newXRefKind;
static GuardType        s_guardType;           // kind of guard for conditional section
static bool             s_isEnabledSection;
static QString          s_functionProto;       // function prototype

static bool             s_needNewEntry;
// static int           s_docBlockContext;

static QString          s_sectionLabel;
static QString          s_sectionTitle;
static int              s_sectionLevel;
static QString          xrefItemKey;
static QString          newXRefItemKey;
static QString          xrefItemTitle;
static QString          xrefListTitle;
static Protection       s_protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             s_parseMore;

static int              s_condCount;
static int              s_commentCount;
static QString          s_spaceBeforeCmd;
static QString          s_spaceBeforeIf;
static QString          s_copyDocArg;
static QString          s_guardExpr;
static int              s_roundCount;
static bool             s_insideParBlock;

static int              s_memberGroupId = DOX_NOGROUP;
static QString          s_memberGroupHeader;
static QString          s_memberGroupDocs;
static QString          s_memberGroupRelates;
static QString          s_compoundName;

static bool             s_internalDocs;
static bool             s_processInternalDocs = false;

static ParserInterface        *langParser;        // the language parser calling us

static QSharedPointer<Entry>  s_docsEntry;        // which entry
static EntryKey               s_docsEnum;         // which enum in EntryKey (brief, main, inbody)

static QStack<GuardedSection> s_guards;           // tracks nested conditional sections (if, ifnot, ..)
static QSharedPointer<Entry>  current;            // working entry

static QStack<QSharedPointer<Grouping>> s_autoGroupStack;

// double declared
static void yyunput (int c, char *buf_ptr);

static void initParser()
{
   s_sectionLabel.resize(0);
   s_sectionTitle.resize(0);
   s_memberGroupHeader.resize(0);

   s_insideParBlock = false;
   s_internalDocs   = Config::getBool("internal-docs");
}

static bool getDocSectionName(int s)
{
  switch(s) {
    case Entry::CATEGORYDOC_SEC:
    case Entry::CLASSDOC_SEC:
    case Entry::CONCEPTDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::MEMBERGRP_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
      return true;

    default:
      return false;
  }
}

static bool makeStructuralIndicator(Entry::Sections s)
{
   if (getDocSectionName(current->section)) {
      return true;

   } else {
      s_needNewEntry     = true;

      current->section   = s;
      current->startLine = yyLineNr;
      current->docLine   = yyLineNr;

      current->setData(EntryKey::File_Name, yyFileName);

      return false;
   }
}

static QString stripQuotes(const QString &s)
{
   QString name = s;

   if (name.isEmpty()) {
      return name;
   }

   if (name.at(0) == '"' && name.at(name.length() - 1) == '"') {
      name = name.mid(1, name.length() - 2);
   }

   return name;
}

static void addXRefItem(const QString &listName, const QString &itemTitle, const QString &listTitle, bool append)
{
   QSharedPointer<Entry> docEntry = current; // inBody && previous ? previous : current;

   if (listName.isEmpty()) {
      return;
   }

   auto refList = Doxy_Globals::xrefLists.find(listName);

   if (refList == Doxy_Globals::xrefLists.end()) {
      // new list
      Doxy_Globals::xrefLists.insert(listName, RefList(listName, listTitle, itemTitle));
      refList = Doxy_Globals::xrefLists.find(listName);
   }

   ListItemInfo *listItem = nullptr;

   for (auto &item : docEntry->m_specialLists) {
      listItem = &item;

      if (listItem->type == listName) {
         break;
      }
   }

   if (listItem && append) {
      // already found item of same type just before this one

      RefItem *item = refList->getRefItem(listItem->itemId);
      assert(item != 0);

      item->text += " <p>";
      item->text += s_outputXRef;

   } else {
      // new item

      int itemId  = refList->addRefItem();

      // if we have already an item from the same list type (e.g. a second @todo)
      // in the same Entry (i.e. lii!=0) then we reuse its link anchor.

      QString anchorLabel = QString("_%1%2").formatArg(listName).formatArg(itemId, 6, 10, QChar('0'));

      RefItem *item = refList->getRefItem(itemId);
      assert(item != 0);

      item->text       = s_outputXRef;
      item->listAnchor = anchorLabel;

      docEntry->addSpecialListItem(listName, itemId);

      QString cmdString = QString(" \\xrefitem %1 %2.").formatArg(listName).formatArg(itemId);

      if (inBody) {
         docEntry->appendData(EntryKey::Inbody_Docs, cmdString);
      } else {
         docEntry->appendData(EntryKey::Main_Docs,   cmdString);
      }

      QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorLabel);

      if (si) {
         if (si->lineNr != -1) {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s, line %d)",
                  csPrintable(anchorLabel), csPrintable(si->fileName), si->lineNr);

         } else {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s)",
                  csPrintable(anchorLabel), csPrintable(si->fileName));
         }

      } else {
         si = QMakeShared<SectionInfo>(listName, yyLineNr, anchorLabel, s_sectionTitle, SectionInfo::Anchor, s_sectionLevel);
         Doxy_Globals::sectionDict.insert(anchorLabel, si);
         docEntry->m_anchors.append(*si);
      }
   }

   s_outputXRef.clear();
}

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QString addFormula()
{
   QString formLabel;
   QString fText = formulaText.simplified();

   auto f = Doxy_Globals::formulaDict.find(fText);

   if (f == Doxy_Globals::formulaDict.end()) {
      Formula temp = Formula(fText);

      Doxy_Globals::formulaList.append(temp);
      Doxy_Globals::formulaDict.insert(fText, temp);

      formLabel = QString("\\form#%1").formatArg(temp.getId());

      Doxy_Globals::formulaNameDict.insert(formLabel, temp);
      f = Doxy_Globals::formulaDict.find(fText);

   } else {
      formLabel = QString("\\form#%1").formatArg(f->getId());

   }

   for (int i = 0; i < formulaNewLines; i++) {
      formLabel += "@_fakenl";   // add fake newlines to
   }

   // keep the warnings correctly aligned
   return formLabel;
}

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level >= 0 && level < 5) {
      return (SectionInfo::SectionType)level;
   }

   return SectionInfo::Anchor;
}

static void addSection()
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(s_sectionLabel);

   if (si) {
      if (si->lineNr != -1) {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName), si->lineNr);

      } else {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName));
      }

   } else {
      // create a new section element
      s_sectionTitle += QString::fromUtf8(commentscanYYtext).trimmed();

      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, s_sectionLabel, s_sectionTitle,
                  sectionLevelToType(s_sectionLevel), s_sectionLevel);

      // add section to this entry
      current->m_anchors.append(*si);

      // add section to the global dictionary
      Doxy_Globals::sectionDict.insert(s_sectionLabel, si);

      // for a section the si->fileName is the physical file name. this will be replaced with the section name
      // in doctokenizer processSection()
   }
}

static void addCite()
{
   QString text = QString::fromUtf8(commentscanYYtext);
   if (text.startsWith('"')) {
      text.chop(1);
      text = text.mid(1);
   }

   Doxy_Globals::citeDict.insert(text);
}

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QString &s)
{
   int len = s.length();

   int i = len - 1;
   QChar c;

   while (i >= 0 && ((c = s.at(i)) == ' ' || c == '\t' || c == '\r')) {
      i--;
   }

   if (i != len - 1) {
      // string up to and including char at pos i and \0 terminator
      s.resize(i + 2);
   }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
   bool xrefAppendToPrev = xrefAppendFlag;

   // determine append flag for the next item (i.e. the end of this item)
   xrefAppendFlag = ! inBody &&
                    inContext == OutputXRef && ctx == OutputXRef &&    // two consecutive xref items
                    newXRefKind == xrefKind &&                         // of the same kind
                    (xrefKind != XRef_Item ||
                    newXRefItemKey == xrefItemKey);                    // with the same key if \xrefitem

   if (inContext == OutputXRef) {

      // end of XRef section => add the item
      // See if we can append this new xref item to the previous one.
      // We know this at the start of the next item of the same
      // type and need to remember this until the end of that item.

    switch(xrefKind) {
         case XRef_Todo:
            addXRefItem("todo", theTranslator->trTodo(), theTranslator->trTodoList(), xrefAppendToPrev);
            break;

         case XRef_Test:
            addXRefItem("test", theTranslator->trTest(), theTranslator->trTestList(), xrefAppendToPrev);
            break;

         case XRef_Bug:
            addXRefItem("bug", theTranslator->trBug(), theTranslator->trBugList(), xrefAppendToPrev);
            break;

         case XRef_Deprecated:
            // ensure the current entry is marked
            current->m_traits.setTrait(Entry::Virtue::Deprecated);

            addXRefItem("deprecated", theTranslator->trDeprecated(), theTranslator->trDeprecatedList(), xrefAppendToPrev);
            break;

         case XRef_Item:
            // user defined list
            addXRefItem(xrefItemKey, xrefItemTitle, xrefListTitle, xrefAppendToPrev);
            break;

         case XRef_None:
            assert(0);
            break;
      }
   }

  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;

   if (inContext != OutputXRef && inBody) {
      inContext = OutputInbody;
   }

  switch(inContext) {
      case OutputMainDoc:
         if (oldContext != inContext) {

            QString tmpDocs = current->getData(EntryKey::Main_Docs);
            stripTrailingWhiteSpace(tmpDocs);
            current->setData(EntryKey::Main_Docs, tmpDocs);

            if (current->getData(EntryKey::MainDocs_File).isEmpty()) {
               current->setData(EntryKey::MainDocs_File, yyFileName);
               current->docLine = yyLineNr;
            }
         }

         s_docsEntry = current;
         s_docsEnum  = EntryKey::Main_Docs;

         break;

      case OutputBrief:
         if (oldContext != inContext) {
            if (current->getData(EntryKey::Brief_File).isEmpty()) {
               current->setData(EntryKey::Brief_File, yyFileName);
               current->briefLine = yyLineNr;
            }
         }

         if (current->getData(EntryKey::Brief_Docs).trimmed().isEmpty())  {
            // only want one brief description even if multiple are given
            s_docsEntry = current;
            s_docsEnum  = EntryKey::Brief_Docs;

         } else {

            if (! current->getData(EntryKey::Main_Docs).isEmpty()) {
               // when appending parts add a new line
               current->appendData(EntryKey::Main_Docs, "\n");
            }

            s_docsEntry  = current;
            s_docsEnum   = EntryKey::Main_Docs;

            inContext    = OutputMainDoc;             // need to switch to detailed docs
         }
         break;

      case OutputInbody:
         s_docsEntry = current;
         s_docsEnum  = EntryKey::Inbody_Docs;
         break;

      case OutputXRef:
         // indicates s_outputXRef should be used for the output string
         s_docsEntry = QSharedPointer<Entry>();

         break;
   }
}

static void addAnchor(const QString &anchorName)
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorName);

   if (si) {
      // anchor name already exists
      si->dupAnchor_cnt++;

   } else {
      // title is empty, level is zero
      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, anchorName, QString(""), SectionInfo::Anchor, 0);
      si->dupAnchor_fName = yyFileName;

      Doxy_Globals::sectionDict.insert(anchorName, si);
      current->m_anchors.append(*si);
   }
}

// add a string to one of the three doc outputs
static void addToOutput(const QString &str)
{
   if (s_docsEntry == nullptr) {
      // indicates s_outputXRef should be used for the output string
      s_outputXRef += str;

   } else {
      s_docsEntry->appendData(s_docsEnum, str);
   }
}

static void addToOutput(QChar c)
{
   if (s_docsEntry == nullptr) {
      // indicates s_outputXRef should be used for the output string
      s_outputXRef += c;

   } else {
      s_docsEntry->appendData(s_docsEnum, c);
   }
}

static void unputString(const QString &str) {

   auto iter     = str.storage_rbegin();
   auto iter_end = str.storage_rend();

   while (iter != iter_end) {
      unput(*iter);

      ++iter;
   }
}

static void endBrief(bool isOutput = true)
{
   if (! current->getData(EntryKey::Brief_Docs).trimmed().isEmpty()) {
      // only go to the detailed description if we found a brief description and not just whitespace

      briefEndsAtDot = false;
      setOutput(OutputMainDoc);

      if (isOutput) {
         QString text = QString::fromUtf8(commentscanYYtext);
         addToOutput(text);
      }
   }
}

static void handleGuard(const QString &expr);

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
   s_bufferPosition = buf;
   s_prevPosition   = s_inputPosition;

   //
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

/* start command character */
#define YY_NO_UNISTD_H 1
/* comment parsing states */

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define ConceptDocArg1 9
#define ConceptDocArg2 10
#define XRefItemParam1 11
#define XRefItemParam2 12
#define XRefItemParam3 13
#define FileDocArg1 14
#define ParamArg1 15
#define EnumDocArg1 16
#define NameSpaceDocArg1 17
#define PackageDocArg1 18
#define GroupDocArg1 19
#define GroupDocArg2 20
#define SectionLabel 21
#define SectionTitle 22
#define SubpageLabel 23
#define SubpageTitle 24
#define FormatBlock 25
#define LineParam 26
#define GuardParam 27
#define GuardParamEnd 28
#define SkipGuardedSection 29
#define SkipInternal 30
#define NameParam 31
#define InGroupParam 32
#define FnParam 33
#define OverloadParam 34
#define InheritParam 35
#define ExtendsParam 36
#define ReadFormulaShort 37
#define ReadFormulaLong 38
#define AnchorLabel 39
#define HtmlComment 40
#define SkipLang 41
#define CiteLabel 42
#define CopyDoc 43
#define GuardExpr 44
#define CdataSection 45

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
  /* What can happen while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxy\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1594 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1593 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      // mail address
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // quoted text
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      // directory (or chain of commands)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
{
      // HTML command ends a brief description
      setOutput(OutputMainDoc);

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
{
      // HTML command that ends a brief description
      if (current->m_srcLang == SrcLangExt_CSharp) {
         setOutput(OutputMainDoc);
      }

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      // start of a .NET XML style brief description
      QString text = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputBrief);
      addToOutput(text);
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputMainDoc);
      addToOutput(text);
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
{
      // end of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);

      setOutput(OutputBrief);
      addToOutput(text);
      setOutput(OutputMainDoc);
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // end of a brief or detailed description
      QString text = QString::fromUtf8(commentscanYYtext);

      setOutput(OutputMainDoc);
      addToOutput(text);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      QString tag = QString::fromUtf8(commentscanYYtext);

      int s = tag.indexOf("id=");

      if (s != -1) {
         // command has id attribute
         QChar c = tag[s + 3];

         if (c == '\'' || c == '"') {
            // valid start
            int e = tag.indexOf(c,s + 4);

            if (e != -1) {
               // found matching end

               QString id = tag.mid(s + 4, e-s-4);   // extract id
               addAnchor(id);
            }
         }
      }

      addToOutput(tag);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      insidePre = true;
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      insidePre = false;
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      // RCS tag which end a brief description
      setOutput(OutputMainDoc);
      REJECT;
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      BEGIN(HtmlComment);
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      BEGIN(CdataSection);
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      addToOutput(" \\endinternal ");

      if (! s_processInternalDocs) {
         warn(yyFileName, yyLineNr, "Found \\endinternal without matching \\internal");
      }

      s_processInternalDocs = false;
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      // preserve spacing around \\internal_linebr
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      // simulate calling addToOutPut()
      QString text = QString::fromUtf8(commentscanYYtext);
      s_docsEntry->appendData(EntryKey::Main_Docs, text);
   }
	YY_BREAK
case 21:
case 22:
YY_RULE_SETUP
{
      // might be a valid command
      QString text = QString::fromUtf8(commentscanYYtext);

      /* handle `\f{` and `@f{` as special cases */
      int idx = text.indexOf('{');

      if ((idx > 1) && (text[idx - 1] == 'f') && (text[idx - 2] == '\\' || text[idx - 2] =='@')) {
         REJECT;
      }

      QStringView view = QStringView(text).trimmed();

      QString cmdName;
      QStringList optList;

      if (view.contains('{')) {
         // cmd { options }

         QString tmp = view.mid(1, 2).toLower();

         if (tmp == "f{")  {
            // handle "\f{" and "@f{" elsewhere
            REJECT;
         }

         static QRegularExpression regexp("[\\\\@](\\w+)\\s*{([^}]+)}");
         QRegularExpressionMatch match = regexp.match(view);

         // remove {CMD}
         cmdName = match.captured(1);
         optList = match.captured(2).split(',');

      } else {
         // no options
         cmdName = view.mid(1);

      }

      DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);

      if (cmdPtr) {
         // special action is required

         int i = 0;
         while (text[i] == ' ' || text[i] == '\t') {
            ++i;
         }

         s_spaceBeforeCmd = text.left(i);

         if (cmdPtr->endsBrief && ! (inContext == OutputXRef && cmdName == "parblock")) {
            briefEndsAtDot = false;

            // this command forces the end of brief description
            setOutput(OutputMainDoc);
         }

         if (cmdPtr->func && cmdPtr->func(cmdName, optList)) {
            // handler wants to stop and reenter this parser

            s_parseMore = true;

            s_inputPosition = s_prevPosition + (yy_bp - s_bufferPosition);
            yyterminate();

         } else if (cmdPtr->func == nullptr) {
            // command without handler is processed later by docparser
            addToOutput(text);
         }

      } else {
         // some command was found, just pass it on
         addToOutput(text);
      }
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      // escaped formula command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      // language switch command
      static const QString outputLanguage = Config::getEnum("output-language");

      QString text   = QString::fromUtf8(commentscanYYtext);
      QString langId = text.trimmed().mid(2);

      if (! langId.isEmpty() && outputLanguage.compare(langId, Qt::CaseInsensitive) != 0) {
         // enable language specific section
         BEGIN(SkipLang);
      }
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      // start of a formula with custom environment
      QString text = QString::fromUtf8(commentscanYYtext);

      // this command forces the end of brief description
      setOutput(OutputMainDoc);

      formulaText = "\\begin";
      formulaEnv = text.trimmed().mid(2);

      if (formulaEnv.at(formulaEnv.length() - 1) == '{') {
         // remove trailing open brace
         formulaEnv = formulaEnv.left(formulaEnv.length() - 1);
      }

      formulaText += formulaEnv;
      formulaNewLines = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      // start of a inline formula
      formulaText     = "$";
      formulaNewLines = 0;
      BEGIN(ReadFormulaShort);
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      // start of a block formula

      // this command forces the end of brief description
      setOutput(OutputMainDoc);

      formulaText      = "\\[";
      formulaNewLines  = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
      // beginning of a group
      openGroup(current, yyFileName, yyLineNr);
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      // end of a group
      QString text = QString::fromUtf8(commentscanYYtext);

      closeGroup(current, yyFileName, yyLineNr, true);

      s_memberGroupHeader.clear();
      s_parseMore    = true;
      s_needNewEntry = true;

      s_inputPosition = s_prevPosition + (yy_bp - s_bufferPosition) + text.length();
      yyterminate();
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      // escaped character
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      // normal word
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // explicit end autolist: e.g "  ."
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 33:
case 34:
YY_RULE_SETUP
{
      // start of autolist
      if (! Doxy_Globals::markdownSupport) {
         REJECT;

      } else {

         if (inContext != OutputXRef) {
            briefEndsAtDot = false;
            setOutput(OutputMainDoc);
         }

         QString text = QString::fromUtf8(commentscanYYtext);
         addToOutput(text);
      }
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      // start of autolist
      if (inContext != OutputXRef) {
         briefEndsAtDot = false;
         setOutput(OutputMainDoc);
      }

      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 36:
/* rule 36 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // horizontal line (dashed)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      // mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&mdash;");
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      // ndash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&ndash;");
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      // numbered item
      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext != OutputXRef) {
         // this command forces the end of brief description
         setOutput(OutputMainDoc);
      }

      addToOutput(text);
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      // . at start or in the middle of a word, or ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      // . with escaped space
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text[0]);
      addToOutput(text[2]);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      // . with comma such as "e.g.,"
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      // ellipsis with escaped space
      addToOutput("... ");
   }
	YY_BREAK
case 46:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // internal ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
{
      // at least one blank line or blank line command

      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext == OutputXRef) {
         // need to put the newlines after ending the XRef section

         if (! s_insideParBlock) {
            setOutput(OutputMainDoc);
         }

         for (int i = 0; i < text.length();  ) {
            if (text[i] == '\n') {
               addToOutput('\n');
               ++i;

            } else if (text.mid(i) == "\\internal_linebr")  {
               addToOutput('\n');
               i += 8;

            } else  {
               ++i;
            }
         }

      } else if (inContext != OutputBrief) {

         for (int i = 0; i< text.length(); ) {
            if (text[i] == '\n') {
               addToOutput('\n');
               i++;

            } else if (text.mid(i) == "\\internal_linebr")  {
                addToOutput('\n');
                i += 8;

            } else  {
               i++;

            }
         }

         setOutput(OutputMainDoc);

      } else {
          // inContext == OutputBrief, switch from brief to main docs
         endBrief(false);
      }

      yyLineNr += text.count('\n');
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      // potential end of a JavaDoc style comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);

      if (briefEndsAtDot) {
         briefEndsAtDot = false;
         setOutput(OutputMainDoc);
      }
   }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{
      // newline
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput('\n');

      if (text[0] == '\n') {
         ++yyLineNr;
      }
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // utf-8 code point
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 51:
YY_RULE_SETUP
{
      // catch all for anything else
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 52:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         ++yyLineNr;
      }
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // ignore unimportant characters
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
{
      // ignore every else
   }
	YY_BREAK
case 56:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 58:
YY_RULE_SETUP
{
      // the special XML characters for iwhich the CDATA section is especially used
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput('\\');
      addToOutput(text[0]);
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 61:
YY_RULE_SETUP
{
      // end of inline formula
      formulaText += "$";
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
      // end of block formula
      formulaText += "\\]";
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 63:
YY_RULE_SETUP
{
      // end of custom env formula
      formulaText += "\\end";
      formulaText += formulaEnv;
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
      // any non-special character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text;
   }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      formulaNewLines++;
      formulaText += text[0];
      yyLineNr++;
   }
	YY_BREAK
case 66:
YY_RULE_SETUP
{
      // any other character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text[0];
   }
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\enum");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 70:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text,".", "::");
      BEGIN( Comment );
   }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\namespace");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 74:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 75:
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\package");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 78:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(removeRedundantWhiteSpace(text),".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_entryName = substitute(text,".","::");
      if (current->section == Entry::PROTOCOLDOC_SEC) {
         current->m_entryName += "-p";
      }

      // prepend outer scope name
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text,".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\%s",  csPrintable(s_currentCommand));
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
      // second argument, include file
      QString text = QString::fromUtf8(commentscanYYtext);
      current->setData(EntryKey::Include_File, text);
      BEGIN( ClassDocArg3 );
   }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
      // third argument, include file name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->setData(EntryKey::Include_Name, text);
      BEGIN( Comment );
   }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of concept command ------------------- */
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{
      // first argument, concept name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text,".","::");

      BEGIN( Comment );
   }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\concept");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of {def,add,weak} group commands --------- */
case 97:
YY_RULE_SETUP
{
      // group name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;

      // lastDefGroup.groupname = text;
      // lastDefGroup.pri = current->groupingPri();
      // the .html stuff is for Qt compatibility

      if (current->m_entryName.endsWith(".html")) {
         current->m_entryName = current->m_entryName.left(current->m_entryName.length() - 5);
      }

      current->setData(EntryKey::Member_Type, "");
      BEGIN(GroupDocArg2);
   }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{
      // line continuation
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing group name after %s", csPrintable(current->groupDocCmd()) );
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{
      // line continuation
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
      // title (stored in type)
      QString text = QString::fromUtf8(commentscanYYtext);
      current->appendData(EntryKey::Member_Type, text.trimmed());
   }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if ( current->groupDocType == Entry::GROUPDOC_NORMAL && current->getData(EntryKey::Member_Type).isEmpty()) {
         // defgroup requires second argument
         warn(yyFileName, yyLineNr, "Missing title after \\defgroup %s", csPrintable(current->m_entryName) );
      }

      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
      // title (stored in type)
      QString text = QString::fromUtf8(commentscanYYtext);
      current->appendData(EntryKey::Member_Type, text.trimmed());
   }
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 105:
YY_RULE_SETUP
{
      // first argument, page name
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_entryName = stripQuotes(text);
      current->setData(EntryKey::Member_Args, QString());

      BEGIN( PageDocArg2 );
   }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\page");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{
      // second argument; page title
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 110:
YY_RULE_SETUP
{

      QString text = QString::fromUtf8(commentscanYYtext);

      text = substitute(substitute(text, "@<","&lt;"),  "@>", "&gt;");
      text = substitute(substitute(text, "\\<","&lt;"), "\\>","&gt;");

      current->appendData(EntryKey::Member_Args, text);
   }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->appendData(EntryKey::Member_Args, text);
   }
	YY_BREAK
/* --------- handle arguments of the param command ------------ */
case 112:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addToOutput('\\');
      }

      addToOutput(text);
   }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      addToOutput(" , ");
   }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addToOutput('\\');
      }

      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
{
      // no file name specified
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
      // first argument; name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = stripQuotes(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 120:
YY_RULE_SETUP
{
      // first argument
      newXRefItemKey = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputXRef);

      BEGIN(XRefItemParam2);
   }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{
      // missing arguments
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing first argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;

      BEGIN( Comment );
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      // second argument
      QString text = QString::fromUtf8(commentscanYYtext);
      xrefItemTitle = stripQuotes(text);
      BEGIN(XRefItemParam3);
   }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing second argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;

      BEGIN( Comment );
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
      // third argument
      QString text = QString::fromUtf8(commentscanYYtext);

      xrefListTitle = stripQuotes(text);
      xrefKind = XRef_Item;

      BEGIN( Comment );
   }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr,"Missing third argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;

      BEGIN( Comment );
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 132:
YY_RULE_SETUP
{
      // argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->setData(EntryKey::Related_Class, text);
      BEGIN( Comment );
   }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument of \\%s command", csPrintable(s_currentCommand));
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 139:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionLabel = text;
      addToOutput(text);
      s_sectionTitle.clear();

      BEGIN(SectionTitle);
   }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\section command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');

      BEGIN( Comment );
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      // invalid character for section label
      warn(yyFileName, yyLineNr, "Invalid or missing section label");
      BEGIN(Comment);
   }
	YY_BREAK
case 142:
/* rule 142 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);

      addSection();
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 143:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 16;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
      // any character without special meaning
      QString text = QString::fromUtf8(commentscanYYtext);
      s_sectionTitle += text;
      addToOutput(text);
   }
	YY_BREAK
case 146:
YY_RULE_SETUP
{
      // unescape escaped command
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text.mid(1);
      addToOutput(text);
   }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
      // unescape escaped character
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text[1];
      addToOutput(text);
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      // anything else
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text;
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 149:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      // we add subpage labels as a kind of "inheritance" relation to prevent
      // needing to add another list to the Entry class.

      current->extends.append(BaseInfo(text, Public, Normal));
      BEGIN(SubpageTitle);
   }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\subpage command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');

      BEGIN( Comment );
   }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{
      // no title, end command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 152:
YY_RULE_SETUP
{
      // add title, end of command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 153:
YY_RULE_SETUP
{
      // no title, end of command
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 154:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addAnchor(text);
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\anchor command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 156:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing anchor label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 157:
/* rule 157 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // possible ends
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (text.mid(4) == s_blockName)  {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 158:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (s_blockName == "startuml")   {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 159:
YY_RULE_SETUP
{
      // some word
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text);
   }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
   }
	YY_BREAK
case 161:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      // start of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! (s_blockName == "code" || s_blockName == "verbatim")) {
         ++s_commentCount;
      }
      addToOutput(text);
   }
	YY_BREAK
case 162:
YY_RULE_SETUP
{
      // end of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (! (s_blockName == "code" || s_blockName == "verbatim")) {
         s_commentCount--;

         if (s_commentCount < 0) {
            warn(yyFileName, yyLineNr, "Found */ without matching /* while inside a \\%s block. "
               "Perhaps there is a missing \\end%s?\n", csPrintable(s_blockName), csPrintable(s_blockName));
         }
      }
   }
	YY_BREAK
case 163:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
{
      QString endTag = "end" + s_blockName;

      if (s_blockName == "startuml") {
         endTag = "enduml";
      }

      warn(yyFileName, yyLineNr, "Reached end of comment while inside a \\%s block, check for missing \\%s tag",
                 csPrintable(s_blockName), csPrintable(endTag) );

      yyterminate();
   }
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 164:
YY_RULE_SETUP
{
      s_guardExpr  = QString::fromUtf8(commentscanYYtext);
      s_roundCount = 1;

      BEGIN(GuardExpr);
   }
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
   }
	YY_BREAK
case 166:
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
      ++s_roundCount;
   }
	YY_BREAK
case 167:
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
      --s_roundCount;

      if (s_roundCount == 0) {
         handleGuard(s_guardExpr);
      }
   }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
{
      warn(yyFileName, yyLineNr, "Invalid expression '%s' for guard", csPrintable(s_guardExpr));
      unput(commentscanYYtext[0]);
      BEGIN(GuardParam);
   }
	YY_BREAK
case 169:
YY_RULE_SETUP
{
      // parameter of if/ifnot guard
      QString text = QString::fromUtf8(commentscanYYtext);
      handleGuard(text);
   }
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         ++yyLineNr;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
{
      // line continuation
      ++yyLineNr;
      addToOutput('\n');
   }
	YY_BREAK
case 172:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      yyLineNr += text.count('\n');
      s_spaceBeforeIf.clear();

      BEGIN(Comment);
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
{
      if (! s_spaceBeforeIf.isEmpty()) {
         addToOutput(s_spaceBeforeIf);
      }

      s_spaceBeforeIf.clear();
      BEGIN(Comment);
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 176:
/* rule 176 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_guardType = Guard_IfNot;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 177:
/* rule 177 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_guardType = Guard_If;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 178:
/* rule 178 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found \\endif without matching start command");

       } else {
         GuardedSection s   = s_guards.pop();
         bool parentVisible = s.parentVisible();

         if (parentVisible) {
            s_isEnabledSection = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 179:
/* rule 179 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName, yyLineNr, "Found \\else without matching start command");

      } else {

         if (! s_isEnabledSection && s_guards.top().parentVisible()) {
            s_guards.pop();
            s_guards.push(GuardedSection(true,true));

            s_isEnabledSection = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 180:
/* rule 180 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found \\elseif without matching start command");

       } else {

         if (! s_isEnabledSection && s_guards.top().parentVisible()) {
            s_guardType = Guard_If;
            s_guards.pop();

            BEGIN( GuardParam );
         }
      }
   }
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 182:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
   }
	YY_BREAK
case 185:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 186:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 187:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount--;

      if (s_condCount < 0 )   {
         // handle conditional section around \internal, see bug607743

         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 188:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 0 ) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 189:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 1)  {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 190:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 2) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 191:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 3) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 192:
YY_RULE_SETUP
{
      BEGIN(Comment);
   }
	YY_BREAK
case 193:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 194:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle argument of name command ------- */
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
      s_memberGroupHeader+=' ';
   }
	YY_BREAK
case 197:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_memberGroupHeader  += text[0];
      current->m_entryName += text[0];
   }
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 198:
YY_RULE_SETUP
{
      // group id
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_groups.append(Grouping(text, Grouping::GROUPING_INGROUP) );
      inGroupParamFound = true;
   }
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! inGroupParamFound) {
         warn(yyFileName,yyLineNr, "Missing group name for \\ingroup command");
      }

      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 201:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
{
      // end of fn declaration, pass to langParser as a "prototype"
      QString text = QString::fromUtf8(commentscanYYtext);

      if (braceCount == 0) {
         unputString(text);

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(s_functionProto);
         }

         BEGIN( Comment );
      }
   }
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      s_functionProto += ' ';
   }
	YY_BREAK
case 204:
YY_RULE_SETUP
{
      // non-special characters
      s_functionProto += QString::fromUtf8(commentscanYYtext);
   }
	YY_BREAK
case 205:
YY_RULE_SETUP
{
      s_functionProto += QString::fromUtf8(commentscanYYtext);
      braceCount++;
   }
	YY_BREAK
case 206:
YY_RULE_SETUP
{
      s_functionProto += QString::fromUtf8(commentscanYYtext);
      braceCount--;
   }
	YY_BREAK
case 207:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
{
      // end of overload declaration, pass to langParser as a "prototype"
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      if (s_functionProto.trimmed().isEmpty()) {
         // plain overload command
         addToOutput(theTranslator->trOverloadText());
         addToOutput('\n');

      }  else   {
         // overload declaration
         makeStructuralIndicator(Entry::OVERLOADDOC_SEC);

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(s_functionProto);
         }
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      s_functionProto += ' ';
   }
	YY_BREAK
case 210:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 211:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text), Public, Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\inherit command has no argument");

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 213:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing name for \\inherit command");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 214:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text),Public,Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName,yyLineNr, "Missing argument for \\%s command", csPrintable(s_currentCommand));
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 216:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle language specific sections ------- */
case 217:
YY_RULE_SETUP
{
      // language switch
      QString text = QString::fromUtf8(commentscanYYtext);
      QString langId = text.mid(2);

      if (langId.isEmpty() || Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) == 0) {
         // enable language specific section
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 218:
YY_RULE_SETUP
{
      /* any character not a *, @, backslash or new line */
   }
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
{
      // new line in verbatim block
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 220:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 221:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addCite();
      addToOutput(text);
      BEGIN(Comment);
   }
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\cite command has no label");
      unputString(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 223:
YY_RULE_SETUP
{
      // invalid character for cite label
      warn(yyFileName,yyLineNr, "Invalid or missing cite label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');

      setOutput(OutputMainDoc);
      addToOutput(" \\copydetails ");
      addToOutput(s_copyDocArg);

      addToOutput("\n");

      BEGIN(Comment);
   }
	YY_BREAK
case 225:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addToOutput(text);
   }
	YY_BREAK
case 226:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addToOutput(text);
   }
	YY_BREAK
case 227:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(ConceptDocArg1):
			case YY_STATE_EOF(ConceptDocArg2):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(ParamArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
			case YY_STATE_EOF(CdataSection):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1594 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1594 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1593);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static bool handleBrief(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   setOutput(OutputBrief);
   return false;
}

static bool handleProperty(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   s_functionProto.clear();
   braceCount = 0;
   BEGIN(FnParam);

   current->mtype = MethodType::Property;

   return stop;
}

static bool handleFn(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   s_functionProto.clear();
   braceCount = 0;
   BEGIN(FnParam);

   return stop;
}

static bool handleDef(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::DEFINEDOC_SEC);
   s_functionProto.clear();
   BEGIN(FnParam);

   return stop;
}

static bool handleOverload(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   s_functionProto.clear();
   BEGIN(OverloadParam);

   return false;
}

static bool handleEnum(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::ENUMDOC_SEC);
   BEGIN(EnumDocArg1);

   return stop;
}

static bool handleDefGroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_NORMAL;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleAddToGroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_ADD;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleWeakGroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_WEAK;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleNamespace(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
   BEGIN( NameSpaceDocArg1 );

   return stop;
}

static bool handlePackage(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
   BEGIN( PackageDocArg1 );

   return stop;
}

static bool handleClass(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop = makeStructuralIndicator(Entry::CLASSDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleConcept(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::CONCEPTDOC_SEC);
   BEGIN( ConceptDocArg1 );

   return stop;
}

static bool handleHeaderFile(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   BEGIN( ClassDocArg2 );
   return false;
}

static bool handleProtocol(const QString &str, const QStringList &list)
{
   (void) list;

   // Obj-C protocol
   bool stop = makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleCategory(const QString &str, const QStringList &list)
{
   (void) list;

   // Obj-C category
   bool stop = makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
   s_currentCommand = str;
   BEGIN( CategoryDocArg1 );

   return stop;
}

static bool handleUnion(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop = makeStructuralIndicator(Entry::UNIONDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleStruct(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleInterface(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop = makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleIdlException(const QString &str, const QStringList &list)
{
   (void) list;

   bool stop = makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
   s_currentCommand = str;
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handlePage(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::PAGEDOC_SEC);
   BEGIN( PageDocArg1 );

   return stop;
}

static bool handleMainpage(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);

   if (stop) {
      current->m_entryName = QString();
   } else {
      current->m_entryName = "mainpage";
   }

   BEGIN( PageDocArg2 );

   return stop;
}

static bool handleFile(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::FILEDOC_SEC);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );

   return stop;
}

static bool handleParam(const QString &str, const QStringList &list)
{
  // process param and retval arguments to escape leading underscores
  // in case of markdown processing

   (void) str;
   (void) list;

   addToOutput("@param ");
   BEGIN( ParamArg1 );

   return false;
}

static bool handleRetval(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   addToOutput("@retval ");
   BEGIN( ParamArg1 );

   return false;
}

static bool handleDir(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::DIRDOC_SEC);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );

   return stop;
}

static bool handleExample(const QString &str, const QStringList &list)
{
   (void) str;

   Entry::Sections section = Entry::EXAMPLE_SEC;

   for (auto item : list) {
      QString opt = item.trimmed().toLower();

      if (opt == "lineno") {
         section = Entry::EXAMPLE_LINENO_SEC;

      } else {
         warn(yyFileName, yyLineNr, "Unsupported option '%s' for command '\\%s'", csPrintable(opt), csPrintable(str));
      }
   }

   bool stop = makeStructuralIndicator(section);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );

   return stop;
}

static bool handleDetails(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (inContext != OutputBrief) {
      // treat @details outside brief description as a new paragraph
      addToOutput("\n\n");
   }

   setOutput(OutputMainDoc);

   return false;
}

static bool handleName(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MEMBERGRP_SEC);

   if (! stop) {
      s_memberGroupHeader.resize(0);
      BEGIN( NameParam );

      if (s_memberGroupId != DOX_NOGROUP) {
         // end of previous member group
         closeGroup(current,yyFileName,yyLineNr,true);
       }
   }

   return stop;
}

static bool handleTodo(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Todo;
   setOutput(OutputXRef);
   xrefKind = XRef_Todo;

   return false;
}

static bool handleTest(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Test;
   setOutput(OutputXRef);
   xrefKind = XRef_Test;

   return false;
}

static bool handleBug(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Bug;
   setOutput(OutputXRef);
   xrefKind = XRef_Bug;

   return false;
}

static bool handleDeprecated(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Deprecated;
   setOutput(OutputXRef);
   xrefKind = XRef_Deprecated;

   return false;
}

static bool handleXRefItem(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Item;
   BEGIN(XRefItemParam1);

   return false;
}

static bool handleParBlock(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_insideParBlock)   {
      warn(yyFileName,yyLineNr, "Found \\parblock command while already in a parblock");
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addToOutput("@parblock ");
   s_insideParBlock = true;

   return false;
}

static bool handleEndParBlock(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (! s_insideParBlock) {
      warn(yyFileName,yyLineNr, "Found \\endparblock command without matching \\parblock");
   }

   addToOutput("@endparblock");
   setOutput(OutputMainDoc);    // to end a parblock inside a xrefitem like context
   s_insideParBlock = false;

   return false;
}

static bool handleRelated(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName,yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = Simple;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleRelatedAlso(const QString &str, const QStringList &list)
{

   (void) list;

   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName, yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = Duplicate;
   s_currentCommand = str;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleMemberOf(const QString &str, const QStringList &list)
{
   (void) list;

   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName, yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = MemberOf;
   s_currentCommand = str;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleRefItem(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   addToOutput("@refitem ");
   BEGIN(LineParam);

   return false;
}

static bool handleSection(const QString &str, const QStringList &list)
{
   (void) list;

   setOutput(OutputMainDoc);
   addToOutput("@" + str + " ");
   BEGIN(SectionLabel);

   if (str == "section") {
      s_sectionLevel = 1;

   } else if (str == "subsection") {
      s_sectionLevel = 2;

   } else if (str == "subsubsection") {
      s_sectionLevel = 3;

   } else if (str == "paragraph") {
      s_sectionLevel = 4;

   }

   return false;
}

static bool handleSubpage(const QString &str, const QStringList &list)
{
   (void) list;

   if (current->section != Entry::EMPTY_SEC && current->section != Entry::PAGEDOC_SEC &&
         current->section != Entry::MAINPAGEDOC_SEC) {

      warn(yyFileName, yyLineNr, "Found \\subpage command in a comment block that is not marked as a page");
  }

  if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.clear();
  }

   addToOutput("@" + str + " ");
   BEGIN(SubpageLabel);

   return false;
}

static bool handleAnchor(const QString &str, const QStringList &list)
{
   (void) list;

   addToOutput("@" + str + " ");
   BEGIN(AnchorLabel);

   return false;
}

static bool handleCite(const QString &str, const QStringList &list)
{
   (void) list;

   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("@" + str + " ");
   BEGIN(CiteLabel);

   return false;
}

static bool handleFormatBlock(const QString &str, const QStringList &list)
{
   if (list.isEmpty()) {
      addToOutput("@" + str + " ");

   } else {
      addToOutput("@" + str + "{" + list.join(",") + "} ");
   }

   s_blockName    = str;
   s_commentCount = 0;
   BEGIN(FormatBlock);

   return false;
}

static bool handleAddIndex(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   addToOutput("@addindex ");

   BEGIN(LineParam);

   return false;
}

static bool handleIf(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   s_isEnabledSection = false;
   s_guardType        = Guard_If;
   s_spaceBeforeIf    = s_spaceBeforeCmd;
   BEGIN(GuardParam);

   return false;
}

static bool handleIfNot(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   s_isEnabledSection = false;
   s_guardType        = Guard_IfNot;
   s_spaceBeforeIf    = s_spaceBeforeCmd;

   BEGIN(GuardParam);

   return false;
}

static bool handleElseIf(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      s_guardType     = s_isEnabledSection ? Guard_Skip : Guard_If;
      s_spaceBeforeIf = s_spaceBeforeCmd;
      BEGIN(GuardParam);
   }

   return false;
}

static bool handleElse(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      s_spaceBeforeIf = s_spaceBeforeCmd;
      BEGIN( SkipGuardedSection );
   }

   return false;
}

static bool handleEndIf(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_guards.isEmpty())   {
      warn(yyFileName,yyLineNr, "Found \\endif without matching start command");

   } else {
      s_guards.pop();
   }

   s_isEnabledSection = false;
   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   BEGIN( GuardParamEnd );

   return false;
}

static bool handleIngroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   inGroupParamFound = false;
   BEGIN( InGroupParam );

   return false;
}

static bool handleNoSubGrouping(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->subGrouping = false;

   return false;
}

static bool handleShowInitializer(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->initLines = 100000;  // ON
   return false;
}

static bool handleHideInitializer(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->initLines = 0;

   return false;
}

static bool handleCallgraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callGraph = true;

   return false;
}

static bool handleHideCallgraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callGraph = false;
   return false;
}

static bool handleCallergraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callerGraph = true;
   return false;
}

static bool handleHideCallergraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callerGraph = false;

   return false;
}

static bool handleReferencedByRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencedByRelation = true;

   return false;
}

static bool handleHideReferencedByRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencedByRelation = false;

   return false;
}

static bool handleReferencesRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencesRelation = true;

   return false;
}

static bool handleHideReferencesRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencesRelation = false;

   return false;
}

static bool handleInternal(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_internalDocs) {
      addToOutput(" \\internal ");
      s_processInternalDocs = true;

   } else {
      // make sure some whitespace before an \internal command
      // is not treated as "documentation"

      if (current->getData(EntryKey::Main_Docs).trimmed().isEmpty()) {
         current->setData(EntryKey::Main_Docs, QString());
      }

      s_condCount = 0;
      BEGIN( SkipInternal );
  }

  return false;
}

static bool handleStatic(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   endBrief();
   current->stat = true;

   return false;
}

static bool handlePure(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   endBrief();
   current->virt = Specifier::Pure;

   return false;
}

static bool handlePrivate(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = Protection::Private;

   return false;
}

static bool handlePrivateSection(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = (s_protection = Protection::Private);

   return false;
}

static bool handleProtected(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = Protection::Protected;

   return false;
}

static bool handleProtectedSection(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = (s_protection = Protection::Protected);

   return false;
}

static bool handlePublic(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = Protection::Public;

   return false;
}

static bool handlePublicSection(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = (s_protection = Protection::Public);
   return false;
}

static bool handleToc(const QString &str, const QStringList &list)
{
   (void) str;

   if (current->section == Entry::PAGEDOC_SEC || current->section == Entry::MAINPAGEDOC_SEC) {

      for (auto &item : list) {
         QString option = item.trimmed().toLower();

         int level = 5;
         int i     = option.find(':');

         if (i > 0) {
            // found something like "html:4"
            bool ok = false;
            level = option.mid(i + 1).toInteger<int>(&ok);

            if (ok) {
               level  = (level >  5 ? 5 : level);
               level  = (level <= 0 ? 5 : level);
               option = option.left(i).trimmed();

            } else {
               warn(yyFileName, yyLineNr, "Unknown option level specified with \\tableofcontents: `%s'", csPrintable(option));
               option = "";
            }
         }

         if (! option.isEmpty()) {
            if (option == "html") {
               current->localToc.enableHtml(level);

            } else if (option == "latex") {
               current->localToc.enableLatex(level);

            } else if (option == "xml") {
               current->localToc.enableXml(level);

            } else if (option == "docbook") {
               current->localToc.enableDocbook(level);

            } else {
               warn(yyFileName, yyLineNr, "Unknown option specified with \\tableofcontents: `%s'", csPrintable(option));
            }
         }
      }

      if (current->localToc.nothingEnabled()) {
         // for backward compatibility
         current->localToc.enableHtml(5);
         current->localToc.enableXml(5);
      }
   }

   return false;
}

static bool handleInherit(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   BEGIN(InheritParam);

   return false;
}

static bool handleExtends(const QString &str, const QStringList &list)
{
   (void) list;
   s_currentCommand = str;
   BEGIN(ExtendsParam);

   return false;
}

static bool handleCopyBrief(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (current->getData(EntryKey::Brief_Docs).isEmpty() && current->getData(EntryKey::Main_Docs).isEmpty()) {

      // if we do not have a brief or detailed description yet,
      // then the @copybrief should end up in the brief description.
      // otherwise it will be copied inline (see bug691315 & bug700788)

      setOutput(OutputBrief);
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copybrief ");
   return false;
}

static bool handleCopyDetails(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   setOutput(OutputMainDoc);

   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copydetails ");
   return false;
}

static bool handleCopyDoc(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   setOutput(OutputBrief);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copybrief ");
   s_copyDocArg.resize(0);
   BEGIN(CopyDoc);

   return false;
}

static void checkFormula()
{
   if (YY_START == ReadFormulaShort || YY_START == ReadFormulaLong) {
      warn(yyFileName, yyLineNr, "End of comment block while inside formula.");
   }
}

// main entry point
bool parseCommentBlock(ParserInterface *parser, QSharedPointer<Entry> curEntry, const QString &comment,
                  const QString &fileName, int &lineNr, bool isBrief, bool isAutoBrief, bool isInbody,
                  Protection &r_protection, int &r_position, bool &r_newEntryNeeded )
{
   initParser();
   s_guards.clear();

   if (comment.isEmpty()) {
      // avoid empty strings
      return false;
   }

   if (Doxy_Globals::markdownSupport) {
      s_inputString = processMarkdown(fileName, lineNr, QSharedPointer<Entry>(), comment);

      QStringView tmp(s_inputString);

      while (tmp.startsWith(" ")) {
         tmp = tmp.mid(1);
      }

      while (tmp.startsWith("\n")) {
         tmp = tmp.mid(1);
      }

      if (tmp.startsWith("<br>")) {
         tmp = tmp.mid(4);
      }

      s_inputString = QString(tmp);

   } else {
      s_inputString  = comment;
   }

   s_inputString.append(" ");

   yyFileName       = fileName;
   yyLineNr         = lineNr;
   langParser       = parser;
   current          = curEntry;

   briefEndsAtDot   = isAutoBrief;
   inBody           = isInbody;
   s_protection     = r_protection;
   s_inputPosition  = r_position;
   s_outputXRef     = QString();
   xrefKind         = XRef_None;

   xrefAppendFlag   = false;
   insidePre        = false;
   s_needNewEntry   = false;
   s_parseMore      = false;

   if (! isBrief && ! isAutoBrief && ! current->getData(EntryKey::Main_Docs).isEmpty()) {
      // add newline separator between detailed comment blocks
      current->appendData(EntryKey::Main_Docs, "\n");
   }

   if (isBrief || isAutoBrief) {
      setOutput(OutputBrief);

   } else {
      setOutput(OutputMainDoc);
   }

   s_condCount    = 0;
   s_sectionLevel = 0;

   s_spaceBeforeCmd.clear();
   s_spaceBeforeIf.clear();

   if (! current->getData(EntryKey::Main_Docs).isEmpty()) {
      // separate detailed doc fragments
      current->appendData(EntryKey::Main_Docs,  "\n\n");
   }

   if (! current->getData(EntryKey::Inbody_Docs).isEmpty() && isInbody) {
      // separate in body fragments
      current->appendData(EntryKey::Inbody_Docs, "\n\n");
   }

   commentscanYYrestart(commentscanYYin);
   BEGIN( Comment );
   commentscanYYlex();

   setOutput(OutputMainDoc);

   if (YY_START == OverloadParam) {
      // comment ended with \overload
      addToOutput(theTranslator->trOverloadText());
   }

   if (! s_guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Documentation block ended in the middle of a conditional section");
   }

   if (s_insideParBlock) {
      warn(yyFileName, yyLineNr, "Documentation block ended while inside a \\parblock. Missing \\endparblock");
   }

   // removes blank lines from the detailed docs
   current->setData(EntryKey::Main_Docs, trimEmptyLines(current->getData(EntryKey::Main_Docs), current->docLine));

   if (current->section == Entry::FILEDOC_SEC && current->getData(EntryKey::Main_Docs).isEmpty()) {
      // to allow a comment block with just a @file command
      current->setData(EntryKey::Main_Docs, "\n\n");
   }

   if (current->section == Entry::MEMBERGRP_SEC && s_memberGroupId == DOX_NOGROUP) {
      // @name section but no group started yet
      openGroup(current, yyFileName, yyLineNr);
   }

   checkFormula();
   r_protection = s_protection;

   groupAddDocs(curEntry);
   r_newEntryNeeded = s_needNewEntry;

   if (s_parseMore && r_position == s_inputPosition) {
      // did not proceed during this call, do not continue or there will be an infinate loop
      s_parseMore = false;
   }

   if (s_parseMore) {
      r_position = s_inputPosition;
   } else {
      r_position = 0;
   }

   lineNr = yyLineNr;

   return s_parseMore;
}

void groupEnterFile(const QString &fileName, int)
{
   s_autoGroupStack.clear();
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupDocs.clear();
   s_memberGroupRelates.clear();
   s_compoundName = fileName;
}

void groupLeaveFile(const QString &fileName, int line)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();

   if (! s_autoGroupStack.isEmpty()) {
      warn(fileName, line, "End of file while inside a group\n");
   }
}

void groupEnterCompound(const QString &fileName, int line, const QString &name)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      warn(fileName, line, "Try to put compound %s inside a member group\n", csPrintable(name));
   }

   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();
   s_compoundName = name;

   int i = s_compoundName.indexOf('(');

   if (i != -1) {
      // strip category (Obj-C)
      s_compoundName=s_compoundName.left(i);
   }

   if (s_compoundName.isEmpty()) {
      s_compoundName=fileName;
   }
}

void groupLeaveCompound(const QString &, int, const QString &)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);
   s_compoundName.resize(0);
}

static int findExistingGroup(int &groupId, const QSharedPointer<MemberGroupInfo> info)
{
   for (auto di = Doxy_Globals::memGrpInfoDict.begin(); di != Doxy_Globals::memGrpInfoDict.end(); ++di) {

      auto mi = *di;

      if (s_compoundName == mi->compoundName && ! mi->header.isEmpty() &&
               mi->header.compare(info->header, Qt::CaseInsensitive) == 0) {

         // same file or scope, not a nameless group, same header name
         return (int)di.key();    // put the item in this group
      }
   }

   groupId++; // start new group
   return groupId;
}

void openGroup(QSharedPointer<Entry> e, const QString &, int)
{
   if (e->section == Entry::GROUPDOC_SEC) {
      // auto group
      s_autoGroupStack.push( QMakeShared<Grouping>(e->m_entryName, e->groupingPri()) );

   } else {
      // start of a member group

      if (s_memberGroupId == DOX_NOGROUP) {
         // no group started yet
         static int curGroupId = 0;

         QSharedPointer<MemberGroupInfo> info = QMakeShared<MemberGroupInfo>();

         info->header = s_memberGroupHeader.trimmed();
         info->compoundName = s_compoundName;
         s_memberGroupId = findExistingGroup(curGroupId, info);

         Doxy_Globals::memGrpInfoDict.insert(s_memberGroupId, info);

         s_memberGroupRelates = e->getData(EntryKey::Related_Class);
         e->mGrpId = s_memberGroupId;
      }
   }
}

void closeGroup(QSharedPointer<Entry> e, const QString &fileName, int line, bool foundInline)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      // end of member group

      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         // known group
         info->doc     = s_memberGroupDocs;
         info->docFile = fileName;
         info->docLine = line;
      }

      s_memberGroupId = DOX_NOGROUP;
      s_memberGroupRelates.resize(0);
      s_memberGroupDocs.resize(0);

      if (! foundInline) {
         e->mGrpId = DOX_NOGROUP;
      }

   } else if (! s_autoGroupStack.isEmpty()) {
      // end of auto group
      QSharedPointer<Grouping> grp = s_autoGroupStack.pop();

      // see bug577005: we should not remove the last group for e
      if (! foundInline) {
         e->m_groups.removeLast();
      }

      if (! foundInline) {
         initGroupInfo(e);
      }
   }
}

void initGroupInfo(QSharedPointer<Entry> e)
{
   e->mGrpId  = s_memberGroupId;
   e->setData(EntryKey::Related_Class, s_memberGroupRelates);

   if (! s_autoGroupStack.isEmpty()) {
      e->m_groups.append(*s_autoGroupStack.top());
   }
}

static void groupAddDocs(QSharedPointer<Entry> e)
{
   if (e->section == Entry::MEMBERGRP_SEC) {
      s_memberGroupDocs = e->getData(EntryKey::Brief_Docs).trimmed();

      e->setData(EntryKey::Main_Docs, trimEmptyLines(e->getData(EntryKey::Main_Docs), e->docLine));

      if (! s_memberGroupDocs.isEmpty() && ! e->getData(EntryKey::Main_Docs).isEmpty()) {
         s_memberGroupDocs+="\n\n";
      }

      s_memberGroupDocs += e->getData(EntryKey::Main_Docs);
      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         info->doc      = s_memberGroupDocs;
         info->docFile  = e->getData(EntryKey::MainDocs_File);
         info->docLine  = e->docLine;
         info->setRefItems(e->m_specialLists);
      }

      e->setData(EntryKey::Brief_Docs, "");
      e->setData(EntryKey::Main_Docs,  "");
   }
}

static void handleGuard(const QString &expr)
{
   CondParser prs;
   bool sectionEnabled = prs.parse(yyFileName, yyLineNr, expr.trimmed());
   bool parentEnabled  = true;

   if (! s_guards.isEmpty()) {
      parentEnabled = s_guards.top().isEnabled();
   }

   if (parentEnabled) {
      if ( (sectionEnabled && s_guardType == Guard_If) || (! sectionEnabled && s_guardType == Guard_IfNot)) {
         // section is visible
         s_guards.push(GuardedSection(true, true));
         s_isEnabledSection = true;
         BEGIN( GuardParamEnd );

      } else {
         // section is invisible
         if (s_guardType != Guard_Skip) {
            s_guards.push(GuardedSection(false, true));
         }

         BEGIN( SkipGuardedSection );
      }

   } else {
      // invisible because of parent
      s_guards.push(GuardedSection(false, false));
      BEGIN( SkipGuardedSection );
   }
}

