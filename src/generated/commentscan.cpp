/************************************************************************
*
* Copyright (C) 2014-2020 Barbara Geller & Ansel Sermersheim
* Copyright (C) 1997-2014 by Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 223
#define YY_END_OF_BUFFER 224
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[902] =
    {   0,
       88,   88,  141,  141,  155,  155,  170,  170,  214,  214,
      161,  161,  224,  223,   50,  223,   50,  223,   48,  223,
       50,  223,   50,  223,   50,  223,   50,  223,   47,   50,
      223,   50,  223,   50,  223,   30,   50,  223,   50,  223,
       50,  223,   50,  223,   50,  223,   50,  223,   50,  223,
       50,  223,   47,   50,  223,   50,  223,   50,  223,  106,
      223,  105,  223,  106,  223,  103,  106,  223,  106,  223,
      106,  223,  223,  107,  223,  131,  223,  130,  223,  131,
      223,  128,  131,  223,  131,  223,   83,  223,   83,  223,
       82,  223,   83,  223,   83,  223,   83,  223,   79,   83,

      223,   83,  223,   83,  223,   87,  223,   86,  223,   87,
      223,   84,   87,  223,   87,  223,   87,  223,   87,  223,
       91,  223,   90,  223,   88,   91,  223,   88,   91,  223,
       91,  223,   88,   91,  223,   88,   91,  223,   91,  223,
       83,  223,   82,  223,   83,  223,   83,  223,   83,  223,
       83,  223,   83,  223,   95,  223,   95,  223,   94,  223,
       95,  223,   95,  223,   95,  223,   92,   95,  223,   95,
      223,   95,  223,  119,  223,  118,  223,  116,  119,  223,
      119,  223,  123,  223,  122,  223,  123,  223,  123,  223,
      127,  223,  126,  223,  127,  223,  127,  223,  115,  223,

      112,  223,  115,  223,  113,  115,  223,  115,  223,  115,
      223,  111,  223,  111,  223,  109,  111,  223,  110,  111,
      223,16492,   69,  223,   68,  223,   69,  223,   66,   69,
      223,   69,  223,   73,  223,   73,  223,   72,  223,   73,
      223,   73,  223,   73,  223,   70,   73,  223,   73,  223,
       73,  223,   77,  223,   76,  223,   77,  223,   74,   77,
      223,   77,  223,   99,  223,   98,  223,   96,   99,  223,
       99,  223,  101,  223,  102,  223,  101,  223,  137,  223,
      136,  223,  135,  137,  223,  137,  223,  141,  144,  223,
      138,  223,  141,  144,  223,  144,  223,  144,  223,  146,

      223,  145,  223,  223,  149,  223,  149,  223,  147,  223,
      149,  223,  149,  223,  155,  159,  223,  156,  223,  159,
      223,  159,  223,  159,  223,  159,  223,  159,  223,  134,
      223,  132,  223,  134,  223,  168,  223,  168,  223,  166,
      223,  160,  168,  223,  165,  168,  223,  168,  223,  171,
      223,  170,  171,  223,  169,  223,  171,  223,  178,  179,
      223,  177,  223,  179,  223,  179,  223,  179,  223,  189,
      190,  223,  180,  223,  190,  223,  190,  223,  190,  223,
      193,  223,  191,  223,  193,  223,  197,  223,  195,  223,
      194,  197,  223,  197,  223,  200,  203,  223,  198,  223,

      201,  203,  223,  202,  203,  223,  203,  223,  203,  223,
      206,  223,  204,  223,  206,  223,  209,  223,  208,  223,
      209,  223,  207,  209,  223,  209,  223,  212,  223,  211,
      223,  212,  223,  210,  212,  223,  212,  223,   63,   65,
      223,   64,  223,   65,  223,   65,  223,  152,  223,  151,
      223,  150,  152,  223,  152,  223,   53,   54,  223,   52,
      223,   54,  223,   54,  223,  214,  216,  223,  215,  223,
      216,  223,  216,  223,  216,  223,  219,  223,  218,  223,
      219,  223,  217,  219,  223,  219,  223,  221,  222,  223,
      220,  223,  222,  223,  161,  223,  161,  164,  223,  162,

      223,  163,  223,   58,   59,  223,   56,  223,   57,   59,
      223,   59,  223,   59,  223,   46,    4,   39,   41,   43,
       41,   29,   29,   21,   21,   21,   21,   27,   28,   23,
       29,   30,   21,   21,   21,   21,   21,   49,   33,   34,
       39,   31,  103,  103,  104,  103,  107,  128,  128,  129,
       79,   79,   81,   79,   84,   84,   85,   84,   88,   88,
       88,   88,   88,   88,   89,   88,   92,   92,   93,   92,
      116,  117,  120,  121,  125,  124,  125,  113,  113,  114,
      113,  110,16492, 8300,  110,16492,   66,   66,   66,   67,
       70,   70,   71,   70,   74,   74,   75,   96,   97,  101,

      101,  100,  101,  135,  141,  138,  141,  143,  143,  140,
      145,  148,  155,  158,  157,  133,  160,  165,  167,  170,
      169,  178,  189,  192,  194,  196,  200,  199,  205,  207,
      207,  210,  210,   63,  150,   53,  214,  213,  217,  221,
      161,   58,   29,   40,   38,   45,   41,   45,   45,   45,
       41,   45,   45,   42,    6,   37,    1,    1,    2,   21,
       21,   25,   26,   21,   23,    5,   21,   21,   21,   35,
       38,   32,  103,  103,   79,   84,   84,   88,   88,   88,
       92,  113,  113,   66,   66,   66,   66,   70,   74,  101,
      142,   60,   61,   62,   51,  213,  217,  217,   55,   45,

       45,   16,   36,    1,   22,    2,   20,   21,   21,   21,
       21,   21,  103,   78,   84,   88,   88,   80,  113,   66,
       66,   66,   74,  101,  142,  173,  181,   51,  217,   15,
       44,    6,   13,   20,   21,   24,   20,   24,   21,   21,
       21,   21,  103,   84,   88,  113,  101,    3,   14,    7,
       21,   24,   21,   21,   21,   21,  103,   84,   88,  113,
       96,  101,  175,  183,   21,   21,   21,   21,   21,  103,
       84,   88,  113,  101,  154,  174,  172,  182,   21,   21,
       21,   21,  103,   84,   88,  113,  101,  153,  176,   17,
       12,    9,    8,   21,   19,   21,   21,  103,   84,   88,

      113,  101,  184,   11,   10,   21,   21,   21,  103,   84,
       88,  113,  101,   21,   21,   21,  103,   84,   88,  113,
      101,  187,   18,   21,   18,   21,   21,  103,   84,   88,
      113,  101,  188,  185,   18,   21,   21,  103,   84,   88,
      113,  101,  188,   21,  103,   84,   88,  113,  101,   21,
      103,   84,   88,  113,  101,  186,   21,  103,  105,  130,
       82,   84,   86,   88,   90,   94,  118,  122,  126,  112,
      113,   68,   72,   76,   98,  101,  102,  136,  139,  146,
      147,  156,  132,  166,  177,  180,  191,  195,  198,  204,
      208,  211,  151,   52,  215,  218,  220,   56,   21,    5,

       46
    } ;

static yyconst flex_int16_t yy_accept[1562] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   10,   11,   11,   11,   11,   11,   12,
       13,   13,   13,   14,   15,   17,   19,   21,   23,   25,

       27,   29,   32,   34,   36,   39,   41,   43,   45,   47,
       49,   51,   53,   56,   58,   60,   62,   64,   66,   69,
       71,   73,   74,   76,   78,   80,   82,   85,   87,   89,
       91,   93,   95,   97,   99,  102,  104,  106,  108,  110,
      112,  115,  117,  119,  121,  123,  125,  128,  131,  133,
      136,  139,  141,  143,  145,  147,  149,  151,  153,  155,
      157,  159,  161,  163,  165,  167,  170,  172,  174,  176,
      178,  181,  183,  185,  187,  189,  191,  193,  195,  197,
      199,  201,  203,  205,  208,  210,  212,  214,  216,  219,
      223,  225,  227,  229,  232,  234,  236,  238,  240,  242,

      244,  246,  249,  251,  253,  255,  257,  259,  262,  264,
      266,  268,  271,  273,  275,  277,  279,  281,  283,  286,
      288,  291,  293,  296,  298,  300,  302,  304,  305,  307,
      309,  311,  313,  315,  318,  320,  322,  324,  326,  328,
      330,  332,  334,  336,  338,  340,  342,  345,  348,  350,
      352,  355,  357,  359,  362,  364,  366,  368,  370,  373,
      375,  377,  379,  381,  383,  385,  387,  389,  391,  394,
      396,  399,  401,  404,  407,  409,  411,  413,  415,  417,
      419,  421,  423,  426,  428,  430,  432,  434,  437,  439,
      442,  444,  446,  448,  450,  452,  455,  457,  460,  462,

      464,  466,  469,  471,  473,  475,  477,  479,  481,  483,
      486,  488,  491,  493,  495,  497,  500,  502,  504,  507,
      509,  512,  514,  516,  516,  516,  516,  517,  517,  517,
      518,  518,  518,  518,  518,  518,  519,  520,  521,  521,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  523,  523,  524,  525,  526,  527,
      528,  529,  530,  532,  533,  533,  534,  535,  536,  537,
      538,  539,  539,  539,  539,  539,  539,  539,  540,  541,
      542,  542,  543,  543,  543,  543,  543,  543,  544,  545,
      545,  545,  545,  546,  547,  547,  548,  549,  549,  550,

      550,  550,  551,  551,  551,  551,  551,  551,  552,  552,
      552,  553,  553,  553,  554,  554,  554,  554,  555,  555,
      556,  557,  557,  557,  557,  558,  559,  559,  560,  561,
      561,  562,  563,  564,  564,  564,  565,  565,  566,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  568,  568,  568,
      569,  569,  570,  570,  570,  570,  571,  572,  572,  573,
      573,  573,  574,  574,  576,  576,  576,  577,  577,  578,
      578,  578,  579,  580,  580,  580,  580,  581,  582,  584,
      584,  585,  587,  588,  588,  588,  589,  589,  590,  590,

      591,  591,  591,  591,  591,  591,  592,  592,  592,  593,
      593,  594,  594,  594,  594,  595,  596,  596,  597,  597,
      598,  598,  599,  599,  599,  600,  600,  601,  602,  603,
      604,  605,  605,  606,  607,  608,  608,  609,  610,  610,
      611,  611,  612,  612,  612,  612,  612,  613,  613,  614,
      615,  616,  616,  616,  616,  617,  617,  617,  618,  619,
      619,  620,  620,  621,  622,  622,  622,  623,  623,  623,
      623,  624,  624,  624,  624,  624,  624,  624,  625,  625,
      626,  626,  627,  627,  628,  628,  629,  629,  629,  630,
      630,  631,  631,  632,  632,  632,  633,  633,  634,  634,

      634,  635,  635,  635,  636,  636,  637,  637,  637,  638,
      639,  639,  639,  640,  640,  640,  641,  641,  642,  643,
      643,  643,  644,  644,  644,  644,  644,  645,  646,  647,
      649,  650,  651,  653,  654,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  656,  656,
      656,  656,  656,  656,  657,  658,  659,  660,  661,  661,
      662,  663,  664,  664,  665,  666,  667,  668,  669,  670,
      670,  670,  670,  670,  671,  672,  672,  673,  674,  674,
      675,  675,  675,  675,  675,  675,  676,  677,  677,  678,
      679,  679,  680,  680,  681,  681,  681,  681,  681,  682,

      682,  682,  682,  683,  683,  684,  685,  686,  687,  688,
      688,  688,  689,  689,  690,  690,  690,  690,  691,  691,
      691,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  693,  694,
      695,  695,  695,  696,  696,  697,  697,  698,  698,  698,
      699,  699,  699,  699,  700,  700,  700,  700,  700,  701,
      702,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  704,  705,  706,  707,
      707,  708,  709,  709,  709,  710,  710,  711,  712,  713,

      713,  713,  713,  714,  714,  714,  715,  715,  715,  716,
      717,  717,  718,  719,  719,  719,  719,  719,  720,  720,
      721,  722,  723,  723,  723,  724,  724,  724,  724,  725,
      725,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  727,  727,  727,  727,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  729,
      729,  729,  729,  730,  730,  730,  730,  730,  731,  731,
      731,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      734,  734,  734,  734,  735,  736,  737,  739,  740,  741,
      742,  743,  743,  744,  744,  744,  745,  746,  746,  746,

      746,  746,  747,  747,  747,  747,  747,  747,  747,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  749,  749,  750,  750,  750,  750,  750,  750,  751,
      751,  751,  751,  751,  752,  753,  754,  755,  756,  757,
      758,  758,  758,  759,  760,  760,  760,  760,  760,  761,
      761,  761,  761,  761,  761,  762,  762,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,

      763,  763,  763,  763,  763,  763,  763,  764,  764,  764,
      764,  764,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  766,  767,  768,  769,  770,  771,  771,  771,  772,
      773,  773,  773,  773,  773,  774,  774,  774,  774,  774,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  777,  778,  778,  778,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,

      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      780,  781,  782,  783,  784,  784,  784,  785,  786,  786,
      786,  786,  786,  787,  787,  787,  787,  787,  788,  788,
      788,  788,  788,  788,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  791,  791,  791,
      791,  792,  793,  794,  795,  796,  797,  798,  799,  799,
      799,  800,  801,  801,  801,  801,  801,  802,  802,  802,
      802,  802,  803,  803,  803,  803,  803,  803,  803,  803,

      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  805,
      806,  806,  806,  807,  808,  809,  810,  810,  810,  811,
      812,  812,  812,  812,  812,  813,  813,  813,  813,  813,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  815,  816,  817,  818,
      818,  818,  819,  820,  820,  820,  820,  820,  821,  821,

      821,  821,  821,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  825,  827,  828,  829,
      829,  829,  830,  831,  831,  831,  831,  831,  832,  832,
      832,  832,  832,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  834,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  837,  838,  839,  839,  839,  840,  841,  841,
      841,  841,  841,  842,  842,  842,  842,  842,  843,  843,

      843,  843,  843,  843,  843,  843,  843,  843,  843,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  845,  846,  846,  846,  847,
      848,  848,  848,  848,  848,  849,  849,  849,  849,  849,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  851,  852,  852,  852,
      853,  854,  854,  854,  854,  854,  855,  855,  855,  855,
      855,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  857,  857,  857,  857,  857,  857,  857,  857,  857,

      857,  857,  857,  857,  857,  857,  858,  860,  861,  862,
      864,  866,  867,  868,  869,  870,  872,  873,  874,  875,
      876,  878,  879,  880,  881,  882,  883,  884,  885,  886,
      887,  888,  889,  890,  891,  892,  893,  894,  895,  896,
      897,  898,  899,  900,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  901,  901,  902,
      902
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   33,   33,   37,   38,   39,   40,   41,
       33,   42,   33,   43,   44,   45,   33,   33,   33,   33,
       46,   47,   48,    1,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   33,   59,   60,   61,   62,
       63,   64,   33,   65,   66,   67,   68,   69,   70,   71,
       72,   33,   73,   74,   75,   76,    1,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78
    } ;

static yyconst flex_int32_t yy_meta[79] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       19,   19,   20,   21,   22,   23,   24,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,    1,   26,   27,   28,   25,
       25,   25,   25,   25,   25,   25,   25,   29,   25,   25,
       25,   30,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   31,   32,   33,   34,   35,   35
    } ;

static yyconst flex_int16_t yy_base[1819] =
    {   0,
        0,    0,    0,   77,  151,  227, 6531, 6530,  303,    0,
      381,    0,  459,  535,  611,  687,  763,    0,  841,    0,
        0,    0,  919,    0,   77,   78,   80,   83,  997, 1073,
     1149,    0, 1227,    0, 1305,    0, 1383,    0, 1461,    0,
       90,   93, 1539,    0,   94,   99, 1617,    0,  112,  126,
      175,  176,   85,   98, 1695, 1773,  145,  202,  115,  188,
      211,  215,  102,  119, 1851,    0,  244,  251,  135,  136,
     1929,    0, 2007,    0,  141,  241,  245,  252, 2085,    0,
      464,  471,  473,  476, 2163, 2239,  140,  214,  197,  257,
      552,  554, 6532,11566,11566,  499,  519, 6521, 6518, 6498,

      259,  481, 2310, 2371,  570, 2440,  623, 6447, 2515,  101,
      107,  644,  712,  262,  646,11566,11566, 6516,  496,  549,
     1037, 6519,11566,11566,11566,    0,   93,  568,11566,  719,
     1023, 1029, 1726, 6498, 1099,  602,  671,11566,11566, 6512,
      575,  660, 6491, 1743,11566,11566, 2589, 1043, 1093, 1786,
    11566, 2270, 1734, 1811, 2189, 2316, 6492, 1820,  741,11566,
     2197, 2201, 2382, 2399, 6491, 2276,  651,  749,11566,11566,
        0, 1748,11566,11566, 6506, 2211,11566,11566, 6502, 2224,
    11566,11566, 6501, 1046, 1090, 2450,11566,    0,11566,  511,
    11566,11566,    0, 1122, 2265,11566, 2304, 2409, 2436, 2481,

     6483, 2458, 2298, 1130,11566,11566,    0, 6487, 2431,11566,
    11566, 6486, 2469,    0,11566, 2477,11566,11566,    0, 6445,
      581,11566, 6455, 2540, 2664,11566,    0, 6443,11566,  206,
    11566, 6493, 6441,    0,11566,11566, 6479, 6483, 6442,  223,
    11566,11566, 2498,11566,  285,11566,11566,  490, 2516,11566,
     2229,11566, 6437,    0,11566,11566,  435,  471,    0,11566,
    11566,  498, 1659,11566,11566, 2520,11566,11566,    0, 2542,
        0,11566,11566,11566,11566, 2566,11566,11566, 2570,11566,
    11566,    0,  178, 6436,11566,11566,    0,  468, 6435,    0,
    11566, 6437, 6436,11566,11566,    0, 6431,    0,11566, 6471,

     6424,    0,11566,11566, 6405,  454,11566,11566,    0, 6462,
     6421,    0,11566, 6417,    0,    0,11566,11566,    0,11566,
    11566, 6416, 6424, 2342, 2733, 2538, 2550, 6413, 6463,11566,
        0, 6446, 6439,    0,  291,  268,11566,11566, 2809, 6437,
      584,  248,  691, 2298,  993,  993,  542,  595, 2581,  156,
      602, 6409, 6394,11566, 6444,   34, 2886, 6398,  560, 6396,
    11566,11566,    0, 2612, 2627, 2419, 2579, 2648, 2653, 2654,
     6381, 2961,  663, 2675, 1753, 1819, 2676,  693, 2680, 2702,
     1762,11566,  714, 2315, 2685, 2707, 6450,11566, 1789,  989,
     2347, 1825,11566, 2715, 6453,11566,  624, 6446,  659, 6431,

     2220,11566, 6385, 2743, 2766, 6423, 2789, 2835, 2355, 2843,
     2875, 2426, 2404,11566, 6383, 2616, 2865, 6417, 6433,11566,
     2755, 1091, 2767, 2556,11566, 2782, 6431,  701, 3035, 3111,
     6430,11566, 2882, 1693, 2897, 6429, 2574,11566, 2905, 2932,
     2987, 6412, 2995, 3020, 2936, 3070, 3082,    0, 3137, 2944,
     2968, 1722, 3148, 3159, 6410, 3170, 3187, 3012, 3193, 3204,
     2681,11566, 6370, 3024, 3087,    0,    0, 2711,11566, 6368,
     6422,11566, 2734,11566, 6366, 6420,11566, 2750,11566, 6364,
     6418,11566, 2946, 2161, 2962, 2762,11566, 2984, 2486, 2491,
    11566, 2901, 3210, 3099,    0, 3234, 6401, 3256, 2870,11566,

     6361, 3245, 3278, 6398, 3286, 3295, 3303, 3312, 3320, 2955,
    11566, 6358, 3324, 3337,    0, 6396, 6404, 6394, 3062,11566,
     6349, 6389, 6349, 3075,11566, 6342,    0, 3142,11566, 6341,
        0, 6340, 1034,11566, 6354, 6340,11566, 6388, 3178,11566,
     6334,    0, 6333, 1052, 6387, 6386,11566, 6330,    0,11566,
    11566, 6329, 6328, 3198,11566, 6327, 2216,11566, 2558, 3215,
    11566, 6325, 3223,11566, 6328, 6318,    0,  159, 6324,  204,
        0, 6316, 6322, 6323,  117,  455, 3239,11566, 6310,    0,
     3269,11566, 6308,    0, 3329,11566, 6307, 3342,11566, 6306,
      713, 6358, 1001, 6343, 6302, 1118, 6354, 1736, 6339, 6298,

        0, 6350, 1019,    0, 6296,    0,  525, 6295,    0,    0,
     6294,  663, 6337,    0, 6292,    0, 6291,    0,    0, 6290,
     6325, 6294, 6284, 6322,    0, 6326, 1758, 6316,11566,11566,
     6312, 3388, 6308, 6316,11566, 6316, 6297, 1064, 6271, 6256,
     1066, 1755, 2164, 1773, 2418, 2227, 2509,11566, 1761, 2242,
     2273, 6262, 6260, 6303, 2228, 3347,    0, 2254, 6211, 2730,
    11566,11566, 3466, 3219,    0,    0, 3369, 3370, 3374, 3364,
     2388, 2842, 3423,11566, 3427, 3493, 2414, 3437, 3481, 3484,
        0, 6184, 3355, 3484, 6149, 6188, 3499, 3501, 3507, 1708,
     3574, 3538, 3584, 3587, 6198, 3050, 3064, 6143,    0, 6142,

     6138, 6137, 3515, 3554, 3595, 3623, 3654, 3662, 3670, 6135,
     6134,    0,    0, 6182, 6132, 6131, 6129, 6128, 6125,    0,
        0, 6124, 6123, 6122, 6132, 6117, 6115, 6114, 6113, 6113,
     6125, 6115, 6109, 6122, 2526, 6108, 6120, 6120, 6103, 6098,
     6091, 6090, 6089,    0, 6088,    0, 6084,11566,11566,11566,
     6083, 6123, 2638, 6080,    0, 6079,11566,  731,    0, 6127,
     6075, 6072, 6071,11566, 2881, 6070, 6127,    0, 3681, 2666,
    11566, 6101, 2278, 6070, 6062, 2217, 2288, 2317, 6097, 2726,
     2428, 3348, 2719, 6071, 6056,11566, 2718,11566,    0, 6041,
     2849, 3550, 6039, 3708, 3563, 6066, 3684, 3614, 3633, 3735,

     3742, 3746, 3743, 6058, 3699,11566, 3773, 6057, 3749, 3820,
     3896, 3781,11566, 6055, 6054, 6051, 6050, 3794,    0, 3849,
     3925, 3876, 6049, 6048, 6079, 6036, 6028, 6034, 6033, 6029,
        0, 6028, 6025, 6024, 3897, 6023, 6022, 6017, 6015, 6014,
     6005,11566, 5993, 6001, 5996,11566, 5990, 5999, 5981, 5980,
     5991, 5990, 5989, 5986, 5984, 5983, 5982, 5981, 2916, 5980,
     5978, 2178, 6013, 5976, 5975, 5974, 5967,11566, 6002, 3774,
    11566, 5991, 5990, 5964, 5951, 2488, 2550, 3359, 3446,11566,
     2606, 5946, 5960, 3093, 3346, 5936, 3126, 3803, 3813, 3380,
     3860, 3936, 3913, 5942, 5941, 3933, 3956, 5939, 5938, 5937,

     5936, 3964, 3986, 5935, 5930, 5923, 5927, 5921, 5916, 5912,
     5910, 5904, 5902, 5903, 5902, 5896, 5912, 2333, 5860, 5862,
     3113, 5861, 5856, 5855, 5851, 5847, 5853, 5855, 5837, 5837,
      685, 5834, 5844, 5840,  118, 5832, 5798, 5794, 5793, 5792,
     5791, 5787, 5786, 5783, 5782, 2604, 5781, 5780, 5775, 5773,
     5819, 5789,11566, 5760, 5774, 2732, 2860, 3545,11566, 5798,
     3564, 5763, 5753, 3959,11566, 3741, 3971, 3992, 3994, 3864,
     5755, 5753, 3996, 4017, 5752, 5751, 5747, 5744, 4004, 4066,
     4088, 5743, 5742, 5741,11566, 5737, 5736, 5728, 5727, 5726,
     5722, 5730, 1680, 5720, 5713, 5717, 5726, 5721, 5715, 5707,

     5718, 5710, 5707, 5702, 5695, 5694,11566, 5700,    0,    0,
     5692,11566, 5683, 3262, 5684, 5684, 5694, 5694, 5682, 5679,
     5641, 5640, 5639, 5638, 5634, 5630, 5629, 5628, 5622, 5616,
     5581, 5576, 5605, 5570, 5561, 2869, 5594, 3635, 5552, 5545,
     3769, 3734, 3999, 4026, 4047, 4077, 5559, 5558, 4083, 4096,
     5552, 5547, 5543, 5538, 4094, 5534, 5531, 5526, 5524, 5523,
     5522, 5514, 5507, 5500, 5490, 5487,    0, 5473, 5476, 5466,
     5465,11566, 5476, 5462, 5457, 5469, 5464, 5462, 5461,    0,
    11566,11566, 5457, 5452,11566, 5421, 4456, 4449, 4449, 4460,
     4457, 4452, 4450, 4448, 4446, 4440, 4437, 4436, 4434, 4433,

     4432, 4430, 4428, 4431, 4406, 4398, 4000, 4444, 4443, 4058,
     3835, 4075, 4079, 4038, 4402, 4390, 4119, 4138, 4388, 4386,
     4381, 4380, 4131, 4379, 4377, 4371, 4364, 4360, 4343, 4341,
     4334, 4331, 4327,11566, 4325, 4310, 4315, 4312, 4320, 4309,
     4301, 4302, 4298, 4297, 4296,11566, 4292, 4283, 4275, 3363,
     4269, 4272, 4263, 4258, 4254, 4250, 4245, 4243, 4241, 4236,
     4228, 4225, 4224, 4218, 4205, 4203,11566, 4234, 4223, 4057,
    11566,11566,11566, 4043, 2270, 4127, 4123, 4141, 4196, 4194,
     4150, 4158, 4188, 4187, 4186, 4184, 4183, 4178, 4171, 4167,
     4155, 4145, 4144, 4137, 4133, 4131, 4108, 4105, 4090, 4091,

     4075, 4067, 4058, 4023, 4029, 4025, 4006, 4001, 3988, 3972,
     3976,11566, 3967, 3968, 3968, 3906, 3886, 3842,   74,   86,
       87,  163,  421,  431,  460,  525,  526,  582,11566,11566,
      639, 4190, 4153, 4206, 4182, 4191,  606,  642, 4194, 4221,
      644,  688,  945,  957, 4200,  958,  989, 1003, 1028, 1055,
     1068, 1666, 1731, 1735, 1751, 1771, 1773, 1772, 1773, 2125,
     2126, 2125, 2175, 2211, 2237, 2238, 2244, 2255, 3381, 2249,
     2276, 2312, 2337, 2350, 2355, 2375, 2382, 2410, 2417, 2445,
     2449, 2450, 2466, 2479, 2494, 4102, 4220, 4219, 4239, 2508,
     2522, 4251, 4264, 2534, 2552, 2559, 2593, 4272, 2612, 2621,

     2638, 2648, 2652, 2660, 2705, 2724, 2738, 2734, 2732, 2751,
     2769, 2761, 2783, 2785, 2791, 2792, 2813, 2816,11566, 3447,
     2823, 2834, 2851, 2856, 2868, 2874, 2884, 2885, 2893, 2898,
     2910, 2916, 2928, 2929, 2936, 3911, 4229, 4259, 4281, 2933,
     2939, 4289, 4306, 2944, 2949, 2950, 2957, 4297, 2958, 2968,
     2972, 2988, 2994, 2995, 3006, 3008, 3035, 3037, 3034, 3045,
     3052, 3057, 3064, 3070, 3503,11566, 3070, 3076, 3081, 3086,
     3092, 3094, 3103, 3107, 3114, 3116, 3132, 3142, 3161, 3167,
     3172, 3527, 4332, 4322, 3186, 3191, 4331, 4348, 3197, 3198,
     3199, 3208, 4342, 3212, 3219, 3221, 3231, 3232, 3239, 3240,

     3248, 3249, 3250, 3257, 3265, 3266, 3282, 3283, 3650, 3293,
     3309, 3316, 3323, 3324, 3336, 3337, 3355, 3356, 3364, 3369,
     3370, 3377, 3379, 3387, 4333, 4364, 3406, 3407, 4374, 4391,
     3408, 3418, 3431, 3443, 4381, 3455, 3460, 3464, 3470, 3472,
     3476, 3484, 3485, 3486, 3477, 3502, 3507, 3508, 3509, 3513,
     3676, 3520, 3531, 3544, 3545, 3553, 3560, 3564, 3566, 3573,
     3578, 3582, 3588, 3590, 3600, 4370, 4389, 3588, 3604, 4400,
     4426, 3605, 3611, 3623, 3630, 4411, 3632, 3640, 3642, 3646,
     3648, 3661, 3663, 3664, 3665, 3676, 3685, 3688, 3695, 3699,
    11566, 3705, 3714, 3715, 3728, 3730, 3737, 3745, 3746, 3754,

     3766, 3782, 3784, 3785, 3794, 4450, 4438,11566,11566, 4441,
     4456,11566,11566,11566,11566, 4448,11566,11566,11566,11566,
        0,11566,11566,11566,11566,11566,11566,11566,11566,11566,
    11566,11566,11566,11566,11566,11566,11566,11566,11566,11566,
    11566,11566, 4247, 3805, 3826, 3817, 3870, 3827, 3842, 3890,
     3830, 3876, 3953, 4089, 3930, 3939, 3965, 3920, 4270,11566,
     4523, 4558, 4593, 4628, 4663, 4698, 4733, 4768, 4803, 4838,
     4873, 4908, 4943, 4978, 5013, 5048, 5083, 5118, 5153, 5188,
     5223, 5258, 5293, 5328, 5363, 5398, 5433, 5468, 5496, 5518,
     5537, 5561, 5582, 5606, 5640, 5669, 5704, 4464, 5723, 5757,

     5791, 5825, 5860, 5889, 5924, 5954, 5988, 6022, 6056, 6090,
     6124, 6158, 6178, 6213, 6248, 6283, 6312, 4476, 6346, 4484,
     6380, 6414, 6448, 6482, 5480, 6501, 6521, 6556, 6576, 6611,
     6646, 6666, 6701, 6736, 6770, 6800, 6835, 6855, 6890, 5488,
     6909, 5738, 6928, 6963, 6983, 7018, 7053, 7073, 7095, 7130,
     7165, 7200, 7229, 7263, 5772, 7280, 7302, 7317, 7347, 5511,
     4492, 7369, 7398, 7429, 7458, 7487, 7522, 7541, 7569, 7603,
     7637, 7671, 7706, 7723, 7758, 7787, 7816, 7851, 7886, 7916,
     7945, 7979, 8013, 8047, 8082, 8116, 8150, 8184, 8218, 8235,
     8255, 8290, 8325, 8360, 8389, 8418, 8452, 8486, 5806, 8520,

     8554, 8588, 8622, 8639, 8658, 8686, 8706, 8741, 8761, 8796,
     8831, 8859, 8879, 8914, 8949, 8983, 9013, 9048, 9068, 9103,
     9122, 9150, 9169, 9197, 9232, 9252, 9287, 9322, 4317, 9352,
     9374, 9394, 9429, 9464, 9499, 9516, 9551, 9571, 9588, 9618,
     9653, 9687, 5530, 9713, 9745, 9776, 5969, 5550, 9810, 9835,
     9864, 5814, 9899, 9916, 9945, 9974,10009,10039,10069,10104,
    10138,10155,10184,10213,10247,10281,10315,10332, 6037,10351,
    10386, 6045,10403,10438, 6071, 6105, 4397,10468,10488,10510,
    10545,10565,10584,10614, 5575,10645,10677,10708,10743, 5595,
    10777,10807,10833,10868,10897,10932,10962,10991, 6139,11025,

    11059,11078,11113,11130,11160,11182,11202,11221,11251,11285,
    11320,11355,11390,11425,11460,11495,11530, 5652
    } ;

static yyconst flex_int16_t yy_def[1819] =
    {   0,
     1561, 1561, 1560,    3, 1562, 1562, 1563, 1563, 1560,    9,
     1560,   11, 1564, 1564, 1565, 1565, 1560,   17, 1560,   19,
     1561, 1561, 1560,   23, 1566, 1566, 1567, 1567, 1568, 1568,
     1560,   31, 1560,   33, 1560,   35, 1560,   37, 1560,   39,
     1569, 1569, 1560,   43, 1570, 1570, 1560,   47, 1571, 1571,
     1572, 1572, 1573, 1573, 1574, 1574, 1575, 1575, 1576, 1576,
     1577, 1577, 1578, 1578, 1560,   65, 1579, 1579, 1580, 1580,
     1560,   71, 1560,   73, 1581, 1581, 1581, 1581, 1560,   79,
     1582, 1582, 1583, 1583, 1584, 1584, 1585, 1585, 1586, 1586,
     1587, 1587, 1560, 1560, 1560, 1560, 1560, 1588, 1589, 1590,

     1590, 1591, 1560, 1592, 1593, 1594, 1593, 1560, 1560, 1560,
     1590, 1590, 1591, 1590, 1560, 1560, 1560, 1595, 1596, 1596,
     1596, 1597, 1560, 1560, 1560, 1598, 1599, 1560, 1560, 1560,
     1560, 1600, 1600, 1560, 1601, 1560, 1602, 1560, 1560, 1603,
     1604, 1604, 1560, 1604, 1560, 1560, 1605, 1606, 1606, 1606,
     1560, 1606, 1560, 1560, 1607, 1607, 1560, 1608, 1609, 1560,
     1560, 1560, 1610, 1610, 1560, 1611, 1560, 1612, 1560, 1560,
     1613, 1560, 1560, 1560, 1614, 1560, 1560, 1560, 1615, 1560,
     1560, 1560, 1616, 1617, 1617, 1617, 1560, 1618, 1560, 1619,
     1560, 1560, 1620, 1621, 1560, 1560, 1560, 1560, 1622, 1622,

     1560, 1623, 1560, 1624, 1560, 1560, 1625, 1626, 1560, 1560,
     1560, 1627, 1560, 1628, 1560, 1628, 1560, 1560, 1629, 1560,
     1630, 1560, 1631, 1560, 1560, 1560, 1632, 1560, 1560, 1560,
     1560, 1633, 1560, 1634, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1635, 1560, 1560, 1635, 1560, 1560,
     1560, 1560, 1560, 1636, 1560, 1560, 1560, 1560, 1637, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1638, 1560,
     1639, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1640, 1641, 1560, 1560, 1560, 1642, 1643, 1560, 1644,
     1560, 1560, 1560, 1560, 1560, 1645, 1560, 1646, 1560, 1560,

     1560, 1647, 1560, 1560, 1560, 1560, 1560, 1560, 1648, 1649,
     1560, 1650, 1560, 1560, 1651, 1651, 1560, 1560, 1652, 1560,
     1560, 1560, 1560, 1560, 1653, 1560, 1560, 1560, 1654, 1560,
     1655, 1656, 1657, 1658, 1560, 1657, 1560, 1560, 1659, 1657,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1660, 1653,  357,  357,  357,
     1560, 1560, 1661, 1662, 1662, 1663, 1663, 1663, 1663, 1663,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1657,
     1560, 1560, 1657, 1657, 1560, 1560, 1664, 1560, 1665, 1666,
     1665, 1560, 1560, 1665, 1667, 1560, 1668, 1669, 1668, 1560,

     1560, 1560, 1560, 1560, 1670, 1560, 1670, 1671, 1672, 1670,
     1671, 1673, 1560, 1560, 1560, 1672, 1672, 1674, 1675, 1560,
     1676, 1677, 1676, 1560, 1560, 1676, 1678, 1678, 1679, 1679,
     1678, 1560, 1680, 1681, 1680, 1678, 1560, 1560, 1680, 1560,
     1682, 1560, 1682, 1683, 1684, 1682, 1560, 1685, 1683, 1684,
     1684, 1686, 1560, 1687, 1560, 1687, 1688, 1689, 1687, 1688,
     1560, 1560, 1560, 1689, 1689, 1690, 1691, 1560, 1560, 1560,
     1692, 1560, 1560, 1560, 1560, 1693, 1560, 1560, 1560, 1560,
     1694, 1560, 1695, 1696, 1695, 1560, 1560, 1695, 1697, 1560,
     1560, 1697, 1698, 1560, 1699, 1698, 1560, 1700, 1560, 1560,

     1560, 1560, 1701, 1560, 1701, 1702, 1703, 1701, 1702, 1560,
     1560, 1560, 1703, 1703, 1704, 1705, 1706, 1705, 1560, 1560,
     1560, 1707, 1560, 1560, 1560, 1560, 1708, 1708, 1560, 1708,
     1709, 1560, 1710, 1560, 1711, 1560, 1560, 1712, 1560, 1560,
     1560, 1713, 1560, 1560, 1714, 1714, 1560, 1560, 1715, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1716, 1560, 1716, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1717, 1560, 1560, 1560,
     1718, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1719,
     1560, 1560, 1560, 1720, 1560, 1560, 1560, 1560, 1560, 1560,
     1721, 1722, 1721, 1560, 1560, 1723, 1724, 1723, 1560, 1560,

     1725, 1560, 1560, 1726, 1560, 1727, 1560, 1560, 1728, 1729,
     1560, 1730, 1731, 1732, 1560, 1733, 1560, 1734, 1735, 1560,
     1560, 1560, 1560, 1736, 1737, 1738, 1560, 1739, 1560, 1560,
     1739, 1740, 1739, 1738, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1741, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1742, 1742, 1743, 1560, 1744, 1745,
     1560, 1560, 1746, 1745, 1747, 1748, 1749, 1749, 1749, 1560,
     1560, 1560, 1560, 1560, 1739, 1560, 1560, 1750, 1750, 1751,
     1752, 1560, 1753, 1753, 1560, 1754, 1755, 1755, 1756, 1560,
     1757, 1758, 1758, 1759, 1760, 1560, 1761, 1560, 1762, 1560,

     1560, 1560, 1763, 1763, 1764, 1765, 1766, 1767, 1767, 1560,
     1560, 1768, 1769, 1770, 1560, 1560, 1560, 1771, 1560, 1772,
     1773, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1774, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1775, 1560, 1776, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1777, 1560, 1560, 1778, 1779, 1780,
     1560, 1560, 1560, 1560, 1560, 1560, 1781, 1782, 1783, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1784, 1784,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1785, 1786,
     1560, 1787, 1788, 1789, 1787, 1790, 1791, 1791, 1791, 1560,

     1560, 1792, 1793, 1560, 1794, 1560, 1794, 1560, 1795, 1796,
     1796, 1797, 1560, 1560, 1560, 1560, 1560, 1798, 1799, 1800,
     1800, 1801, 1560, 1560, 1802, 1560, 1560, 1560, 1803, 1560,
     1804, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1805, 1806, 1560, 1560, 1560, 1560, 1560, 1807, 1808,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1809, 1560,
     1560, 1560, 1560, 1560, 1787, 1560, 1560, 1787, 1791, 1791,
     1791, 1560, 1793, 1560, 1560, 1795, 1797, 1560, 1560, 1560,

     1560, 1798, 1810, 1560, 1560, 1560, 1560, 1560, 1803, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1811, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1805, 1560, 1560, 1560, 1560,
     1807, 1560, 1560, 1560, 1560, 1560, 1560, 1812, 1560, 1809,
     1809, 1560, 1560, 1787, 1560, 1787, 1791, 1791, 1791, 1793,
     1560, 1560, 1795, 1797, 1560, 1560, 1560, 1560, 1798, 1810,
     1810, 1560, 1560, 1560, 1560, 1560, 1803, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1813, 1814,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1812, 1812, 1560, 1560,
     1787, 1787, 1791, 1791, 1791, 1793, 1560, 1560, 1795, 1797,
     1560, 1560, 1560, 1560, 1798, 1560, 1560, 1560, 1560, 1803,
     1560, 1560, 1560, 1560, 1560, 1560, 1815, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1816,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1787,
     1560, 1791, 1791, 1793, 1560, 1560, 1795, 1797, 1560, 1560,
     1560, 1560, 1798, 1560, 1560, 1560, 1560, 1803, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1817,
     1560, 1560, 1560, 1787, 1560, 1791, 1791, 1793, 1560, 1560,
     1795, 1797, 1560, 1560, 1560, 1560, 1798, 1560, 1560, 1560,
     1560, 1803, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1817, 1817, 1787, 1791, 1791, 1793, 1560, 1560, 1795, 1797,
     1560, 1560, 1560, 1560, 1798, 1560, 1560, 1560, 1560, 1803,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1787, 1791, 1791, 1793, 1560,
     1560, 1795, 1797, 1560, 1560, 1560, 1560, 1798, 1560, 1560,

     1560, 1560, 1803, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1787, 1791, 1791, 1793, 1560,
     1560, 1795, 1797, 1560, 1560, 1560, 1560, 1798, 1560, 1560,
     1560, 1560, 1803, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1791, 1793, 1560, 1560, 1795, 1797, 1560, 1560,
     1560, 1560, 1798, 1560, 1560, 1560, 1560, 1803, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1791, 1793, 1560, 1560, 1795, 1797,
     1560, 1560, 1560, 1560, 1798, 1560, 1560, 1560, 1560, 1803,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1791, 1793, 1560, 1560, 1795,
     1797, 1560, 1560, 1560, 1560, 1798, 1560, 1560, 1560, 1560,
     1803, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1791, 1793, 1560, 1560, 1795,
     1797, 1560, 1560, 1560, 1560, 1798, 1560, 1560, 1560, 1560,
     1803, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,    0,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560
    } ;

static yyconst flex_int16_t yy_nxt[11645] =
    {   0,
       95,   96,   97,   95,   96,   95,   98,   95,   99,   95,
       95,   95,   95,   95,  100,   95,  101,  102,   95,  100,
      100,  100,   95,  103,   95,   95,  104,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,   95,  106,   95,  107,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,   95,   95,   95,   95,   95,  108,  109,  174,
      174,  109,  178,  175,  175,  178,  179,  242,  656,  179,
      110,  111,  215,  112,  113,  215,  222,  114,  114,  115,

      242,  222,  378,   94,  265,  378,   94,  223,  378,  657,
      398,  378,  223,  230,  231,  400,  230,  255,  232,  256,
      224,  265, 1276,  176,  176,  224,  180,  230,  231,  180,
      230,  243,  232,  334, 1277, 1278,  216,  278,  278,  216,
      225,  257,  313,  291,  243,  225,  251,  252,  266,  251,
      115,  116,  116,  117,  116,  116,  116,  118,  233,  116,
      116,  258,  116,  116,  116,  266,  116,  292,  116,  120,
      737, 1017,  233,  120,  116,  116,  116,  235,  235,  236,
      236,  279,  279,  651,  738, 1018,  314,  292,  237,  237,
      255,  253,  256,  238,  238,  592,  116,  121,  116,  316,

      594,  239,  239,  251,  252,  651,  251,  544,  317,  318,
      544, 1279,  545,  260,  257,  261,  313,  260,  730,  261,
      731,  240,  240,  116,  116,  116,  116,  116,  116,  117,
      116,  116,  116,  118,  258,  116,  116,  262,  116,  116,
      116,  262,  116,  291,  116,  120,  272,  291,  253,  120,
      116,  116,  116,  272,  291,  273,  274,  263,  732,  316,
      314,  263,  273,  274,  636,  733,  335,  292,  317,  318,
      275,  293,  116,  121,  116,  336,  552,  275,  293,  383,
      553,  384,  384,  384,  628,  334,  557,  292,  334,  557,
      276,  293,  627,  637,  334,  627,  558,  276,  293,  116,

      116,  116,  116,  124,  124,  125,  124,  124,  124,  124,
      124,  126,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  124,  128,
      124,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  124,  124,  124,  124,  127,
      127,  129,  130,  131,  130,  130,  129,  129,  129,  132,
      129,  129,  129,  129,  129,  129,  129,  129,  133,  129,

      129,  129,  129,  134,  129,  129,  129,  129,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  129,  136,  129,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  129,  129,  129,  137,  135,  135,  138,
      138,  139,  138,  138,  138,  140,  299,  138,  138, 1280,
      138,  138,  138,  299,  138,  303,  138,  142,  303, 1281,
      300,  142,  143,  138,  138,  597,  304,  300,  568,  304,
      599, 1560,  569,  337, 1560,  333,  338,  333,  339,  305,

      324, 1560,  305,  324,  138,  144,  138,  334, 1282,  735,
      301,  611,  490,  390,  391,  490,  739,  301,  391,  306,
      326,  327,  306,  326,  568,  325,  491,  341,  570,  610,
      752,  138,  138,  138,  138,  138,  138,  139,  138,  138,
      138,  140,  391,  138,  138,  325,  138,  138,  138,  753,
      138,  572,  138,  142,  320,  573,  320,  142,  143,  138,
      138,  574,  321,  575,  321,  328, 1560,  391,  661,  401,
      402,  391,  401, 1283, 1284,  321,  321,  321,  321,  646,
      138,  144,  138,  534,  333,  635,  333,  333,  635,  333,
      333,  333,  422,  423,  535,  391,  334,  423,  322,  323,

      322,  323,  646,  413,  414,  662,  413,  138,  138,  138,
      138,  145,  145,  146,  145,  145,  145,  147,  365,  145,
      145,  423,  145,  145,  145,  403,  145,  536,  145,  149,
     1285,  645,  663,  149,  150,  151,  145,  333,  645,  333,
      333,  398,  333,  333,  333,  379,  400,  385,  379,  334,
      385,  335,  461,  462,  645,  461,  145,  152,  145,  415,
      380,  645,  386, 1171,  378, 1290,  377,  378,  377,  757,
      334,  365,  416,  416,  416,  416,  398, 1560,  423,  417,
      759,  400,  423,  145,  145,  145,  145,  145,  145,  146,
      145,  145,  145,  147,  378,  145,  145,  378,  145,  145,

      145, 1291,  145, 1294,  145,  149,  423,  690,  463,  149,
      150,  151,  145,  381,  382,  677,  381,  377,  677,  377,
      404,  404,  404,  404,  337,  431,  333,  338,  333,  339,
      592,  638,  145,  152,  145,  594,  405,  757,  334, 1012,
      334,  406,  450,  450,  450,  450, 1013, 1295,  759,  451,
      464,  464,  464,  464,  638,  639,  640,  465,  341,  145,
      145,  145,  145,  129,  153,  154,  153,  153,  129,  129,
      129,  155,  129,  129,  129,  129,  129,  129,  129,  129,
      156,  129,  129,  129,  129,  157,  129,  129,  129,  129,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,

      158,  158,  158,  158,  158,  158,  158,  158,  129,  136,
      129,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  129,  129,  129,  159,  158,
      158,  160,  161,  162,  161,  161,  160,  160,  160,  163,
      160,  160,  160,  160,  160,  160,  160,  160,  164,  160,
      160,  160,  160,  165,  160,  160,  160,  160,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  160,  167,  160,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,

      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  160,  160,  160,  168,  166,  166,  169,
      169,  170,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  169,  172,  169,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  169,  169,  169,  169,  171,  171,  181,  181,  182,

      181,  181,  181,  183, 1296,  181,  181,  679,  181,  181,
      181,  679,  181,  645,  181,  185, 1297, 1299,  592,  185,
      181,  181,  181,  594,  404,  404,  404,  404,  644,  645,
      404,  404,  404,  404,  645,  679,  534,  407,  392,  393,
      405,  392,  181,  186,  181,  406,  405,  535, 1300,  432,
      644,  406,  645,  544, 1560,  391,  544,  645,  545,  391,
      434,  435, 1301,  484,  485,  435,  749,  432,  485,  181,
      181,  181,  181,  181,  181,  182,  181,  181,  181,  183,
      536,  181,  181,  391,  181,  181,  181, 1302,  181,  435,
      181,  185,  485,  750,  394,  185,  181,  181,  181, 1560,

      404,  404,  404,  404,  409,  773,  776, 1560,  485,  688,
     1560,  435,  485,  688, 1303,  435,  405, 1560,  181,  186,
      181,  406,  412,  494,  494,  494,  494, 1304,  773,  776,
      495,  513,  513,  513,  513,  597,  485,  688,  514,  435,
      599,  496,  496,  496,  497,  181,  181,  181,  181,  187,
      187,   94,  187,  187,  187,  187,  187,  188,  187,  187,
      187,  187,  187,  187,  189,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  187,  187,  187,  190,  190,  190,

      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  187,  187,  187,  187,  190,  190,  191,  191,  192,
      191,  191,  191,  191,  191,  193,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  191,  195,  191,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  191,

      191,  191,  191,  194,  194,  196,  197,  198,  197,  197,
      196,  196,  196,  199,  196,  196,  196,  196,  196,  196,
      196,  196,  200,  196,  196,  196,  196,  201,  196,  196,
      196,  196,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      196,  203,  196,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  196,  196,  196,
      204,  202,  202,  205,  205,  206,  205,  205,  205,  205,
      205,  207,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  205,  209,
      205,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  205,  205,  205,  205,  208,
      208,  210,  210,  211,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  212,  212,  212,  210,  213,  210,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  210,  210,  210,  210,  212,  212,  217,
      217,  218,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  217,  220,  217,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,

      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  217,  217,  217,  217,  219,  219,   94,   94,  226,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,   94,  228,   94,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,   94,
       94,   94,   94,  227,  227,  244,  245,  246,  244,  245,

      244,  244,  244,  244,  244,  244,  247,  244,  244,  244,
      244,  693,  572,  244,  432,  693,  576,  244,  244,  244,
      244,  244,  574,  696,  575, 1305,  696,  410,  410,  410,
      410, 1066,  432,  448,  407,  440,  440,  440,  440,  693,
      244,  249,  244,  405,  424,  425, 1067,  424,  406,  468,
      469,  441,  468,  597,  381,  382,  442,  381,  599,  627,
     1560,  423,  627,  381,  382,  423,  381,  244,  244,  244,
      244,  244,  244,  244,  245,  246,  244,  245,  244,  244,
      244,  244,  244,  244,  247,  244,  244,  244,  244,  423,
     1306,  244,  436,  777, 1307,  244,  244,  244,  244,  244,

      426,  409,  781, 1560,  435,  470,  390,  391,  435, 1308,
      432,  391,  440,  440,  440,  440,  777,  645,  244,  249,
      244,  447,  440,  440,  447,  781,  392,  393,  441,  392,
     1309,  448,  435,  442, 1310,  391,  671,  441,  672,  672,
      672,  645,  442, 1067, 1067,  244,  244,  244,  244,  244,
      244,  267,  267,  268,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  267,  270,  267,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  267,  267,  267,  267,  269,  269,  280,
      280,  281,  280,  280,  280,  280,  280,  282,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  280,  284,  280,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,

      283,  280,  280,  280,  280,  283,  283,  285,  285,  286,
      285,  285,  285,  285,  285,  287,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  285,  289,  285,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  285,
      285,  285,  285,  288,  288,  294,  294,  295,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,

      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      294,  297,  294,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  294,  294,  294,
      294,  296,  296,  307,  307,  308,  307,  307,  307,  309,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  704,
      307,  307, 1311,  704,  757,  307,  307,  307, 1312,  307,
      440,  440,  440,  440,  778,  759, 1067,  443,  453,  453,

      453,  453,  453,  453,  453,  453,  441,  704,  307,  311,
      307,  442,  473,  474,  454,  473,  778,  557,  454,  455,
      557,  401,  402,  455,  401,  478,  479,  558,  478,  787,
      563,  564,  787,  563, 1313,  307,  307,  307,  307,  307,
      307,  308,  307,  307,  307,  309,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  658,  307,  307,  658,  876,
      645,  307,  307,  307,  445,  307,  499,  500,  475,  499,
     1314,  437,  438,  782,  437,  565, 1560,  453,  453,  453,
      453,  480,  645,  876,  307,  311,  307, 1560,  435, 1175,
     1175, 1175,  435,  454, 1560,  782, 1315, 1316,  455,  510,

      511,  783,  510, 1317, 1318,  502,  502,  502,  502,  873,
     1320,  307,  307,  307,  307,  342,  435,  446,  446,  446,
      446,  503,  501,  783,  443,  641,  504,  439,  343,  642,
      877,  873,  383,  441,  384,  384,  384,  643,  442,  344,
      345,  334, 1321,  324,  346,  347,  324,  641,  878,  348,
      349,  642,  350,  351,  877,  512,  416,  416,  416,  416,
      643,  344,  345,  417, 1560,  391,  346,  347,  325,  391,
      878, 1322,  348,  349,  352,  353,  350,  351,  354,  354,
      354,  354,  996,  453,  453,  453,  453,  355,  325,  677,
      456,  445,  677,  391,  354,  354, 1323,  356,  997,  454,

      459,  459,  459,  459,  455,  413,  414,  456,  413, 1324,
      502,  502,  502,  502, 1325,  677,  454,  356,  677,  647,
      658,  455,  647,  658,  358,  359,  503,  684,  684,  684,
      684,  504,  519,  520, 1326,  519,  360,  502,  502,  502,
      502, 1327,  648,  361,  505,  362,  363,  354,  354,  354,
      354,  486,  487,  503,  486,  645,  355,  458,  504,  502,
      502,  502,  502,  354,  354,  666,  356, 1560,  485, 1328,
      524,  525,  485,  524,  458,  503, 1329,  645,  528,  529,
      504,  528,  508,  508,  508,  508,  356,  490,  521,  505,
      490,  659,  490,  367,  368,  490,  485,  369,  503,  554,

      555,  491,  554,  504, 1330,  370,  491,  488, 1331, 1332,
      780,  507,  361,  780,  362,  363,  372,  560,  561,  372,
      560,  577,  578,  956,  577, 1333,  526,  846,  373,  373,
      846,  374,  375,  648,  530,  376,  376,  377, 1334,  326,
      327,  325,  326,  581,  582,  956,  581,  537,  537,  537,
      537,  326,  327, 1335,  326,  556,  507,  424,  425, 1560,
      424,  325, 1560,  537,  537, 1340,  538,  585,  586, 1560,
      585,  588,  589,  562,  588,  437,  438,  579,  437, 1341,
      658,  957,  647,  658,  328,  647,  538,  847,  377,  427,
      427, 1344,  427,  427,  427,  428,  328,  427,  427,  583,

      427,  427,  427,  957,  427,  648,  427,  430,  649, 1345,
      757,  430,  427,  431,  427,  537, 1346,  416,  416,  416,
      416,  759,  650,  587,  417,  666,  333,  590,  333,  333,
      649,  333,  333,  333,  427,  430,  427,  645,  334,  859,
      667,  333,  859,  333,  333,  650,  333,  333,  333,  658,
     1347,  659,  658,  334,  658,  658,  661,  658,  658,  645,
      365,  427,  427,  427,  427,  539,  540,  871,  539, 1349,
      871,  537,  537,  537,  537,  365,  379,  385, 1350,  379,
      385,  379,  461,  462,  379,  461,  385,  537,  537,  385,
      538,  670,  386,  662,  666, 1351,  386,  377,  377,  666,

      666,  386,  377,  673,  674, 1352,  673,  377,  385, 1353,
      538,  385,  468,  469,  668,  468,  669, 1354,  675,  787,
      663,  541,  787,  670,  676,  659,  659,  780,  334,  377,
      780,  658,  390,  391,  658,  473,  474,  391,  473,  537,
      354,  354,  354,  354,  404,  404,  404,  404,  377,  377,
      648,  478,  479,  377,  478,  881,  354,  354,  377,  622,
      405,  391, 1355,  486,  487,  406,  486,  410,  410,  410,
      410, 1036,  422,  423,  407,  676,  680,  423,  881,  622,
      377, 1356,  792,  405, 1560,  423,  358,  359,  406,  423,
     1560, 1560, 1560, 1560, 1036, 1357, 1358, 1560,  360,  422,

      423,  423,  659, 1067,  423,  361, 1560,  362,  363,  629,
     1359, 1560,  629,  423,  629,  629,  629,  629,  629,  629,
      629,  630,  629,  631,  629,  631,  632,  629,  423, 1067,
     1067,  629,  629,  629,  629,  634,  404,  404,  404,  404,
     1360,  409, 1361,  689,  410,  410,  410,  410, 1362, 1363,
      884,  407,  405,  884,  629,  629,  629,  406,  412,  671,
      405,  672,  672,  672, 1560,  406, 1560, 1560, 1560, 1560,
     1364,  499,  500, 1560,  499, 1365,  404,  404,  404,  404,
     1367,  629,  629,  629,  629,  629,  629,  658,  432,  788,
      658, 1368,  405, 1560, 1560, 1560, 1560,  406,  412,  434,

      435,  645,  490, 1560,  435,  490,  432, 1107, 1369, 1560,
     1560,  432, 1560, 1370, 1560,  435,  491,  859,  409,  435,
      859, 1560,  434,  435,  645, 1371,  788,  435,  435,  432,
     1107, 1372, 1560,  440,  440,  440,  440,  450,  450,  450,
      450, 1373, 1374,  435,  451,  450,  450,  450,  450,  441,
     1375,  435,  451,  788,  442, 1376,  510,  511,  659,  510,
     1560, 1560,  372,  484,  485,  372,  694, 1377,  485, 1560,
     1560, 1560, 1560, 1378,  373,  373, 1560,  374,  375, 1560,
      485,  376,  376,  377,  485, 1379, 1380,  325,  446,  446,
      446,  446,  485, 1381, 1385,  443, 1560, 1560, 1560, 1560,

     1386,  484,  485, 1560,  441, 1389,  485,  325,  485,  442,
     1390, 1391, 1560,  464,  464,  464,  464, 1560, 1392, 1394,
      465,  447,  440,  440,  447,  464,  464,  464,  464, 1395,
      485,  448,  465, 1396,  377,  427,  427,  441,  427,  427,
      427,  690,  442,  427,  427,  705,  427,  427,  427, 1397,
      427,  696,  691,  430,  696, 1398, 1399,  430,  427,  431,
      427,  448,  445,  519,  520,  696,  519, 1400,  696, 1401,
     1560,  446,  446,  446,  446,  448,  524,  525,  443,  524,
      427,  430,  427,  447,  440,  440,  447,  441, 1560, 1560,
     1560, 1560,  442,  448,  884, 1560, 1402,  884, 1403,  441,

      494,  494,  494,  494,  442, 1067, 1404,  427,  427,  427,
      427,  427,  427, 1405,  427,  427,  427,  690, 1406,  427,
      427,  497,  427,  427,  427, 1407,  427,  884,  427,  430,
      884, 1408, 1410,  430,  427,  427,  427, 1411,  447,  440,
      440,  447, 1412,  528,  529,  445,  528, 1413,  448,  453,
      453,  453,  453, 1414,  441, 1415,  427,  430,  427,  442,
      459,  459,  459,  459, 1416,  454, 1000,  456, 1417, 1001,
      455, 1560, 1560, 1560, 1560, 1418,  454, 1419, 1560,  539,
      540,  455,  539,  427,  427,  427,  427, 1560,  453,  453,
      453,  453, 1560, 1420,  459,  459,  459,  459,  965,  554,

      555,  456,  554, 1421,  454,  453,  453,  453,  453,  455,
      454,  494,  494,  494,  494,  455,  560,  561,  495,  560,
      658,  454, 1422,  658,  563,  564,  455,  563, 1423,  496,
      496,  496,  497, 1424,  458,  494,  494,  494,  494, 1427,
      577,  578,  495,  577, 1428, 1560,  502,  502,  502,  502,
     1431, 1432, 1433,  496,  496,  496,  497,  494,  494,  494,
      494, 1434,  503, 1085,  495, 1436, 1085,  504,  458,  565,
      581,  582, 1437,  581, 1438,  708,  708,  708,  497,  508,
      508,  508,  508,  795, 1439, 1440,  505, 1560, 1560, 1560,
     1560,  659, 1441, 1442, 1560,  503,  502,  502,  502,  502,

      504, 1443, 1444, 1560,  513,  513,  513,  513, 1560, 1445,
     1446,  514,  503,  508,  508,  508,  508,  504, 1447, 1448,
      505,  502,  502,  502,  502,  513,  513,  513,  513,  503,
      585,  586,  514,  585,  504, 1449, 1450,  503, 1560, 1560,
     1560, 1560,  504,  588,  589, 1560,  588,  658,  787,  879,
      658,  787,  879,  507, 1451,  788,  805,  805,  805,  805,
      958, 1560, 1452,  958, 1212,  673,  674, 1212,  673, 1453,
      658,  658,  880,  658,  658,  658, 1454, 1455,  658,  806,
      800,  658, 1319,  959,  658, 1319,  676,  507,  629, 1456,
     1457,  629,  788,  629,  629,  629,  629,  629,  629,  629,

      630,  629,  631,  629,  631,  769,  629,  964, 1458, 1459,
      629,  629,  629,  629,  634,  666,  666, 1460,  659,  788,
      666,  797, 1461, 1462,  673,  674,  666,  673,  673,  674,
     1463,  673, 1464,  629,  770,  629,  798,  676,  799,  801,
     1465,  659,  659,  802,  968,  676,  659,  961, 1366,  676,
      961, 1366,  659,  334,  390,  679, 1468, 1469, 1472,  679,
      629,  629,  629,  629,  629,  629,  793,  793, 1473,  793,
      880,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793, 1474,  793,  679,  793,  807,  807,  807,  807,  793,
      793,  793,  793, 1475,  673,  674,  676,  673, 1560,  679,

      676,  390,  391,  679, 1409, 1477,  391, 1409,  806,  801,
     1478,  793,  793,  793, 1479,  676,  422,  688, 1560,  688,
     1480,  688, 1481,  688,  422,  423, 1482,  679, 1382,  423,
      391, 1382,  484,  704, 1483, 1484, 1485,  704,  793,  793,
      791,  793,  793,  793,  432,  688, 1038,  688, 1067, 1038,
      803,  658, 1486,  423,  658,  434,  693, 1487, 1488, 1489,
      693,  704,  432, 1490,  658,  961,  676,  658,  961,  959,
     1492, 1560,  704,  809,  427,  427,  704,  427,  427,  427,
      690, 1493,  427,  427,  693,  427,  427,  427,  880,  427,
     1560,  427,  811,  432, 1494, 1495,  811,  427,  427,  427,

      704, 1560,  693, 1496,  434,  435,  693,  885, 1560,  435,
     1497,  432,  484,  485, 1498,  658, 1499,  485,  658,  427,
      811,  427,  659, 1500,  494,  494,  494,  494, 1501,  888,
      693,  819, 1502,  435,  658,  659, 1038,  658, 1503, 1038,
     1504,  485,  820,  820,  820,  497,  427,  427,  427,  427,
     1505, 1409, 1508,  812, 1409,  822,  822,  822,  822,  959,
      666,  818,  495,  494,  494,  494,  494,  890, 1509, 1512,
      495,  494,  494,  494,  494, 1513,  497, 1491,  495,  666,
     1491,  708,  708,  708,  497,  658,  659, 1514,  658,  708,
      708,  708,  497,  337, 1515,  333, 1517,  333,  870,  891,

      805,  805,  805,  805, 1518,  659, 1519,  334,  793,  793,
     1520,  793, 1521,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  806,  793, 1522,  793, 1523, 1524, 1525,
      666,  793,  793,  793,  793, 1111,  673,  674, 1111,  673,
     1526,  889,  658,  673,  674,  658,  673,  673,  674, 1527,
      673,  800, 1528,  793,  793,  793,  659,  676,  892,  564,
      390,  391,  802, 1529,  676,  391,  422,  423,  676, 1530,
      658,  423,  334,  658,  807,  807,  807,  807, 1531, 1532,
      793,  793,  887,  793,  793,  793,  337,  432,  333,  391,
      333,  870, 1533, 1042, 1534,  423,  893,  806,  434,  435,

      334, 1535,  896,  435,  658,  432,  659,  658,  676, 1536,
     1537,  484,  485,  659,  658,  676,  485,  658, 1538,  676,
      427,  427, 1110,  427,  427,  427,  690,  435,  427,  427,
     1539,  427,  427,  427,  897,  427, 1111,  691,  811, 1111,
      485,  659,  811,  427,  431,  427, 1540,  902, 1541, 1542,
      494,  494,  494,  494, 1175, 1175, 1175,  819,  327,  666,
      966,  658, 1545,  666,  658,  427,  811,  427,  820,  820,
      820,  497,  666,  666,  967,  659,  666,  822,  822,  822,
      822,  390,  391, 1547,  495,  659,  391, 1546,  666, 1552,
     1275, 1549,  427,  427,  427,  427,  427,  427,  497,  427,

      427,  427,  690, 1550,  427,  427,  666,  427,  427,  427,
      391,  427, 1382,  427,  811, 1382,  666,  969,  811,  427,
      427,  427,  666, 1548, 1553, 1046,  494,  494,  494,  494,
      390,  391,  659,  819, 1274,  391,  666,  673,  674, 1551,
      673,  427,  811,  427,  820,  820,  820,  497,  914,  915,
      422,  423,  800,  916, 1273,  423,  917,  918,  676,  391,
      658,  919,  432,  658,  920,  921,  666,  922,  427,  427,
      427,  427,  658,  434,  435,  658,  666,  970,  435,  423,
      432,  484,  485,  659, 1559,  666,  485,  494,  494,  494,
      494, 1556, 1557,  658,  819,  658,  658,  973,  658,  666,

      658, 1170,  435,  658, 1170,  980,  980,  980,  497,  676,
      485,  666, 1554,  422,  423, 1558, 1272,  666,  423, 1271,
      974,  484,  485,  432, 1171, 1041,  485,  658,  979, 1270,
      658,  659, 1269, 1268,  434,  435, 1267, 1043,  666,  435,
      666,  432,  423,  659,  658,  666, 1045,  658, 1111, 1266,
      485, 1111, 1112, 1044, 1265,  390,  391, 1049, 1232,  658,
      391, 1232,  658,  435,  659, 1055,  659,  494,  494,  494,
      494,  659,  666, 1264,  819, 1113,  658, 1263, 1050,  658,
      658, 1171, 1262,  658,  391,  980,  980,  980,  497,  494,
      494,  494,  494,  666,  390,  391,  819, 1178,  659,  391,

      422,  423,  432,  658, 1233,  423,  658,  980,  980,  980,
      497,  484,  485,  434,  435,  659,  485, 1261,  435,  659,
      432,  666, 1174,  391,  658,  666, 1114,  658,  658,  423,
      659,  658, 1117, 1260, 1259,  666,  422,  423, 1177, 1176,
      485,  423,  435, 1123,  432, 1118, 1555,  659,  484,  485,
     1258,  659, 1257,  485,  658,  434,  435,  658,  390,  391,
      435, 1336,  432,  391,  432,  423, 1256,  422,  423,  666,
     1255, 1235,  423,  666,  659,  434,  435,  485, 1181, 1254,
      435, 1253,  432,  658,  435, 1252,  658,  391, 1234, 1236,
     1187, 1232, 1251, 1250, 1232,  659,  423, 1182, 1239,  659,

      484,  485, 1286, 1249,  435,  485, 1240,  658,  390,  391,
      658,  422,  423,  391, 1171, 1248,  423,  484,  485, 1247,
      658,  658,  485,  658,  658,  659, 1246,  432,  666,  485,
     1382, 1245, 1244, 1382, 1243, 1242, 1241,  391,  434,  435,
      423, 1288, 1238,  435, 1237,  432,  485, 1230, 1543,  327,
     1289, 1543,  666, 1292,  659, 1287,  390,  391, 1229, 1298,
      658,  391, 1228,  658, 1227,  666,  666,  435,  422,  423,
      432,  326,  327,  423,  326,  666, 1338, 1226,  659, 1337,
     1293,  434,  435, 1225, 1224,  391,  435, 1223,  432,  484,
      485,  659,  659,  328,  485, 1222, 1339,  423,  390,  391,

     1221,  659, 1220,  391, 1219,  666,  422,  423, 1342, 1218,
      435,  423,  432, 1217,  484,  485, 1544, 1216,  485,  485,
     1383, 1343, 1215,  434,  435, 1214, 1213,  391,  435, 1348,
      432,  659,  755,  658,  658,  423,  658,  658, 1211,  390,
      391,  755, 1384,  485,  391,  755,  755, 1210,  422,  423,
     1387, 1209,  435,  423,  432, 1208, 1207, 1206, 1393,  484,
      485, 1205, 1204, 1203,  485,  434,  435, 1388,  391, 1202,
      435,  658,  432, 1201,  658, 1426, 1200,  423,  666,  666,
     1199,  390,  391, 1466, 1429, 1425,  391, 1198,  485, 1197,
     1196,  422,  423, 1195,  435, 1435,  423,  432,  484,  485,

     1194, 1430, 1193,  485,  659,  659,  390,  391,  434,  435,
      391,  391,  755,  435, 1467,  432,  666,  422,  423, 1192,
      423,  755,  423, 1191, 1470,  755,  755,  485,  484,  485,
     1190, 1476,  432,  485, 1506,  391, 1189,  435, 1188, 1186,
     1185, 1471,  659,  434,  435, 1184,  423, 1183,  435, 1180,
      432, 1543,  327, 1507, 1543,  390,  391,  485,  422,  423,
      391, 1179,  432,  423, 1510,  484,  485, 1173, 1172, 1169,
      485, 1168,  435,  434,  435, 1516, 1167, 1166,  435, 1165,
      432, 1164, 1163, 1162,  391, 1161, 1160,  423,  397, 1159,
     1511,  397,  397,  397,  485, 1158, 1544, 1157,  397, 1156,

      489, 1155,  435,  489,  489,  489, 1154,  665,  493, 1153,
      489,  493,  493,  493, 1152, 1151,  665, 1150,  493,  665,
      665,  665,  659,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  122,  122,  122,  122,  122,  122,  122,

      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,

      184,  184,  184,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  229,  229,  229,  229,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,

      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,

      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  302,  302,  302,  302,  302,  302,  302,

      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  315,  315,

      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  329,  329,
     1149,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,

      329,  329,  329,  332,  516, 1148, 1147,  516,  516,  516,
     1145, 1144,  591, 1143,  516,  591,  591,  591, 1142, 1141,
      332, 1140,  591,  332,  332,  332, 1139, 1138, 1137, 1136,
      332,  333, 1135,  333,  333,  655,  333, 1133,  655,  655,
      655,  333,  333, 1067,  655,  333,  333,  333,  340, 1132,
      340,  340,  340,  340,  789,  340, 1131,  789,  789,  789,
      340,  340,  340, 1130,  340,  340,  340,  357,  357,  357,
      357, 1129, 1128, 1127,  796, 1126,  357,  796,  796,  796,
     1125,  357,  357, 1124,  357,  357,  357, 1122,  357,  357,
      357,  357, 1121,  357,  357,  364, 1120,  364,  364,  789,

      364, 1119,  789,  789,  789,  364,  364, 1116, 1115,  364,
      364,  364,  366,  366,  366,  366, 1109, 1108,  959,  796,
      796,  366,  796,  796,  796, 1106,  366,  366, 1105,  366,
      366,  366, 1104,  366,  366,  366,  366, 1103,  366,  366,
      387,  387, 1102,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  389,  796, 1101,  389,  796,
      796,  796,  389, 1100,  389,  389,  389,  389,  389, 1099,
     1098, 1097,  389,  389,  389, 1096,  389,  389,  389, 1095,

     1094, 1093, 1092,  389,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  399,
     1091,  399,  399, 1090, 1089, 1088, 1087,  399, 1086, 1084,
      399,  399,  399, 1083, 1080, 1079, 1078,  399,  408,  408,
      408,  408,  596, 1077,  408,  596,  596,  596, 1076, 1075,
     1074, 1073,  596,  408, 1072, 1071,  408, 1067, 1070, 1069,
     1068,  408, 1065, 1064,  408,  408,  408, 1063, 1062, 1061,
      408,  408,  411,  411,  411,  411,  332, 1060, 1059,  332,

      332,  332, 1058, 1057, 1056, 1054,  332,  411, 1053,  411,
      411,  411, 1052, 1051, 1048,  411, 1047, 1040,  411,  411,
      411, 1039,  880, 1035, 1034,  411,  418,  418,  418,  418,
      706, 1033,  418,  706,  706,  706,  768, 1032,  397, 1031,
      706,  397,  397,  397, 1030, 1029, 1028, 1027,  397,  418,
     1026, 1025,  418,  418,  418, 1024, 1023, 1022, 1021,  418,
      419,  419, 1020,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  421, 1019, 1016,  421, 1015,

     1014, 1011,  421, 1010,  421,  421,  421,  421,  421, 1009,
     1008, 1006,  421,  421,  421, 1005,  421,  421,  421, 1004,
     1003, 1002,  999,  421,  429,  429,  998,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  433,
      433,  995,  994,  433,  993,  992,  991,  433,  990,  433,
      433,  433,  433,  433,  989,  433,  988,  433,  433,  433,
      987,  433,  433,  433,  665,  986,  985,  984,  433,  444,
      444,  444,  444,  665,  983,  444,  665,  665,  665,  982,

      978,  977,  976,  975,  444,  972,  971,  444,  965,  963,
      962,  955,  444,  954,  953,  444,  444,  444,  952,  768,
      950,  444,  444,  449,  449,  449,  449,  949,  948,  947,
      614,  945,  449,  944,  943,  942,  941,  940,  449,  939,
      449,  449,  938,  937,  936,  935,  449,  934,  933,  449,
      449,  449,  932,  931,  930,  929,  449,  452,  452,  452,
      452,  714,  928,  452,  714,  714,  714,  927,  926,  721,
      925,  714,  721,  721,  721,  924,  923,  913,  912,  721,
      452,  911,  910,  452,  452,  452,  909,  908,  907,  906,
      452,  457,  457,  457,  457,  591,  517,  457,  591,  591,

      591,  905,  904,  901,  900,  591,  457,  899,  898,  457,
      895,  894,  666,  886,  457,  791,  883,  457,  457,  457,
      882,  648,  875,  457,  457,  460,  460,  460,  460,  596,
      874,  872,  596,  596,  596,  868,  867,  866,  865,  596,
      460,  864,  460,  460,  614,  861,  860,  753,  460,  858,
      857,  460,  460,  460,  856,  855,  854,  853,  460,  466,
      466,  466,  466,  903,  852,  466,  903,  903,  903,  851,
      850,  849,  848,  903,  845,  844,  843,  841,  840,  839,
      838,  837,  466,  836,  835,  466,  466,  466,  834,  833,
      832,  830,  466,  467,  829,  828,  467,  827,  826,  517,

      824,  823,  467,  817,  816,  467,  467,  467,  815,  814,
      813,  412,  467,  471,  471,  808,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  476,  476,
      804,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  481,  481,  791,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  483,  786,
      785,  483,  784,  775,  774,  483,  772,  483,  483,  483,
      483,  483,  771, 1560,  334,  483,  483,  483,  334,  483,
      483,  483,  334,  768,  625,  766,  483,  492,  765,  764,
      492,  763,  762,  761,  614,  756,  754,  751,  748,  747,
      492,  597,  746,  745,  492,  592,  744,  743,  742,  741,
      492,  740,  736,  492,  492,  492,  735,  734,  732,  729,
      492,  498,  498,  498,  498,  566,  728,  498,  727,  726,
      725,  724,  547,  547,  723,  722,  720,  541,  498,  498,

      536,  719,  718,  717,  498,  716,  523,  498,  498,  498,
      715,  517,  713,  517,  498,  506,  506,  506,  506,  711,
      503,  506,  710,  707,  482,  702,  477,  701,  472,  700,
      506,  698,  454,  506,  441,  690,  690,  690,  506,  420,
      412,  506,  506,  506,  685,  405,  682,  506,  506,  509,
      509,  509,  509,  398,  681,  396,  388,  371,  664,  660,
      654,  653,  652,  334,  509,  334,  509,  509,  625,  330,
      623,  621,  509,  620,  617,  509,  509,  509,  615,  614,
      610,  608,  509,  515,  515,  515,  515,  607,  605,  515,
      603,  602,  600,  595,  566,  552,  551,  550,  548,  547,

      543,  536,  532,  523,  517,  503,  515,  482,  477,  515,
      515,  515,  472,  454,  441,  420,  515,  518,  420,  518,
      405,  396,  388,  371,  334,  518,  331,  330,  518,  518,
      518, 1560,  123,  123, 1560,  518,  522,  522, 1560,  522,
     1560, 1560, 1560, 1560, 1560,  522, 1560, 1560,  522,  522,
      522, 1560, 1560, 1560, 1560,  522,  527,  527, 1560,  527,
      527,  527,  527,  527,  527,  527,  527,  527, 1560,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  531, 1560, 1560,  531, 1560, 1560, 1560, 1560, 1560,

      531, 1560, 1560,  531,  531,  531, 1560, 1560, 1560, 1560,
      531,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533, 1560,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  535,  535, 1560,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535, 1560,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  542, 1560, 1560,  542, 1560, 1560, 1560, 1560, 1560,
      542, 1560, 1560,  542,  542,  542, 1560, 1560, 1560, 1560,

      542,  546,  546, 1560,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  549,  549, 1560,  549,
     1560,  549,  549,  549,  549,  549,  549,  549, 1560,  549,
      549,  549,  549, 1560,  549,  549,  549,  549,  549, 1560,
      549, 1560,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  559, 1560, 1560,  559, 1560, 1560, 1560, 1560, 1560,
      559, 1560, 1560, 1560, 1560,  559,  559, 1560,  559, 1560,
     1560, 1560, 1560, 1560,  559, 1560, 1560,  559,  559,  559,

      567,  567, 1560,  567, 1560,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567, 1560,  567, 1560,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  571,  571, 1560,  571, 1560,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571, 1560,  571,
     1560,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      580, 1560, 1560,  580, 1560, 1560, 1560, 1560, 1560,  580,
     1560, 1560,  580,  580,  580, 1560, 1560, 1560, 1560,  580,
      584,  584, 1560,  584,  584,  584,  584,  584,  584,  584,

     1560, 1560,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584, 1560,  584, 1560,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  593, 1560,  593,  593, 1560,
     1560, 1560, 1560,  593, 1560, 1560,  593,  593,  593, 1560,
     1560, 1560, 1560,  593,  598, 1560,  598,  598, 1560, 1560,
     1560, 1560,  598, 1560, 1560,  598,  598,  598, 1560, 1560,
     1560, 1560,  598,  601,  601, 1560,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601, 1560,  601, 1560,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  604, 1560,

     1560,  604, 1560, 1560, 1560, 1560, 1560,  604, 1560, 1560,
      604,  604,  604, 1560, 1560, 1560, 1560,  604,  606,  606,
     1560,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606, 1560,  606,  606,  606,  606,  606,  606,
      606,  606,  606, 1560,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  609,  609, 1560,  609,  609,  609,  609,
      609,  609,  609,  609,  609, 1560,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609, 1560,  609, 1560,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  612, 1560,
     1560,  612, 1560, 1560, 1560,  612, 1560,  612, 1560, 1560,

      612,  612,  612, 1560, 1560, 1560, 1560,  612,  613, 1560,
      613,  613,  613,  613,  613, 1560, 1560,  613, 1560,  613,
     1560, 1560,  613,  613,  613, 1560, 1560, 1560, 1560,  613,
      616,  616, 1560,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616, 1560,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618, 1560, 1560,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,

      619,  619, 1560,  619,  619,  619,  619,  619,  619, 1560,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
     1560, 1560,  619,  619,  619, 1560, 1560,  619,  619,  619,
      619,  619,  619,  619,  619,  357,  357,  357,  357, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,  357,
      357, 1560,  357,  357,  357, 1560,  357,  357,  357,  357,
     1560,  357,  357,  329,  329, 1560,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  624,  624,

     1560, 1560, 1560, 1560,  624, 1560, 1560,  624,  624,  624,
     1560, 1560, 1560, 1560,  624,  333, 1560,  333,  333, 1560,
      333, 1560, 1560, 1560, 1560,  333,  333, 1560, 1560,  333,
      333,  333,  626, 1560, 1560,  626, 1560, 1560, 1560, 1560,
     1560,  626, 1560, 1560,  626,  626,  626,  633, 1560, 1560,
      633, 1560,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  364, 1560,  364,  364, 1560,  364, 1560, 1560,
     1560, 1560,  364,  364, 1560, 1560,  364,  364,  364,  366,

     1560, 1560,  366, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560,  366,  366, 1560,  366,  366,  366,  366,  387,
      387, 1560,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  389, 1560, 1560,  389, 1560, 1560,
     1560,  389, 1560,  389,  389,  389,  389,  389, 1560, 1560,
     1560,  389,  389,  389, 1560,  389,  389,  389, 1560, 1560,
     1560, 1560,  389,  678, 1560, 1560,  678, 1560, 1560, 1560,

      678, 1560,  678, 1560,  678,  678,  678, 1560, 1560, 1560,
      678,  678,  678, 1560,  678,  678,  678, 1560, 1560, 1560,
     1560,  678,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  399, 1560,  399,
      399, 1560, 1560, 1560, 1560,  399, 1560, 1560,  399,  399,
      399, 1560, 1560, 1560, 1560,  399,  397, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560,  397, 1560, 1560,  397,  397,  397, 1560,

     1560, 1560, 1560,  397,  408,  408,  408,  408, 1560, 1560,
      408, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,  408,
     1560, 1560,  408, 1560, 1560, 1560, 1560,  408, 1560, 1560,
      408,  408,  408, 1560, 1560, 1560,  408,  408,  411,  411,
      411,  411, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560,  411, 1560,  411,  411,  411, 1560, 1560,
     1560,  411, 1560, 1560,  411,  411,  411, 1560, 1560, 1560,
     1560,  411,  418,  418,  418,  418, 1560, 1560,  418, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560,  418, 1560, 1560,  418,  418,

      418, 1560, 1560, 1560, 1560,  418,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683, 1560,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  686, 1560,  686, 1560, 1560, 1560,  686, 1560, 1560,
      686,  686,  686, 1560, 1560, 1560, 1560,  686,  419,  419,
     1560,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  421, 1560, 1560,  421, 1560, 1560, 1560,

      421, 1560,  421,  421,  421,  421,  421, 1560, 1560, 1560,
      421,  421,  421, 1560,  421,  421,  421, 1560, 1560, 1560,
     1560,  421,  687, 1560, 1560,  687, 1560, 1560, 1560,  687,
     1560,  687, 1560,  687,  687,  687, 1560, 1560, 1560,  687,
      687,  687, 1560,  687,  687,  687, 1560, 1560, 1560, 1560,
      687,  427,  427, 1560,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  429,  429, 1560,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,

      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  433,  433, 1560, 1560,  433, 1560, 1560, 1560,  433,
     1560,  433,  433,  433,  433,  433, 1560,  433, 1560,  433,
      433,  433, 1560,  433,  433,  433, 1560, 1560, 1560, 1560,
      433,  692, 1560, 1560,  692, 1560, 1560, 1560,  692, 1560,
      692, 1560,  692,  692,  692, 1560, 1560, 1560,  692,  692,
      692, 1560,  692,  692,  692, 1560, 1560, 1560, 1560,  692,
      444,  444,  444,  444, 1560, 1560,  444, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560,  444, 1560, 1560,  444, 1560,

     1560, 1560, 1560,  444, 1560, 1560,  444,  444,  444, 1560,
     1560, 1560,  444,  444,  449,  449,  449,  449, 1560, 1560,
     1560, 1560, 1560,  449, 1560, 1560, 1560, 1560, 1560,  449,
     1560,  449,  449, 1560, 1560, 1560, 1560,  449, 1560, 1560,
      449,  449,  449, 1560, 1560, 1560, 1560,  449,  452,  452,
      452,  452, 1560, 1560,  452, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560,  452, 1560, 1560,  452,  452,  452, 1560, 1560, 1560,
     1560,  452,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695, 1560,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  697, 1560, 1560,
      697, 1560, 1560, 1560, 1560, 1560,  697, 1560, 1560, 1560,
     1560, 1560, 1560, 1560,  697, 1560, 1560, 1560, 1560, 1560,
      697, 1560, 1560,  697,  697,  697, 1560, 1560, 1560, 1560,
      697,  457,  457,  457,  457, 1560, 1560,  457, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560,  457, 1560, 1560,  457,
     1560, 1560, 1560, 1560,  457, 1560, 1560,  457,  457,  457,
     1560, 1560, 1560,  457,  457,  460,  460,  460,  460, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

      460, 1560,  460,  460, 1560, 1560, 1560, 1560,  460, 1560,
     1560,  460,  460,  460, 1560, 1560, 1560, 1560,  460,  466,
      466,  466,  466, 1560, 1560,  466, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560,  466, 1560, 1560,  466,  466,  466, 1560, 1560,
     1560, 1560,  466,  699, 1560, 1560, 1560, 1560, 1560,  699,
     1560, 1560,  699,  699,  699, 1560, 1560, 1560, 1560,  699,
      467, 1560, 1560,  467, 1560, 1560, 1560, 1560, 1560,  467,
     1560, 1560,  467,  467,  467, 1560, 1560, 1560, 1560,  467,
      471,  471, 1560,  471,  471,  471,  471,  471,  471,  471,

      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  476,  476, 1560,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      481,  481, 1560,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  483, 1560, 1560,  483, 1560,

     1560, 1560,  483, 1560,  483,  483,  483,  483,  483, 1560,
     1560, 1560,  483,  483,  483, 1560,  483,  483,  483, 1560,
     1560, 1560, 1560,  483,  703, 1560, 1560,  703, 1560, 1560,
     1560,  703, 1560,  703, 1560,  703,  703,  703, 1560, 1560,
     1560,  703,  703,  703, 1560,  703,  703,  703, 1560, 1560,
     1560, 1560,  703,  492, 1560, 1560,  492, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560,  492, 1560, 1560, 1560,
      492, 1560, 1560, 1560, 1560, 1560,  492, 1560, 1560,  492,
      492,  492, 1560, 1560, 1560, 1560,  492,  498,  498,  498,
      498, 1560, 1560,  498, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560,  498,  498, 1560, 1560, 1560, 1560,
      498, 1560, 1560,  498,  498,  498, 1560, 1560, 1560, 1560,
      498,  709,  709,  709,  709, 1560, 1560,  709, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,  709,  709,
     1560, 1560, 1560, 1560,  709, 1560, 1560,  709,  709,  709,
     1560, 1560, 1560, 1560,  709,  506,  506,  506,  506, 1560,
     1560,  506, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
      506, 1560, 1560,  506, 1560, 1560, 1560, 1560,  506, 1560,
     1560,  506,  506,  506, 1560, 1560, 1560,  506,  506,  509,
      509,  509,  509, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560,  509, 1560,  509,  509, 1560, 1560,
     1560, 1560,  509, 1560, 1560,  509,  509,  509, 1560, 1560,
     1560, 1560,  509,  515,  515,  515,  515, 1560, 1560,  515,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560,  515, 1560, 1560,  515,
      515,  515, 1560, 1560, 1560, 1560,  515,  712, 1560, 1560,
     1560, 1560, 1560,  712, 1560, 1560,  712,  712,  712, 1560,
     1560, 1560, 1560,  712,  518, 1560,  518, 1560, 1560, 1560,
     1560, 1560,  518, 1560, 1560,  518,  518,  518, 1560, 1560,
     1560, 1560,  518,  714, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
      714, 1560, 1560,  714,  714,  714, 1560, 1560, 1560, 1560,
      714,  522,  522, 1560,  522, 1560, 1560, 1560, 1560, 1560,
      522, 1560, 1560,  522,  522,  522, 1560, 1560, 1560, 1560,
      522,  527,  527, 1560,  527,  527,  527,  527,  527,  527,
      527,  527,  527, 1560,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  531, 1560, 1560,  531,
     1560, 1560, 1560, 1560, 1560,  531, 1560, 1560,  531,  531,
      531, 1560, 1560, 1560, 1560,  531,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533, 1560,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  535,  535, 1560,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535, 1560,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  721, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560,  721, 1560, 1560,  721,  721,  721, 1560,
     1560, 1560, 1560,  721,  542, 1560, 1560,  542, 1560, 1560,

     1560, 1560, 1560,  542, 1560, 1560,  542,  542,  542, 1560,
     1560, 1560, 1560,  542,  546,  546, 1560,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  549,
      549, 1560,  549, 1560,  549,  549,  549,  549,  549,  549,
      549, 1560,  549,  549,  549,  549, 1560,  549,  549,  549,
      549,  549, 1560,  549, 1560,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  559, 1560, 1560,  559, 1560, 1560,
     1560, 1560, 1560,  559, 1560, 1560, 1560, 1560,  559,  559,

     1560,  559, 1560, 1560, 1560, 1560, 1560,  559, 1560, 1560,
      559,  559,  559,  567,  567, 1560,  567, 1560,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567, 1560,  567, 1560,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  571,  571,
     1560,  571, 1560,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571, 1560,  571, 1560,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  580, 1560, 1560,  580, 1560, 1560, 1560,
     1560, 1560,  580, 1560, 1560,  580,  580,  580, 1560, 1560,

     1560, 1560,  580,  584,  584, 1560,  584,  584,  584,  584,
      584,  584,  584, 1560, 1560,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584, 1560,  584, 1560,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  593, 1560,
      593,  593, 1560, 1560, 1560, 1560,  593, 1560, 1560,  593,
      593,  593, 1560, 1560, 1560, 1560,  593,  591, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560,  591, 1560, 1560,  591,  591,  591,
     1560, 1560, 1560, 1560,  591,  598, 1560,  598,  598, 1560,
     1560, 1560, 1560,  598, 1560, 1560,  598,  598,  598, 1560,

     1560, 1560, 1560,  598,  596, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560,  596, 1560, 1560,  596,  596,  596, 1560, 1560, 1560,
     1560,  596,  601,  601, 1560,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601, 1560,  601, 1560,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  604, 1560, 1560,
      604, 1560, 1560, 1560, 1560, 1560,  604, 1560, 1560,  604,
      604,  604, 1560, 1560, 1560, 1560,  604,  606,  606, 1560,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,

      606,  606, 1560,  606,  606,  606,  606,  606,  606,  606,
      606,  606, 1560,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  609,  609, 1560,  609,  609,  609,  609,  609,
      609,  609,  609,  609, 1560,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609, 1560,  609, 1560,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  758, 1560, 1560,
     1560, 1560, 1560, 1560, 1560,  758, 1560,  758,  758,  758,
      758,  758, 1560, 1560,  758, 1560,  758, 1560, 1560,  758,
      758,  758, 1560, 1560, 1560, 1560,  758,  613, 1560,  613,
      613,  613,  613,  613, 1560, 1560,  613, 1560,  613, 1560,

     1560,  613,  613,  613, 1560, 1560, 1560, 1560,  613,  760,
     1560, 1560,  760, 1560, 1560, 1560,  760, 1560,  760, 1560,
     1560,  760,  760,  760, 1560, 1560, 1560, 1560,  760,  616,
      616, 1560,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616, 1560,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618, 1560, 1560,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  619,

      619, 1560,  619,  619,  619,  619,  619,  619, 1560,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619, 1560,
     1560,  619,  619,  619, 1560, 1560,  619,  619,  619,  619,
      619,  619,  619,  619,  624,  624, 1560, 1560, 1560, 1560,
      624, 1560, 1560,  624,  624,  624, 1560, 1560, 1560, 1560,
      624,  767,  767, 1560,  767,  767,  767,  767, 1560,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  626,  626, 1560,  626,
     1560, 1560, 1560, 1560, 1560,  626, 1560, 1560,  626,  626,

      626,  333, 1560,  333,  333, 1560,  333, 1560, 1560, 1560,
     1560,  333,  333, 1560, 1560,  333,  333,  333,  633, 1560,
     1560,  633, 1560,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  779,  779, 1560,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  655, 1560,
     1560,  655, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560,  655, 1560, 1560,  655,  655,  655,  790, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560,  790, 1560,  790,
     1560,  790,  790, 1560, 1560, 1560, 1560,  790, 1560, 1560,
      790,  790,  790, 1560, 1560,  790,  357, 1560, 1560,  357,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,  357,
     1560, 1560,  357,  357,  357,  357,  794,  794, 1560,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,

      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  366, 1560, 1560,  366, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560,  366,  366, 1560,  366,  366,  366,
      366,  678, 1560, 1560,  678, 1560, 1560, 1560,  678, 1560,
      678,  678,  678,  678,  678, 1560, 1560, 1560,  678,  678,
      678, 1560,  678,  678,  678, 1560, 1560, 1560, 1560,  678,
      389, 1560, 1560,  389, 1560, 1560, 1560,  389, 1560,  389,
      389,  389,  389,  389, 1560, 1560, 1560,  389,  389,  389,
     1560,  389,  389,  389, 1560, 1560, 1560, 1560,  389,  683,

      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  686, 1560,  686, 1560, 1560, 1560,
      686, 1560, 1560,  686,  686,  686, 1560, 1560, 1560, 1560,
      686,  687, 1560, 1560,  687, 1560, 1560, 1560,  687, 1560,
      687,  687,  687,  687,  687, 1560, 1560, 1560,  687,  687,
      687, 1560,  687,  687,  687, 1560, 1560, 1560, 1560,  687,
      421, 1560, 1560,  421, 1560, 1560, 1560,  421, 1560,  421,
      421,  421,  421,  421, 1560, 1560, 1560,  421,  421,  421,

     1560,  421,  421,  421, 1560, 1560, 1560, 1560,  421,  810,
      810, 1560,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  692,  692, 1560, 1560,  692, 1560,
     1560, 1560,  692, 1560,  692,  692,  692,  692,  692, 1560,
      692, 1560,  692,  692,  692, 1560,  692,  692,  692, 1560,
     1560, 1560, 1560,  692,  433,  433, 1560, 1560,  433, 1560,
     1560, 1560,  433, 1560,  433,  433,  433,  433,  433, 1560,
      433, 1560,  433,  433,  433, 1560,  433,  433,  433, 1560,

     1560, 1560, 1560,  433,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  697,
     1560, 1560,  697, 1560, 1560, 1560, 1560, 1560,  697, 1560,
     1560, 1560, 1560, 1560, 1560, 1560,  697, 1560, 1560, 1560,
     1560, 1560,  697, 1560, 1560,  697,  697,  697, 1560, 1560,
     1560, 1560,  697,  699, 1560, 1560, 1560, 1560, 1560,  699,
     1560, 1560,  699,  699,  699, 1560, 1560, 1560, 1560,  699,
      703, 1560, 1560,  703, 1560, 1560, 1560,  703, 1560,  703,

      703,  703,  703,  703, 1560, 1560, 1560,  703,  703,  703,
     1560,  703,  703,  703, 1560, 1560, 1560, 1560,  703,  483,
     1560, 1560,  483, 1560, 1560, 1560,  483, 1560,  483,  483,
      483,  483,  483, 1560, 1560, 1560,  483,  483,  483, 1560,
      483,  483,  483, 1560, 1560, 1560, 1560,  483,  821,  821,
      821,  821, 1560, 1560,  821, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560,  821,  821, 1560, 1560, 1560,
     1560,  821, 1560, 1560,  821,  821,  821, 1560, 1560, 1560,
     1560,  821,  706,  706,  706,  706, 1560, 1560,  706, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

      706, 1560, 1560, 1560, 1560,  706, 1560, 1560,  706,  706,
      706, 1560, 1560, 1560, 1560,  706,  709,  709,  709,  709,
     1560, 1560,  709, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560,  709,  709, 1560, 1560, 1560, 1560,  709,
     1560, 1560,  709,  709,  709, 1560, 1560, 1560, 1560,  709,
      712, 1560, 1560, 1560, 1560, 1560,  712, 1560, 1560,  712,
      712,  712, 1560, 1560, 1560, 1560,  712,  825, 1560,  825,
     1560, 1560, 1560, 1560, 1560,  825, 1560, 1560,  825,  825,
      825, 1560, 1560, 1560, 1560,  825,  527,  527, 1560,  527,
      527,  527,  527,  527,  527,  527,  527,  527, 1560,  527,

      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  831, 1560, 1560, 1560, 1560, 1560,  831, 1560, 1560,
      831,  831,  831, 1560, 1560, 1560, 1560,  831,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842, 1560,  842,  842,  842,
      842,  842, 1560,  842,  842, 1560, 1560,  842,  842,  842,
      842,  842,  842,  758, 1560, 1560, 1560, 1560, 1560, 1560,
     1560,  758, 1560,  758,  758,  758,  758,  758, 1560, 1560,
      758, 1560,  758, 1560, 1560,  758,  758,  758, 1560, 1560,

     1560, 1560,  758,  862, 1560, 1560,  862, 1560, 1560, 1560,
      862, 1560,  862, 1560, 1560,  862,  862,  862, 1560, 1560,
     1560, 1560,  862,  863, 1560,  863,  863,  863,  863,  863,
     1560, 1560,  863, 1560,  863, 1560, 1560,  863,  863,  863,
     1560, 1560, 1560, 1560,  863,  767,  767, 1560,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      869, 1560, 1560,  869, 1560, 1560, 1560, 1560, 1560,  869,
     1560, 1560,  869,  869,  869,  340, 1560,  340, 1560,  340,

      340, 1560,  340, 1560, 1560, 1560, 1560,  340,  340, 1560,
     1560,  340,  340,  340,  779,  779, 1560,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  790,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,  790,
     1560,  790, 1560,  790,  790, 1560, 1560, 1560, 1560,  790,
     1560, 1560,  790,  790,  790, 1560, 1560,  790,  357, 1560,
     1560,  357, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560,  357, 1560, 1560,  357,  357,  357,  357,  793,  793,
     1560,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  794,  794, 1560,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  366, 1560,
     1560,  366, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560,  366,  366, 1560,  366,  366,  366,  366,  333,  333,
     1560,  333, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
      333, 1560,  333,  333, 1560,  333,  333, 1560, 1560, 1560,
      333,  333, 1560, 1560,  333,  333,  333, 1560,  333,  389,
     1560, 1560,  389, 1560, 1560, 1560,  389, 1560,  389,  389,
      389,  389,  389, 1560, 1560, 1560,  389,  389,  389, 1560,
      389,  389,  389, 1560, 1560, 1560, 1560,  389,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,

      683,  683,  683,  421, 1560, 1560,  421, 1560, 1560, 1560,
      421, 1560,  421,  421,  421,  421,  421, 1560, 1560, 1560,
      421,  421,  421, 1560,  421,  421,  421, 1560, 1560, 1560,
     1560,  421,  810,  810, 1560,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  433,  433, 1560,
     1560,  433, 1560, 1560, 1560,  433, 1560,  433,  433,  433,
      433,  433, 1560,  433, 1560,  433,  433,  433, 1560,  433,
      433,  433, 1560, 1560, 1560, 1560,  433,  483, 1560, 1560,

      483, 1560, 1560, 1560,  483, 1560,  483,  483,  483,  483,
      483, 1560, 1560, 1560,  483,  483,  483, 1560,  483,  483,
      483, 1560, 1560, 1560, 1560,  483,  821,  821,  821,  821,
     1560, 1560,  821, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560,  821,  821, 1560, 1560, 1560, 1560,  821,
     1560, 1560,  821,  821,  821, 1560, 1560, 1560, 1560,  821,
      706,  706,  706,  706, 1560, 1560,  706, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,  706, 1560,
     1560, 1560, 1560,  706, 1560, 1560,  706,  706,  706, 1560,
     1560, 1560, 1560,  706,  825, 1560,  825, 1560, 1560, 1560,

     1560, 1560,  825, 1560, 1560,  825,  825,  825, 1560, 1560,
     1560, 1560,  825,  527,  527, 1560,  527,  527,  527,  527,
      527,  527,  527,  527,  527, 1560,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  831, 1560,
     1560, 1560, 1560, 1560,  831, 1560, 1560,  831,  831,  831,
     1560, 1560, 1560, 1560,  831,  946, 1560, 1560, 1560, 1560,
     1560, 1560, 1560,  946, 1560,  946,  946,  946,  946,  946,
     1560, 1560,  946, 1560,  946, 1560, 1560,  946,  946,  946,
     1560, 1560, 1560, 1560,  946,  863, 1560,  863,  863,  863,

      863,  863, 1560, 1560,  863, 1560,  863, 1560, 1560,  863,
      863,  863, 1560, 1560, 1560, 1560,  863,  951,  951, 1560,
      951, 1560, 1560, 1560, 1560, 1560,  951, 1560, 1560,  951,
      951,  951,  340, 1560,  340, 1560,  340,  340, 1560,  340,
     1560, 1560, 1560, 1560,  340,  340, 1560, 1560,  340,  340,
      340,  960,  960, 1560,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  981,  981,  981,  981,
     1560, 1560,  981, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560,  981,  981, 1560, 1560, 1560, 1560,  981,
     1560, 1560,  981,  981,  981, 1560, 1560, 1560, 1560,  981,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1560, 1007,
     1007, 1007, 1007, 1007, 1560, 1007, 1007, 1560, 1007, 1560,
     1007, 1007, 1007, 1007, 1007, 1037, 1037, 1560, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,

     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1560, 1081,
     1081, 1081, 1081, 1081, 1560, 1081, 1081, 1560, 1560, 1560,
     1081, 1081, 1081, 1081, 1081, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1560, 1082, 1082, 1082, 1082, 1082, 1560,
     1082, 1082, 1560, 1560, 1560, 1082, 1082, 1082, 1082, 1082,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1560, 1134,
     1134, 1134, 1134, 1134, 1560, 1134, 1134, 1560, 1560, 1560,
     1134, 1134, 1134, 1134, 1134, 1146, 1146, 1146, 1146, 1146,

     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1560, 1146, 1146, 1146, 1146, 1146, 1560,
     1146, 1146, 1560, 1560, 1560, 1146, 1146, 1146, 1146, 1146,
     1231, 1231, 1560, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231,   93, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560
    } ;

static yyconst flex_int16_t yy_chk[11645] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    4,   25,
       26,    4,   27,   25,   26,   28,   27,   53,  356,   28,
        4,    4,   41,    4,    4,   42,   45,    4,    4,    4,

       54,   46,  110,   41,   63,  110,   42,   45,  111,  356,
      127,  111,   46,   49,   49,  127,   49,   59,   49,   59,
       45,   64, 1219,   25,   26,   46,   27,   50,   50,   28,
       50,   53,   50,  111, 1220, 1221,   41,   69,   70,   42,
       45,   59,   87,   75,   54,   46,   57,   57,   63,   57,
        4,    5,    5,    5,    5,    5,    5,    5,   49,    5,
        5,   59,    5,    5,    5,   64,    5,   75,    5,    5,
      575,  935,   50,    5,    5,    5,    5,   51,   52,   51,
       52,   69,   70,  350,  575,  935,   87,   75,   51,   52,
       60,   57,   60,   51,   52,  283,    5,    5,    5,   89,

      283,   51,   52,   58,   58,  350,   58,  230,   89,   89,
      230, 1222,  230,   61,   60,   61,   88,   62,  568,   62,
      568,   51,   52,    5,    5,    5,    5,    6,    6,    6,
        6,    6,    6,    6,   60,    6,    6,   61,    6,    6,
        6,   62,    6,   76,    6,    6,   67,   77,   58,    6,
        6,    6,    6,   68,   78,   67,   67,   61,  570,   90,
       88,   62,   68,   68,  342,  570,  101,   76,   90,   90,
       67,   77,    6,    6,    6,  101,  240,   68,   78,  114,
      240,  114,  114,  114,  336,  101,  245,   76,  114,  245,
       67,   77,  335,  342,  336,  335,  245,   68,   78,    6,

        6,    6,    6,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   13,
       13,   13,   13,   13,   13,   13,   81,   13,   13, 1223,
       13,   13,   13,   82,   13,   83,   13,   13,   84, 1224,
       81,   13,   13,   13,   13,  288,   83,   82,  257,   84,
      288,  248,  257,  102,  248,  102,  102,  102,  102,   83,

       96,  248,   84,   96,   13,   13,   13,  102, 1225,  576,
       81,  306,  190,  119,  119,  190,  576,   82,  119,   83,
       97,   97,   84,   97,  258,   96,  190,  102,  258,  306,
      607,   13,   13,   13,   13,   14,   14,   14,   14,   14,
       14,   14,  119,   14,   14,   96,   14,   14,   14,  607,
       14,  262,   14,   14,   91,  262,   92,   14,   14,   14,
       14,  262,   91,  262,   92,   97,  120,  120,  359,  128,
      128,  120,  128, 1226, 1227,   91,   91,   92,   92,  347,
       14,   14,   14,  221,  105,  341,  105,  105,  341,  105,
      105,  105,  141,  141,  221,  120,  105,  141,   91,   91,

       92,   92,  347,  136,  136,  359,  136,   14,   14,   14,
       14,   15,   15,   15,   15,   15,   15,   15,  105,   15,
       15,  141,   15,   15,   15,  128,   15,  221,   15,   15,
     1228,  348,  359,   15,   15,   15,   15,  107,  351,  107,
      107,  397,  107,  107,  107,  112,  397,  115,  112,  107,
      115,  112,  167,  167,  348,  167,   15,   15,   15,  136,
      112,  351,  115, 1231,  373, 1237,  112,  373,  115,  612,
      112,  107,  137,  137,  137,  137,  399,  142,  142,  137,
      612,  399,  142,   15,   15,   15,   15,   16,   16,   16,
       16,   16,   16,   16,  378,   16,   16,  378,   16,   16,

       16, 1238,   16, 1241,   16,   16,  142,  428,  167,   16,
       16,   16,   16,  113,  113,  383,  113,  112,  383,  115,
      130,  130,  130,  130,  113,  428,  113,  113,  113,  113,
      591,  343,   16,   16,   16,  591,  130,  758,  113,  931,
      383,  130,  159,  159,  159,  159,  931, 1242,  758,  159,
      168,  168,  168,  168,  343,  343,  343,  168,  113,   16,
       16,   16,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   29,   29,   29,

       29,   29,   29,   29, 1243,   29,   29,  390,   29,   29,
       29,  390,   29,  346,   29,   29, 1244, 1246,  593,   29,
       29,   29,   29,  593,  131,  131,  131,  131,  345,  345,
      132,  132,  132,  132,  346,  390,  533,  132,  121,  121,
      131,  121,   29,   29,   29,  131,  132,  533, 1247,  148,
      345,  132,  345,  544,  121,  121,  544,  346,  544,  121,
      148,  148, 1248,  184,  184,  148,  603,  148,  184,   29,
       29,   29,   29,   30,   30,   30,   30,   30,   30,   30,
      533,   30,   30,  121,   30,   30,   30, 1249,   30,  148,
       30,   30,  184,  603,  121,   30,   30,   30,   30,  149,

      135,  135,  135,  135,  132,  638,  641,  185,  185,  422,
      149,  149,  185,  422, 1250,  149,  135,  149,   30,   30,
       30,  135,  135,  194,  194,  194,  194, 1251,  638,  641,
      194,  204,  204,  204,  204,  596,  185,  422,  204,  149,
      596,  194,  194,  194,  194,   30,   30,   30,   30,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  434,  263,   55,  690,  434,  263,   55,   55,   55,
       55,   55,  263,  452,  263, 1252,  452,  133,  133,  133,
      133,  993,  690,  452,  133,  153,  153,  153,  153,  434,
       55,   55,   55,  133,  144,  144,  993,  144,  133,  172,
      172,  153,  172,  598,  375,  375,  153,  375,  598,  627,
      144,  144,  627,  381,  381,  144,  381,   55,   55,   55,
       55,   55,   55,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,  144,
     1253,   56,  150,  642, 1254,   56,   56,   56,   56,   56,

      144,  133,  649,  150,  150,  172,  389,  389,  150, 1255,
      150,  389,  154,  154,  154,  154,  642,  644,   56,   56,
       56,  158,  158,  158,  158,  649,  392,  392,  154,  392,
     1256,  158,  150,  154, 1257,  389,  376,  158,  376,  376,
      376,  644,  158, 1258, 1259,   56,   56,   56,   56,   56,
       56,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,  484,
       85,   85, 1260,  484,  862,   85,   85,   85, 1261,   85,
      155,  155,  155,  155,  643,  862, 1262,  155,  161,  161,

      161,  161,  162,  162,  162,  162,  155,  484,   85,   85,
       85,  155,  176,  176,  161,  176,  643,  557,  162,  161,
      557,  401,  401,  162,  401,  180,  180,  557,  180,  655,
      251,  251,  655,  251, 1263,   85,   85,   85,   85,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,  658,   86,   86,  658,  776,
      646,   86,   86,   86,  155,   86,  195,  195,  176,  195,
     1264,  152,  152,  650,  152,  251,  152,  166,  166,  166,
      166,  180,  646,  776,   86,   86,   86,  152,  152, 1175,
     1175, 1175,  152,  166,  152,  650, 1265, 1266,  166,  203,

      203,  651,  203, 1267, 1268,  197,  197,  197,  197,  773,
     1270,   86,   86,   86,   86,  103,  152,  156,  156,  156,
      156,  197,  195,  651,  156,  344,  197,  152,  103,  344,
      777,  773,  384,  156,  384,  384,  384,  344,  156,  103,
      103,  384, 1271,  324,  103,  103,  324,  344,  778,  103,
      103,  344,  103,  103,  777,  203,  409,  409,  409,  409,
      344,  103,  103,  409,  391,  391,  103,  103,  324,  391,
      778, 1272,  103,  103,  103,  103,  103,  103,  104,  104,
      104,  104,  918,  163,  163,  163,  163,  104,  324,  671,
      163,  156,  671,  391,  104,  104, 1273,  104,  918,  163,

      164,  164,  164,  164,  163,  413,  413,  164,  413, 1274,
      198,  198,  198,  198, 1275,  677,  164,  104,  677,  645,
      366,  164,  645,  366,  104,  104,  198,  412,  412,  412,
      412,  198,  209,  209, 1276,  209,  104,  199,  199,  199,
      199, 1277,  645,  104,  199,  104,  104,  106,  106,  106,
      106,  186,  186,  199,  186,  781,  106,  163,  199,  202,
      202,  202,  202,  106,  106,  366,  106,  186,  186, 1278,
      213,  213,  186,  213,  164,  202, 1279,  781,  216,  216,
      202,  216,  200,  200,  200,  200,  106,  489,  209,  200,
      489,  366,  490,  106,  106,  490,  186,  106,  200,  243,

      243,  489,  243,  200, 1280,  106,  490,  186, 1281, 1282,
      647,  199,  106,  647,  106,  106,  109,  249,  249,  109,
      249,  266,  266,  876,  266, 1283,  213,  735,  109,  109,
      735,  109,  109,  647,  216,  109,  109,  109, 1284,  326,
      326,  109,  326,  270,  270,  876,  270,  224,  224,  224,
      224,  327,  327, 1285,  327,  243,  200,  424,  424,  559,
      424,  109,  559,  224,  224, 1290,  224,  276,  276,  559,
      276,  279,  279,  249,  279,  437,  437,  266,  437, 1291,
      367,  877,  349,  367,  326,  349,  224,  735,  109,  147,
      147, 1294,  147,  147,  147,  147,  327,  147,  147,  270,

      147,  147,  147,  877,  147,  349,  147,  147,  349, 1295,
      946,  147,  147,  147,  147,  224, 1296,  416,  416,  416,
      416,  946,  349,  276,  416,  367,  364,  279,  364,  364,
      349,  364,  364,  364,  147,  147,  147,  881,  364,  753,
      367,  365,  753,  365,  365,  349,  365,  365,  365,  368,
     1297,  367,  368,  365,  369,  370,  368,  369,  370,  881,
      364,  147,  147,  147,  147,  225,  225,  770,  225, 1299,
      770,  225,  225,  225,  225,  365,  374,  377, 1300,  374,
      377,  379,  461,  461,  379,  461,  385,  225,  225,  385,
      225,  374,  377,  368,  368, 1301,  379,  374,  377,  369,

      370,  385,  379,  380,  380, 1302,  380,  385,  386, 1303,
      225,  386,  468,  468,  369,  468,  370, 1304,  380,  787,
      368,  225,  787,  386,  380,  369,  370,  780,  380,  386,
      780,  660,  394,  394,  660,  473,  473,  394,  473,  225,
      325,  325,  325,  325,  404,  404,  404,  404,  374,  377,
      780,  478,  478,  379,  478,  783,  325,  325,  385,  325,
      404,  394, 1305,  486,  486,  404,  486,  405,  405,  405,
      405,  956,  421,  421,  405,  380,  394,  421,  783,  325,
      386, 1306,  660,  405,  423,  423,  325,  325,  405,  423,
      407,  407,  407,  407,  956, 1307, 1308,  407,  325,  426,

      426,  421,  660, 1309,  426,  325,  407,  325,  325,  339,
     1310,  407,  339,  423,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  426, 1311,
     1312,  339,  339,  339,  339,  339,  408,  408,  408,  408,
     1313,  405, 1314,  426,  410,  410,  410,  410, 1315, 1316,
      791,  410,  408,  791,  339,  339,  339,  408,  408,  672,
      410,  672,  672,  672,  407,  410,  417,  417,  417,  417,
     1317,  499,  499,  417,  499, 1318,  411,  411,  411,  411,
     1321,  339,  339,  339,  339,  339,  339,  357,  433,  765,
      357, 1322,  411,  357,  357,  357,  357,  411,  411,  433,

      433,  957,  492,  435,  433,  492,  433, 1036, 1323,  357,
      357,  439,  357, 1324,  435,  435,  492,  859,  410,  435,
      859,  435,  439,  439,  957, 1325,  765,  439,  433,  439,
     1036, 1326,  357,  440,  440,  440,  440,  445,  445,  445,
      445, 1327, 1328,  435,  445,  450,  450,  450,  450,  440,
     1329,  439,  450,  765,  440, 1330,  510,  510,  357,  510,
      357,  357,  372,  483,  483,  372,  439, 1331,  483,  451,
      451,  451,  451, 1332,  372,  372,  451,  372,  372,  485,
      485,  372,  372,  372,  485, 1333, 1334,  372,  441,  441,
      441,  441,  483, 1335, 1340,  441,  443,  443,  443,  443,

     1341,  488,  488,  443,  441, 1344,  488,  372,  485,  441,
     1345, 1346,  443,  458,  458,  458,  458,  443, 1347, 1349,
      458,  444,  444,  444,  444,  464,  464,  464,  464, 1350,
      488,  444,  464, 1351,  372,  429,  429,  444,  429,  429,
      429,  429,  444,  429,  429,  488,  429,  429,  429, 1352,
      429,  696,  429,  429,  696, 1353, 1354,  429,  429,  429,
      429,  696,  441,  519,  519,  697,  519, 1355,  697, 1356,
      443,  446,  446,  446,  446,  697,  524,  524,  446,  524,
      429,  429,  429,  447,  447,  447,  447,  446,  465,  465,
      465,  465,  446,  447,  884,  465, 1357,  884, 1358,  447,

      494,  494,  494,  494,  447, 1359, 1360,  429,  429,  429,
      429,  430,  430, 1361,  430,  430,  430,  430, 1362,  430,
      430,  494,  430,  430,  430, 1363,  430,  887,  430,  430,
      887, 1364, 1367,  430,  430,  430,  430, 1368,  449,  449,
      449,  449, 1369,  528,  528,  446,  528, 1370,  449,  453,
      453,  453,  453, 1371,  449, 1372,  430,  430,  430,  449,
      454,  454,  454,  454, 1373,  453,  921,  454, 1374,  921,
      453,  456,  456,  456,  456, 1375,  454, 1376,  456,  539,
      539,  454,  539,  430,  430,  430,  430,  456,  457,  457,
      457,  457,  456, 1377,  459,  459,  459,  459,  887,  554,

      554,  459,  554, 1378,  457,  460,  460,  460,  460,  457,
      459,  493,  493,  493,  493,  459,  560,  560,  493,  560,
      664,  460, 1379,  664,  563,  563,  460,  563, 1380,  493,
      493,  493,  493, 1381,  454,  496,  496,  496,  496, 1385,
      577,  577,  496,  577, 1386,  456,  502,  502,  502,  502,
     1389, 1390, 1391,  496,  496,  496,  496,  498,  498,  498,
      498, 1392,  502, 1014,  498, 1394, 1014,  502,  459,  563,
      581,  581, 1395,  581, 1396,  498,  498,  498,  498,  503,
      503,  503,  503,  664, 1397, 1398,  503,  505,  505,  505,
      505,  664, 1399, 1400,  505,  503,  506,  506,  506,  506,

      503, 1401, 1402,  505,  507,  507,  507,  507,  505, 1403,
     1404,  507,  506,  508,  508,  508,  508,  506, 1405, 1406,
      508,  509,  509,  509,  509,  513,  513,  513,  513,  508,
      585,  585,  513,  585,  508, 1407, 1408,  509,  514,  514,
      514,  514,  509,  588,  588,  514,  588,  885,  656,  782,
      885,  656,  782,  503, 1410,  656,  683,  683,  683,  683,
      878,  505, 1411,  878, 1150,  670,  670, 1150,  670, 1412,
      667,  668,  782,  667,  668,  669, 1413, 1414,  669,  683,
      670,  890, 1269,  878,  890, 1269,  670,  508,  632, 1415,
     1416,  632,  656,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  885, 1417, 1418,
      632,  632,  632,  632,  632,  667,  668, 1419,  885,  656,
      669,  667, 1420, 1421,  673,  673,  890,  673,  675,  675,
     1422,  675, 1423,  632,  632,  632,  668,  670,  669,  673,
     1424,  667,  668,  675,  890,  673,  669,  879, 1320,  675,
      879, 1320,  890,  675,  678,  678, 1427, 1428, 1431,  678,
      632,  632,  632,  632,  632,  632,  663,  663, 1432,  663,
      879,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663, 1433,  663,  678,  663,  684,  684,  684,  684,  663,
      663,  663,  663, 1434,  676,  676,  673,  676,  679,  679,

      675,  680,  680,  679, 1365, 1436,  680, 1365,  684,  676,
     1437,  663,  663,  663, 1438,  676,  687,  687,  688,  688,
     1439,  687, 1440,  688,  689,  689, 1441,  679, 1382,  689,
      680, 1382,  703,  703, 1442, 1443, 1444,  703,  663,  663,
      663,  663,  663,  663,  692,  687,  958,  688, 1445,  958,
      680,  792, 1446,  689,  792,  692,  692, 1447, 1448, 1449,
      692,  703,  692, 1450,  795,  961,  676,  795,  961,  958,
     1452,  704,  704,  689,  691,  691,  704,  691,  691,  691,
      691, 1453,  691,  691,  692,  691,  691,  691,  961,  691,
      693,  691,  691,  694, 1454, 1455,  691,  691,  691,  691,

      704,  693,  693, 1456,  694,  694,  693,  792,  693,  694,
     1457,  694,  705,  705, 1458,  798, 1459,  705,  798,  691,
      691,  691,  792, 1460,  706,  706,  706,  706, 1461,  795,
      693,  706, 1462,  694,  799,  795, 1038,  799, 1463, 1038,
     1464,  705,  706,  706,  706,  706,  691,  691,  691,  691,
     1465, 1409, 1468,  694, 1409,  707,  707,  707,  707, 1038,
      798,  705,  707,  708,  708,  708,  708,  798, 1469, 1472,
      708,  709,  709,  709,  709, 1473,  707, 1451,  709,  799,
     1451,  708,  708,  708,  708,  797,  798, 1474,  797,  709,
      709,  709,  709,  769, 1475,  769, 1477,  769,  769,  799,

      805,  805,  805,  805, 1478,  799, 1479,  769,  794,  794,
     1480,  794, 1481,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  805,  794, 1482,  794, 1483, 1484, 1485,
      797,  794,  794,  794,  794, 1042,  800,  800, 1042,  800,
     1486,  797,  966,  801,  801,  966,  801,  802,  802, 1487,
      802,  800, 1488,  794,  794,  794,  797,  800,  801, 1489,
      803,  803,  802, 1490,  801,  803,  809,  809,  802, 1492,
     1041,  809,  802, 1041,  807,  807,  807,  807, 1493, 1494,
      794,  794,  794,  794,  794,  794,  870,  812,  870,  803,
      870,  870, 1495,  966, 1496,  809,  803,  807,  812,  812,

      870, 1497,  809,  812,  888,  812, 1042,  888,  800, 1498,
     1499,  818,  818,  966,  889,  801,  818,  889, 1500,  802,
      810,  810, 1041,  810,  810,  810,  810,  812,  810,  810,
     1501,  810,  810,  810,  812,  810, 1111,  810,  810, 1111,
      818, 1041,  810,  810,  810,  810, 1502,  818, 1503, 1504,
      820,  820,  820,  820, 1111, 1111, 1111,  820, 1505,  889,
      888,  891, 1544, 1546,  891,  810,  810,  810,  820,  820,
      820,  820, 1545, 1548,  889,  888, 1551,  822,  822,  822,
      822,  970,  970, 1546,  822,  889,  970, 1545, 1549, 1551,
     1218, 1548,  810,  810,  810,  810,  811,  811,  822,  811,

      811,  811,  811, 1549,  811,  811,  891,  811,  811,  811,
      970,  811, 1336,  811,  811, 1336, 1547,  891,  811,  811,
      811,  811, 1552, 1547, 1552,  970,  821,  821,  821,  821,
      893,  893,  891,  821, 1217,  893, 1550,  892,  892, 1550,
      892,  811,  811,  811,  821,  821,  821,  821,  835,  835,
      896,  896,  892,  835, 1216,  896,  835,  835,  892,  893,
      964,  835,  897,  964,  835,  835, 1558,  835,  811,  811,
      811,  811,  967,  897,  897,  967, 1555,  893,  897,  896,
      897,  902,  902, 1336, 1558, 1556,  902,  903,  903,  903,
      903, 1555, 1556,  968,  903,  969,  968,  896,  969, 1553,

     1043, 1107,  897, 1043, 1107,  903,  903,  903,  903,  892,
      902, 1557, 1553,  973,  973, 1557, 1215,  967,  973, 1214,
      897,  979,  979,  974, 1107,  964,  979, 1044,  902, 1213,
     1044,  964, 1211, 1210,  974,  974, 1209,  967,  968,  974,
      969,  974,  973,  967, 1174, 1043,  969, 1174, 1045, 1208,
      979, 1045, 1043,  968, 1207, 1114, 1114,  973, 1170, 1110,
     1114, 1170, 1110,  974,  968,  979,  969,  980,  980,  980,
      980, 1043, 1044, 1206,  980, 1044, 1112, 1205,  974, 1112,
     1113, 1170, 1204, 1113, 1114,  980,  980,  980,  980,  981,
      981,  981,  981, 1045, 1046, 1046,  981, 1114, 1044, 1046,

     1049, 1049, 1050, 1286, 1174, 1049, 1286,  981,  981,  981,
      981, 1055, 1055, 1050, 1050, 1174, 1055, 1203, 1050, 1045,
     1050, 1112, 1110, 1046, 1177, 1113, 1046, 1177, 1176, 1049,
     1110, 1176, 1049, 1202, 1201, 1554, 1117, 1117, 1113, 1112,
     1055, 1117, 1050, 1055, 1118, 1050, 1554, 1112, 1123, 1123,
     1200, 1113, 1199, 1123, 1233, 1118, 1118, 1233, 1178, 1178,
     1118, 1286, 1118, 1178, 1182, 1117, 1198, 1181, 1181, 1177,
     1197, 1177, 1181, 1176, 1286, 1182, 1182, 1123, 1117, 1196,
     1182, 1195, 1182, 1235, 1118, 1194, 1235, 1178, 1176, 1178,
     1123, 1232, 1193, 1192, 1232, 1177, 1181, 1118, 1181, 1176,

     1187, 1187, 1233, 1191, 1182, 1187, 1182, 1234, 1236, 1236,
     1234, 1239, 1239, 1236, 1232, 1190, 1239, 1245, 1245, 1189,
     1288, 1287, 1245, 1288, 1287, 1233, 1188, 1240, 1235, 1187,
     1337, 1187, 1186, 1337, 1185, 1184, 1183, 1236, 1240, 1240,
     1239, 1235, 1180, 1240, 1179, 1240, 1245, 1169, 1543, 1543,
     1236, 1543, 1234, 1239, 1235, 1234, 1289, 1289, 1168, 1245,
     1338, 1289, 1166, 1338, 1165, 1288, 1287, 1240, 1292, 1292,
     1293, 1559, 1559, 1292, 1559, 1337, 1288, 1164, 1234, 1287,
     1240, 1293, 1293, 1163, 1162, 1289, 1293, 1161, 1293, 1298,
     1298, 1288, 1287, 1543, 1298, 1160, 1289, 1292, 1339, 1339,

     1159, 1337, 1158, 1339, 1157, 1338, 1342, 1342, 1292, 1156,
     1293, 1342, 1343, 1155, 1348, 1348, 1559, 1154, 1298, 1348,
     1338, 1293, 1153, 1343, 1343, 1152, 1151, 1339, 1343, 1298,
     1343, 1338, 1729, 1383, 1425, 1342, 1383, 1425, 1149, 1384,
     1384, 1729, 1339, 1348, 1384, 1729, 1729, 1148, 1387, 1387,
     1342, 1147, 1343, 1387, 1388, 1145, 1144, 1143, 1348, 1393,
     1393, 1142, 1141, 1140, 1393, 1388, 1388, 1343, 1384, 1139,
     1388, 1466, 1388, 1138, 1466, 1384, 1137, 1387, 1383, 1425,
     1136, 1426, 1426, 1425, 1387, 1383, 1426, 1135, 1393, 1133,
     1132, 1429, 1429, 1131, 1388, 1393, 1429, 1430, 1435, 1435,

     1130, 1388, 1129, 1435, 1383, 1425, 1467, 1467, 1430, 1430,
     1426, 1467, 1777, 1430, 1426, 1430, 1466, 1470, 1470, 1128,
     1429, 1777, 1470, 1127, 1429, 1777, 1777, 1435, 1476, 1476,
     1126, 1435, 1471, 1476, 1466, 1467, 1125, 1430, 1124, 1122,
     1121, 1430, 1466, 1471, 1471, 1120, 1470, 1119, 1471, 1116,
     1471, 1506, 1506, 1467, 1506, 1507, 1507, 1476, 1510, 1510,
     1507, 1115, 1511, 1510, 1470, 1516, 1516, 1109, 1108, 1106,
     1516, 1105, 1471, 1511, 1511, 1476, 1104, 1103, 1511, 1102,
     1511, 1101, 1100, 1099, 1507, 1098, 1097, 1510, 1598, 1096,
     1471, 1598, 1598, 1598, 1516, 1095, 1506, 1094, 1598, 1093,

     1618, 1092, 1511, 1618, 1618, 1618, 1091, 1661, 1620, 1090,
     1618, 1620, 1620, 1620, 1089, 1088, 1661, 1087, 1620, 1661,
     1661, 1661, 1506, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1562, 1562,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1563, 1563, 1563, 1563, 1563, 1563, 1563,

     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1564, 1564,
     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
     1564, 1564, 1564, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1566, 1566,

     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,
     1566, 1566, 1566, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,

     1568, 1568, 1568, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,

     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,

     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,

     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1583, 1583, 1583, 1583, 1583, 1583, 1583,

     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1586, 1586,

     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1588, 1588,
     1086, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,

     1588, 1588, 1588, 1589, 1625, 1084, 1083, 1625, 1625, 1625,
     1079, 1078, 1640, 1077, 1625, 1640, 1640, 1640, 1076, 1075,
     1589, 1074, 1640, 1589, 1589, 1589, 1073, 1071, 1070, 1069,
     1589, 1590, 1068, 1590, 1590, 1660, 1590, 1066, 1660, 1660,
     1660, 1590, 1590, 1065, 1660, 1590, 1590, 1590, 1591, 1064,
     1591, 1591, 1591, 1591, 1743, 1591, 1063, 1743, 1743, 1743,
     1591, 1591, 1591, 1062, 1591, 1591, 1591, 1592, 1592, 1592,
     1592, 1061, 1060, 1059, 1748, 1058, 1592, 1748, 1748, 1748,
     1057, 1592, 1592, 1056, 1592, 1592, 1592, 1054, 1592, 1592,
     1592, 1592, 1053, 1592, 1592, 1593, 1052, 1593, 1593, 1785,

     1593, 1051, 1785, 1785, 1785, 1593, 1593, 1048, 1047, 1593,
     1593, 1593, 1594, 1594, 1594, 1594, 1040, 1039, 1037, 1790,
     1790, 1594, 1790, 1790, 1790, 1035, 1594, 1594, 1034, 1594,
     1594, 1594, 1033, 1594, 1594, 1594, 1594, 1032, 1594, 1594,
     1595, 1595, 1031, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1595, 1596, 1818, 1030, 1596, 1818,
     1818, 1818, 1596, 1029, 1596, 1596, 1596, 1596, 1596, 1028,
     1027, 1026, 1596, 1596, 1596, 1025, 1596, 1596, 1596, 1024,

     1023, 1022, 1021, 1596, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1599,
     1020, 1599, 1599, 1019, 1018, 1017, 1016, 1599, 1015, 1013,
     1599, 1599, 1599, 1011, 1008, 1006, 1005, 1599, 1600, 1600,
     1600, 1600, 1642, 1004, 1600, 1642, 1642, 1642, 1003, 1002,
     1001, 1000, 1642, 1600,  999,  998, 1600,  997,  996,  995,
      994, 1600,  992,  991, 1600, 1600, 1600,  990,  989,  988,
     1600, 1600, 1601, 1601, 1601, 1601, 1655,  987,  986, 1655,

     1655, 1655,  984,  983,  982,  978, 1655, 1601,  977, 1601,
     1601, 1601,  976,  975,  972, 1601,  971,  963, 1601, 1601,
     1601,  962,  960,  955,  954, 1601, 1602, 1602, 1602, 1602,
     1699,  952, 1602, 1699, 1699, 1699,  951,  950, 1752,  949,
     1699, 1752, 1752, 1752,  948,  947,  945,  944, 1752, 1602,
      943,  942, 1602, 1602, 1602,  941,  940,  939,  938, 1602,
     1603, 1603,  937, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1604,  936,  934, 1604,  933,

      932,  930, 1604,  929, 1604, 1604, 1604, 1604, 1604,  928,
      927,  926, 1604, 1604, 1604,  925, 1604, 1604, 1604,  924,
      923,  922,  920, 1604, 1605, 1605,  919, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1606,
     1606,  917,  916, 1606,  915,  914,  913, 1606,  912, 1606,
     1606, 1606, 1606, 1606,  911, 1606,  910, 1606, 1606, 1606,
      909, 1606, 1606, 1606, 1747,  908,  907,  906, 1606, 1607,
     1607, 1607, 1607, 1747,  905, 1607, 1747, 1747, 1747,  904,

      901,  900,  899,  898, 1607,  895,  894, 1607,  886,  883,
      882,  875, 1607,  874,  873, 1607, 1607, 1607,  872,  869,
      867, 1607, 1607, 1608, 1608, 1608, 1608,  866,  865,  864,
      863,  861, 1608,  860,  858,  857,  856,  855, 1608,  854,
     1608, 1608,  853,  852,  851,  850, 1608,  849,  848, 1608,
     1608, 1608,  847,  845,  844,  843, 1608, 1609, 1609, 1609,
     1609, 1769,  841, 1609, 1769, 1769, 1769,  840,  839, 1772,
      838, 1769, 1772, 1772, 1772,  837,  836,  834,  833, 1772,
     1609,  832,  830, 1609, 1609, 1609,  829,  828,  827,  826,
     1609, 1610, 1610, 1610, 1610, 1775,  825, 1610, 1775, 1775,

     1775,  824,  823,  817,  816, 1775, 1610,  815,  814, 1610,
      808,  804,  796,  793, 1610,  790,  785, 1610, 1610, 1610,
      784,  779,  775, 1610, 1610, 1611, 1611, 1611, 1611, 1776,
      774,  772, 1776, 1776, 1776,  767,  766,  763,  762, 1776,
     1611,  761, 1611, 1611,  760,  756,  754,  752, 1611,  751,
      747, 1611, 1611, 1611,  745,  743,  742,  741, 1611, 1612,
     1612, 1612, 1612, 1799,  740, 1612, 1799, 1799, 1799,  739,
      738,  737,  736, 1799,  734,  733,  732,  731,  730,  729,
      728,  727, 1612,  726,  725, 1612, 1612, 1612,  724,  723,
      722,  719, 1612, 1613,  718,  717, 1613,  716,  715,  714,

      711,  710, 1613,  702,  701, 1613, 1613, 1613,  700,  698,
      695,  686, 1613, 1614, 1614,  685, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1615, 1615,
      682, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615,
     1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615,
     1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615,
     1615, 1615, 1615, 1616, 1616,  659, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,

     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1617,  654,
      653, 1617,  652,  640,  639, 1617,  637, 1617, 1617, 1617,
     1617, 1617,  636,  634,  633, 1617, 1617, 1617,  631, 1617,
     1617, 1617,  628,  626,  624,  623, 1617, 1619,  622,  621,
     1619,  620,  617,  615,  613,  611,  608,  605,  602,  600,
     1619,  599,  597,  595, 1619,  594,  592,  590,  587,  583,
     1619,  579,  574, 1619, 1619, 1619,  573,  572,  569,  566,
     1619, 1621, 1621, 1621, 1621,  565,  562, 1621,  556,  553,
      552,  548,  546,  545,  543,  541,  538,  536, 1621, 1621,

      535,  532,  530,  526, 1621,  523,  522, 1621, 1621, 1621,
      521,  518,  517,  516, 1621, 1622, 1622, 1622, 1622,  512,
      504, 1622,  501,  497,  481,  480,  476,  475,  471,  470,
     1622,  463,  455, 1622,  442,  436,  431,  427, 1622,  419,
      418, 1622, 1622, 1622,  415,  406,  403, 1622, 1622, 1623,
     1623, 1623, 1623,  400,  398,  395,  387,  371,  360,  358,
      355,  353,  352,  340, 1623,  333, 1623, 1623,  332,  329,
      328,  323, 1623,  322,  314, 1623, 1623, 1623,  311,  310,
      305,  301, 1623, 1624, 1624, 1624, 1624,  300,  297, 1624,
      293,  292,  289,  284,  253,  239,  238,  237,  233,  232,

      228,  223,  220,  212,  208,  201, 1624,  183,  179, 1624,
     1624, 1624,  175,  165,  157,  143, 1624, 1626,  140, 1626,
      134,  122,  118,  108,  100, 1626,   99,   98, 1626, 1626,
     1626,   93,    8,    7,    0, 1626, 1627, 1627,    0, 1627,
        0,    0,    0,    0,    0, 1627,    0,    0, 1627, 1627,
     1627,    0,    0,    0,    0, 1627, 1628, 1628,    0, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,    0, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628, 1629,    0,    0, 1629,    0,    0,    0,    0,    0,

     1629,    0,    0, 1629, 1629, 1629,    0,    0,    0,    0,
     1629, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
     1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
     1630, 1630, 1630, 1630,    0, 1630, 1630, 1630, 1630, 1630,
     1630, 1630, 1630, 1630, 1630, 1630, 1631, 1631,    0, 1631,
     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,    0,
     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
     1631, 1632,    0,    0, 1632,    0,    0,    0,    0,    0,
     1632,    0,    0, 1632, 1632, 1632,    0,    0,    0,    0,

     1632, 1633, 1633,    0, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 1633, 1633, 1634, 1634,    0, 1634,
        0, 1634, 1634, 1634, 1634, 1634, 1634, 1634,    0, 1634,
     1634, 1634, 1634,    0, 1634, 1634, 1634, 1634, 1634,    0,
     1634,    0, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
     1634, 1635,    0,    0, 1635,    0,    0,    0,    0,    0,
     1635,    0,    0,    0,    0, 1635, 1635,    0, 1635,    0,
        0,    0,    0,    0, 1635,    0,    0, 1635, 1635, 1635,

     1636, 1636,    0, 1636,    0, 1636, 1636, 1636, 1636, 1636,
     1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636,
     1636, 1636, 1636,    0, 1636,    0, 1636, 1636, 1636, 1636,
     1636, 1636, 1636, 1636, 1636, 1637, 1637,    0, 1637,    0,
     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,    0, 1637,
        0, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
     1638,    0,    0, 1638,    0,    0,    0,    0,    0, 1638,
        0,    0, 1638, 1638, 1638,    0,    0,    0,    0, 1638,
     1639, 1639,    0, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

        0,    0, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639,    0, 1639,    0, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1641,    0, 1641, 1641,    0,
        0,    0,    0, 1641,    0,    0, 1641, 1641, 1641,    0,
        0,    0,    0, 1641, 1643,    0, 1643, 1643,    0,    0,
        0,    0, 1643,    0,    0, 1643, 1643, 1643,    0,    0,
        0,    0, 1643, 1644, 1644,    0, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644,    0, 1644,    0, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1645,    0,

        0, 1645,    0,    0,    0,    0,    0, 1645,    0,    0,
     1645, 1645, 1645,    0,    0,    0,    0, 1645, 1646, 1646,
        0, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646,    0, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646,    0, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1647, 1647,    0, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647,    0, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647,    0, 1647,    0, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1648,    0,
        0, 1648,    0,    0,    0, 1648,    0, 1648,    0,    0,

     1648, 1648, 1648,    0,    0,    0,    0, 1648, 1649,    0,
     1649, 1649, 1649, 1649, 1649,    0,    0, 1649,    0, 1649,
        0,    0, 1649, 1649, 1649,    0,    0,    0,    0, 1649,
     1650, 1650,    0, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1650,    0, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1650, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651,    0,    0, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,

     1652, 1652,    0, 1652, 1652, 1652, 1652, 1652, 1652,    0,
     1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
        0,    0, 1652, 1652, 1652,    0,    0, 1652, 1652, 1652,
     1652, 1652, 1652, 1652, 1652, 1653, 1653, 1653, 1653,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1653,
     1653,    0, 1653, 1653, 1653,    0, 1653, 1653, 1653, 1653,
        0, 1653, 1653, 1654, 1654,    0, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1656, 1656,

        0,    0,    0,    0, 1656,    0,    0, 1656, 1656, 1656,
        0,    0,    0,    0, 1656, 1657,    0, 1657, 1657,    0,
     1657,    0,    0,    0,    0, 1657, 1657,    0,    0, 1657,
     1657, 1657, 1658,    0,    0, 1658,    0,    0,    0,    0,
        0, 1658,    0,    0, 1658, 1658, 1658, 1659,    0,    0,
     1659,    0, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 1659, 1662,    0, 1662, 1662,    0, 1662,    0,    0,
        0,    0, 1662, 1662,    0,    0, 1662, 1662, 1662, 1663,

        0,    0, 1663,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1663, 1663,    0, 1663, 1663, 1663, 1663, 1664,
     1664,    0, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1665,    0,    0, 1665,    0,    0,
        0, 1665,    0, 1665, 1665, 1665, 1665, 1665,    0,    0,
        0, 1665, 1665, 1665,    0, 1665, 1665, 1665,    0,    0,
        0,    0, 1665, 1666,    0,    0, 1666,    0,    0,    0,

     1666,    0, 1666,    0, 1666, 1666, 1666,    0,    0,    0,
     1666, 1666, 1666,    0, 1666, 1666, 1666,    0,    0,    0,
        0, 1666, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1668,    0, 1668,
     1668,    0,    0,    0,    0, 1668,    0,    0, 1668, 1668,
     1668,    0,    0,    0,    0, 1668, 1669,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1669,    0,    0, 1669, 1669, 1669,    0,

        0,    0,    0, 1669, 1670, 1670, 1670, 1670,    0,    0,
     1670,    0,    0,    0,    0,    0,    0,    0,    0, 1670,
        0,    0, 1670,    0,    0,    0,    0, 1670,    0,    0,
     1670, 1670, 1670,    0,    0,    0, 1670, 1670, 1671, 1671,
     1671, 1671,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1671,    0, 1671, 1671, 1671,    0,    0,
        0, 1671,    0,    0, 1671, 1671, 1671,    0,    0,    0,
        0, 1671, 1672, 1672, 1672, 1672,    0,    0, 1672,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1672,    0,    0, 1672, 1672,

     1672,    0,    0,    0,    0, 1672, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673,    0, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1674,    0, 1674,    0,    0,    0, 1674,    0,    0,
     1674, 1674, 1674,    0,    0,    0,    0, 1674, 1675, 1675,
        0, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1676,    0,    0, 1676,    0,    0,    0,

     1676,    0, 1676, 1676, 1676, 1676, 1676,    0,    0,    0,
     1676, 1676, 1676,    0, 1676, 1676, 1676,    0,    0,    0,
        0, 1676, 1677,    0,    0, 1677,    0,    0,    0, 1677,
        0, 1677,    0, 1677, 1677, 1677,    0,    0,    0, 1677,
     1677, 1677,    0, 1677, 1677, 1677,    0,    0,    0,    0,
     1677, 1678, 1678,    0, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1679, 1679,    0, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,

     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1680, 1680,    0,    0, 1680,    0,    0,    0, 1680,
        0, 1680, 1680, 1680, 1680, 1680,    0, 1680,    0, 1680,
     1680, 1680,    0, 1680, 1680, 1680,    0,    0,    0,    0,
     1680, 1681,    0,    0, 1681,    0,    0,    0, 1681,    0,
     1681,    0, 1681, 1681, 1681,    0,    0,    0, 1681, 1681,
     1681,    0, 1681, 1681, 1681,    0,    0,    0,    0, 1681,
     1682, 1682, 1682, 1682,    0,    0, 1682,    0,    0,    0,
        0,    0,    0,    0,    0, 1682,    0,    0, 1682,    0,

        0,    0,    0, 1682,    0,    0, 1682, 1682, 1682,    0,
        0,    0, 1682, 1682, 1683, 1683, 1683, 1683,    0,    0,
        0,    0,    0, 1683,    0,    0,    0,    0,    0, 1683,
        0, 1683, 1683,    0,    0,    0,    0, 1683,    0,    0,
     1683, 1683, 1683,    0,    0,    0,    0, 1683, 1684, 1684,
     1684, 1684,    0,    0, 1684,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1684,    0,    0, 1684, 1684, 1684,    0,    0,    0,
        0, 1684, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685,
     1685, 1685, 1685,    0, 1685, 1685, 1685, 1685, 1685, 1685,

     1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685,
     1685, 1685, 1685, 1685, 1685, 1685, 1685, 1686,    0,    0,
     1686,    0,    0,    0,    0,    0, 1686,    0,    0,    0,
        0,    0,    0,    0, 1686,    0,    0,    0,    0,    0,
     1686,    0,    0, 1686, 1686, 1686,    0,    0,    0,    0,
     1686, 1687, 1687, 1687, 1687,    0,    0, 1687,    0,    0,
        0,    0,    0,    0,    0,    0, 1687,    0,    0, 1687,
        0,    0,    0,    0, 1687,    0,    0, 1687, 1687, 1687,
        0,    0,    0, 1687, 1687, 1688, 1688, 1688, 1688,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1688,    0, 1688, 1688,    0,    0,    0,    0, 1688,    0,
        0, 1688, 1688, 1688,    0,    0,    0,    0, 1688, 1689,
     1689, 1689, 1689,    0,    0, 1689,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1689,    0,    0, 1689, 1689, 1689,    0,    0,
        0,    0, 1689, 1690,    0,    0,    0,    0,    0, 1690,
        0,    0, 1690, 1690, 1690,    0,    0,    0,    0, 1690,
     1691,    0,    0, 1691,    0,    0,    0,    0,    0, 1691,
        0,    0, 1691, 1691, 1691,    0,    0,    0,    0, 1691,
     1692, 1692,    0, 1692, 1692, 1692, 1692, 1692, 1692, 1692,

     1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692,
     1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692,
     1692, 1692, 1692, 1692, 1692, 1693, 1693,    0, 1693, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
     1694, 1694,    0, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
     1694, 1694, 1694, 1694, 1694, 1695,    0,    0, 1695,    0,

        0,    0, 1695,    0, 1695, 1695, 1695, 1695, 1695,    0,
        0,    0, 1695, 1695, 1695,    0, 1695, 1695, 1695,    0,
        0,    0,    0, 1695, 1696,    0,    0, 1696,    0,    0,
        0, 1696,    0, 1696,    0, 1696, 1696, 1696,    0,    0,
        0, 1696, 1696, 1696,    0, 1696, 1696, 1696,    0,    0,
        0,    0, 1696, 1697,    0,    0, 1697,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1697,    0,    0,    0,
     1697,    0,    0,    0,    0,    0, 1697,    0,    0, 1697,
     1697, 1697,    0,    0,    0,    0, 1697, 1698, 1698, 1698,
     1698,    0,    0, 1698,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1698, 1698,    0,    0,    0,    0,
     1698,    0,    0, 1698, 1698, 1698,    0,    0,    0,    0,
     1698, 1700, 1700, 1700, 1700,    0,    0, 1700,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1700, 1700,
        0,    0,    0,    0, 1700,    0,    0, 1700, 1700, 1700,
        0,    0,    0,    0, 1700, 1701, 1701, 1701, 1701,    0,
        0, 1701,    0,    0,    0,    0,    0,    0,    0,    0,
     1701,    0,    0, 1701,    0,    0,    0,    0, 1701,    0,
        0, 1701, 1701, 1701,    0,    0,    0, 1701, 1701, 1702,
     1702, 1702, 1702,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1702,    0, 1702, 1702,    0,    0,
        0,    0, 1702,    0,    0, 1702, 1702, 1702,    0,    0,
        0,    0, 1702, 1703, 1703, 1703, 1703,    0,    0, 1703,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1703,    0,    0, 1703,
     1703, 1703,    0,    0,    0,    0, 1703, 1704,    0,    0,
        0,    0,    0, 1704,    0,    0, 1704, 1704, 1704,    0,
        0,    0,    0, 1704, 1705,    0, 1705,    0,    0,    0,
        0,    0, 1705,    0,    0, 1705, 1705, 1705,    0,    0,
        0,    0, 1705, 1706,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1706,    0,    0, 1706, 1706, 1706,    0,    0,    0,    0,
     1706, 1707, 1707,    0, 1707,    0,    0,    0,    0,    0,
     1707,    0,    0, 1707, 1707, 1707,    0,    0,    0,    0,
     1707, 1708, 1708,    0, 1708, 1708, 1708, 1708, 1708, 1708,
     1708, 1708, 1708,    0, 1708, 1708, 1708, 1708, 1708, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1709,    0,    0, 1709,
        0,    0,    0,    0,    0, 1709,    0,    0, 1709, 1709,
     1709,    0,    0,    0,    0, 1709, 1710, 1710, 1710, 1710,

     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,    0,
     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1711, 1711,    0, 1711, 1711, 1711, 1711, 1711, 1711,
     1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711,
     1711, 1711, 1711, 1711,    0, 1711, 1711, 1711, 1711, 1711,
     1711, 1711, 1711, 1711, 1711, 1711, 1712,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1712,    0,    0, 1712, 1712, 1712,    0,
        0,    0,    0, 1712, 1713,    0,    0, 1713,    0,    0,

        0,    0,    0, 1713,    0,    0, 1713, 1713, 1713,    0,
        0,    0,    0, 1713, 1714, 1714,    0, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1715,
     1715,    0, 1715,    0, 1715, 1715, 1715, 1715, 1715, 1715,
     1715,    0, 1715, 1715, 1715, 1715,    0, 1715, 1715, 1715,
     1715, 1715,    0, 1715,    0, 1715, 1715, 1715, 1715, 1715,
     1715, 1715, 1715, 1715, 1716,    0,    0, 1716,    0,    0,
        0,    0,    0, 1716,    0,    0,    0,    0, 1716, 1716,

        0, 1716,    0,    0,    0,    0,    0, 1716,    0,    0,
     1716, 1716, 1716, 1717, 1717,    0, 1717,    0, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717,    0, 1717,    0, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1718, 1718,
        0, 1718,    0, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718,    0, 1718,    0, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1719,    0,    0, 1719,    0,    0,    0,
        0,    0, 1719,    0,    0, 1719, 1719, 1719,    0,    0,

        0,    0, 1719, 1720, 1720,    0, 1720, 1720, 1720, 1720,
     1720, 1720, 1720,    0,    0, 1720, 1720, 1720, 1720, 1720,
     1720, 1720, 1720, 1720, 1720, 1720,    0, 1720,    0, 1720,
     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1721,    0,
     1721, 1721,    0,    0,    0,    0, 1721,    0,    0, 1721,
     1721, 1721,    0,    0,    0,    0, 1721, 1722,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1722,    0,    0, 1722, 1722, 1722,
        0,    0,    0,    0, 1722, 1723,    0, 1723, 1723,    0,
        0,    0,    0, 1723,    0,    0, 1723, 1723, 1723,    0,

        0,    0,    0, 1723, 1724,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1724,    0,    0, 1724, 1724, 1724,    0,    0,    0,
        0, 1724, 1725, 1725,    0, 1725, 1725, 1725, 1725, 1725,
     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725,
     1725, 1725, 1725, 1725, 1725,    0, 1725,    0, 1725, 1725,
     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1726,    0,    0,
     1726,    0,    0,    0,    0,    0, 1726,    0,    0, 1726,
     1726, 1726,    0,    0,    0,    0, 1726, 1727, 1727,    0,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,

     1727, 1727,    0, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727,    0, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1728, 1728,    0, 1728, 1728, 1728, 1728, 1728,
     1728, 1728, 1728, 1728,    0, 1728, 1728, 1728, 1728, 1728,
     1728, 1728, 1728, 1728, 1728,    0, 1728,    0, 1728, 1728,
     1728, 1728, 1728, 1728, 1728, 1728, 1728, 1730,    0,    0,
        0,    0,    0,    0,    0, 1730,    0, 1730, 1730, 1730,
     1730, 1730,    0,    0, 1730,    0, 1730,    0,    0, 1730,
     1730, 1730,    0,    0,    0,    0, 1730, 1731,    0, 1731,
     1731, 1731, 1731, 1731,    0,    0, 1731,    0, 1731,    0,

        0, 1731, 1731, 1731,    0,    0,    0,    0, 1731, 1732,
        0,    0, 1732,    0,    0,    0, 1732,    0, 1732,    0,
        0, 1732, 1732, 1732,    0,    0,    0,    0, 1732, 1733,
     1733,    0, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
     1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
     1733, 1733, 1733, 1733,    0, 1733, 1733, 1733, 1733, 1733,
     1733, 1733, 1733, 1733, 1734, 1734, 1734, 1734, 1734, 1734,
     1734, 1734, 1734, 1734,    0,    0, 1734, 1734, 1734, 1734,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1735,

     1735,    0, 1735, 1735, 1735, 1735, 1735, 1735,    0, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,    0,
        0, 1735, 1735, 1735,    0,    0, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1736, 1736,    0,    0,    0,    0,
     1736,    0,    0, 1736, 1736, 1736,    0,    0,    0,    0,
     1736, 1737, 1737,    0, 1737, 1737, 1737, 1737,    0, 1737,
     1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737,
     1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737,
     1737, 1737, 1737, 1737, 1737, 1737, 1738, 1738,    0, 1738,
        0,    0,    0,    0,    0, 1738,    0,    0, 1738, 1738,

     1738, 1739,    0, 1739, 1739,    0, 1739,    0,    0,    0,
        0, 1739, 1739,    0,    0, 1739, 1739, 1739, 1740,    0,
        0, 1740,    0, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1741, 1741,    0, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1742,    0,
        0, 1742,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1742,    0,    0, 1742, 1742, 1742, 1744,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1744,    0, 1744,
        0, 1744, 1744,    0,    0,    0,    0, 1744,    0,    0,
     1744, 1744, 1744,    0,    0, 1744, 1745,    0,    0, 1745,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1745,
        0,    0, 1745, 1745, 1745, 1745, 1746, 1746,    0, 1746,
     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,

     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1749,    0,    0, 1749,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1749, 1749,    0, 1749, 1749, 1749,
     1749, 1750,    0,    0, 1750,    0,    0,    0, 1750,    0,
     1750, 1750, 1750, 1750, 1750,    0,    0,    0, 1750, 1750,
     1750,    0, 1750, 1750, 1750,    0,    0,    0,    0, 1750,
     1751,    0,    0, 1751,    0,    0,    0, 1751,    0, 1751,
     1751, 1751, 1751, 1751,    0,    0,    0, 1751, 1751, 1751,
        0, 1751, 1751, 1751,    0,    0,    0,    0, 1751, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1754,    0, 1754,    0,    0,    0,
     1754,    0,    0, 1754, 1754, 1754,    0,    0,    0,    0,
     1754, 1755,    0,    0, 1755,    0,    0,    0, 1755,    0,
     1755, 1755, 1755, 1755, 1755,    0,    0,    0, 1755, 1755,
     1755,    0, 1755, 1755, 1755,    0,    0,    0,    0, 1755,
     1756,    0,    0, 1756,    0,    0,    0, 1756,    0, 1756,
     1756, 1756, 1756, 1756,    0,    0,    0, 1756, 1756, 1756,

        0, 1756, 1756, 1756,    0,    0,    0,    0, 1756, 1757,
     1757,    0, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1758, 1758,    0,    0, 1758,    0,
        0,    0, 1758,    0, 1758, 1758, 1758, 1758, 1758,    0,
     1758,    0, 1758, 1758, 1758,    0, 1758, 1758, 1758,    0,
        0,    0,    0, 1758, 1759, 1759,    0,    0, 1759,    0,
        0,    0, 1759,    0, 1759, 1759, 1759, 1759, 1759,    0,
     1759,    0, 1759, 1759, 1759,    0, 1759, 1759, 1759,    0,

        0,    0,    0, 1759, 1760, 1760, 1760, 1760, 1760, 1760,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1761,
        0,    0, 1761,    0,    0,    0,    0,    0, 1761,    0,
        0,    0,    0,    0,    0,    0, 1761,    0,    0,    0,
        0,    0, 1761,    0,    0, 1761, 1761, 1761,    0,    0,
        0,    0, 1761, 1762,    0,    0,    0,    0,    0, 1762,
        0,    0, 1762, 1762, 1762,    0,    0,    0,    0, 1762,
     1763,    0,    0, 1763,    0,    0,    0, 1763,    0, 1763,

     1763, 1763, 1763, 1763,    0,    0,    0, 1763, 1763, 1763,
        0, 1763, 1763, 1763,    0,    0,    0,    0, 1763, 1764,
        0,    0, 1764,    0,    0,    0, 1764,    0, 1764, 1764,
     1764, 1764, 1764,    0,    0,    0, 1764, 1764, 1764,    0,
     1764, 1764, 1764,    0,    0,    0,    0, 1764, 1765, 1765,
     1765, 1765,    0,    0, 1765,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1765, 1765,    0,    0,    0,
        0, 1765,    0,    0, 1765, 1765, 1765,    0,    0,    0,
        0, 1765, 1766, 1766, 1766, 1766,    0,    0, 1766,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1766,    0,    0,    0,    0, 1766,    0,    0, 1766, 1766,
     1766,    0,    0,    0,    0, 1766, 1767, 1767, 1767, 1767,
        0,    0, 1767,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1767, 1767,    0,    0,    0,    0, 1767,
        0,    0, 1767, 1767, 1767,    0,    0,    0,    0, 1767,
     1768,    0,    0,    0,    0,    0, 1768,    0,    0, 1768,
     1768, 1768,    0,    0,    0,    0, 1768, 1770,    0, 1770,
        0,    0,    0,    0,    0, 1770,    0,    0, 1770, 1770,
     1770,    0,    0,    0,    0, 1770, 1771, 1771,    0, 1771,
     1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771,    0, 1771,

     1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771,
     1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771,
     1771, 1773,    0,    0,    0,    0,    0, 1773,    0,    0,
     1773, 1773, 1773,    0,    0,    0,    0, 1773, 1774, 1774,
     1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774,
     1774, 1774, 1774, 1774, 1774, 1774,    0, 1774, 1774, 1774,
     1774, 1774,    0, 1774, 1774,    0,    0, 1774, 1774, 1774,
     1774, 1774, 1774, 1778,    0,    0,    0,    0,    0,    0,
        0, 1778,    0, 1778, 1778, 1778, 1778, 1778,    0,    0,
     1778,    0, 1778,    0,    0, 1778, 1778, 1778,    0,    0,

        0,    0, 1778, 1779,    0,    0, 1779,    0,    0,    0,
     1779,    0, 1779,    0,    0, 1779, 1779, 1779,    0,    0,
        0,    0, 1779, 1780,    0, 1780, 1780, 1780, 1780, 1780,
        0,    0, 1780,    0, 1780,    0,    0, 1780, 1780, 1780,
        0,    0,    0,    0, 1780, 1781, 1781,    0, 1781, 1781,
     1781, 1781, 1781, 1781, 1781, 1781, 1781, 1781, 1781, 1781,
     1781, 1781, 1781, 1781, 1781, 1781, 1781, 1781, 1781, 1781,
     1781, 1781, 1781, 1781, 1781, 1781, 1781, 1781, 1781, 1781,
     1782,    0,    0, 1782,    0,    0,    0,    0,    0, 1782,
        0,    0, 1782, 1782, 1782, 1783,    0, 1783,    0, 1783,

     1783,    0, 1783,    0,    0,    0,    0, 1783, 1783,    0,
        0, 1783, 1783, 1783, 1784, 1784,    0, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1786,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1786,
        0, 1786,    0, 1786, 1786,    0,    0,    0,    0, 1786,
        0,    0, 1786, 1786, 1786,    0,    0, 1786, 1787,    0,
        0, 1787,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 1787,    0,    0, 1787, 1787, 1787, 1787, 1788, 1788,
        0, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1789, 1789,    0, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1791,    0,
        0, 1791,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 1791, 1791,    0, 1791, 1791, 1791, 1791, 1792, 1792,
        0, 1792,    0,    0,    0,    0,    0,    0,    0,    0,
     1792,    0, 1792, 1792,    0, 1792, 1792,    0,    0,    0,
     1792, 1792,    0,    0, 1792, 1792, 1792,    0, 1792, 1793,
        0,    0, 1793,    0,    0,    0, 1793,    0, 1793, 1793,
     1793, 1793, 1793,    0,    0,    0, 1793, 1793, 1793,    0,
     1793, 1793, 1793,    0,    0,    0,    0, 1793, 1794, 1794,
     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,

     1794, 1794, 1794, 1795,    0,    0, 1795,    0,    0,    0,
     1795,    0, 1795, 1795, 1795, 1795, 1795,    0,    0,    0,
     1795, 1795, 1795,    0, 1795, 1795, 1795,    0,    0,    0,
        0, 1795, 1796, 1796,    0, 1796, 1796, 1796, 1796, 1796,
     1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796,
     1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796, 1796,
     1796, 1796, 1796, 1796, 1796, 1796, 1796, 1797, 1797,    0,
        0, 1797,    0,    0,    0, 1797,    0, 1797, 1797, 1797,
     1797, 1797,    0, 1797,    0, 1797, 1797, 1797,    0, 1797,
     1797, 1797,    0,    0,    0,    0, 1797, 1798,    0,    0,

     1798,    0,    0,    0, 1798,    0, 1798, 1798, 1798, 1798,
     1798,    0,    0,    0, 1798, 1798, 1798,    0, 1798, 1798,
     1798,    0,    0,    0,    0, 1798, 1800, 1800, 1800, 1800,
        0,    0, 1800,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1800, 1800,    0,    0,    0,    0, 1800,
        0,    0, 1800, 1800, 1800,    0,    0,    0,    0, 1800,
     1801, 1801, 1801, 1801,    0,    0, 1801,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1801,    0,
        0,    0,    0, 1801,    0,    0, 1801, 1801, 1801,    0,
        0,    0,    0, 1801, 1802,    0, 1802,    0,    0,    0,

        0,    0, 1802,    0,    0, 1802, 1802, 1802,    0,    0,
        0,    0, 1802, 1803, 1803,    0, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803,    0, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1804,    0,
        0,    0,    0,    0, 1804,    0,    0, 1804, 1804, 1804,
        0,    0,    0,    0, 1804, 1805,    0,    0,    0,    0,
        0,    0,    0, 1805,    0, 1805, 1805, 1805, 1805, 1805,
        0,    0, 1805,    0, 1805,    0,    0, 1805, 1805, 1805,
        0,    0,    0,    0, 1805, 1806,    0, 1806, 1806, 1806,

     1806, 1806,    0,    0, 1806,    0, 1806,    0,    0, 1806,
     1806, 1806,    0,    0,    0,    0, 1806, 1807, 1807,    0,
     1807,    0,    0,    0,    0,    0, 1807,    0,    0, 1807,
     1807, 1807, 1808,    0, 1808,    0, 1808, 1808,    0, 1808,
        0,    0,    0,    0, 1808, 1808,    0,    0, 1808, 1808,
     1808, 1809, 1809,    0, 1809, 1809, 1809, 1809, 1809, 1809,
     1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809,
     1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809,
     1809, 1809, 1809, 1809, 1809, 1809, 1810, 1810, 1810, 1810,
        0,    0, 1810,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1810, 1810,    0,    0,    0,    0, 1810,
        0,    0, 1810, 1810, 1810,    0,    0,    0,    0, 1810,
     1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811,
     1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811,    0, 1811,
     1811, 1811, 1811, 1811,    0, 1811, 1811,    0, 1811,    0,
     1811, 1811, 1811, 1811, 1811, 1812, 1812,    0, 1812, 1812,
     1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812,
     1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812,
     1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812,
     1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813,

     1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813,    0, 1813,
     1813, 1813, 1813, 1813,    0, 1813, 1813,    0,    0,    0,
     1813, 1813, 1813, 1813, 1813, 1814, 1814, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814,
     1814, 1814, 1814,    0, 1814, 1814, 1814, 1814, 1814,    0,
     1814, 1814,    0,    0,    0, 1814, 1814, 1814, 1814, 1814,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,    0, 1815,
     1815, 1815, 1815, 1815,    0, 1815, 1815,    0,    0,    0,
     1815, 1815, 1815, 1815, 1815, 1816, 1816, 1816, 1816, 1816,

     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816,    0, 1816, 1816, 1816, 1816, 1816,    0,
     1816, 1816,    0,    0,    0, 1816, 1816, 1816, 1816, 1816,
     1817, 1817,    0, 1817, 1817, 1817, 1817, 1817, 1817, 1817,
     1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817,
     1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817,
     1817, 1817, 1817, 1817, 1817, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2020 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <QFile>
#include <QStack>
#include <QVector>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <cite.h>
#include <condparser.h>
#include <config.h>
#include <default_args.h>
#include <doxy_globals.h>
#include <entry.h>
#include <formula.h>
#include <index.h>
#include <language.h>
#include <membergroup.h>
#include <message.h>
#include <outputlist.h>
#include <parse_base.h>
#include <parse_cstyle.h>
#include <parse_md.h>
#include <util.h>

#define YY_NO_INPUT 1
#define YY_NEVER_INTERACTIVE 1

// forward declarations
static bool handleBrief(const QString &str, const QStringList &list);
static bool handleFn(const QString &str, const QStringList &list);
static bool handleProperty(const QString &str, const QStringList &list);
static bool handleDef(const QString &str, const QStringList &list);
static bool handleOverload(const QString &str, const QStringList &list);
static bool handleEnum(const QString &str, const QStringList &list);
static bool handleDefGroup(const QString &str, const QStringList &list);
static bool handleAddToGroup(const QString &str, const QStringList &list);
static bool handleWeakGroup(const QString &str, const QStringList &list);
static bool handleNamespace(const QString &str, const QStringList &list);
static bool handlePackage(const QString &str, const QStringList &list);
static bool handleClass(const QString &str, const QStringList &list);
static bool handleConcept(const QString &str, const QStringList &list);
static bool handleHeaderFile(const QString &str, const QStringList &list);
static bool handleProtocol(const QString &str, const QStringList &list);
static bool handleCategory(const QString &str, const QStringList &list);
static bool handleUnion(const QString &str, const QStringList &list);
static bool handleStruct(const QString &str, const QStringList &list);;
static bool handleInterface(const QString &str, const QStringList &list);
static bool handleIdlException(const QString &str, const QStringList &list);
static bool handlePage(const QString &str, const QStringList &list);
static bool handleMainpage(const QString &str, const QStringList &list);
static bool handleFile(const QString &str, const QStringList &list);
static bool handleDir(const QString &str, const QStringList &list);
static bool handleExample(const QString &str, const QStringList &list);
static bool handleDetails(const QString &str, const QStringList &list);

static bool handleName(const QString &str, const QStringList &list);
static bool handleTodo(const QString &str, const QStringList &list);
static bool handleTest(const QString &str, const QStringList &list);
static bool handleBug(const QString &str, const QStringList &list);
static bool handleSubpage(const QString &str, const QStringList &list);
static bool handleDeprecated(const QString &str, const QStringList &list);
static bool handleXRefItem(const QString &str, const QStringList &list);
static bool handleRelated(const QString &str, const QStringList &list);
static bool handleRelatedAlso(const QString &str, const QStringList &list);
static bool handleMemberOf(const QString &str, const QStringList &list);
static bool handleRefItem(const QString &str, const QStringList &list);
static bool handleSection(const QString &str, const QStringList &list);
static bool handleAnchor(const QString &str, const QStringList &list);
static bool handleCite(const QString &str, const QStringList &list);
static bool handleFormatBlock(const QString &str, const QStringList &list);
static bool handleAddIndex(const QString &str, const QStringList &list);;
static bool handleIf(const QString &str, const QStringList &list);
static bool handleIfNot(const QString &str, const QStringList &list);
static bool handleElseIf(const QString &str, const QStringList &list);
static bool handleElse(const QString &str, const QStringList &list);
static bool handleEndIf(const QString &str, const QStringList &list);
static bool handleIngroup(const QString &str, const QStringList &list);
static bool handleNoSubGrouping(const QString &str, const QStringList &list);
static bool handleShowInitializer(const QString &str, const QStringList &list);
static bool handleHideInitializer(const QString &str, const QStringList &list);
static bool handleCallgraph(const QString &str, const QStringList &list);
static bool handleHideCallgraph(const QString &str, const QStringList &list);
static bool handleCallergraph(const QString &str, const QStringList &list);
static bool handleHideCallergraph(const QString &str, const QStringList &list);
static bool handleReferencedByRelation(const QString &str, const QStringList &list);
static bool handleHideReferencedByRelation(const QString &str, const QStringList &list);
static bool handleReferencesRelation(const QString &str, const QStringList &list);
static bool handleHideReferencesRelation(const QString &str, const QStringList &list);
static bool handleInternal(const QString &str, const QStringList &list);
static bool handleLineBr(const QString &str, const QStringList &list);
static bool handleStatic(const QString &str, const QStringList &list);
static bool handlePure(const QString &str, const QStringList &list);
static bool handlePrivate(const QString &str, const QStringList &list);
static bool handlePrivateSection(const QString &str, const QStringList &list);
static bool handleProtected(const QString &str, const QStringList &list);
static bool handleProtectedSection(const QString &str, const QStringList &list);
static bool handlePublic(const QString &str, const QStringList &list);
static bool handlePublicSection(const QString &str, const QStringList &list);
static bool handleToc(const QString &str, const QStringList &list);
static bool handleInherit(const QString &str, const QStringList &list);
static bool handleExtends(const QString &str, const QStringList &list);
static bool handleCopyDoc(const QString &str, const QStringList &list);
static bool handleCopyBrief(const QString &str, const QStringList &list);
static bool handleCopyDetails(const QString &str, const QStringList &list);
static bool handleParBlock(const QString &str, const QStringList &list);
static bool handleEndParBlock(const QString &str, const QStringList &list);
//   static void handleGuard(const QString &str, const QStringList &list);
static bool handleParam(const QString &str, const QStringList &list);
static bool handleRetval(const QString &str, const QStringList &list);

static void checkFormula();

using DocCmdFunc = bool (*)(const QString &str, const QStringList &list);

struct DocCmdMap
{
   DocCmdMap(const char *x1, DocCmdFunc x2, bool x3) {
      cmdName   = QString::fromUtf8(x1);
      handler   = x2;
      endsBrief = x3;
   }

   QString cmdName;
   DocCmdFunc handler;
   bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            false },
  { "short",           &handleBrief,            false },
  { "fn",              &handleFn,               false },
  { "var",             &handleFn,               false },
  { "typedef",         &handleFn,               false },
  { "property",        &handleProperty,         false },
  { "def",             &handleDef,              false },
  { "overload",        &handleOverload,         false },
  { "enum",            &handleEnum,             false },
  { "defgroup",        &handleDefGroup,         false },
  { "group",           &handleDefGroup,         false },
  { "addtogroup",      &handleAddToGroup,       false },
  { "weakgroup",       &handleWeakGroup,        false },
  { "namespace",       &handleNamespace,        false },
  { "package",         &handlePackage,          false },
  { "class",           &handleClass,            false },
  { "concept",         &handleConcept,          false },
  { "headerfile",      &handleHeaderFile,       false },
  { "protocol",        &handleProtocol,         false },
  { "category",        &handleCategory,         false },
  { "union",           &handleUnion,            false },
  { "struct",          &handleStruct,           false },
  { "interface",       &handleInterface,        false },
  { "idlexcept",       &handleIdlException,     false },
  { "page",            &handlePage,             false },
  { "mainpage",        &handleMainpage,         false },
  { "file",            &handleFile,             false },
  { "dir",             &handleDir,              false },
  { "example",         &handleExample,          false },
  { "details",         &handleDetails,          true  },
  { "name",            &handleName,             false },
  { "todo",            &handleTodo,             false }, // end brief will be done differently
  { "test",            &handleTest,             false }, // end brief will be done differently
  { "bug",             &handleBug,              false }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       false }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         false }, // end brief will be done differently
  { "related",         &handleRelated,          true  },
  { "relates",         &handleRelated,          true  },
  { "relatedalso",     &handleRelatedAlso,      true  },
  { "relatesalso",     &handleRelatedAlso,      true  },
  { "parblock",        &handleParBlock,         true  },
  { "endparblock",     &handleEndParBlock,      true  },
  { "refitem",         &handleRefItem,          true  },
  { "cite",            &handleCite,             false },
  { "subpage",         &handleSubpage,          true  },
  { "section",         &handleSection,          true  },
  { "subsection",      &handleSection,          true  },
  { "subsubsection",   &handleSection,          true  },
  { "paragraph",       &handleSection,          true  },
  { "anchor",          &handleAnchor,           true  },
  { "verbatim",        &handleFormatBlock,      true  },
  { "latexonly",       &handleFormatBlock,      false },
  { "htmlonly",        &handleFormatBlock,      false },
  { "xmlonly",         &handleFormatBlock,      false },
  { "docbookonly",     &handleFormatBlock,      false },
  { "rtfonly",         &handleFormatBlock,      false },
  { "manonly",         &handleFormatBlock,      false },
  { "dot",             &handleFormatBlock,      true  },
  { "msc",             &handleFormatBlock,      true  },
  { "startuml",        &handleFormatBlock,      true  },
  { "code",            &handleFormatBlock,      true  },
  { "addindex",        &handleAddIndex,         false },
  { "if",              &handleIf,               false },
  { "ifnot",           &handleIfNot,            false },
  { "elseif",          &handleElseIf,           false },
  { "else",            &handleElse,             false },
  { "endif",           &handleEndIf,            false },
  { "ingroup",         &handleIngroup,          false },
  { "nosubgrouping",   &handleNoSubGrouping,    false },
  { "showinitializer", &handleShowInitializer,  false },
  { "hideinitializer", &handleHideInitializer,  false },
  { "callgraph",       &handleCallgraph,        false },
  { "hidecallgraph",   &handleHideCallgraph,    false },
  { "callergraph",     &handleCallergraph,      false },
  { "hidecallergraph", &handleHideCallergraph,  false },
  { "showrefby",       &handleReferencedByRelation,     false },
  { "hiderefby",       &handleHideReferencedByRelation, false },
  { "showrefs",        &handleReferencesRelation,       false },
  { "hiderefs",        &handleHideReferencesRelation,   false },
  { "internal",        &handleInternal,         true  },
  { "internal_linebr", &handleLineBr,           false },
  { "static",          &handleStatic,           false },
  { "pure",            &handlePure,             false },
  { "private",         &handlePrivate,          false },
  { "privatesection",  &handlePrivateSection,   false },
  { "protected",       &handleProtected,        false },
  { "protectedsection",&handleProtectedSection, false },
  { "public",          &handlePublic,           false },
  { "publicsection",   &handlePublicSection,    false },
  { "tableofcontents", &handleToc,              false },
  { "inherit",         &handleInherit,          true  },
  { "extends",         &handleExtends,          true  },
  { "implements",      &handleExtends,          true  },
  { "memberof",        &handleMemberOf,         true  },
  { "arg",             0,                       true  },
  { "attention",       0,                       true  },
  { "author",          0,                       true  },
  { "authors",         0,                       true  },
  { "copydoc",         &handleCopyDoc,          true  },
  { "copybrief",       &handleCopyBrief,        false },
  { "copydetails",     &handleCopyDetails,      true  },
  { "copyright",       0,                       true  },
  { "date",            0,                       true  },
  { "dotfile",         0,                       true  },
  { "htmlinclude",     0,                       false },
  { "image",           0,                       true  },
  { "include",         0,                       true  },
  { "includelineno",   0,                       true  },
  { "invariant",       0,                       true  },
  { "latexinclude",    0,                       false },
  { "li",              0,                       true  },
  { "line",            0,                       true  },
  { "note",            0,                       true  },
  { "par",             0,                       true  },
  { "param",           &handleParam,            true  },
  { "tparam",          0,                       true  },
  { "post",            0,                       true  },
  { "pre",             0,                       true  },
  { "remark",          0,                       true  },
  { "remarks",         0,                       true  },
  { "result",          0,                       true  },
  { "return",          0,                       true  },
  { "returns",         0,                       true  },
  { "exception",       0,                       true  },
  { "retval",          &handleRetval,           true  },
  { "sa",              0,                       true  },
  { "see",             0,                       true  },
  { "since",           0,                       true  },
  { "snippet",         0,                       true  },
  { "snippetlineno",   0,                       true  },
  { "throw",           0,                       true  },
  { "throws",          0,                       true  },
  { "until",           0,                       true  },
  { "verbinclude",     0,                       false },
  { "version",         0,                       true  },
  { "warning",         0,                       true  },
  { "rtfinclude",      0,                       false },
  { "docbookinclude",  0,                       false },
  { "maninclude",      0,                       false },
  { "xmlinclude",      0,                       false },
  { 0, 0, false }
};

//  Maps a command name (as found in a comment block) onto a specific handler function
class DocCmdMapper
{
  public:
    struct Cmd {
      DocCmdFunc func;
      bool endsBrief;
    };

    // maps a command name to a handler function
    static Cmd *map(const QString &name) {
      return instance()->find(name);
    }

    // release the instance
    static void freeInstance() {
      delete s_instance;
      s_instance = nullptr;
    }

  private:
    static DocCmdMapper *instance() {
      if (s_instance == nullptr) {
         s_instance = new DocCmdMapper;
      }

      return s_instance;
   }

   DocCmdMapper() {
      DocCmdMap *p = docCmdMap;

      while (! p->cmdName.isEmpty()) {
         if (m_map.contains(p->cmdName)) {
            err("DocCmdMapper: command %s already added\n", csPrintable(p->cmdName));
            Doxy_Work::stopDoxyPress();
         }

         Cmd *cmd       = new Cmd;
         cmd->func      = p->handler;
         cmd->endsBrief = p->endsBrief;

         m_map.insert(p->cmdName, cmd);
         ++p;
      }
   }

   Cmd *find(const QString &name) {
      return m_map.value(name);
   }

   QHash<QString, Cmd *> m_map;
   static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance = nullptr;

#define YY_NEVER_INTERACTIVE 1

enum XRefKind {
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext {
  OutputMainDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType {
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
 public:
   GuardedSection(bool enabled, bool parentVisible)
      : m_enabled(enabled), m_parentVisible(parentVisible) {}

   bool isEnabled() const {
      return m_enabled;
   }

   bool parentVisible() const {
      return m_parentVisible;
   }

 private:
   bool m_enabled;
   bool m_parentVisible;
};

void openGroup(QSharedPointer<Entry> e, const QString &file, int line);
void closeGroup(QSharedPointer<Entry> e, const QString &file, int line, bool foundInline = false);
void initGroupInfo(QSharedPointer<Entry> e);
static void groupAddDocs(QSharedPointer<Entry> e);

static QString          s_inputString;         // input string
static int              s_inputPosition;       // read pointer
static int              s_prevPosition;
static char            *s_bufferPosition;

static QString          yyFileName;            // file name that is read from
static int              yyLineNr;              // line number in the input
static bool             inBody;                // was the comment found inside the body of a function?
static OutputContext    inContext;             // are we inside the brief, details or xref part
static bool             briefEndsAtDot;        // does the brief description stop at a dot
static QString          formulaText;           // Running text of a formula
static QString          formulaEnv;            // environment name
static int              formulaNewLines;       // amount of new lines in the formula

static QString          s_outputXRef;          // tmp argument of todo/test/../xrefitem commands
static QString          s_blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;              // kind of cross-reference command
static XRefKind         newXRefKind;
static GuardType        s_guardType;           // kind of guard for conditional section
static bool             s_isEnabledSection;
static QString          s_functionProto;       // function prototype

static bool             s_needNewEntry;
// static int              s_docBlockContext;

static QString          s_sectionLabel;
static QString          s_sectionTitle;
static int              s_sectionLevel;
static QString          xrefItemKey;
static QString          newXRefItemKey;
static QString          xrefItemTitle;
static QString          xrefListTitle;
static Protection       s_protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             s_parseMore;

static int              s_condCount;
static int              s_commentCount;
static QString          s_spaceBeforeCmd;
static QString          s_spaceBeforeIf;
static QString          s_copyDocArg;
static QString          s_guardExpr;
static int              s_roundCount;
static bool             s_insideParBlock;

static int              s_memberGroupId = DOX_NOGROUP;
static QString          s_memberGroupHeader;
static QString          s_memberGroupDocs;
static QString          s_memberGroupRelates;
static QString          s_compoundName;

static bool             s_internalDocs;
static bool             s_processInternalDocs = false;

static ParserInterface        *langParser;        // the language parser calling us

static QSharedPointer<Entry>  s_docsEntry;        // which entry
static EntryKey               s_docsEnum;         // which enum in EntryKey (brief, main, inbody)

static QStack<GuardedSection> s_guards;           // tracks nested conditional sections (if, ifnot, ..)
static QSharedPointer<Entry>  current;            // working entry

static QStack<QSharedPointer<Grouping>> s_autoGroupStack;

static void initParser()
{
   s_sectionLabel.resize(0);
   s_sectionTitle.resize(0);
   s_memberGroupHeader.resize(0);

   s_insideParBlock = false;
   s_internalDocs   = Config::getBool("internal-docs");
}

static bool getDocSectionName(int s)
{
  switch(s) {
    case Entry::CATEGORYDOC_SEC:
    case Entry::CLASSDOC_SEC:
    case Entry::CONCEPTDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::MEMBERGRP_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
      return true;

    default:
      return false;
  }
}

static bool makeStructuralIndicator(Entry::Sections s)
{
   if (getDocSectionName(current->section)) {
      return true;

   } else {
      s_needNewEntry     = true;
      current->section   = s;
      current->startLine = yyLineNr;

      current->setData(EntryKey::File_Name, yyFileName);

      return false;
   }
}
static void lineCount()
{
   for (const char *c = commentscanYYtext ; *c ; ++c) {
      yyLineNr += (*c == '\n') ;
   }
}

static QString stripQuotes(const QString &s)
{
   QString name = s;

   if (name.isEmpty()) {
      return name;
   }

   if (name.at(0) == '"' && name.at(name.length() - 1) == '"') {
      name = name.mid(1, name.length() - 2);
   }

   return name;
}

static void addXRefItem(const QString &listName, const QString &itemTitle, const QString &listTitle, bool append)
{
   QSharedPointer<Entry> docEntry = current; // inBody && previous ? previous : current;

   if (listName.isEmpty()) {
      return;
   }

   auto refList = Doxy_Globals::xrefLists.find(listName);

   if (refList == Doxy_Globals::xrefLists.end()) {
      // new list
      Doxy_Globals::xrefLists.insert(listName, RefList(listName, listTitle, itemTitle));
      refList = Doxy_Globals::xrefLists.find(listName);
   }

   ListItemInfo *listItem = nullptr;

   for (auto &item : docEntry->m_specialLists) {
      listItem = &item;

      if (listItem->type == listName) {
         break;
      }
   }

   if (listItem && append) {
      // already found item of same type just before this one

      RefItem *item = refList->getRefItem(listItem->itemId);
      assert(item != 0);

      item->text += " <p>";
      item->text += s_outputXRef;

   } else {
      // new item

      int itemId  = refList->addRefItem();

      // if we have already an item from the same list type (e.g. a second @todo)
      // in the same Entry (i.e. lii!=0) then we reuse its link anchor.

      QString anchorLabel = QString("_%1%2").formatArg(listName).formatArg(itemId, 6, 10, QChar('0'));

      RefItem *item = refList->getRefItem(itemId);
      assert(item != 0);

      item->text       = s_outputXRef;
      item->listAnchor = anchorLabel;

      docEntry->addSpecialListItem(listName, itemId);

      QString cmdString = QString(" \\xrefitem %1 %2.").formatArg(listName).formatArg(itemId);

      if (inBody) {
         docEntry->appendData(EntryKey::Inbody_Docs, cmdString);
      } else {
         docEntry->appendData(EntryKey::Main_Docs,   cmdString);
      }

      QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorLabel);

      if (si) {
         if (si->lineNr != -1) {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s, line %d)",
                  csPrintable(anchorLabel), csPrintable(si->fileName), si->lineNr);

         } else {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s)",
                  csPrintable(anchorLabel), csPrintable(si->fileName));
         }

      } else {
         si = QMakeShared<SectionInfo>(listName, yyLineNr, anchorLabel, s_sectionTitle, SectionInfo::Anchor, s_sectionLevel);
         Doxy_Globals::sectionDict.insert(anchorLabel, si);
         docEntry->m_anchors.append(*si);
      }
   }

   s_outputXRef.clear();
}

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QString addFormula()
{
   QString formLabel;
   QString fText = formulaText.simplified();

   auto f = Doxy_Globals::formulaDict.find(fText);

   if (f == Doxy_Globals::formulaDict.end()) {
      Formula temp = Formula(fText);

      Doxy_Globals::formulaList.append(temp);
      Doxy_Globals::formulaDict.insert(fText, temp);

      formLabel = QString("\\form#%1").formatArg(temp.getId());

      Doxy_Globals::formulaNameDict.insert(formLabel, temp);
      f = Doxy_Globals::formulaDict.find(fText);

   } else {
      formLabel = QString("\\form#%1").formatArg(f->getId());

   }

   for (int i = 0; i < formulaNewLines; i++) {
      formLabel += "@_fakenl";   // add fake newlines to
   }

   // keep the warnings correctly aligned
   return formLabel;
}

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level >= 0 && level < 5) {
      return (SectionInfo::SectionType)level;
   }

   return SectionInfo::Anchor;
}

static void addSection()
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(s_sectionLabel);

   if (si) {
      if (si->lineNr != -1) {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName), si->lineNr);

      } else {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName));
      }

   } else {
      // create a new section element
      s_sectionTitle += QString::fromUtf8(commentscanYYtext).trimmed();

      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, s_sectionLabel, s_sectionTitle,
                  sectionLevelToType(s_sectionLevel), s_sectionLevel);

      // add section to this entry
      current->m_anchors.append(*si);

      // add section to the global dictionary
      Doxy_Globals::sectionDict.insert(s_sectionLabel, si);

      // for a section the si->fileName is the physical file name. this will be replaced with the section name
      // in doctokenizer processSection()
   }
}

static void addCite()
{
   QString text = QString::fromUtf8(commentscanYYtext);
   if (text.startsWith('"')) {
      text.chop(1);
      text = text.mid(1);
   }

   Doxy_Globals::citeDict.insert(text);
}

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QString &s)
{
   int len = s.length();

   int i = len - 1;
   QChar c;

   while (i >= 0 && ((c = s.at(i)) == ' ' || c == '\t' || c == '\r')) {
      i--;
   }

   if (i != len - 1) {
      // string up to and including char at pos i and \0 terminator
      s.resize(i + 2);
   }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
   bool xrefAppendToPrev = xrefAppendFlag;

   // determine append flag for the next item (i.e. the end of this item)
   xrefAppendFlag = ! inBody &&
                    inContext == OutputXRef && ctx == OutputXRef &&    // two consecutive xref items
                    newXRefKind == xrefKind &&                         // of the same kind
                    (xrefKind != XRef_Item ||
                    newXRefItemKey == xrefItemKey);                    // with the same key if \xrefitem

   if (inContext == OutputXRef) {

      // end of XRef section => add the item
      // See if we can append this new xref item to the previous one.
      // We know this at the start of the next item of the same
      // type and need to remember this until the end of that item.

    switch(xrefKind) {
         case XRef_Todo:
            addXRefItem("todo", theTranslator->trTodo(), theTranslator->trTodoList(), xrefAppendToPrev);
            break;

         case XRef_Test:
            addXRefItem("test", theTranslator->trTest(), theTranslator->trTestList(), xrefAppendToPrev);
            break;

         case XRef_Bug:
            addXRefItem("bug", theTranslator->trBug(), theTranslator->trBugList(), xrefAppendToPrev);
            break;

         case XRef_Deprecated:
            // ensure the current entry is marked
            current->m_traits.setTrait(Entry::Virtue::Deprecated);

            addXRefItem("deprecated", theTranslator->trDeprecated(), theTranslator->trDeprecatedList(), xrefAppendToPrev);
            break;

         case XRef_Item:
            // user defined list
            addXRefItem(xrefItemKey, xrefItemTitle, xrefListTitle, xrefAppendToPrev);
            break;

         case XRef_None:
            assert(0);
            break;
      }
   }

  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;

   if (inContext != OutputXRef && inBody) {
      inContext = OutputInbody;
   }

  switch(inContext) {
      case OutputMainDoc:
         if (oldContext != inContext) {

            QString tmpDocs = current->getData(EntryKey::Main_Docs);
            stripTrailingWhiteSpace(tmpDocs);
            current->setData(EntryKey::Main_Docs, tmpDocs);

            if (current->getData(EntryKey::MainDocs_File).isEmpty()) {
               current->setData(EntryKey::MainDocs_File, yyFileName);
               current->docLine = yyLineNr;
            }
         }

         s_docsEntry = current;
         s_docsEnum  = EntryKey::Main_Docs;

         break;

      case OutputBrief:
         if (oldContext != inContext) {
            if (current->getData(EntryKey::Brief_File).isEmpty()) {
               current->setData(EntryKey::Brief_File, yyFileName);
               current->briefLine = yyLineNr;
            }
         }

         if (current->getData(EntryKey::Brief_Docs).trimmed().isEmpty())  {
            // only want one brief description even if multiple are given
            s_docsEntry = current;
            s_docsEnum  = EntryKey::Brief_Docs;

         } else {
            s_docsEntry  = current;
            s_docsEnum   = EntryKey::Main_Docs;

            inContext    = OutputMainDoc;             // need to switch to detailed docs
         }
         break;

      case OutputInbody:
         s_docsEntry = current;
         s_docsEnum  = EntryKey::Inbody_Docs;
         break;

      case OutputXRef:
         // indicates s_outputXRef should be used for the output string
         s_docsEntry = QSharedPointer<Entry>();

         break;
   }
}

static void addAnchor(const QString &anchorName)
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorName);

   if (si) {
      // anchor name already exists
      si->dupAnchor_cnt++;

   } else {
      // title is empty, level is zero
      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, anchorName, QString(""), SectionInfo::Anchor, 0);
      si->dupAnchor_fName = yyFileName;

      Doxy_Globals::sectionDict.insert(anchorName, si);
      current->m_anchors.append(*si);
   }
}

// add a string to one of the three doc outputs
static void addToOutput(const QString &str)
{
   if (s_docsEntry == nullptr) {
      // indicates s_outputXRef should be used for the output string
      s_outputXRef += str;

   } else {
      s_docsEntry->appendData(s_docsEnum, str);
   }
}

static void addToOutput(QChar c)
{
   if (s_docsEntry == nullptr) {
      // indicates s_outputXRef should be used for the output string
      s_outputXRef += c;

   } else {
      s_docsEntry->appendData(s_docsEnum, c);
   }
}

static void endBrief(bool isOutput = true)
{
   if (! current->getData(EntryKey::Brief_Docs).trimmed().isEmpty()) {
      // only go to the detailed description if we found a brief description and not just whitespace

      briefEndsAtDot = false;
      setOutput(OutputMainDoc);

      if (isOutput) {
         QString text = QString::fromUtf8(commentscanYYtext);
         addToOutput(text);
      }
   }
}

static void handleGuard(const QString &expr);

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
   s_bufferPosition = buf;
   s_prevPosition   = s_inputPosition;

   //
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

/* start command character */
#define YY_NO_UNISTD_H 1
/* comment parsing states */

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define ConceptDocArg1 9
#define ConceptDocArg2 10
#define XRefItemParam1 11
#define XRefItemParam2 12
#define XRefItemParam3 13
#define FileDocArg1 14
#define ParamArg1 15
#define EnumDocArg1 16
#define NameSpaceDocArg1 17
#define PackageDocArg1 18
#define GroupDocArg1 19
#define GroupDocArg2 20
#define SectionLabel 21
#define SectionTitle 22
#define SubpageLabel 23
#define SubpageTitle 24
#define FormatBlock 25
#define LineParam 26
#define GuardParam 27
#define GuardParamEnd 28
#define SkipGuardedSection 29
#define SkipInternal 30
#define NameParam 31
#define InGroupParam 32
#define FnParam 33
#define OverloadParam 34
#define InheritParam 35
#define ExtendsParam 36
#define ReadFormulaShort 37
#define ReadFormulaLong 38
#define AnchorLabel 39
#define HtmlComment 40
#define SkipLang 41
#define CiteLabel 42
#define CopyDoc 43
#define GuardExpr 44
#define CdataSection 45

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
  /* What can happen while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxy\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1561 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1560 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      // mail address
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // quoted text
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      // directory (or chain of commands)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
{
      // HTML command ends a brief description
      setOutput(OutputMainDoc);

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
{
      // HTML command that ends a brief description
      if (current->m_srcLang == SrcLangExt_CSharp) {
         setOutput(OutputMainDoc);
      }

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      // start of a .NET XML style brief description
      QString text = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputBrief);
      addToOutput(text);
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputMainDoc);
      addToOutput(text);
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
{
      // end of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);

      setOutput(OutputBrief);
      addToOutput(text);
      setOutput(OutputMainDoc);
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // end of a brief or detailed description
      QString text = QString::fromUtf8(commentscanYYtext);

      setOutput(OutputMainDoc);
      addToOutput(text);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      QString tag = QString::fromUtf8(commentscanYYtext);

      int s = tag.indexOf("id=");

      if (s != -1) {
         // command has id attribute
         QChar c = tag[s + 3];

         if (c == '\'' || c == '"') {
            // valid start
            int e = tag.indexOf(c,s + 4);

            if (e != -1) {
               // found matching end

               QString id = tag.mid(s + 4, e-s-4);   // extract id
               addAnchor(id);
            }
         }
      }

      addToOutput(tag);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      insidePre = true;
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      insidePre = false;
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      // RCS tag which end a brief description
      setOutput(OutputMainDoc);
      REJECT;
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      BEGIN(HtmlComment);
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      BEGIN(CdataSection);
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      addToOutput(" \\endinternal ");

      if (! s_processInternalDocs) {
         warn(yyFileName, yyLineNr, "Found \\endinternal without matching \\internal");
      }

      s_processInternalDocs = false;
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      // simulate calling addToOutPut()
      QString text = QString::fromUtf8(commentscanYYtext);
      s_docsEntry->appendData(EntryKey::Main_Docs, text);

   }
	YY_BREAK
case 20:
case 21:
YY_RULE_SETUP
{
      // might be a valid command
      QString text = QString::fromUtf8(commentscanYYtext);

      QStringView view = QStringView(text).trimmed();

      QString cmdName;
      QStringList optList;

      if (view.contains('{')) {
         // cmd { options }

         QString tmp = view.mid(1, 2).toLower();

         if (tmp == "f{")  {
            // handle "\f{" and "@f{" elsewhere
            REJECT;
         }

         static QRegularExpression regexp("[\\\\@](\\w+)\\s*{([^}]+)}");
         QRegularExpressionMatch match = regexp.match(view);

         // remove {CMD}
         cmdName = match.captured(1);
         optList = match.captured(2).split(',');

      } else {
         // no options
         cmdName = view.mid(1);

      }

      DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);

      if (cmdPtr) {
         // special action is required

         int i = 0;
         while (text[i] == ' ' || text[i] == '\t') {
            ++i;
         }

         s_spaceBeforeCmd = text.left(i);

         if (cmdPtr->endsBrief && ! (inContext == OutputXRef && cmdName == "parblock")) {
            briefEndsAtDot = false;

            // this command forces the end of brief description
            setOutput(OutputMainDoc);
         }

         if (cmdPtr->func && cmdPtr->func(cmdName, optList)) {
            // handler wants to stop and reenter this parser

            s_parseMore = true;

            s_inputPosition = s_prevPosition + (yy_bp - s_bufferPosition);
            yyterminate();

         } else if (cmdPtr->func == nullptr) {
            // command without handler is processed later by docparser
            addToOutput(text);
         }

      } else {
         // some command was found, just pass it on
         addToOutput(text);
      }
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      // escaped formula command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      // language switch command
      static const QString outputLanguage = Config::getEnum("output-language");

      QString text   = QString::fromUtf8(commentscanYYtext);
      QString langId = text.trimmed().mid(2);

      if (! langId.isEmpty() && outputLanguage.compare(langId, Qt::CaseInsensitive) != 0) {
         // enable language specific section
         BEGIN(SkipLang);
      }
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      // start of a formula with custom environment
      QString text = QString::fromUtf8(commentscanYYtext);

      // this command forces the end of brief description
      setOutput(OutputMainDoc);

      formulaText = "\\begin";
      formulaEnv = text.trimmed().mid(2);

      if (formulaEnv.at(formulaEnv.length() - 1) == '{') {
         // remove trailing open brace
         formulaEnv = formulaEnv.left(formulaEnv.length() - 1);
      }

      formulaText += formulaEnv;
      formulaNewLines = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      // start of a inline formula
      formulaText     = "$";
      formulaNewLines = 0;
      BEGIN(ReadFormulaShort);
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      // start of a block formula

      // this command forces the end of brief description
      setOutput(OutputMainDoc);

      formulaText      = "\\[";
      formulaNewLines  = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      // beginning of a group
      openGroup(current, yyFileName, yyLineNr);
   }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
      // end of a group
      QString text = QString::fromUtf8(commentscanYYtext);

      closeGroup(current, yyFileName, yyLineNr, true);

      s_memberGroupHeader.clear();
      s_parseMore    = true;
      s_needNewEntry = true;

      s_inputPosition = s_prevPosition + (yy_bp - s_bufferPosition) + text.length();
      yyterminate();
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      // escaped character
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      // normal word
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // explicit end autolist: e.g "  ."
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 32:
case 33:
YY_RULE_SETUP
{
      // start of autolist
      if (! Doxy_Globals::markdownSupport) {
         REJECT;

      } else {

         if (inContext != OutputXRef) {
            briefEndsAtDot = false;
            setOutput(OutputMainDoc);
         }

         QString text = QString::fromUtf8(commentscanYYtext);
         addToOutput(text);
      }
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      // start of autolist
      if (inContext != OutputXRef) {
         briefEndsAtDot = false;
         setOutput(OutputMainDoc);
      }

      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // horizontal line (dashed)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      // mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&mdash;");
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      // ndash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&ndash;");
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      // numbered item
      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext != OutputXRef) {
         // this command forces the end of brief description
         setOutput(OutputMainDoc);
      }

      addToOutput(text);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      // . at start or in the middle of a word, or ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      // . with escaped space
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text[0]);
      addToOutput(text[2]);
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      // . with comma such as "e.g.,"
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      // ellipsis with escaped space
      addToOutput("... ");
   }
	YY_BREAK
case 45:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // internal ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{
      // at least one blank line or blank line command

      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext == OutputXRef) {
         // need to put the newlines after ending the XRef section

         if (! s_insideParBlock) {
            setOutput(OutputMainDoc);
         }

         for (int i = 0; i < text.length();  ) {
            if (text[i] == '\n') {
               addToOutput('\n');
               ++i;

            } else if (text.mid(i) == "\\internal_linebr")  {
               addToOutput('\n');
               i += 8;

            } else  {
               ++i;
            }
         }

      } else if (inContext != OutputBrief) {

         for (int i = 0; i< text.length(); ) {
            if (text[i] == '\n') {
               addToOutput('\n');
               i++;

            } else if (text.mid(i) == "\\internal_linebr")  {
                addToOutput('\n');
                i += 8;

            } else  {
               i++;

            }
         }

         setOutput(OutputMainDoc);

      } else {
          // inContext == OutputBrief, switch from brief to main docs
         endBrief(false);
      }

      lineCount();
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      // potential end of a JavaDoc style comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);

      if (briefEndsAtDot) {
         briefEndsAtDot = false;
         setOutput(OutputMainDoc);
      }
   }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{
      // newline
      addToOutput('\n');
      yyLineNr++;
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      // utf-8 code point
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // catch all for anything else
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 51:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      // ignore unimportant characters
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // ignore every else
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 57:
YY_RULE_SETUP
{
      // the special XML characters for iwhich the CDATA section is especially used
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput('\\');
      addToOutput(text[0]);
   }
	YY_BREAK
case 58:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 60:
YY_RULE_SETUP
{
      // end of inline formula
      formulaText += "$";
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 61:
YY_RULE_SETUP
{
      // end of block formula
      formulaText += "\\]";
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
      // end of custom env formula
      formulaText += "\\end";
      formulaText += formulaEnv;
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 63:
YY_RULE_SETUP
{
      // any non-special character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text;
   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      formulaNewLines++;
      formulaText += text[0];
      yyLineNr++;
   }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
      // any other character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text[0];
   }
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\enum");

      addToOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 69:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text,".", "::");
      BEGIN( Comment );
   }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\namespace");

      addToOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 74:
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\package");
      addToOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 77:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(removeRedundantWhiteSpace(text),".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_entryName = substitute(text,".","::");
      if (current->section == Entry::PROTOCOLDOC_SEC) {
         current->m_entryName += "-p";
      }

      // prepend outer scope name
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text,".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\%s",
                  YY_START == ClassDocArg1 ? "class" : "category" );

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
      // second argument, include file
      QString text = QString::fromUtf8(commentscanYYtext);
      current->setData(EntryKey::Include_File, text);
      BEGIN( ClassDocArg3 );
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput('\n');

      if (text[0] == '\n')  {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      // third argument, include file name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->setData(EntryKey::Include_Name, text);
      BEGIN( Comment );
   }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] =='\n') {
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of concept command ------------------- */
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{
      // first argument, concept name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text,".","::");

      BEGIN( Comment );
   }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\concept");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of {def,add,weak} group commands --------- */
case 96:
YY_RULE_SETUP
{
      // group name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;

      // lastDefGroup.groupname = text;
      // lastDefGroup.pri = current->groupingPri();
      // the .html stuff is for Qt compatibility

      if (current->m_entryName.endsWith(".html")) {
         current->m_entryName = current->m_entryName.left(current->m_entryName.length() - 5);
      }

      current->setData(EntryKey::Member_Type, "");
      BEGIN(GroupDocArg2);
   }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing group name after %s", csPrintable(current->groupDocCmd()) );

      addToOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
      // title (stored in type)
      QString text = QString::fromUtf8(commentscanYYtext);
      current->appendData(EntryKey::Member_Type, text.trimmed());
   }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if ( current->groupDocType == Entry::GROUPDOC_NORMAL && current->getData(EntryKey::Member_Type).isEmpty()) {
            // defgroup requires second argument
            warn(yyFileName, yyLineNr, "Missing title after \\defgroup %s", csPrintable(current->m_entryName) );
      }

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 103:
YY_RULE_SETUP
{
      // first argument, page name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = stripQuotes(text);

      BEGIN( PageDocArg2 );
   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\page");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
      // second argument, page title
      QString text = QString::fromUtf8(commentscanYYtext);

      text = substitute(substitute(text, "@<","&lt;"),  "@>", "&gt;");
      text = substitute(substitute(text, "\\<","&lt;"), "\\>","&gt;");

      yyLineNr++;
      current->setData(EntryKey::Member_Args, text);

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the param command ------------ */
case 108:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addToOutput('\\');
      }

      addToOutput(text);
   }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
      addToOutput(" , ");
   }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addToOutput('\\');
      }

      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{
      // no file name specified
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      // first argument; name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = stripQuotes(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 116:
YY_RULE_SETUP
{
      // first argument
      newXRefItemKey = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputXRef);

      BEGIN(XRefItemParam2);
   }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{
      // missing arguments
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing first argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      // second argument
      QString text = QString::fromUtf8(commentscanYYtext);
      xrefItemTitle = stripQuotes(text);
      BEGIN(XRefItemParam3);
   }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing second argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      // third argument
      QString text = QString::fromUtf8(commentscanYYtext);

      xrefListTitle = stripQuotes(text);
      xrefKind = XRef_Item;

      BEGIN( Comment );
   }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr,"Missing third argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 128:
YY_RULE_SETUP
{
      // argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->setData(EntryKey::Related_Class, text);
      BEGIN( Comment );
   }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument of \\relates or \\memberof command");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 135:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionLabel = text;
      addToOutput(text);
      s_sectionTitle.clear();

      BEGIN(SectionTitle);
   }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\section command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
      // invalid character for section label
      warn(yyFileName, yyLineNr, "Invalid or missing section label");
      BEGIN(Comment);
   }
	YY_BREAK
case 138:
/* rule 138 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 139:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 16;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      // any character without special meaning
      QString text = QString::fromUtf8(commentscanYYtext);
      s_sectionTitle += text;
      addToOutput(text);
   }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
      // unescape escaped command
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text.mid(1);
      addToOutput(text);
   }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      // unescape escaped character
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text[1];
      addToOutput(text);
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      // anything else
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text;
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 145:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      // we add subpage labels as a kind of "inheritance" relation to prevent
      // needing to add another list to the Entry class.

      current->extends.append(BaseInfo(text, Public, Normal));
      BEGIN(SubpageTitle);
   }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\subpage command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{
      // no title, end command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      // add title, end of command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      // no title, end of command
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 150:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addAnchor(text);
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\anchor command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 152:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing anchor label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 153:
/* rule 153 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // possible ends
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (text.mid(4) == s_blockName)  {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (s_blockName == "startuml")   {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 155:
YY_RULE_SETUP
{
      // some word
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text);
   }
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
   }
	YY_BREAK
case 157:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      // start of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! (s_blockName == "code" || s_blockName == "verbatim")) {
         ++s_commentCount;
      }
      addToOutput(text);
   }
	YY_BREAK
case 158:
YY_RULE_SETUP
{
      // end of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (! (s_blockName == "code" || s_blockName == "verbatim")) {
         s_commentCount--;

         if (s_commentCount < 0) {
            warn(yyFileName, yyLineNr, "Found */ without matching /* while inside a \\%s block. "
               "Perhaps there is a missing \\end%s?\n", csPrintable(s_blockName), csPrintable(s_blockName));
         }
      }
   }
	YY_BREAK
case 159:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
{
      QString endTag = "end" + s_blockName;

      if (s_blockName == "startuml") {
         endTag = "enduml";
      }

      warn(yyFileName, yyLineNr, "Reached end of comment while inside a \\%s block, check for missing \\%s tag",
                 csPrintable(s_blockName), csPrintable(endTag) );

      yyterminate();
   }
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 160:
YY_RULE_SETUP
{
      s_guardExpr  = QString::fromUtf8(commentscanYYtext);
      s_roundCount = 1;
      BEGIN(GuardExpr);
   }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
   }
	YY_BREAK
case 162:
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
      s_roundCount++;
   }
	YY_BREAK
case 163:
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
      s_roundCount--;

      if (s_roundCount == 0) {
         handleGuard(s_guardExpr);
      }
   }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
{
      warn(yyFileName, yyLineNr, "Invalid expression '%s' for guard", csPrintable(s_guardExpr));
      unput(commentscanYYtext[0]);
      BEGIN(GuardParam);
   }
	YY_BREAK
case 165:
YY_RULE_SETUP
{
      // parameter of if/ifnot guard
      QString text = QString::fromUtf8(commentscanYYtext);
      handleGuard(text);
   }
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // next line is commented out due to bug620924
      // addToOutput('\n');

      BEGIN( Comment );
   }
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 168:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
{
      s_spaceBeforeIf.clear();
      BEGIN(Comment);
   }
	YY_BREAK
case 170:
YY_RULE_SETUP
{
      if (! s_spaceBeforeIf.isEmpty()) {
         addToOutput(s_spaceBeforeIf);
      }

      s_spaceBeforeIf.clear();
      BEGIN(Comment);
   }
	YY_BREAK
case 171:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 172:
/* rule 172 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_guardType = Guard_IfNot;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 173:
/* rule 173 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_guardType = Guard_If;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 174:
/* rule 174 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found \\endif without matching start command");

       } else {
         GuardedSection s   = s_guards.pop();
         bool parentVisible = s.parentVisible();

         if (parentVisible) {
            s_isEnabledSection = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 175:
/* rule 175 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName, yyLineNr, "Found \\else without matching start command");

      } else {

         if (! s_isEnabledSection && s_guards.top().parentVisible()) {
            s_guards.pop();
            s_guards.push(GuardedSection(true,true));

            s_isEnabledSection = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 176:
/* rule 176 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found \\elseif without matching start command");

       } else {

         if (! s_isEnabledSection && s_guards.top().parentVisible()) {
            s_guardType = Guard_If;
            s_guards.pop();

            BEGIN( GuardParam );
         }
      }
   }
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // addToOutput('\n');
   }
	YY_BREAK
case 178:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 179:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
   }
	YY_BREAK
case 181:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 182:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 183:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount--;

      if (s_condCount < 0 )   {
         // handle conditional section around \internal, see bug607743

         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 184:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 0 ) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 185:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 1)  {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 186:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 2) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 187:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 3) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
{
      BEGIN(Comment);
   }
	YY_BREAK
case 189:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 190:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle argument of name command ------- */
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
      s_memberGroupHeader+=' ';
   }
	YY_BREAK
case 193:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_memberGroupHeader  += text[0];
      current->m_entryName += text[0];
   }
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 194:
YY_RULE_SETUP
{
      // group id
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_groups.append(Grouping(text, Grouping::GROUPING_INGROUP) );
      inGroupParamFound = true;
   }
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! inGroupParamFound) {
         warn(yyFileName,yyLineNr, "Missing group name for \\ingroup command");
      }

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 197:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
{
      // end of fn declaration, pass to langParser as a "prototype"
      QString text = QString::fromUtf8(commentscanYYtext);

      if (braceCount == 0) {
         if (text[0] == '\n')   {
            yyLineNr++;
         }

         addToOutput('\n');

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(s_functionProto);
         }

         BEGIN( Comment );
      }
   }
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      s_functionProto += ' ';
   }
	YY_BREAK
case 200:
YY_RULE_SETUP
{
      // non-special characters
      s_functionProto += QString::fromUtf8(commentscanYYtext);
   }
	YY_BREAK
case 201:
YY_RULE_SETUP
{
      s_functionProto += QString::fromUtf8(commentscanYYtext);
      braceCount++;
   }
	YY_BREAK
case 202:
YY_RULE_SETUP
{
      s_functionProto += QString::fromUtf8(commentscanYYtext);
      braceCount--;
   }
	YY_BREAK
case 203:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
{
      // end of overload declaration, pass to langParser as a "prototype"
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      if (s_functionProto.trimmed().isEmpty()) {
         // plain overload command
         addToOutput(theTranslator->trOverloadText());
         addToOutput('\n');

      }  else   {
         // overload declaration
         makeStructuralIndicator(Entry::OVERLOADDOC_SEC);

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(s_functionProto);
         }
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      s_functionProto += ' ';
   }
	YY_BREAK
case 206:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 207:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text), Public, Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\inherit command has no argument");

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 209:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing name for \\inherit command");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 210:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text),Public,Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName,yyLineNr, "\\extends or \\implements command has no argument");

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 212:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle language specific sections ------- */
case 213:
YY_RULE_SETUP
{
      // language switch
      QString text = QString::fromUtf8(commentscanYYtext);
      QString langId = text.mid(2);

      if (langId.isEmpty() || Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) == 0) {
         // enable language specific section
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 214:
YY_RULE_SETUP
{
      /* any character not a *, @, backslash or new line */
   }
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
{
      // new line in verbatim block
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 216:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 217:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addCite();
      addToOutput(text);
      BEGIN(Comment);
   }
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\cite command has no label" );

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 219:
YY_RULE_SETUP
{
      // invalid character for cite label
      warn(yyFileName,yyLineNr, "Invalid or missing cite label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');

      setOutput(OutputMainDoc);
      addToOutput(" \\copydetails ");
      addToOutput(s_copyDocArg);

      addToOutput("\n");

      BEGIN(Comment);
   }
	YY_BREAK
case 221:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addToOutput(text);
   }
	YY_BREAK
case 222:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addToOutput(text);
   }
	YY_BREAK
case 223:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(ConceptDocArg1):
			case YY_STATE_EOF(ConceptDocArg2):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(ParamArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
			case YY_STATE_EOF(CdataSection):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1561 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1561 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1560);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static bool handleBrief(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   setOutput(OutputBrief);
   return false;
}

static bool handleProperty(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   s_functionProto.clear();
   braceCount = 0;
   BEGIN(FnParam);

   current->mtype = MethodType::Property;

   return stop;
}

static bool handleFn(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   s_functionProto.clear();
   braceCount = 0;
   BEGIN(FnParam);

   return stop;
}

static bool handleDef(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::DEFINEDOC_SEC);
   s_functionProto.clear();
   BEGIN(FnParam);

   return stop;
}

static bool handleOverload(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   s_functionProto.clear();
   BEGIN(OverloadParam);

   return false;
}

static bool handleEnum(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::ENUMDOC_SEC);
   BEGIN(EnumDocArg1);

   return stop;
}

static bool handleDefGroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_NORMAL;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleAddToGroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_ADD;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleWeakGroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_WEAK;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleNamespace(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
   BEGIN( NameSpaceDocArg1 );

   return stop;
}

static bool handlePackage(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
   BEGIN( PackageDocArg1 );

   return stop;
}

static bool handleClass(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::CLASSDOC_SEC);
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleConcept(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::CONCEPTDOC_SEC);
   BEGIN( ConceptDocArg1 );

   return stop;
}

static bool handleHeaderFile(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   BEGIN( ClassDocArg2 );
   return false;
}

static bool handleProtocol(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   // Obj-C protocol
   bool stop = makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleCategory(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   // Obj-C category
   bool stop = makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
   BEGIN( CategoryDocArg1 );

   return stop;
}

static bool handleUnion(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::UNIONDOC_SEC);
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleStruct(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleInterface(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handleIdlException(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
   BEGIN( ClassDocArg1 );

   return stop;
}

static bool handlePage(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::PAGEDOC_SEC);
   BEGIN( PageDocArg1 );

   return stop;
}

static bool handleMainpage(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);

   if (stop) {
      current->m_entryName = "";
   } else {
      current->m_entryName = "mainpage";
   }

   BEGIN( PageDocArg2 );

   return stop;
}

static bool handleFile(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::FILEDOC_SEC);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );

   return stop;
}

static bool handleParam(const QString &str, const QStringList &list)
{
  // process param and retval arguments to escape leading underscores
  // in case of markdown processing

   (void) str;
   (void) list;

   addToOutput("@param ");
   BEGIN( ParamArg1 );

   return false;
}

static bool handleRetval(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   addToOutput("@retval ");
   BEGIN( ParamArg1 );

   return false;
}

static bool handleDir(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::DIRDOC_SEC);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );

   return stop;
}

static bool handleExample(const QString &str, const QStringList &list)
{
   (void) str;

   Entry::Sections section = Entry::EXAMPLE_SEC;

   for (auto item : list) {
      QString opt = item.trimmed().toLower();

      if (opt == "lineno") {
         section = Entry::EXAMPLE_LINENO_SEC;

      } else {
         warn(yyFileName, yyLineNr, "Unsupported option '%s' for command '\\%s'", csPrintable(opt), csPrintable(str));
      }
   }

   bool stop = makeStructuralIndicator(section);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );

   return stop;
}

static bool handleDetails(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (inContext != OutputBrief) {
      // treat @details outside brief description as a new paragraph
      addToOutput("\n\n");
   }

   setOutput(OutputMainDoc);

   return false;
}

static bool handleName(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   bool stop = makeStructuralIndicator(Entry::MEMBERGRP_SEC);

   if (! stop) {
      s_memberGroupHeader.resize(0);
      BEGIN( NameParam );

      if (s_memberGroupId != DOX_NOGROUP) {
         // end of previous member group
         closeGroup(current,yyFileName,yyLineNr,true);
       }
   }

   return stop;
}

static bool handleTodo(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Todo;
   setOutput(OutputXRef);
   xrefKind = XRef_Todo;

   return false;
}

static bool handleTest(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Test;
   setOutput(OutputXRef);
   xrefKind = XRef_Test;

   return false;
}

static bool handleBug(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Bug;
   setOutput(OutputXRef);
   xrefKind = XRef_Bug;

   return false;
}

static bool handleDeprecated(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Deprecated;
   setOutput(OutputXRef);
   xrefKind = XRef_Deprecated;

   return false;
}

static bool handleXRefItem(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   newXRefKind = XRef_Item;
   BEGIN(XRefItemParam1);

   return false;
}

static bool handleParBlock(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_insideParBlock)   {
      warn(yyFileName,yyLineNr, "Found \\parblock command while already in a parblock");
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addToOutput("@parblock ");
   s_insideParBlock = true;

   return false;
}

static bool handleEndParBlock(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (! s_insideParBlock) {
      warn(yyFileName,yyLineNr, "Found \\endparblock command without matching \\parblock");
   }

   addToOutput("@endparblock");
   setOutput(OutputMainDoc);    // to end a parblock inside a xrefitem like context
   s_insideParBlock = false;

   return false;
}

static bool handleRelated(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName,yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = Simple;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleRelatedAlso(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName, yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = Duplicate;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleMemberOf(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName, yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = MemberOf;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleRefItem(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   addToOutput("@refitem ");
   BEGIN(LineParam);

   return false;
}

static bool handleSection(const QString &str, const QStringList &list)
{
   (void) list;

   setOutput(OutputMainDoc);
   addToOutput("@" + str + " ");
   BEGIN(SectionLabel);

   if (str == "section") {
      s_sectionLevel = 1;

   } else if (str == "subsection") {
      s_sectionLevel = 2;

   } else if (str == "subsubsection") {
      s_sectionLevel = 3;

   } else if (str == "paragraph") {
      s_sectionLevel = 4;

   }

   return false;
}

static bool handleSubpage(const QString &str, const QStringList &list)
{
   (void) list;

   if (current->section != Entry::EMPTY_SEC && current->section != Entry::PAGEDOC_SEC &&
         current->section != Entry::MAINPAGEDOC_SEC) {

      warn(yyFileName, yyLineNr, "Found \\subpage command in a comment block that is not marked as a page");
  }

  if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.clear();
  }

   addToOutput("@" + str + " ");
   BEGIN(SubpageLabel);

   return false;
}

static bool handleAnchor(const QString &str, const QStringList &list)
{
   (void) list;

   addToOutput("@" + str + " ");
   BEGIN(AnchorLabel);

   return false;
}

static bool handleCite(const QString &str, const QStringList &list)
{
   (void) list;

   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("@" + str + " ");
   BEGIN(CiteLabel);

   return false;
}

static bool handleFormatBlock(const QString &str, const QStringList &list)
{
   if (list.isEmpty()) {
      addToOutput("@" + str + " ");

   } else {
      addToOutput("@" + str + "{" + list.join(",") + "} ");
   }

   s_blockName    = str;
   s_commentCount = 0;
   BEGIN(FormatBlock);

   return false;
}

static bool handleAddIndex(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   addToOutput("@addindex ");

   BEGIN(LineParam);

   return false;
}

static bool handleIf(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   s_isEnabledSection = false;
   s_guardType        = Guard_If;
   s_spaceBeforeIf    = s_spaceBeforeCmd;
   BEGIN(GuardParam);

   return false;
}

static bool handleIfNot(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   s_isEnabledSection = false;
   s_guardType        = Guard_IfNot;
   s_spaceBeforeIf    = s_spaceBeforeCmd;

   BEGIN(GuardParam);

   return false;
}

static bool handleElseIf(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      s_guardType     = s_isEnabledSection ? Guard_Skip : Guard_If;
      s_spaceBeforeIf = s_spaceBeforeCmd;
      BEGIN(GuardParam);
   }

   return false;
}

static bool handleElse(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      s_spaceBeforeIf = s_spaceBeforeCmd;
      BEGIN( SkipGuardedSection );
   }

   return false;
}

static bool handleEndIf(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_guards.isEmpty())   {
      warn(yyFileName,yyLineNr, "Found \\endif without matching start command");

   } else {
      s_guards.pop();
   }

   s_isEnabledSection = false;
   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   BEGIN( GuardParamEnd );

   return false;
}

static bool handleIngroup(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   inGroupParamFound = false;
   BEGIN( InGroupParam );

   return false;
}

static bool handleNoSubGrouping(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->subGrouping = false;

   return false;
}

static bool handleShowInitializer(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->initLines = 100000;  // ON
   return false;
}

static bool handleHideInitializer(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->initLines = 0;

   return false;
}

static bool handleCallgraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callGraph = true;

   return false;
}

static bool handleHideCallgraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callGraph = false;
   return false;
}

static bool handleCallergraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callerGraph = true;
   return false;
}

static bool handleHideCallergraph(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->callerGraph = false;

   return false;
}

static bool handleReferencedByRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencedByRelation = true;

   return false;
}

static bool handleHideReferencedByRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencedByRelation = false;

   return false;
}

static bool handleReferencesRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencesRelation = true;

   return false;
}

static bool handleHideReferencesRelation(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->referencesRelation = false;

   return false;
}

static bool handleInternal(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (s_internalDocs) {
      addToOutput(" \\internal ");
      s_processInternalDocs = true;

   } else {
      // make sure some whitespace before an \internal command
      // is not treated as "documentation"

      if (current->getData(EntryKey::Main_Docs).trimmed().isEmpty()) {
         current->setData(EntryKey::Main_Docs, "");
      }

      s_condCount = 0;
      BEGIN( SkipInternal );
  }

  return false;
}

static bool handleLineBr(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   addToOutput('\n');

   return false;
}

static bool handleStatic(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   endBrief();
   current->stat = true;

   return false;
}

static bool handlePure(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   endBrief();
   current->virt = Specifier::Pure;

   return false;
}

static bool handlePrivate(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = Protection::Private;

   return false;
}

static bool handlePrivateSection(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = (s_protection = Protection::Private);

   return false;
}

static bool handleProtected(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = Protection::Protected;

   return false;
}

static bool handleProtectedSection(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = (s_protection = Protection::Protected);

   return false;
}

static bool handlePublic(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = Protection::Public;

   return false;
}

static bool handlePublicSection(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   current->protection = (s_protection = Protection::Public);
   return false;
}

static bool handleToc(const QString &str, const QStringList &list)
{
   (void) str;

   if (current->section == Entry::PAGEDOC_SEC || current->section == Entry::MAINPAGEDOC_SEC) {

      for (auto &item : list) {
         QString option = item.trimmed().toLower();

         int level = 5;
         int i     = option.find(':');

         if (i > 0) {
            // found something like "html:4"
            bool ok = false;
            level = option.mid(i + 1).toInteger<int>(&ok);

            if (ok) {
               level  = (level >  5 ? 5 : level);
               level  = (level <= 0 ? 5 : level);
               option = option.left(i).trimmed();

            } else {
               warn(yyFileName, yyLineNr, "Unknown option level specified with \\tableofcontents: `%s'", csPrintable(option));
               option = "";
            }
         }

         if (! option.isEmpty()) {
            if (option == "html") {
               current->localToc.enableHtml(level);

            } else if (option == "latex") {
               current->localToc.enableLatex(level);

            } else if (option == "xml") {
               current->localToc.enableXml(level);

            } else if (option == "docbook") {
               current->localToc.enableDocbook(level);

            } else {
               warn(yyFileName, yyLineNr, "Unknown option specified with \\tableofcontents: `%s'", csPrintable(option));
            }
         }
      }

      if (current->localToc.nothingEnabled()) {
         // for backward compatibility
         current->localToc.enableHtml(5);
         current->localToc.enableXml(5);
      }
   }

   return false;
}

static bool handleInherit(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   BEGIN(InheritParam);
   return false;
}

static bool handleExtends(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   BEGIN(ExtendsParam);
   return false;
}

static bool handleCopyBrief(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   if (current->getData(EntryKey::Brief_Docs).isEmpty() && current->getData(EntryKey::Main_Docs).isEmpty()) {

      // if we do not have a brief or detailed description yet,
      // then the @copybrief should end up in the brief description.
      // otherwise it will be copied inline (see bug691315 & bug700788)

      setOutput(OutputBrief);
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copybrief ");
   return false;
}

static bool handleCopyDetails(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   setOutput(OutputMainDoc);

   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copydetails ");
   return false;
}

static bool handleCopyDoc(const QString &str, const QStringList &list)
{
   (void) str;
   (void) list;

   setOutput(OutputBrief);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copybrief ");
   s_copyDocArg.resize(0);
   BEGIN(CopyDoc);

   return false;
}

static void checkFormula()
{
   if (YY_START == ReadFormulaShort || YY_START == ReadFormulaLong) {
      warn(yyFileName, yyLineNr, "End of comment block while inside formula.");
   }
}

// main entry point
bool parseCommentBlock(ParserInterface *parser, QSharedPointer<Entry> curEntry, const QString &comment,
                  const QString &fileName, int &lineNr, bool isBrief, bool isAutoBrief, bool isInbody,
                  Protection &r_protection, int &r_position, bool &r_newEntryNeeded )
{
   initParser();
   s_guards.clear();

   if (comment.isEmpty()) {
      // avoid empty strings
      return false;
   }

   if (Doxy_Globals::markdownSupport) {
      s_inputString = processMarkdown(fileName, lineNr, QSharedPointer<Entry>(), comment);

      QStringView tmp(s_inputString);

      while (tmp.startsWith(" ")) {
         tmp = tmp.mid(1);
      }

      while (tmp.startsWith("\n")) {
         tmp = tmp.mid(1);
      }

      if (tmp.startsWith("<br>")) {
         tmp = tmp.mid(4);
      }

      s_inputString = QString(tmp);

   } else {
      s_inputString  = comment;
   }

   s_inputString.append(" ");

   yyFileName       = fileName;
   yyLineNr         = lineNr;
   langParser       = parser;
   current          = curEntry;

   briefEndsAtDot   = isAutoBrief;
   inBody           = isInbody;
   s_protection     = r_protection;
   s_inputPosition  = r_position;
   s_outputXRef     = "";
   xrefKind         = XRef_None;

   xrefAppendFlag   = false;
   insidePre        = false;
   s_needNewEntry   = false;
   s_parseMore      = false;

   if (isBrief || isAutoBrief) {
      setOutput(OutputBrief);

   } else {
      setOutput(OutputMainDoc);
   }

   s_condCount    = 0;
   s_sectionLevel = 0;

   s_spaceBeforeCmd.clear();
   s_spaceBeforeIf.clear();

   if (! current->getData(EntryKey::Main_Docs).isEmpty()) {
      // separate detailed doc fragments
      current->appendData(EntryKey::Main_Docs,  "\n\n");
   }

   if (! current->getData(EntryKey::Inbody_Docs).isEmpty() && isInbody) {
      // separate in body fragments
      current->appendData(EntryKey::Inbody_Docs, "\n\n");
   }

   commentscanYYrestart(commentscanYYin);
   BEGIN( Comment );
   commentscanYYlex();

   setOutput(OutputMainDoc);

   if (YY_START == OverloadParam) {
      // comment ended with \overload
      addToOutput(theTranslator->trOverloadText());
   }

   if (! s_guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Documentation block ended in the middle of a conditional section");
   }

   if (s_insideParBlock) {
      warn(yyFileName, yyLineNr, "Documentation block ended while inside a \\parblock. Missing \\endparblock");
   }

   // removes blank lines from the detailed docs
   current->setData(EntryKey::Main_Docs, trimEmptyLines(current->getData(EntryKey::Main_Docs), current->docLine));

   if (current->section == Entry::FILEDOC_SEC && current->getData(EntryKey::Main_Docs).isEmpty()) {
      // to allow a comment block with just a @file command
      current->setData(EntryKey::Main_Docs, "\n\n");
   }

   if (current->section == Entry::MEMBERGRP_SEC && s_memberGroupId == DOX_NOGROUP) {
      // @name section but no group started yet
      openGroup(current, yyFileName, yyLineNr);
   }

   checkFormula();
   r_protection = s_protection;

   groupAddDocs(curEntry);
   r_newEntryNeeded = s_needNewEntry;

   if (s_parseMore && r_position == s_inputPosition) {
      // did not proceed during this call, do not continue or there will be an infinate loop
      s_parseMore = false;
   }

   if (s_parseMore) {
      r_position = s_inputPosition;
   } else {
      r_position = 0;
   }

   lineNr = yyLineNr;

   return s_parseMore;
}

void groupEnterFile(const QString &fileName, int)
{
   s_autoGroupStack.clear();
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupDocs.clear();
   s_memberGroupRelates.clear();
   s_compoundName = fileName;
}

void groupLeaveFile(const QString &fileName, int line)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();

   if (! s_autoGroupStack.isEmpty()) {
      warn(fileName, line, "End of file while inside a group\n");
   }
}

void groupEnterCompound(const QString &fileName, int line, const QString &name)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      warn(fileName, line, "Try to put compound %s inside a member group\n", csPrintable(name));
   }

   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();
   s_compoundName = name;

   int i = s_compoundName.indexOf('(');

   if (i != -1) {
      // strip category (Obj-C)
      s_compoundName=s_compoundName.left(i);
   }

   if (s_compoundName.isEmpty()) {
      s_compoundName=fileName;
   }
}

void groupLeaveCompound(const QString &, int, const QString &)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);
   s_compoundName.resize(0);
}

static int findExistingGroup(int &groupId, const QSharedPointer<MemberGroupInfo> info)
{
   for (auto di = Doxy_Globals::memGrpInfoDict.begin(); di != Doxy_Globals::memGrpInfoDict.end(); ++di) {

      auto mi = *di;

      if (s_compoundName == mi->compoundName && ! mi->header.isEmpty() &&
               mi->header.compare(info->header, Qt::CaseInsensitive) == 0) {

         // same file or scope, not a nameless group, same header name
         return (int)di.key();    // put the item in this group
      }
   }

   groupId++; // start new group
   return groupId;
}

void openGroup(QSharedPointer<Entry> e, const QString &, int)
{
   if (e->section == Entry::GROUPDOC_SEC) {
      // auto group
      s_autoGroupStack.push( QMakeShared<Grouping>(e->m_entryName, e->groupingPri()) );

   } else {
      // start of a member group

      if (s_memberGroupId == DOX_NOGROUP) {
         // no group started yet
         static int curGroupId = 0;

         QSharedPointer<MemberGroupInfo> info = QMakeShared<MemberGroupInfo>();

         info->header = s_memberGroupHeader.trimmed();
         info->compoundName = s_compoundName;
         s_memberGroupId = findExistingGroup(curGroupId, info);

         Doxy_Globals::memGrpInfoDict.insert(s_memberGroupId, info);

         s_memberGroupRelates = e->getData(EntryKey::Related_Class);
         e->mGrpId = s_memberGroupId;
      }
   }
}

void closeGroup(QSharedPointer<Entry> e, const QString &fileName, int line, bool foundInline)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      // end of member group

      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         // known group
         info->doc     = s_memberGroupDocs;
         info->docFile = fileName;
         info->docLine = line;
      }

      s_memberGroupId = DOX_NOGROUP;
      s_memberGroupRelates.resize(0);
      s_memberGroupDocs.resize(0);

      if (! foundInline) {
         e->mGrpId = DOX_NOGROUP;
      }

   } else if (! s_autoGroupStack.isEmpty()) {
      // end of auto group
      QSharedPointer<Grouping> grp = s_autoGroupStack.pop();

      // see bug577005: we should not remove the last group for e
      if (! foundInline) {
         e->m_groups.removeLast();
      }

      if (! foundInline) {
         initGroupInfo(e);
      }
   }
}

void initGroupInfo(QSharedPointer<Entry> e)
{
   e->mGrpId  = s_memberGroupId;
   e->setData(EntryKey::Related_Class, s_memberGroupRelates);

   if (! s_autoGroupStack.isEmpty()) {
      e->m_groups.append(*s_autoGroupStack.top());
   }
}

static void groupAddDocs(QSharedPointer<Entry> e)
{
   if (e->section == Entry::MEMBERGRP_SEC) {
      s_memberGroupDocs = e->getData(EntryKey::Brief_Docs).trimmed();

      e->setData(EntryKey::Main_Docs, trimEmptyLines(e->getData(EntryKey::Main_Docs), e->docLine));

      if (! s_memberGroupDocs.isEmpty() && ! e->getData(EntryKey::Main_Docs).isEmpty()) {
         s_memberGroupDocs+="\n\n";
      }

      s_memberGroupDocs += e->getData(EntryKey::Main_Docs);
      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         info->doc      = s_memberGroupDocs;
         info->docFile  = e->getData(EntryKey::MainDocs_File);
         info->docLine  = e->docLine;
         info->setRefItems(e->m_specialLists);
      }

      e->setData(EntryKey::Brief_Docs, "");
      e->setData(EntryKey::Main_Docs,  "");
   }
}

static void handleGuard(const QString &expr)
{
   CondParser prs;
   bool sectionEnabled = prs.parse(yyFileName, yyLineNr, expr.trimmed());
   bool parentEnabled  = true;

   if (! s_guards.isEmpty()) {
      parentEnabled = s_guards.top().isEnabled();
   }

   if (parentEnabled) {
      if ( (sectionEnabled && s_guardType == Guard_If) || (! sectionEnabled && s_guardType == Guard_IfNot)) {
         // section is visible
         s_guards.push(GuardedSection(true, true));
         s_isEnabledSection = true;
         BEGIN( GuardParamEnd );

      } else {
         // section is invisible
         if (s_guardType != Guard_Skip) {
            s_guards.push(GuardedSection(false, true));
         }

         BEGIN( SkipGuardedSection );
      }

   } else {
      // invisible because of parent
      s_guards.push(GuardedSection(false, false));
      BEGIN( SkipGuardedSection );
   }
}

