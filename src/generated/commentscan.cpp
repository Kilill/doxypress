/*************************************************************************
 *
 * Copyright (C) 2014-2015 Barbara Geller & Ansel Sermersheim 
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 * All rights reserved.    
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License version 2
 * is hereby granted. No representations are made about the suitability of
 * this software for any purpose. It is provided "as is" without express or
 * implied warranty. See the GNU General Public License for more details.
 *
 * Documents produced by DoxyPress are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {
   FILE *yy_input_file;

   char *yy_ch_buf;		/* input buffer */
   char *yy_buf_pos;		/* current position in input buffer */

   /* Size of input buffer in bytes, not including room for EOB
    * characters.
    */
   yy_size_t yy_buf_size;

   /* Number of characters read into yy_ch_buf, not including EOB
    * characters.
    */
   int yy_n_chars;

   /* Whether we "own" the buffer - i.e., we know we created it,
    * and can realloc() it to grow it, and should free() it to
    * delete it.
    */
   int yy_is_our_buffer;

   /* Whether this is an "interactive" input source; if so, and
    * if we're using stdio for input, then we want to use getc()
    * instead of fread(), to make sure we stop fetching input after
    * each newline.
    */
   int yy_is_interactive;

   /* Whether we're considered to be at the beginning of a line.
    * If so, '^' rules will be active on the next match, otherwise
    * not.
    */
   int yy_at_bol;

   int yy_bs_lineno; /**< The line count. */
   int yy_bs_column; /**< The column count. */

   /* Whether to try to fill the input buffer when we reach the
    * end of it.
    */
   int yy_fill_buffer;

   int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
   /* When an EOF's been seen but there's still some text to process
    * then we mark the buffer as YY_EOF_PENDING, to indicate that we
    * shouldn't try reading from the input source any more.  We might
    * still have a bunch of tokens to match, though, because of
    * possible backing-up.
    *
    * When we actually see the EOF, we change the status to "new"
    * (via commentscanYYrestart()), so that the user can continue scanning by
    * just pointing commentscanYYin at a new input file.
    */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE *yy_buffer_stack = 0;  /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file, int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b, FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base, yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes, int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *, yy_size_t  );
void commentscanYYfree (void *);

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 205
#define YY_END_OF_BUFFER 206
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info {
   flex_int32_t yy_verify;
   flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_acclist[815] = {
   0,
   79,   79,  123,  123,  137,  137,  152,  152,  196,  196,
   143,  143,  206,  205,   46,  205,   46,  205,   45,  205,
   46,  205,   46,  205,   46,  205,   46,  205,   44,   46,
   205,   46,  205,   46,  205,   27,   46,  205,   46,  205,
   46,  205,   46,  205,   46,  205,   46,  205,   44,   46,
   205,   46,  205,   46,  205,   92,  205,   91,  205,   92,
   205,   89,   92,  205,   92,  205,   92,  205,  205,   93,
   205,  113,  205,  112,  205,  113,  205,  110,  113,  205,
   113,  205,   74,  205,   74,  205,   73,  205,   74,  205,
   74,  205,   74,  205,   70,   74,  205,   74,  205,   74,

   205,   78,  205,   77,  205,   78,  205,   75,   78,  205,
   78,  205,   78,  205,   78,  205,   82,  205,   81,  205,
   79,   82,  205,   79,   82,  205,   82,  205,   79,   82,
   205,   79,   82,  205,   82,  205,   74,  205,   73,  205,
   74,  205,   74,  205,   74,  205,   74,  205,   74,  205,
   101,  205,  100,  205,   98,  101,  205,  101,  205,  105,
   205,  104,  205,  105,  205,  105,  205,  109,  205,  108,
   205,  109,  205,  109,  205,   97,  205,   94,  205,   97,
   205,   95,   97,  205,   97,  205,   97,  205,   60,  205,
   59,  205,   60,  205,   57,   60,  205,   60,  205,   64,

   205,   64,  205,   63,  205,   64,  205,   64,  205,   64,
   205,   61,   64,  205,   64,  205,   64,  205,   68,  205,
   67,  205,   68,  205,   65,   68,  205,   68,  205,   85,
   205,   83,  205,  205,   87,  205,   88,  205,  205,  119,
   205,  118,  205,  117,  119,  205,  119,  205,  123,  126,
   205,  120,  205,  123,  126,  205,  126,  205,  126,  205,
   128,  205,  127,  205,  205,  131,  205,  131,  205,  129,
   205,  131,  205,  131,  205,  137,  141,  205,  138,  205,
   141,  205,  141,  205,  141,  205,  141,  205,  141,  205,
   116,  205,  114,  205,  116,  205,  150,  205,  150,  205,

   148,  205,  142,  150,  205,  147,  150,  205,  150,  205,
   153,  205,  152,  153,  205,  151,  205,  153,  205,  160,
   161,  205,  159,  205,  161,  205,  161,  205,  161,  205,
   171,  172,  205,  162,  205,  172,  205,  172,  205,  172,
   205,  175,  205,  173,  205,  175,  205,  179,  205,  177,
   205,  176,  179,  205,  179,  205,  182,  185,  205,  180,
   205,  183,  185,  205,  184,  185,  205,  185,  205,  185,
   205,  188,  205,  186,  205,  188,  205,  191,  205,  190,
   205,  191,  205,  189,  191,  205,  191,  205,  194,  205,
   193,  205,  194,  205,  192,  194,  205,  194,  205,   54,

   56,  205,   55,  205,   56,  205,   56,  205,  134,  205,
   133,  205,  132,  134,  205,  134,  205,   49,   50,  205,
   48,  205,   50,  205,   50,  205,  196,  198,  205,  197,
   205,  198,  205,  198,  205,  198,  205,  201,  205,  200,
   205,  199,  201,  205,  201,  205,  203,  204,  205,  202,
   205,  204,  205,  143,  205,  143,  146,  205,  144,  205,
   145,  205,   43,    4,   36,   38,   40,   38,   26,   26,
   18,   26,   18,   18,   18,   18,   18,   18,   24,   25,
   20,   26,   27,   18,   18,   18,   18,   18,   18,   18,
   18,   30,   31,   36,   28,   89,   89,   90,   89,   93,

   110,  110,  111,   70,   70,   72,   70,   75,   75,   76,
   75,   79,   79,   79,   79,   79,   79,   80,   79,   98,
   99,  102,  103,  107,  106,  107,   95,   95,   96,   95,
   57,   57,   57,   58,   61,   61,   62,   61,   65,   65,
   66,   83,   84,   87,   86,  117,  123,  120,  123,  125,
   125,  122,  127,  130,  137,  140,  139,  115,  142,  147,
   149,  152,  151,  160,  171,  174,  176,  178,  182,  181,
   187,  189,  189,  192,  192,   54,  132,   49,  196,  195,
   199,  203,  143,   26,   37,   35,   42,   38,   42,   42,
   42,   38,   42,   42,   39,    7,   34,    1,    1,    2,

   18,   18,   18,   18,   22,   23,   18,   18,   18,   20,
   5,   18,   18,   18,   18,   18,   18,   18,   32,   35,
   29,   89,   89,   70,   75,   75,   79,   79,   79,   95,
   95,   57,   57,   57,   57,   61,   65,  124,   51,   52,
   53,   47,  195,  199,   42,   42,   16,   33,    1,   19,
   2, 8198,   18, 16390,   18,   18,   18,   18,   18,   18,
   8198,   18, 16390,   18,   18,   18,   18,   18,   89,   69,
   75,   79,   79,   71,   95,   57,   57,   57,   65,  124,
   155,  163,   47,  199,   15,   41,    7,   13, 8198, 8198,
   18,   18,   18,   21,   18,   18,    5, 8198,   18,   18,

   18,   89,   75,   79,   95,    3,   14,    8,   18,   18,
   21,   18,   18,   18,   18,   18,   89,   75,   79,   95,
   83,  157,  165,   18,   18,   18,   18,   18,   18,   18,
   89,   75,   79,   95,  136,  156,  154,  164,   18,   18,
   18,   18,   18,   18,   18,   89,   91,  112,   73,   75,
   77,   79,   81,  100,  104,  108,   94,   95,   59,   63,
   67,   85,   88,  118,  121,  128,  129,  135,  138,  114,
   148,  158,  159,  162,  173,  177,  180,  186,  190,  193,
   133,   48,  197,  200,  202,   10,    9,   18,   18,   18,
   5,   18,   18,  166,   12,   11,   18,   18,   18,   18,

   18,   18,  169,   17,   18,   17,   18,  170,  167,   17,
   18,  170,  168,   43
} ;

static yyconst flex_int16_t yy_accept[1180] = {
   0,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
   5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
   7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
   9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
   9,    9,    9,    9,    9,    9,    9,   10,   11,   11,
   11,   11,   11,   12,   13,   14,   15,   17,   19,   21,
   23,   25,   27,   29,   32,   34,   36,   39,   41,   43,

   45,   47,   49,   52,   54,   56,   58,   60,   62,   65,
   67,   69,   70,   72,   74,   76,   78,   81,   83,   85,
   87,   89,   91,   93,   95,   98,  100,  102,  104,  106,
   108,  111,  113,  115,  117,  119,  121,  124,  127,  129,
   132,  135,  137,  139,  141,  143,  145,  147,  149,  151,
   153,  155,  158,  160,  162,  164,  166,  168,  170,  172,
   174,  176,  178,  180,  182,  185,  187,  189,  191,  193,
   195,  198,  200,  202,  204,  206,  208,  210,  212,  215,
   217,  219,  221,  223,  225,  228,  230,  232,  234,  235,
   237,  239,  240,  242,  244,  247,  249,  252,  254,  257,

   259,  261,  263,  265,  266,  268,  270,  272,  274,  276,
   279,  281,  283,  285,  287,  289,  291,  293,  295,  297,
   299,  301,  303,  306,  309,  311,  313,  316,  318,  320,
   323,  325,  327,  329,  331,  334,  336,  338,  340,  342,
   344,  346,  348,  350,  352,  355,  357,  360,  362,  365,
   368,  370,  372,  374,  376,  378,  380,  382,  384,  387,
   389,  391,  393,  395,  398,  400,  403,  405,  407,  409,
   411,  413,  416,  418,  421,  423,  425,  427,  430,  432,
   434,  436,  438,  440,  442,  445,  447,  450,  452,  454,
   456,  459,  461,  463,  463,  463,  463,  463,  464,  464,

   464,  465,  465,  465,  465,  465,  465,  466,  467,  468,
   468,  469,  469,  469,  469,  469,  469,  469,  469,  469,
   469,  469,  469,  469,  469,  470,  470,  471,  472,  473,
   474,  475,  476,  477,  478,  479,  480,  481,  483,  484,
   485,  486,  487,  488,  489,  490,  491,  492,  492,  492,
   492,  492,  492,  492,  493,  494,  495,  495,  496,  496,
   496,  496,  496,  496,  497,  498,  498,  498,  498,  499,
   500,  500,  501,  502,  502,  503,  503,  503,  504,  504,
   504,  504,  504,  504,  505,  505,  505,  506,  506,  506,
   507,  507,  507,  507,  508,  508,  509,  510,  510,  510,

   510,  511,  512,  512,  513,  514,  514,  515,  516,  517,
   517,  517,  518,  518,  519,  520,  520,  520,  520,  520,
   520,  520,  520,  520,  520,  520,  520,  520,  520,  521,
   521,  522,  522,  522,  523,  523,  525,  525,  525,  526,
   526,  527,  527,  527,  528,  529,  529,  529,  529,  530,
   531,  532,  532,  532,  533,  533,  534,  534,  535,  535,
   535,  535,  535,  535,  536,  536,  536,  537,  537,  538,
   538,  538,  538,  539,  540,  540,  541,  541,  542,  542,
   543,  543,  543,  544,  544,  545,  545,  546,  546,  547,
   547,  548,  549,  550,  550,  551,  552,  552,  553,  553,

   554,  554,  554,  554,  554,  555,  555,  556,  557,  558,
   558,  558,  558,  559,  559,  559,  560,  561,  561,  562,
   562,  563,  564,  564,  564,  565,  565,  565,  565,  566,
   566,  566,  566,  566,  566,  566,  567,  567,  568,  568,
   569,  569,  570,  570,  571,  571,  571,  572,  572,  573,
   573,  574,  574,  574,  575,  575,  576,  576,  576,  577,
   577,  577,  578,  578,  579,  579,  579,  580,  581,  581,
   582,  582,  582,  583,  583,  584,  585,  585,  585,  585,
   585,  586,  587,  588,  590,  591,  592,  594,  595,  596,
   596,  596,  596,  596,  596,  596,  596,  596,  597,  597,

   597,  597,  597,  597,  598,  599,  600,  601,  602,  603,
   604,  605,  606,  607,  607,  608,  609,  610,  611,  612,
   613,  614,  615,  616,  617,  618,  619,  619,  619,  619,
   619,  620,  621,  621,  622,  623,  623,  624,  624,  624,
   624,  624,  624,  625,  626,  626,  627,  628,  628,  629,
   629,  630,  630,  630,  630,  630,  630,  630,  631,  631,
   632,  633,  634,  635,  636,  636,  636,  637,  637,  638,
   638,  638,  638,  638,  638,  638,  639,  639,  639,  639,
   639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
   639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

   639,  639,  639,  640,  641,  642,  642,  642,  643,  643,
   644,  644,  645,  645,  645,  645,  645,  645,  645,  646,
   647,  648,  648,  648,  648,  648,  648,  648,  648,  648,
   648,  648,  648,  649,  650,  651,  652,  655,  656,  657,
   657,  658,  659,  660,  660,  661,  664,  665,  666,  667,
   668,  669,  669,  669,  669,  670,  670,  670,  671,  671,
   671,  672,  673,  673,  674,  675,  675,  675,  675,  676,
   676,  677,  678,  679,  679,  679,  680,  680,  680,  680,
   680,  680,  681,  681,  681,  681,  681,  681,  681,  681,
   681,  681,  681,  682,  682,  682,  682,  683,  683,  683,

   683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
   684,  684,  684,  685,  685,  685,  685,  686,  686,  686,
   687,  687,  687,  687,  687,  687,  689,  689,  689,  689,
   690,  692,  693,  694,  695,  696,  697,  699,  700,  701,
   702,  702,  703,  703,  703,  704,  705,  705,  705,  705,
   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
   706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
   706,  706,  706,  706,  706,  706,  706,  707,  708,  708,

   708,  708,  709,  709,  709,  709,  709,  710,  711,  712,
   713,  714,  715,  716,  717,  718,  718,  718,  719,  720,
   720,  720,  720,  721,  721,  721,  721,  721,  721,  722,
   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
   722,  723,  723,  723,  723,  723,  724,  724,  724,  724,
   724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
   724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
   724,  724,  725,  726,  727,  728,  729,  730,  731,  732,
   732,  732,  733,  734,  734,  734,  734,  735,  735,  735,

   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
   735,  735,  735,  735,  736,  736,  736,  736,  736,  736,
   736,  736,  736,  737,  738,  738,  738,  739,  739,  739,
   739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
   739,  739,  739,  739,  739,  739,  739,  739,  739,  740,
   741,  742,  743,  744,  745,  746,  748,  749,  750,  752,
   754,  755,  756,  757,  759,  760,  761,  762,  763,  764,
   765,  766,  767,  768,  768,  769,  769,  769,  769,  769,
   769,  769,  769,  770,  771,  772,  773,  774,  774,  774,
   774,  774,  774,  775,  776,  777,  778,  779,  780,  781,

   782,  783,  784,  785,  786,  786,  786,  787,  788,  789,
   790,  791,  792,  793,  794,  794,  794,  794,  794,  794,
   794,  794,  794,  794,  794,  795,  795,  795,  796,  797,
   798,  799,  799,  800,  801,  801,  801,  801,  801,  801,
   801,  801,  801,  801,  801,  801,  801,  802,  802,  803,
   803,  803,  803,  803,  803,  803,  804,  804,  804,  806,
   806,  808,  808,  808,  809,  810,  810,  812,  812,  812,
   813,  813,  813,  813,  813,  813,  814,  815,  815
} ;

static yyconst flex_int32_t yy_ec[256] = {
   0,
   1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
   1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
   13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
   21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
   1,   25,    1,   26,   27,   28,   29,   30,   31,   32,
   33,   34,   35,   32,   32,   36,   37,   32,   38,   39,
   32,   40,   32,   41,   42,   32,   32,   32,   32,   32,
   43,   44,   45,    1,   46,    1,   47,   48,   49,   50,

   51,   52,   53,   54,   55,   32,   56,   57,   58,   59,
   60,   61,   32,   62,   63,   64,   65,   66,   67,   68,
   69,   32,   70,   71,   72,   73,    1,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,

   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74
} ;

static yyconst flex_int32_t yy_meta[75] = {
   0,
   1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
   7,   10,   11,   12,   13,   14,   15,   16,   17,   18,
   18,   18,   19,   20,   21,   22,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,    1,   24,    1,   25,   23,   23,   23,   23,
   23,   23,   23,   23,   26,   23,   23,   23,   27,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   28,
   29,   30,   31,   32
} ;

static yyconst flex_int16_t yy_base[1410] = {
   0,
   0,    0,    0,   73,  144,  217, 5231, 5230,  290,    0,
   364,    0,  438,  511,  584,  657,  730,    0,  804,    0,
   73,   74,   76,   79,  878,  951, 1024,    0, 1098,    0,
   1172,    0, 1246,    0,   86,   89, 1320,    0,   90,   95,
   1394,    0,  108,  122,  156,  229,   82,   94, 1468, 1542,
   169,  181,   96,  202,  242,  450,   99,  111, 1616,    0,
   241,  446,  129,  132, 1690,    0, 1764,    0,  443,  462,
   463,  475, 1838,    0,  162,  193,  519,  523, 1912,    0,
   133,  134,  178,  182, 5232, 9818, 9818,  526,  206, 5224,
   5221, 5172,  248,  525, 1981, 2039,  453, 2105, 2177,  103,

   542,  608,  681,  257,  475, 9818, 9818, 5187,  240,  555,
   922, 5190, 9818, 9818, 9818,    0,   89,  555, 9818,  615,
   619,  908, 1496, 5169,  685,  559,  267, 9818, 9818, 5184,
   621,  628, 5159, 1557, 9818, 9818, 2248,  964, 1565, 1983,
   9818, 2050,  975,  997, 1989, 2075, 5160, 1504,  708, 9818,
   9818,    0,  647, 9818, 9818, 5170,  913, 9818, 9818, 5168,
   927, 9818, 9818, 5167,  967, 1555, 2115, 9818, 9818,    0,
   2123, 1483, 9818, 2162, 2184, 2206, 2214, 5150, 2223, 1518,
   717, 9818, 9818,    0, 5154, 1531, 9818, 5153, 1994,    0,
   9818, 2056, 9818, 9818,    0, 5094,  488, 9818, 5092, 2272,

   2137, 9818,    0, 5089, 9818,  196, 9818, 5127, 5087,    0,
   9818, 9818, 5110, 5113, 5075,  146, 9818, 9818, 2228, 9818,
   491, 9818, 9818,  893, 2240, 9818,  609, 9818, 5079,    0,
   9818, 9818,  409,  449,    0, 9818, 9818,  883, 1543, 9818,
   9818, 2297, 9818, 9818,    0, 2301,    0, 9818, 9818, 9818,
   9818, 2305, 9818, 9818, 2309, 9818, 9818,    0,  181, 5078,
   9818, 9818,    0,  234, 5077,    0, 9818, 5070, 5069, 9818,
   9818,    0, 5074,    0, 9818, 5102, 5072,    0, 9818, 9818,
   5044,  166, 9818, 9818, 5098, 5069,    0, 9818, 5068,    0,
   0, 9818, 9818, 2080, 2348, 2414, 2023, 2169, 5066, 5104,

   9818,    0, 5082, 5078,    0,  126,  176, 9818, 9818, 2487,
   5077,  548, 5085,  653,   46,  448,  922,  522,  535, 2321,
   548,  579, 5047, 5031, 9818, 5078,  622, 2560, 5018, 5024,
   5037, 5028,  634,  488, 5024, 9818, 9818,    0,  992,  884,
   2103, 1526, 2233, 2027, 2320, 2234, 2322, 2632,  574, 2242,
   904,  915, 2337,  630, 2348, 2384, 1001, 9818, 2012, 2310,
   2365, 2374, 5078, 9818, 2118, 1990, 2178, 1014, 9818, 2386,
   5081, 9818,  554, 5074,  700, 5059, 1590, 9818, 5024, 2409,
   2444, 5057, 2467, 2518, 2524, 2570, 2578, 2391, 1605, 9818,
   5016, 2541, 2603, 5048, 5064, 9818, 2362, 2051, 2410, 2332,

   9818, 2533, 5060,  257, 2703, 2776, 5058, 9818, 2591, 2053,
   2604, 5057, 2432, 9818, 2638, 2662, 2666, 5040, 2688, 2731,
   2615, 2761, 2800,    0, 2804, 2748, 2826, 1513,    0, 2439,
   9818, 5004, 5053, 9818, 2454, 9818, 5001, 5050, 9818, 2458,
   9818, 4999, 5048, 9818, 2654, 2445, 2749, 2472, 9818, 2814,
   2852, 2636,    0, 2860, 5031, 2882, 2476, 9818, 4996, 2874,
   2891, 5029, 2908, 2916, 2836, 2920, 2942, 2513, 9818, 4993,
   2946, 2954,    0, 5031, 5034, 5024, 2532, 9818, 4984, 5022,
   4982, 2561, 9818, 4977,    0, 2589, 9818, 4976,    0, 4975,
   2149, 9818, 4985, 4980, 9818, 5016, 2623, 9818, 4967,    0,

   4966, 1530, 5012, 4977, 9818, 4926,    0, 9818, 9818, 4923,
   4924, 2676, 9818, 4917, 2718, 9818, 2757, 2697, 9818, 4916,
   2753, 9818, 4921, 4908,    0,  192, 4912, 4906,    0, 4903,
   4909, 4883,  215, 4868, 2735, 9818, 4858,    0, 2739, 9818,
   4857,    0, 2808, 9818, 4856, 2812, 9818, 4855,  881, 4901,
   896, 4886, 4851,  924, 4898,  974, 4883, 4842,    0, 4887,
   596,    0, 4838,    0,  461, 4837,    0,    0, 4835, 4871,
   0, 4828,    0, 4818,    0, 4822, 4816, 4849,    0, 4852,
   643, 4843, 9818, 9818, 4842, 2993, 4841, 4848, 9818, 4839,
   79, 4804, 4789,  576, 1577,  652, 2373, 9818,  102,  869,

   1462, 4794, 4789, 4825,  986, 2928,    0, 1595, 2598, 2049,
   2016, 9818, 9818,    0, 2339, 2681, 2099,    0,    0, 2930,
   2970, 2971, 2977, 2978, 2984, 2982, 3037, 2347, 2948, 3045,
   9818, 3053, 3069, 2478, 3034, 3062, 3065,    0, 4784, 3092,
   3096, 4783, 4813, 3084, 3092, 3095,  699, 3150, 3123, 3158,
   3173, 4822, 2848, 2896, 4777, 4774, 4773, 3114, 3126, 3181,
   3209, 3235, 3243, 3251, 4772, 4771,    0,    0, 4804, 4765,
   4755, 4763, 4762, 4761,    0,    0, 4760, 4759, 4758, 4762,
   4753, 4721, 3914, 3910, 3901, 3906, 3896, 3896, 3900, 2986,
   3879, 3887, 3887, 3864, 3862, 3856, 3851, 3837,    0, 3831,

   0, 3830, 9818, 9818, 9818, 3820, 3849, 2727, 3814,    0,
   3801, 3837, 3794, 3788, 2225, 3782, 3813,    0, 3171, 2865,
   9818, 1466, 3753, 3735, 1473, 3767, 3044, 1977, 3180, 2003,
   3738, 3725, 9818, 2990, 9818,    0, 3274, 3085, 3117, 3706,
   3185, 3201, 3205, 3733, 3347, 3406, 3390, 3349, 3392, 3394,
   3396, 3362, 3366, 3440, 3343, 3717, 3353, 9818, 3456, 3709,
   3446, 3511, 3584, 3478, 9818, 3699, 3691, 3665, 3449,    0,
   3537, 3610, 3564, 3661, 3646, 3686, 3644, 3641, 3638, 3631,
   3629,    0, 3627, 3593, 3582, 3585, 3578, 3577, 3566, 3562,
   3559, 3551, 9818, 3545, 3521, 3523, 9818, 3504, 3516, 3488,

   3484, 3484, 3473, 3467, 3455, 3451, 3441, 3429, 3424, 3121,
   3416, 3403, 3437, 3394, 3388, 3387, 9818, 3421, 3469, 9818,
   3410, 3356, 3332, 3348, 3375, 9818, 2068, 3326, 3339,    0,
   3129, 3468, 3439, 3312, 3214, 3487, 3657, 3548, 3489, 3643,
   3621, 3526, 3325, 3323, 3666, 3688, 3319, 3308, 3217, 3696,
   3732, 3200, 3199, 3192, 3185, 3190, 3184, 3183, 3182, 3175,
   3164, 3149, 3148, 3137, 3132, 1942, 3114, 3113, 3084, 3103,
   3102, 3092, 3078, 3076, 3070, 3060, 3041, 3053, 1437, 3029,
   3038, 3034,  434, 3031, 3026, 3024, 3022, 3010, 3008, 3000,
   2993, 2992, 2984, 2980, 2979, 2978, 3007, 9818, 2962, 2973,

   3570, 9818, 2988, 3615, 2940, 2928, 3502, 3497, 9818, 3644,
   3574, 3689, 3707, 3716, 3725, 2930, 2929, 3738, 3756, 2919,
   2914, 2913, 3747, 3785, 3794, 2906, 2905, 2904, 9818, 2894,
   2893, 2892, 2888, 2880, 2879, 2866,  844, 2857, 2843, 2847,
   2850, 2838, 2832, 2826, 2818, 2809, 2811, 2804, 2803, 2796,
   9818, 2791,    0,    0, 2794, 9818, 2772, 3222, 2764, 2765,
   2775, 2750, 2748, 2743, 2739, 2723, 2712, 2697, 2677, 2676,
   2670, 2666, 2653, 2648, 2646, 2632, 2625, 2649, 3691, 2599,
   2591, 3358, 3560, 3721, 3740, 3720, 3807, 3808, 3800, 2590,
   2582, 3802, 3817, 2580, 2574, 2569, 3809, 2559, 2553, 2551,

   2537, 2535, 2533, 2527, 2525, 2516, 2525, 2519,    0, 2498,
   2503, 2493, 2489, 9818, 2500, 2490, 2479, 2476, 2463, 2462,
   2457,    0, 9818, 9818, 2452, 2458, 9818, 2461, 2448, 2428,
   2419, 2411, 2390, 2389, 2388, 2369, 2364, 2355, 2354, 2353,
   2341, 2315, 2307, 2300, 2277, 2269, 2308, 2292, 3824, 3828,
   3829, 3836, 3845, 3852, 3858, 3847, 9818, 9818, 3849, 3876,
   9818, 9818, 9818, 3859, 9818, 9818, 9818, 9818, 9818, 9818,
   9818, 9818, 9818, 2255, 9818, 2249, 2237, 2242, 2231, 2242,
   2236, 2217, 9818, 9818, 9818, 9818, 9818, 2213, 2209, 3257,
   2214, 2212, 9818, 9818, 9818, 9818, 9818, 9818, 9818, 9818,

   9818, 9818, 9818, 9818, 2231, 2226, 9818, 9818, 3871, 3469,
   3895, 2077, 3879, 3902, 2180, 2161, 2154, 2155, 2149, 2141,
   2147, 2133, 2125, 2116, 9818, 2108, 2105, 9818, 9818, 3903,
   3569,  634, 3908, 3910, 2079, 2043, 2029, 1968, 1964, 1948,
   1935, 1919, 1564, 3265, 1546, 1507, 3744, 2037, 3916, 1503,
   1434,  948,  914,  872,  573, 9818, 3370,  549, 3379, 1537,
   3922,  507,  496, 3504, 9818,  437, 3599, 1451,  224, 3757,
   179, 1482,  111, 3843, 2114, 9818, 3923, 9818, 3973, 4005,
   4037, 4069, 4101, 4133, 4165, 4197, 4229, 4261, 4293, 4325,
   4357, 4389, 4421, 4453, 4485, 4517, 4549, 4581, 4613, 4645,

   4677, 4709, 4741, 4773, 4798, 4818, 4835, 4856, 4875, 4896,
   4927, 4953, 4985, 4995, 5012, 5043, 5074, 5105, 5137, 5163,
   5195, 5222, 5253, 5284, 5315, 5333, 5365, 5397, 5429, 5455,
   5465, 5496, 5527, 5558, 5589, 5599, 5616, 5634, 5666, 5684,
   5716, 5748, 5779, 5796, 5828, 5860, 5891, 5918, 5950, 5968,
   6000, 6010, 6027, 6037, 6054, 6086, 6104, 6136, 6168, 6188,
   6220, 6252, 6278, 6309, 6319, 6334, 6354, 6367, 6394, 6404,
   3906, 6423, 6449, 6476, 6502, 6528, 6560, 6577, 6602, 6633,
   6664, 6695, 6727, 6742, 6774, 6800, 6826, 6858, 6890, 6917,
   6943, 6974, 7005, 7036, 7068, 7099, 7117, 7149, 7181, 7213,

   7239, 7265, 7296, 7306, 7337, 7368, 7399, 7430, 7445, 7462,
   7487, 7505, 7537, 7555, 7587, 7619, 7644, 7662, 7694, 7726,
   7757, 7784, 7816, 7834, 7866, 7883, 7908, 7925, 7950, 7982,
   8000, 8032, 8064, 3911, 8084, 8094, 8126, 8158, 8173, 8205,
   8223, 8238, 8265, 8297, 8328, 3917, 8354, 8381, 3922, 3945,
   8412, 8433, 8459, 8469, 8501, 8516, 8542, 8568, 8600, 8627,
   8654, 8686, 8717, 8743, 8769, 8800, 8831, 8862, 8877, 8887,
   8904, 8914, 8929, 8961, 8971, 8981, 3936, 9001, 9033, 9051,
   9068, 9095, 4784, 9126, 9153, 9163, 9189, 9215, 9238, 9270,
   9296, 9328, 9355, 9381, 9391, 9422, 9453, 9470, 9485, 9503,

   9530, 9562, 9593, 9625, 9657, 9689, 9721, 9753, 9785
} ;

static yyconst flex_int16_t yy_def[1410] = {
   0,
   1179, 1179, 1178,    3, 1180, 1180, 1181, 1181, 1178,    9,
   1178,   11, 1182, 1182, 1183, 1183, 1178,   17, 1178,   19,
   1184, 1184, 1185, 1185, 1186, 1186, 1178,   27, 1178,   29,
   1178,   31, 1178,   33, 1187, 1187, 1178,   37, 1188, 1188,
   1178,   41, 1189, 1189, 1190, 1190, 1191, 1191, 1192, 1192,
   1193, 1193, 1194, 1194, 1195, 1195, 1196, 1196, 1178,   59,
   1197, 1197, 1198, 1198, 1178,   65, 1178,   67, 1199, 1199,
   1199, 1199, 1178,   73, 1200, 1200, 1201, 1201, 1178,   79,
   1202, 1202, 1203, 1203, 1178, 1178, 1178, 1178, 1178, 1204,
   1205, 1206, 1206, 1207, 1178, 1208, 1209, 1210, 1178, 1178,

   1206, 1206, 1207, 1206, 1178, 1178, 1178, 1211, 1212, 1212,
   1212, 1213, 1178, 1178, 1178, 1214, 1215, 1178, 1178, 1178,
   1178, 1216, 1216, 1178, 1217, 1178, 1218, 1178, 1178, 1219,
   1220, 1220, 1178, 1220, 1178, 1178, 1221, 1222, 1222, 1222,
   1178, 1222, 1178, 1178, 1223, 1223, 1178, 1224, 1225, 1178,
   1178, 1226, 1178, 1178, 1178, 1227, 1178, 1178, 1178, 1228,
   1178, 1178, 1178, 1229, 1230, 1230, 1230, 1178, 1178, 1231,
   1232, 1178, 1178, 1178, 1178, 1233, 1233, 1178, 1234, 1178,
   1235, 1178, 1178, 1236, 1237, 1178, 1178, 1238, 1178, 1239,
   1178, 1178, 1178, 1178, 1240, 1178, 1241, 1178, 1242, 1178,

   1243, 1178, 1244, 1178, 1178, 1178, 1178, 1245, 1178, 1246,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1247, 1178, 1178, 1247, 1178, 1178, 1178, 1178, 1178, 1248,
   1178, 1178, 1178, 1178, 1249, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1250, 1178, 1251, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1252, 1253, 1178,
   1178, 1178, 1254, 1255, 1178, 1256, 1178, 1178, 1178, 1178,
   1178, 1257, 1178, 1258, 1178, 1178, 1178, 1259, 1178, 1178,
   1178, 1178, 1178, 1178, 1260, 1178, 1261, 1178, 1178, 1262,
   1262, 1178, 1178, 1178, 1263, 1263, 1178, 1178, 1178, 1264,

   1178, 1265, 1266, 1267, 1268, 1178, 1267, 1178, 1178, 1269,
   1267, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1270, 1263, 1270,  328,
   328,  328,  328,  328,  328, 1178, 1178, 1271, 1272, 1273,
   1273, 1273, 1273, 1273, 1273, 1273, 1273, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1267, 1178, 1178, 1267, 1267,
   1178, 1178, 1274, 1178, 1275, 1276, 1275, 1178, 1178, 1275,
   1277, 1178, 1278, 1279, 1278, 1178, 1178, 1178, 1178, 1178,
   1280, 1178, 1280, 1281, 1282, 1280, 1281, 1283, 1178, 1178,
   1178, 1282, 1282, 1284, 1285, 1178, 1286, 1287, 1286, 1178,

   1178, 1286, 1288, 1288, 1289, 1289, 1288, 1178, 1290, 1291,
   1290, 1288, 1178, 1178, 1290, 1178, 1292, 1178, 1292, 1293,
   1294, 1292, 1178, 1295, 1293, 1294, 1294, 1296, 1297, 1178,
   1178, 1178, 1298, 1178, 1178, 1178, 1178, 1299, 1178, 1178,
   1178, 1178, 1300, 1178, 1301, 1302, 1301, 1178, 1178, 1301,
   1303, 1178, 1304, 1303, 1178, 1305, 1178, 1178, 1178, 1178,
   1306, 1178, 1306, 1307, 1308, 1306, 1307, 1178, 1178, 1178,
   1308, 1308, 1309, 1310, 1311, 1310, 1178, 1178, 1178, 1312,
   1178, 1178, 1178, 1178, 1313, 1178, 1178, 1178, 1314, 1178,
   1315, 1178, 1316, 1178, 1178, 1317, 1178, 1178, 1178, 1318,

   1178, 1178, 1319, 1319, 1178, 1178, 1320, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1321, 1178, 1321, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1322, 1178, 1178, 1178, 1323, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1324, 1178, 1178,
   1178, 1325, 1178, 1178, 1178, 1178, 1178, 1178, 1326, 1327,
   1326, 1178, 1178, 1328, 1329, 1328, 1178, 1178, 1330, 1178,
   1178, 1331, 1178, 1332, 1178, 1178, 1333, 1334, 1178, 1335,
   1336, 1178, 1337, 1178, 1338, 1178, 1178, 1339, 1340, 1341,
   1178, 1342, 1178, 1178, 1342, 1343, 1342, 1341, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1344, 1178, 1178, 1178,

   1178, 1178, 1178, 1178, 1345, 1345, 1346, 1178, 1347, 1347,
   1347, 1178, 1178, 1348, 1347, 1347, 1347, 1349, 1350, 1351,
   1351, 1351, 1351, 1351, 1351, 1351, 1178, 1178, 1178, 1178,
   1178, 1342, 1178, 1178, 1352, 1352, 1353, 1354, 1178, 1355,
   1355, 1178, 1356, 1357, 1357, 1358, 1178, 1359, 1360, 1360,
   1361, 1362, 1178, 1363, 1178, 1178, 1178, 1364, 1364, 1365,
   1366, 1367, 1368, 1368, 1178, 1178, 1369, 1370, 1371, 1178,
   1178, 1178, 1178, 1178, 1372, 1373, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1374, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1375, 1178,

   1376, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1377,
   1178, 1378, 1178, 1178, 1178, 1178, 1379, 1380, 1381, 1178,
   1178, 1178, 1178, 1178, 1178, 1382, 1382, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1383, 1178, 1384, 1384, 1385,
   1384, 1384, 1384, 1386, 1387, 1387, 1387, 1387, 1387, 1387,
   1387, 1178, 1178, 1388, 1389, 1178, 1390, 1178, 1390, 1178,
   1391, 1392, 1392, 1393, 1178, 1178, 1178, 1178, 1394, 1395,
   1396, 1396, 1397, 1178, 1178, 1398, 1178, 1178, 1178, 1178,
   1178, 1399, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,

   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1378, 1178, 1178, 1178, 1178, 1400, 1381, 1178,
   1178, 1178, 1178, 1178, 1401, 1178, 1178, 1178, 1178, 1402,
   1402, 1384, 1384, 1178, 1384, 1387, 1386, 1387, 1387, 1387,
   1178, 1389, 1178, 1178, 1391, 1393, 1178, 1178, 1178, 1394,
   1403, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1404, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1400, 1178, 1178, 1178,

   1405, 1178, 1401, 1401, 1178, 1178, 1384, 1384, 1178, 1384,
   1387, 1387, 1387, 1387, 1389, 1178, 1178, 1391, 1393, 1178,
   1178, 1178, 1394, 1403, 1403, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1406, 1407, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1405, 1405, 1178,
   1178, 1384, 1384, 1384, 1387, 1387, 1387, 1387, 1389, 1178,
   1178, 1391, 1393, 1178, 1178, 1178, 1394, 1178, 1178, 1178,

   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1408, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1409, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1384, 1384,
   1384, 1387, 1387, 1387, 1387, 1389, 1178, 1178, 1391, 1393,
   1178, 1178, 1178, 1394, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,

   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1384, 1384,
   1178, 1386, 1387, 1387, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1384,
   1384, 1386, 1387, 1387, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1384, 1386, 1387, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1384, 1386,
   1387, 1178, 1178, 1178, 1178, 1178, 1178, 1386, 1178, 1178,
   1178, 1386, 1178, 1178, 1386, 1178, 1386,    0, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,

   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,

   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,

   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178
} ;

static yyconst flex_int16_t yy_nxt[9893] = {
   0,
   87,   88,   89,   87,   88,   87,   90,   87,   91,   87,
   87,   87,   87,   87,   92,   87,   93,   94,   87,   92,
   92,   92,   87,   95,   87,   96,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   87,   98,   87,   97,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   87,
   87,   87,   87,   87,   99,  155,  155,   99,  159,  156,
   156,  159,  160,  594,  218,  160,  100,  101,  191,  102,
   103,  191,  198,  104,  104,  105,  218,  198,  231,   86,

   232,  241,   86,  199,  354,  594,  374,  354,  199,  206,
   207,  376,  206,  241,  208,  200,  157,  157,  722,  161,
   200,  233,  161,  206,  207,  219,  206,  581,  208,  192,
   581,  254,  192,  201,  254,  288,  288,  219,  201,  234,
   722,  728,  242,  105,  106,  106,  107,  106,  106,  106,
   108,  209,  106,  106,  242,  106,  106,  106,  211,  106,
   212,  106,  110,  728,  275,  209,  110,  106,  106,  213,
   227,  228,  255,  227,  214,  255,  289,  289,  276, 1009,
   291,  215,  227,  228,  291,  227,  106,  111,  106,  292,
   293,  511,  582,  292,  293,  275,  510,  502,  550,  216,

   502,  305,  503,  552,  231,  277,  232,  297,  298,  276,
   297,  569,  229,  106,  106,  106,  106,  106,  106,  107,
   106,  106,  106,  108,  229,  106,  106,  233,  106,  106,
   106,  211,  106,  212,  106,  110,  277, 1174,  568,  110,
   106,  106,  213,  248,  236,  234,  237,  214,  685,  299,
   686,  555,  249,  250,  215,  306,  557,  366,  367,  106,
   111,  106,  367,  647,  307,  692,  251,  238,  392,  392,
   392,  392,  216,  305,  359,  393,  360,  360,  360,  693,
   1173,  407,  305,  367,  252,  239,  106,  106,  106,  106,
   114,  114,  115,  114,  114,  114,  114,  114,  116,  114,

   114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
   114,  114,  114,  114,  114,  114,  117,  117,  117,  117,
   117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
   117,  117,  114,  118,  114,  117,  117,  117,  117,  117,
   117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
   117,  117,  117,  117,  117,  117,  117,  117,  117,  114,
   114,  114,  114,  117,  119,  120,  121,  120,  120,  119,
   119,  119,  122,  119,  119,  119,  119,  119,  119,  119,
   119,  123,  119,  119,  119,  119,  124,  119,  119,  119,
   125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

   125,  125,  125,  125,  125,  125,  119,  126,  119,  125,
   125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
   125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
   125,  125,  125,  119,  119,  119,  127,  125,  128,  128,
   129,  128,  128,  128,  130,  267,  128,  128,  248,  128,
   128,  128,  236,  128,  237,  128,  132,  249,  250,  526,
   132,  133,  128,  527,  267,  267,  707,  304,  268,  304,
   304,  251,  304,  304,  304,  238,  361,  267,  305,  361,
   128,  134,  128,  595,  961,  708,  268,  268,  269,  252,
   492,  362,  515,  239,  528,  515, 1171,  353,  962,  526,

   269,  493,  516,  527,  595,  268,  269,  128,  128,  128,
   128,  128,  128,  129,  128,  128,  128,  130,  269,  128,
   128,  279,  128,  128,  128,  279,  128,  294,  128,  132,
   294,  494,  280,  132,  133,  128,  280,  308,  615,  304,
   309,  304,  310,  354,  281,  353,  354,  616,  281,  589,
   305,  295,  589,  128,  134,  128,  377,  378,  596,  377,
   389,  390,  282,  389, 1009, 1169,  282,  305,  312,  296,
   595,  374, 1178,  367,  601,  354,  376,  367,  354,  596,
   128,  128,  128,  128,  135,  135,  136,  135,  135,  135,
   137,  595,  135,  135,  601,  135,  135,  135,  367,  135,

   379,  135,  139, 1166,  391,  725,  139,  140,  141,  355,
   521,  522,  355,  521,  595,  306,  380,  380,  380,  380,
   380,  380,  380,  380,  356,  725,  135,  142,  135, 1164,
   353,  354,  381,  305,  354,  595,  381,  382,  398,  399,
   704,  382,  612,  399,  581, 1178,  399,  581,  430,  431,
   399,  430,  523,  135,  135,  135,  135,  135,  135,  136,
   135,  135,  135,  137,  399,  135,  135,  705,  135,  135,
   135,  399,  135,  606,  135,  139,  613,  619,  353,  139,
   140,  141,  357,  358,  595,  357,  380,  380,  380,  380,
   1148,  591,  432,  308,  607,  304,  309,  304,  310,  135,

   142,  135,  381,  614,  595,  408,  305,  382,  388,  426,
   426,  426,  426,  591,  592,  593,  427,  374,  471,  471,
   471,  471,  376,  408,  312,  472,  135,  135,  135,  135,
   119,  143,  144,  143,  143,  119,  119,  119,  145,  119,
   119,  119,  119,  119,  119,  119,  119,  146,  119,  119,
   119,  119,  147,  119,  119,  119,  148,  148,  148,  148,
   148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
   148,  148,  119,  126,  119,  148,  148,  148,  148,  148,
   148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
   148,  148,  148,  148,  148,  148,  148,  148,  148,  119,

   119,  119,  149,  148,  150,  150,  151,  150,  150,  150,
   150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
   150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
   152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
   152,  152,  152,  152,  152,  152,  150,  153,  150,  152,
   152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
   152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
   152,  152,  152,  150,  150,  150,  150,  152,  162,  162,
   163,  162,  162,  162,  164,  608,  162,  162,  608,  162,
   162,  162, 1008,  162, 1178,  162,  166, 1178,  550,  729,

   166,  162,  162,  552, 1178,  357,  358, 1009,  357,  380,
   380,  380,  380,  550,  435,  436,  383,  435,  552,  729,
   162,  167,  162,  368,  369,  381,  368,  619,  440,  441,
   382,  440,  628,  530,  629,  629,  629,  531, 1009, 1178,
   367,  555,  595,  532,  367,  533,  557,  162,  162,  162,
   162,  162,  162,  163,  162,  162,  162,  164,  437,  162,
   162,  595,  162,  162,  162,  367,  162,  370,  162,  166,
   408, 1009,  442,  166,  162,  162,  416,  416,  416,  416,
   385,  410,  411,  595,  446,  447,  411,  734,  408,  447,
   734,  555,  417,  162,  167,  162,  557,  418,  416,  416,

   416,  416,  357,  358, 1163,  357,  304,  411,  304,  304,
   447,  304,  304,  304,  417,  368,  369,  305,  368,  418,
   162,  162,  162,  162,  168,  168,  169,  168,  168,  168,
   168,  168,  170,  168,  168,  168,  168,  168,  168,  168,
   168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
   171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
   171,  171,  171,  171,  171,  171,  168,  172,  168,  171,
   171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
   171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
   171,  171,  171,  168,  168,  168,  168,  171,  173,  174,

   175,  174,  174,  173,  173,  173,  176,  173,  173,  173,
   173,  173,  173,  173,  173,  177,  173,  173,  173,  173,
   178,  173,  173,  173,  179,  179,  179,  179,  179,  179,
   179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
   173,  180,  173,  179,  179,  179,  179,  179,  179,  179,
   179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
   179,  179,  179,  179,  179,  179,  179,  173,  173,  173,
   181,  179,  182,  182,  183,  182,  182,  182,  182,  182,
   184,  182,  182,  182,  182,  182,  182,  182,  182,  182,
   182,  182,  182,  182,  182,  182,  182,  182,  185,  185,

   185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
   185,  185,  185,  185,  182,  186,  182,  185,  185,  185,
   185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
   185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
   185,  182,  182,  182,  182,  185,   86,   86,  187,   86,
   86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
   86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
   86,   86,  188,  188,  188,  188,  188,  188,  188,  188,
   188,  188,  188,  188,  188,  188,  188,  188,   86,  189,
   86,  188,  188,  188,  188,  188,  188,  188,  188,  188,

   188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
   188,  188,  188,  188,  188,   86,   86,   86,   86,  188,
   193,  193,  194,  193,  193,  193,  193,  193,  193,  193,
   193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
   193,  193,  193,  193,  193,  193,  195,  195,  195,  195,
   195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
   195,  195,  193,  196,  193,  195,  195,  195,  195,  195,
   195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
   195,  195,  195,  195,  195,  195,  195,  195,  195,  193,
   193,  193,  193,  195,   86,   86,  202,   86,   86,   86,

   86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
   86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
   203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
   203,  203,  203,  203,  203,  203,   86,  204,   86,  203,
   203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
   203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
   203,  203,  203,   86,   86,   86,   86,  203,  220,  221,
   222,  220,  221,  220,  220,  220,  220,  220,  220,  223,
   220,  220,  220,  220,  457,  458,  220,  457,  956,  730,
   220,  220,  220,  220,  619,  957,  821,  386,  386,  386,

   386, 1172, 1009,  824,  383,  423,  416,  416,  423,  730,
   220,  225,  220,  381,  653,  424,  821,  653,  382,  468,
   469,  417,  468,  824,  424,  619,  418,  608,  459, 1175,
   608,  502,  477,  478,  502,  477,  503,  220,  220,  220,
   220,  220,  220,  221,  222,  220,  221,  220,  220,  220,
   220,  220,  220,  223,  220,  220,  220,  220,  400,  401,
   220,  400, 1162,  470,  220,  220,  220,  220,  385,  619,
   1158, 1178, 1178,  447, 1178,  399,  479,  447,  597,  399,
   619,  597, 1178,  411,  220,  225,  220,  411,  534, 1178,
   621,  377,  378,  530,  377, 1168,  608,  531,  447,  608,

   399,  598,  402,  532, 1157,  533,  389,  390,  411,  389,
   1155,  220,  220,  220,  220,  220,  243,  243,  244,  243,
   243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
   243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
   243,  243,  245,  245,  245,  245,  245,  245,  245,  245,
   245,  245,  245,  245,  245,  245,  245,  245,  243,  246,
   243,  245,  245,  245,  245,  245,  245,  245,  245,  245,
   245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
   245,  245,  245,  245,  245,  243,  243,  243,  243,  245,
   256,  256,  257,  256,  256,  256,  256,  256,  258,  256,

   256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
   256,  256,  256,  256,  256,  256,  259,  259,  259,  259,
   259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
   259,  259,  256,  260,  256,  259,  259,  259,  259,  259,
   259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
   259,  259,  259,  259,  259,  259,  259,  259,  259,  256,
   256,  256,  256,  259,  261,  261,  262,  261,  261,  261,
   261,  261,  263,  261,  261,  261,  261,  261,  261,  261,
   261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
   264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

   264,  264,  264,  264,  264,  264,  261,  265,  261,  264,
   264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
   264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
   264,  264,  264,  261,  261,  261,  261,  264,  270,  270,
   271,  270,  270,  270,  270,  270,  270,  270,  270,  270,
   270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
   270,  270,  270,  270,  272,  272,  272,  272,  272,  272,
   272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
   270,  273,  270,  272,  272,  272,  272,  272,  272,  272,
   272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

   272,  272,  272,  272,  272,  272,  272,  270,  270,  270,
   270,  272,  283,  283,  284,  283,  283,  283,  283,  283,
   283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
   283,  283,  283,  283,  283,  283,  283,  283,  285,  285,
   285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
   285,  285,  285,  285,  283,  286,  283,  285,  285,  285,
   285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
   285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
   285,  283,  283,  283,  283,  285,  313, 1009,  940,  412,
   416,  416,  416,  416, 1154,  482,  483,  419,  482,  314,

   1178,  411, 1153,  595,  941,  411,  417,  408,  636,  315,
   316,  418,  636,  634,  317,  318,  634,  608,  319,  320,
   608,  321,  322,  595,  297,  298,  411,  297,  608,  315,
   316,  608, 1009,  636,  317,  318, 1009,  305,  827,  484,
   319,  320,  323,  324,  321,  322,  325,  325,  325,  325,
   608,  413,  414,  608,  413,  326, 1178,  486,  487,  827,
   486,  421,  325,  325,  327,  739,  299, 1178,  411,  645,
   619,  650,  411,  645, 1178,  650,  422,  422,  422,  422,
   619,  294,  329,  419,  294,  623,  330, 1152,  331,  332,
   333, 1160,  417,  411,  645,  415,  650,  418,  595, 1151,

   608,  488,  334,  608,  608,  295,  335,  608,  336,  738,
   337,  338,  325,  325,  325,  325,  448,  449,  595,  448,
   1178,  326, 1132,  296,  452,  452,  452,  452,  325,  325,
   329,  453, 1178,  447, 1150,  366,  367,  447,  497,  498,
   367,  497,  454,  454,  454,  455,  619,  421,  327,  743,
   341,  492,  342, 1146,  343,  344,  345,  619,  447,  620,
   450,  367,  493,  460,  460,  460,  460, 1145,  346, 1144,
   297,  298,  347,  297,  336, 1177,  337,  338,  348,  461,
   496,  348,  499, 1143,  462,  460,  460,  460,  460, 1142,
   349,  349,  494,  350,  351, 1178,  367,  352,  352,  353,

   367,  461,  295, 1141, 1140, 1139,  462,  460,  460,  460,
   460, 1138,  299, 1137,  463,  466,  466,  466,  466, 1136,
   296,  367,  463,  461,  460,  460,  460,  460,  462,  512,
   513,  461,  512,  735,  608,  608,  462,  608,  608, 1135,
   461,  518,  519,  355,  518,  462,  355,  353,  403,  403,
   1129,  403,  403,  403,  404, 1128,  403,  403,  627,  403,
   403,  403, 1127,  403,  353,  403,  406,  735, 1126, 1124,
   406,  403,  407,  514, 1123, 1122,  619,  619,  465,  495,
   495,  495,  495,  622,  624,  520,  465, 1121, 1120, 1119,
   403,  406,  403,  625,  735,  495,  495,  496,  535,  536,

   1118,  535,  539,  540, 1117,  539,  543,  544, 1116,  543,
   546,  547,  353,  546, 1115,  495, 1108,  403,  403,  403,
   403,  608,  597,  608,  608,  597,  608,  359,  612,  360,
   360,  360, 1107,  400,  401,  305,  400, 1106,  361, 1105,
   608,  361,  537,  608,  495,  598,  541,  599,  634,  355,
   545,  634,  355,  362,  548,  325,  325,  325,  325,  353,
   600,  298,  613,  619,  362,  619,  361,  599, 1104,  361,
   353,  325,  325,  576,  727,  361, 1103,  727,  361,  398,
   399,  362,  600,  626,  399,  630,  631,  353,  630,  614,
   627,  325,  641,  641,  641,  641,  353,  598,  332,  333,

   632,  741, 1102,  366,  367,  399,  633,  353,  367,  305,
   380,  380,  380,  380, 1101, 1100, 1099,  336,  353,  337,
   338,  325,  325,  325,  325, 1098,  381, 1178,  399,  367,
   1097,  382,  399,  413,  414,  353,  413,  325,  325,  325,
   430,  431,  637,  430,  353,  386,  386,  386,  386, 1096,
   1095, 1094,  383,  399,  633,  435,  436,  576,  435,  440,
   441,  381,  440,  659,  332,  333,  382,  659, 1178, 1178,
   1178, 1178, 1093,  448,  449, 1178,  448,  457,  458,  634,
   457, 1092,  634,  336, 1178,  337,  338,  583,  659, 1178,
   583, 1091,  583,  583,  583,  583,  583,  583,  583,  584,

   583,  585,  583,  585,  586,  583, 1090, 1089, 1088,  583,
   583,  583,  588, 1087,  468,  469,  385,  468,  522,  380,
   380,  380,  380, 1085, 1084,  392,  392,  392,  392,  583,
   583,  583,  393,  477,  478,  381,  477, 1083, 1082, 1178,
   382,  388,  392,  392,  392,  392, 1081, 1080, 1079,  393,
   398,  399, 1078, 1077, 1076,  399,  583,  583,  583,  583,
   583,  608,  482,  483,  608,  482, 1074, 1178, 1178, 1178,
   1178,  386,  386,  386,  386, 1009,  399, 1073,  383,  380,
   380,  380,  380, 1178, 1178, 1178, 1072,  381, 1071,  646,
   486,  487,  382,  486, 1070,  381, 1069,  408, 1068,  608,

   382,  388,  608, 1178, 1178, 1178, 1178, 1178,  410,  411,
   1178, 1178, 1067,  411, 1066,  408,  426,  426,  426,  426,
   1065, 1178,  411,  427,  497,  498,  411,  497, 1178, 1178,
   1063, 1178, 1178,  348,  411, 1062,  348,  452,  452,  452,
   452, 1061,  385, 1058,  408,  349,  349,  411,  350,  351,
   737, 1057,  352,  352,  353,  410,  411,  295,  455, 1048,
   411, 1047,  408,  416,  416,  416,  416,  422,  422,  422,
   422,  446,  447,  902,  419,  296,  447,  512,  513,  417,
   512,  411,  608,  417,  418,  608, 1046, 1045,  418, 1178,
   1178, 1178, 1178, 1044,  651, 1043, 1178,  447,  518,  519,

   1042,  518,  353,  403,  403, 1178,  403,  403,  403,  647,
   1178,  403,  403, 1041,  403,  403,  403, 1040,  403,  515,
   648,  406,  515, 1039, 1038,  406,  403,  407,  810,  516,
   742,  810,  423,  416,  416,  423,  535,  536,  421,  535,
   539,  540,  424,  539, 1037,  403,  406,  403,  417,  426,
   426,  426,  426,  418,  521,  522,  427,  521, 1178, 1036,
   1178, 1178,  422,  422,  422,  422, 1178,  447, 1178,  419,
   1035,  447,  403,  403,  403,  403,  403,  403,  417,  403,
   403,  403,  647,  418,  403,  403, 1034,  403,  403,  403,
   1033,  403,  447,  403,  406, 1032,  523, 1031,  406,  403,

   403,  423,  416,  416,  423,  423,  416,  416,  423,  543,
   544,  424,  543,  546,  547,  424,  546,  417,  403,  406,
   403,  417,  418, 1030, 1029, 1028,  418, 1178, 1178, 1178,
   1178,  446,  447,  421, 1178, 1026,  447,  471,  471,  471,
   471, 1025, 1022, 1021,  472,  403,  403,  403,  403,  653,
   1020, 1019,  653,  452,  452,  452,  452,  447, 1018,  424,
   453,  452,  452,  452,  452, 1017,  820, 1016,  453,  820,
   660,  454,  454,  454,  455,  460,  460,  460,  460,  454,
   454,  454,  455,  452,  452,  452,  452, 1015, 1014, 1013,
   453,  461,  466,  466,  466,  466,  462,  653, 1009,  463,

   653,  663,  663,  663,  455, 1012, 1011,  424,  461, 1178,
   1178, 1178, 1178,  462, 1010, 1007, 1178,  460,  460,  460,
   460,  466,  466,  466,  466, 1178, 1006, 1005,  463,  734,
   1178,  608,  734,  461,  608, 1004,  735,  461,  462, 1003,
   1002, 1001,  462,  460,  460,  460,  460,  471,  471,  471,
   471, 1000,  999,  998,  472, 1178, 1178, 1178, 1178,  461,
   996,  995, 1178,  465,  462,  628,  994,  629,  629,  629,
   735,  608,  608,  619,  608,  608,  991,  990,  608,  608,
   1178,  608,  608,  608,  745,  608,  608,  797,  608,  981,
   797,  734,  465,  583,  734,  980,  583,  735,  583,  583,

   583,  583,  583,  583,  583,  584,  583,  585,  583,  585,
   719,  583,  826,  619,  619,  583,  583,  583,  588,  977,
   619,  619,  746,  976,  718,  619,  748,  619,  975,  974,
   973,  747,  751,  750,  972,  583,  720,  583,  630,  631,
   749,  630,  971,  970,  798,  727,  630,  631,  727,  630,
   969,  366,  636,  752,  630,  631,  636,  630,  968,  633,
   967,  753,  583,  583,  583,  583,  583,  633,  598,  754,
   630,  631,  966,  630,  965,  633,  964,  636,  305, 1178,
   636,  963,  366,  367,  636,  753,  608,  367,  960,  608,
   959,  633,  958,  757,  757,  757,  757,  759,  759,  759,

   759,  398,  645,  955,  954,  636,  645,  633,  367, 1178,
   645,  953,  398,  399,  645,  633,  758,  399,  608,  755,
   758,  608,  810,  633,  952,  810,  950,  645,  949,  408,
   831,  446,  659,  831,  944,  645,  659,  945,  399,  633,
   410,  650,  948, 1178,  659,  650,  832,  408,  659,  761,
   403,  403,  947,  403,  403,  403,  647,  659,  403,  403,
   946,  403,  403,  403, 1178,  403,  650,  403,  763,  659,
   943,  833,  763,  403,  403, 1178,  650,  942,  939,  408,
   650,  825, 1178,  308,  825,  304,  608,  304,  819,  608,
   410,  411,  403,  763,  403,  411,  305,  408,  446,  447,

   938,  650,  608,  447,  826,  608,  608,  937,  936,  608,
   452,  452,  452,  452,  935,  608,  411,  770,  608,  403,
   403,  403,  403, 1027,  447,  934, 1027,  764,  771,  771,
   771,  455,  933,  932,  931,  769,  773,  773,  773,  773,
   930,  929,  928,  453,  452,  452,  452,  452,  737,  927,
   926,  453,  452,  452,  452,  452,  835,  455, 1125,  453,
   737, 1125,  663,  663,  663,  455, 1156,  922,  910, 1156,
   663,  663,  663,  455,  830,  831,  830,  830,  831,  830,
   830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
   830,  830,  830,  830,  830,  830,  830,  830,  830,  830,

   328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
   328,  328,  328,  328,  328,  328,  830,  830,  830,  328,
   328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
   328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
   328,  328,  328,  830,  830,  830,  830,  830,  608,  901,
   608,  608,  901,  608,  757,  757,  757,  757,  921,  608,
   366,  367,  608,  630,  631,  367,  630,  630,  631,  920,
   630, 1165,  902,  917, 1165,  916,  904,  758,  752,  904,
   1167,  909,  841, 1167,  633,  906,  367,  905,  633,  900,
   619,  608,  619,  608,  608,  608,  608,  608,  608,  826,

   608,  842,  899,  839, 1049,  836,  830,  831,  830,  830,
   831,  830,  830,  830,  830,  830,  830,  830,  830,  830,
   830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
   830,  830,  633,  619,  898,  619,  633,  619,  718,  619,
   608,  630,  631,  608,  630,  896,  895,  840,  830,  837,
   830,  838,  894,  746,  571,  746,  754,  759,  759,  759,
   759,  893,  633,  398,  399,  305,  446,  447,  399,  608,
   608,  447,  608,  608,  892,  830,  830,  830,  830,  830,
   758,  308,  891,  304,  408,  304,  819,  890,  608,  399,
   608,  608,  447,  608,  305,  410,  411,  908,  608,  889,

   411,  608,  408,  608,  845, 1170,  608,  850, 1170,  888,
   633,  403,  403,  887,  403,  403,  403,  647,  907,  403,
   403,  411,  403,  403,  403,  886,  403, 1131,  648,  763,
   619,  885,  619,  763,  403,  407,  846,  911,  452,  452,
   452,  452,  884,  366,  367,  770,  883,  913,  367,  608,
   982,  882,  608,  403,  763,  403,  771,  771,  771,  455,
   983,  608,  881,  880,  608,  773,  773,  773,  773,  367,
   608,  979,  453,  608,  979,  608,  915,  879,  608,  878,
   403,  403,  403,  403,  403,  403,  455,  403,  403,  403,
   647,  619,  403,  403,  902,  403,  403,  403,  912,  403,

   1167,  403,  763, 1167,  877,  876,  763,  403,  403,  875,
   1050,  452,  452,  452,  452, 1147,  904,  619,  770,  904,
   874,  985,  630,  631,  873,  630,  403,  763,  403,  771,
   771,  771,  455,  862,  863,  872,  871,  752,  864,  826,
   861,  865,  866,  633,  608,  608,  867,  608,  608,  868,
   869,  860,  870,  403,  403,  403,  403,  830,  830,  830,
   830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
   830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
   830,  830,  830,  398,  399,  859,  619,  858,  399,  857,
   608,  633,  979,  608,  408,  979,  856,  914,  855,  830,

   830,  830,  854,  475,  853,  410,  411,  984,  608,  399,
   411,  608,  408,  446,  447,  902,  918,  608,  447,  852,
   608,  608,  608,  849,  608,  608,  830,  830,  830,  830,
   830,  411,  619,  452,  452,  452,  452,  986,  919,  447,
   770,  608,  366,  367,  608,  608,  923,  367,  608,  848,
   619,  924,  924,  924,  455,  398,  399,  847, 1170,  619,
   399, 1170,  408,  619,  446,  447, 1053,  844,  367,  447,
   987, 1051,  989,  410,  411,  843,  619,  834,  411,  988,
   408,  399,  829,  619,  828,  992,  452,  452,  452,  452,
   447,  598,  823,  770,  997,  452,  452,  452,  452,  411,

   1159, 1052,  770,  993,  924,  924,  924,  455,  608,  608,
   822,  608,  608,  924,  924,  924,  455,  366,  367,  398,
   399,  817,  367,  408,  399,  608,  446,  447,  608,  608,
   608,  447,  608,  608,  410,  411,  816, 1111,  298,  411,
   1111,  408,  815,  367, 1176,  399,  608, 1176,  814,  608,
   619,  619,  447,  608,  571,  812,  608, 1054, 1055,  608,
   411, 1056,  608, 1059,  366,  367,  398,  399,  811,  367,
   1064,  399,  608,  708,  809,  608,  446,  447, 1060, 1112,
   608,  447,  408,  608,  808,  807,  737, 1109,  619, 1110,
   367,  806,  399,  410,  411,  619, 1111,  298,  411, 1111,

   408,  619,  447,  608,  608,  805,  608,  608, 1113,  608,
   804,  608,  608, 1114,  608,  746,  803,  608,  802,  411,
   608, 1130,  619, 1167,  297,  298, 1167,  297,  618, 1133,
   618,  618,  618,  710,  801,  800,  710,  710,  299,  736,
   799,  736,  736,  736,  618,  619,  618,  618,  618,  796,
   795,  619,  737,  619,  794,  792, 1149,  746,  710,  619,
   1134,  710,  710,  791,  790,  619, 1112,  744,  789,  744,
   744,  744, 1161,   86,   86,   86,   86,   86,   86,   86,
   86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
   86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

   86,   86,   86,   86,   86,  109,  109,  109,  109,  109,
   109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
   109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
   109,  109,  109,  109,  109,  109,  109,  112,  112,  112,
   112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
   112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
   112,  112,  112,  112,  112,  112,  112,  112,  112,  131,
   131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
   131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
   131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

   131,  138,  138,  138,  138,  138,  138,  138,  138,  138,
   138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
   138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
   138,  138,  138,  154,  154,  154,  154,  154,  154,  154,
   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
   154,  154,  154,  154,  154,  158,  158,  158,  158,  158,
   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
   158,  158,  158,  158,  158,  158,  158,  165,  165,  165,

   165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
   165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
   165,  165,  165,  165,  165,  165,  165,  165,  165,  190,
   190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
   190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
   190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
   190,  197,  197,  197,  197,  197,  197,  197,  197,  197,
   197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
   197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
   197,  197,  197,  205,  205,  205,  205,  205,  205,  205,

   205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
   205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
   205,  205,  205,  205,  205,  210,  210,  210,  210,  210,
   210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
   210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
   210,  210,  210,  210,  210,  210,  210,  217,  217,  217,
   217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
   217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
   217,  217,  217,  217,  217,  217,  217,  217,  217,  224,
   224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

   224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
   224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
   224,  226,  226,  226,  226,  226,  226,  226,  226,  226,
   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
   226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
   226,  226,  226,  230,  230,  230,  230,  230,  230,  230,
   230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
   230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
   230,  230,  230,  230,  230,  235,  235,  235,  235,  235,
   235,  235,  235,  235,  235,  235,  235,  235,  235,  235,

   235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
   235,  235,  235,  235,  235,  235,  235,  240,  240,  240,
   240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
   240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
   240,  240,  240,  240,  240,  240,  240,  240,  240,  247,
   247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
   247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
   247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
   247,  253,  253,  253,  253,  253,  253,  253,  253,  253,
   253,  253,  253,  253,  253,  253,  253,  253,  253,  253,

   253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
   253,  253,  253,  266,  266,  266,  266,  266,  266,  266,
   266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
   266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
   266,  266,  266,  266,  266,  274,  274,  274,  274,  274,
   274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
   274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
   274,  274,  274,  274,  274,  274,  274,  278,  278,  278,
   278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
   278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

   278,  278,  278,  278,  278,  278,  278,  278,  278,  287,
   287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
   287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
   287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
   287,  290,  290,  290,  290,  290,  290,  290,  290,  290,
   290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
   290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
   290,  290,  290,  300,  300,  788,  300,  300,  300,  300,
   300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
   300,  300,  300,  300,  300,  300,  300,  300,  300,  300,

   300,  300,  300,  300,  300,  303,  736,  787,  736,  736,
   736,  786,  785,  784,  783,  781,  780,  779,  778,  777,
   303,  475,  303,  303,  303,  775,  774,  768,  767,  303,
   304,  766,  304,  304,  765,  304,  388,  760,  756,  304,
   304,  733,  304,  304,  304,  311,  732,  311,  311,  311,
   311,  731,  311,  724,  723,  721,  311,  311,  311,  311,
   311,  311,  328,  328,  328, 1178,  305,  305,  305,  718,
   328,  579,  716,  715,  714,  328,  328,  328,  328,  328,
   328,  328,  328,  328,  713,  328,  328,  339,  571,  339,
   339,  711,  339,  709,  706,  703,  339,  339,  702,  339,

   339,  339,  340,  340,  340,  555,  701,  700,  550,  699,
   340,  698,  697,  696,  695,  340,  340,  340,  340,  340,
   340,  340,  340,  340,  694,  340,  340,  363,  363,  691,
   363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
   363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
   363,  363,  363,  363,  363,  363,  363,  363,  363,  365,
   690,  689,  688,  687,  684,  365,  524,  365,  365,  365,
   365,  365,  683,  682,  365,  365,  365,  365,  365,  365,
   681,  680,  679,  505,  365,  371,  371,  371,  371,  371,
   371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

   371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
   371,  371,  371,  371,  371,  371,  371,  373,  505,  373,
   373,  373,  678,  677,  675,  499,  373,  375,  494,  375,
   375,  674,  673,  672,  375,  671,  375,  375,  375,  481,
   670,  475,  668,  375,  384,  384,  384,  384,  475,  666,
   384,  461,  665,  662,  444,  657,  439,  656,  384,  434,
   655,  384,  417,  647,  647,  384,  647,  384,  384,  384,
   396,  388,  642,  384,  384,  387,  387,  387,  387,  381,
   639,  374,  638,  372,  364,  617,  611,  610,  609,  387,
   607,  387,  387,  387,  604,  603,  387,  602,  387,  387,

   387,  590,  305,  305,  579,  387,  394,  394,  394,  394,
   301,  577,  394,  574,  572,  571,  568,  566,  565,  563,
   561,  560,  558,  553,  524,  510,  509,  394,  508,  394,
   394,  394,  506,  505,  501,  494,  394,  395,  395,  490,
   395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
   395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
   395,  395,  395,  395,  395,  395,  395,  395,  395,  397,
   481,  475,  461,  444,  439,  397,  434,  397,  397,  397,
   397,  397,  417,  396,  397,  397,  397,  397,  397,  397,
   396,  381,  372,  364,  397,  405,  405,  305,  405,  405,

   405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
   405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
   405,  405,  405,  405,  405,  405,  405,  409,  409,  302,
   301, 1178,  113,  113,  409, 1178,  409,  409,  409,  409,
   409, 1178,  409,  409,  409,  409,  409,  409,  409, 1178,
   1178, 1178, 1178,  409,  420,  420,  420,  420, 1178, 1178,
   420, 1178, 1178, 1178, 1178, 1178, 1178, 1178,  420, 1178,
   1178,  420, 1178, 1178, 1178,  420, 1178,  420,  420,  420,
   1178, 1178, 1178,  420,  420,  425,  425,  425,  425, 1178,
   1178, 1178, 1178,  425, 1178, 1178, 1178, 1178, 1178,  425,

   1178,  425,  425, 1178, 1178, 1178,  425, 1178,  425,  425,
   425, 1178, 1178, 1178, 1178,  425,  428,  428,  428,  428,
   1178, 1178,  428, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178,  428, 1178,  428,
   428,  428, 1178, 1178, 1178, 1178,  428,  429, 1178, 1178,
   429, 1178, 1178, 1178, 1178,  429, 1178,  429,  429,  429,
   1178, 1178, 1178, 1178,  429,  433,  433, 1178,  433,  433,
   433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
   433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
   433,  433,  433,  433,  433,  433,  433,  438,  438, 1178,

   438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
   438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
   438,  438,  438,  438,  438,  438,  438,  438,  438,  443,
   443, 1178,  443,  443,  443,  443,  443,  443,  443,  443,
   443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
   443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
   443,  445, 1178, 1178, 1178, 1178, 1178,  445, 1178,  445,
   445,  445,  445,  445, 1178, 1178,  445,  445,  445,  445,
   445,  445, 1178, 1178, 1178, 1178,  445,  451, 1178,  451,
   451,  451, 1178, 1178, 1178, 1178,  451,  456,  456,  456,

   456, 1178, 1178,  456, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178,  456,  456, 1178, 1178, 1178,  456, 1178,
   456,  456,  456, 1178, 1178, 1178, 1178,  456,  464,  464,
   464,  464, 1178, 1178,  464, 1178, 1178, 1178, 1178, 1178,
   1178, 1178,  464, 1178, 1178,  464, 1178, 1178, 1178,  464,
   1178,  464,  464,  464, 1178, 1178, 1178,  464,  464,  467,
   467,  467,  467, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178,  467, 1178,  467,  467, 1178, 1178, 1178,
   467, 1178,  467,  467,  467, 1178, 1178, 1178, 1178,  467,
   473,  473,  473,  473, 1178, 1178,  473, 1178, 1178, 1178,

   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178,  473, 1178,  473,  473,  473, 1178, 1178, 1178, 1178,
   473,  474, 1178,  474,  474,  474, 1178, 1178, 1178, 1178,
   474,  476, 1178,  476, 1178, 1178, 1178, 1178,  476, 1178,
   476,  476,  476, 1178, 1178, 1178, 1178,  476,  480,  480,
   1178,  480, 1178, 1178, 1178, 1178,  480, 1178,  480,  480,
   480, 1178, 1178, 1178, 1178,  480,  485,  485, 1178,  485,
   485,  485,  485,  485,  485,  485,  485, 1178,  485,  485,
   485,  485,  485,  485,  485,  485,  485,  485,  485, 1178,
   485,  485,  485,  485,  485,  485,  485,  485,  489, 1178,

   1178,  489, 1178, 1178, 1178, 1178,  489, 1178,  489,  489,
   489, 1178, 1178, 1178, 1178,  489,  491,  491,  491,  491,
   491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
   491,  491,  491,  491,  491,  491,  491, 1178,  491,  491,
   491,  491,  491,  491,  491,  491,  491,  491,  493,  493,
   1178,  493,  493,  493,  493,  493,  493,  493,  493,  493,
   493,  493,  493,  493,  493,  493,  493,  493,  493, 1178,
   493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
   495,  495, 1178,  495, 1178,  495,  495,  495, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,  495,  495,

   495, 1178,  495,  495, 1178, 1178, 1178, 1178, 1178,  495,
   500, 1178, 1178,  500, 1178, 1178, 1178, 1178,  500, 1178,
   500,  500,  500, 1178, 1178, 1178, 1178,  500,  504,  504,
   1178,  504,  504,  504,  504,  504,  504,  504,  504,  504,
   504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
   504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
   507,  507, 1178,  507, 1178,  507,  507,  507,  507,  507,
   507, 1178,  507,  507,  507,  507, 1178,  507,  507,  507,
   507, 1178,  507, 1178,  507,  507,  507,  507,  507,  507,
   507,  507,  517, 1178, 1178,  517, 1178, 1178, 1178, 1178,

   517, 1178, 1178, 1178, 1178,  517,  517, 1178,  517, 1178,
   1178, 1178, 1178,  517, 1178,  517,  517,  517,  525,  525,
   1178,  525, 1178,  525,  525,  525,  525,  525,  525,  525,
   525,  525,  525,  525,  525,  525,  525,  525,  525, 1178,
   525, 1178,  525,  525,  525,  525,  525,  525,  525,  525,
   529,  529, 1178,  529, 1178,  529,  529,  529,  529,  529,
   529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
   529, 1178,  529, 1178,  529,  529,  529,  529,  529,  529,
   529,  529,  538, 1178, 1178,  538, 1178, 1178, 1178, 1178,
   538, 1178,  538,  538,  538, 1178, 1178, 1178, 1178,  538,

   542,  542, 1178,  542,  542,  542,  542,  542,  542, 1178,
   1178,  542,  542,  542,  542,  542,  542,  542,  542,  542,
   542, 1178,  542, 1178,  542,  542,  542,  542,  542,  542,
   542,  542,  549, 1178,  549,  549,  549, 1178, 1178, 1178,
   1178,  549,  551, 1178,  551,  551, 1178, 1178, 1178,  551,
   1178,  551,  551,  551, 1178, 1178, 1178, 1178,  551,  554,
   1178,  554,  554,  554, 1178, 1178, 1178, 1178,  554,  556,
   1178,  556,  556, 1178, 1178, 1178,  556, 1178,  556,  556,
   556, 1178, 1178, 1178, 1178,  556,  559,  559, 1178,  559,
   559,  559,  559,  559,  559,  559,  559,  559,  559,  559,

   559,  559,  559,  559,  559,  559,  559, 1178,  559, 1178,
   559,  559,  559,  559,  559,  559,  559,  559,  562, 1178,
   1178,  562, 1178, 1178, 1178, 1178,  562, 1178,  562,  562,
   562, 1178, 1178, 1178, 1178,  562,  564,  564, 1178,  564,
   564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
   1178,  564,  564,  564,  564,  564,  564,  564,  564, 1178,
   564,  564,  564,  564,  564,  564,  564,  564,  567,  567,
   1178,  567,  567,  567,  567,  567,  567,  567,  567, 1178,
   567,  567,  567,  567,  567,  567,  567,  567,  567, 1178,
   567, 1178,  567,  567,  567,  567,  567,  567,  567,  567,

   570, 1178,  570,  570,  570,  570,  570, 1178, 1178, 1178,
   570, 1178,  570,  570,  570, 1178, 1178, 1178, 1178,  570,
   573,  573, 1178,  573,  573,  573,  573,  573,  573,  573,
   573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
   573,  573,  573, 1178,  573,  573,  573,  573,  573,  573,
   573,  573,  575,  575,  575,  575,  575,  575,  575,  575,
   575, 1178, 1178,  575,  575,  575,  575,  575,  575,  575,
   575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
   575,  575,  575,  575,  328,  328,  328, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178,  328,  328,  328,

   328,  328,  328,  328,  328,  328, 1178,  328,  328,  300,
   300, 1178,  300,  300,  300,  300,  300,  300,  300,  300,
   300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
   300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
   300,  303, 1178,  303,  303,  303, 1178, 1178, 1178, 1178,
   303,  578,  578, 1178, 1178, 1178,  578, 1178,  578,  578,
   578, 1178, 1178, 1178, 1178,  578,  304, 1178,  304,  304,
   1178,  304, 1178, 1178, 1178,  304,  304, 1178,  304,  304,
   304,  580, 1178, 1178,  580, 1178, 1178, 1178, 1178,  580,
   1178,  580,  580,  580,  587, 1178, 1178,  587, 1178,  587,

   587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
   587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
   587,  587,  587,  587,  587,  587,  605, 1178,  605,  605,
   605, 1178, 1178, 1178,  605,  339, 1178,  339,  339, 1178,
   339, 1178, 1178, 1178,  339,  339, 1178,  339,  339,  339,
   340, 1178, 1178,  340, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178,  340,  340,  340,  340,  340,  363,  363, 1178,  363,
   363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
   363,  363,  363,  363,  363,  363,  363,  363,  363,  363,

   363,  363,  363,  363,  363,  363,  363,  363,  365, 1178,
   1178, 1178, 1178, 1178,  365, 1178,  365,  365,  365,  365,
   365, 1178, 1178,  365,  365,  365,  365,  365,  365, 1178,
   1178, 1178, 1178,  365,  635, 1178, 1178, 1178, 1178, 1178,
   635, 1178,  635, 1178,  635,  635,  635, 1178, 1178,  635,
   635,  635,  635,  635,  635, 1178, 1178, 1178, 1178,  635,
   371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
   371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
   371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
   371,  371,  375, 1178,  375,  375, 1178, 1178, 1178,  375,

   1178,  375,  375,  375, 1178, 1178, 1178, 1178,  375,  373,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178,  373, 1178,  373,  373,  373, 1178,
   1178, 1178, 1178,  373,  384,  384,  384,  384, 1178, 1178,
   384, 1178, 1178, 1178, 1178, 1178, 1178, 1178,  384, 1178,
   1178,  384, 1178, 1178, 1178,  384, 1178,  384,  384,  384,
   1178, 1178, 1178,  384,  384,  387,  387,  387,  387, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,  387,
   1178,  387,  387,  387, 1178, 1178,  387, 1178,  387,  387,
   387, 1178, 1178, 1178, 1178,  387,  394,  394,  394,  394,

   1178, 1178,  394, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178,  394, 1178,  394,
   394,  394, 1178, 1178, 1178, 1178,  394,  640,  640,  640,
   640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
   640,  640,  640,  640,  640,  640,  640, 1178,  640,  640,
   640,  640,  640,  640,  640,  640,  640,  640,  640,  643,
   1178,  643, 1178, 1178,  643, 1178,  643,  643,  643, 1178,
   1178, 1178, 1178,  643,  395,  395, 1178,  395,  395,  395,
   395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
   395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

   395,  395,  395,  395,  395,  395,  397, 1178, 1178, 1178,
   1178, 1178,  397, 1178,  397,  397,  397,  397,  397, 1178,
   1178,  397,  397,  397,  397,  397,  397, 1178, 1178, 1178,
   1178,  397,  644, 1178, 1178, 1178, 1178, 1178,  644, 1178,
   644, 1178,  644,  644,  644, 1178, 1178,  644,  644,  644,
   644,  644,  644, 1178, 1178, 1178, 1178,  644,  403,  403,
   1178,  403,  403,  403,  403,  403,  403,  403,  403,  403,
   403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
   403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
   405,  405, 1178,  405,  405,  405,  405,  405,  405,  405,

   405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
   405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
   405,  405,  409,  409, 1178, 1178, 1178, 1178, 1178,  409,
   1178,  409,  409,  409,  409,  409, 1178,  409,  409,  409,
   409,  409,  409,  409, 1178, 1178, 1178, 1178,  409,  649,
   1178, 1178, 1178, 1178, 1178,  649, 1178,  649, 1178,  649,
   649,  649, 1178, 1178,  649,  649,  649,  649,  649,  649,
   1178, 1178, 1178, 1178,  649,  420,  420,  420,  420, 1178,
   1178,  420, 1178, 1178, 1178, 1178, 1178, 1178, 1178,  420,
   1178, 1178,  420, 1178, 1178, 1178,  420, 1178,  420,  420,

   420, 1178, 1178, 1178,  420,  420,  425,  425,  425,  425,
   1178, 1178, 1178, 1178,  425, 1178, 1178, 1178, 1178, 1178,
   425, 1178,  425,  425, 1178, 1178, 1178,  425, 1178,  425,
   425,  425, 1178, 1178, 1178, 1178,  425,  428,  428,  428,
   428, 1178, 1178,  428, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,  428, 1178,
   428,  428,  428, 1178, 1178, 1178, 1178,  428,  652,  652,
   652,  652,  652,  652,  652,  652,  652,  652, 1178,  652,
   652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
   652,  652,  652,  652,  652,  652,  652,  652,  652,  652,

   654, 1178, 1178,  654, 1178, 1178, 1178, 1178,  654, 1178,
   1178, 1178, 1178, 1178, 1178, 1178,  654, 1178, 1178, 1178,
   1178,  654, 1178,  654,  654,  654, 1178, 1178, 1178, 1178,
   654,  429, 1178, 1178,  429, 1178, 1178, 1178, 1178,  429,
   1178,  429,  429,  429, 1178, 1178, 1178, 1178,  429,  433,
   433, 1178,  433,  433,  433,  433,  433,  433,  433,  433,
   433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
   433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
   433,  438,  438, 1178,  438,  438,  438,  438,  438,  438,
   438,  438,  438,  438,  438,  438,  438,  438,  438,  438,

   438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
   438,  438,  438,  443,  443, 1178,  443,  443,  443,  443,
   443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
   443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
   443,  443,  443,  443,  443,  445, 1178, 1178, 1178, 1178,
   1178,  445, 1178,  445,  445,  445,  445,  445, 1178, 1178,
   445,  445,  445,  445,  445,  445, 1178, 1178, 1178, 1178,
   445,  658, 1178, 1178, 1178, 1178, 1178,  658, 1178,  658,
   1178,  658,  658,  658, 1178, 1178,  658,  658,  658,  658,
   658,  658, 1178, 1178, 1178, 1178,  658,  456,  456,  456,

   456, 1178, 1178,  456, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178,  456,  456, 1178, 1178, 1178,  456, 1178,
   456,  456,  456, 1178, 1178, 1178, 1178,  456,  661, 1178,
   661,  661,  661, 1178, 1178, 1178, 1178,  661,  664,  664,
   664,  664, 1178, 1178,  664, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178,  664,  664, 1178, 1178, 1178,  664,
   1178,  664,  664,  664, 1178, 1178, 1178, 1178,  664,  464,
   464,  464,  464, 1178, 1178,  464, 1178, 1178, 1178, 1178,
   1178, 1178, 1178,  464, 1178, 1178,  464, 1178, 1178, 1178,
   464, 1178,  464,  464,  464, 1178, 1178, 1178,  464,  464,

   467,  467,  467,  467, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178,  467, 1178,  467,  467, 1178, 1178,
   1178,  467, 1178,  467,  467,  467, 1178, 1178, 1178, 1178,
   467,  473,  473,  473,  473, 1178, 1178,  473, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178,  473, 1178,  473,  473,  473, 1178, 1178, 1178,
   1178,  473,  667, 1178, 1178, 1178, 1178,  667, 1178,  667,
   667,  667, 1178, 1178, 1178, 1178,  667,  476, 1178,  476,
   1178, 1178, 1178, 1178,  476, 1178,  476,  476,  476, 1178,
   1178, 1178, 1178,  476,  669, 1178, 1178, 1178, 1178, 1178,

   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,  669,
   1178,  669,  669,  669, 1178, 1178, 1178, 1178,  669,  480,
   480, 1178,  480, 1178, 1178, 1178, 1178,  480, 1178,  480,
   480,  480, 1178, 1178, 1178, 1178,  480,  485,  485, 1178,
   485,  485,  485,  485,  485,  485,  485,  485, 1178,  485,
   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
   1178,  485,  485,  485,  485,  485,  485,  485,  485,  489,
   1178, 1178,  489, 1178, 1178, 1178, 1178,  489, 1178,  489,
   489,  489, 1178, 1178, 1178, 1178,  489,  491,  491,  491,
   491,  491,  491,  491,  491,  491,  491,  491,  491,  491,

   491,  491,  491,  491,  491,  491,  491,  491, 1178,  491,
   491,  491,  491,  491,  491,  491,  491,  491,  491,  493,
   493, 1178,  493,  493,  493,  493,  493,  493,  493,  493,
   493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
   1178,  493,  493,  493,  493,  493,  493,  493,  493,  493,
   493,  676, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178,  676, 1178,  676,  676,
   676, 1178, 1178, 1178, 1178,  676,  500, 1178, 1178,  500,
   1178, 1178, 1178, 1178,  500, 1178,  500,  500,  500, 1178,
   1178, 1178, 1178,  500,  504,  504, 1178,  504,  504,  504,

   504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
   504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
   504,  504,  504,  504,  504,  504,  507,  507, 1178,  507,
   1178,  507,  507,  507,  507,  507,  507, 1178,  507,  507,
   507,  507, 1178,  507,  507,  507,  507, 1178,  507, 1178,
   507,  507,  507,  507,  507,  507,  507,  507,  517, 1178,
   1178,  517, 1178, 1178, 1178, 1178,  517, 1178, 1178, 1178,
   1178,  517,  517, 1178,  517, 1178, 1178, 1178, 1178,  517,
   1178,  517,  517,  517,  525,  525, 1178,  525, 1178,  525,
   525,  525,  525,  525,  525,  525,  525,  525,  525,  525,

   525,  525,  525,  525,  525, 1178,  525, 1178,  525,  525,
   525,  525,  525,  525,  525,  525,  529,  529, 1178,  529,
   1178,  529,  529,  529,  529,  529,  529,  529,  529,  529,
   529,  529,  529,  529,  529,  529,  529, 1178,  529, 1178,
   529,  529,  529,  529,  529,  529,  529,  529,  538, 1178,
   1178,  538, 1178, 1178, 1178, 1178,  538, 1178,  538,  538,
   538, 1178, 1178, 1178, 1178,  538,  542,  542, 1178,  542,
   542,  542,  542,  542,  542, 1178, 1178,  542,  542,  542,
   542,  542,  542,  542,  542,  542,  542, 1178,  542, 1178,
   542,  542,  542,  542,  542,  542,  542,  542,  551, 1178,

   551,  551, 1178, 1178, 1178,  551, 1178,  551,  551,  551,
   1178, 1178, 1178, 1178,  551,  549, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   549, 1178,  549,  549,  549, 1178, 1178, 1178, 1178,  549,
   556, 1178,  556,  556, 1178, 1178, 1178,  556, 1178,  556,
   556,  556, 1178, 1178, 1178, 1178,  556,  554, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178,  554, 1178,  554,  554,  554, 1178, 1178, 1178,
   1178,  554,  559,  559, 1178,  559,  559,  559,  559,  559,
   559,  559,  559,  559,  559,  559,  559,  559,  559,  559,

   559,  559,  559, 1178,  559, 1178,  559,  559,  559,  559,
   559,  559,  559,  559,  562, 1178, 1178,  562, 1178, 1178,
   1178, 1178,  562, 1178,  562,  562,  562, 1178, 1178, 1178,
   1178,  562,  564,  564, 1178,  564,  564,  564,  564,  564,
   564,  564,  564,  564,  564,  564, 1178,  564,  564,  564,
   564,  564,  564,  564,  564, 1178,  564,  564,  564,  564,
   564,  564,  564,  564,  567,  567, 1178,  567,  567,  567,
   567,  567,  567,  567,  567, 1178,  567,  567,  567,  567,
   567,  567,  567,  567,  567, 1178,  567, 1178,  567,  567,
   567,  567,  567,  567,  567,  567,  570, 1178,  570,  570,

   570,  570,  570, 1178, 1178, 1178,  570, 1178,  570,  570,
   570, 1178, 1178, 1178, 1178,  570,  712, 1178,  712,  712,
   712, 1178, 1178, 1178, 1178,  712,  573,  573, 1178,  573,
   573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
   573,  573,  573,  573,  573,  573,  573,  573,  573, 1178,
   573,  573,  573,  573,  573,  573,  573,  573,  575,  575,
   575,  575,  575,  575,  575,  575,  575, 1178, 1178,  575,
   575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
   575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
   578,  578, 1178, 1178, 1178,  578, 1178,  578,  578,  578,

   1178, 1178, 1178, 1178,  578,  717,  717, 1178,  717,  717,
   717,  717, 1178,  717,  717,  717,  717,  717,  717,  717,
   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
   717,  717,  717,  717,  717,  717,  717,  580,  580, 1178,
   580, 1178, 1178, 1178, 1178,  580, 1178,  580,  580,  580,
   304, 1178,  304,  304, 1178,  304, 1178, 1178, 1178,  304,
   304, 1178,  304,  304,  304,  587, 1178, 1178,  587, 1178,
   587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
   587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
   587,  587,  587,  587,  587,  587,  587,  726,  726, 1178,

   726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
   726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
   726,  726,  726,  726,  726,  726,  726,  726,  726,  605,
   1178, 1178,  605, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   605, 1178,  605,  605,  605,  328, 1178, 1178,  328, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178,  328, 1178,  328,  328,
   328,  740,  740, 1178,  740,  740,  740,  740,  740,  740,
   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
   1178,  740,  740,  340, 1178, 1178,  340, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178,  340,  340,  340,  340,  340,  635,
   1178, 1178, 1178, 1178, 1178,  635, 1178,  635,  635,  635,
   635,  635, 1178, 1178,  635,  635,  635,  635,  635,  635,
   1178, 1178, 1178, 1178,  635,  365, 1178, 1178, 1178, 1178,
   1178,  365, 1178,  365,  365,  365,  365,  365, 1178, 1178,
   365,  365,  365,  365,  365,  365, 1178, 1178, 1178, 1178,
   365,  373, 1178,  373,  373,  373, 1178, 1178, 1178, 1178,

   373,  640,  640,  640,  640,  640,  640,  640,  640,  640,
   640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
   640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
   640,  640,  640,  643, 1178,  643, 1178, 1178,  643, 1178,
   643,  643,  643, 1178, 1178, 1178, 1178,  643,  644, 1178,
   1178, 1178, 1178, 1178,  644, 1178,  644,  644,  644,  644,
   644, 1178, 1178,  644,  644,  644,  644,  644,  644, 1178,
   1178, 1178, 1178,  644,  397, 1178, 1178, 1178, 1178, 1178,
   397, 1178,  397,  397,  397,  397,  397, 1178, 1178,  397,
   397,  397,  397,  397,  397, 1178, 1178, 1178, 1178,  397,

   762,  762, 1178,  762,  762,  762,  762,  762,  762,  762,
   762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
   762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
   762,  762,  649,  649, 1178, 1178, 1178, 1178, 1178,  649,
   1178,  649,  649,  649,  649,  649, 1178,  649,  649,  649,
   649,  649,  649,  649, 1178, 1178, 1178, 1178,  649,  409,
   409, 1178, 1178, 1178, 1178, 1178,  409, 1178,  409,  409,
   409,  409,  409, 1178,  409,  409,  409,  409,  409,  409,
   409, 1178, 1178, 1178, 1178,  409,  652,  652,  652,  652,
   652,  652,  652,  652,  652,  652,  652,  652,  652,  652,

   652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
   652,  652,  652,  652,  652,  652,  652,  652,  654, 1178,
   1178,  654, 1178, 1178, 1178, 1178,  654, 1178, 1178, 1178,
   1178, 1178, 1178, 1178,  654, 1178, 1178, 1178, 1178,  654,
   1178,  654,  654,  654, 1178, 1178, 1178, 1178,  654,  658,
   1178, 1178, 1178, 1178, 1178,  658, 1178,  658,  658,  658,
   658,  658, 1178, 1178,  658,  658,  658,  658,  658,  658,
   1178, 1178, 1178, 1178,  658,  445, 1178, 1178, 1178, 1178,
   1178,  445, 1178,  445,  445,  445,  445,  445, 1178, 1178,
   445,  445,  445,  445,  445,  445, 1178, 1178, 1178, 1178,

   445,  772,  772,  772,  772, 1178, 1178,  772, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178,  772,  772, 1178,
   1178, 1178,  772, 1178,  772,  772,  772, 1178, 1178, 1178,
   1178,  772,  661,  661,  661,  661, 1178, 1178,  661, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,  661,
   1178, 1178, 1178,  661, 1178,  661,  661,  661, 1178, 1178,
   1178, 1178,  661,  664,  664,  664,  664, 1178, 1178,  664,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,  664,
   664, 1178, 1178, 1178,  664, 1178,  664,  664,  664, 1178,
   1178, 1178, 1178,  664,  667, 1178, 1178, 1178, 1178,  667,

   1178,  667,  667,  667, 1178, 1178, 1178, 1178,  667,  669,
   1178,  669,  669,  669, 1178, 1178, 1178, 1178,  669,  776,
   1178,  776, 1178, 1178, 1178, 1178,  776, 1178,  776,  776,
   776, 1178, 1178, 1178, 1178,  776,  676, 1178,  676,  676,
   676, 1178, 1178, 1178, 1178,  676,  782, 1178, 1178, 1178,
   1178,  782, 1178,  782,  782,  782, 1178, 1178, 1178, 1178,
   782,  793,  793,  793,  793,  793,  793,  793,  793,  793,
   793,  793,  793,  793,  793,  793,  793,  793, 1178,  793,
   793,  793,  793, 1178,  793, 1178, 1178,  793,  793,  793,
   793,  793,  793,  549, 1178,  549,  549,  549, 1178, 1178,

   1178, 1178,  549,  554, 1178,  554,  554,  554, 1178, 1178,
   1178, 1178,  554,  813, 1178,  813,  813,  813,  813,  813,
   1178, 1178, 1178,  813, 1178,  813,  813,  813, 1178, 1178,
   1178, 1178,  813,  717,  717, 1178,  717,  717,  717,  717,
   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
   717,  717,  717,  717,  717,  818, 1178, 1178,  818, 1178,
   1178, 1178, 1178,  818, 1178,  818,  818,  818,  311, 1178,
   311, 1178,  311,  311, 1178,  311, 1178, 1178, 1178,  311,
   311, 1178,  311,  311,  311,  726,  726, 1178,  726,  726,

   726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
   726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
   726,  726,  726,  726,  726,  726,  726,  328, 1178, 1178,
   328, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,  328, 1178,
   328,  328,  328,  740,  740, 1178,  740,  740,  740,  740,
   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
   740,  740,  740,  740,  740,  744,  744,  744,  744,  744,
   340, 1178, 1178,  340, 1178, 1178, 1178, 1178, 1178, 1178,

   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178,  340,  340,  340,  340,  340,  304,  304, 1178,  304,
   1178, 1178, 1178, 1178, 1178, 1178, 1178,  304, 1178,  304,
   304, 1178,  304,  304, 1178, 1178,  304,  304, 1178,  304,
   304,  304, 1178,  304,  365, 1178, 1178, 1178, 1178, 1178,
   365, 1178,  365,  365,  365,  365,  365, 1178, 1178,  365,
   365,  365,  365,  365,  365, 1178, 1178, 1178, 1178,  365,
   640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
   640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
   640,  640,  640,  640,  640,  640,  640,  640,  640,  640,

   640,  640,  397, 1178, 1178, 1178, 1178, 1178,  397, 1178,
   397,  397,  397,  397,  397, 1178, 1178,  397,  397,  397,
   397,  397,  397, 1178, 1178, 1178, 1178,  397,  762,  762,
   1178,  762,  762,  762,  762,  762,  762,  762,  762,  762,
   762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
   762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
   409,  409, 1178, 1178, 1178, 1178, 1178,  409, 1178,  409,
   409,  409,  409,  409, 1178,  409,  409,  409,  409,  409,
   409,  409, 1178, 1178, 1178, 1178,  409,  445, 1178, 1178,
   1178, 1178, 1178,  445, 1178,  445,  445,  445,  445,  445,

   1178, 1178,  445,  445,  445,  445,  445,  445, 1178, 1178,
   1178, 1178,  445,  851, 1178,  851,  851,  851, 1178, 1178,
   1178, 1178,  851,  772,  772,  772,  772, 1178, 1178,  772,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,  772,
   772, 1178, 1178, 1178,  772, 1178,  772,  772,  772, 1178,
   1178, 1178, 1178,  772,  661,  661,  661,  661, 1178, 1178,
   661, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178,  661, 1178, 1178, 1178,  661, 1178,  661,  661,  661,
   1178, 1178, 1178, 1178,  661,  776, 1178,  776, 1178, 1178,
   1178, 1178,  776, 1178,  776,  776,  776, 1178, 1178, 1178,

   1178,  776,  782, 1178, 1178, 1178, 1178,  782, 1178,  782,
   782,  782, 1178, 1178, 1178, 1178,  782,  897,  897, 1178,
   897, 1178, 1178, 1178, 1178,  897, 1178,  897,  897,  897,
   903,  903, 1178,  903,  903,  903,  903,  903,  903,  903,
   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
   903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
   903,  903,  830,  830,  830,  830,  830,  830,  830,  830,
   830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
   830,  830,  830,  830, 1178,  830, 1178, 1178, 1178,  830,
   830,  830,  830,  830,  925,  925,  925,  925, 1178, 1178,

   925, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   925,  925, 1178, 1178, 1178,  925, 1178,  925,  925,  925,
   1178, 1178, 1178, 1178,  925,  951,  951,  951,  951,  951,
   951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
   951,  951, 1178,  951,  951,  951,  951, 1178,  951, 1178,
   951, 1178,  951,  951,  951,  951,  951,  978,  978, 1178,
   978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
   978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
   978,  978,  978,  978,  978,  978,  978,  978,  978, 1023,
   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

   1023, 1023, 1023, 1023, 1023, 1023, 1178, 1023, 1023, 1023,
   1023, 1178, 1023, 1178, 1178, 1178, 1023, 1023, 1023, 1023,
   1023, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
   1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1178, 1024,
   1024, 1024, 1024, 1178, 1024, 1178, 1178, 1178, 1024, 1024,
   1024, 1024, 1024, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
   1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
   1178, 1075, 1075, 1075, 1075, 1178, 1075, 1178, 1178, 1178,
   1075, 1075, 1075, 1075, 1075, 1086, 1086, 1086, 1086, 1086,
   1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,

   1086, 1086, 1178, 1086, 1086, 1086, 1086, 1178, 1086, 1178,
   1178, 1178, 1086, 1086, 1086, 1086, 1086,   85, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178

} ;

static yyconst flex_int16_t yy_chk[9893] = {
   0,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    4,   21,   22,    4,   23,   21,
   22,   24,   23,  315,   47,   24,    4,    4,   35,    4,
   4,   36,   39,    4,    4,    4,   48,   40,   53,   35,

   53,   57,   36,   39,  100,  315,  117,  100,   40,   43,
   43,  117,   43,   58,   43,   39,   21,   22,  591,   23,
   40,   53,   24,   44,   44,   47,   44,  306,   44,   35,
   306,   63,   36,   39,   64,   81,   82,   48,   40,   53,
   591,  599,   57,    4,    5,    5,    5,    5,    5,    5,
   5,   43,    5,    5,   58,    5,    5,    5,   45,    5,
   45,    5,    5,  599,   75,   44,    5,    5,    5,   45,
   51,   51,   63,   51,   45,   64,   81,   82,   75, 1173,
   83,   45,   52,   52,   84,   52,    5,    5,    5,   83,
   83,  216,  307,   84,   84,   76,  216,  206,  259,   45,

   206,  307,  206,  259,   54,   75,   54,   89,   89,   76,
   89,  282,   51,    5,    5,    5,    5,    6,    6,    6,
   6,    6,    6,    6,   52,    6,    6,   54,    6,    6,
   6,   46,    6,   46,    6,    6,   76, 1171,  282,    6,
   6,    6,   46,   61,   55,   54,   55,   46,  526,   89,
   526,  264,   61,   61,   46,   93,  264,  109,  109,    6,
   6,    6,  109,  404,   93,  533,   61,   55,  127,  127,
   127,  127,   46,   93,  104,  127,  104,  104,  104,  533,
   1169,  404,  104,  109,   61,   55,    6,    6,    6,    6,
   9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

   9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
   9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
   9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
   9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
   9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
   9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
   9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
   13,   13,   13,   13,   13,   69,   13,   13,   62,   13,
   13,   13,   56,   13,   56,   13,   13,   62,   62,  233,
   13,   13,   13,  233,   70,   71,  565,   97,   69,   97,
   97,   62,   97,   97,   97,   56,  105,   72,   97,  105,
   13,   13,   13,  316,  883,  565,   69,   70,   71,   62,
   197,  105,  221,   56,  234,  221, 1166,  105,  883,  234,

   72,  197,  221,  234,  316,   70,   71,   13,   13,   13,
   13,   14,   14,   14,   14,   14,   14,   14,   72,   14,
   14,   77,   14,   14,   14,   78,   14,   88,   14,   14,
   88,  197,   77,   14,   14,   14,   78,   94,  334,   94,
   94,   94,   94,  101,   77,  105,  101,  334,   78,  312,
   94,   88,  312,   14,   14,   14,  118,  118,  318,  118,
   126,  126,   77,  126, 1163, 1162,   78,  101,   94,   88,
   319,  373,  110,  110,  321,  349,  373,  110,  349,  318,
   14,   14,   14,   14,   15,   15,   15,   15,   15,   15,
   15,  319,   15,   15,  321,   15,   15,   15,  110,   15,

   118,   15,   15, 1158,  126,  594,   15,   15,   15,  102,
   227,  227,  102,  227,  322,  102,  120,  120,  120,  120,
   121,  121,  121,  121,  102,  594,   15,   15,   15, 1155,
   102,  354,  120,  102,  354,  322,  121,  120,  131,  131,
   561,  121,  333,  131,  581,  132,  132,  581,  153,  153,
   132,  153,  227,   15,   15,   15,   15,   16,   16,   16,
   16,   16,   16,   16,  131,   16,   16,  561,   16,   16,
   16,  132,   16,  327,   16,   16,  333, 1132,  102,   16,
   16,   16,  103,  103,  596,  103,  125,  125,  125,  125,
   1132,  314,  153,  103,  327,  103,  103,  103,  103,   16,

   16,   16,  125,  333,  596,  647,  103,  125,  125,  149,
   149,  149,  149,  314,  314,  314,  149,  375,  181,  181,
   181,  181,  375,  647,  103,  181,   16,   16,   16,   16,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

   17,   17,   17,   17,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   25,   25,
   25,   25,   25,   25,   25,  340,   25,   25,  340,   25,
   25,   25,  937,   25,  224,   25,   25,  224,  549,  600,

   25,   25,   25,  549,  224,  351,  351,  937,  351,  122,
   122,  122,  122,  551,  157,  157,  122,  157,  551,  600,
   25,   25,   25,  111,  111,  122,  111,  340,  161,  161,
   122,  161,  352,  238,  352,  352,  352,  238, 1154,  111,
   111,  554,  317,  238,  111,  238,  554,   25,   25,   25,
   25,   26,   26,   26,   26,   26,   26,   26,  157,   26,
   26,  317,   26,   26,   26,  111,   26,  111,   26,   26,
   138, 1153,  161,   26,   26,   26,  143,  143,  143,  143,
   122,  138,  138,  317,  165,  165,  138,  605,  138,  165,
   605,  556,  143,   26,   26,   26,  556,  143,  144,  144,

   144,  144,  357,  357, 1152,  357,  339,  138,  339,  339,
   165,  339,  339,  339,  144,  368,  368,  339,  368,  144,
   26,   26,   26,   26,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   29,   29,

   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   31,   31,   31,   31,   31,   31,   31,   31,
   31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
   31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

   31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
   31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
   31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
   31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
   31,   31,   31,   31,   31,   31,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   41,   41,   41,   41,   41,   41,

   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   49,   49,
   49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
   49,   49,   49,   49,  172,  172,   49,  172,  879,  601,
   49,   49,   49,   49, 1168,  879,  722,  123,  123,  123,

   123, 1168, 1151,  725,  123,  148,  148,  148,  148,  601,
   49,   49,   49,  123,  428,  148,  722,  428,  123,  180,
   180,  148,  180,  725,  428, 1172,  148,  342,  172, 1172,
   342,  502,  186,  186,  502,  186,  502,   49,   49,   49,
   49,   49,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,  134,  134,
   50,  134, 1150,  180,   50,   50,   50,   50,  123,  342,
   1146,  139,  166,  166,  134,  134,  186,  166,  595,  134,
   1160,  595,  139,  139,   50,   50,   50,  139,  239,  139,
   342,  377,  377,  239,  377, 1160,  608,  239,  166,  608,

   134,  595,  134,  239, 1145,  239,  389,  389,  139,  389,
   1143,   50,   50,   50,   50,   50,   59,   59,   59,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   95, 1142,  866,  140,
   145,  145,  145,  145, 1141,  189,  189,  145,  189,   95,

   140,  140, 1140,  728,  866,  140,  145,  140,  366,   95,
   95,  145,  366,  359,   95,   95,  359,  611,   95,   95,
   611,   95,   95,  728,  297,  297,  140,  297,  344,   95,
   95,  344, 1139,  366,   95,   95, 1138,  359,  730,  189,
   95,   95,   95,   95,   95,   95,   96,   96,   96,   96,
   610,  142,  142,  610,  142,   96,  142,  192,  192,  730,
   192,  145,   96,   96,   96,  611,  297,  142,  142,  398,
   344,  410,  142,  398,  142,  410,  146,  146,  146,  146,
   1148,  294,   96,  146,  294,  344,   96, 1137,   96,   96,
   96, 1148,  146,  142,  398,  142,  410,  146,  827, 1136,

   617,  192,   96,  617,  341,  294,   96,  341,   96,  610,
   96,   96,   98,   98,   98,   98,  167,  167,  827,  167,
   1112,   98, 1112,  294,  171,  171,  171,  171,   98,   98,
   98,  171,  167,  167, 1135,  365,  365,  167,  201,  201,
   365,  201,  171,  171,  171,  171,  341,  146,   98,  617,
   98,  491,   98, 1127,   98,   98,   98, 1175,  167,  341,
   167,  365,  491,  174,  174,  174,  174, 1126,   98, 1124,
   298,  298,   98,  298,   98, 1175,   98,   98,   99,  174,
   201,   99,  201, 1123,  174,  175,  175,  175,  175, 1122,
   99,   99,  491,   99,   99,  367,  367,   99,   99,   99,

   367,  175,   99, 1121, 1120, 1119,  175,  176,  176,  176,
   176, 1118,  298, 1117,  176,  177,  177,  177,  177, 1116,
   99,  367,  177,  176,  179,  179,  179,  179,  176,  219,
   219,  177,  219,  715,  343,  346,  177,  343,  346, 1115,
   179,  225,  225,  350,  225,  179,  350,   99,  137,  137,
   1106,  137,  137,  137,  137, 1105,  137,  137,  350,  137,
   137,  137, 1092,  137,  350,  137,  137,  715, 1091, 1089,
   137,  137,  137,  219, 1088, 1082,  343,  346,  176,  200,
   200,  200,  200,  343,  346,  225,  177, 1081, 1080, 1079,
   137,  137,  137,  346,  715,  200,  200,  200,  242,  242,

   1078,  242,  246,  246, 1077,  246,  252,  252, 1076,  252,
   255,  255,  350,  255, 1074,  200, 1048,  137,  137,  137,
   137,  345,  320,  347,  345,  320,  347,  360,  345,  360,
   360,  360, 1047,  400,  400,  360,  400, 1046,  353, 1045,
   615,  353,  242,  615,  200,  320,  246,  320,  628,  355,
   252,  628,  355,  353,  255,  295,  295,  295,  295,  353,
   320, 1044,  345,  345,  355,  347,  361,  320, 1043,  361,
   355,  295,  295,  295,  597,  362, 1042,  597,  362,  397,
   397,  361,  320,  347,  397,  356,  356,  361,  356,  345,
   362,  295,  388,  388,  388,  388,  362,  597,  295,  295,

   356,  615, 1041,  370,  370,  397,  356,  353,  370,  356,
   380,  380,  380,  380, 1040, 1039, 1038,  295,  355,  295,
   295,  296,  296,  296,  296, 1037,  380,  399,  399,  370,
   1036,  380,  399,  413,  413,  361,  413,  296,  296,  296,
   430,  430,  370,  430,  362,  381,  381,  381,  381, 1035,
   1034, 1033,  381,  399,  356,  435,  435,  296,  435,  440,
   440,  381,  440,  446,  296,  296,  381,  446,  383,  383,
   383,  383, 1032,  448,  448,  383,  448,  457,  457,  634,
   457, 1031,  634,  296,  383,  296,  296,  310,  446,  383,
   310, 1030,  310,  310,  310,  310,  310,  310,  310,  310,

   310,  310,  310,  310,  310,  310, 1029, 1028, 1026,  310,
   310,  310,  310, 1025,  468,  468,  381,  468, 1021,  384,
   384,  384,  384, 1020, 1019,  385,  385,  385,  385,  310,
   310,  310,  385,  477,  477,  384,  477, 1018, 1017,  383,
   384,  384,  392,  392,  392,  392, 1016, 1015, 1013,  392,
   402,  402, 1012, 1011, 1010,  402,  310,  310,  310,  310,
   310,  328,  482,  482,  328,  482, 1008,  328,  328,  328,
   328,  386,  386,  386,  386, 1007,  402, 1006,  386,  387,
   387,  387,  387,  328,  328,  328, 1005,  386, 1004,  402,
   486,  486,  386,  486, 1003,  387, 1002,  409, 1001,  609,

   387,  387,  609,  328,  393,  393,  393,  393,  409,  409,
   411,  393, 1000,  409,  999,  409,  421,  421,  421,  421,
   998,  411,  411,  421,  497,  497,  411,  497,  411,  328,
   996,  328,  328,  348,  409,  995,  348,  452,  452,  452,
   452,  994,  386,  991,  415,  348,  348,  411,  348,  348,
   609,  990,  348,  348,  348,  415,  415,  348,  452,  981,
   415,  980,  415,  416,  416,  416,  416,  417,  417,  417,
   417,  445,  445,  978,  417,  348,  445,  512,  512,  416,
   512,  415,  616,  417,  416,  616,  977,  976,  417,  419,
   419,  419,  419,  975,  415,  974,  419,  445,  518,  518,

   973,  518,  348,  405,  405,  419,  405,  405,  405,  405,
   419,  405,  405,  972,  405,  405,  405,  971,  405,  515,
   405,  405,  515,  970,  969,  405,  405,  405,  708,  515,
   616,  708,  420,  420,  420,  420,  535,  535,  417,  535,
   539,  539,  420,  539,  968,  405,  405,  405,  420,  426,
   426,  426,  426,  420,  521,  521,  426,  521,  517,  967,
   419,  517,  422,  422,  422,  422,  447,  447,  517,  422,
   966,  447,  405,  405,  405,  405,  406,  406,  422,  406,
   406,  406,  406,  422,  406,  406,  965,  406,  406,  406,
   964,  406,  447,  406,  406,  963,  521,  962,  406,  406,

   406,  423,  423,  423,  423,  425,  425,  425,  425,  543,
   543,  423,  543,  546,  546,  425,  546,  423,  406,  406,
   406,  425,  423,  961,  960,  959,  425,  427,  427,  427,
   427,  450,  450,  422,  427,  957,  450,  465,  465,  465,
   465,  955,  952,  950,  465,  406,  406,  406,  406,  653,
   949,  948,  653,  451,  451,  451,  451,  450,  947,  653,
   451,  454,  454,  454,  454,  946,  720,  945,  454,  720,
   450,  451,  451,  451,  451,  460,  460,  460,  460,  454,
   454,  454,  454,  456,  456,  456,  456,  944,  943,  942,
   456,  460,  461,  461,  461,  461,  460,  654,  941,  461,

   654,  456,  456,  456,  456,  940,  939,  654,  461,  463,
   463,  463,  463,  461,  938,  936,  463,  464,  464,  464,
   464,  466,  466,  466,  466,  463,  935,  934,  466,  606,
   463,  620,  606,  464,  620,  933,  606,  466,  464,  932,
   931,  930,  466,  467,  467,  467,  467,  471,  471,  471,
   471,  928,  927,  926,  471,  472,  472,  472,  472,  467,
   922,  921,  472,  461,  467,  629,  920,  629,  629,  629,
   606,  621,  622,  620,  621,  622,  917,  916,  623,  624,
   463,  623,  624,  626,  620,  625,  626,  690,  625,  906,
   690,  734,  466,  586,  734,  905,  586,  606,  586,  586,

   586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
   586,  586,  903,  621,  622,  586,  586,  586,  586,  900,
   623,  624,  621,  899,  897,  626,  623,  625,  896,  895,
   894,  622,  626,  625,  893,  586,  586,  586,  627,  627,
   624,  627,  892,  891,  690,  727,  630,  630,  727,  630,
   890,  635,  635,  627,  632,  632,  635,  632,  889,  627,
   888,  630,  586,  586,  586,  586,  586,  630,  727,  632,
   633,  633,  887,  633,  886,  632,  885,  635,  632,  636,
   636,  884,  637,  637,  636,  633,  738,  637,  882,  738,
   881,  633,  880,  640,  640,  640,  640,  641,  641,  641,

   641,  644,  644,  878,  877,  636,  644,  627,  637,  645,
   645,  876,  646,  646,  645,  630,  640,  646,  739,  637,
   641,  739,  810,  632,  875,  810,  874,  644,  873,  649,
   831,  658,  658,  831,  869,  645,  658,  869,  646,  633,
   649,  649,  872,  659,  659,  649,  738,  649,  659,  646,
   648,  648,  871,  648,  648,  648,  648,  658,  648,  648,
   870,  648,  648,  648,  650,  648,  649,  648,  648,  659,
   868,  739,  648,  648,  648,  650,  650,  867,  865,  651,
   650,  729,  650,  719,  729,  719,  741,  719,  719,  741,
   651,  651,  648,  648,  648,  651,  719,  651,  660,  660,

   864,  650,  742,  660,  729,  742,  743,  863,  862,  743,
   661,  661,  661,  661,  861,  835,  651,  661,  835,  648,
   648,  648,  648,  958,  660,  860,  958,  651,  661,  661,
   661,  661,  859,  858,  857,  660,  662,  662,  662,  662,
   856,  855,  854,  662,  663,  663,  663,  663,  741,  853,
   852,  663,  664,  664,  664,  664,  743,  662, 1090,  664,
   742, 1090,  663,  663,  663,  663, 1144,  849,  835, 1144,
   664,  664,  664,  664,  737,  737,  737,  737,  737,  737,
   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,

   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
   737,  737,  737,  737,  737,  737,  737,  737,  745,  824,
   748,  745,  824,  748,  757,  757,  757,  757,  848,  982,
   755,  755,  982,  752,  752,  755,  752,  753,  753,  847,
   753, 1157,  824,  844, 1157,  843,  825,  757,  752,  825,
   1159,  834,  753, 1159,  752,  829,  755,  828,  753,  823,
   745,  747,  748,  749,  747,  750,  749,  751,  750,  825,

   751,  755,  822,  748,  982,  745,  746,  746,  746,  746,
   746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
   746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
   746,  746,  752,  747,  821,  749,  753,  750,  818,  751,
   833,  754,  754,  833,  754,  816,  815,  751,  746,  746,
   746,  747,  814,  750,  813,  749,  754,  759,  759,  759,
   759,  812,  754,  761,  761,  754,  769,  769,  761,  832,
   1110,  769,  832, 1110,  811,  746,  746,  746,  746,  746,
   759,  819,  809,  819,  764,  819,  819,  808,  836,  761,
   839,  836,  769,  839,  819,  764,  764,  833,  908,  807,

   764,  908,  764,  907,  761, 1164,  907,  769, 1164,  806,
   754,  762,  762,  805,  762,  762,  762,  762,  832,  762,
   762,  764,  762,  762,  762,  804,  762, 1110,  762,  762,
   836,  803,  839,  762,  762,  762,  764,  836,  771,  771,
   771,  771,  802,  842,  842,  771,  801,  839,  842,  838,
   907,  800,  838,  762,  762,  762,  771,  771,  771,  771,
   908,  983,  799,  798,  983,  773,  773,  773,  773,  842,
   1131,  901,  773, 1131,  901,  911,  842,  796,  911,  795,
   762,  762,  762,  762,  763,  763,  773,  763,  763,  763,
   763,  838,  763,  763,  901,  763,  763,  763,  838,  763,

   1167,  763,  763, 1167,  794,  792,  763,  763,  763,  791,
   983,  772,  772,  772,  772, 1131,  904,  911,  772,  904,
   790,  911,  841,  841,  789,  841,  763,  763,  763,  772,
   772,  772,  772,  786,  786,  788,  787,  841,  786,  904,
   785,  786,  786,  841,  840,  910,  786,  840,  910,  786,
   786,  784,  786,  763,  763,  763,  763,  837,  837,  837,
   837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
   837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
   837,  837,  837,  845,  845,  783,  840,  781,  845,  780,
   912,  841,  979,  912,  846,  979,  779,  840,  778,  837,

   837,  837,  777,  776,  775,  846,  846,  910,  913,  845,
   846,  913,  846,  850,  850,  979,  845,  914,  850,  774,
   914,  986,  984,  768,  986,  984,  837,  837,  837,  837,
   837,  846,  912,  851,  851,  851,  851,  912,  846,  850,
   851,  985,  915,  915,  985, 1147,  850,  915, 1147,  767,
   913,  851,  851,  851,  851,  918,  918,  766, 1170,  914,
   918, 1170,  919,  986,  923,  923,  986,  760,  915,  923,
   913,  984,  915,  919,  919,  756,  744,  740,  919,  914,
   919,  918,  732,  985,  731,  918,  924,  924,  924,  924,
   923,  726,  724,  924,  923,  925,  925,  925,  925,  919,

   1147,  985,  925,  919,  924,  924,  924,  924,  987,  988,
   723,  987,  988,  925,  925,  925,  925,  989,  989,  992,
   992,  717,  989,  993,  992, 1049,  997,  997, 1049, 1050,
   1051,  997, 1050, 1051,  993,  993,  716, 1052, 1052,  993,
   1052,  993,  714,  989, 1174,  992, 1053, 1174,  713, 1053,
   987,  988,  997, 1054,  712,  711, 1054,  987,  988, 1055,
   993,  989, 1055,  992, 1056, 1056, 1059, 1059,  709, 1056,
   997, 1059, 1109,  707,  706, 1109, 1064, 1064,  993, 1052,
   1113, 1064, 1060, 1113,  702,  700, 1051, 1049, 1053, 1050,
   1056,  698, 1059, 1060, 1060, 1054, 1111, 1111, 1060, 1111,

   1060, 1055, 1064, 1114, 1130,  697, 1114, 1130, 1053, 1133,
   696, 1134, 1133, 1054, 1134, 1055,  695, 1149,  694, 1060,
   1149, 1109, 1113, 1161, 1177, 1177, 1161, 1177, 1271, 1113,
   1271, 1271, 1271, 1334,  693,  692, 1334, 1334, 1111, 1346,
   691, 1346, 1346, 1346, 1349, 1114, 1349, 1349, 1349,  689,
   688, 1133, 1130, 1134,  687,  686, 1134, 1133, 1377, 1149,
   1114, 1377, 1377,  685,  684, 1161, 1177, 1350,  683, 1350,
   1350, 1350, 1149, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
   1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
   1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,

   1179, 1179, 1179, 1179, 1179, 1180, 1180, 1180, 1180, 1180,
   1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
   1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
   1180, 1180, 1180, 1180, 1180, 1180, 1180, 1181, 1181, 1181,
   1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
   1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
   1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1182,
   1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
   1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
   1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,

   1182, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
   1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
   1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
   1183, 1183, 1183, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
   1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
   1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
   1184, 1184, 1184, 1184, 1184, 1185, 1185, 1185, 1185, 1185,
   1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
   1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
   1185, 1185, 1185, 1185, 1185, 1185, 1185, 1186, 1186, 1186,

   1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
   1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
   1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1187,
   1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
   1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
   1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
   1187, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
   1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
   1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
   1188, 1188, 1188, 1189, 1189, 1189, 1189, 1189, 1189, 1189,

   1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
   1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
   1189, 1189, 1189, 1189, 1189, 1190, 1190, 1190, 1190, 1190,
   1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
   1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
   1190, 1190, 1190, 1190, 1190, 1190, 1190, 1191, 1191, 1191,
   1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
   1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
   1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1192,
   1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,

   1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
   1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
   1192, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
   1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
   1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
   1193, 1193, 1193, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
   1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
   1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
   1194, 1194, 1194, 1194, 1194, 1195, 1195, 1195, 1195, 1195,
   1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,

   1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
   1195, 1195, 1195, 1195, 1195, 1195, 1195, 1196, 1196, 1196,
   1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
   1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
   1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1197,
   1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
   1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
   1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
   1197, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
   1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,

   1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
   1198, 1198, 1198, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
   1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
   1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
   1199, 1199, 1199, 1199, 1199, 1200, 1200, 1200, 1200, 1200,
   1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
   1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
   1200, 1200, 1200, 1200, 1200, 1200, 1200, 1201, 1201, 1201,
   1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
   1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,

   1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1202,
   1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
   1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
   1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
   1202, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
   1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
   1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
   1203, 1203, 1203, 1204, 1204,  682, 1204, 1204, 1204, 1204,
   1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
   1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,

   1204, 1204, 1204, 1204, 1204, 1205, 1383,  681, 1383, 1383,
   1383,  680,  679,  678,  677,  674,  673,  672,  671,  670,
   1205,  669, 1205, 1205, 1205,  666,  665,  657,  656, 1205,
   1206,  655, 1206, 1206,  652, 1206,  643,  642,  639, 1206,
   1206,  604, 1206, 1206, 1206, 1207,  603, 1207, 1207, 1207,
   1207,  602, 1207,  593,  592,  590, 1207, 1207, 1207, 1207,
   1207, 1207, 1208, 1208, 1208,  588,  587,  585,  582,  580,
   1208,  578,  577,  576,  574, 1208, 1208, 1208, 1208, 1208,
   1208, 1208, 1208, 1208,  572, 1208, 1208, 1209,  570, 1209,
   1209,  569, 1209,  566,  563,  560, 1209, 1209,  558, 1209,

   1209, 1209, 1210, 1210, 1210,  557,  555,  553,  552,  550,
   1210,  548,  545,  541,  537, 1210, 1210, 1210, 1210, 1210,
   1210, 1210, 1210, 1210,  534, 1210, 1210, 1211, 1211,  532,
   1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
   1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
   1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1212,
   531,  530,  528,  527,  524, 1212,  523, 1212, 1212, 1212,
   1212, 1212,  520,  514, 1212, 1212, 1212, 1212, 1212, 1212,
   511,  510,  506,  504, 1212, 1213, 1213, 1213, 1213, 1213,
   1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,

   1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
   1213, 1213, 1213, 1213, 1213, 1213, 1213, 1214,  503, 1214,
   1214, 1214,  501,  499,  496,  494, 1214, 1215,  493, 1215,
   1215,  490,  488,  484, 1215,  481, 1215, 1215, 1215,  480,
   479,  476,  475, 1215, 1216, 1216, 1216, 1216,  474,  470,
   1216,  462,  459,  455,  443,  442,  438,  437, 1216,  433,
   432, 1216,  418,  412,  407, 1216,  403, 1216, 1216, 1216,
   395,  394,  391, 1216, 1216, 1217, 1217, 1217, 1217,  382,
   379,  376,  374,  371,  363,  335,  332,  331,  330, 1217,
   329, 1217, 1217, 1217,  326,  324, 1217,  323, 1217, 1217,

   1217,  313,  311,  304,  303, 1217, 1218, 1218, 1218, 1218,
   300,  299, 1218,  289,  286,  285,  281,  277,  276,  273,
   269,  268,  265,  260,  229,  215,  214, 1218,  213, 1218,
   1218, 1218,  209,  208,  204,  199, 1218, 1219, 1219,  196,
   1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
   1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
   1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1220,
   188,  185,  178,  164,  160, 1220,  156, 1220, 1220, 1220,
   1220, 1220,  147,  133, 1220, 1220, 1220, 1220, 1220, 1220,
   130,  124,  112,  108, 1220, 1221, 1221,   92, 1221, 1221,

   1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
   1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
   1221, 1221, 1221, 1221, 1221, 1221, 1221, 1222, 1222,   91,
   90,   85,    8,    7, 1222,    0, 1222, 1222, 1222, 1222,
   1222,    0, 1222, 1222, 1222, 1222, 1222, 1222, 1222,    0,
   0,    0,    0, 1222, 1223, 1223, 1223, 1223,    0,    0,
   1223,    0,    0,    0,    0,    0,    0,    0, 1223,    0,
   0, 1223,    0,    0,    0, 1223,    0, 1223, 1223, 1223,
   0,    0,    0, 1223, 1223, 1224, 1224, 1224, 1224,    0,
   0,    0,    0, 1224,    0,    0,    0,    0,    0, 1224,

   0, 1224, 1224,    0,    0,    0, 1224,    0, 1224, 1224,
   1224,    0,    0,    0,    0, 1224, 1225, 1225, 1225, 1225,
   0,    0, 1225,    0,    0,    0,    0,    0,    0,    0,
   0,    0,    0,    0,    0,    0,    0, 1225,    0, 1225,
   1225, 1225,    0,    0,    0,    0, 1225, 1226,    0,    0,
   1226,    0,    0,    0,    0, 1226,    0, 1226, 1226, 1226,
   0,    0,    0,    0, 1226, 1227, 1227,    0, 1227, 1227,
   1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
   1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
   1227, 1227, 1227, 1227, 1227, 1227, 1227, 1228, 1228,    0,

   1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
   1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
   1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1229,
   1229,    0, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
   1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
   1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
   1229, 1230,    0,    0,    0,    0,    0, 1230,    0, 1230,
   1230, 1230, 1230, 1230,    0,    0, 1230, 1230, 1230, 1230,
   1230, 1230,    0,    0,    0,    0, 1230, 1231,    0, 1231,
   1231, 1231,    0,    0,    0,    0, 1231, 1232, 1232, 1232,

   1232,    0,    0, 1232,    0,    0,    0,    0,    0,    0,
   0,    0,    0, 1232, 1232,    0,    0,    0, 1232,    0,
   1232, 1232, 1232,    0,    0,    0,    0, 1232, 1233, 1233,
   1233, 1233,    0,    0, 1233,    0,    0,    0,    0,    0,
   0,    0, 1233,    0,    0, 1233,    0,    0,    0, 1233,
   0, 1233, 1233, 1233,    0,    0,    0, 1233, 1233, 1234,
   1234, 1234, 1234,    0,    0,    0,    0,    0,    0,    0,
   0,    0,    0, 1234,    0, 1234, 1234,    0,    0,    0,
   1234,    0, 1234, 1234, 1234,    0,    0,    0,    0, 1234,
   1235, 1235, 1235, 1235,    0,    0, 1235,    0,    0,    0,

   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   0, 1235,    0, 1235, 1235, 1235,    0,    0,    0,    0,
   1235, 1236,    0, 1236, 1236, 1236,    0,    0,    0,    0,
   1236, 1237,    0, 1237,    0,    0,    0,    0, 1237,    0,
   1237, 1237, 1237,    0,    0,    0,    0, 1237, 1238, 1238,
   0, 1238,    0,    0,    0,    0, 1238,    0, 1238, 1238,
   1238,    0,    0,    0,    0, 1238, 1239, 1239,    0, 1239,
   1239, 1239, 1239, 1239, 1239, 1239, 1239,    0, 1239, 1239,
   1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,    0,
   1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1240,    0,

   0, 1240,    0,    0,    0,    0, 1240,    0, 1240, 1240,
   1240,    0,    0,    0,    0, 1240, 1241, 1241, 1241, 1241,
   1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
   1241, 1241, 1241, 1241, 1241, 1241, 1241,    0, 1241, 1241,
   1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1242, 1242,
   0, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
   1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,    0,
   1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
   1243, 1243,    0, 1243,    0, 1243, 1243, 1243,    0,    0,
   0,    0,    0,    0,    0,    0,    0,    0, 1243, 1243,

   1243,    0, 1243, 1243,    0,    0,    0,    0,    0, 1243,
   1244,    0,    0, 1244,    0,    0,    0,    0, 1244,    0,
   1244, 1244, 1244,    0,    0,    0,    0, 1244, 1245, 1245,
   0, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
   1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
   1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
   1246, 1246,    0, 1246,    0, 1246, 1246, 1246, 1246, 1246,
   1246,    0, 1246, 1246, 1246, 1246,    0, 1246, 1246, 1246,
   1246,    0, 1246,    0, 1246, 1246, 1246, 1246, 1246, 1246,
   1246, 1246, 1247,    0,    0, 1247,    0,    0,    0,    0,

   1247,    0,    0,    0,    0, 1247, 1247,    0, 1247,    0,
   0,    0,    0, 1247,    0, 1247, 1247, 1247, 1248, 1248,
   0, 1248,    0, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
   1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,    0,
   1248,    0, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
   1249, 1249,    0, 1249,    0, 1249, 1249, 1249, 1249, 1249,
   1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
   1249,    0, 1249,    0, 1249, 1249, 1249, 1249, 1249, 1249,
   1249, 1249, 1250,    0,    0, 1250,    0,    0,    0,    0,
   1250,    0, 1250, 1250, 1250,    0,    0,    0,    0, 1250,

   1251, 1251,    0, 1251, 1251, 1251, 1251, 1251, 1251,    0,
   0, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
   1251,    0, 1251,    0, 1251, 1251, 1251, 1251, 1251, 1251,
   1251, 1251, 1252,    0, 1252, 1252, 1252,    0,    0,    0,
   0, 1252, 1253,    0, 1253, 1253,    0,    0,    0, 1253,
   0, 1253, 1253, 1253,    0,    0,    0,    0, 1253, 1254,
   0, 1254, 1254, 1254,    0,    0,    0,    0, 1254, 1255,
   0, 1255, 1255,    0,    0,    0, 1255,    0, 1255, 1255,
   1255,    0,    0,    0,    0, 1255, 1256, 1256,    0, 1256,
   1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,

   1256, 1256, 1256, 1256, 1256, 1256, 1256,    0, 1256,    0,
   1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1257,    0,
   0, 1257,    0,    0,    0,    0, 1257,    0, 1257, 1257,
   1257,    0,    0,    0,    0, 1257, 1258, 1258,    0, 1258,
   1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
   0, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,    0,
   1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1259, 1259,
   0, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,    0,
   1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,    0,
   1259,    0, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,

   1260,    0, 1260, 1260, 1260, 1260, 1260,    0,    0,    0,
   1260,    0, 1260, 1260, 1260,    0,    0,    0,    0, 1260,
   1261, 1261,    0, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
   1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
   1261, 1261, 1261,    0, 1261, 1261, 1261, 1261, 1261, 1261,
   1261, 1261, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
   1262,    0,    0, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
   1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
   1262, 1262, 1262, 1262, 1263, 1263, 1263,    0,    0,    0,
   0,    0,    0,    0,    0,    0,    0, 1263, 1263, 1263,

   1263, 1263, 1263, 1263, 1263, 1263,    0, 1263, 1263, 1264,
   1264,    0, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
   1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
   1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
   1264, 1265,    0, 1265, 1265, 1265,    0,    0,    0,    0,
   1265, 1266, 1266,    0,    0,    0, 1266,    0, 1266, 1266,
   1266,    0,    0,    0,    0, 1266, 1267,    0, 1267, 1267,
   0, 1267,    0,    0,    0, 1267, 1267,    0, 1267, 1267,
   1267, 1268,    0,    0, 1268,    0,    0,    0,    0, 1268,
   0, 1268, 1268, 1268, 1269,    0,    0, 1269,    0, 1269,

   1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
   1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
   1269, 1269, 1269, 1269, 1269, 1269, 1270,    0, 1270, 1270,
   1270,    0,    0,    0, 1270, 1272,    0, 1272, 1272,    0,
   1272,    0,    0,    0, 1272, 1272,    0, 1272, 1272, 1272,
   1273,    0,    0, 1273,    0,    0,    0,    0,    0,    0,
   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   0, 1273, 1273, 1273, 1273, 1273, 1274, 1274,    0, 1274,
   1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
   1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,

   1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1275,    0,
   0,    0,    0,    0, 1275,    0, 1275, 1275, 1275, 1275,
   1275,    0,    0, 1275, 1275, 1275, 1275, 1275, 1275,    0,
   0,    0,    0, 1275, 1276,    0,    0,    0,    0,    0,
   1276,    0, 1276,    0, 1276, 1276, 1276,    0,    0, 1276,
   1276, 1276, 1276, 1276, 1276,    0,    0,    0,    0, 1276,
   1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
   1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
   1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
   1277, 1277, 1278,    0, 1278, 1278,    0,    0,    0, 1278,

   0, 1278, 1278, 1278,    0,    0,    0,    0, 1278, 1279,
   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   0,    0,    0,    0, 1279,    0, 1279, 1279, 1279,    0,
   0,    0,    0, 1279, 1280, 1280, 1280, 1280,    0,    0,
   1280,    0,    0,    0,    0,    0,    0,    0, 1280,    0,
   0, 1280,    0,    0,    0, 1280,    0, 1280, 1280, 1280,
   0,    0,    0, 1280, 1280, 1281, 1281, 1281, 1281,    0,
   0,    0,    0,    0,    0,    0,    0,    0,    0, 1281,
   0, 1281, 1281, 1281,    0,    0, 1281,    0, 1281, 1281,
   1281,    0,    0,    0,    0, 1281, 1282, 1282, 1282, 1282,

   0,    0, 1282,    0,    0,    0,    0,    0,    0,    0,
   0,    0,    0,    0,    0,    0,    0, 1282,    0, 1282,
   1282, 1282,    0,    0,    0,    0, 1282, 1283, 1283, 1283,
   1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
   1283, 1283, 1283, 1283, 1283, 1283, 1283,    0, 1283, 1283,
   1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1284,
   0, 1284,    0,    0, 1284,    0, 1284, 1284, 1284,    0,
   0,    0,    0, 1284, 1285, 1285,    0, 1285, 1285, 1285,
   1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
   1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,

   1285, 1285, 1285, 1285, 1285, 1285, 1286,    0,    0,    0,
   0,    0, 1286,    0, 1286, 1286, 1286, 1286, 1286,    0,
   0, 1286, 1286, 1286, 1286, 1286, 1286,    0,    0,    0,
   0, 1286, 1287,    0,    0,    0,    0,    0, 1287,    0,
   1287,    0, 1287, 1287, 1287,    0,    0, 1287, 1287, 1287,
   1287, 1287, 1287,    0,    0,    0,    0, 1287, 1288, 1288,
   0, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
   1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
   1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
   1289, 1289,    0, 1289, 1289, 1289, 1289, 1289, 1289, 1289,

   1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
   1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
   1289, 1289, 1290, 1290,    0,    0,    0,    0,    0, 1290,
   0, 1290, 1290, 1290, 1290, 1290,    0, 1290, 1290, 1290,
   1290, 1290, 1290, 1290,    0,    0,    0,    0, 1290, 1291,
   0,    0,    0,    0,    0, 1291,    0, 1291,    0, 1291,
   1291, 1291,    0,    0, 1291, 1291, 1291, 1291, 1291, 1291,
   0,    0,    0,    0, 1291, 1292, 1292, 1292, 1292,    0,
   0, 1292,    0,    0,    0,    0,    0,    0,    0, 1292,
   0,    0, 1292,    0,    0,    0, 1292,    0, 1292, 1292,

   1292,    0,    0,    0, 1292, 1292, 1293, 1293, 1293, 1293,
   0,    0,    0,    0, 1293,    0,    0,    0,    0,    0,
   1293,    0, 1293, 1293,    0,    0,    0, 1293,    0, 1293,
   1293, 1293,    0,    0,    0,    0, 1293, 1294, 1294, 1294,
   1294,    0,    0, 1294,    0,    0,    0,    0,    0,    0,
   0,    0,    0,    0,    0,    0,    0,    0, 1294,    0,
   1294, 1294, 1294,    0,    0,    0,    0, 1294, 1295, 1295,
   1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,    0, 1295,
   1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
   1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,

   1296,    0,    0, 1296,    0,    0,    0,    0, 1296,    0,
   0,    0,    0,    0,    0,    0, 1296,    0,    0,    0,
   0, 1296,    0, 1296, 1296, 1296,    0,    0,    0,    0,
   1296, 1297,    0,    0, 1297,    0,    0,    0,    0, 1297,
   0, 1297, 1297, 1297,    0,    0,    0,    0, 1297, 1298,
   1298,    0, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
   1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
   1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
   1298, 1299, 1299,    0, 1299, 1299, 1299, 1299, 1299, 1299,
   1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,

   1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
   1299, 1299, 1299, 1300, 1300,    0, 1300, 1300, 1300, 1300,
   1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
   1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
   1300, 1300, 1300, 1300, 1300, 1301,    0,    0,    0,    0,
   0, 1301,    0, 1301, 1301, 1301, 1301, 1301,    0,    0,
   1301, 1301, 1301, 1301, 1301, 1301,    0,    0,    0,    0,
   1301, 1302,    0,    0,    0,    0,    0, 1302,    0, 1302,
   0, 1302, 1302, 1302,    0,    0, 1302, 1302, 1302, 1302,
   1302, 1302,    0,    0,    0,    0, 1302, 1303, 1303, 1303,

   1303,    0,    0, 1303,    0,    0,    0,    0,    0,    0,
   0,    0,    0, 1303, 1303,    0,    0,    0, 1303,    0,
   1303, 1303, 1303,    0,    0,    0,    0, 1303, 1304,    0,
   1304, 1304, 1304,    0,    0,    0,    0, 1304, 1305, 1305,
   1305, 1305,    0,    0, 1305,    0,    0,    0,    0,    0,
   0,    0,    0,    0, 1305, 1305,    0,    0,    0, 1305,
   0, 1305, 1305, 1305,    0,    0,    0,    0, 1305, 1306,
   1306, 1306, 1306,    0,    0, 1306,    0,    0,    0,    0,
   0,    0,    0, 1306,    0,    0, 1306,    0,    0,    0,
   1306,    0, 1306, 1306, 1306,    0,    0,    0, 1306, 1306,

   1307, 1307, 1307, 1307,    0,    0,    0,    0,    0,    0,
   0,    0,    0,    0, 1307,    0, 1307, 1307,    0,    0,
   0, 1307,    0, 1307, 1307, 1307,    0,    0,    0,    0,
   1307, 1308, 1308, 1308, 1308,    0,    0, 1308,    0,    0,
   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   0,    0, 1308,    0, 1308, 1308, 1308,    0,    0,    0,
   0, 1308, 1309,    0,    0,    0,    0, 1309,    0, 1309,
   1309, 1309,    0,    0,    0,    0, 1309, 1310,    0, 1310,
   0,    0,    0,    0, 1310,    0, 1310, 1310, 1310,    0,
   0,    0,    0, 1310, 1311,    0,    0,    0,    0,    0,

   0,    0,    0,    0,    0,    0,    0,    0,    0, 1311,
   0, 1311, 1311, 1311,    0,    0,    0,    0, 1311, 1312,
   1312,    0, 1312,    0,    0,    0,    0, 1312,    0, 1312,
   1312, 1312,    0,    0,    0,    0, 1312, 1313, 1313,    0,
   1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,    0, 1313,
   1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
   0, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1314,
   0,    0, 1314,    0,    0,    0,    0, 1314,    0, 1314,
   1314, 1314,    0,    0,    0,    0, 1314, 1315, 1315, 1315,
   1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

   1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,    0, 1315,
   1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1316,
   1316,    0, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
   1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
   0, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
   1316, 1317,    0,    0,    0,    0,    0,    0,    0,    0,
   0,    0,    0,    0,    0,    0, 1317,    0, 1317, 1317,
   1317,    0,    0,    0,    0, 1317, 1318,    0,    0, 1318,
   0,    0,    0,    0, 1318,    0, 1318, 1318, 1318,    0,
   0,    0,    0, 1318, 1319, 1319,    0, 1319, 1319, 1319,

   1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
   1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
   1319, 1319, 1319, 1319, 1319, 1319, 1320, 1320,    0, 1320,
   0, 1320, 1320, 1320, 1320, 1320, 1320,    0, 1320, 1320,
   1320, 1320,    0, 1320, 1320, 1320, 1320,    0, 1320,    0,
   1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1321,    0,
   0, 1321,    0,    0,    0,    0, 1321,    0,    0,    0,
   0, 1321, 1321,    0, 1321,    0,    0,    0,    0, 1321,
   0, 1321, 1321, 1321, 1322, 1322,    0, 1322,    0, 1322,
   1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,

   1322, 1322, 1322, 1322, 1322,    0, 1322,    0, 1322, 1322,
   1322, 1322, 1322, 1322, 1322, 1322, 1323, 1323,    0, 1323,
   0, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
   1323, 1323, 1323, 1323, 1323, 1323, 1323,    0, 1323,    0,
   1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1324,    0,
   0, 1324,    0,    0,    0,    0, 1324,    0, 1324, 1324,
   1324,    0,    0,    0,    0, 1324, 1325, 1325,    0, 1325,
   1325, 1325, 1325, 1325, 1325,    0,    0, 1325, 1325, 1325,
   1325, 1325, 1325, 1325, 1325, 1325, 1325,    0, 1325,    0,
   1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1326,    0,

   1326, 1326,    0,    0,    0, 1326,    0, 1326, 1326, 1326,
   0,    0,    0,    0, 1326, 1327,    0,    0,    0,    0,
   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   1327,    0, 1327, 1327, 1327,    0,    0,    0,    0, 1327,
   1328,    0, 1328, 1328,    0,    0,    0, 1328,    0, 1328,
   1328, 1328,    0,    0,    0,    0, 1328, 1329,    0,    0,
   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   0,    0, 1329,    0, 1329, 1329, 1329,    0,    0,    0,
   0, 1329, 1330, 1330,    0, 1330, 1330, 1330, 1330, 1330,
   1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,

   1330, 1330, 1330,    0, 1330,    0, 1330, 1330, 1330, 1330,
   1330, 1330, 1330, 1330, 1331,    0,    0, 1331,    0,    0,
   0,    0, 1331,    0, 1331, 1331, 1331,    0,    0,    0,
   0, 1331, 1332, 1332,    0, 1332, 1332, 1332, 1332, 1332,
   1332, 1332, 1332, 1332, 1332, 1332,    0, 1332, 1332, 1332,
   1332, 1332, 1332, 1332, 1332,    0, 1332, 1332, 1332, 1332,
   1332, 1332, 1332, 1332, 1333, 1333,    0, 1333, 1333, 1333,
   1333, 1333, 1333, 1333, 1333,    0, 1333, 1333, 1333, 1333,
   1333, 1333, 1333, 1333, 1333,    0, 1333,    0, 1333, 1333,
   1333, 1333, 1333, 1333, 1333, 1333, 1335,    0, 1335, 1335,

   1335, 1335, 1335,    0,    0,    0, 1335,    0, 1335, 1335,
   1335,    0,    0,    0,    0, 1335, 1336,    0, 1336, 1336,
   1336,    0,    0,    0,    0, 1336, 1337, 1337,    0, 1337,
   1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
   1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,    0,
   1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1338, 1338,
   1338, 1338, 1338, 1338, 1338, 1338, 1338,    0,    0, 1338,
   1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
   1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
   1339, 1339,    0,    0,    0, 1339,    0, 1339, 1339, 1339,

   0,    0,    0,    0, 1339, 1340, 1340,    0, 1340, 1340,
   1340, 1340,    0, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
   1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
   1340, 1340, 1340, 1340, 1340, 1340, 1340, 1341, 1341,    0,
   1341,    0,    0,    0,    0, 1341,    0, 1341, 1341, 1341,
   1342,    0, 1342, 1342,    0, 1342,    0,    0,    0, 1342,
   1342,    0, 1342, 1342, 1342, 1343,    0,    0, 1343,    0,
   1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
   1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
   1343, 1343, 1343, 1343, 1343, 1343, 1343, 1344, 1344,    0,

   1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
   1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
   1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1345,
   0,    0, 1345,    0,    0,    0,    0,    0,    0,    0,
   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   1345,    0, 1345, 1345, 1345, 1347,    0,    0, 1347,    0,
   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   0,    0,    0,    0,    0,    0, 1347,    0, 1347, 1347,
   1347, 1348, 1348,    0, 1348, 1348, 1348, 1348, 1348, 1348,
   1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,

   1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
   0, 1348, 1348, 1351,    0,    0, 1351,    0,    0,    0,
   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   0,    0,    0,    0, 1351, 1351, 1351, 1351, 1351, 1352,
   0,    0,    0,    0,    0, 1352,    0, 1352, 1352, 1352,
   1352, 1352,    0,    0, 1352, 1352, 1352, 1352, 1352, 1352,
   0,    0,    0,    0, 1352, 1353,    0,    0,    0,    0,
   0, 1353,    0, 1353, 1353, 1353, 1353, 1353,    0,    0,
   1353, 1353, 1353, 1353, 1353, 1353,    0,    0,    0,    0,
   1353, 1354,    0, 1354, 1354, 1354,    0,    0,    0,    0,

   1354, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
   1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
   1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
   1355, 1355, 1355, 1356,    0, 1356,    0,    0, 1356,    0,
   1356, 1356, 1356,    0,    0,    0,    0, 1356, 1357,    0,
   0,    0,    0,    0, 1357,    0, 1357, 1357, 1357, 1357,
   1357,    0,    0, 1357, 1357, 1357, 1357, 1357, 1357,    0,
   0,    0,    0, 1357, 1358,    0,    0,    0,    0,    0,
   1358,    0, 1358, 1358, 1358, 1358, 1358,    0,    0, 1358,
   1358, 1358, 1358, 1358, 1358,    0,    0,    0,    0, 1358,

   1359, 1359,    0, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
   1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
   1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
   1359, 1359, 1360, 1360,    0,    0,    0,    0,    0, 1360,
   0, 1360, 1360, 1360, 1360, 1360,    0, 1360, 1360, 1360,
   1360, 1360, 1360, 1360,    0,    0,    0,    0, 1360, 1361,
   1361,    0,    0,    0,    0,    0, 1361,    0, 1361, 1361,
   1361, 1361, 1361,    0, 1361, 1361, 1361, 1361, 1361, 1361,
   1361,    0,    0,    0,    0, 1361, 1362, 1362, 1362, 1362,
   1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,

   1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
   1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1363,    0,
   0, 1363,    0,    0,    0,    0, 1363,    0,    0,    0,
   0,    0,    0,    0, 1363,    0,    0,    0,    0, 1363,
   0, 1363, 1363, 1363,    0,    0,    0,    0, 1363, 1364,
   0,    0,    0,    0,    0, 1364,    0, 1364, 1364, 1364,
   1364, 1364,    0,    0, 1364, 1364, 1364, 1364, 1364, 1364,
   0,    0,    0,    0, 1364, 1365,    0,    0,    0,    0,
   0, 1365,    0, 1365, 1365, 1365, 1365, 1365,    0,    0,
   1365, 1365, 1365, 1365, 1365, 1365,    0,    0,    0,    0,

   1365, 1366, 1366, 1366, 1366,    0,    0, 1366,    0,    0,
   0,    0,    0,    0,    0,    0,    0, 1366, 1366,    0,
   0,    0, 1366,    0, 1366, 1366, 1366,    0,    0,    0,
   0, 1366, 1367, 1367, 1367, 1367,    0,    0, 1367,    0,
   0,    0,    0,    0,    0,    0,    0,    0,    0, 1367,
   0,    0,    0, 1367,    0, 1367, 1367, 1367,    0,    0,
   0,    0, 1367, 1368, 1368, 1368, 1368,    0,    0, 1368,
   0,    0,    0,    0,    0,    0,    0,    0,    0, 1368,
   1368,    0,    0,    0, 1368,    0, 1368, 1368, 1368,    0,
   0,    0,    0, 1368, 1369,    0,    0,    0,    0, 1369,

   0, 1369, 1369, 1369,    0,    0,    0,    0, 1369, 1370,
   0, 1370, 1370, 1370,    0,    0,    0,    0, 1370, 1371,
   0, 1371,    0,    0,    0,    0, 1371,    0, 1371, 1371,
   1371,    0,    0,    0,    0, 1371, 1372,    0, 1372, 1372,
   1372,    0,    0,    0,    0, 1372, 1373,    0,    0,    0,
   0, 1373,    0, 1373, 1373, 1373,    0,    0,    0,    0,
   1373, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
   1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,    0, 1374,
   1374, 1374, 1374,    0, 1374,    0,    0, 1374, 1374, 1374,
   1374, 1374, 1374, 1375,    0, 1375, 1375, 1375,    0,    0,

   0,    0, 1375, 1376,    0, 1376, 1376, 1376,    0,    0,
   0,    0, 1376, 1378,    0, 1378, 1378, 1378, 1378, 1378,
   0,    0,    0, 1378,    0, 1378, 1378, 1378,    0,    0,
   0,    0, 1378, 1379, 1379,    0, 1379, 1379, 1379, 1379,
   1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
   1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
   1379, 1379, 1379, 1379, 1379, 1380,    0,    0, 1380,    0,
   0,    0,    0, 1380,    0, 1380, 1380, 1380, 1381,    0,
   1381,    0, 1381, 1381,    0, 1381,    0,    0,    0, 1381,
   1381,    0, 1381, 1381, 1381, 1382, 1382,    0, 1382, 1382,

   1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
   1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
   1382, 1382, 1382, 1382, 1382, 1382, 1382, 1384,    0,    0,
   1384,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   0,    0,    0,    0,    0,    0,    0,    0, 1384,    0,
   1384, 1384, 1384, 1385, 1385,    0, 1385, 1385, 1385, 1385,
   1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
   1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
   1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386, 1386, 1386,
   1387,    0,    0, 1387,    0,    0,    0,    0,    0,    0,

   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   0, 1387, 1387, 1387, 1387, 1387, 1388, 1388,    0, 1388,
   0,    0,    0,    0,    0,    0,    0, 1388,    0, 1388,
   1388,    0, 1388, 1388,    0,    0, 1388, 1388,    0, 1388,
   1388, 1388,    0, 1388, 1389,    0,    0,    0,    0,    0,
   1389,    0, 1389, 1389, 1389, 1389, 1389,    0,    0, 1389,
   1389, 1389, 1389, 1389, 1389,    0,    0,    0,    0, 1389,
   1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
   1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
   1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,

   1390, 1390, 1391,    0,    0,    0,    0,    0, 1391,    0,
   1391, 1391, 1391, 1391, 1391,    0,    0, 1391, 1391, 1391,
   1391, 1391, 1391,    0,    0,    0,    0, 1391, 1392, 1392,
   0, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
   1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
   1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
   1393, 1393,    0,    0,    0,    0,    0, 1393,    0, 1393,
   1393, 1393, 1393, 1393,    0, 1393, 1393, 1393, 1393, 1393,
   1393, 1393,    0,    0,    0,    0, 1393, 1394,    0,    0,
   0,    0,    0, 1394,    0, 1394, 1394, 1394, 1394, 1394,

   0,    0, 1394, 1394, 1394, 1394, 1394, 1394,    0,    0,
   0,    0, 1394, 1395,    0, 1395, 1395, 1395,    0,    0,
   0,    0, 1395, 1396, 1396, 1396, 1396,    0,    0, 1396,
   0,    0,    0,    0,    0,    0,    0,    0,    0, 1396,
   1396,    0,    0,    0, 1396,    0, 1396, 1396, 1396,    0,
   0,    0,    0, 1396, 1397, 1397, 1397, 1397,    0,    0,
   1397,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   0, 1397,    0,    0,    0, 1397,    0, 1397, 1397, 1397,
   0,    0,    0,    0, 1397, 1398,    0, 1398,    0,    0,
   0,    0, 1398,    0, 1398, 1398, 1398,    0,    0,    0,

   0, 1398, 1399,    0,    0,    0,    0, 1399,    0, 1399,
   1399, 1399,    0,    0,    0,    0, 1399, 1400, 1400,    0,
   1400,    0,    0,    0,    0, 1400,    0, 1400, 1400, 1400,
   1401, 1401,    0, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
   1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
   1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
   1401, 1401, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
   1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
   1402, 1402, 1402, 1402,    0, 1402,    0,    0,    0, 1402,
   1402, 1402, 1402, 1402, 1403, 1403, 1403, 1403,    0,    0,

   1403,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   1403, 1403,    0,    0,    0, 1403,    0, 1403, 1403, 1403,
   0,    0,    0,    0, 1403, 1404, 1404, 1404, 1404, 1404,
   1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
   1404, 1404,    0, 1404, 1404, 1404, 1404,    0, 1404,    0,
   1404,    0, 1404, 1404, 1404, 1404, 1404, 1405, 1405,    0,
   1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
   1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
   1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1406,
   1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,

   1406, 1406, 1406, 1406, 1406, 1406,    0, 1406, 1406, 1406,
   1406,    0, 1406,    0,    0,    0, 1406, 1406, 1406, 1406,
   1406, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
   1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,    0, 1407,
   1407, 1407, 1407,    0, 1407,    0,    0,    0, 1407, 1407,
   1407, 1407, 1407, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
   1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
   0, 1408, 1408, 1408, 1408,    0, 1408,    0,    0,    0,
   1408, 1408, 1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409,
   1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

   1409, 1409,    0, 1409, 1409, 1409, 1409,    0, 1409,    0,
   0,    0, 1409, 1409, 1409, 1409, 1409, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
   1178, 1178

} ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf = 0, *yy_state_ptr = 0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;

#include <QVector>
#include <QStack>
#include <QRegExp>
#include <QFile>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>
#include <unistd.h>

#include <cite.h>
#include <condparser.h>
#include <config.h>
#include <doxy_globals.h>
#include <entry.h>
#include <formula.h>
#include "message.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include <parser_base.h>
#include <parser_cstyle.h>
#include <parser_md.h>
#include <util.h>

#define YY_NO_INPUT 1

// forward declarations
static bool handleBrief(const QString &);
static bool handleFn(const QString &);
static bool handleDef(const QString &);
static bool handleOverload(const QString &);
static bool handleEnum(const QString &);
static bool handleDefGroup(const QString &);
static bool handleAddToGroup(const QString &);
static bool handleWeakGroup(const QString &);
static bool handleNamespace(const QString &);
static bool handlePackage(const QString &);
static bool handleClass(const QString &);
static bool handleHeaderFile(const QString &);
static bool handleProtocol(const QString &);
static bool handleCategory(const QString &);
static bool handleUnion(const QString &);
static bool handleStruct(const QString &);
static bool handleInterface(const QString &);
static bool handleIdlException(const QString &);
static bool handlePage(const QString &);
static bool handleMainpage(const QString &);
static bool handleFile(const QString &);
static bool handleDir(const QString &);
static bool handleExample(const QString &);
static bool handleDetails(const QString &);
static bool handleName(const QString &);
static bool handleTodo(const QString &);
static bool handleTest(const QString &);
static bool handleBug(const QString &);
static bool handleSubpage(const QString &s);
static bool handleDeprecated(const QString &);
static bool handleXRefItem(const QString &);
static bool handleRelated(const QString &);
static bool handleRelatedAlso(const QString &);
static bool handleMemberOf(const QString &);
static bool handleRefItem(const QString &);
static bool handleSection(const QString &);
static bool handleAnchor(const QString &);
static bool handleCite(const QString &);
static bool handleFormatBlock(const QString &);
static bool handleAddIndex(const QString &);
static bool handleIf(const QString &);
static bool handleIfNot(const QString &);
static bool handleElseIf(const QString &);
static bool handleElse(const QString &);
static bool handleEndIf(const QString &);
static bool handleIngroup(const QString &);
static bool handleNoSubGrouping(const QString &);
static bool handleShowInitializer(const QString &);
static bool handleHideInitializer(const QString &);
static bool handleCallgraph(const QString &);
static bool handleCallergraph(const QString &);
static bool handleInternal(const QString &);
static bool handleLineBr(const QString &);
static bool handleStatic(const QString &);
static bool handlePure(const QString &);
static bool handlePrivate(const QString &);
static bool handlePrivateSection(const QString &);
static bool handleProtected(const QString &);
static bool handleProtectedSection(const QString &);
static bool handlePublic(const QString &s);
static bool handlePublicSection(const QString &s);
static bool handleToc(const QString &s);
static bool handleInherit(const QString &);
static bool handleExtends(const QString &);
static bool handleCopyDoc(const QString &);
static bool handleCopyBrief(const QString &);
static bool handleCopyDetails(const QString &);
static bool handleParBlock(const QString &);
static bool handleEndParBlock(const QString &);

typedef bool (*DocCmdFunc)(const QString &name);

struct DocCmdMap {
   const char *cmdName;
   DocCmdFunc handler;
   bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] = {
   // command name      handler function         ends brief description
   { "brief",           &handleBrief,            FALSE },
   { "short",           &handleBrief,            FALSE },
   { "fn",              &handleFn,               FALSE },
   { "var",             &handleFn,               FALSE },
   { "typedef",         &handleFn,               FALSE },
   { "property",        &handleFn,               FALSE },
   { "def",             &handleDef,              FALSE },
   { "overload",        &handleOverload,         FALSE },
   { "enum",            &handleEnum,             FALSE },
   { "defgroup",        &handleDefGroup,         FALSE },
   { "group",           &handleDefGroup,         FALSE },
   { "addtogroup",      &handleAddToGroup,       FALSE },
   { "weakgroup",       &handleWeakGroup,        FALSE },
   { "namespace",       &handleNamespace,        FALSE },
   { "package",         &handlePackage,          FALSE },
   { "class",           &handleClass,            FALSE },
   { "headerfile",      &handleHeaderFile,       FALSE },
   { "protocol",        &handleProtocol,         FALSE },
   { "category",        &handleCategory,         FALSE },
   { "union",           &handleUnion,            FALSE },
   { "struct",          &handleStruct,           FALSE },
   { "interface",       &handleInterface,        FALSE },
   { "idlexcept",       &handleIdlException,     FALSE },
   { "page",            &handlePage,             FALSE },
   { "mainpage",        &handleMainpage,         FALSE },
   { "file",            &handleFile,             FALSE },
   { "dir",             &handleDir,              FALSE },
   { "example",         &handleExample,          FALSE },
   { "details",         &handleDetails,          TRUE  },
   { "name",            &handleName,             FALSE },
   { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
   { "test",            &handleTest,             FALSE }, // end brief will be done differently
   { "bug",             &handleBug,              FALSE }, // end brief will be done differently
   { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
   { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
   { "related",         &handleRelated,          TRUE  },
   { "relates",         &handleRelated,          TRUE  },
   { "relatedalso",     &handleRelatedAlso,      TRUE  },
   { "relatesalso",     &handleRelatedAlso,      TRUE  },
   { "parblock",        &handleParBlock,         TRUE  },
   { "endparblock",     &handleEndParBlock,      TRUE  },
   { "refitem",         &handleRefItem,          TRUE  },
   { "cite",            &handleCite,             FALSE },
   { "subpage",         &handleSubpage,          TRUE  },
   { "section",         &handleSection,          TRUE  },
   { "subsection",      &handleSection,          TRUE  },
   { "subsubsection",   &handleSection,          TRUE  },
   { "paragraph",       &handleSection,          TRUE  },
   { "anchor",          &handleAnchor,           TRUE  }, 
   { "verbatim",        &handleFormatBlock,      TRUE  },
   { "latexonly",       &handleFormatBlock,      FALSE },
   { "htmlonly",        &handleFormatBlock,      FALSE },
   { "xmlonly",         &handleFormatBlock,      FALSE },
   { "docbookonly",     &handleFormatBlock,      FALSE },
   { "rtfonly",         &handleFormatBlock,      FALSE },
   { "manonly",         &handleFormatBlock,      FALSE },
   { "dot",             &handleFormatBlock,      TRUE  },
   { "msc",             &handleFormatBlock,      TRUE  },
   { "startuml",        &handleFormatBlock,      TRUE  },
   { "code",            &handleFormatBlock,      TRUE  },
   { "addindex",        &handleAddIndex,         FALSE },
   { "if",              &handleIf,               FALSE },
   { "ifnot",           &handleIfNot,            FALSE },
   { "elseif",          &handleElseIf,           FALSE },
   { "else",            &handleElse,             FALSE },
   { "endif",           &handleEndIf,            FALSE },
   { "ingroup",         &handleIngroup,          FALSE },
   { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
   { "showinitializer", &handleShowInitializer,  FALSE },
   { "hideinitializer", &handleHideInitializer,  FALSE },
   { "callgraph",       &handleCallgraph,        FALSE },
   { "callergraph",     &handleCallergraph,      FALSE },
   { "internal",        &handleInternal,         TRUE  },
   { "_linebr",         &handleLineBr,           FALSE },
   { "static",          &handleStatic,           FALSE },
   { "pure",            &handlePure,             FALSE },
   { "private",         &handlePrivate,          FALSE },
   { "privatesection",  &handlePrivateSection,   FALSE },
   { "protected",       &handleProtected,        FALSE },
   { "protectedsection", &handleProtectedSection, FALSE },
   { "public",          &handlePublic,           FALSE },
   { "publicsection",   &handlePublicSection,    FALSE },
   { "tableofcontents", &handleToc,              FALSE },
   { "inherit",         &handleInherit,          TRUE  },
   { "extends",         &handleExtends,          TRUE  },
   { "implements",      &handleExtends,          TRUE  },
   { "memberof",        &handleMemberOf,         TRUE  },
   { "arg",             0,                       TRUE  },
   { "attention",       0,                       TRUE  },
   { "author",          0,                       TRUE  },
   { "authors",         0,                       TRUE  },
   { "copydoc",         &handleCopyDoc,          TRUE  },
   { "copybrief",       &handleCopyBrief,        FALSE },
   { "copydetails",     &handleCopyDetails,      TRUE  },
   { "copyright",       0,                       TRUE  },
   { "date",            0,                       TRUE  },
   { "dotfile",         0,                       TRUE  },
   { "htmlinclude",     0,                       FALSE },
   { "image",           0,                       TRUE  },
   { "include",         0,                       TRUE  },
   { "includelineno",   0,                       TRUE  },
   { "invariant",       0,                       TRUE  },
   { "latexinclude",    0,                       FALSE },
   { "li",              0,                       TRUE  },
   { "line",            0,                       TRUE  },
   { "note",            0,                       TRUE  },
   { "par",             0,                       TRUE  },
   { "param",           0,                       TRUE  },
   { "tparam",          0,                       TRUE  },
   { "post",            0,                       TRUE  },
   { "pre",             0,                       TRUE  },
   { "remark",          0,                       TRUE  },
   { "remarks",         0,                       TRUE  },
   { "result",          0,                       TRUE  },
   { "return",          0,                       TRUE  },
   { "returns",         0,                       TRUE  },
   { "retval",          0,                       TRUE  },
   { "sa",              0,                       TRUE  },
   { "see",             0,                       TRUE  },
   { "since",           0,                       TRUE  },
   { "throw",           0,                       TRUE  },
   { "throws",          0,                       TRUE  },
   { "until",           0,                       TRUE  },
   { "verbinclude",     0,                       FALSE },
   { "version",         0,                       TRUE  },
   { "warning",         0,                       TRUE  },
   { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
 public:
   struct Cmd {
      DocCmdFunc func;
      bool endsBrief;
   };

   /** maps a command name to a handler function */
   static Cmd *map(const QString &name) {
      return instance()->find(name);
   }

   /** release the singleton */
   static void freeInstance() {
      delete s_instance;
      s_instance = 0;
   }

 private:
   static DocCmdMapper *instance() {
      if (s_instance == 0) {
         s_instance = new DocCmdMapper;
      }
      return s_instance;
   }

   DocCmdMapper() {
      DocCmdMap *p = docCmdMap;
      while (p->cmdName) {
         if (m_map.contains(p->cmdName)) {
            err("DocCmdMapper: command %s already added\n", p->cmdName);
            exit(1);
         }
         Cmd *cmd = new Cmd;
         cmd->func = p->handler;
         cmd->endsBrief = p->endsBrief;
         m_map.insert(p->cmdName, cmd);
         p++;
      }
   }

   Cmd *find(const QString &name) {
      return m_map.value(name);
   }

   QHash<QString, Cmd *> m_map;
   static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance = 0;

bool inInternalDocs = FALSE;

#define YY_NEVER_INTERACTIVE 1

enum XRefKind {
   XRef_Item,
   XRef_Todo,
   XRef_Test,
   XRef_Bug,
   XRef_Deprecated,
   XRef_None
};

enum OutputContext {
   OutputDoc,
   OutputBrief,
   OutputXRef,
   OutputInbody
};

enum GuardType {
   Guard_If,
   Guard_IfNot,
   Guard_Skip
};

class GuardedSection
{
 public:
   GuardedSection(bool enabled, bool parentVisible)
      : m_enabled(enabled), m_parentVisible(parentVisible) {}
   bool isEnabled() const {
      return m_enabled;
   }
   bool parentVisible() const {
      return m_parentVisible;
   }

 private:
   bool m_enabled;
   bool m_parentVisible;
};

void openGroup(QSharedPointer<Entry> e, const QString &file, int line);
void closeGroup(QSharedPointer<Entry> e, const QString &file, int line, bool foundInline = FALSE);
void initGroupInfo(QSharedPointer<Entry> e);
static void groupAddDocs(QSharedPointer<Entry> e, const QString &fileName);

static ParserInterface *langParser;          // the language parser that is calling us
static QString          inputString;         // input string
static int		         inputPosition;       // read pointer
static QString     	   yyFileName;          // file name that is read from
static int		         yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QString          formulaText;         // Running text of a formula
static QString          formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QString         *pOutputString;       // pointer to string to which the output is appended.
static QString          outputXRef;          // temp argument of todo/test/../xrefitem commands
static QString          blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         //
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QString          functionProto;       // function prototype

static QStack<GuardedSection *> guards;      // tracks nested conditional sections (if,ifnot,..)

static QSharedPointer<Entry>	current;       // working entry

static bool             needNewEntry;

static QString          g_sectionLabel;
static QString		      g_sectionTitle;
static int              g_sectionLevel;
static QString          xrefItemKey;
static QString          newXRefItemKey;
static QString          xrefItemTitle;
static QString          xrefListTitle;
static Protection	      protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;

static int              g_commentCount;
static QString          g_spaceBeforeCmd;
static QString          g_spaceBeforeIf;
static QString          g_copyDocArg;

static QString          g_guardExpr;
static int              g_roundCount;

static bool             g_insideParBlock;

static QStack<Grouping *> g_autoGroupStack;
static int               g_memberGroupId = DOX_NOGROUP;
static QString           g_memberGroupHeader;
static QString           g_memberGroupDocs;
static QString           g_memberGroupRelates;
static QString           g_compoundName;

static void initParser()
{
   g_sectionLabel.resize(0);
   g_sectionTitle.resize(0);
   g_memberGroupHeader.resize(0);
   g_insideParBlock = FALSE;
}

static bool getDocSectionName(int s)
{
   switch (s) {
      case Entry::CLASSDOC_SEC:
      case Entry::STRUCTDOC_SEC:
      case Entry::UNIONDOC_SEC:
      case Entry::EXCEPTIONDOC_SEC:
      case Entry::NAMESPACEDOC_SEC:
      case Entry::PROTOCOLDOC_SEC:
      case Entry::CATEGORYDOC_SEC:
      case Entry::ENUMDOC_SEC:
      case Entry::PAGEDOC_SEC:
      case Entry::VARIABLEDOC_SEC:
      case Entry::MEMBERDOC_SEC:
      case Entry::OVERLOADDOC_SEC:
      case Entry::FILEDOC_SEC:
      case Entry::DEFINEDOC_SEC:
      case Entry::GROUPDOC_SEC:
      case Entry::MAINPAGEDOC_SEC:
      case Entry::PACKAGEDOC_SEC:
      case Entry::DIRDOC_SEC:
      case Entry::EXAMPLE_SEC:
      case Entry::MEMBERGRP_SEC:
         return TRUE;
      default:
         return FALSE;
   }
}

static bool makeStructuralIndicator(Entry::Sections s)
{   
   if (getDocSectionName(current->section)) {
      return TRUE;

   } else {
      needNewEntry = TRUE;
      current->section   = s;
      current->fileName  = yyFileName;
      current->startLine = yyLineNr;
      return FALSE;
   }
}

static void lineCount()
{
   for ( const char *c = commentscanYYtext ; *c ; ++c ) {
      yyLineNr += (*c == '\n') ;
   }
}

static QString stripQuotes(const QString &s)
{
   QString name = s;

   if (name.isEmpty()) {
      return name;
   }

   if (name.at(0) == '"' && name.at(name.length() - 1) == '"') {
      name = name.mid(1, name.length() - 2);
   }

   return name;
}

static void addXRefItem(const QString &listName, const QString &itemTitle, const QString &listTitle, bool append)
{
   QSharedPointer<Entry> docEntry = current; // inBody && previous ? previous : current;
  
   if (listName.isEmpty()) {
      return;
   }
 
   auto refList = Doxy_Globals::xrefLists->find(listName);

   if (refList == Doxy_Globals::xrefLists->end()) { 
      // new list     
      Doxy_Globals::xrefLists->insert(listName, RefList(listName, listTitle, itemTitle));      
      refList = Doxy_Globals::xrefLists->find(listName);
   }

   ListItemInfo *lii = 0;

   if (docEntry->sli) {
     
      for (auto &item : *docEntry->sli) {
         lii = &item;

         if (lii->type == listName) {           
            break;
         }
      }
   }

   if (lii && append) { 
      // already found item of same type just before this one

      RefItem *item = refList->getRefItem(lii->itemId);
      assert(item != 0);

      item->text += " <p>";

      if (Doxy_Globals::markdownSupport) {
         item->text += processMarkdown(yyFileName, yyLineNr, current, outputXRef);
      } else {
         item->text += outputXRef;
      }
      
   } else { 
      // new item

      int itemId  = refList->addRefItem();
     
      // if we have already an item from the same list type (e.g. a second @todo)
      // in the same Entry (i.e. lii!=0) then we reuse its link anchor.

      QString anchorLabel = QString("_%1%2").arg(listName).arg(itemId, 6, 10, QChar('0'));

      RefItem *item = refList->getRefItem(itemId);
      assert(item != 0);

      if (Doxy_Globals::markdownSupport) {
         item->text = processMarkdown(yyFileName, yyLineNr, current, outputXRef);
      } else {
         item->text = outputXRef;
      }

      item->listAnchor = anchorLabel;
      docEntry->addSpecialListItem(listName, itemId);

      QString cmdString = QString("\\xrefitem %1 %2.").arg(listName).arg(itemId);

      if (inBody) {
         docEntry->inbodyDocs += cmdString;
      } else {
         docEntry->doc += cmdString;
      }

      QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict->find(anchorLabel);

      if (si) {
         if (si->lineNr != -1) {
            warn(listName, yyLineNr, "multiple use of section label '%s', (first occurrence: %s, line %d)", 
                                     qPrintable(anchorLabel), qPrintable(si->fileName), si->lineNr);
         } else {
            warn(listName, yyLineNr, "multiple use of section label '%s', (first occurrence: %s)", qPrintable(anchorLabel), qPrintable(si->fileName));
         }

      } else {
         si = QSharedPointer<SectionInfo>(new SectionInfo(listName, yyLineNr, anchorLabel, g_sectionTitle, SectionInfo::Anchor, g_sectionLevel));
         Doxy_Globals::sectionDict->insert(anchorLabel, si);
         docEntry->anchors->append(*si);
      }
   }

   outputXRef.resize(0);
}

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QString addFormula()
{
   QString formLabel;
   QString fText = formulaText.simplified();
   
   auto f = Doxy_Globals::formulaDict->find(fText);

   if (f == Doxy_Globals::formulaDict->end()) {
      Formula temp = Formula(fText);

      Doxy_Globals::formulaList->append(temp);
      Doxy_Globals::formulaDict->insert(fText, temp);

      formLabel = QString("\\form#%1").arg(temp.getId());

      Doxy_Globals::formulaNameDict->insert(formLabel, temp);
      f = Doxy_Globals::formulaDict->find(fText);

   } else {
      formLabel = QString("\\form#%1").arg(f->getId());

   }

   int i;
   for (i = 0; i < formulaNewLines; i++) {
      formLabel += "@_fakenl";   // add fake newlines to
   }

   // keep the warnings
   // correctly aligned.
   return formLabel;
}

static void checkFormula();

static SectionInfo::SectionType sectionLevelToType(int level)
{
   if (level >= 0 && level < 5) {
      return (SectionInfo::SectionType)level;
   }
   return SectionInfo::Anchor;
}

static void addSection()
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict->find(g_sectionLabel);

   if (si) {
      if (si->lineNr != -1) {
         warn(yyFileName, yyLineNr, "multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)", 
                  g_sectionLabel.data(), si->fileName.data(),si->lineNr);

      } else {
         warn(yyFileName, yyLineNr, "multiple use of section label '%s' while adding section, (first occurrence: %s)", 
                  g_sectionLabel.data(), si->fileName.data());
      }

   } else {
      // create a new section element
      QString text = QString::fromUtf8(commentscanYYtext); 

      g_sectionTitle += text.trimmed();

      si = QSharedPointer<SectionInfo>(new SectionInfo(yyFileName, yyLineNr, g_sectionLabel,
                           g_sectionTitle, sectionLevelToType(g_sectionLevel), g_sectionLevel));

      // add section to this entry
      current->anchors->append(*si);

      // add section to the global dictionary
      Doxy_Globals::sectionDict->insert(g_sectionLabel, si);
   }
}

static void addCite()
{
   QString text = QString::fromUtf8(commentscanYYtext); 
   Doxy_Globals::citeDict->insert(text);
}

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QString &s)
{
   uint len = s.length();

   int i = len - 1;
   QChar c;

   while (i >= 0 && ((c = s.at(i)) == ' ' || c == '\t' || c == '\r')) {
      i--;
   }

   if (i != len - 1) {
      // string up to and including char at pos i and \0 terminator
      s.resize(i + 2); 
   }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
   bool xrefAppendToPrev = xrefAppendFlag;

   // determine append flag for the next item (i.e. the end of this item)
   xrefAppendFlag = ! inBody &&
                    inContext == OutputXRef && ctx == OutputXRef && // two consecutive xref items
                    newXRefKind == xrefKind &&                  // of the same kind
                    (xrefKind != XRef_Item ||
                     newXRefItemKey == xrefItemKey);            // with the same key if \xrefitem
   
   
   if (inContext == OutputXRef) { 

      // end of XRef section => add the item
      // See if we can append this new xref item to the previous one.
      // We know this at the start of the next item of the same
      // type and need to remember this until the end of that item.

      switch (xrefKind) {
         case XRef_Todo:
            addXRefItem("todo", theTranslator->trTodo(), theTranslator->trTodoList(), xrefAppendToPrev);
            break;

         case XRef_Test:
            addXRefItem("test", theTranslator->trTest(), theTranslator->trTestList(), xrefAppendToPrev);
            break;

         case XRef_Bug:
            addXRefItem("bug", theTranslator->trBug(), theTranslator->trBugList(), xrefAppendToPrev);
            break;

         case XRef_Deprecated:
            addXRefItem("deprecated", theTranslator->trDeprecated(), theTranslator->trDeprecatedList(), xrefAppendToPrev);
            break;

         case XRef_Item:  // user defined list
            addXRefItem(xrefItemKey, xrefItemTitle, xrefListTitle, xrefAppendToPrev);
            break;

         case XRef_None:
            assert(0);
            break;
      }
   }
   xrefItemKey = newXRefItemKey;

   int oldContext = inContext;
   inContext = ctx;

   if (inContext != OutputXRef && inBody) {
      inContext = OutputInbody;
   }

   switch (inContext) {
      case OutputDoc:
         if (oldContext != inContext) {
            stripTrailingWhiteSpace(current->doc);

            if (current->docFile.isEmpty()) {
               current->docFile = yyFileName;
               current->docLine = yyLineNr;
            }
         }
         pOutputString = &current->doc;
         break;

      case OutputBrief:
         if (oldContext != inContext) {
            if (current->briefFile.isEmpty()) {
               current->briefFile = yyFileName;
               current->briefLine = yyLineNr;
            }
         }

         if (current->brief.trimmed().isEmpty())  {
            // we only want one brief
            // description even if multiple are given
         
            pOutputString = &current->brief;

         } else {
            pOutputString = &current->doc;
            inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
         }
         break;

      case OutputXRef:
         pOutputString = &outputXRef;
         // first item found, so can't append to previous
         //xrefAppendFlag = FALSE;
         break;

      case OutputInbody:
         pOutputString = &current->inbodyDocs;
         break;
   }

}

// add a string to the output
static inline void addOutput(const QString &s)
{   
   *pOutputString += s;
}

static inline void addOutput(QChar s)
{   
   *pOutputString += s;
}

static void endBrief(bool addToOutput = true)
{
   if (! current->brief.trimmed().isEmpty()) {
      // only go to the detailed description if we have
      // found some brief description and not just whitespace

      briefEndsAtDot = FALSE;
      setOutput(OutputDoc);

      if (addToOutput) {
         QString text = QString::fromUtf8(commentscanYYtext); 
         addOutput(text);
      }
   }
}

static void handleGuard(const QString &expr);

#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition = 0;

static int yyread(char *buf, int max_size)
{
   prevPosition = inputPosition;
   int c = 0;

   while (inputString[inputPosition] != 0) {

      QString tmp1    = inputString.at(inputPosition);
      QByteArray tmp2 = tmp1.toUtf8();

      if (c + tmp2.length() >= max_size)  {
         // buffer is full
         break;
      }

      c += tmp2.length();     
   
      for (auto letters : tmp2) {
         *buf = letters;
          buf++;
      }

      inputPosition++;     
   }

   return c;
}

/* start command character */
/* comment parsing states. */

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38
#define CiteLabel 39
#define CopyDoc 40
#define GuardExpr 41

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE *in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE *out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

static void yyunput (int c, char *buf_ptr  );

#ifndef yytext_ptr
static void yy_flex_strncpy (char *, yyconst char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char *);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\
 
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL {
   yy_state_type yy_current_state;
   char *yy_cp, *yy_bp;
   int yy_act;

   if ( !(yy_init) )
   {
      (yy_init) = 1;

#ifdef YY_USER_INIT
      YY_USER_INIT;
#endif

      /* Create the reject buffer large enough to save one state per allowed character. */
      if ( ! (yy_state_buf) ) {
         (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
      }
      if ( ! (yy_state_buf) ) {
         YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );
      }

      if ( ! (yy_start) ) {
         (yy_start) = 1;   /* first start state */
      }

      if ( ! commentscanYYin ) {
         commentscanYYin = stdin;
      }

      if ( ! commentscanYYout ) {
         commentscanYYout = stdout;
      }

      if ( ! YY_CURRENT_BUFFER ) {
         commentscanYYensure_buffer_stack ();
         YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin, YY_BUF_SIZE );
      }

      commentscanYY_load_buffer_state( );
   }

   while ( 1 )		/* loops until end-of-file is reached */
   {
      yy_cp = (yy_c_buf_p);

      /* Support of commentscanYYtext. */
      *yy_cp = (yy_hold_char);

      /* yy_bp points to the position in yy_ch_buf of the start of
       * the current run.
       */
      yy_bp = yy_cp;

      yy_current_state = (yy_start);
      yy_current_state += YY_AT_BOL();

      (yy_state_ptr) = (yy_state_buf);
      *(yy_state_ptr)++ = yy_current_state;

   yy_match:
      do {
         register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
         while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state ) {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 1179 ) {
               yy_c = yy_meta[(unsigned int) yy_c];
            }
         }
         yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
         *(yy_state_ptr)++ = yy_current_state;
         ++yy_cp;
      } while ( yy_base[yy_current_state] != 9818 );

   yy_find_action:
      yy_current_state = *--(yy_state_ptr);
      (yy_lp) = yy_accept[yy_current_state];

   find_rule: /* we branch to this label when backing up */
      for ( ; ; ) { /* until we find what rule we matched */
         if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] ) {
            yy_act = yy_acclist[(yy_lp)];
            if ( yy_act & YY_TRAILING_HEAD_MASK ||
                  (yy_looking_for_trail_begin) ) {
               if ( yy_act == (yy_looking_for_trail_begin) ) {
                  (yy_looking_for_trail_begin) = 0;
                  yy_act &= ~YY_TRAILING_HEAD_MASK;
                  break;
               }
            } else if ( yy_act & YY_TRAILING_MASK ) {
               (yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
               (yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
               (yy_full_match) = yy_cp;
               (yy_full_state) = (yy_state_ptr);
               (yy_full_lp) = (yy_lp);
            } else {
               (yy_full_match) = yy_cp;
               (yy_full_state) = (yy_state_ptr);
               (yy_full_lp) = (yy_lp);
               break;
            }
            ++(yy_lp);
            goto find_rule;
         }
         --yy_cp;
         yy_current_state = *--(yy_state_ptr);
         (yy_lp) = yy_accept[yy_current_state];
      }

      YY_DO_BEFORE_ACTION;

   do_action:	/* This label is used only to access EOF actions. */

      switch ( yy_act ) {
         /* beginning of action switch */
         case 1:
            YY_RULE_SETUP

            {
               // escaped command
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 2:
            YY_RULE_SETUP

            {
               // escaped command
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 3:
            YY_RULE_SETUP

            {
               // mail address
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 4:
            YY_RULE_SETUP

            {
               // quoted text
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 5:
            YY_RULE_SETUP

            {
               // directory (or chain of commands!)
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 6:
            /* rule 6 can match eol */
            YY_RULE_SETUP

            {
               // xref command
               if (inContext != OutputXRef)
               {
                  briefEndsAtDot = FALSE;
                  setOutput(OutputDoc);
               }
               // continue with the same input
               REJECT;
            }
            YY_BREAK
         /*
         <Comment>{DETAILEDCMD}/[^a-z_A-Z]*	
                     { // command that can end a brief description
         				briefEndsAtDot=FALSE;
         				setOutput(OutputDoc);
         				// continue with the same input
                     REJECT;
         				}
            */
         case 7:
            YY_RULE_SETUP

            {
               // HTML command that ends a brief description
               setOutput(OutputDoc);
               // continue with the same input
               REJECT;
            }
            YY_BREAK
         case 8:
            YY_RULE_SETUP

            {
               // HTML command that ends a brief description
               if (current->lang == SrcLangExt_CSharp)
               {
                  setOutput(OutputDoc);
               }
               // continue with the same input
               REJECT;
            }
            YY_BREAK
         case 9:
            YY_RULE_SETUP

            {
               // start of a .NET XML style brief description
               QString text = QString::fromUtf8(commentscanYYtext); 
               setOutput(OutputBrief);
               addOutput(text);
            }
            YY_BREAK
         case 10:
            YY_RULE_SETUP

            {
               // start of a .NET XML style detailed description
               QString text = QString::fromUtf8(commentscanYYtext); 
               setOutput(OutputDoc);
               addOutput(text);
            }
            YY_BREAK
         case 11:
            YY_RULE_SETUP

            {
               // start of a .NET XML style detailed description
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
               setOutput(OutputDoc);
            }
            YY_BREAK
         case 12:
            YY_RULE_SETUP

            {
               // end of a brief or detailed description
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 13:
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext); 
               insidePre = TRUE;
               addOutput(text);
            }
            YY_BREAK
         case 14:
            YY_RULE_SETUP

            {
               insidePre = FALSE;
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 15:
            YY_RULE_SETUP

            {
               // RCS tag which end a brief description
               setOutput(OutputDoc);
               REJECT;
            }
            YY_BREAK
         case 16:
            YY_RULE_SETUP

            {
               BEGIN(HtmlComment);
            }
            YY_BREAK
         case 17:
            YY_RULE_SETUP

            {
               addOutput("\\endinternal ");
               if (!inInternalDocs) {
                  warn(yyFileName, yyLineNr, "found \\endinternal without matching \\internal");
               }
               inInternalDocs = FALSE;
            }
            YY_BREAK

         case 18:
            YY_RULE_SETUP

            {
               // potentially interesting command
               // the {B}* in the front was added for bug620924

               QString text = QString::fromUtf8(commentscanYYtext); 

               QString cmdName = text.trimmed().mid(1); 
               DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);

               if (cmdPtr) {
                  // special action is required
               
                  int i = 0;
                  while (text[i] == ' ' || text[i] == '\t') {
                     i++;
                  }

                  g_spaceBeforeCmd = QString(text).left(i);

                  if (cmdPtr->endsBrief && inContext != OutputXRef) {
                     briefEndsAtDot = FALSE;
                     // this command forces the end of brief description
                     setOutput(OutputDoc);
                  }

                  if (cmdPtr->func && cmdPtr->func(cmdName)) {
                     // implicit split of the comment block into two entries. Restart the next
                     // block at the start of this command.
                     parseMore = TRUE;

                     // this is probably not very portable across lex implementations,
                     // but we need to know the position in the input buffer where this rule matched.
                     // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE

#if YY_FLEX_MINOR_VERSION >= 5 && YY_FLEX_SUBMINOR_VERSION >= 33
                     inputPosition = prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf);
#else
                     inputPosition = prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf);
#endif
                     yyterminate();

                  } else if (cmdPtr->func == 0) {
                     // command without handler, to be processed later by parserdoc.cpp
                     addOutput(text);
                  }
               } else {
                  // command not relevant               
                  addOutput(text);
               }
            }
            YY_BREAK

         case 19:
            YY_RULE_SETUP

            {
               // escaped formula command
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 20:
            YY_RULE_SETUP
            {
               // language switch command
               QString text = QString::fromUtf8(commentscanYYtext); 

               QString langId = text.trimmed().mid(2);

               if (! langId.isEmpty() && Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) != 0) {               
                  // enable language specific section
                  BEGIN(SkipLang);
               }
            }
            YY_BREAK
         case 21:
            YY_RULE_SETUP

            {
               // start of a formula with custom environment
               QString text = QString::fromUtf8(commentscanYYtext); 

               formulaText = "\\begin";
               formulaEnv = text.trimmed().mid(2);

               if (formulaEnv.at(formulaEnv.length() - 1) == '{') {
               
                  // remove trailing open brace
                  formulaEnv = formulaEnv.left(formulaEnv.length() - 1);
               }
               formulaText += formulaEnv;
               formulaNewLines = 0;
               BEGIN(ReadFormulaLong);
            }
            YY_BREAK
         case 22:
            YY_RULE_SETUP

            {
               // start of a inline formula
               formulaText = "$";
               formulaNewLines = 0;
               BEGIN(ReadFormulaShort);
            }
            YY_BREAK
         case 23:
            YY_RULE_SETUP

            {
               // start of a block formula
               formulaText = "\\[";
               formulaNewLines = 0;
               BEGIN(ReadFormulaLong);
            }
            YY_BREAK
         case 24:
            YY_RULE_SETUP

            {
               // begin of a group
               //langParser->handleGroupStartCommand(g_memberGroupHeader);
               openGroup(current, yyFileName, yyLineNr);
            }
            YY_BREAK

         case 25:
            YY_RULE_SETUP

            {
               // end of a group
               //langParser->handleGroupEndCommand();
               closeGroup(current, yyFileName, yyLineNr, TRUE);
               g_memberGroupHeader.resize(0);
               parseMore = TRUE;
               needNewEntry = TRUE;

               QString text = QString::fromUtf8(commentscanYYtext); 

#if YY_FLEX_MINOR_VERSION >= 5 && YY_FLEX_SUBMINOR_VERSION >= 33
               inputPosition = prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf) + text.length();
#else
               inputPosition = prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf) + text.length();
#endif
               yyterminate();
            }
            YY_BREAK
         case 26:
            YY_RULE_SETUP

            {
               // escaped character
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 27:
            YY_RULE_SETUP

            {
               // normal word
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 28:
            /* rule 28 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               // explicit end autolist: e.g "  ."
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 29:

         case 30:
            YY_RULE_SETUP

            {
               // start of autolist
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (! Doxy_Globals::markdownSupport)
               {
                  REJECT;
               } else
               {
                  if (inContext != OutputXRef)
                  {
                     briefEndsAtDot = FALSE;
                     setOutput(OutputDoc);
                  }
                  addOutput(text);
               }
            }
            YY_BREAK
         case 31:
            YY_RULE_SETUP

            {
               // start of autolist
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (inContext != OutputXRef)
               {
                  briefEndsAtDot = FALSE;
                  setOutput(OutputDoc);
               }
               addOutput(text);
            }
            YY_BREAK
         case 32:
            /* rule 32 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               // horizontal line (dashed)
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 33:
            YY_RULE_SETUP

            {
               // escaped mdash
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 34:
            YY_RULE_SETUP

            {
               // escaped mdash
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK

         case 35:
            YY_RULE_SETUP

            {
               // mdash
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&mdash;");
            }

            YY_BREAK
         case 36:
            YY_RULE_SETUP

            {
               // ndash
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&ndash;");
            }
            YY_BREAK
         case 37:
            YY_RULE_SETUP

            {
               // numbered item
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 38:
            YY_RULE_SETUP

            {
               // . at start or in the middle of a word, or ellipsis
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 39:
            YY_RULE_SETUP

            {
               // . with escaped space.
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text[0]);
               addOutput(text[2]);
            }
            YY_BREAK
         case 40:
            YY_RULE_SETUP

            {
               // . with comma such as "e.g.,"
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 41:
            YY_RULE_SETUP

            {
               // ellipsis with escaped space.
               addOutput("... ");
            }
            YY_BREAK
         case 42:
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               // internal ellipsis
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK

         case 43:
            /* rule 43 can match eol */
            YY_RULE_SETUP

            {
               // at least one blank line (or blank line command)
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (inContext == OutputXRef) {

                  // see bug 613024, we need to put the newlines after ending the XRef section.
                  if (! g_insideParBlock) {
                     setOutput(OutputDoc);
                  }

                  int i;
                  for (i = 0; i < commentscanYYleng;) {
                     if (text[i] == '\n') {
                        addOutput('\n');
                        i++;

                     } else if (text.mid(i) == "\\_linebr") {
                        addOutput('\n');
                        i += 8;

                     } else {
                        i++;
                     }
                  }

               } else if (inContext != OutputBrief) {

                  int i;
                  for (i = 0; i < commentscanYYleng;) {
                     if (text[i] == '\n') {
                        addOutput('\n');
                        i++;

                     } else if (text.mid(i) == "\\_linebr") {
                        addOutput('\n');
                        i += 8;

                     } else {
                        i++;
                     }
                  }
                  setOutput(OutputDoc);

               } else  {
                  // inContext==OutputBrief

                  // only go to the detailed description if we have
                  // found some brief description and not just whitespace
                  endBrief(FALSE);
               }
               lineCount();
            }
            YY_BREAK

         case 44:
            YY_RULE_SETUP

            {
               // potential end of a JavaDoc style comment
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text[0]);

               if (briefEndsAtDot) {
                  setOutput(OutputDoc);
                  briefEndsAtDot = FALSE;
               }
            }
            YY_BREAK
         case 45:
            /* rule 45 can match eol */
            YY_RULE_SETUP

            {
               // newline
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text[0]);
               yyLineNr++;
            }
            YY_BREAK
         case 46:
            YY_RULE_SETUP

            {
               // catch-all for anything else
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text[0]);
            }
            YY_BREAK

         // Rules for handling HTML comments
         case 47:
            YY_RULE_SETUP

            { BEGIN( Comment ); }
            YY_BREAK

         case 48:
            /* rule 48 can match eol */
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (text[0] == '\n') {
                  yyLineNr++;
               }
            }
            YY_BREAK
         case 49:
            YY_RULE_SETUP

            {
               // ignore unimportant characters
            }
            YY_BREAK
         case 50:
            YY_RULE_SETUP

            {
               // ignore every else
            }
            YY_BREAK

         // Rules for handling formulas
         case 51:
            YY_RULE_SETUP

            {
               // end of inline formula
               formulaText += "$";
               addOutput(" " + addFormula());
               BEGIN(Comment);
            }
            YY_BREAK
         case 52:
            YY_RULE_SETUP

            {
               // end of block formula
               formulaText += "\\]";
               addOutput(" " + addFormula());
               BEGIN(Comment);
            }
            YY_BREAK
         case 53:
            YY_RULE_SETUP

            {
               // end of custom env formula
               formulaText += "\\end";
               formulaText += formulaEnv;
               addOutput(" " + addFormula());
               BEGIN(Comment);
            }
            YY_BREAK
         case 54:
            YY_RULE_SETUP

            {
               // any non-special character
               QString text = QString::fromUtf8(commentscanYYtext); 
               formulaText += text;
            }
            YY_BREAK
         case 55:
            /* rule 55 can match eol */
            YY_RULE_SETUP

            {
               // new line
               QString text = QString::fromUtf8(commentscanYYtext); 

               formulaNewLines++;
               formulaText += text[0];
               yyLineNr++;
            }
            YY_BREAK
         case 56:
            YY_RULE_SETUP

            {
               // any othe character
               QString text = QString::fromUtf8(commentscanYYtext); 
               formulaText += text[0];
            }

            YY_BREAK

         //  handle argument of enum command
         case 57:
            /* rule 57 can match eol */
            YY_RULE_SETUP

            {
               // handle argument
               current->name = QString::fromUtf8(commentscanYYtext); 
               BEGIN( Comment );
            }
            YY_BREAK
         case 58:
            /* rule 58 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 59:
            /* rule 59 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 

               warn(yyFileName, yyLineNr, "missing argument after \\enum.");

               addOutput('\n');
               if (text[0] == '\n') {
                  yyLineNr++;
               }
               BEGIN( Comment );
            }
            YY_BREAK
         case 60:
            YY_RULE_SETUP

            {
               // ignore other stuff
            }
            YY_BREAK

         // handle argument of namespace command
         case 61:
            /* rule 61 can match eol */
            YY_RULE_SETUP

            {
               // handle argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               current->name = substitute(text, ".", "::");
               BEGIN( Comment );
            }
            YY_BREAK
         case 62:
            /* rule 62 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 63:
            /* rule 63 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               warn(yyFileName, yyLineNr, "missing argument after \\namespace.");

               addOutput('\n');
               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
               BEGIN( Comment );
            }
            YY_BREAK
         case 64:
            YY_RULE_SETUP

            {
               // ignore other stuff
            }
            YY_BREAK

         /* ------------ handle argument of package command --------------- */
         case 65:
            YY_RULE_SETUP

            {
               // handle argument
               current->name = QString::fromUtf8(commentscanYYtext); ;
               BEGIN( Comment );
            }
            YY_BREAK
         case 66:
            /* rule 66 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 67:
            /* rule 67 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 

               warn(yyFileName, yyLineNr, "missing argument after \\package.");
               addOutput('\n');

               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
               BEGIN( Comment );
            }
            YY_BREAK
         case 68:
            YY_RULE_SETUP

            {
               // ignore other stuff
            }
            YY_BREAK

         /* ------ handle argument of class/struct/union command --------------- */
         case 69:
            /* rule 69 can match eol */
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext); 
               current->name = substitute(removeRedundantWhiteSpace(text), ".", "::");
               BEGIN( ClassDocArg2 );
            }
            YY_BREAK
         case 70:
            /* rule 70 can match eol */
            YY_RULE_SETUP

            {
               // first argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               current->name = substitute(text, ".", "::");

               if (current->section == Entry::PROTOCOLDOC_SEC)
               {
                  current->name += "-p";
               }
               // prepend outer scope name
               BEGIN( ClassDocArg2 );
            }
            YY_BREAK
         case 71:
            /* rule 71 can match eol */
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext); 
               current->name = substitute(text, ".", "::");
               BEGIN( ClassDocArg2 );
            }
            YY_BREAK
         case 72:
            /* rule 72 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 73:
            /* rule 73 can match eol */
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext); 

               warn(yyFileName, yyLineNr, "missing argument after \\%s.", 
                     YY_START == ClassDocArg1 ? "class" : "category" );

               addOutput('\n');

               if (text[0] == '\n') {
                  yyLineNr++;
               }
               BEGIN( Comment );
            }
            YY_BREAK
         case 74:
            YY_RULE_SETUP

            {
               // ignore other stuff
            }
            YY_BREAK
         case 75:
            YY_RULE_SETUP

            {
               // second argument; include file
               current->includeFile = QString::fromUtf8(commentscanYYtext); ;

               BEGIN( ClassDocArg3 );
            }
            YY_BREAK
         case 76:
            /* rule 76 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 77:
            /* rule 77 can match eol */
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext); 

               addOutput('\n');
               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
               BEGIN( Comment );
            }
            YY_BREAK
         case 78:
            YY_RULE_SETUP

            {
               // ignore other stuff
            }
            YY_BREAK
         case 79:
            YY_RULE_SETUP

            {
               // third argument; include file name
               current->includeName = QString::fromUtf8(commentscanYYtext); ;
               BEGIN( Comment );
            }
            YY_BREAK
         case 80:
            /* rule 80 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 81:
            /* rule 81 can match eol */
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (text[0] == '\n') {
                  yyLineNr++;
               }
               BEGIN( Comment );
            }
            YY_BREAK
         case 82:
            YY_RULE_SETUP

            {
               // ignore other stuff
            }
            YY_BREAK

         /* --------- handle arguments of {def,add,weak}group commands --------- */
         case 83:
            YY_RULE_SETUP

            {
               // group name
               current->name = QString::fromUtf8(commentscanYYtext); ;

               if (current->name.right(5) == ".html")
               {
                  current->name = current->name.left(current->name.length() - 5);
               }
               current->type.resize(0);
               BEGIN(GroupDocArg2);
            }
            YY_BREAK
         case 84:
            /* rule 84 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 85:
            /* rule 85 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               warn(yyFileName, yyLineNr, "missing group name after %s", current->groupDocCmd() );

               addOutput('\n');
               if (text[0] == '\n') {
                  yyLineNr++;
               }
               BEGIN( Comment );
            }
            YY_BREAK
         case 86:
            /* rule 86 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 87:
            YY_RULE_SETUP

            {
               // title (stored in type)
               current->type += QString::fromUtf8(commentscanYYtext).trimmed(); 
            }
            YY_BREAK
         case 88:
            /* rule 88 can match eol */
            YY_RULE_SETUP

            {
               if ( current->groupDocType == Entry::GROUPDOC_NORMAL && current->type.isEmpty()) {
                  // defgroup requires second argument               
                  warn(yyFileName, yyLineNr, "missing title after \\defgroup %s", qPrintable(current->name) );
               }

               if (*commentscanYYtext == '\n') {
                  yyLineNr++;
               }

               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK
         /* --------- handle arguments of page/mainpage command ------------------- */
         case 89:
            YY_RULE_SETUP

            {
               // first argument; page name
               QString text = QString::fromUtf8(commentscanYYtext); 
               current->name = stripQuotes(text);
               BEGIN( PageDocArg2 );
            }
            YY_BREAK
         case 90:
            /* rule 90 can match eol */
            YY_RULE_SETUP

            {
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 91:
            /* rule 91 can match eol */
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext); 
               warn(yyFileName, yyLineNr, "missing argument after \\page.");

               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK
         case 92:
            YY_RULE_SETUP

            {
               // ignore other stuff
            }
            YY_BREAK
         case 93:
            /* rule 93 can match eol */
            YY_RULE_SETUP

            {
               // second argument; page title
               yyLineNr++;
               current->args = QString::fromUtf8(commentscanYYtext); ;
               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK

         /* --------- handle arguments of the file/dir/example command ------------ */
         case 94:
            /* rule 94 can match eol */
            YY_RULE_SETUP

            {
               // no file name specfied
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK
         case 95:
            YY_RULE_SETUP

            {
               // first argument; name
               QString text = QString::fromUtf8(commentscanYYtext); 
               current->name = stripQuotes(text);
               BEGIN( Comment );
            }
            YY_BREAK
         case 96:
            /* rule 96 can match eol */
            YY_RULE_SETUP

            {
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 97:
            YY_RULE_SETUP

            {
               // ignore other stuff
            }
            YY_BREAK

         /* --------- handle arguments of the xrefitem command ------------ */
         case 98:
            YY_RULE_SETUP

            {
               // first argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               newXRefItemKey = text;

               setOutput(OutputXRef);
               BEGIN(XRefItemParam2);
            }
            YY_BREAK
         case 99:
            /* rule 99 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 100:
            /* rule 100 can match eol */
            YY_RULE_SETUP

            {
               // missing arguments
               QString text = QString::fromUtf8(commentscanYYtext); 
               warn(yyFileName, yyLineNr, "Missing first argument of \\xrefitem");

               if (text[0] == '\n') {
                  yyLineNr++;
               }
               addOutput('\n');
               inContext = OutputDoc;
               BEGIN( Comment );
            }
            YY_BREAK
         case 101:
            YY_RULE_SETUP

            {
               // ignore other stuff
            }
            YY_BREAK
         case 102:
            YY_RULE_SETUP

            {
               // second argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               xrefItemTitle = stripQuotes(text);
               BEGIN(XRefItemParam3);
            }
            YY_BREAK
         case 103:
            /* rule 103 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 104:
            /* rule 104 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               warn(yyFileName, yyLineNr, "Missing second argument of \\xrefitem");

               if (text[0] == '\n')
               {
                  yyLineNr++;
               }

               addOutput('\n');
               inContext = OutputDoc;
               BEGIN( Comment );
            }
            YY_BREAK
         case 105:
            YY_RULE_SETUP

            {
               // ignore other stuff
            }
            YY_BREAK
         case 106:
            YY_RULE_SETUP

            {
               // third argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               xrefListTitle = stripQuotes(text);
               xrefKind = XRef_Item;
               BEGIN( Comment );
            }
            YY_BREAK
         case 107:
            /* rule 107 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 108:
            /* rule 108 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               warn(yyFileName, yyLineNr,"Missing third argument of \\xrefitem");

               if (text[0] == '\n') {
                  yyLineNr++;
               }

               addOutput('\n');
               inContext = OutputDoc;
               BEGIN( Comment );
            }
            YY_BREAK
         case 109:
            YY_RULE_SETUP

            {
               // ignore other stuff
            }
            YY_BREAK
         /* ----- handle arguments of the relates(also)/memberof command ------- */
         case 110:
            YY_RULE_SETUP

            {
               // argument
               current->relates = QString::fromUtf8(commentscanYYtext);
               BEGIN( Comment );
            }
            YY_BREAK
         case 111:
            /* rule 111 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 112:
            /* rule 112 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               warn(yyFileName, yyLineNr, "Missing argument of \\relates or \\memberof command");

               if (text[0] == '\n') {
                  yyLineNr++;
               }
               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK
         case 113:
            YY_RULE_SETUP

            {
               // ignore other stuff
            }
            YY_BREAK

         /* ----- handle arguments of the relates(also)/addindex commands ----- */
         case 114:
            /* rule 114 can match eol */
            YY_RULE_SETUP

            {
               // end of argument
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (text[0] == '\n') {
                  yyLineNr++;
               }
               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK
         case 115:
            /* rule 115 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 116:
            YY_RULE_SETUP

            {
               // ignore other stuff
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text[0]);
            }
            YY_BREAK

         /* ----- handle arguments of the section/subsection/.. commands ------- */
         case 117:
            YY_RULE_SETUP

            {
               // first argyment
               QString text = QString::fromUtf8(commentscanYYtext); 
               g_sectionLabel = text;
               addOutput(text);
               g_sectionTitle.resize(0);
               BEGIN(SectionTitle);
            }
            YY_BREAK
         case 118:
            /* rule 118 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               warn(yyFileName, yyLineNr, "\\section command has no label");

               if (text[0] == '\n') {
                  yyLineNr++;
               }
               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK
         case 119:
            YY_RULE_SETUP

            {
               // invalid character for section label
               warn(yyFileName, yyLineNr, "Invalid or missing section label" );
               BEGIN(Comment);
            }
            YY_BREAK
         case 120:
            /* rule 120 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               // end of section title
               QString text = QString::fromUtf8(commentscanYYtext); 
               addSection();
               addOutput(text);
               BEGIN( Comment );
            }
            YY_BREAK
         case 121:
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp -= 8;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               // end of section title
               QString text = QString::fromUtf8(commentscanYYtext); 
               addSection();
               addOutput(text);
               BEGIN( Comment );
            }
            YY_BREAK
         case 122:
            /* rule 122 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 123:
            YY_RULE_SETUP

            {
               // any character without special meaning
               QString text = QString::fromUtf8(commentscanYYtext); 
               g_sectionTitle += text;
               addOutput(text);
            }
            YY_BREAK
         case 124:
            YY_RULE_SETUP

            {
               // unescape escaped command
               QString text = QString::fromUtf8(commentscanYYtext); 
               g_sectionTitle += text.mid(1);
               addOutput(text);
            }
            YY_BREAK
         case 125:
            YY_RULE_SETUP

            {
               // unescape escaped character
               QString text = QString::fromUtf8(commentscanYYtext); 
               g_sectionTitle += text[1];
               addOutput(text);
            }
            YY_BREAK
         case 126:
            YY_RULE_SETUP

            {
               // anything else
               QString text = QString::fromUtf8(commentscanYYtext); 
               g_sectionTitle += text;
               addOutput(text[0]);
            }
            YY_BREAK

         /* ----- handle arguments of the subpage command ------- */
         case 127:
            YY_RULE_SETUP

            {
               // first argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);

               // we add subpage labels as a kind of "inheritance" relation to prevent
               // needing to add another list to the Entry class.
               current->extends.append(BaseInfo(text, Public, Normal));
               BEGIN(SubpageTitle);
            }
            YY_BREAK

         case 128:
            /* rule 128 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               warn(yyFileName, yyLineNr, "\\subpage command has no label");

               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK

         case 129:
            /* rule 129 can match eol */
            YY_RULE_SETUP

            {
               // no title, end command
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
               BEGIN( Comment );
            }
            YY_BREAK
         case 130:
            YY_RULE_SETUP

            {
               // add title, end of command
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
               BEGIN( Comment );
            }
            YY_BREAK
         case 131:
            YY_RULE_SETUP

            {
               // no title, end of command              
               unput(commentscanYYtext[0]);
               BEGIN( Comment );
            }
            YY_BREAK

         // handle arguments of the anchor command 
         case 132:
            YY_RULE_SETUP

            {
               // found argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict->find(text); 

               if (si) {
                  if (si->lineNr != -1) {
                     warn(yyFileName, yyLineNr, "multiple use of section label '%s' while adding anchor, (first occurrence: %s, line %d)", 
                           qPrintable(text), qPrintable(si->fileName), si->lineNr);
                  } else {
                     warn(yyFileName, yyLineNr, "multiple use of section label '%s' while adding anchor, (first occurrence: %s)", 
                           qPrintable(text), qPrintable(si->fileName));
                  }

               } else {
                  si = QSharedPointer<SectionInfo>(new SectionInfo(yyFileName, yyLineNr, text, 0, SectionInfo::Anchor, 0));

                  Doxy_Globals::sectionDict->insert(text, si);
                  current->anchors->append(*si);
               }

               addOutput(text);
               BEGIN( Comment );
            }
            YY_BREAK

         case 133:
            /* rule 133 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 

               warn(yyFileName, yyLineNr, "\\anchor command has no label");

               if (text[0] == '\n') {
                  yyLineNr++;
               }

               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK

         case 134:
            YY_RULE_SETUP

            {
               // invalid character for anchor label
               warn(yyFileName, yyLineNr, "Invalid or missing anchor label");
               BEGIN(Comment);
            }
            YY_BREAK

         /* ----- handle arguments of the preformatted block commands ------- */
         case 135:
            /* rule 135 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               // possible ends
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);

               if (text.mid(4) == blockName)  {
                  // found end of the block               
                  BEGIN(Comment);
               }
            }
            YY_BREAK
         case 136:
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);

               if (blockName == "startuml") // found end of the block
               {
                  BEGIN(Comment);
               }
            }
            YY_BREAK
         case 137:
            YY_RULE_SETUP

            {
               // some word
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
            }
            YY_BREAK
         case 138:
            /* rule 138 can match eol */
            YY_RULE_SETUP

            {
               // new line
               QString text = QString::fromUtf8(commentscanYYtext); 
               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
               addOutput('\n');
            }
            YY_BREAK
         case 139:
            YY_RULE_SETUP

            {
               // start of a C-comment
               QString text = QString::fromUtf8(commentscanYYtext); 
               g_commentCount++;
               addOutput(text);
            }
            YY_BREAK

         case 140:
            YY_RULE_SETUP

            {
               // end of a C-comment
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text);
               g_commentCount--;

               if (g_commentCount < 0 && blockName != "verbatim") {
                  warn(yyFileName, yyLineNr, "Found */ without matching /* while inside a \\%s block. "
                     "Perhaps there is a missing \\end%s?\n", qPrintable(blockName), qPrintable(blockName));  // syntax cleanup */
               }
            }
            YY_BREAK

         case 141:
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text[0]);
            }
            YY_BREAK

         case YY_STATE_EOF(FormatBlock):

         {
            QString endTag = "@end" + blockName;
            if (blockName == "startuml") {
               endTag = "enduml";
            }

            warn(yyFileName, yyLineNr, "Reached end of comment while inside a @%s block; check for missing @%s tag",
                 qPrintable(blockName), qPrintable(endTag) );
            yyterminate();
         }
         YY_BREAK

         /* ----- handle arguments of if/ifnot commands ------- */
         case 142:
            YY_RULE_SETUP

            {
               g_guardExpr = QString::fromUtf8(commentscanYYtext);
               g_roundCount = 1;
               BEGIN(GuardExpr);
            }
            YY_BREAK

         case 143:
            /* rule 143 can match eol */
            YY_RULE_SETUP

            {
               g_guardExpr += QString::fromUtf8(commentscanYYtext); 
            }
            YY_BREAK
         case 144:
            YY_RULE_SETUP

            {
               g_guardExpr += QString::fromUtf8(commentscanYYtext); 
               g_roundCount++;
            }
            YY_BREAK
         case 145:
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext); 
               g_guardExpr += text;
               g_roundCount--;

               if (g_roundCount == 0) {
                  handleGuard(g_guardExpr);
               }
            }
            YY_BREAK

         case 146:
            /* rule 146 can match eol */
            YY_RULE_SETUP

            {
               warn(yyFileName, yyLineNr, "invalid expression '%s' for guard", qPrintable(g_guardExpr));
               unput(commentscanYYtext[0]);
               BEGIN(GuardParam);
            }
            YY_BREAK

         case 147:
            YY_RULE_SETUP

            {
               // parameter of if/ifnot guard
               QString text = QString::fromUtf8(commentscanYYtext); 
               handleGuard(text);
            }
            YY_BREAK

         case 148:
            /* rule 148 can match eol */
            YY_RULE_SETUP

            {
               // end of argument
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (text[0] == '\n') {
                  yyLineNr++;
               }

               //next line is commented out due to bug620924
               //addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK
         case 149:
            /* rule 149 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 150:
            YY_RULE_SETUP

            {
               // ignore other stuff
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text[0]);
            }
            YY_BREAK
         case 151:
            /* rule 151 can match eol */
            YY_RULE_SETUP

            {
               g_spaceBeforeIf.resize(0);
               BEGIN(Comment);
            }
            YY_BREAK
         case 152:
            YY_RULE_SETUP

            {
               if (!g_spaceBeforeIf.isEmpty()) // needed for 665313 in combation with bug620924
               {
                  addOutput(g_spaceBeforeIf);
               }
               g_spaceBeforeIf.resize(0);
               BEGIN(Comment);
            }
            YY_BREAK
         case 153:
            YY_RULE_SETUP

            {
               unput(commentscanYYtext[0]);
               BEGIN(Comment);
            }
            YY_BREAK

         /* ----- handle skipping of conditional sections ------- */
         case 154:
            /* rule 154 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               guardType = Guard_IfNot;
               BEGIN( GuardParam );
            }
            YY_BREAK
         case 155:
            /* rule 155 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               guardType = Guard_If;
               BEGIN( GuardParam );
            }
            YY_BREAK
         case 156:
            /* rule 156 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               if (guards.isEmpty())
               {
                  warn(yyFileName, yyLineNr,
                  "found @endif without matching start command");
               } else
               {
                  GuardedSection *s = guards.pop();
                  bool parentVisible = s->parentVisible();
                  delete s;
                  if (parentVisible)
                  {
                     enabledSectionFound = TRUE;
                     BEGIN( GuardParamEnd );
                  }
               }
            }
            YY_BREAK
         case 157:
            /* rule 157 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               if (guards.isEmpty())
               {
                  warn(yyFileName, yyLineNr,
                  "found @else without matching start command");
               } else
               {
                  if (!enabledSectionFound && guards.top()->parentVisible())
                  {
                     delete guards.pop();
                     guards.push(new GuardedSection(TRUE, TRUE));
                     enabledSectionFound = TRUE;
                     BEGIN( GuardParamEnd );
                  }
               }
            }
            YY_BREAK

         case 158:
            /* rule 158 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               if (guards.isEmpty())
               {
                  warn(yyFileName, yyLineNr, "found @elseif without matching start command");
               } else
               {
                  if (!enabledSectionFound && guards.top()->parentVisible())
                  {
                     guardType = Guard_If;
                     delete guards.pop();
                     BEGIN( GuardParam );
                  }
               }
            }
            YY_BREAK
         case 159:
            /* rule 159 can match eol */
            YY_RULE_SETUP

            {
               // skip line
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
               //addOutput('\n');
            }
            YY_BREAK
         case 160:
            YY_RULE_SETUP

            {
               // skip non-special characters
            }
            YY_BREAK
         case 161:
            YY_RULE_SETUP

            {
               // any other character
            }
            YY_BREAK
         /* ----- handle skipping of internal section ------- */
         case 162:
            /* rule 162 can match eol */
            YY_RULE_SETUP

            {
               // skip line
               QString text = QString::fromUtf8(commentscanYYtext); 
               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
               addOutput('\n');
            }
            YY_BREAK
         case 163:
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp = yy_bp + 3;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               g_condCount++;
            }
            YY_BREAK
         case 164:
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp = yy_bp + 6;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               g_condCount++;
            }
            YY_BREAK
         case 165:
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp = yy_bp + 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               g_condCount--;
               if (g_condCount < 0) // handle conditional section around of \internal, see bug607743
               {
                  unput('\\');
                  BEGIN(Comment);
               }
            }
            YY_BREAK
         case 166:
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp = yy_bp + 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               if (g_sectionLevel > 0)
               {
                  unput('\\');
                  BEGIN(Comment);
               }
            }
            YY_BREAK
         case 167:
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp = yy_bp + 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               if (g_sectionLevel > 1)
               {
                  unput('\\');
                  BEGIN(Comment);
               }
            }
            YY_BREAK
         case 168:
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp = yy_bp + 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               if (g_sectionLevel > 2)
               {
                  unput('\\');
                  BEGIN(Comment);
               }
            }
            YY_BREAK
         case 169:
            *yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
            (yy_c_buf_p) = yy_cp = yy_bp + 1;
            YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
            YY_RULE_SETUP

            {
               if (g_sectionLevel > 3)
               {
                  unput('\\');
                  BEGIN(Comment);
               }
            }
            YY_BREAK
         case 170:
            YY_RULE_SETUP

            {
               addOutput("\\endinternal ");
               BEGIN(Comment);
            }
            YY_BREAK
         case 171:
            YY_RULE_SETUP

            {
               // skip non-special characters
            }
            YY_BREAK
         case 172:
            YY_RULE_SETUP

            {
               // any other character
            }
            YY_BREAK
         /* ----- handle argument of name command ------- */
         case 173:
            /* rule 173 can match eol */
            YY_RULE_SETUP

            {
               // end of argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               if (text[0] == '\n') {
                  yyLineNr++;
               }
               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK
         case 174:
            /* rule 174 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
               g_memberGroupHeader += ' ';
            }
            YY_BREAK
         case 175:
            YY_RULE_SETUP

            {
               // ignore other stuff
               QString text = QString::fromUtf8(commentscanYYtext); 
               g_memberGroupHeader += text[0];
               current->name += text[0];
            }
            YY_BREAK
         /* ----- handle argument of ingroup command ------- */
         case 176:
            YY_RULE_SETUP

            {
               // group id
               QString text = QString::fromUtf8(commentscanYYtext); 
               current->groups->append(Grouping(text, Grouping::GROUPING_INGROUP));
               inGroupParamFound = TRUE;
            }
            YY_BREAK
         case 177:
            /* rule 177 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (! inGroupParamFound)
               {
                  warn(yyFileName, yyLineNr, "Missing group name for \\ingroup command");
               }

               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK
         case 178:
            /* rule 178 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               addOutput('\n');
            }
            YY_BREAK
         case 179:
            YY_RULE_SETUP

            {
               // ignore other stuff
               QString text = QString::fromUtf8(commentscanYYtext); 
               addOutput(text[0]);
            }
            YY_BREAK

         /* ----- handle argument of fn command ------- */
         case 180:
            /* rule 180 can match eol */
            YY_RULE_SETUP

            {
               // end of argument
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (braceCount == 0)
               {
                  if (text[0] == '\n') {
                     yyLineNr++;
                  }

                  addOutput('\n');
                  langParser->parsePrototype(functionProto);
                  BEGIN( Comment );
               }
            }
            YY_BREAK
         case 181:
            /* rule 181 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               functionProto += ' ';
            }
            YY_BREAK
         case 182:
            YY_RULE_SETUP

            {
               // non-special characters
               functionProto += QString::fromUtf8(commentscanYYtext); 
            }
            YY_BREAK
         case 183:
            YY_RULE_SETUP

            {
               functionProto += QString::fromUtf8(commentscanYYtext); 
               braceCount++;
            }
            YY_BREAK
         case 184:
            YY_RULE_SETUP

            {
               functionProto += QString::fromUtf8(commentscanYYtext); 
               braceCount--;
            }
            YY_BREAK
         case 185:
            YY_RULE_SETUP

            {
               // add other stuff
               QString text = QString::fromUtf8(commentscanYYtext); 
               functionProto += text[0];
            }
            YY_BREAK

         /* ----- handle argument of overload command ------- */
         case 186:
            /* rule 186 can match eol */
            YY_RULE_SETUP

            {
               // end of argument
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
               if (functionProto.trimmed().isEmpty())
               {
                  // plain overload command
                  addOutput(theTranslator->trOverloadText());
                  addOutput('\n');

               } else // overload declaration
               {
                  makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
                  langParser->parsePrototype(functionProto);
               }
               BEGIN( Comment );
            }
            YY_BREAK
         case 187:
            /* rule 187 can match eol */
            YY_RULE_SETUP

            {
               // line continuation
               yyLineNr++;
               functionProto += ' ';
            }
            YY_BREAK
         case 188:
            YY_RULE_SETUP

            {
               // add other stuff
               QString text = QString::fromUtf8(commentscanYYtext); 
               functionProto += text[0];
            }
            YY_BREAK
         /* ----- handle argument of inherit command ------- */
         case 189:
            YY_RULE_SETUP

            {
               // found argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               current->extends.append(BaseInfo(removeRedundantWhiteSpace(text), Public, Normal));
               BEGIN( Comment );
            }
            YY_BREAK
         case 190:
            /* rule 190 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 

               warn(yyFileName, yyLineNr, "\\inherit command has no argument");

               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK
         case 191:
            YY_RULE_SETUP

            {
               // invalid character for anchor label
               warn(yyFileName, yyLineNr, "Invalid or missing name for \\inherit command");
               BEGIN(Comment);
            }
            YY_BREAK

         /* ----- handle argument of extends and implements commands ------- */
         case 192:
            YY_RULE_SETUP

            {
               // found argument
               QString text = QString::fromUtf8(commentscanYYtext); 
               current->extends.append(BaseInfo(removeRedundantWhiteSpace(text), Public, Normal));
               BEGIN( Comment );
            }
            YY_BREAK
         case 193:
            /* rule 193 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 

               warn(yyFileName, yyLineNr, "\\extends or \\implements command has no argument");
               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK
         case 194:
            YY_RULE_SETUP

            {
               // ignore other stuff
            }
            YY_BREAK

         /* ----- handle language specific sections ------- */
         case 195:
            YY_RULE_SETUP

            { /* language switch */
               QString text = QString::fromUtf8(commentscanYYtext); 
               QString langId = text.mid(2);

               if (langId.isEmpty() || Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) == 0) {
                  // enable language specific section
                  BEGIN(Comment);
               }
            }
            YY_BREAK
         case 196:
            YY_RULE_SETUP

            { /* any character not a *, @, backslash or new line */
            }
            YY_BREAK
         case 197:
            /* rule 197 can match eol */
            YY_RULE_SETUP

            { /* new line in verbatim block */
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (text[0] == '\n')
               {
                  yyLineNr++;
               }
            }
            YY_BREAK

         case 198:
            YY_RULE_SETUP

            { /* any other character */
            }
            YY_BREAK
         /* ----- handle arguments of the cite command ------- */
         case 199:
            YY_RULE_SETUP

            {
               // found argyment
               QString text = QString::fromUtf8(commentscanYYtext); 
               addCite();
               addOutput(text);
               BEGIN(Comment);
            }
            YY_BREAK
         case 200:
            /* rule 200 can match eol */
            YY_RULE_SETUP

            {
               // missing argument
               QString text = QString::fromUtf8(commentscanYYtext); 

               warn(yyFileName, yyLineNr, "\\cite command has no label");

               if (text[0] == '\n') {
                  yyLineNr++;
               }
               addOutput('\n');
               BEGIN( Comment );
            }
            YY_BREAK
         case 201:
            YY_RULE_SETUP

            {
               // invalid character for cite label
               warn(yyFileName, yyLineNr,
               "Invalid or missing cite label"
                   );
               BEGIN(Comment);
            }
            YY_BREAK
         /* ----- handle argument of the copydoc command ------- */
         case YY_STATE_EOF(CopyDoc):

         case 202:
            /* rule 202 can match eol */
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext); 

               if (text[0] == '\n') {
                  yyLineNr++;
               }
               addOutput('\n');
               setOutput(OutputDoc);
               addOutput("\\copydetails ");
               addOutput(g_copyDocArg);
               addOutput("\n");
               BEGIN(Comment);
            }
            YY_BREAK
         case 203:
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext); 
               g_copyDocArg += text;
               addOutput(text);
            }
            YY_BREAK
         case 204:
            YY_RULE_SETUP

            {
               QString text = QString::fromUtf8(commentscanYYtext);               
               g_copyDocArg += text;
               addOutput(text);
            }
            YY_BREAK

         case 205:
            YY_RULE_SETUP

            ECHO;
            YY_BREAK

         case YY_STATE_EOF(INITIAL):
         case YY_STATE_EOF(Comment):
         case YY_STATE_EOF(PageDocArg1):
         case YY_STATE_EOF(PageDocArg2):
         case YY_STATE_EOF(RelatesParam1):
         case YY_STATE_EOF(ClassDocArg1):
         case YY_STATE_EOF(ClassDocArg2):
         case YY_STATE_EOF(ClassDocArg3):
         case YY_STATE_EOF(CategoryDocArg1):
         case YY_STATE_EOF(XRefItemParam1):
         case YY_STATE_EOF(XRefItemParam2):
         case YY_STATE_EOF(XRefItemParam3):
         case YY_STATE_EOF(FileDocArg1):
         case YY_STATE_EOF(EnumDocArg1):
         case YY_STATE_EOF(NameSpaceDocArg1):
         case YY_STATE_EOF(PackageDocArg1):
         case YY_STATE_EOF(GroupDocArg1):
         case YY_STATE_EOF(GroupDocArg2):
         case YY_STATE_EOF(SectionLabel):
         case YY_STATE_EOF(SectionTitle):
         case YY_STATE_EOF(SubpageLabel):
         case YY_STATE_EOF(SubpageTitle):
         case YY_STATE_EOF(LineParam):
         case YY_STATE_EOF(GuardParam):
         case YY_STATE_EOF(GuardParamEnd):
         case YY_STATE_EOF(SkipGuardedSection):
         case YY_STATE_EOF(SkipInternal):
         case YY_STATE_EOF(NameParam):
         case YY_STATE_EOF(InGroupParam):
         case YY_STATE_EOF(FnParam):
         case YY_STATE_EOF(OverloadParam):
         case YY_STATE_EOF(InheritParam):
         case YY_STATE_EOF(ExtendsParam):
         case YY_STATE_EOF(ReadFormulaShort):
         case YY_STATE_EOF(ReadFormulaLong):
         case YY_STATE_EOF(AnchorLabel):
         case YY_STATE_EOF(HtmlComment):
         case YY_STATE_EOF(SkipLang):
         case YY_STATE_EOF(CiteLabel):
         case YY_STATE_EOF(GuardExpr):
            yyterminate();

         case YY_END_OF_BUFFER: {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = (yy_hold_char);
            YY_RESTORE_YY_MORE_OFFSET

            if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW ) {
               /* We're scanning a new file or input source.  It's
                * possible that this happened because the user
                * just pointed commentscanYYin at a new source and called
                * commentscanYYlex().  If so, then we have to assure
                * consistency between YY_CURRENT_BUFFER and our
                * globals.  Here is the right place to do so, because
                * this is the first action (other than possibly a
                * back-up) that will match for the new input source.
                */
               (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
               YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
               YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
            }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] ) {
               /* This was really a NUL. */
               yy_state_type yy_next_state;

               (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

               yy_current_state = yy_get_previous_state(  );

               /* Okay, we're now positioned to make the NUL
                * transition.  We couldn't have
                * yy_get_previous_state() go ahead and do it
                * for us because it doesn't know how to deal
                * with the possibility of jamming (and we don't
                * want to build jamming into it because then it
                * will run more slowly).
                */

               yy_next_state = yy_try_NUL_trans( yy_current_state );

               yy_bp = (yytext_ptr) + YY_MORE_ADJ;

               if ( yy_next_state ) {
                  /* Consume the NUL. */
                  yy_cp = ++(yy_c_buf_p);
                  yy_current_state = yy_next_state;
                  goto yy_match;
               }

               else {
                  yy_cp = (yy_c_buf_p);
                  goto yy_find_action;
               }
            }

            else switch ( yy_get_next_buffer(  ) ) {
                  case EOB_ACT_END_OF_FILE: {
                     (yy_did_buffer_switch_on_eof) = 0;

                     if ( commentscanYYwrap( ) ) {
                        /* Note: because we've taken care in
                         * yy_get_next_buffer() to have set up
                         * commentscanYYtext, we can now set up
                         * yy_c_buf_p so that if some total
                         * hoser (like flex itself) wants to
                         * call the scanner after we return the
                         * YY_NULL, it'll still work - another
                         * YY_NULL will get returned.
                         */
                        (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                        yy_act = YY_STATE_EOF(YY_START);
                        goto do_action;
                     }

                     else {
                        if ( ! (yy_did_buffer_switch_on_eof) ) {
                           YY_NEW_FILE;
                        }
                     }
                     break;
                  }

                  case EOB_ACT_CONTINUE_SCAN:
                     (yy_c_buf_p) =
                        (yytext_ptr) + yy_amount_of_matched_text;

                     yy_current_state = yy_get_previous_state(  );

                     yy_cp = (yy_c_buf_p);
                     yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                     goto yy_match;

                  case EOB_ACT_LAST_MATCH:
                     (yy_c_buf_p) =
                        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                     yy_current_state = yy_get_previous_state(  );

                     yy_cp = (yy_c_buf_p);
                     yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                     goto yy_find_action;
               }
            break;
         }

         default:
            YY_FATAL_ERROR(
               "fatal flex scanner internal error--no action found" );
      } /* end of action switch */
   } /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
   register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
   register char *source = (yytext_ptr);
   register int number_to_move, i;
   int ret_val;

   if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
      YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed" );

   if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 ) {
      /* Don't try to fill the buffer, so this is an EOF. */
      if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 ) {
         /* We matched a single character, the EOB, so
          * treat this as a final EOF.
          */
         return EOB_ACT_END_OF_FILE;
      }

      else {
         /* We matched some text prior to the EOB, first
          * process it.
          */
         return EOB_ACT_LAST_MATCH;
      }
   }

   /* Try to read more data. */

   /* First move last chars to start of buffer. */
   number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

   for ( i = 0; i < number_to_move; ++i ) {
      *(dest++) = *(source++);
   }

   if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
      /* don't do the read, it's not guaranteed to return an EOF,
       * just force an EOF
       */
   {
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
   }

   else {
      int num_to_read =
         YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

      while ( num_to_read <= 0 ) {
         /* Not enough room in the buffer - grow it. */

         YY_FATAL_ERROR(
            "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

      }

      if ( num_to_read > YY_READ_BUF_SIZE ) {
         num_to_read = YY_READ_BUF_SIZE;
      }

      /* Read in more data. */
      YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
                (yy_n_chars), (size_t) num_to_read );

      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
   }

   if ( (yy_n_chars) == 0 ) {
      if ( number_to_move == YY_MORE_ADJ ) {
         ret_val = EOB_ACT_END_OF_FILE;
         commentscanYYrestart(commentscanYYin  );
      }

      else {
         ret_val = EOB_ACT_LAST_MATCH;
         YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
      }
   }

   else {
      ret_val = EOB_ACT_CONTINUE_SCAN;
   }

   if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
      /* Extend the array by 50%, plus the number we really need. */
      yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
      YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size  );
      if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf ) {
         YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
      }
   }

   (yy_n_chars) += number_to_move;
   YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
   YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

   (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

   return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state (void)
{
   register yy_state_type yy_current_state;
   register char *yy_cp;

   yy_current_state = (yy_start);
   yy_current_state += YY_AT_BOL();

   (yy_state_ptr) = (yy_state_buf);
   *(yy_state_ptr)++ = yy_current_state;

   for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp ) {
      register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
      while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state ) {
         yy_current_state = (int) yy_def[yy_current_state];
         if ( yy_current_state >= 1179 ) {
            yy_c = yy_meta[(unsigned int) yy_c];
         }
      }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
      *(yy_state_ptr)++ = yy_current_state;
   }

   return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
   register int yy_is_jam;

   register YY_CHAR yy_c = 1;
   while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state ) {
      yy_current_state = (int) yy_def[yy_current_state];
      if ( yy_current_state >= 1179 ) {
         yy_c = yy_meta[(unsigned int) yy_c];
      }
   }
   yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
   yy_is_jam = (yy_current_state == 1178);
   if ( ! yy_is_jam ) {
      *(yy_state_ptr)++ = yy_current_state;
   }

   return yy_is_jam ? 0 : yy_current_state;
}

static void yyunput (int c, register char *yy_bp )
{
   register char *yy_cp;

   yy_cp = (yy_c_buf_p);

   /* undo effects of setting up commentscanYYtext */
   *yy_cp = (yy_hold_char);

   if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 ) {
      /* need to shift things up to make room */
      /* +2 for EOB chars. */
      register int number_to_move = (yy_n_chars) + 2;
      register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                               YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
      register char *source =
         &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

      while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf ) {
         *--dest = *--source;
      }

      yy_cp += (int) (dest - source);
      yy_bp += (int) (dest - source);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
         (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

      if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 ) {
         YY_FATAL_ERROR( "flex scanner push-back overflow" );
      }
   }

   *--yy_cp = (char) c;

   (yytext_ptr) = yy_bp;
   (yy_hold_char) = *yy_cp;
   (yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput (void)
#else
static int input  (void)
#endif

{
   int c;

   *(yy_c_buf_p) = (yy_hold_char);

   if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR ) {
      /* yy_c_buf_p now points to the character we want to return.
       * If this occurs *before* the EOB characters, then it's a
       * valid NUL; if not, then we've hit the end of the buffer.
       */
      if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
         /* This was really a NUL. */
      {
         *(yy_c_buf_p) = '\0';
      }

      else {
         /* need more input */
         int offset = (yy_c_buf_p) - (yytext_ptr);
         ++(yy_c_buf_p);

         switch ( yy_get_next_buffer(  ) ) {
            case EOB_ACT_LAST_MATCH:
               /* This happens because yy_g_n_b()
                * sees that we've accumulated a
                * token and flags that we need to
                * try matching the token before
                * proceeding.  But for input(),
                * there's no matching to consider.
                * So convert the EOB_ACT_LAST_MATCH
                * to EOB_ACT_END_OF_FILE.
                */

               /* Reset buffer status. */
               commentscanYYrestart(commentscanYYin );

            /*FALLTHROUGH*/

            case EOB_ACT_END_OF_FILE: {
               if ( commentscanYYwrap( ) ) {
                  return EOF;
               }

               if ( ! (yy_did_buffer_switch_on_eof) ) {
                  YY_NEW_FILE;
               }
#ifdef __cplusplus
               return yyinput();
#else
               return input();
#endif
            }

            case EOB_ACT_CONTINUE_SCAN:
               (yy_c_buf_p) = (yytext_ptr) + offset;
               break;
         }
      }
   }

   c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
   *(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
   (yy_hold_char) = *++(yy_c_buf_p);

   YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

   return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void commentscanYYrestart  (FILE *input_file )
{

   if ( ! YY_CURRENT_BUFFER ) {
      commentscanYYensure_buffer_stack ();
      YY_CURRENT_BUFFER_LVALUE =
         commentscanYY_create_buffer(commentscanYYin, YY_BUF_SIZE );
   }

   commentscanYY_init_buffer(YY_CURRENT_BUFFER, input_file );
   commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

   /* TODO. We should be able to replace this entire function body
    * with
    *		commentscanYYpop_buffer_state();
    *		commentscanYYpush_buffer_state(new_buffer);
     */
   commentscanYYensure_buffer_stack ();
   if ( YY_CURRENT_BUFFER == new_buffer ) {
      return;
   }

   if ( YY_CURRENT_BUFFER ) {
      /* Flush out information for old buffer. */
      *(yy_c_buf_p) = (yy_hold_char);
      YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
   }

   YY_CURRENT_BUFFER_LVALUE = new_buffer;
   commentscanYY_load_buffer_state( );

   /* We don't actually know whether we did this switch during
    * EOF (commentscanYYwrap()) processing, but the only time this flag
    * is looked at is after commentscanYYwrap() is called, so it's safe
    * to go ahead and always set it.
    */
   (yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
   (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
   (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
   commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
   (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE commentscanYY_create_buffer  (FILE *file, int  size )
{
   YY_BUFFER_STATE b;

   b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
   if ( ! b ) {
      YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );
   }

   b->yy_buf_size = size;

   /* yy_ch_buf has to be 2 characters longer than the size given because
    * we need to put in 2 end-of-buffer characters.
    */
   b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
   if ( ! b->yy_ch_buf ) {
      YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );
   }

   b->yy_is_our_buffer = 1;

   commentscanYY_init_buffer(b, file );

   return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 *
 */
void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{

   if ( ! b ) {
      return;
   }

   if ( b == YY_CURRENT_BUFFER ) { /* Not sure if we should pop here. */
      YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
   }

   if ( b->yy_is_our_buffer ) {
      commentscanYYfree((void *) b->yy_ch_buf  );
   }

   commentscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE *file )

{
   int oerrno = errno;

   commentscanYY_flush_buffer(b );

   b->yy_input_file = file;
   b->yy_fill_buffer = 1;

   /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
    * called from commentscanYYrestart() or through yy_get_next_buffer.
    * In that case, we don't want to reset the lineno or column.
    */
   if (b != YY_CURRENT_BUFFER) {
      b->yy_bs_lineno = 1;
      b->yy_bs_column = 0;
   }

   b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

   errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
   if ( ! b ) {
      return;
   }

   b->yy_n_chars = 0;

   /* We always need two end-of-buffer characters.  The first causes
    * a transition to the end-of-buffer state.  The second causes
    * a jam in that state.
    */
   b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
   b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

   b->yy_buf_pos = &b->yy_ch_buf[0];

   b->yy_at_bol = 1;
   b->yy_buffer_status = YY_BUFFER_NEW;

   if ( b == YY_CURRENT_BUFFER ) {
      commentscanYY_load_buffer_state( );
   }
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
   if (new_buffer == NULL) {
      return;
   }

   commentscanYYensure_buffer_stack();

   /* This block is copied from commentscanYY_switch_to_buffer. */
   if ( YY_CURRENT_BUFFER ) {
      /* Flush out information for old buffer. */
      *(yy_c_buf_p) = (yy_hold_char);
      YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
   }

   /* Only push if top exists. Otherwise, replace top. */
   if (YY_CURRENT_BUFFER) {
      (yy_buffer_stack_top)++;
   }
   YY_CURRENT_BUFFER_LVALUE = new_buffer;

   /* copied from commentscanYY_switch_to_buffer. */
   commentscanYY_load_buffer_state( );
   (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void commentscanYYpop_buffer_state (void)
{
   if (!YY_CURRENT_BUFFER) {
      return;
   }

   commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
   YY_CURRENT_BUFFER_LVALUE = NULL;
   if ((yy_buffer_stack_top) > 0) {
      --(yy_buffer_stack_top);
   }

   if (YY_CURRENT_BUFFER) {
      commentscanYY_load_buffer_state( );
      (yy_did_buffer_switch_on_eof) = 1;
   }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
   int num_to_alloc;

   if (!(yy_buffer_stack)) {

      /* First allocation is just for 2 elements, since we don't know if this
       * scanner will even need a stack. We use 2 instead of 1 to avoid an
       * immediate realloc on the next call.
         */
      num_to_alloc = 1;
      (yy_buffer_stack) = (struct yy_buffer_state **)commentscanYYalloc
                          (num_to_alloc * sizeof(struct yy_buffer_state *)
                          );
      if ( ! (yy_buffer_stack) ) {
         YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
      }

      memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state *));

      (yy_buffer_stack_max) = num_to_alloc;
      (yy_buffer_stack_top) = 0;
      return;
   }

   if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1) {

      /* Increase the buffer to prepare for a possible push. */
      int grow_size = 8 /* arbitrary grow size */;

      num_to_alloc = (yy_buffer_stack_max) + grow_size;
      (yy_buffer_stack) = (struct yy_buffer_state **)commentscanYYrealloc
                          ((yy_buffer_stack),
                           num_to_alloc * sizeof(struct yy_buffer_state *)
                          );
      if ( ! (yy_buffer_stack) ) {
         YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
      }

      /* zero only the new slots.*/
      memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state *));
      (yy_buffer_stack_max) = num_to_alloc;
   }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char *base, yy_size_t  size )
{
   YY_BUFFER_STATE b;

   if ( size < 2 ||
         base[size - 2] != YY_END_OF_BUFFER_CHAR ||
         base[size - 1] != YY_END_OF_BUFFER_CHAR )
      /* They forgot to leave room for the EOB's. */
   {
      return 0;
   }

   b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
   if ( ! b ) {
      YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );
   }

   b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
   b->yy_buf_pos = b->yy_ch_buf = base;
   b->yy_is_our_buffer = 0;
   b->yy_input_file = 0;
   b->yy_n_chars = b->yy_buf_size;
   b->yy_is_interactive = 0;
   b->yy_at_bol = 1;
   b->yy_fill_buffer = 0;
   b->yy_buffer_status = YY_BUFFER_NEW;

   commentscanYY_switch_to_buffer(b  );

   return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yystr )
{

   return commentscanYY_scan_bytes(yystr, strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char *yybytes, int  _yybytes_len )
{
   YY_BUFFER_STATE b;
   char *buf;
   yy_size_t n;
   int i;

   /* Get memory for full buffer, including space for trailing EOB's. */
   n = _yybytes_len + 2;
   buf = (char *) commentscanYYalloc(n  );
   if ( ! buf ) {
      YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );
   }

   for ( i = 0; i < _yybytes_len; ++i ) {
      buf[i] = yybytes[i];
   }

   buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

   b = commentscanYY_scan_buffer(buf, n );
   if ( ! b ) {
      YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );
   }

   /* It's okay to grow etc. this buffer, and we should throw it
    * away when we're done.
    */
   b->yy_is_our_buffer = 1;

   return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char *msg )
{
   (void) fprintf( stderr, "%s\n", msg );
   exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */
#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int commentscanYYget_lineno  (void)
{

   return commentscanYYlineno;
}

/** Get the input stream.
 *
 */
FILE *commentscanYYget_in  (void)
{
   return commentscanYYin;
}

/** Get the output stream.
 *
 */
FILE *commentscanYYget_out  (void)
{
   return commentscanYYout;
}

/** Get the length of the current token.
 *
 */
int commentscanYYget_leng  (void)
{
   return commentscanYYleng;
}

/** Get the current token.
 *
 */

char *commentscanYYget_text  (void)
{
   return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void commentscanYYset_lineno (int  line_number )
{

   commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE   *in_str )
{
   commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE   *out_str )
{
   commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
   return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
   commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
   /* Initialization is the same as for the non-reentrant scanner.
   * This function is called from commentscanYYlex_destroy(), so don't allocate here.
   */

   (yy_buffer_stack) = 0;
   (yy_buffer_stack_top) = 0;
   (yy_buffer_stack_max) = 0;
   (yy_c_buf_p) = (char *) 0;
   (yy_init) = 0;
   (yy_start) = 0;

   (yy_state_buf) = 0;
   (yy_state_ptr) = 0;
   (yy_full_match) = 0;
   (yy_lp) = 0;

   /* Defined in main.c */
#ifdef YY_STDINIT
   commentscanYYin = stdin;
   commentscanYYout = stdout;
#else
   commentscanYYin = (FILE *) 0;
   commentscanYYout = (FILE *) 0;
#endif

   /* For future reference: Set errno on error, since we are called by
    * commentscanYYlex_init()
    */
   return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{

   /* Pop the buffer stack, destroying each element. */
   while (YY_CURRENT_BUFFER) {
      commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
      YY_CURRENT_BUFFER_LVALUE = NULL;
      commentscanYYpop_buffer_state();
   }

   /* Destroy the stack itself. */
   commentscanYYfree((yy_buffer_stack) );
   (yy_buffer_stack) = NULL;

   commentscanYYfree ( (yy_state_buf) );
   (yy_state_buf)  = NULL;

   /* Reset the globals. This is important in a non-reentrant scanner so the next time
    * commentscanYYlex() is called, initialization will occur. */
   yy_init_globals( );

   return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *s1, yyconst char *s2, int n )
{
   register int i;
   for ( i = 0; i < n; ++i ) {
      s1[i] = s2[i];
   }
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char *s )
{
   register int n;
   for ( n = 0; s[n]; ++n )
      ;

   return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
   return (void *) malloc( size );
}

void *commentscanYYrealloc  (void *ptr, yy_size_t  size )
{
   /* The cast to (char *) in the following accommodates both
    * implementations that use char* generic pointers, and those
    * that use void* generic pointers.  It works with the latter
    * because both ANSI C and C++ allow castless assignment from
    * any pointer type to void*, and deal with argument conversions
    * as though doing an assignment.
    */
   return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void *ptr )
{
   free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"


static bool handleBrief(const QString &)
{
   setOutput(OutputBrief);
   return FALSE;
}

static bool handleFn(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   functionProto.resize(0);
   braceCount = 0;
   BEGIN(FnParam);
   return stop;
}

static bool handleDef(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::DEFINEDOC_SEC);
   functionProto.resize(0);
   BEGIN(FnParam);
   return stop;
}

static bool handleOverload(const QString &)
{
   functionProto.resize(0);
   BEGIN(OverloadParam);
   return FALSE;
}

static bool handleEnum(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::ENUMDOC_SEC);
   BEGIN(EnumDocArg1);
   return stop;
}

static bool handleDefGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_NORMAL;
   BEGIN( GroupDocArg1 );
   return stop;
}

static bool handleAddToGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_ADD;
   BEGIN( GroupDocArg1 );
   return stop;
}

static bool handleWeakGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_WEAK;
   BEGIN( GroupDocArg1 );
   return stop;
}

static bool handleNamespace(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
   BEGIN( NameSpaceDocArg1 );
   return stop;
}

static bool handlePackage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
   BEGIN( PackageDocArg1 );
   return stop;
}

static bool handleClass(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::CLASSDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleHeaderFile(const QString &)
{
   BEGIN( ClassDocArg2 );
   return FALSE;
}

static bool handleProtocol(const QString &)
{
   // Obj-C protocol
   bool stop = makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleCategory(const QString &)
{
   // Obj-C category
   bool stop = makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
   BEGIN( CategoryDocArg1 );
   return stop;
}

static bool handleUnion(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::UNIONDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleStruct(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::STRUCTDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleInterface(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleIdlException(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handlePage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::PAGEDOC_SEC);
   BEGIN( PageDocArg1 );
   return stop;
}

static bool handleMainpage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
   if (!stop) {
      current->name = "mainpage";
   }
   BEGIN( PageDocArg2 );
   return stop;
}

static bool handleFile(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::FILEDOC_SEC);
   if (!stop) {
      current->name = yyFileName;
   }
   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleDir(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::DIRDOC_SEC);
   if (!stop) {
      current->name = yyFileName;
   }
   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleExample(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::EXAMPLE_SEC);
   if (!stop) {
      current->name = yyFileName;
   }
   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleDetails(const QString &)
{
   if (inContext != OutputBrief) {
      addOutput("\n\n"); // treat @details outside brief description
      // as a new paragraph
   }
   setOutput(OutputDoc);
   return FALSE;
}

static bool handleName(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERGRP_SEC);
   if (! stop) {
      g_memberGroupHeader.resize(0);
      BEGIN( NameParam );
      if (g_memberGroupId != DOX_NOGROUP) { // end of previous member group
         closeGroup(current, yyFileName, yyLineNr, TRUE);
      }
   }
   return stop;
}

static bool handleTodo(const QString &)
{
   newXRefKind = XRef_Todo;
   setOutput(OutputXRef);
   xrefKind = XRef_Todo;
   return FALSE;
}

static bool handleTest(const QString &)
{
   newXRefKind = XRef_Test;
   setOutput(OutputXRef);
   xrefKind = XRef_Test;
   return FALSE;
}

static bool handleBug(const QString &)
{
   newXRefKind = XRef_Bug;
   setOutput(OutputXRef);
   xrefKind = XRef_Bug;
   return FALSE;
}

static bool handleDeprecated(const QString &)
{
   // mark item for isDeprcated()
   current->m_specFlags.spec |= Entry::Deprecated;

   newXRefKind = XRef_Deprecated;
   setOutput(OutputXRef);
   xrefKind = XRef_Deprecated;
   return FALSE;
}

static bool handleXRefItem(const QString &)
{
   newXRefKind = XRef_Item;
   BEGIN(XRefItemParam1);
   return FALSE;
}

static bool handleParBlock(const QString &)
{
   if (g_insideParBlock) {
      warn(yyFileName, yyLineNr, "Found \\parblock command while already in a parblock");
   }

   if (!g_spaceBeforeCmd.isEmpty()) {
      addOutput(g_spaceBeforeCmd);
      g_spaceBeforeCmd.resize(0);
   }

   addOutput("@parblock ");
   g_insideParBlock = TRUE;

   return FALSE;
}

static bool handleEndParBlock(const QString &)
{
   if (!g_insideParBlock) {
      warn(yyFileName, yyLineNr, "found \\endparblock command without matching \\parblock");
   }

   addOutput("@endparblock");
   setOutput(OutputDoc); // to end a parblock inside a xrefitem like context
   g_insideParBlock = FALSE;

   return FALSE;
}

static bool handleRelated(const QString &)
{
   BEGIN(RelatesParam1);
   return FALSE;
}

static bool handleRelatedAlso(const QString &)
{
   current->relatesType = Duplicate;
   BEGIN(RelatesParam1);
   return FALSE;
}

static bool handleMemberOf(const QString &)
{
   current->relatesType = MemberOf;
   BEGIN(RelatesParam1);
   return FALSE;
}

static bool handleRefItem(const QString &)
{
   addOutput("@refitem ");
   BEGIN(LineParam);
   return FALSE;
}

static bool handleSection(const QString &s)
{
   setOutput(OutputDoc);
   addOutput("@" + s + " ");
   BEGIN(SectionLabel);
   if      (s == "section") {
      g_sectionLevel = 1;
   } else if (s == "subsection") {
      g_sectionLevel = 2;
   } else if (s == "subsubsection") {
      g_sectionLevel = 3;
   } else if (s == "paragraph") {
      g_sectionLevel = 4;
   }
   return FALSE;
}

static bool handleSubpage(const QString &s)
{
   if (current->section != Entry::EMPTY_SEC && current->section != Entry::PAGEDOC_SEC && 
         current->section != Entry::MAINPAGEDOC_SEC) {

      warn(yyFileName, yyLineNr, "Found \\subpage command in a comment block that is not marked as a page!");
   }

   if (!g_spaceBeforeCmd.isEmpty()) {
      addOutput(g_spaceBeforeCmd);
      g_spaceBeforeCmd.resize(0);
   }

   addOutput("@" + s + " ");
   BEGIN(SubpageLabel);
   return FALSE;
}

static bool handleAnchor(const QString &s)
{
   addOutput("@" + s + " ");
   BEGIN(AnchorLabel);
   return FALSE;
}

static bool handleCite(const QString &s)
{
   if (!g_spaceBeforeCmd.isEmpty()) {
      addOutput(g_spaceBeforeCmd);
      g_spaceBeforeCmd.resize(0);
   }
   addOutput("@" + s + " ");
   BEGIN(CiteLabel);
   return FALSE;
}

static bool handleFormatBlock(const QString &s)
{
   addOutput("@" + s + " ");  
   blockName = s;
   g_commentCount = 0;
   BEGIN(FormatBlock);
   return FALSE;
}

static bool handleAddIndex(const QString &)
{
   addOutput("@addindex ");
   BEGIN(LineParam);
   return FALSE;
}

static bool handleIf(const QString &)
{
   enabledSectionFound = FALSE;
   guardType = Guard_If;
   g_spaceBeforeIf = g_spaceBeforeCmd;
   BEGIN(GuardParam);
   return FALSE;
}

static bool handleIfNot(const QString &)
{
   enabledSectionFound = FALSE;
   guardType = Guard_IfNot;
   g_spaceBeforeIf = g_spaceBeforeCmd;
   BEGIN(GuardParam);
   return FALSE;
}

static bool handleElseIf(const QString &)
{
   if (guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Found \\else without matching start command");
   } else {
      guardType = enabledSectionFound ? Guard_Skip : Guard_If;
      BEGIN(GuardParam);
   }
   return FALSE;
}

static bool handleElse(const QString &)
{
   if (guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Found \\else without matching start command");
   } else {
      BEGIN( SkipGuardedSection );
   }
   return FALSE;
}

static bool handleEndIf(const QString &)
{
   if (guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Found \\endif without matching start command");
   } else {
      delete guards.pop();
   }

   enabledSectionFound = FALSE;
   if (!g_spaceBeforeCmd.isEmpty()) {
      addOutput(g_spaceBeforeCmd);
      g_spaceBeforeCmd.resize(0);
   }

   BEGIN( GuardParamEnd );
   return FALSE;
}

static bool handleIngroup(const QString &)
{
   inGroupParamFound = FALSE;
   BEGIN( InGroupParam );
   return FALSE;
}

static bool handleNoSubGrouping(const QString &)
{
   current->subGrouping = FALSE;
   return FALSE;
}

static bool handleShowInitializer(const QString &)
{
   current->initLines = 100000; // ON
   return FALSE;
}

static bool handleHideInitializer(const QString &)
{
   current->initLines = 0; // OFF
   return FALSE;
}

static bool handleCallgraph(const QString &)
{
   current->callGraph = TRUE; // ON
   return FALSE;
}

static bool handleCallergraph(const QString &)
{
   current->callerGraph = TRUE; // ON
   return FALSE;
}

static bool handleInternal(const QString &)
{
   if (! Config::getBool("internal-docs")) {
      // make sure some whitespace before \internal command
      // is not treated as "documentation"

      if (current->doc.trimmed().isEmpty()) {
         current->doc.resize(0);
      }

      g_condCount = 0;
      BEGIN( SkipInternal );

   } else {
      // re-enabled for bug640828
      addOutput("\\internal ");
      inInternalDocs = TRUE;
   }

   return FALSE;
}

static bool handleLineBr(const QString &)
{
   addOutput('\n');
   return FALSE;
}

static bool handleStatic(const QString &)
{
   endBrief();
   current->stat = TRUE;
   return FALSE;
}

static bool handlePure(const QString &)
{
   endBrief();
   current->virt = Pure;
   return FALSE;
}

static bool handlePrivate(const QString &)
{
   current->protection = Private;
   return FALSE;
}

static bool handlePrivateSection(const QString &)
{
   current->protection = protection = Private;
   return FALSE;
}

static bool handleProtected(const QString &)
{
   current->protection = Protected;
   return FALSE;
}

static bool handleProtectedSection(const QString &)
{
   current->protection = protection = Protected ;
   return FALSE;
}

static bool handlePublic(const QString &)
{
   current->protection = Public;
   return FALSE;
}

static bool handlePublicSection(const QString &)
{
   current->protection = protection = Public;
   return FALSE;
}

static bool handleToc(const QString &)
{
   if (current->section == Entry::PAGEDOC_SEC || current->section == Entry::MAINPAGEDOC_SEC) {
      current->stat = TRUE; // we 'abuse' stat to pass whether or the TOC is enabled
   }
   return FALSE;
}

static bool handleInherit(const QString &)
{
   BEGIN(InheritParam);
   return FALSE;
}

static bool handleExtends(const QString &)
{
   BEGIN(ExtendsParam);
   return FALSE;
}

static bool handleCopyBrief(const QString &)
{
   if (current->brief.isEmpty() && current->doc.isEmpty()) {
      // if we don't have a brief or detailed description yet,
      // then the @copybrief should end up in the brief description.
      // otherwise it will be copied inline (see bug691315 & bug700788)
      setOutput(OutputBrief);
   }

   if (! g_spaceBeforeCmd.isEmpty()) {
      addOutput(g_spaceBeforeCmd);
      g_spaceBeforeCmd.resize(0);
   }

   addOutput("\\copybrief ");
   return FALSE;
}

static bool handleCopyDetails(const QString &)
{
   setOutput(OutputDoc);
   if (!g_spaceBeforeCmd.isEmpty()) {
      addOutput(g_spaceBeforeCmd);
      g_spaceBeforeCmd.resize(0);
   }
   addOutput("\\copydetails ");
   return FALSE;
}

static bool handleCopyDoc(const QString &)
{
   setOutput(OutputBrief);
   if (!g_spaceBeforeCmd.isEmpty()) {
      addOutput(g_spaceBeforeCmd);
      g_spaceBeforeCmd.resize(0);
   }
   addOutput("\\copybrief ");
   g_copyDocArg.resize(0);
   BEGIN(CopyDoc);
   return FALSE;
}

static void checkFormula()
{
   if (YY_START == ReadFormulaShort || YY_START == ReadFormulaLong) {
      warn(yyFileName, yyLineNr, "End of comment block while inside formula.");
   }
}

bool parseCommentBlock(ParserInterface *parser, QSharedPointer<Entry> curEntry, const QString &comment,
                  const QString &fileName, int &lineNr, bool isBrief, bool isAutoBriefOn, bool isInbody,
                  Protection &prot, int &position, bool &newEntryNeeded )
{
   initParser();

   guards.clear();
   langParser = parser;
   current    = curEntry;

   if (comment.isEmpty()) {
      return FALSE;   // avoid empty strings
   }

   inputString    = comment;
   inputString.append(" ");

   inputPosition  = position;
   yyLineNr       = lineNr;
   yyFileName     = fileName;
   protection     = prot;
   needNewEntry   = FALSE;
   xrefKind       = XRef_None;
   xrefAppendFlag = FALSE;
   insidePre      = FALSE;
   parseMore      = FALSE;
   inBody         = isInbody;

   outputXRef.resize(0);
   setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
   briefEndsAtDot = isAutoBriefOn;

   g_condCount    = 0;
   g_sectionLevel = 0;
   g_spaceBeforeCmd.resize(0);
   g_spaceBeforeIf.resize(0);

   printlex(commentscanYY_flex_debug, TRUE, __FILE__, ! fileName.isEmpty() ? qPrintable(fileName) : "");

   if (! current->inbodyDocs.isEmpty() && isInbody) { 
      // separate in body fragments
      current->inbodyDocs += "\n\n";
   }

   Debug::print(Debug::CommentScan, 0, "-----------\nCommentScanner: %s:%d\n"
                "input=[\n%s]\n", qPrintable(fileName), lineNr, qPrintable(comment) );


   commentscanYYrestart( commentscanYYin );
   BEGIN( Comment );
   commentscanYYlex();

   setOutput( OutputDoc );

   if (YY_START == OverloadParam) { 
      // comment ended with \overload
      addOutput(theTranslator->trOverloadText());
   }

   if (! guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Documentation block ended in the middle of a conditional section!");
   }

   if (g_insideParBlock) {
      warn(yyFileName, yyLineNr, "Documentation block ended while inside a \\parblock. Missing \\endparblock");
   }

   current->doc = stripLeadingAndTrailingEmptyLines(current->doc, current->docLine);

   if (current->section == Entry::FILEDOC_SEC && current->doc.isEmpty()) {
      // to allow a comment block with just a @file command.
      current->doc = "\n\n";
   }

   if (current->section == Entry::MEMBERGRP_SEC && g_memberGroupId == DOX_NOGROUP) { 
      // @name section but no group started yet
      openGroup(current, yyFileName, yyLineNr);
   }

   if (Doxy_Globals::markdownSupport) {
      current->brief      = processMarkdown(fileName, lineNr, current, current->brief);
      current->doc        = processMarkdown(fileName, lineNr, current, current->doc);
      current->inbodyDocs = processMarkdown(fileName, lineNr, current, current->inbodyDocs);
   }

   Debug::print(Debug::CommentScan, 0, "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n===========\n",
                current->briefLine, qPrintable(current->brief), current->docLine, qPrintable(current->doc), 
                current->inbodyLine, qPrintable(current->inbodyDocs) );

   checkFormula();
   prot = protection;

   groupAddDocs(curEntry, fileName);

   newEntryNeeded = needNewEntry;

   // if we did not proceed during this call it does not make ense to continue since we get stuck. 
   // See bug 567346 for situations were this happens
   if (parseMore && position == inputPosition) {
      parseMore = FALSE;
   }

   if (parseMore) {
      position = inputPosition;
   } else {
      position = 0;
   }

   lineNr = yyLineNr;
   printlex(commentscanYY_flex_debug, FALSE, __FILE__, ! fileName.isEmpty() ? qPrintable(fileName) : "");

   return parseMore;
}

void groupEnterFile(const QString &fileName, int)
{
   g_autoGroupStack.clear();
   g_memberGroupId = DOX_NOGROUP;
   g_memberGroupDocs.resize(0);
   g_memberGroupRelates.resize(0);
   g_compoundName = fileName;
}

void groupLeaveFile(const QString &fileName, int line)
{  
   g_memberGroupId = DOX_NOGROUP;
   g_memberGroupRelates.resize(0);
   g_memberGroupDocs.resize(0);

   if (! g_autoGroupStack.isEmpty()) {
      warn(fileName, line, "End of file while inside a group\n");
   }
}

void groupEnterCompound(const QString &fileName, int line, const QString &name)
{
   if (g_memberGroupId != DOX_NOGROUP) {
      warn(fileName, line, "Try to put compound %s inside a member group\n", qPrintable(name));
   }

   g_memberGroupId = DOX_NOGROUP;
   g_memberGroupRelates.resize(0);
   g_memberGroupDocs.resize(0);
   g_compoundName = name;
   int i = g_compoundName.indexOf('(');
   if (i != -1) {
      g_compoundName = g_compoundName.left(i); // strip category (Obj-C)
   }
   if (g_compoundName.isEmpty()) {
      g_compoundName = fileName;
   }
   //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const QString &, int, const QString &)
{   
   g_memberGroupId = DOX_NOGROUP;
   g_memberGroupRelates.resize(0);
   g_memberGroupDocs.resize(0);
   g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId, const MemberGroupInfo *info)
{
   for (auto di = Doxy_Globals::memGrpInfoDict.begin(); di != Doxy_Globals::memGrpInfoDict.end(); ++di) {

      auto mi = *di;

      if (g_compoundName == mi->compoundName && ! mi->header.isEmpty() && mi->header.compare(info->header, Qt::CaseInsensitive) == 0) {
         // same file or scope, not a nameless group, same header name

         return (int)di.key(); // put the item in this group
      }
   }

   groupId++; // start new group
   return groupId;
}

void openGroup(QSharedPointer<Entry> e, const QString &, int)
{   
   if (e->section == Entry::GROUPDOC_SEC) { 
      // auto group
      g_autoGroupStack.push(new Grouping(e->name, e->groupingPri()));

   } else { 
      // start of a member group
      
      if (g_memberGroupId == DOX_NOGROUP) { 
         // no group started yet
         static int curGroupId = 0;

         QSharedPointer<MemberGroupInfo> info(new MemberGroupInfo);

         info->header = g_memberGroupHeader.trimmed();
         info->compoundName = g_compoundName;
         g_memberGroupId = findExistingGroup(curGroupId, info.data());
 
         Doxy_Globals::memGrpInfoDict.insert(g_memberGroupId, info);

         g_memberGroupRelates = e->relates;
         e->mGrpId = g_memberGroupId;
      }
   }
}

void closeGroup(QSharedPointer<Entry> e, const QString &fileName, int, bool foundInline)
{   
   if (g_memberGroupId != DOX_NOGROUP) { // end of member group

      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(g_memberGroupId);

      if (info) { // known group
         info->doc = g_memberGroupDocs;
         info->docFile = fileName;
      }

      g_memberGroupId = DOX_NOGROUP;  
      g_memberGroupRelates.resize(0);
      g_memberGroupDocs.resize(0);
      
      if (! foundInline) {
         e->mGrpId = DOX_NOGROUP;
      }
      
  
   } else if (!g_autoGroupStack.isEmpty()) { // end of auto group
      Grouping *grp = g_autoGroupStack.pop();
      // see bug577005: we should not remove the last group for e
      if (! foundInline) {
         e->groups->removeLast();
      }
      
      delete grp;
      if (!foundInline) {
         initGroupInfo(e);
      }
   }
}

void initGroupInfo(QSharedPointer<Entry> e)
{
   e->mGrpId  = g_memberGroupId;
   e->relates = g_memberGroupRelates;

   if (! g_autoGroupStack.isEmpty()) {     
      e->groups->append(*g_autoGroupStack.top());
   }
}

static void groupAddDocs(QSharedPointer<Entry> e, const QString &fileName)
{
   if (e->section == Entry::MEMBERGRP_SEC) {
      g_memberGroupDocs = e->brief.trimmed();
      e->doc = stripLeadingAndTrailingEmptyLines(e->doc, e->docLine);
      if (!g_memberGroupDocs.isEmpty() && ! e->doc.isEmpty()) {
         g_memberGroupDocs += "\n\n";
      }
      g_memberGroupDocs += e->doc;

      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(g_memberGroupId);

      if (info) {
         info->doc = g_memberGroupDocs;
         info->docFile = fileName;
         info->setRefItems(e->sli);
      }

      e->doc.resize(0);
      e->brief.resize(0);
   }
}

static void handleGuard(const QString &expr)
{
   CondParser prs;
   bool sectionEnabled = prs.parse(yyFileName, yyLineNr, expr.trimmed());
   bool parentEnabled = TRUE;
   if (!guards.isEmpty()) {
      parentEnabled = guards.top()->isEnabled();
   }
   if (parentEnabled) {
      if (
         (sectionEnabled && guardType == Guard_If) ||
         (!sectionEnabled && guardType == Guard_IfNot)
      ) { // section is visible
         guards.push(new GuardedSection(TRUE, TRUE));
         enabledSectionFound = TRUE;
         BEGIN( GuardParamEnd );
      } else { // section is invisible
         if (guardType != Guard_Skip) {
            guards.push(new GuardedSection(FALSE, TRUE));
         }
         BEGIN( SkipGuardedSection );
      }
   } else { // invisible because of parent
      guards.push(new GuardedSection(FALSE, FALSE));
      BEGIN( SkipGuardedSection );
   }
}
 