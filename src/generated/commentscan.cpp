
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 206
#define YY_END_OF_BUFFER 207
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[766] =
    {   0,
       80,   80,  124,  124,  138,  138,  153,  153,  197,  197,
      144,  144,  207,  206,   46,  206,   46,  206,   45,  206,
       46,  206,   46,  206,   46,  206,   46,  206,   46,  206,
       44,   46,  206,   46,  206,   46,  206,   27,   46,  206,
       46,  206,   46,  206,   46,  206,   46,  206,   46,  206,
       46,  206,   44,   46,  206,   46,  206,   46,  206,   93,
      206,   92,  206,   93,  206,   90,   93,  206,   93,  206,
       93,  206,  206,   94,  206,  114,  206,  113,  206,  114,
      206,  111,  114,  206,  114,  206,   75,  206,   75,  206,
       74,  206,   75,  206,   75,  206,   75,  206,   71,   75,

      206,   75,  206,   75,  206,   79,  206,   78,  206,   79,
      206,   76,   79,  206,   79,  206,   79,  206,   79,  206,
       83,  206,   82,  206,   80,   83,  206,   80,   83,  206,
       83,  206,   80,   83,  206,   80,   83,  206,   83,  206,
       75,  206,   74,  206,   75,  206,   75,  206,   75,  206,
       75,  206,   75,  206,  102,  206,  101,  206,   99,  102,
      206,  102,  206,  106,  206,  105,  206,  106,  206,  106,
      206,  110,  206,  109,  206,  110,  206,  110,  206,   98,
      206,   95,  206,   98,  206,   96,   98,  206,   98,  206,
       98,  206,   61,  206,   60,  206,   61,  206,   58,   61,

      206,   61,  206,   65,  206,   65,  206,   64,  206,   65,
      206,   65,  206,   65,  206,   62,   65,  206,   65,  206,
       65,  206,   69,  206,   68,  206,   69,  206,   66,   69,
      206,   69,  206,   86,  206,   84,  206,  206,   88,  206,
       89,  206,  206,  120,  206,  119,  206,  118,  120,  206,
      120,  206,  124,  127,  206,  121,  206,  124,  127,  206,
      127,  206,  127,  206,  129,  206,  128,  206,  206,  132,
      206,  132,  206,  130,  206,  132,  206,  132,  206,  138,
      142,  206,  139,  206,  142,  206,  142,  206,  142,  206,
      142,  206,  142,  206,  117,  206,  115,  206,  117,  206,

      151,  206,  151,  206,  149,  206,  143,  151,  206,  148,
      151,  206,  151,  206,  154,  206,  153,  154,  206,  152,
      206,  154,  206,  161,  162,  206,  160,  206,  162,  206,
      162,  206,  162,  206,  172,  173,  206,  163,  206,  173,
      206,  173,  206,  173,  206,  176,  206,  174,  206,  176,
      206,  180,  206,  178,  206,  177,  180,  206,  180,  206,
      183,  186,  206,  181,  206,  184,  186,  206,  185,  186,
      206,  186,  206,  186,  206,  189,  206,  187,  206,  189,
      206,  192,  206,  191,  206,  192,  206,  190,  192,  206,
      192,  206,  195,  206,  194,  206,  195,  206,  193,  195,

      206,  195,  206,   55,   57,  206,   56,  206,   57,  206,
       57,  206,  135,  206,  134,  206,  133,  135,  206,  135,
      206,   50,   51,  206,   49,  206,   51,  206,   51,  206,
      197,  199,  206,  198,  206,  199,  206,  199,  206,  199,
      206,  202,  206,  201,  206,  200,  202,  206,  202,  206,
      204,  205,  206,  203,  206,  205,  206,  144,  206,  144,
      147,  206,  145,  206,  146,  206,   43,    4,   36,   38,
       40,   38,   26,   26,   18,   26,   18,   18,   24,   25,
       20,   26,   27,   18,   18,   18,   18,   30,   31,   36,
       28,   90,   90,   91,   90,   94,  111,  111,  112,   71,

       71,   73,   71,   76,   76,   77,   76,   80,   80,   80,
       80,   80,   80,   81,   80,   99,  100,  103,  104,  108,
      107,  108,   96,   96,   97,   96,   58,   58,   58,   59,
       62,   62,   63,   62,   66,   66,   67,   84,   85,   88,
       87,  118,  124,  121,  124,  126,  126,  123,  128,  131,
      138,  141,  140,  116,  143,  148,  150,  153,  152,  161,
      172,  175,  177,  179,  183,  182,  188,  190,  190,  193,
      193,   55,  133,   50,  197,  196,  200,  204,  144,   47,
       26,   37,   35,   42,   38,   42,   42,   42,   38,   42,
       42,   39,    6,   34,    1,    1,    2,   18,   18,   22,

       23,   20,    5,   18,   18,   30,   47,   32,   35,   29,
       90,   90,   71,   76,   76,   80,   80,   80,   96,   96,
       58,   58,   58,   58,   62,   66,  125,   52,   53,   54,
       48,  196,  200,   42,   42,   16,   33,    1,   19,    2,
       18,   18,   18,   90,   70,   76,   80,   80,   72,   96,
       58,   58,   58,   66,  125,  156,  164,   48,  200,   15,
       41,    6,   13,   18,   21,   18,   18,   90,   76,   80,
       96,    3,   14,    7,   18,   21,   18,   18,   90,   76,
       80,   96,   84,  158,  166,   18,   18,   18,   90,   76,
       80,   96,  137,  157,  155,  165,   18,   18,   18,   90,

       92,  113,   74,   76,   78,   80,   82,  101,  105,  109,
       95,   96,   60,   64,   68,   86,   89,  119,  122,  129,
      130,  136,  139,  115,  149,  159,  160,  163,  174,  178,
      181,  187,  191,  194,  134,   49,  198,  201,  203,   12,
        9,    8,   18,   18,    5,   18,  167,   11,   10,   18,
       18,   18,   18,  170,   17,   18,   17,   18,  171,  168,
       17,   18,  171,  169,   43
    } ;

static yyconst flex_int16_t yy_accept[1146] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   11,
       11,   11,   11,   12,   13,   14,   15,   17,   19,   21,
       23,   25,   27,   29,   31,   34,   36,   38,   41,   43,

       45,   47,   49,   51,   53,   56,   58,   60,   62,   64,
       66,   69,   71,   73,   74,   76,   78,   80,   82,   85,
       87,   89,   91,   93,   95,   97,   99,  102,  104,  106,
      108,  110,  112,  115,  117,  119,  121,  123,  125,  128,
      131,  133,  136,  139,  141,  143,  145,  147,  149,  151,
      153,  155,  157,  159,  162,  164,  166,  168,  170,  172,
      174,  176,  178,  180,  182,  184,  186,  189,  191,  193,
      195,  197,  199,  202,  204,  206,  208,  210,  212,  214,
      216,  219,  221,  223,  225,  227,  229,  232,  234,  236,
      238,  239,  241,  243,  244,  246,  248,  251,  253,  256,

      258,  261,  263,  265,  267,  269,  270,  272,  274,  276,
      278,  280,  283,  285,  287,  289,  291,  293,  295,  297,
      299,  301,  303,  305,  307,  310,  313,  315,  317,  320,
      322,  324,  327,  329,  331,  333,  335,  338,  340,  342,
      344,  346,  348,  350,  352,  354,  356,  359,  361,  364,
      366,  369,  372,  374,  376,  378,  380,  382,  384,  386,
      388,  391,  393,  395,  397,  399,  402,  404,  407,  409,
      411,  413,  415,  417,  420,  422,  425,  427,  429,  431,
      434,  436,  438,  440,  442,  444,  446,  449,  451,  454,
      456,  458,  460,  463,  465,  467,  467,  467,  467,  467,

      467,  468,  468,  468,  469,  469,  469,  469,  469,  469,
      470,  471,  472,  472,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  474,  474,
      475,  476,  477,  478,  479,  480,  481,  483,  484,  484,
      485,  486,  487,  488,  488,  488,  488,  488,  488,  488,
      488,  489,  490,  491,  491,  492,  492,  492,  492,  492,
      492,  493,  494,  494,  494,  494,  495,  496,  496,  497,
      498,  498,  499,  499,  499,  500,  500,  500,  500,  500,
      500,  501,  501,  501,  502,  502,  502,  503,  503,  503,
      503,  504,  504,  505,  506,  506,  506,  506,  507,  508,

      508,  509,  510,  510,  511,  512,  513,  513,  513,  514,
      514,  515,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  517,  517,  518,  518,
      518,  519,  519,  521,  521,  521,  522,  522,  523,  523,
      523,  524,  525,  525,  525,  525,  526,  527,  528,  528,
      528,  529,  529,  530,  530,  531,  531,  531,  531,  531,
      531,  532,  532,  532,  533,  533,  534,  534,  534,  534,
      535,  536,  536,  537,  537,  538,  538,  539,  539,  539,
      540,  540,  541,  541,  542,  542,  543,  543,  544,  545,
      546,  546,  547,  548,  548,  549,  549,  550,  550,  550,

      550,  550,  551,  551,  552,  553,  554,  554,  554,  554,
      555,  555,  555,  556,  557,  557,  558,  558,  559,  560,
      560,  560,  561,  561,  561,  561,  562,  562,  562,  562,
      562,  562,  562,  563,  563,  564,  564,  565,  565,  566,
      566,  567,  567,  567,  568,  568,  569,  569,  570,  570,
      570,  571,  571,  572,  572,  572,  573,  573,  573,  574,
      574,  575,  575,  575,  576,  577,  577,  578,  578,  578,
      579,  579,  580,  581,  582,  582,  582,  582,  582,  583,
      584,  585,  587,  588,  589,  591,  592,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  594,  594,  594,

      594,  594,  594,  595,  596,  597,  598,  599,  600,  601,
      602,  602,  603,  604,  605,  606,  608,  608,  608,  608,
      608,  609,  610,  610,  611,  612,  612,  613,  613,  613,
      613,  613,  613,  614,  615,  615,  616,  617,  617,  618,
      618,  619,  619,  619,  619,  619,  619,  619,  620,  620,
      621,  622,  623,  624,  625,  625,  625,  626,  626,  627,
      627,  627,  627,  627,  627,  627,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  629,  630,  631,  631,  631,  632,  632,

      633,  633,  634,  634,  634,  634,  634,  634,  634,  635,
      636,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  638,  639,  640,  641,  642,  642,
      642,  643,  644,  644,  644,  644,  645,  645,  645,  646,
      646,  646,  647,  648,  648,  649,  650,  650,  650,  650,
      651,  651,  652,  653,  654,  654,  654,  655,  655,  655,
      655,  655,  655,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  657,  657,  657,  657,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  659,  659,  659,  660,  660,  660,  660,  661,  661,

      661,  662,  662,  662,  662,  662,  662,  662,  664,  664,
      664,  664,  665,  666,  667,  668,  668,  669,  669,  669,
      670,  671,  671,  671,  671,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  673,  674,  674,  674,  674,  674,  675,  675,
      675,  675,  675,  676,  677,  678,  679,  680,  680,  680,
      681,  682,  682,  682,  682,  683,  683,  683,  683,  683,

      683,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  685,  685,  685,  685,  685,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  687,  688,  689,  690,  690,
      690,  691,  692,  692,  692,  692,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  695,  696,  696,  696,  697,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  698,
      699,  700,  702,  703,  704,  706,  708,  709,  710,  711,
      713,  714,  715,  716,  717,  718,  719,  720,  721,  722,
      722,  723,  723,  723,  723,  723,  723,  723,  723,  724,
      725,  726,  727,  728,  728,  728,  728,  728,  728,  729,
      730,  731,  732,  733,  734,  735,  736,  737,  738,  739,
      740,  740,  740,  740,  741,  742,  743,  744,  745,  746,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  748,  748,  748,  749,  750,  750,  750,  751,  751,

      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  753,  753,  754,  754,  754,  754,  754,
      754,  754,  755,  755,  755,  757,  757,  759,  759,  759,
      760,  761,  761,  763,  763,  763,  764,  764,  764,  764,
      764,  764,  765,  766,  766
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   23,   23,   23,   24,    1,   25,
        1,   26,    1,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   33,   33,   37,   38,   39,   40,   41,
       33,   42,   33,   43,   44,   33,   33,   33,   33,   33,
       45,   46,   47,    1,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   33,   58,   59,   60,   61,
       62,   63,   33,   64,   65,   66,   67,   68,   69,   70,
       71,   33,   72,   73,   74,   75,    1,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76
    } ;

static yyconst flex_int32_t yy_meta[77] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
        7,    1,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   18,   18,   19,   20,   21,   22,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,    1,   24,    1,   25,   23,   23,
       23,   23,   23,   23,   23,   23,   26,   23,   23,   23,
       27,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   28,   29,   30,   31,   32
    } ;

static yyconst flex_int16_t yy_base[1378] =
    {   0,
        0,    0,    0,   75,  148,  223, 5062, 5061,  298,    0,
      374,    0,  450,  525,  600,  675,  750,    0,  826,    0,
       75,   76,   78,   81,  902,  977, 1052,    0, 1128,    0,
     1204,    0, 1280,    0,   86,   89, 1356,    0,   92,   93,
     1432,    0,  110,  123,  161,  172,   83,   97, 1508, 1584,
      100,  139,  113,  207,  212,  247,  133,  134, 1660,    0,
      248,  458,  144,  167, 1736,    0, 1812,    0,  238,  455,
      463,  465, 1888,    0,  168,  198,  490,  538, 1964,    0,
      199,  200,  120,  195, 5063, 9648, 9648,  581,  650, 5055,
     5051,  471, 5032,  246,  542, 2035, 2095,  612, 2163,  686,

     2237,  104,  254,  927,  939,  264,  482, 9648, 9648, 5051,
      528,  543, 1524, 5054, 9648, 9648, 9648,    0,  159,  573,
     9648,  639,  712, 1537, 2040, 5026,  721,  589,  511, 9648,
     9648, 5042,  647,  914, 5022, 1600, 9648, 9648, 2310,  986,
     1001, 1608, 9648, 2105, 1011, 1547, 2048, 2131, 5020, 1555,
      959, 9648, 9648,    0, 1573, 9648, 9648, 5035, 2078, 9648,
     9648, 5034, 2091, 9648, 9648, 5033, 1594, 2049, 2156, 9648,
     9648,    0, 2191, 2114, 9648, 2058, 2141, 2217, 2263, 5014,
     2226, 2196, 1034, 9648, 9648,    0, 5018, 2222, 9648, 5016,
     2273,    0, 9648, 2291, 9648, 9648,    0, 4986,  518, 9648,

     4987, 2333, 2299, 9648,    0, 4984, 9648,  275, 9648, 5024,
     4982,    0, 9648, 9648, 5009, 5012, 4973,  136, 9648, 9648,
     2303, 9648,  258, 9648, 9648,  476, 2347, 9648,  577, 9648,
     4972,    0, 9648, 9648,   57,  143,    0, 9648, 9648,  445,
     1588, 9648, 9648, 2359, 9648, 9648,    0, 2363,    0, 9648,
     9648, 9648, 9648, 2367, 9648, 9648, 2371, 9648, 9648,    0,
      187, 4971, 9648, 9648,    0,  248, 4970,    0, 9648, 4963,
     4955, 9648, 9648,    0, 4955,    0, 9648, 4983, 4952,    0,
     9648, 9648, 4924,  156, 9648, 9648, 4979, 4949,    0, 9648,
     4917,    0,    0, 9648, 9648, 1002,    0, 2412, 2480, 1560,

     2161, 4913, 4953, 9648,    0, 4935, 4931,    0,  274,  239,
     9648, 9648, 2555, 4924,  287, 4932,  665,  608,  160,  627,
      508,  536, 2376,  445,  579, 4891, 4875, 9648, 4923,  437,
     2630, 4865, 4878,  509, 9648, 9648,    0, 2378, 2425,  681,
     2272,  965, 2384, 2704,  649,  659, 2431,  730,  720, 2452,
      908, 2457, 2475,  934, 9648,  938, 1616, 2477, 2511, 4931,
     9648, 2065,  900, 2108, 1039, 9648, 2159, 4904, 9648,  566,
     4894,  899, 4878, 1620, 9648, 4842, 2517, 2584, 4876, 2602,
     2593, 2182, 2641, 2649, 2286, 1647, 9648, 4837, 2506, 2535,
     4869, 4886, 9648, 2227,  949, 2238, 2295, 9648, 2368, 4885,

      473, 2777, 2852, 4884, 9648, 2662, 2308, 2665, 4883, 2407,
     9648, 2710, 2659, 2691, 4865, 2735, 2744, 2611, 2809, 2802,
        0, 2877, 2771, 2827, 1642,    0, 2429, 9648, 4829, 4880,
     9648, 2448, 9648, 4827, 4878, 9648, 2458, 9648, 4825, 4876,
     9648, 2448, 2472, 2651, 2495, 9648, 2824, 2883, 2836,    0,
     2907, 4858, 2930, 2540, 9648, 4822, 2917, 2940, 4855, 2953,
     2963, 2971, 2981, 2989, 2544, 9648, 4819, 2993, 3007,    0,
     4853, 4862, 4851, 2555, 9648, 4810, 4846, 4807, 2589, 9648,
     4803,    0, 2620, 9648, 4799,    0, 4797, 2360, 9648, 4809,
     4806, 9648, 4844, 2631, 9648, 4793,    0, 4792, 1026, 4843,

     4842, 9648, 4789,    0, 9648, 9648, 4786, 4781, 2696, 9648,
     4780, 2335, 9648, 2411, 2730, 9648, 4779, 2762, 9648, 4786,
     4773,    0,  229, 4777, 4771,    0, 4767, 4773, 4776,   78,
     4765, 2740, 9648, 4764,    0, 2750, 9648, 4763,    0, 2814,
     9648, 4762, 2832, 9648, 4761,  906, 4810, 1021, 4793, 4757,
     1512, 4801, 1545, 4785, 4749,    0, 4798,  585,    0, 4744,
        0,  551, 4742,    0,    0, 4741, 4780,    0, 4737,    0,
     4734,    0, 9648, 4738, 4732, 4766,    0, 4767, 2375, 4724,
     9648, 9648, 4723, 3056, 4722, 4729, 9648, 4723,  576, 4687,
     4667,  656,  900, 2783,  916, 2889, 9648, 1503,  956,  969,

     4672, 4671, 4712, 2440, 3016,    0, 2469, 2526, 9648, 9648,
        0,    0,    0, 2976, 2999, 2512, 3024, 2522, 2739, 3034,
     9648, 3082, 3087, 2685, 2894, 3000, 3093,    0, 4672, 3116,
     3120, 4671, 4672, 3116, 3124, 3132,  481, 3189, 3161, 3198,
     3213, 4678, 2958, 3001, 4625, 4624, 4623, 3164, 3192, 3221,
     3251, 3162, 3277, 3285, 4622, 4620,    0,    0, 4657, 4618,
     4608, 4616, 4609, 4606,    0,    0, 4605, 4604, 4602, 4604,
     4595, 4585, 4584, 4583, 4574, 4585, 4575, 4578, 4582, 3030,
     4569, 4572, 4572, 4564, 4562, 4557, 4552, 4549,    0, 4548,
        0, 4547, 9648, 9648, 9648, 4545, 4573, 2716, 4539,    0,

     4538, 4575, 4536, 4532, 2254, 4530, 4577,    0, 3277, 2793,
     9648, 2056, 4525, 4524,  139, 2115, 4554, 3029, 2128, 3132,
     2093, 4526, 4483, 9648, 2840, 9648,    0, 3036, 3665, 3692,
     3136, 3246, 3247, 3308, 3312, 3223, 3676, 3319, 9648, 3338,
     3675, 3309, 3385, 3460, 3327, 9648, 3669, 3664, 3663, 3347,
        0, 3354, 3412, 3420, 3661, 3655, 3691, 3646, 3646, 3642,
     3640, 3638,    0, 3635, 3632, 3629, 3386, 3609, 3605, 3603,
     3593, 3599, 3588, 9648, 3582, 3565, 3565, 9648, 3556, 3565,
     3536, 3536, 3530, 3515, 3514, 3507, 3498, 3494, 3477, 3476,
     2898, 3475, 3468, 3499, 3448, 3443, 3442, 9648, 3471, 3473,

     9648, 3462, 3434, 3422, 2146, 3174, 3377, 9648, 2201, 3412,
     3414, 3038, 3383, 3360, 3447, 3492, 3493, 3394, 3388, 3495,
     3504, 3386, 3375, 3374, 3501, 3540, 3367, 3366, 3365, 3353,
     3354, 3348, 3343, 3331, 3330, 3321, 3306, 3299, 3288, 3303,
      969, 3284, 3288, 2894, 3284, 3284, 3278, 3274, 3272, 3261,
     3258, 3231, 3230,  649, 3211, 3221, 3211, 2181, 3213, 3205,
     3204, 3193, 3178, 3168, 3166, 3139, 3120, 3116, 3110, 3108,
     3106, 3134, 9648, 3085, 3098, 2170, 3476, 9648, 3119, 3496,
     3075, 3063, 3042, 9648, 3048, 3314, 3532, 3076, 3066, 3547,
     3553, 3065, 3064, 3060, 3550, 3583, 3606, 3054, 3046, 3045,

     9648, 3036, 3029, 3028, 3027, 3009, 3004, 2997, 2091, 2970,
     2957, 2956, 2956, 2945, 2930, 2924, 2927, 2911, 2919, 2911,
     2898, 2896, 9648, 2884,    0,    0, 2887, 9648, 2857, 3152,
     2853, 2846, 2851, 2845, 2843, 2839, 2825, 2824, 2823, 2818,
     2813, 2805, 2797, 2796, 2777, 2775, 2770, 2742, 2735, 2242,
     2767, 3593, 2707, 2700, 3170, 3494, 3578, 3570, 2706, 2687,
     3593, 3616, 2677, 2661, 2660, 3601, 2650, 2649, 2648, 2643,
     2639, 2628, 2616, 2615, 2603, 2613, 2608,    0, 2590, 2595,
     2585, 2580, 9648, 2587, 2565, 2557, 2546, 2545, 2535, 2526,
        0, 9648, 9648, 2521, 2530, 9648, 2528, 2515, 2487, 2486,

     2468, 2459, 2448, 2439, 2421, 2419, 2405, 2400, 2371, 2364,
     2353, 2339, 2334, 2326, 2319, 3641, 2345, 2341, 3636, 3646,
     3648, 3507, 9648, 9648, 3613, 3649, 9648, 9648, 9648, 3652,
     9648, 9648, 9648, 9648, 9648, 9648, 9648, 9648, 9648, 2291,
     9648, 2284, 2263, 2252, 2248, 2258, 2241, 2225, 9648, 9648,
     9648, 9648, 9648, 2216, 2216, 3172, 2214, 2216, 9648, 9648,
     9648, 9648, 9648, 9648, 9648, 9648, 9648, 9648, 9648, 9648,
     2214, 2171, 3653, 9648, 9648, 9648, 3224, 3658, 2144, 3672,
     2076, 2076, 2056, 2055, 2031, 2008, 1999, 1997, 1993, 1992,
     9648, 1985, 1995, 9648, 9648, 1616, 3676, 3300,  913, 3680,

     1575, 1567, 1556, 1545, 1536, 1490, 1476, 1466, 1481, 3223,
      985,  951, 3367,  565, 3681,  937,  673,  679,  677,  643,
      507, 9648, 3225,  486, 3333, 2162, 3682,  442,  408, 3438,
     9648,  216, 3446,  665,  196, 3466,   50, 1527,   16, 3579,
      604, 9648, 3686, 9648, 3740, 3772, 3804, 3836, 3868, 3900,
     3932, 3964, 3996, 4028, 4060, 4092, 4124, 4156, 4188, 4220,
     4252, 4284, 4316, 4348, 4380, 4412, 4444, 4476, 4508, 4540,
     4565, 4585, 4602, 4623, 4642, 4663, 4694, 4720, 4752, 4762,
     4779, 4810, 4841, 4872, 4904, 4930, 4962, 4989, 5020, 5051,
     5082, 5100, 5132, 5164, 5196, 5222, 5232, 5263, 5294, 5325,

     5356, 5366, 5383, 5401, 5433, 5451, 5483, 5515, 5546, 5563,
     5595, 5627, 5658, 5685, 5717, 5735, 5767, 5777, 5794, 5804,
     5821, 5853, 5871, 5903, 5935, 5955, 5987, 6019, 6051, 6077,
     6108, 6118, 6133, 6153, 6166, 6193, 6203, 6220, 6235, 6261,
     6288, 6314, 6340, 6372, 6389, 6414, 6445, 6476, 6507, 6539,
     6554, 6586, 6612, 6638, 6670, 6702, 6729, 6755, 6786, 6817,
     6848, 6880, 6911, 6929, 6961, 6993, 7025, 7051, 7077, 7108,
     7118, 7149, 7180, 7211, 7242, 7257, 7274, 7299, 7317, 7349,
     7367, 7399, 7431, 7456, 7474, 7506, 7538, 7569, 7596, 7628,
     7646, 7678, 7695, 7720, 7737, 7762, 7794, 7812, 7844, 7876,

     3682, 7896, 7911, 7943, 7975, 7990, 8022, 8040, 8055, 8082,
     8114, 8145, 3688, 8171, 8198, 8216, 3694, 8242, 8263, 8289,
     8299, 8331, 8346, 8372, 8398, 8430, 8457, 8484, 8516, 8547,
     8573, 8599, 8630, 8661, 8692, 8707, 8717, 8734, 8744, 8759,
     8791, 8801, 8811, 3708, 8831, 8863, 8881, 8898, 8925, 4551,
     8956, 8983, 8993, 9019, 9045, 9068, 9100, 9126, 9158, 9185,
     9211, 9221, 9252, 9283, 9300, 9315, 9333, 9360, 9391, 9423,
     9455, 9487, 9519, 9551, 9583, 9615, 4556
    } ;

static yyconst flex_int16_t yy_def[1378] =
    {   0,
     1145, 1145, 1144,    3, 1146, 1146, 1147, 1147, 1144,    9,
     1144,   11, 1148, 1148, 1149, 1149, 1144,   17, 1144,   19,
     1150, 1150, 1151, 1151, 1152, 1152, 1144,   27, 1144,   29,
     1144,   31, 1144,   33, 1153, 1153, 1144,   37, 1154, 1154,
     1144,   41, 1155, 1155, 1156, 1156, 1157, 1157, 1158, 1158,
     1159, 1159, 1160, 1160, 1161, 1161, 1162, 1162, 1144,   59,
     1163, 1163, 1164, 1164, 1144,   65, 1144,   67, 1165, 1165,
     1165, 1165, 1144,   73, 1166, 1166, 1167, 1167, 1144,   79,
     1168, 1168, 1169, 1169, 1144, 1144, 1144, 1144, 1144, 1170,
     1171, 1144, 1172, 1172, 1173, 1144, 1174, 1175, 1176, 1175,

     1144, 1144, 1172, 1172, 1173, 1172, 1144, 1144, 1144, 1177,
     1178, 1178, 1178, 1179, 1144, 1144, 1144, 1180, 1181, 1144,
     1144, 1144, 1144, 1182, 1182, 1144, 1183, 1144, 1184, 1144,
     1144, 1185, 1186, 1186, 1144, 1186, 1144, 1144, 1187, 1188,
     1188, 1188, 1144, 1188, 1144, 1144, 1189, 1189, 1144, 1190,
     1191, 1144, 1144, 1192, 1144, 1144, 1144, 1193, 1144, 1144,
     1144, 1194, 1144, 1144, 1144, 1195, 1196, 1196, 1196, 1144,
     1144, 1197, 1198, 1144, 1144, 1144, 1144, 1199, 1199, 1144,
     1200, 1144, 1201, 1144, 1144, 1202, 1203, 1144, 1144, 1204,
     1144, 1205, 1144, 1144, 1144, 1144, 1206, 1144, 1207, 1144,

     1208, 1144, 1209, 1144, 1210, 1144, 1144, 1144, 1144, 1211,
     1144, 1212, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1213, 1144, 1144, 1213, 1144, 1144, 1144, 1144,
     1144, 1214, 1144, 1144, 1144, 1144, 1215, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1216, 1144, 1217, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1218,
     1219, 1144, 1144, 1144, 1220, 1221, 1144, 1222, 1144, 1144,
     1144, 1144, 1144, 1223, 1144, 1224, 1144, 1144, 1144, 1225,
     1144, 1144, 1144, 1144, 1144, 1144, 1226, 1144, 1227, 1144,
     1144, 1228, 1228, 1144, 1144, 1144, 1229, 1230, 1230, 1144,

     1144, 1144, 1231, 1144, 1232, 1233, 1234, 1235, 1144, 1234,
     1144, 1144, 1236, 1234, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1237,
     1230, 1237,  331,  331, 1144, 1144, 1238, 1239, 1239, 1240,
     1240, 1240, 1240, 1144, 1229, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1234, 1144, 1144, 1234, 1234, 1144, 1144, 1241,
     1144, 1242, 1243, 1242, 1144, 1144, 1242, 1244, 1144, 1245,
     1246, 1245, 1144, 1144, 1144, 1144, 1144, 1247, 1144, 1247,
     1248, 1249, 1247, 1248, 1250, 1144, 1144, 1144, 1249, 1249,
     1251, 1252, 1144, 1253, 1254, 1253, 1144, 1144, 1253, 1255,

     1255, 1256, 1256, 1255, 1144, 1257, 1258, 1257, 1255, 1144,
     1144, 1257, 1144, 1259, 1144, 1259, 1260, 1261, 1259, 1144,
     1262, 1260, 1261, 1261, 1263, 1264, 1144, 1144, 1144, 1265,
     1144, 1144, 1144, 1144, 1266, 1144, 1144, 1144, 1144, 1267,
     1144, 1268, 1269, 1268, 1144, 1144, 1268, 1270, 1144, 1271,
     1270, 1144, 1272, 1144, 1144, 1144, 1144, 1273, 1144, 1273,
     1274, 1275, 1273, 1274, 1144, 1144, 1144, 1275, 1275, 1276,
     1277, 1278, 1277, 1144, 1144, 1144, 1279, 1144, 1144, 1144,
     1144, 1280, 1144, 1144, 1144, 1281, 1144, 1282, 1144, 1283,
     1144, 1144, 1284, 1144, 1144, 1144, 1285, 1144, 1144, 1286,

     1286, 1144, 1144, 1287, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1288, 1144, 1288, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1289, 1144, 1144, 1144, 1290, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1291, 1144, 1144, 1144, 1292, 1144,
     1144, 1144, 1144, 1144, 1144, 1293, 1294, 1293, 1144, 1144,
     1295, 1296, 1295, 1144, 1144, 1297, 1144, 1144, 1298, 1144,
     1299, 1144, 1144, 1300, 1301, 1144, 1302, 1303, 1144, 1304,
     1144, 1305, 1144, 1144, 1144, 1306, 1307, 1308, 1144, 1309,
     1144, 1144, 1309, 1310, 1309, 1308, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1311, 1144, 1144, 1144, 1144,

     1144, 1144, 1144, 1312, 1312, 1313, 1144, 1314, 1144, 1144,
     1315, 1316, 1317, 1318, 1318, 1144, 1144, 1144, 1144, 1144,
     1144, 1309, 1144, 1144, 1319, 1319, 1320, 1321, 1144, 1322,
     1322, 1144, 1323, 1324, 1324, 1325, 1144, 1326, 1327, 1327,
     1328, 1329, 1144, 1330, 1144, 1144, 1144, 1331, 1331, 1332,
     1333, 1334, 1335, 1335, 1144, 1144, 1336, 1337, 1338, 1144,
     1144, 1144, 1144, 1144, 1339, 1340, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1341, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1342, 1144,
     1343, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1344,

     1144, 1345, 1144, 1144, 1144, 1144, 1346, 1347, 1348, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1349, 1349, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1350, 1351, 1352, 1353,
     1354, 1354, 1144, 1144, 1355, 1356, 1144, 1357, 1144, 1357,
     1144, 1358, 1359, 1359, 1360, 1144, 1144, 1144, 1144, 1361,
     1362, 1363, 1363, 1364, 1144, 1144, 1365, 1144, 1144, 1144,
     1144, 1144, 1366, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1345, 1144, 1144, 1144, 1144, 1367, 1348,

     1144, 1144, 1144, 1144, 1144, 1144, 1368, 1144, 1144, 1144,
     1144, 1351, 1144, 1354, 1354, 1144, 1356, 1144, 1144, 1358,
     1360, 1144, 1144, 1144, 1361, 1369, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1370,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1367, 1144, 1144, 1144, 1144, 1371, 1144, 1368, 1368,
     1144, 1144, 1351, 1144, 1354, 1354, 1356, 1144, 1144, 1358,
     1360, 1144, 1144, 1144, 1361, 1369, 1369, 1144, 1144, 1144,

     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1372, 1373, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1371, 1371, 1144, 1144, 1351, 1354, 1354, 1356, 1144, 1144,
     1358, 1360, 1144, 1144, 1144, 1361, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1374, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1375, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,

     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1351, 1354,
     1354, 1356, 1144, 1144, 1358, 1360, 1144, 1144, 1144, 1361,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1376, 1144, 1144, 1144, 1351, 1144, 1377, 1354,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1376, 1376, 1351, 1377, 1354,

     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1351, 1377, 1354, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1351, 1377, 1354, 1144, 1144, 1144,
     1144, 1144, 1144, 1377, 1144, 1144, 1144, 1377, 1144, 1144,
     1377, 1144, 1377,    0, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,

     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,

     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144
    } ;

static yyconst flex_int16_t yy_nxt[9725] =
    {   0,
       87,   88,   89,   87,   88,   87,   90,   87,   91,   87,
       87,   87,   92,   87,   87,   93,   87,   94,   95,   87,
       93,   93,   93,   87,   96,   87,   97,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   87,   99,   87,  100,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   87,   87,   87,   87,   87,  101,  157,  157,  101,
      161,  158,  158,  161,  162,  220,  978,  162,  193,  102,
      103,  193,  104,  105,  200,  200,  106,  106,  107,  220,

       86,  229,  230,   86,  229,  351,  201,  201,  351,  523,
     1140,  208,  209,  524,  208,  233,  210,  234,  202,  202,
      159,  159,  293,  163,  208,  209,  163,  208,  221,  210,
      682,  194,  294,  295,  194,  243,  243,  203,  203,  235,
      229,  230,  221,  229,  683,  231,  256,  107,  108,  108,
      109,  108,  108,  108,  110,  211,  108,  108,  236,  108,
      108,  108,  108,  213,  108,  214,  108,  112,  211,  256,
      277,  112,  108,  108,  213,  215,  214,  371,  244,  244,
      216,  805,  373,  508,  231,  278,  215,  217,  507,  257,
      525,  216,  108,  113,  108,  523,  594,  293,  217,  524,

      277,  290,  290,  566,  805,  547,  218,  294,  295,  233,
      549,  234,  257,  279,  238,  278,  239,  218,  594,  108,
      108,  108,  108,  108,  108,  109,  108,  108,  108,  110,
      565,  108,  108,  235,  108,  108,  108,  108,  240,  108,
      269,  108,  112,  279,  291,  291,  112,  108,  108,  238,
      250,  239,  236,  309, 1139,  351,  580,  241,  351,  512,
      251,  252,  512,  310,  270,  308,  552,  108,  113,  108,
      513,  554,  308,  240,  253,  579,  499, 1137,  579,  499,
      308,  500,  356,  270,  357,  357,  357,  675,  587,  676,
      308,  587,  241,  254,  108,  108,  108,  108,  116,  116,

      117,  116,  116,  116,  116,  116,  118,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  116,  120,  116,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  116,
      116,  116,  116,  119,  121,  122,  123,  122,  122,  121,
      121,  121,  124,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  125,  121,  121,  121,  121,  126,  121,  121,

      121,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  121,  128,
      121,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  121,  121,  121,  129,  127,
      130,  130,  131,  130,  130,  130,  132,  269,  130,  130,
      250,  130,  130,  130,  130,  269,  130,  269,  130,  134,
      251,  252,  600,  134,  135,  130,  297, 1144,  978,  637,
     1144,  270,  297,  358,  253,  297,  358,  405, 1144,  271,
      605,  271,  281,  600,  130,  136,  130,  527,  404,  359,

      270,  528, 1135,  254,  282,  350,  405,  529,  271,  530,
      271,  606,  389,  389,  389,  389,  283,  609,  297,  390,
      489,  130,  130,  130,  130,  130,  130,  131,  130,  130,
      130,  132,  490,  130,  130,  284,  130,  130,  130,  130,
      281,  130, 1132,  130,  134,  595,  363,  364,  134,  135,
      130,  364,  282,  610,  350,  311,  697,  307,  312,  307,
      313, 1144,  364,  491,  283, 1130,  364,  595,  308,  130,
      136,  130,  594,  364,  374,  375,  698,  374,  518,  519,
      611,  518,  296,  284,  371,  296,  297,  315,  364,  373,
      386,  387,  297,  386,  594,  297,  130,  130,  130,  130,

      137,  137,  138,  137,  137,  137,  139,  298,  137,  137,
      613,  137,  137,  137,  137,  594,  137,  712,  137,  141,
      376, 1126,  520,  141,  142,  143,  299,  307,  297,  307,
      307,  694,  307,  307,  307,  592,  388,  594,  308,  712,
      377,  377,  377,  377,  137,  144,  137,  593,  594,  613,
      616,  300,  301,  616,  300,  297,  592,  378,  695,  339,
      351,  297,  379,  351,  297,  395,  396, 1143,  594,  593,
      396,  137,  137,  137,  137,  137,  137,  138,  137,  137,
      137,  139,  607,  137,  137,  607,  137,  137,  137,  137,
      594,  137,  396,  137,  141,  302,  715,  297,  141,  142,

      143,  307,  928,  307,  307,  589,  307,  307,  307,  929,
      613,  978,  308,  377,  377,  377,  377, 1138,  715,  137,
      144,  137,  377,  377,  377,  377,  613,  589,  590,  591,
      378,  354,  355,  339,  354,  379,  978, 1129,  618,  378,
      619,  619,  619,  978,  379,  385,  137,  137,  137,  137,
      121,  145,  146,  145,  145,  121,  121,  121,  147,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  148,  121,
      121,  121,  121,  149,  121,  121,  121,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  121,  128,  121,  150,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  121,  121,  121,  151,  150,  152,  152,  153,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      152,  155,  152,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  152,  152,  152,

      152,  154,  164,  164,  165,  164,  164,  164,  166,  351,
      164,  164,  351,  164,  164,  164,  164,  371,  164,  626,
      164,  168,  373,  626,  547,  168,  164,  164,  352,  549,
      716,  352, 1144,  396,  309,  354,  355,  396,  354,  624,
      354,  355,  624,  354,  353,  626,  164,  169,  164,  594,
      350,  716,  311,  308,  307,  312,  307,  313,  613,  396,
      423,  423,  423,  423,  308,  308,  607,  424,  635,  607,
      594, 1114,  635,  164,  164,  164,  164,  164,  164,  165,
      164,  164,  164,  166,  315,  164,  164,  720,  164,  164,
      164,  164,  405,  164,  635,  164,  168,  721, 1128,  350,

      168,  164,  164,  296,  407,  408,  296, 1144,  720,  408,
      613,  405,  413,  413,  413,  413, 1124,  912,  721, 1144,
      408,  164,  169,  164,  408,  615, 1144,  499,  298,  414,
      499,  408,  500,  913,  415,  468,  468,  468,  468,  547,
      365,  366,  469,  365,  549, 1123,  408,  299,  164,  164,
      164,  164,  170,  170,  171,  170,  170,  170,  170,  170,
      172,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  170,  174,  170,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  170,  170,  170,  170,  173,  175,  176,
      177,  176,  176,  175,  175,  175,  178,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  179,  175,  175,  175,
      175,  180,  175,  175,  175,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  175,  182,  175,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  175,

      175,  175,  183,  181,  184,  184,  185,  184,  184,  184,
      184,  184,  186,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  184,  188,
      184,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  184,  184,  184,  184,  187,
       86,   86,  189,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,   86,  191,   86,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,   86,   86,   86,   86,  190,  195,  195,  196,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,

      195,  198,  195,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  195,  195,  195,
      195,  197,   86,   86,  204,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,   86,  206,   86,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,   86,   86,   86,   86,  205,  222,  223,
      224,  222,  223,  222,  222,  222,  222,  222,  222,  222,
      225,  222,  222,  222,  222,  365,  366,  222,  365, 1121,
      552,  222,  222,  222,  222,  554,  978, 1120,  377,  377,
      377,  377, 1144,  364,  719,  380, 1119,  364,  413,  413,
      413,  413,  222,  227,  222,  378,  420,  413,  413,  420,
      379,  300,  301,  552,  300,  414,  719,  421,  554,  364,
      415,  367,  613,  414,  427,  428, 1141,  427,  415,  222,
      222,  222,  222,  222,  222,  223,  224,  222,  223,  222,
      222,  222,  222,  222,  222,  222,  225,  222,  222,  222,

      222,  397,  398,  222,  397,  302,  978,  222,  222,  222,
      222,  382,  443,  444,  409,  978, 1118,  444, 1144,  396,
      429,  374,  375,  396,  374, 1117, 1144,  408,  222,  227,
      222,  408, 1116,  405,  356,  531,  357,  357,  357,  444,
      527, 1074,  308,  643,  528,  396,  643,  399,  386,  387,
      529,  386,  530,  408,  421,  222,  222,  222,  222,  222,
      245,  245,  246,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  245,  248,  245,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  245,  245,  245,  245,  247,  258,  258,  259,  258,
      258,  258,  258,  258,  260,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      258,  262,  258,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  258,  258,  258,
      258,  261,  263,  263,  264,  263,  263,  263,  263,  263,
      265,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  263,  267,  263,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  263,  263,  263,  263,  266,  272,  272,
      273,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  272,  275,  272,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  272,
      272,  272,  272,  274,  285,  285,  286,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  287,  287,  287,  285,  285,  285,
      285,  287,  287,  287,  287,  287,  287,  287,  287,  287,

      287,  287,  287,  287,  287,  287,  287,  287,  285,  288,
      285,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  285,  285,  285,  285,  287,
      316,  383,  383,  383,  383, 1112, 1111, 1110,  380,  413,
      413,  413,  413, 1109,  317, 1108,  416, 1107,  378,  457,
      457,  457,  457,  379,  318,  319,  414, 1144,  444,  320,
      321,  415,  444, 1106,  322,  323,  458,  324,  325,  432,
      433,  459,  432,  363,  364,  318,  319,  802,  364, 1105,
      320,  321,  437,  438,  444,  437,  322,  323,  326,  327,

      324,  325,  328,  328,  328,  328,  410,  411,  802,  410,
      364, 1144,  329, 1104,  382,  454,  455, 1103,  454,  328,
      328,  330,  418, 1144,  408,  434, 1144,  364,  408,  809,
     1144,  364,  419,  419,  419,  419, 1102, 1101,  439,  416,
      332,  977,  457,  457,  457,  457,  806,  333,  334,  414,
      408,  809,  412,  364,  415,  594,  978,  445,  446,  458,
      445,  456,  300,  301,  459,  300,  335,  806,  336,  337,
      328,  328,  328,  328, 1144,  444,  594,  363,  364,  444,
      329,  876,  364,  389,  389,  389,  389,  328,  328,  332,
      390, 1099,  449,  449,  449,  449, 1095,  465,  466,  450,

      465,  444,  876,  447,  364,  418,  302,  613,  330,  950,
      341,  451,  451,  451,  452,  342,  343,  627,  457,  457,
      457,  457, 1134,  474,  475,  460,  474,  457,  457,  457,
      457,  950,  594,  933,  335,  458,  336,  337,  344, 1094,
      459,  344,  297,  467,  458,  395,  396,  934,  297,  459,
      396,  345,  346,  594,  347,  348, 1144,  396,  349,  349,
      350,  396,  726,  298,  463,  463,  463,  463, 1093,  476,
     1092,  460,  396,  607,  479,  480,  607,  479, 1090, 1089,
     1016,  458,  299,  396,  297, 1088,  459,  631,  631,  631,
      631,  462,  483,  484, 1087,  483,  397,  398,  726,  397,

      494,  495, 1016,  494,  509,  510, 1086,  509, 1085,  350,
      400,  400, 1084,  400,  400,  400,  401,  613,  400,  400,
      481,  400,  400,  400,  400,  726,  400,  640,  400,  403,
      614,  640, 1083,  403,  400,  404,  512,  462,  485,  512,
      492,  492,  492,  492,  493, 1082,  496,  513,  515,  516,
      511,  515, 1081,  640,  400,  403,  400,  492,  492,  493,
      532,  533,  489,  532,  536,  537, 1076,  536,  540,  541,
     1075,  540,  543,  544,  490,  543,  579,  596,  492,  579,
      596,  400,  400,  400,  400,  607,  395,  396,  607, 1072,
     1071,  396,  609,  307,  517,  307,  307,  301,  307,  307,

      307,  597, 1070,  598,  308,  491,  534,  492,  410,  411,
      538,  410, 1144,  396,  542, 1144, 1069,  599,  545,  328,
      328,  328,  328, 1144,  598,  339,  636, 1068,  610,  613,
      427,  428,  352,  427, 1067,  352,  328,  328,  574,  599,
      307,  725,  307,  307,  725,  307,  307,  307,  617,  432,
      433,  308,  432,  358,  350,  611,  358,  328,  352,  437,
      438,  352,  437, 1066,  333,  334,  443,  444, 1065,  359,
      607,  444,  339,  607,  359,  350,  620,  621,  358,  620,
      350,  358, 1064,  335, 1063,  336,  337,  328,  328,  328,
      328,  649,  622,  444,  359,  649,  445,  446,  623,  445,

      350,  308, 1062,  350,  328,  328,  328,  389,  389,  389,
      389, 1061,  358,  351,  390,  358,  351,  649,  377,  377,
      377,  377, 1060,  624,  350,  574,  624,  607,  617,  350,
      607, 1059,  333,  334,  350,  378, 1144, 1144, 1144, 1144,
      379,  454,  455, 1144,  454,  465,  466,  623,  465,  350,
     1058,  335, 1057,  336,  337,  581,  474,  475,  581,  474,
      581,  581,  581,  581,  581,  581,  581,  581,  582,  581,
      583,  581,  583,  584,  581, 1056, 1055,  728,  581,  581,
      581,  586, 1054,  350, 1053,  383,  383,  383,  383,  519,
      479,  480,  380,  479,  377,  377,  377,  377, 1051,  581,

      581,  581,  378, 1144, 1144, 1144, 1144,  379, 1050, 1049,
     1144,  378,  423,  423,  423,  423,  379,  385, 1048,  424,
     1144,  483,  484, 1047,  483, 1144,  581,  581,  581,  581,
      581,  607,  494,  495,  607,  494, 1046, 1144, 1144, 1144,
     1144, 1045,  383,  383,  383,  383, 1044, 1043, 1042,  380,
      377,  377,  377,  377, 1144, 1144, 1144, 1040,  382,  378,
      413,  413,  413,  413,  379,  978, 1039,  378,  405, 1144,
      444, 1144,  379,  385,  444, 1144, 1144,  414, 1038, 1037,
      407,  408,  415, 1144,  408,  408,  624,  405,  408,  624,
     1144, 1036,  419,  419,  419,  419,  444,  509,  510,  416,

      509, 1144, 1035, 1144, 1144,  344, 1034,  408,  344,  414,
      408, 1033, 1032, 1031,  415,  382,  405,  791,  346,  346,
      791,  347,  348, 1029, 1028,  349,  349,  350,  407,  408,
      298,  515,  516,  408,  515,  405, 1144, 1144, 1144, 1144,
     1027,  532,  533, 1144,  532,  420,  413,  413,  420,  299,
     1024,  536,  537, 1144,  536,  408,  421,  618, 1144,  619,
      619,  619,  414,  518,  519,  418,  518,  415,  641, 1023,
     1018, 1017,  423,  423,  423,  423,  350,  400,  400,  424,
      400,  400,  400,  637,  596,  400,  400,  596,  400,  400,
      400,  400,  878,  400,  801,  638,  403,  801, 1015, 1014,

      403,  400,  404,  420,  413,  413,  420,  520,  597, 1144,
      419,  419,  419,  419,  421,  540,  541,  416,  540, 1013,
      414,  400,  403,  400, 1012,  415, 1011,  414, 1144, 1144,
     1144, 1144,  415,  543,  544, 1144,  543,  449,  449,  449,
      449,  725,  443,  444,  725, 1010, 1009,  444,  400,  400,
      400,  400,  400,  400, 1008,  400,  400,  400,  637,  452,
      400,  400, 1007,  400,  400,  400,  400, 1006,  400,  444,
      400,  403, 1005, 1004, 1003,  403,  400,  400,  420,  413,
      413,  420,  650,  418,  449,  449,  449,  449, 1002,  421,
      718,  450, 1001,  718, 1000,  414,  400,  403,  400,  791,

      415,  999,  791,  451,  451,  451,  452,  998,  449,  449,
      449,  449,  363,  626,  597,  450,  997,  626,  457,  457,
      457,  457,  995,  400,  400,  400,  400,  451,  451,  451,
      452,  449,  449,  449,  449,  458,  994,  991,  450,  626,
      459,  463,  463,  463,  463,  990,  916,  989,  460,  917,
      653,  653,  653,  452, 1144, 1144, 1144, 1144,  458,  643,
      988, 1144,  643,  459,  457,  457,  457,  457,  987,  986,
      421, 1144,  468,  468,  468,  468, 1144,  607,  985,  469,
      607,  458,  463,  463,  463,  463,  459,  984,  983,  460,
      457,  457,  457,  457,  468,  468,  468,  468,  982,  458,

      607,  469,  643,  607,  459,  643,  978,  458, 1144, 1144,
     1144, 1144,  459,  421,  462, 1144,  981,  725, 1144,  626,
      725,  613,  980,  626,  726,  620,  621, 1144,  620,  979,
      718,  778,  731,  718,  778,  620,  621,  607,  620,  607,
      607,  733,  607,  607,  613,  626,  607,  623,  976,  607,
      732,  734,  607,  975,  597,  462,  581,  623,  974,  581,
      726,  581,  581,  581,  581,  581,  581,  581,  581,  582,
      581,  583,  581,  583,  709,  581,  973,  972,  971,  581,
      581,  581,  586,  620,  621,  970,  620,  726,  620,  621,
      779,  620,  812,  613,  969,  968,  623,  956,  883,  735,

      581,  710,  581,  967,  734,  623,  623,  955,  308,  965,
      623,  363,  364,  964,  963,  960,  364,  738,  738,  738,
      738,  740,  740,  740,  740,  959,  954,  581,  581,  581,
      581,  581,  953,  807,  395,  635,  807,  607,  364,  635,
      607,  739, 1144,  635,  808,  739,  949,  635,  948,  736,
      395,  396,  708,  996,  623,  396,  996,  808,  947,  623,
      946,  635,  945,  754,  754,  754,  754,  405,  944,  635,
      450,  607,  943, 1091,  607,  877, 1091,  396,  877,  407,
      640,  613,  443,  649,  640,  452,  405,  649,  742,  400,
      400,  942,  400,  400,  400,  637,  814,  400,  400,  878,

      400,  400,  400,  400, 1144,  400,  640,  400,  744,  649,
     1144,  649,  744,  400,  400,  649, 1144,  640,  941,  405,
      940,  640, 1019, 1144, 1122,  607, 1131, 1122,  607, 1131,
      939,  407,  408,  400,  744,  400,  408,  649,  405,  443,
      444,  363,  364,  640,  444,  938,  364,  607,  620,  621,
      607,  620,  449,  449,  449,  449,  937,  936,  408,  751,
      400,  400,  400,  400,  733,  935,  444,  932,  364,  745,
      623,  752,  752,  752,  452,  931,  930,  750,  449,  449,
      449,  449,  927,  817, 1098,  450,  449,  449,  449,  449,
      311,  613,  307,  450,  307,  800,  926,  653,  653,  653,

      452,  607,  815,  308,  607,  653,  653,  653,  452,  620,
      621,  925,  620,  620,  621,  607,  620,  924,  607,  623,
      738,  738,  738,  738,  922,  816,  921,  395,  396,  735,
      920,  623,  396,  405, 1133,  623,  919, 1133,  308,  740,
      740,  740,  740,  918,  739,  407,  408,  915, 1113,  914,
      408,  911,  405,  910,  396,  449,  449,  449,  449,  613,
      909,  607,  751,  739,  607,  443,  444,  908,  607,  820,
      444,  607,  408,  907,  752,  752,  752,  452,  880,  957,
      623,  880,  906,  905,  623,  400,  400,  821,  400,  400,
      400,  637,  444,  400,  400,  904,  400,  400,  400,  400,

      903,  400,  808,  638,  744,  613,  902,  825,  744,  400,
      404,  901,  885,  449,  449,  449,  449,  900,  899,  898,
      751,  754,  754,  754,  754, 1125,  894,  893,  450,  400,
      744,  400,  752,  752,  752,  452,  837,  838,  892, 1136,
      889,  839, 1136,  452,  840,  841,  888, 1133,  607,  842,
     1133,  607,  843,  844,  884,  845,  400,  400,  400,  400,
      400,  400,  882,  400,  400,  400,  637, 1136,  400,  400,
     1136,  400,  400,  400,  400,  881,  400,  952,  400,  744,
      952,  875,  874,  744,  400,  400,  311,  873,  307,  708,
      307,  800,  613,  620,  621,  607,  620,  880,  607,  308,

      880,  878,  871,  870,  400,  744,  400,  886,  869,  733,
      405,  363,  364,  395,  396,  623,  364,  568,  396,  443,
      444,  808,  407,  408,  444,  363,  364,  408,  868,  405,
      364,  400,  400,  400,  400,  867,  866,  865,  364,  613,
      396,  449,  449,  449,  449,  887,  444,  890,  751,  408,
      363,  364,  364,  895,  864,  364,  891, 1020,  863,  405,
      896,  896,  896,  452,  623,  395,  396,  862,  443,  444,
      396,  407,  408,  444,  861,  860,  408,  364,  405,  607,
     1142,  958,  607, 1142,  449,  449,  449,  449,  363,  364,
      859,  751,  396,  364,  952,  444,  961,  952,  408,  966,

      858,  857,  962,  896,  896,  896,  452,  449,  449,  449,
      449,  395,  396,  856,  751,  364,  396,  855,  878,  443,
      444,  854,  405,  613,  444,  853,  896,  896,  896,  452,
     1021,  395,  396, 1022,  407,  408,  396,  607,  396,  408,
      607,  405, 1073,  852,  851, 1073,  444, 1078,  301,  607,
     1078,  850,  607,  849, 1097,  405, 1025, 1097,  396, 1078,
      301,  408, 1078,  848, 1030,  847, 1074,  407,  408,  846,
      443,  444,  408,  607,  405,  444,  607, 1097, 1074, 1026,
     1097,  607,  607, 1133,  607,  607, 1133,  300,  301,  836,
      300, 1079,  835,  613,  408,  834,  700,  444,  833, 1077,

      832, 1074,  831,  302,  700,  830,  829,  700,  700,  472,
      727, 1080,  727,  727,  727,  828,  730,  613,  730,  730,
      730,  827,  700,  824,  823,  613,  613,  613, 1115,  822,
      700, 1079, 1100,  700,  700,  819,  818,  613,  813, 1127,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,

      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,

      289,  289,  289,  289,  289,  289,  289,  289,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      303,  303,  811,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  306,  727,  810,  727,  727,  727,  730,  597,
      730,  730,  730,  804,  803,  798,  797,  306,  796,  306,
      306,  306,  795,  568,  793,  792,  306,  307,  698,  307,

      307,  790,  307,  789,  788,  787,  307,  307,  786,  307,
      307,  307,  314,  785,  314,  314,  314,  314,  784,  314,
      783,  782,  781,  314,  314,  314,  314,  314,  314,  331,
      331,  331,  780,  777,  776,  775,  773,  331,  772,  771,
      770,  769,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  768,  331,  331,  338,  767,  338,  338,  766,  338,
      765,  764,  762,  338,  338,  761,  338,  338,  338,  340,
      340,  340,  760,  759,  758,  472,  756,  340,  755,  749,
      748,  747,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  746,  340,  340,  360,  360,  385,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  362,  741,  737,  724,
      723,  722,  362,  714,  362,  362,  362,  362,  362,  713,
      711,  362,  362,  362,  362,  362,  362, 1144,  308,  308,
      308,  362,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  370,  708,  370,  370,  370,  577,
      706,  705,  704,  370,  372,  703,  372,  372,  568,  701,

      699,  372,  696,  372,  372,  372,  693,  692,  552,  691,
      372,  381,  381,  381,  381,  690,  547,  381,  689,  688,
      687,  686,  685,  684,  681,  381,  680,  679,  381,  678,
      677,  674,  381,  521,  381,  381,  381,  673,  672,  671,
      381,  381,  384,  384,  384,  384,  670,  669,  502,  502,
      668,  667,  665,  496,  491,  664,  384,  663,  384,  384,
      384,  662,  661,  384,  478,  384,  384,  384,  660,  472,
      658,  472,  384,  391,  391,  391,  391,  656,  458,  391,
      655,  652,  441,  647,  436,  646,  431,  645,  414,  637,
      637,  637,  393,  385,  391,  632,  391,  391,  391,  378,

      629,  371,  628,  391,  392,  392,  369,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  394,  361,  608,  606,
      603,  602,  394,  601,  394,  394,  394,  394,  394,  588,
      308,  394,  394,  394,  394,  394,  394,  308,  577,  304,
      575,  394,  402,  402,  571,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  406,  406,  569,  568,  565,  563,

      562,  406,  560,  406,  406,  406,  406,  406,  558,  406,
      406,  406,  406,  406,  406,  406,  557,  555,  550,  521,
      406,  417,  417,  417,  417,  507,  506,  417,  505,  503,
      502,  498,  491,  487,  478,  417,  472,  458,  417,  441,
      436,  431,  417,  414,  417,  417,  417,  393,  393,  378,
      417,  417,  422,  422,  422,  422,  369,  361,  308,  305,
      422,  304, 1144,  115,  115, 1144,  422, 1144,  422,  422,
     1144, 1144, 1144,  422, 1144,  422,  422,  422, 1144, 1144,
     1144, 1144,  422,  425,  425,  425,  425, 1144, 1144,  425,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,

     1144, 1144, 1144, 1144,  425, 1144,  425,  425,  425, 1144,
     1144, 1144, 1144,  425,  426, 1144, 1144,  426, 1144, 1144,
     1144, 1144,  426, 1144,  426,  426,  426, 1144, 1144, 1144,
     1144,  426,  430,  430, 1144,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  435,  435, 1144,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  440,  440, 1144,  440,

      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  442, 1144,
     1144, 1144, 1144, 1144,  442, 1144,  442,  442,  442,  442,
      442, 1144, 1144,  442,  442,  442,  442,  442,  442, 1144,
     1144, 1144, 1144,  442,  448, 1144,  448,  448,  448, 1144,
     1144, 1144, 1144,  448,  453,  453,  453,  453, 1144, 1144,
      453, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
      453,  453, 1144, 1144, 1144,  453, 1144,  453,  453,  453,
     1144, 1144, 1144, 1144,  453,  461,  461,  461,  461, 1144,

     1144,  461, 1144, 1144, 1144, 1144, 1144, 1144, 1144,  461,
     1144, 1144,  461, 1144, 1144, 1144,  461, 1144,  461,  461,
      461, 1144, 1144, 1144,  461,  461,  464,  464,  464,  464,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
      464, 1144,  464,  464, 1144, 1144, 1144,  464, 1144,  464,
      464,  464, 1144, 1144, 1144, 1144,  464,  470,  470,  470,
      470, 1144, 1144,  470, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,  470, 1144,
      470,  470,  470, 1144, 1144, 1144, 1144,  470,  471, 1144,
      471,  471,  471, 1144, 1144, 1144, 1144,  471,  473, 1144,

      473, 1144, 1144, 1144, 1144,  473, 1144,  473,  473,  473,
     1144, 1144, 1144, 1144,  473,  477,  477, 1144,  477, 1144,
     1144, 1144, 1144,  477, 1144,  477,  477,  477, 1144, 1144,
     1144, 1144,  477,  482,  482, 1144,  482,  482,  482,  482,
      482,  482,  482,  482, 1144,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482, 1144,  482,  482,  482,
      482,  482,  482,  482,  482,  486, 1144, 1144,  486, 1144,
     1144, 1144, 1144,  486, 1144,  486,  486,  486, 1144, 1144,
     1144, 1144,  486,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488, 1144,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  490,  490, 1144,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490, 1144,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  492,  492, 1144,
      492, 1144,  492,  492,  492, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144,  492,  492,  492, 1144,  492,
      492, 1144, 1144, 1144, 1144, 1144,  492,  497, 1144, 1144,
      497, 1144, 1144, 1144, 1144,  497, 1144,  497,  497,  497,
     1144, 1144, 1144, 1144,  497,  501,  501, 1144,  501,  501,

      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  504,  504, 1144,
      504, 1144,  504,  504,  504,  504,  504,  504, 1144,  504,
      504,  504,  504, 1144,  504,  504,  504,  504, 1144,  504,
     1144,  504,  504,  504,  504,  504,  504,  504,  504,  514,
     1144, 1144,  514, 1144, 1144, 1144, 1144,  514, 1144, 1144,
     1144, 1144,  514,  514, 1144,  514, 1144, 1144, 1144, 1144,
      514, 1144,  514,  514,  514,  522,  522, 1144,  522, 1144,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522, 1144,  522, 1144,  522,
      522,  522,  522,  522,  522,  522,  522,  526,  526, 1144,
      526, 1144,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526, 1144,  526,
     1144,  526,  526,  526,  526,  526,  526,  526,  526,  535,
     1144, 1144,  535, 1144, 1144, 1144, 1144,  535, 1144,  535,
      535,  535, 1144, 1144, 1144, 1144,  535,  539,  539, 1144,
      539,  539,  539,  539,  539,  539, 1144, 1144,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539, 1144,  539,
     1144,  539,  539,  539,  539,  539,  539,  539,  539,  546,

     1144,  546,  546,  546, 1144, 1144, 1144, 1144,  546,  548,
     1144,  548,  548, 1144, 1144, 1144,  548, 1144,  548,  548,
      548, 1144, 1144, 1144, 1144,  548,  551, 1144,  551,  551,
      551, 1144, 1144, 1144, 1144,  551,  553, 1144,  553,  553,
     1144, 1144, 1144,  553, 1144,  553,  553,  553, 1144, 1144,
     1144, 1144,  553,  556,  556, 1144,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556, 1144,  556, 1144,  556,  556,  556,
      556,  556,  556,  556,  556,  559, 1144, 1144,  559, 1144,
     1144, 1144, 1144,  559, 1144,  559,  559,  559, 1144, 1144,

     1144, 1144,  559,  561,  561, 1144,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561, 1144,  561,  561,
      561,  561,  561,  561,  561,  561, 1144,  561,  561,  561,
      561,  561,  561,  561,  561,  564,  564, 1144,  564,  564,
      564,  564,  564,  564,  564,  564, 1144,  564,  564,  564,
      564,  564,  564,  564,  564,  564, 1144,  564, 1144,  564,
      564,  564,  564,  564,  564,  564,  564,  567, 1144,  567,
      567,  567,  567,  567, 1144, 1144, 1144,  567, 1144,  567,
      567,  567, 1144, 1144, 1144, 1144,  567,  570,  570, 1144,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
     1144,  570,  570,  570,  570,  570,  570,  570,  570,  572,
      572,  572,  572,  572,  572,  572,  572,  572, 1144, 1144,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573, 1144,  573,
      573,  573,  573, 1144,  573,  573, 1144, 1144,  573,  573,
      573,  573,  573,  331,  331,  331, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144,  331,  331,  331,  331,

      331,  331,  331,  331,  331, 1144,  331,  331,  303,  303,
     1144,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      306, 1144,  306,  306,  306, 1144, 1144, 1144, 1144,  306,
      576,  576, 1144, 1144, 1144,  576, 1144,  576,  576,  576,
     1144, 1144, 1144, 1144,  576,  307, 1144,  307,  307, 1144,
      307, 1144, 1144, 1144,  307,  307, 1144,  307,  307,  307,
      578, 1144, 1144,  578, 1144, 1144, 1144, 1144,  578, 1144,
      578,  578,  578,  585, 1144, 1144,  585, 1144,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  604, 1144,  604,  604,  604,
     1144, 1144, 1144,  604,  612, 1144, 1144, 1144, 1144, 1144,
     1144, 1144,  612, 1144,  612,  612,  612,  338, 1144,  338,
      338, 1144,  338, 1144, 1144, 1144,  338,  338, 1144,  338,
      338,  338,  340, 1144, 1144,  340, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144,  340,  340,  340,  340,  340,  360,  360,
     1144,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      362, 1144, 1144, 1144, 1144, 1144,  362, 1144,  362,  362,
      362,  362,  362, 1144, 1144,  362,  362,  362,  362,  362,
      362, 1144, 1144, 1144, 1144,  362,  625, 1144, 1144, 1144,
     1144, 1144,  625, 1144,  625, 1144,  625,  625,  625, 1144,
     1144,  625,  625,  625,  625,  625,  625, 1144, 1144, 1144,
     1144,  625,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,

      368,  368,  368,  368,  372, 1144,  372,  372, 1144, 1144,
     1144,  372, 1144,  372,  372,  372, 1144, 1144, 1144, 1144,
      372,  370, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144,  370, 1144,  370,  370,
      370, 1144, 1144, 1144, 1144,  370,  381,  381,  381,  381,
     1144, 1144,  381, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
      381, 1144, 1144,  381, 1144, 1144, 1144,  381, 1144,  381,
      381,  381, 1144, 1144, 1144,  381,  381,  384,  384,  384,
      384, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144,  384, 1144,  384,  384,  384, 1144, 1144,  384, 1144,

      384,  384,  384, 1144, 1144, 1144, 1144,  384,  391,  391,
      391,  391, 1144, 1144,  391, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,  391,
     1144,  391,  391,  391, 1144, 1144, 1144, 1144,  391,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630, 1144,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  633, 1144,  633, 1144, 1144,  633, 1144,  633,  633,
      633, 1144, 1144, 1144, 1144,  633,  392,  392, 1144,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  394, 1144,
     1144, 1144, 1144, 1144,  394, 1144,  394,  394,  394,  394,
      394, 1144, 1144,  394,  394,  394,  394,  394,  394, 1144,
     1144, 1144, 1144,  394,  634, 1144, 1144, 1144, 1144, 1144,
      634, 1144,  634, 1144,  634,  634,  634, 1144, 1144,  634,
      634,  634,  634,  634,  634, 1144, 1144, 1144, 1144,  634,
      400,  400, 1144,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,

      400,  400,  402,  402, 1144,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  406,  406, 1144, 1144, 1144, 1144,
     1144,  406, 1144,  406,  406,  406,  406,  406, 1144,  406,
      406,  406,  406,  406,  406,  406, 1144, 1144, 1144, 1144,
      406,  639, 1144, 1144, 1144, 1144, 1144,  639, 1144,  639,
     1144,  639,  639,  639, 1144, 1144,  639,  639,  639,  639,
      639,  639, 1144, 1144, 1144, 1144,  639,  417,  417,  417,
      417, 1144, 1144,  417, 1144, 1144, 1144, 1144, 1144, 1144,

     1144,  417, 1144, 1144,  417, 1144, 1144, 1144,  417, 1144,
      417,  417,  417, 1144, 1144, 1144,  417,  417,  422,  422,
      422,  422, 1144, 1144, 1144, 1144,  422, 1144, 1144, 1144,
     1144, 1144,  422, 1144,  422,  422, 1144, 1144, 1144,  422,
     1144,  422,  422,  422, 1144, 1144, 1144, 1144,  422,  425,
      425,  425,  425, 1144, 1144,  425, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
      425, 1144,  425,  425,  425, 1144, 1144, 1144, 1144,  425,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
     1144,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  644, 1144, 1144,  644, 1144, 1144, 1144, 1144,
      644, 1144, 1144, 1144, 1144, 1144, 1144, 1144,  644, 1144,
     1144, 1144, 1144,  644, 1144,  644,  644,  644, 1144, 1144,
     1144, 1144,  644,  426, 1144, 1144,  426, 1144, 1144, 1144,
     1144,  426, 1144,  426,  426,  426, 1144, 1144, 1144, 1144,
      426,  430,  430, 1144,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  435,  435, 1144,  435,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  440,  440, 1144,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  442, 1144, 1144,
     1144, 1144, 1144,  442, 1144,  442,  442,  442,  442,  442,
     1144, 1144,  442,  442,  442,  442,  442,  442, 1144, 1144,
     1144, 1144,  442,  648, 1144, 1144, 1144, 1144, 1144,  648,
     1144,  648, 1144,  648,  648,  648, 1144, 1144,  648,  648,

      648,  648,  648,  648, 1144, 1144, 1144, 1144,  648,  453,
      453,  453,  453, 1144, 1144,  453, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144,  453,  453, 1144, 1144, 1144,
      453, 1144,  453,  453,  453, 1144, 1144, 1144, 1144,  453,
      651, 1144,  651,  651,  651, 1144, 1144, 1144, 1144,  651,
      654,  654,  654,  654, 1144, 1144,  654, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144,  654,  654, 1144, 1144,
     1144,  654, 1144,  654,  654,  654, 1144, 1144, 1144, 1144,
      654,  461,  461,  461,  461, 1144, 1144,  461, 1144, 1144,
     1144, 1144, 1144, 1144, 1144,  461, 1144, 1144,  461, 1144,

     1144, 1144,  461, 1144,  461,  461,  461, 1144, 1144, 1144,
      461,  461,  464,  464,  464,  464, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144,  464, 1144,  464,  464,
     1144, 1144, 1144,  464, 1144,  464,  464,  464, 1144, 1144,
     1144, 1144,  464,  470,  470,  470,  470, 1144, 1144,  470,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144,  470, 1144,  470,  470,  470, 1144,
     1144, 1144, 1144,  470,  657, 1144, 1144, 1144, 1144,  657,
     1144,  657,  657,  657, 1144, 1144, 1144, 1144,  657,  473,
     1144,  473, 1144, 1144, 1144, 1144,  473, 1144,  473,  473,

      473, 1144, 1144, 1144, 1144,  473,  659, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144,  659, 1144,  659,  659,  659, 1144, 1144, 1144, 1144,
      659,  477,  477, 1144,  477, 1144, 1144, 1144, 1144,  477,
     1144,  477,  477,  477, 1144, 1144, 1144, 1144,  477,  482,
      482, 1144,  482,  482,  482,  482,  482,  482,  482,  482,
     1144,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482, 1144,  482,  482,  482,  482,  482,  482,  482,
      482,  486, 1144, 1144,  486, 1144, 1144, 1144, 1144,  486,
     1144,  486,  486,  486, 1144, 1144, 1144, 1144,  486,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
     1144,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  490,  490, 1144,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490, 1144,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  666, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,  666, 1144,
      666,  666,  666, 1144, 1144, 1144, 1144,  666,  497, 1144,
     1144,  497, 1144, 1144, 1144, 1144,  497, 1144,  497,  497,

      497, 1144, 1144, 1144, 1144,  497,  501,  501, 1144,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  504,  504,
     1144,  504, 1144,  504,  504,  504,  504,  504,  504, 1144,
      504,  504,  504,  504, 1144,  504,  504,  504,  504, 1144,
      504, 1144,  504,  504,  504,  504,  504,  504,  504,  504,
      514, 1144, 1144,  514, 1144, 1144, 1144, 1144,  514, 1144,
     1144, 1144, 1144,  514,  514, 1144,  514, 1144, 1144, 1144,
     1144,  514, 1144,  514,  514,  514,  522,  522, 1144,  522,

     1144,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522, 1144,  522, 1144,
      522,  522,  522,  522,  522,  522,  522,  522,  526,  526,
     1144,  526, 1144,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526, 1144,
      526, 1144,  526,  526,  526,  526,  526,  526,  526,  526,
      535, 1144, 1144,  535, 1144, 1144, 1144, 1144,  535, 1144,
      535,  535,  535, 1144, 1144, 1144, 1144,  535,  539,  539,
     1144,  539,  539,  539,  539,  539,  539, 1144, 1144,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539, 1144,

      539, 1144,  539,  539,  539,  539,  539,  539,  539,  539,
      548, 1144,  548,  548, 1144, 1144, 1144,  548, 1144,  548,
      548,  548, 1144, 1144, 1144, 1144,  548,  546, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144,  546, 1144,  546,  546,  546, 1144, 1144, 1144,
     1144,  546,  553, 1144,  553,  553, 1144, 1144, 1144,  553,
     1144,  553,  553,  553, 1144, 1144, 1144, 1144,  553,  551,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144,  551, 1144,  551,  551,  551, 1144,
     1144, 1144, 1144,  551,  556,  556, 1144,  556,  556,  556,

      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556, 1144,  556, 1144,  556,  556,
      556,  556,  556,  556,  556,  556,  559, 1144, 1144,  559,
     1144, 1144, 1144, 1144,  559, 1144,  559,  559,  559, 1144,
     1144, 1144, 1144,  559,  561,  561, 1144,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561, 1144,  561,
      561,  561,  561,  561,  561,  561,  561, 1144,  561,  561,
      561,  561,  561,  561,  561,  561,  564,  564, 1144,  564,
      564,  564,  564,  564,  564,  564,  564, 1144,  564,  564,
      564,  564,  564,  564,  564,  564,  564, 1144,  564, 1144,

      564,  564,  564,  564,  564,  564,  564,  564,  567, 1144,
      567,  567,  567,  567,  567, 1144, 1144, 1144,  567, 1144,
      567,  567,  567, 1144, 1144, 1144, 1144,  567,  702, 1144,
     1144, 1144, 1144,  702, 1144,  702,  702,  702, 1144, 1144,
     1144, 1144,  702,  570,  570, 1144,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570, 1144,  570,  570,  570,
      570,  570,  570,  570,  570,  572,  572,  572,  572,  572,
      572,  572,  572,  572, 1144, 1144,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  576,  576, 1144,
     1144, 1144,  576, 1144,  576,  576,  576, 1144, 1144, 1144,
     1144,  576,  707,  707, 1144,  707,  707,  707,  707, 1144,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  578,  578, 1144,  578, 1144, 1144,
     1144, 1144,  578, 1144,  578,  578,  578,  307, 1144,  307,
      307, 1144,  307, 1144, 1144, 1144,  307,  307, 1144,  307,
      307,  307,  585, 1144, 1144,  585, 1144,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  717,  717, 1144,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  604, 1144, 1144,  604,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144,  604, 1144,  604,
      604,  604,  331, 1144, 1144,  331, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144,  331, 1144,  331,  331,  331,  729,  729,

     1144,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729, 1144,  729,  729,
      612, 1144, 1144, 1144, 1144, 1144, 1144, 1144,  612, 1144,
      612,  612,  612,  340, 1144, 1144,  340, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144,  340,  340,  340,  340,  340,  625,
     1144, 1144, 1144, 1144, 1144,  625, 1144,  625,  625,  625,
      625,  625, 1144, 1144,  625,  625,  625,  625,  625,  625,
     1144, 1144, 1144, 1144,  625,  362, 1144, 1144, 1144, 1144,

     1144,  362, 1144,  362,  362,  362,  362,  362, 1144, 1144,
      362,  362,  362,  362,  362,  362, 1144, 1144, 1144, 1144,
      362,  370, 1144,  370,  370,  370, 1144, 1144, 1144, 1144,
      370,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  633, 1144,  633, 1144, 1144,  633, 1144,
      633,  633,  633, 1144, 1144, 1144, 1144,  633,  634, 1144,
     1144, 1144, 1144, 1144,  634, 1144,  634,  634,  634,  634,
      634, 1144, 1144,  634,  634,  634,  634,  634,  634, 1144,

     1144, 1144, 1144,  634,  394, 1144, 1144, 1144, 1144, 1144,
      394, 1144,  394,  394,  394,  394,  394, 1144, 1144,  394,
      394,  394,  394,  394,  394, 1144, 1144, 1144, 1144,  394,
      743,  743, 1144,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  639,  639, 1144, 1144, 1144, 1144, 1144,  639,
     1144,  639,  639,  639,  639,  639, 1144,  639,  639,  639,
      639,  639,  639,  639, 1144, 1144, 1144, 1144,  639,  406,
      406, 1144, 1144, 1144, 1144, 1144,  406, 1144,  406,  406,

      406,  406,  406, 1144,  406,  406,  406,  406,  406,  406,
      406, 1144, 1144, 1144, 1144,  406,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  644, 1144,
     1144,  644, 1144, 1144, 1144, 1144,  644, 1144, 1144, 1144,
     1144, 1144, 1144, 1144,  644, 1144, 1144, 1144, 1144,  644,
     1144,  644,  644,  644, 1144, 1144, 1144, 1144,  644,  648,
     1144, 1144, 1144, 1144, 1144,  648, 1144,  648,  648,  648,
      648,  648, 1144, 1144,  648,  648,  648,  648,  648,  648,

     1144, 1144, 1144, 1144,  648,  442, 1144, 1144, 1144, 1144,
     1144,  442, 1144,  442,  442,  442,  442,  442, 1144, 1144,
      442,  442,  442,  442,  442,  442, 1144, 1144, 1144, 1144,
      442,  753,  753,  753,  753, 1144, 1144,  753, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144,  753,  753, 1144,
     1144, 1144,  753, 1144,  753,  753,  753, 1144, 1144, 1144,
     1144,  753,  651,  651,  651,  651, 1144, 1144,  651, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,  651,
     1144, 1144, 1144,  651, 1144,  651,  651,  651, 1144, 1144,
     1144, 1144,  651,  654,  654,  654,  654, 1144, 1144,  654,

     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,  654,
      654, 1144, 1144, 1144,  654, 1144,  654,  654,  654, 1144,
     1144, 1144, 1144,  654,  657, 1144, 1144, 1144, 1144,  657,
     1144,  657,  657,  657, 1144, 1144, 1144, 1144,  657,  659,
     1144,  659,  659,  659, 1144, 1144, 1144, 1144,  659,  757,
     1144,  757, 1144, 1144, 1144, 1144,  757, 1144,  757,  757,
      757, 1144, 1144, 1144, 1144,  757,  666, 1144,  666,  666,
      666, 1144, 1144, 1144, 1144,  666,  763, 1144, 1144, 1144,
     1144,  763, 1144,  763,  763,  763, 1144, 1144, 1144, 1144,
      763,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774, 1144,  774,
      774,  774,  774, 1144,  774, 1144, 1144,  774,  774,  774,
      774,  774,  774,  546, 1144,  546,  546,  546, 1144, 1144,
     1144, 1144,  546,  551, 1144,  551,  551,  551, 1144, 1144,
     1144, 1144,  551,  794, 1144,  794,  794,  794,  794,  794,
     1144, 1144, 1144,  794, 1144,  794,  794,  794, 1144, 1144,
     1144, 1144,  794,  707,  707, 1144,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  799, 1144, 1144,  799, 1144,

     1144, 1144, 1144,  799, 1144,  799,  799,  799,  314, 1144,
      314, 1144,  314,  314, 1144,  314, 1144, 1144, 1144,  314,
      314, 1144,  314,  314,  314,  717,  717, 1144,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  331, 1144, 1144,
      331, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,  331, 1144,
      331,  331,  331,  729,  729, 1144,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,

      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  730,  730,  730,  730,  730,
      340, 1144, 1144,  340, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144,  340,  340,  340,  340,  340,  307,  307, 1144,  307,
     1144, 1144, 1144, 1144, 1144, 1144, 1144,  307, 1144,  307,
      307, 1144,  307,  307, 1144, 1144,  307,  307, 1144,  307,
      307,  307, 1144,  307,  362, 1144, 1144, 1144, 1144, 1144,
      362, 1144,  362,  362,  362,  362,  362, 1144, 1144,  362,
      362,  362,  362,  362,  362, 1144, 1144, 1144, 1144,  362,

      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  394, 1144, 1144, 1144, 1144, 1144,  394, 1144,
      394,  394,  394,  394,  394, 1144, 1144,  394,  394,  394,
      394,  394,  394, 1144, 1144, 1144, 1144,  394,  743,  743,
     1144,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      406,  406, 1144, 1144, 1144, 1144, 1144,  406, 1144,  406,

      406,  406,  406,  406, 1144,  406,  406,  406,  406,  406,
      406,  406, 1144, 1144, 1144, 1144,  406,  442, 1144, 1144,
     1144, 1144, 1144,  442, 1144,  442,  442,  442,  442,  442,
     1144, 1144,  442,  442,  442,  442,  442,  442, 1144, 1144,
     1144, 1144,  442,  826, 1144,  826,  826,  826, 1144, 1144,
     1144, 1144,  826,  753,  753,  753,  753, 1144, 1144,  753,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,  753,
      753, 1144, 1144, 1144,  753, 1144,  753,  753,  753, 1144,
     1144, 1144, 1144,  753,  651,  651,  651,  651, 1144, 1144,
      651, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,

     1144,  651, 1144, 1144, 1144,  651, 1144,  651,  651,  651,
     1144, 1144, 1144, 1144,  651,  757, 1144,  757, 1144, 1144,
     1144, 1144,  757, 1144,  757,  757,  757, 1144, 1144, 1144,
     1144,  757,  763, 1144, 1144, 1144, 1144,  763, 1144,  763,
      763,  763, 1144, 1144, 1144, 1144,  763,  872,  872, 1144,
      872, 1144, 1144, 1144, 1144,  872, 1144,  872,  872,  872,
      879,  879, 1144,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  897,  897,  897,  897, 1144, 1144,  897, 1144,

     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,  897,  897,
     1144, 1144, 1144,  897, 1144,  897,  897,  897, 1144, 1144,
     1144, 1144,  897,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
     1144,  923,  923,  923,  923, 1144,  923, 1144,  923, 1144,
      923,  923,  923,  923,  923,  951,  951, 1144,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,

      992,  992,  992,  992, 1144,  992,  992,  992,  992, 1144,
      992, 1144, 1144, 1144,  992,  992,  992,  992,  992,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993, 1144,  993,  993,  993,
      993, 1144,  993, 1144, 1144, 1144,  993,  993,  993,  993,
      993, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1144, 1041,
     1041, 1041, 1041, 1144, 1041, 1144, 1144, 1144, 1041, 1041,
     1041, 1041, 1041, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,

     1144, 1052, 1052, 1052, 1052, 1144, 1052, 1144, 1144, 1144,
     1052, 1052, 1052, 1052, 1052, 1096, 1096, 1144, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096,   85, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,

     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144
    } ;

static yyconst flex_int16_t yy_chk[9725] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    4,   21,   22,    4,
       23,   21,   22,   24,   23,   47, 1139,   24,   35,    4,
        4,   36,    4,    4,   39,   40,    4,    4,    4,   48,

       35,   51,   51,   36,   51,  102,   39,   40,  102,  235,
     1137,   43,   43,  235,   43,   53,   43,   53,   39,   40,
       21,   22,   83,   23,   44,   44,   24,   44,   47,   44,
      530,   35,   83,   83,   36,   57,   58,   39,   40,   53,
       52,   52,   48,   52,  530,   51,   63,    4,    5,    5,
        5,    5,    5,    5,    5,   43,    5,    5,   53,    5,
        5,    5,    5,   45,    5,   45,    5,    5,   44,   64,
       75,    5,    5,    5,   46,   45,   46,  119,   57,   58,
       45,  715,  119,  218,   52,   75,   46,   45,  218,   63,
      236,   46,    5,    5,    5,  236,  319,   84,   46,  236,

       76,   81,   82,  284,  715,  261,   45,   84,   84,   54,
      261,   54,   64,   75,   55,   76,   55,   46,  319,    5,
        5,    5,    5,    6,    6,    6,    6,    6,    6,    6,
      284,    6,    6,   54,    6,    6,    6,    6,   55,    6,
       69,    6,    6,   76,   81,   82,    6,    6,    6,   56,
       61,   56,   54,   94, 1135,  103,  310,   55,  103,  223,
       61,   61,  223,   94,   69,  310,  266,    6,    6,    6,
      223,  266,   94,   56,   61,  309,  208, 1132,  309,  208,
      103,  208,  106,   69,  106,  106,  106,  523,  315,  523,
      106,  315,   56,   61,    6,    6,    6,    6,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       13,   13,   13,   13,   13,   13,   13,   70,   13,   13,
       62,   13,   13,   13,   13,   71,   13,   72,   13,   13,
       62,   62,  324,   13,   13,   13,   92,  226, 1129,  401,
      226,   70,   92,  107,   62,   92,  107,  637,  226,   71,
      330,   72,   77,  324,   13,   13,   13,  240,  401,  107,

       70,  240, 1128,   62,   77,  107,  637,  240,   71,  240,
       72,  330,  129,  129,  129,  129,   77,  334,   92,  129,
      199,   13,   13,   13,   13,   14,   14,   14,   14,   14,
       14,   14,  199,   14,   14,   77,   14,   14,   14,   14,
       78,   14, 1124,   14,   14,  321,  111,  111,   14,   14,
       14,  111,   78,  334,  107,   95,  562,   95,   95,   95,
       95,  112,  112,  199,   78, 1121,  112,  321,   95,   14,
       14,   14,  322,  111,  120,  120,  562,  120,  229,  229,
      334,  229,   88,   78,  370,   88,   88,   95,  112,  370,
      128,  128,   88,  128,  322,   88,   14,   14,   14,   14,

       15,   15,   15,   15,   15,   15,   15,   88,   15,   15,
     1114,   15,   15,   15,   15,  325,   15,  589,   15,   15,
      120, 1114,  229,   15,   15,   15,   88,   98,   88,   98,
       98,  558,   98,   98,   98,  318,  128,  325,   98,  589,
      122,  122,  122,  122,   15,   15,   15,  318,  320, 1141,
      345,   89,   89,  345,   89,   89,  318,  122,  558,   98,
      346,   89,  122,  346,   89,  133,  133, 1141,  320,  318,
      133,   15,   15,   15,   15,   16,   16,   16,   16,   16,
       16,   16,  340,   16,   16,  340,   16,   16,   16,   16,
      320,   16,  133,   16,   16,   89,  592,   89,   16,   16,

       16,  100,  854,  100,  100,  317,  100,  100,  100,  854,
     1134, 1120,  100,  123,  123,  123,  123, 1134,  592,   16,
       16,   16,  127,  127,  127,  127,  340,  317,  317,  317,
      123,  348,  348,  100,  348,  123, 1119, 1118,  349,  127,
      349,  349,  349, 1117,  127,  127,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   25,   25,   25,   25,   25,   25,   25,  351,
       25,   25,  351,   25,   25,   25,   25,  372,   25,  363,
       25,   25,  372,  363,  546,   25,   25,   25,  104,  546,
      593,  104,  134,  134,  104,  354,  354,  134,  354,  356,
      105,  105,  356,  105,  104,  363,   25,   25,   25,  595,
      104,  593,  105,  104,  105,  105,  105,  105, 1099,  134,
      151,  151,  151,  151,  356,  105,  342,  151,  395,  342,
      595, 1099,  395,   25,   25,   25,   25,   26,   26,   26,
       26,   26,   26,   26,  105,   26,   26,  599,   26,   26,
       26,   26,  140,   26,  395,   26,   26,  600, 1116,  104,

       26,   26,   26,  296,  140,  140,  296,  141,  599,  140,
      342,  140,  145,  145,  145,  145, 1112,  841,  600,  141,
      141,   26,   26,   26,  141,  342,  141,  499,  296,  145,
      499,  140,  499,  841,  145,  183,  183,  183,  183,  548,
      365,  365,  183,  365,  548, 1111,  141,  296,   26,   26,
       26,   26,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  113,  113,   49,  113, 1109,
      551,   49,   49,   49,   49,  551, 1108, 1107,  124,  124,
      124,  124,  113,  113,  598,  124, 1106,  113,  146,  146,
      146,  146,   49,   49,   49,  124,  150,  150,  150,  150,
      124,  300,  300,  553,  300,  146,  598,  150,  553,  113,
      146,  113, 1138,  150,  155,  155, 1138,  155,  150,   49,
       49,   49,   49,   49,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,

       50,  136,  136,   50,  136,  300, 1105,   50,   50,   50,
       50,  124,  167,  167,  142, 1104, 1103,  167,  136,  136,
      155,  374,  374,  136,  374, 1102,  142,  142,   50,   50,
       50,  142, 1101,  142,  357,  241,  357,  357,  357,  167,
      241, 1096,  357,  425,  241,  136,  425,  136,  386,  386,
      241,  386,  241,  142,  425,   50,   50,   50,   50,   50,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       96,  125,  125,  125,  125, 1093, 1092, 1090,  125,  147,
      147,  147,  147, 1089,   96, 1088,  147, 1087,  125,  176,
      176,  176,  176,  125,   96,   96,  147,  168,  168,   96,
       96,  147,  168, 1086,   96,   96,  176,   96,   96,  159,
      159,  176,  159,  362,  362,   96,   96,  712,  362, 1085,
       96,   96,  163,  163,  168,  163,   96,   96,   96,   96,

       96,   96,   97,   97,   97,   97,  144,  144,  712,  144,
      362,  144,   97, 1084,  125,  174,  174, 1083,  174,   97,
       97,   97,  147,  144,  144,  159,  364,  364,  144,  721,
      144,  364,  148,  148,  148,  148, 1082, 1081,  163,  148,
       97,  909,  177,  177,  177,  177,  716,   97,   97,  148,
      144,  721,  144,  364,  148,  719,  909,  169,  169,  177,
      169,  174,  301,  301,  177,  301,   97,  716,   97,   97,
       99,   99,   99,   99,  169,  169,  719,  367,  367,  169,
       99,  805,  367,  382,  382,  382,  382,   99,   99,   99,
      382, 1079,  173,  173,  173,  173, 1072,  182,  182,  173,

      182,  169,  805,  169,  367,  148,  301, 1126,   99,  876,
       99,  173,  173,  173,  173,   99,   99,  367,  178,  178,
      178,  178, 1126,  188,  188,  178,  188,  181,  181,  181,
      181,  876,  809,  858,   99,  178,   99,   99,  101, 1071,
      178,  101,  101,  182,  181,  394,  394,  858,  101,  181,
      394,  101,  101,  809,  101,  101,  396,  396,  101,  101,
      101,  396,  705,  101,  179,  179,  179,  179, 1058,  188,
     1057,  179,  394,  341,  191,  191,  341,  191, 1055, 1054,
      950,  179,  101,  396,  101, 1048,  179,  385,  385,  385,
      385,  178,  194,  194, 1047,  194,  397,  397,  705,  397,

      203,  203,  950,  203,  221,  221, 1046,  221, 1045,  101,
      139,  139, 1044,  139,  139,  139,  139,  341,  139,  139,
      191,  139,  139,  139,  139,  705,  139,  407,  139,  139,
      341,  407, 1043,  139,  139,  139,  512,  179,  194,  512,
      202,  202,  202,  202,  203, 1042,  203,  512,  227,  227,
      221,  227, 1040,  407,  139,  139,  139,  202,  202,  202,
      244,  244,  488,  244,  248,  248, 1018,  248,  254,  254,
     1017,  254,  257,  257,  488,  257,  579,  323,  202,  579,
      323,  139,  139,  139,  139,  343,  399,  399,  343, 1015,
     1014,  399,  343,  338,  227,  338,  338, 1013,  338,  338,

      338,  323, 1012,  323,  338,  488,  244,  202,  410,  410,
      248,  410,  514,  399,  254,  514, 1011,  323,  257,  298,
      298,  298,  298,  514,  323,  338,  399, 1010,  343,  343,
      427,  427,  347,  427, 1009,  347,  298,  298,  298,  323,
      339,  604,  339,  339,  604,  339,  339,  339,  347,  432,
      432,  339,  432,  350,  347,  343,  350,  298,  352,  437,
      437,  352,  437, 1008,  298,  298,  442,  442, 1007,  350,
      607,  442,  339,  607,  352,  350,  353,  353,  358,  353,
      352,  358, 1006,  298, 1005,  298,  298,  299,  299,  299,
      299,  443,  353,  442,  358,  443,  445,  445,  353,  445,

      358,  353, 1004,  347,  299,  299,  299,  389,  389,  389,
      389, 1003,  359,  616,  389,  359,  616,  443,  377,  377,
      377,  377, 1002,  618,  350,  299,  618,  608,  359,  352,
      608, 1001,  299,  299,  359,  377,  390,  390,  390,  390,
      377,  454,  454,  390,  454,  465,  465,  353,  465,  358,
     1000,  299,  999,  299,  299,  313,  474,  474,  313,  474,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  998,  997,  608,  313,  313,
      313,  313,  995,  359,  994,  378,  378,  378,  378,  990,
      479,  479,  378,  479,  381,  381,  381,  381,  989,  313,

      313,  313,  378,  380,  380,  380,  380,  378,  988,  987,
      380,  381,  418,  418,  418,  418,  381,  381,  986,  418,
      380,  483,  483,  985,  483,  380,  313,  313,  313,  313,
      313,  331,  494,  494,  331,  494,  984,  331,  331,  331,
      331,  982,  383,  383,  383,  383,  981,  980,  979,  383,
      384,  384,  384,  384,  331,  331,  331,  977,  378,  383,
      413,  413,  413,  413,  383,  976,  975,  384,  406,  444,
      444,  408,  384,  384,  444,  331,  380,  413,  974,  973,
      406,  406,  413,  408,  408,  406,  624,  406,  408,  624,
      408,  972,  414,  414,  414,  414,  444,  509,  509,  414,

      509,  331,  971,  331,  331,  344,  970,  406,  344,  414,
      408,  969,  968,  967,  414,  383,  412,  698,  344,  344,
      698,  344,  344,  965,  964,  344,  344,  344,  412,  412,
      344,  515,  515,  412,  515,  412,  416,  416,  416,  416,
      963,  532,  532,  416,  532,  417,  417,  417,  417,  344,
      960,  536,  536,  416,  536,  412,  417,  619,  416,  619,
      619,  619,  417,  518,  518,  414,  518,  417,  412,  959,
      954,  953,  423,  423,  423,  423,  344,  402,  402,  423,
      402,  402,  402,  402,  594,  402,  402,  594,  402,  402,
      402,  402,  951,  402,  710,  402,  402,  710,  949,  948,

      402,  402,  402,  420,  420,  420,  420,  518,  594,  416,
      419,  419,  419,  419,  420,  540,  540,  419,  540,  947,
      420,  402,  402,  402,  946,  420,  945,  419,  424,  424,
      424,  424,  419,  543,  543,  424,  543,  449,  449,  449,
      449,  725,  447,  447,  725,  944,  943,  447,  402,  402,
      402,  402,  403,  403,  942,  403,  403,  403,  403,  449,
      403,  403,  941,  403,  403,  403,  403,  940,  403,  447,
      403,  403,  939,  938,  937,  403,  403,  403,  422,  422,
      422,  422,  447,  419,  448,  448,  448,  448,  936,  422,
      596,  448,  935,  596,  934,  422,  403,  403,  403,  791,

      422,  933,  791,  448,  448,  448,  448,  932,  451,  451,
      451,  451,  625,  625,  596,  451,  931,  625,  457,  457,
      457,  457,  929,  403,  403,  403,  403,  451,  451,  451,
      451,  453,  453,  453,  453,  457,  927,  924,  453,  625,
      457,  458,  458,  458,  458,  922,  844,  921,  458,  844,
      453,  453,  453,  453,  460,  460,  460,  460,  458,  643,
      920,  460,  643,  458,  461,  461,  461,  461,  919,  918,
      643,  460,  462,  462,  462,  462,  460,  614,  917,  462,
      614,  461,  463,  463,  463,  463,  461,  916,  915,  463,
      464,  464,  464,  464,  468,  468,  468,  468,  914,  463,

      615,  468,  644,  615,  463,  644,  913,  464,  469,  469,
      469,  469,  464,  644,  458,  469,  912,  605,  626,  626,
      605,  614,  911,  626,  605,  617,  617,  460,  617,  910,
      718,  680,  614,  718,  680,  620,  620,  728,  620,  812,
      728,  617,  812,  883,  615,  626,  883,  617,  908,  885,
      615,  620,  885,  907,  718,  463,  584,  620,  906,  584,
      605,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  905,  904,  903,  584,
      584,  584,  584,  622,  622,  902,  622,  605,  623,  623,
      680,  623,  728,  885,  900,  899,  617,  885,  812,  622,

      584,  584,  584,  898,  623,  622,  620,  883,  622,  894,
      623,  627,  627,  893,  892,  889,  627,  630,  630,  630,
      630,  631,  631,  631,  631,  888,  882,  584,  584,  584,
      584,  584,  881,  720,  634,  634,  720,  731,  627,  634,
      731,  630,  635,  635,  879,  631,  875,  635,  874,  627,
      636,  636,  872,  930,  622,  636,  930,  720,  871,  623,
      870,  634,  869,  652,  652,  652,  652,  639,  868,  635,
      652,  955,  867, 1056,  955,  806, 1056,  636,  806,  639,
      639,  731,  648,  648,  639,  652,  639,  648,  636,  638,
      638,  866,  638,  638,  638,  638,  731,  638,  638,  806,

      638,  638,  638,  638,  640,  638,  639,  638,  638,  648,
      649,  649,  638,  638,  638,  649,  640,  640,  865,  641,
      864,  640,  955,  640, 1110, 1077, 1123, 1110, 1077, 1123,
      863,  641,  641,  638,  638,  638,  641,  649,  641,  650,
      650,  736,  736,  640,  650,  862,  736,  732,  733,  733,
      732,  733,  651,  651,  651,  651,  861,  860,  641,  651,
      638,  638,  638,  638,  733,  859,  650,  857,  736,  641,
      733,  651,  651,  651,  651,  856,  855,  650,  653,  653,
      653,  653,  853,  736, 1077,  653,  654,  654,  654,  654,
      709,  732,  709,  654,  709,  709,  852,  653,  653,  653,

      653, 1098,  732,  709, 1098,  654,  654,  654,  654,  734,
      734,  851,  734,  735,  735,  886,  735,  850,  886,  733,
      738,  738,  738,  738,  849,  734,  848,  742,  742,  735,
      847,  734,  742,  745, 1125,  735,  846, 1125,  735,  740,
      740,  740,  740,  845,  738,  745,  745,  843, 1098,  842,
      745,  840,  745,  839,  742,  752,  752,  752,  752,  886,
      838,  814,  752,  740,  814,  750,  750,  837, 1113,  742,
      750, 1113,  745,  836,  752,  752,  752,  752,  807,  886,
      734,  807,  835,  834,  735,  743,  743,  745,  743,  743,
      743,  743,  750,  743,  743,  833,  743,  743,  743,  743,

      832,  743,  807,  743,  743,  814,  831,  750,  743,  743,
      743,  830,  814,  753,  753,  753,  753,  829,  828,  827,
      753,  754,  754,  754,  754, 1113,  824,  823,  754,  743,
      743,  743,  753,  753,  753,  753,  767,  767,  822, 1130,
      819,  767, 1130,  754,  767,  767,  818, 1133,  815,  767,
     1133,  815,  767,  767,  813,  767,  743,  743,  743,  743,
      744,  744,  811,  744,  744,  744,  744, 1136,  744,  744,
     1136,  744,  744,  744,  744,  810,  744,  877,  744,  744,
      877,  804,  803,  744,  744,  744,  800,  802,  800,  799,
      800,  800,  815,  816,  816,  956,  816,  880,  956,  800,

      880,  877,  797,  796,  744,  744,  744,  815,  795,  816,
      821,  817,  817,  820,  820,  816,  817,  794,  820,  825,
      825,  880,  821,  821,  825, 1022, 1022,  821,  793,  821,
     1022,  744,  744,  744,  744,  792,  790,  789,  817,  956,
      820,  826,  826,  826,  826,  817,  825,  820,  826,  821,
      887,  887, 1022,  825,  788,  887,  821,  956,  787,  891,
      826,  826,  826,  826,  816,  890,  890,  786,  895,  895,
      890,  891,  891,  895,  785,  784,  891,  887,  891,  957,
     1140,  887,  957, 1140,  896,  896,  896,  896,  958,  958,
      783,  896,  890,  958,  952,  895,  890,  952,  891,  895,

      782,  781,  891,  896,  896,  896,  896,  897,  897,  897,
      897,  961,  961,  780,  897,  958,  961,  779,  952,  966,
      966,  777,  962,  957,  966,  776,  897,  897,  897,  897,
      957, 1025, 1025,  958,  962,  962, 1025, 1019,  961,  962,
     1019,  962, 1016,  775,  773, 1016,  966, 1020, 1020, 1021,
     1020,  772, 1021,  771, 1073, 1026,  961, 1073, 1025, 1078,
     1078,  962, 1078,  770,  966,  769, 1016, 1026, 1026,  768,
     1030, 1030, 1026, 1080, 1026, 1030, 1080, 1097, 1073,  962,
     1097, 1100, 1115, 1127, 1100, 1115, 1127, 1143, 1143,  766,
     1143, 1020,  765, 1021, 1026,  764, 1301, 1030,  762, 1019,

      761, 1097,  760, 1078, 1301,  759,  758, 1301, 1301,  757,
     1313, 1021, 1313, 1313, 1313,  756, 1317, 1080, 1317, 1317,
     1317,  755, 1344,  749,  748, 1100, 1115, 1127, 1100,  747,
     1344, 1143, 1080, 1344, 1344,  741,  737,  730,  729, 1115,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,

     1146, 1146, 1146, 1146, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,

     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,

     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,

     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,

     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,

     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1170, 1170,  723, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1171, 1350,  722, 1350, 1350, 1350, 1377,  717,
     1377, 1377, 1377,  714,  713,  707,  706, 1171,  704, 1171,
     1171, 1171,  703,  702,  701,  699, 1171, 1172,  697, 1172,

     1172,  696, 1172,  692,  690,  688, 1172, 1172,  687, 1172,
     1172, 1172, 1173,  686, 1173, 1173, 1173, 1173,  685, 1173,
      684,  683,  682, 1173, 1173, 1173, 1173, 1173, 1173, 1174,
     1174, 1174,  681,  679,  678,  677,  676, 1174,  675,  674,
      673,  672, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174,  671, 1174, 1174, 1175,  670, 1175, 1175,  669, 1175,
      668,  667,  664, 1175, 1175,  663, 1175, 1175, 1175, 1176,
     1176, 1176,  662,  661,  660,  659,  656, 1176,  655,  647,
      646,  645, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176,  642, 1176, 1176, 1177, 1177,  633, 1177, 1177, 1177,

     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1178,  632,  629,  603,
      602,  601, 1178,  591, 1178, 1178, 1178, 1178, 1178,  590,
      588, 1178, 1178, 1178, 1178, 1178, 1178,  586,  585,  583,
      580, 1178, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1180,  578, 1180, 1180, 1180,  576,
      575,  574,  571, 1180, 1181,  569, 1181, 1181,  567,  566,

      563, 1181,  560, 1181, 1181, 1181,  557,  555,  554,  552,
     1181, 1182, 1182, 1182, 1182,  550,  549, 1182,  547,  545,
      542,  538,  534,  531,  529, 1182,  528,  527, 1182,  525,
      524,  521, 1182,  520, 1182, 1182, 1182,  517,  511,  508,
     1182, 1182, 1183, 1183, 1183, 1183,  507,  503,  501,  500,
      498,  496,  493,  491,  490,  487, 1183,  485, 1183, 1183,
     1183,  481,  478, 1183,  477, 1183, 1183, 1183,  476,  473,
      472,  471, 1183, 1184, 1184, 1184, 1184,  467,  459, 1184,
      456,  452,  440,  439,  435,  434,  430,  429,  415,  409,
      404,  400,  392,  391, 1184,  388, 1184, 1184, 1184,  379,

      376,  373,  371, 1184, 1185, 1185,  368, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1186,  360,  333,  332,
      329,  327, 1186,  326, 1186, 1186, 1186, 1186, 1186,  316,
      314, 1186, 1186, 1186, 1186, 1186, 1186,  307,  306,  303,
      302, 1186, 1187, 1187,  291, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1188, 1188,  288,  287,  283,  279,

      278, 1188,  275, 1188, 1188, 1188, 1188, 1188,  271, 1188,
     1188, 1188, 1188, 1188, 1188, 1188,  270,  267,  262,  231,
     1188, 1189, 1189, 1189, 1189,  217,  216, 1189,  215,  211,
      210,  206,  201,  198,  190, 1189,  187,  180, 1189,  166,
      162,  158, 1189,  149, 1189, 1189, 1189,  135,  132,  126,
     1189, 1189, 1190, 1190, 1190, 1190,  114,  110,   93,   91,
     1190,   90,   85,    8,    7,    0, 1190,    0, 1190, 1190,
        0,    0,    0, 1190,    0, 1190, 1190, 1190,    0,    0,
        0,    0, 1190, 1191, 1191, 1191, 1191,    0,    0, 1191,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1191,    0, 1191, 1191, 1191,    0,
        0,    0,    0, 1191, 1192,    0,    0, 1192,    0,    0,
        0,    0, 1192,    0, 1192, 1192, 1192,    0,    0,    0,
        0, 1192, 1193, 1193,    0, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1194, 1194,    0, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1195, 1195,    0, 1195,

     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1196,    0,
        0,    0,    0,    0, 1196,    0, 1196, 1196, 1196, 1196,
     1196,    0,    0, 1196, 1196, 1196, 1196, 1196, 1196,    0,
        0,    0,    0, 1196, 1197,    0, 1197, 1197, 1197,    0,
        0,    0,    0, 1197, 1198, 1198, 1198, 1198,    0,    0,
     1198,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1198, 1198,    0,    0,    0, 1198,    0, 1198, 1198, 1198,
        0,    0,    0,    0, 1198, 1199, 1199, 1199, 1199,    0,

        0, 1199,    0,    0,    0,    0,    0,    0,    0, 1199,
        0,    0, 1199,    0,    0,    0, 1199,    0, 1199, 1199,
     1199,    0,    0,    0, 1199, 1199, 1200, 1200, 1200, 1200,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1200,    0, 1200, 1200,    0,    0,    0, 1200,    0, 1200,
     1200, 1200,    0,    0,    0,    0, 1200, 1201, 1201, 1201,
     1201,    0,    0, 1201,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1201,    0,
     1201, 1201, 1201,    0,    0,    0,    0, 1201, 1202,    0,
     1202, 1202, 1202,    0,    0,    0,    0, 1202, 1203,    0,

     1203,    0,    0,    0,    0, 1203,    0, 1203, 1203, 1203,
        0,    0,    0,    0, 1203, 1204, 1204,    0, 1204,    0,
        0,    0,    0, 1204,    0, 1204, 1204, 1204,    0,    0,
        0,    0, 1204, 1205, 1205,    0, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205,    0, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205,    0, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1206,    0,    0, 1206,    0,
        0,    0,    0, 1206,    0, 1206, 1206, 1206,    0,    0,
        0,    0, 1206, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,

     1207, 1207, 1207, 1207,    0, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1208, 1208,    0, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208,    0, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1209, 1209,    0,
     1209,    0, 1209, 1209, 1209,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1209, 1209, 1209,    0, 1209,
     1209,    0,    0,    0,    0,    0, 1209, 1210,    0,    0,
     1210,    0,    0,    0,    0, 1210,    0, 1210, 1210, 1210,
        0,    0,    0,    0, 1210, 1211, 1211,    0, 1211, 1211,

     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1212, 1212,    0,
     1212,    0, 1212, 1212, 1212, 1212, 1212, 1212,    0, 1212,
     1212, 1212, 1212,    0, 1212, 1212, 1212, 1212,    0, 1212,
        0, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1213,
        0,    0, 1213,    0,    0,    0,    0, 1213,    0,    0,
        0,    0, 1213, 1213,    0, 1213,    0,    0,    0,    0,
     1213,    0, 1213, 1213, 1213, 1214, 1214,    0, 1214,    0,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214,    0, 1214,    0, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1215, 1215,    0,
     1215,    0, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,    0, 1215,
        0, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1216,
        0,    0, 1216,    0,    0,    0,    0, 1216,    0, 1216,
     1216, 1216,    0,    0,    0,    0, 1216, 1217, 1217,    0,
     1217, 1217, 1217, 1217, 1217, 1217,    0,    0, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,    0, 1217,
        0, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1218,

        0, 1218, 1218, 1218,    0,    0,    0,    0, 1218, 1219,
        0, 1219, 1219,    0,    0,    0, 1219,    0, 1219, 1219,
     1219,    0,    0,    0,    0, 1219, 1220,    0, 1220, 1220,
     1220,    0,    0,    0,    0, 1220, 1221,    0, 1221, 1221,
        0,    0,    0, 1221,    0, 1221, 1221, 1221,    0,    0,
        0,    0, 1221, 1222, 1222,    0, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222,    0, 1222,    0, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1223,    0,    0, 1223,    0,
        0,    0,    0, 1223,    0, 1223, 1223, 1223,    0,    0,

        0,    0, 1223, 1224, 1224,    0, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224,    0, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224,    0, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1225, 1225,    0, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225,    0, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225,    0, 1225,    0, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1226,    0, 1226,
     1226, 1226, 1226, 1226,    0,    0,    0, 1226,    0, 1226,
     1226, 1226,    0,    0,    0,    0, 1226, 1227, 1227,    0,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,

     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
        0, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,    0,    0,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,    0, 1229,
     1229, 1229, 1229,    0, 1229, 1229,    0,    0, 1229, 1229,
     1229, 1229, 1229, 1230, 1230, 1230,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230,    0, 1230, 1230, 1231, 1231,
        0, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1232,    0, 1232, 1232, 1232,    0,    0,    0,    0, 1232,
     1233, 1233,    0,    0,    0, 1233,    0, 1233, 1233, 1233,
        0,    0,    0,    0, 1233, 1234,    0, 1234, 1234,    0,
     1234,    0,    0,    0, 1234, 1234,    0, 1234, 1234, 1234,
     1235,    0,    0, 1235,    0,    0,    0,    0, 1235,    0,
     1235, 1235, 1235, 1236,    0,    0, 1236,    0, 1236, 1236,

     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1237,    0, 1237, 1237, 1237,
        0,    0,    0, 1237, 1238,    0,    0,    0,    0,    0,
        0,    0, 1238,    0, 1238, 1238, 1238, 1239,    0, 1239,
     1239,    0, 1239,    0,    0,    0, 1239, 1239,    0, 1239,
     1239, 1239, 1240,    0,    0, 1240,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1240, 1240, 1240, 1240, 1240, 1241, 1241,
        0, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,

     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1242,    0,    0,    0,    0,    0, 1242,    0, 1242, 1242,
     1242, 1242, 1242,    0,    0, 1242, 1242, 1242, 1242, 1242,
     1242,    0,    0,    0,    0, 1242, 1243,    0,    0,    0,
        0,    0, 1243,    0, 1243,    0, 1243, 1243, 1243,    0,
        0, 1243, 1243, 1243, 1243, 1243, 1243,    0,    0,    0,
        0, 1243, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,

     1244, 1244, 1244, 1244, 1245,    0, 1245, 1245,    0,    0,
        0, 1245,    0, 1245, 1245, 1245,    0,    0,    0,    0,
     1245, 1246,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1246,    0, 1246, 1246,
     1246,    0,    0,    0,    0, 1246, 1247, 1247, 1247, 1247,
        0,    0, 1247,    0,    0,    0,    0,    0,    0,    0,
     1247,    0,    0, 1247,    0,    0,    0, 1247,    0, 1247,
     1247, 1247,    0,    0,    0, 1247, 1247, 1248, 1248, 1248,
     1248,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1248,    0, 1248, 1248, 1248,    0,    0, 1248,    0,

     1248, 1248, 1248,    0,    0,    0,    0, 1248, 1249, 1249,
     1249, 1249,    0,    0, 1249,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1249,
        0, 1249, 1249, 1249,    0,    0,    0,    0, 1249, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,    0,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1251,    0, 1251,    0,    0, 1251,    0, 1251, 1251,
     1251,    0,    0,    0,    0, 1251, 1252, 1252,    0, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,

     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1253,    0,
        0,    0,    0,    0, 1253,    0, 1253, 1253, 1253, 1253,
     1253,    0,    0, 1253, 1253, 1253, 1253, 1253, 1253,    0,
        0,    0,    0, 1253, 1254,    0,    0,    0,    0,    0,
     1254,    0, 1254,    0, 1254, 1254, 1254,    0,    0, 1254,
     1254, 1254, 1254, 1254, 1254,    0,    0,    0,    0, 1254,
     1255, 1255,    0, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,

     1255, 1255, 1256, 1256,    0, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1257, 1257,    0,    0,    0,    0,
        0, 1257,    0, 1257, 1257, 1257, 1257, 1257,    0, 1257,
     1257, 1257, 1257, 1257, 1257, 1257,    0,    0,    0,    0,
     1257, 1258,    0,    0,    0,    0,    0, 1258,    0, 1258,
        0, 1258, 1258, 1258,    0,    0, 1258, 1258, 1258, 1258,
     1258, 1258,    0,    0,    0,    0, 1258, 1259, 1259, 1259,
     1259,    0,    0, 1259,    0,    0,    0,    0,    0,    0,

        0, 1259,    0,    0, 1259,    0,    0,    0, 1259,    0,
     1259, 1259, 1259,    0,    0,    0, 1259, 1259, 1260, 1260,
     1260, 1260,    0,    0,    0,    0, 1260,    0,    0,    0,
        0,    0, 1260,    0, 1260, 1260,    0,    0,    0, 1260,
        0, 1260, 1260, 1260,    0,    0,    0,    0, 1260, 1261,
     1261, 1261, 1261,    0,    0, 1261,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1261,    0, 1261, 1261, 1261,    0,    0,    0,    0, 1261,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
        0, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1263,    0,    0, 1263,    0,    0,    0,    0,
     1263,    0,    0,    0,    0,    0,    0,    0, 1263,    0,
        0,    0,    0, 1263,    0, 1263, 1263, 1263,    0,    0,
        0,    0, 1263, 1264,    0,    0, 1264,    0,    0,    0,
        0, 1264,    0, 1264, 1264, 1264,    0,    0,    0,    0,
     1264, 1265, 1265,    0, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1266, 1266,    0, 1266, 1266, 1266, 1266,

     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1267, 1267,    0, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1268,    0,    0,
        0,    0,    0, 1268,    0, 1268, 1268, 1268, 1268, 1268,
        0,    0, 1268, 1268, 1268, 1268, 1268, 1268,    0,    0,
        0,    0, 1268, 1269,    0,    0,    0,    0,    0, 1269,
        0, 1269,    0, 1269, 1269, 1269,    0,    0, 1269, 1269,

     1269, 1269, 1269, 1269,    0,    0,    0,    0, 1269, 1270,
     1270, 1270, 1270,    0,    0, 1270,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1270, 1270,    0,    0,    0,
     1270,    0, 1270, 1270, 1270,    0,    0,    0,    0, 1270,
     1271,    0, 1271, 1271, 1271,    0,    0,    0,    0, 1271,
     1272, 1272, 1272, 1272,    0,    0, 1272,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1272, 1272,    0,    0,
        0, 1272,    0, 1272, 1272, 1272,    0,    0,    0,    0,
     1272, 1273, 1273, 1273, 1273,    0,    0, 1273,    0,    0,
        0,    0,    0,    0,    0, 1273,    0,    0, 1273,    0,

        0,    0, 1273,    0, 1273, 1273, 1273,    0,    0,    0,
     1273, 1273, 1274, 1274, 1274, 1274,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1274,    0, 1274, 1274,
        0,    0,    0, 1274,    0, 1274, 1274, 1274,    0,    0,
        0,    0, 1274, 1275, 1275, 1275, 1275,    0,    0, 1275,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1275,    0, 1275, 1275, 1275,    0,
        0,    0,    0, 1275, 1276,    0,    0,    0,    0, 1276,
        0, 1276, 1276, 1276,    0,    0,    0,    0, 1276, 1277,
        0, 1277,    0,    0,    0,    0, 1277,    0, 1277, 1277,

     1277,    0,    0,    0,    0, 1277, 1278,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1278,    0, 1278, 1278, 1278,    0,    0,    0,    0,
     1278, 1279, 1279,    0, 1279,    0,    0,    0,    0, 1279,
        0, 1279, 1279, 1279,    0,    0,    0,    0, 1279, 1280,
     1280,    0, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
        0, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280,    0, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1281,    0,    0, 1281,    0,    0,    0,    0, 1281,
        0, 1281, 1281, 1281,    0,    0,    0,    0, 1281, 1282,

     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
        0, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1283, 1283,    0, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283,    0, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1284,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1284,    0,
     1284, 1284, 1284,    0,    0,    0,    0, 1284, 1285,    0,
        0, 1285,    0,    0,    0,    0, 1285,    0, 1285, 1285,

     1285,    0,    0,    0,    0, 1285, 1286, 1286,    0, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1287, 1287,
        0, 1287,    0, 1287, 1287, 1287, 1287, 1287, 1287,    0,
     1287, 1287, 1287, 1287,    0, 1287, 1287, 1287, 1287,    0,
     1287,    0, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1288,    0,    0, 1288,    0,    0,    0,    0, 1288,    0,
        0,    0,    0, 1288, 1288,    0, 1288,    0,    0,    0,
        0, 1288,    0, 1288, 1288, 1288, 1289, 1289,    0, 1289,

        0, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289,    0, 1289,    0,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1290, 1290,
        0, 1290,    0, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,    0,
     1290,    0, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1291,    0,    0, 1291,    0,    0,    0,    0, 1291,    0,
     1291, 1291, 1291,    0,    0,    0,    0, 1291, 1292, 1292,
        0, 1292, 1292, 1292, 1292, 1292, 1292,    0,    0, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,    0,

     1292,    0, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1293,    0, 1293, 1293,    0,    0,    0, 1293,    0, 1293,
     1293, 1293,    0,    0,    0,    0, 1293, 1294,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1294,    0, 1294, 1294, 1294,    0,    0,    0,
        0, 1294, 1295,    0, 1295, 1295,    0,    0,    0, 1295,
        0, 1295, 1295, 1295,    0,    0,    0,    0, 1295, 1296,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1296,    0, 1296, 1296, 1296,    0,
        0,    0,    0, 1296, 1297, 1297,    0, 1297, 1297, 1297,

     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297,    0, 1297,    0, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1298,    0,    0, 1298,
        0,    0,    0,    0, 1298,    0, 1298, 1298, 1298,    0,
        0,    0,    0, 1298, 1299, 1299,    0, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,    0, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299,    0, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1300, 1300,    0, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300,    0, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300,    0, 1300,    0,

     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1302,    0,
     1302, 1302, 1302, 1302, 1302,    0,    0,    0, 1302,    0,
     1302, 1302, 1302,    0,    0,    0,    0, 1302, 1303,    0,
        0,    0,    0, 1303,    0, 1303, 1303, 1303,    0,    0,
        0,    0, 1303, 1304, 1304,    0, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304,    0, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305,    0,    0, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305,

     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1306, 1306,    0,
        0,    0, 1306,    0, 1306, 1306, 1306,    0,    0,    0,
        0, 1306, 1307, 1307,    0, 1307, 1307, 1307, 1307,    0,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1308, 1308,    0, 1308,    0,    0,
        0,    0, 1308,    0, 1308, 1308, 1308, 1309,    0, 1309,
     1309,    0, 1309,    0,    0,    0, 1309, 1309,    0, 1309,
     1309, 1309, 1310,    0,    0, 1310,    0, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,

     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1311, 1311,    0, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1312,    0,    0, 1312,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1312,    0, 1312,
     1312, 1312, 1314,    0,    0, 1314,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1314,    0, 1314, 1314, 1314, 1315, 1315,

        0, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315,    0, 1315, 1315,
     1316,    0,    0,    0,    0,    0,    0,    0, 1316,    0,
     1316, 1316, 1316, 1318,    0,    0, 1318,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1318, 1318, 1318, 1318, 1318, 1319,
        0,    0,    0,    0,    0, 1319,    0, 1319, 1319, 1319,
     1319, 1319,    0,    0, 1319, 1319, 1319, 1319, 1319, 1319,
        0,    0,    0,    0, 1319, 1320,    0,    0,    0,    0,

        0, 1320,    0, 1320, 1320, 1320, 1320, 1320,    0,    0,
     1320, 1320, 1320, 1320, 1320, 1320,    0,    0,    0,    0,
     1320, 1321,    0, 1321, 1321, 1321,    0,    0,    0,    0,
     1321, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1323,    0, 1323,    0,    0, 1323,    0,
     1323, 1323, 1323,    0,    0,    0,    0, 1323, 1324,    0,
        0,    0,    0,    0, 1324,    0, 1324, 1324, 1324, 1324,
     1324,    0,    0, 1324, 1324, 1324, 1324, 1324, 1324,    0,

        0,    0,    0, 1324, 1325,    0,    0,    0,    0,    0,
     1325,    0, 1325, 1325, 1325, 1325, 1325,    0,    0, 1325,
     1325, 1325, 1325, 1325, 1325,    0,    0,    0,    0, 1325,
     1326, 1326,    0, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1327, 1327,    0,    0,    0,    0,    0, 1327,
        0, 1327, 1327, 1327, 1327, 1327,    0, 1327, 1327, 1327,
     1327, 1327, 1327, 1327,    0,    0,    0,    0, 1327, 1328,
     1328,    0,    0,    0,    0,    0, 1328,    0, 1328, 1328,

     1328, 1328, 1328,    0, 1328, 1328, 1328, 1328, 1328, 1328,
     1328,    0,    0,    0,    0, 1328, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1330,    0,
        0, 1330,    0,    0,    0,    0, 1330,    0,    0,    0,
        0,    0,    0,    0, 1330,    0,    0,    0,    0, 1330,
        0, 1330, 1330, 1330,    0,    0,    0,    0, 1330, 1331,
        0,    0,    0,    0,    0, 1331,    0, 1331, 1331, 1331,
     1331, 1331,    0,    0, 1331, 1331, 1331, 1331, 1331, 1331,

        0,    0,    0,    0, 1331, 1332,    0,    0,    0,    0,
        0, 1332,    0, 1332, 1332, 1332, 1332, 1332,    0,    0,
     1332, 1332, 1332, 1332, 1332, 1332,    0,    0,    0,    0,
     1332, 1333, 1333, 1333, 1333,    0,    0, 1333,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1333, 1333,    0,
        0,    0, 1333,    0, 1333, 1333, 1333,    0,    0,    0,
        0, 1333, 1334, 1334, 1334, 1334,    0,    0, 1334,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1334,
        0,    0,    0, 1334,    0, 1334, 1334, 1334,    0,    0,
        0,    0, 1334, 1335, 1335, 1335, 1335,    0,    0, 1335,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1335,
     1335,    0,    0,    0, 1335,    0, 1335, 1335, 1335,    0,
        0,    0,    0, 1335, 1336,    0,    0,    0,    0, 1336,
        0, 1336, 1336, 1336,    0,    0,    0,    0, 1336, 1337,
        0, 1337, 1337, 1337,    0,    0,    0,    0, 1337, 1338,
        0, 1338,    0,    0,    0,    0, 1338,    0, 1338, 1338,
     1338,    0,    0,    0,    0, 1338, 1339,    0, 1339, 1339,
     1339,    0,    0,    0,    0, 1339, 1340,    0,    0,    0,
        0, 1340,    0, 1340, 1340, 1340,    0,    0,    0,    0,
     1340, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,

     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,    0, 1341,
     1341, 1341, 1341,    0, 1341,    0,    0, 1341, 1341, 1341,
     1341, 1341, 1341, 1342,    0, 1342, 1342, 1342,    0,    0,
        0,    0, 1342, 1343,    0, 1343, 1343, 1343,    0,    0,
        0,    0, 1343, 1345,    0, 1345, 1345, 1345, 1345, 1345,
        0,    0,    0, 1345,    0, 1345, 1345, 1345,    0,    0,
        0,    0, 1345, 1346, 1346,    0, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1347,    0,    0, 1347,    0,

        0,    0,    0, 1347,    0, 1347, 1347, 1347, 1348,    0,
     1348,    0, 1348, 1348,    0, 1348,    0,    0,    0, 1348,
     1348,    0, 1348, 1348, 1348, 1349, 1349,    0, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1351,    0,    0,
     1351,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1351,    0,
     1351, 1351, 1351, 1352, 1352,    0, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1353, 1353, 1353, 1353, 1353,
     1354,    0,    0, 1354,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1354, 1354, 1354, 1354, 1354, 1355, 1355,    0, 1355,
        0,    0,    0,    0,    0,    0,    0, 1355,    0, 1355,
     1355,    0, 1355, 1355,    0,    0, 1355, 1355,    0, 1355,
     1355, 1355,    0, 1355, 1356,    0,    0,    0,    0,    0,
     1356,    0, 1356, 1356, 1356, 1356, 1356,    0,    0, 1356,
     1356, 1356, 1356, 1356, 1356,    0,    0,    0,    0, 1356,

     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1358,    0,    0,    0,    0,    0, 1358,    0,
     1358, 1358, 1358, 1358, 1358,    0,    0, 1358, 1358, 1358,
     1358, 1358, 1358,    0,    0,    0,    0, 1358, 1359, 1359,
        0, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1360, 1360,    0,    0,    0,    0,    0, 1360,    0, 1360,

     1360, 1360, 1360, 1360,    0, 1360, 1360, 1360, 1360, 1360,
     1360, 1360,    0,    0,    0,    0, 1360, 1361,    0,    0,
        0,    0,    0, 1361,    0, 1361, 1361, 1361, 1361, 1361,
        0,    0, 1361, 1361, 1361, 1361, 1361, 1361,    0,    0,
        0,    0, 1361, 1362,    0, 1362, 1362, 1362,    0,    0,
        0,    0, 1362, 1363, 1363, 1363, 1363,    0,    0, 1363,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1363,
     1363,    0,    0,    0, 1363,    0, 1363, 1363, 1363,    0,
        0,    0,    0, 1363, 1364, 1364, 1364, 1364,    0,    0,
     1364,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 1364,    0,    0,    0, 1364,    0, 1364, 1364, 1364,
        0,    0,    0,    0, 1364, 1365,    0, 1365,    0,    0,
        0,    0, 1365,    0, 1365, 1365, 1365,    0,    0,    0,
        0, 1365, 1366,    0,    0,    0,    0, 1366,    0, 1366,
     1366, 1366,    0,    0,    0,    0, 1366, 1367, 1367,    0,
     1367,    0,    0,    0,    0, 1367,    0, 1367, 1367, 1367,
     1368, 1368,    0, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1369, 1369, 1369, 1369,    0,    0, 1369,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1369, 1369,
        0,    0,    0, 1369,    0, 1369, 1369, 1369,    0,    0,
        0,    0, 1369, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
        0, 1370, 1370, 1370, 1370,    0, 1370,    0, 1370,    0,
     1370, 1370, 1370, 1370, 1370, 1371, 1371,    0, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372,    0, 1372, 1372, 1372, 1372,    0,
     1372,    0,    0,    0, 1372, 1372, 1372, 1372, 1372, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373,    0, 1373, 1373, 1373,
     1373,    0, 1373,    0,    0,    0, 1373, 1373, 1373, 1373,
     1373, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,    0, 1374,
     1374, 1374, 1374,    0, 1374,    0,    0,    0, 1374, 1374,
     1374, 1374, 1374, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,

        0, 1375, 1375, 1375, 1375,    0, 1375,    0,    0,    0,
     1375, 1375, 1375, 1375, 1375, 1376, 1376,    0, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,

     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
#line 1 "commentscan.l"
/*************************************************************************
 *
 * Copyright (C) 2014-2016 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/
#line 9 "commentscan.l"

#include <QFile>
#include <QStack>
#include <QRegexp>
#include <QVector>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <cite.h>
#include <condparser.h>
#include <config.h>
#include <defargs.h>
#include <doxy_globals.h>
#include <entry.h>
#include <formula.h>
#include <index.h>
#include <language.h>
#include <membergroup.h>
#include <message.h>
#include <outputlist.h>
#include <parser_base.h>
#include <parser_cstyle.h>
#include <parser_md.h>
#include <util.h>

#define YY_NO_INPUT 1
#define YY_NEVER_INTERACTIVE 1

// forward declarations
static bool handleBrief(const QString &);
static bool handleFn(const QString &);
static bool handleDef(const QString &);
static bool handleOverload(const QString &);
static bool handleEnum(const QString &);
static bool handleDefGroup(const QString &);
static bool handleAddToGroup(const QString &);
static bool handleWeakGroup(const QString &);
static bool handleNamespace(const QString &);
static bool handlePackage(const QString &);
static bool handleClass(const QString &);
static bool handleHeaderFile(const QString &);
static bool handleProtocol(const QString &);
static bool handleCategory(const QString &);
static bool handleUnion(const QString &);
static bool handleStruct(const QString &);
static bool handleInterface(const QString &);
static bool handleIdlException(const QString &);
static bool handlePage(const QString &);
static bool handleMainpage(const QString &);
static bool handleFile(const QString &);
static bool handleDir(const QString &);
static bool handleExample(const QString &);
static bool handleDetails(const QString &);
static bool handleName(const QString &);
static bool handleTodo(const QString &);
static bool handleTest(const QString &);
static bool handleBug(const QString &);
static bool handleSubpage(const QString &s);
static bool handleDeprecated(const QString &);
static bool handleXRefItem(const QString &);
static bool handleRelated(const QString &);
static bool handleRelatedAlso(const QString &);
static bool handleMemberOf(const QString &);
static bool handleRefItem(const QString &);
static bool handleSection(const QString &);
static bool handleAnchor(const QString &);
static bool handleCite(const QString &);
static bool handleFormatBlock(const QString &);
static bool handleAddIndex(const QString &);
static bool handleIf(const QString &);
static bool handleIfNot(const QString &);
static bool handleElseIf(const QString &);
static bool handleElse(const QString &);
static bool handleEndIf(const QString &);
static bool handleIngroup(const QString &);
static bool handleNoSubGrouping(const QString &);
static bool handleShowInitializer(const QString &);
static bool handleHideInitializer(const QString &);
static bool handleCallgraph(const QString &);
static bool handleHideCallgraph(const QString &);
static bool handleCallergraph(const QString &);
static bool handleHideCallergraph(const QString &);
static bool handleInternal(const QString &);
static bool handleLineBr(const QString &);
static bool handleStatic(const QString &);
static bool handlePure(const QString &);
static bool handlePrivate(const QString &);
static bool handlePrivateSection(const QString &);
static bool handleProtected(const QString &);
static bool handleProtectedSection(const QString &);
static bool handlePublic(const QString &s);
static bool handlePublicSection(const QString &s);
static bool handleToc(const QString &s);
static bool handleInherit(const QString &);
static bool handleExtends(const QString &);
static bool handleCopyDoc(const QString &);
static bool handleCopyBrief(const QString &);
static bool handleCopyDetails(const QString &);
static bool handleParBlock(const QString &);
static bool handleEndParBlock(const QString &);
static void handleGuard(const QString &expr);

static void checkFormula();

using DocCmdFunc = bool (*)(const QString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            false },
  { "short",           &handleBrief,            false },
  { "fn",              &handleFn,               false },
  { "var",             &handleFn,               false },
  { "typedef",         &handleFn,               false },
  { "property",        &handleFn,               false },
  { "def",             &handleDef,              false },
  { "overload",        &handleOverload,         false },
  { "enum",            &handleEnum,             false },
  { "defgroup",        &handleDefGroup,         false },
  { "group",           &handleDefGroup,         false },  
  { "addtogroup",      &handleAddToGroup,       false },
  { "weakgroup",       &handleWeakGroup,        false },
  { "namespace",       &handleNamespace,        false },
  { "package",         &handlePackage,          false },
  { "class",           &handleClass,            false },
  { "headerfile",      &handleHeaderFile,       false },
  { "protocol",        &handleProtocol,         false },
  { "category",        &handleCategory,         false },
  { "union",           &handleUnion,            false },
  { "struct",          &handleStruct,           false },
  { "interface",       &handleInterface,        false },
  { "idlexcept",       &handleIdlException,     false },
  { "page",            &handlePage,             false },
  { "mainpage",        &handleMainpage,         false },
  { "file",            &handleFile,             false },
  { "dir",             &handleDir,              false },
  { "example",         &handleExample,          false },
  { "details",         &handleDetails,          true  },
  { "name",            &handleName,             false },
  { "todo",            &handleTodo,             false }, // end brief will be done differently
  { "test",            &handleTest,             false }, // end brief will be done differently
  { "bug",             &handleBug,              false }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       false }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         false }, // end brief will be done differently
  { "related",         &handleRelated,          true  },
  { "relates",         &handleRelated,          true  },
  { "relatedalso",     &handleRelatedAlso,      true  },
  { "relatesalso",     &handleRelatedAlso,      true  },
  { "parblock",        &handleParBlock,         true  },
  { "endparblock",     &handleEndParBlock,      true  },
  { "refitem",         &handleRefItem,          true  },
  { "cite",            &handleCite,             false },
  { "subpage",         &handleSubpage,          true  },
  { "section",         &handleSection,          true  },
  { "subsection",      &handleSection,          true  },
  { "subsubsection",   &handleSection,          true  },
  { "paragraph",       &handleSection,          true  },
  { "anchor",          &handleAnchor,           true  },
  { "verbatim",        &handleFormatBlock,      true  },
  { "latexonly",       &handleFormatBlock,      false },
  { "htmlonly",        &handleFormatBlock,      false },
  { "xmlonly",         &handleFormatBlock,      false },
  { "docbookonly",     &handleFormatBlock,      false },
  { "rtfonly",         &handleFormatBlock,      false },
  { "manonly",         &handleFormatBlock,      false },
  { "dot",             &handleFormatBlock,      true  },
  { "msc",             &handleFormatBlock,      true  },
  { "startuml",        &handleFormatBlock,      true  },
  { "code",            &handleFormatBlock,      true  },
  { "addindex",        &handleAddIndex,         false },
  { "if",              &handleIf,               false },
  { "ifnot",           &handleIfNot,            false },
  { "elseif",          &handleElseIf,           false },
  { "else",            &handleElse,             false },
  { "endif",           &handleEndIf,            false },
  { "ingroup",         &handleIngroup,          false },
  { "nosubgrouping",   &handleNoSubGrouping,    false },
  { "showinitializer", &handleShowInitializer,  false },
  { "hideinitializer", &handleHideInitializer,  false },
  { "callgraph",       &handleCallgraph,        false },
  { "hidecallgraph",   &handleHideCallgraph,    false },
  { "callergraph",     &handleCallergraph,      false },
  { "hidecallergraph", &handleHideCallergraph,  false },
  { "internal",        &handleInternal,         true  },
  { "_linebr",         &handleLineBr,           false },
  { "static",          &handleStatic,           false },
  { "pure",            &handlePure,             false },
  { "private",         &handlePrivate,          false },
  { "privatesection",  &handlePrivateSection,   false },
  { "protected",       &handleProtected,        false },
  { "protectedsection",&handleProtectedSection, false },
  { "public",          &handlePublic,           false },
  { "publicsection",   &handlePublicSection,    false },
  { "tableofcontents", &handleToc,              false },
  { "inherit",         &handleInherit,          true  },
  { "extends",         &handleExtends,          true  },
  { "implements",      &handleExtends,          true  },
  { "memberof",        &handleMemberOf,         true  },
  { "arg",             0,                       true  },
  { "attention",       0,                       true  },
  { "author",          0,                       true  },
  { "authors",         0,                       true  },
  { "copydoc",         &handleCopyDoc,          true  },
  { "copybrief",       &handleCopyBrief,        false },
  { "copydetails",     &handleCopyDetails,      true  },
  { "copyright",       0,                       true  },
  { "date",            0,                       true  },
  { "dotfile",         0,                       true  },
  { "htmlinclude",     0,                       false },
  { "image",           0,                       true  },
  { "include",         0,                       true  },
  { "includelineno",   0,                       true  },
  { "invariant",       0,                       true  },
  { "latexinclude",    0,                       false },
  { "li",              0,                       true  },
  { "line",            0,                       true  },
  { "note",            0,                       true  },
  { "par",             0,                       true  },
  { "param",           0,                       true  },
  { "tparam",          0,                       true  },
  { "post",            0,                       true  },
  { "pre",             0,                       true  },
  { "remark",          0,                       true  },
  { "remarks",         0,                       true  },
  { "result",          0,                       true  },
  { "return",          0,                       true  },
  { "returns",         0,                       true  },
  { "retval",          0,                       true  },
  { "sa",              0,                       true  },
  { "see",             0,                       true  },
  { "since",           0,                       true  },
  { "throw",           0,                       true  },
  { "throws",          0,                       true  },
  { "until",           0,                       true  },
  { "verbinclude",     0,                       false },
  { "version",         0,                       true  },
  { "warning",         0,                       true  },  
  { 0, 0, false }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
 public:
   struct Cmd {
      DocCmdFunc func;
      bool endsBrief;
   };

   /** maps a command name to a handler function */
   static Cmd *map(const QString &name) {
      return instance()->find(name);
   }

   /** release the singleton */
   static void freeInstance() {
      delete s_instance;
      s_instance = 0;
   }

  private:
    static DocCmdMapper *instance() {
      if (s_instance == 0) {
         s_instance = new DocCmdMapper;
      }
      return s_instance;
   }

   DocCmdMapper() {
      DocCmdMap *p = docCmdMap;

      while (p->cmdName) {
         if (m_map.contains(p->cmdName)) {
            err("DocCmdMapper: command %s already added\n", p->cmdName);
            exit(1);
         }
         Cmd *cmd  = new Cmd;
         cmd->func = p->handler;
         cmd->endsBrief = p->endsBrief;
         m_map.insert(p->cmdName, cmd);
         p++;
      }
   }

   Cmd *find(const QString &name) {
      return m_map.value(name);
   }

   QHash<QString, Cmd *> m_map;
   static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance = 0;
    
#define YY_NEVER_INTERACTIVE 1

enum XRefKind {
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext {
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType {
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
 public:
   GuardedSection(bool enabled, bool parentVisible)
      : m_enabled(enabled), m_parentVisible(parentVisible) {}
   bool isEnabled() const {
      return m_enabled;
   }
   bool parentVisible() const {
      return m_parentVisible;
   }

 private:
   bool m_enabled;
   bool m_parentVisible;
};

void openGroup(QSharedPointer<Entry> e, const QString &file, int line);
void closeGroup(QSharedPointer<Entry> e, const QString &file, int line, bool foundInline = false);
void initGroupInfo(QSharedPointer<Entry> e);
static void groupAddDocs(QSharedPointer<Entry> e);

static ParserInterface *langParser;          // the language parser that is calling us
static QString          inputString;         // input string
static int              inputPosition;       // read pointer
static int              prevPosition;
static char *           s_bufferPosition;

static QString          yyFileName;          // file name that is read from
static int              yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QString          formulaText;         // Running text of a formula
static QString          formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QString         *pOutputString;       // pointer to string to which the output is appended
static QString          outputXRef;          // temp argument of todo/test/../xrefitem commands
static QString          blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         //
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QString          functionProto;       // function prototype

static QStack<GuardedSection *> guards;      // tracks nested conditional sections (if,ifnot,..)
static QSharedPointer<Entry>  current;       // working entry

static bool             s_needNewEntry;
static int              s_docBlockContext; 

static QString          s_sectionLabel;
static QString          s_sectionTitle;
static int              s_sectionLevel;
static QString          xrefItemKey;
static QString          newXRefItemKey;
static QString          xrefItemTitle;
static QString          xrefListTitle;
static Protection       protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             s_parseMore;

static int              s_condCount;
static int              s_commentCount;
static QString          s_spaceBeforeCmd;
static QString          s_spaceBeforeIf;
static QString          s_copyDocArg;
static QString          s_guardExpr;
static int              s_roundCount;
static bool             s_insideParBlock;

static QStack<QSharedPointer<Grouping>> s_autoGroupStack;

static int              s_memberGroupId = DOX_NOGROUP;
static QString          s_memberGroupHeader;
static QString          s_memberGroupDocs;
static QString          s_memberGroupRelates;
static QString          s_compoundName;

static bool             s_internalDocs;   
static bool             s_processInternalDocs = false;  

static int              prevPosition = 0;

static void initParser()
{
   s_sectionLabel.resize(0);
   s_sectionTitle.resize(0);
   s_memberGroupHeader.resize(0);
   s_insideParBlock = false;

   internalDocs = Config::getBool("internal-docs"); 
}

static bool getDocSectionName(int s)
{
  switch(s) {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return true;
    default:
      return false;
  }
}

static bool makeStructuralIndicator(Entry::Sections s)
{
  if (getDocSectionName(current->section)) {
    return true;

  } else {
    s_needNewEntry     = true;
    current->section   = s;
    current->fileName  = yyFileName;
    current->startLine = yyLineNr;
    return false;
  }
}
static void lineCount()
{
  for (const char *c = commentscanYYtext ; *c ; ++c) {
    yyLineNr += (*c == '\n') ;
  }
}

static QString stripQuotes(const QString &s)
{
   QString name = s;

   if (name.isEmpty()) {
      return name;
   }

   if (name.at(0) == '"' && name.at(name.length() - 1) == '"') {
      name = name.mid(1, name.length() - 2);
   }

   return name;
}

static void addXRefItem(const QString &listName, const QString &itemTitle, const QString &listTitle, bool append)
{
   QSharedPointer<Entry> docEntry = current; // inBody && previous ? previous : current;

   if (listName.isEmpty()) {
      return;
   }

   auto refList = Doxy_Globals::xrefLists->find(listName);

   if (refList == Doxy_Globals::xrefLists->end()) {
      // new list
      Doxy_Globals::xrefLists->insert(listName, RefList(listName, listTitle, itemTitle));
      refList = Doxy_Globals::xrefLists->find(listName);
   }

   ListItemInfo *lii = 0;

   if (docEntry->sli) {

      for (auto &item : *docEntry->sli) {
         lii = &item;

         if (lii->type == listName) {
            break;
         }
      }
   }

   if (lii && append) {
      // already found item of same type just before this one

      RefItem *item = refList->getRefItem(lii->itemId);
      assert(item != 0);

      item->text += " <p>";

      if (Doxy_Globals::markdownSupport) {
         item->text += processMarkdown(yyFileName, yyLineNr, current, outputXRef);
      } else {
         item->text += outputXRef;
      }

   } else {
      // new item

      int itemId  = refList->addRefItem();

      // if we have already an item from the same list type (e.g. a second @todo)
      // in the same Entry (i.e. lii!=0) then we reuse its link anchor.

      QString anchorLabel = QString("_%1%2").arg(listName).arg(itemId, 6, 10, QChar('0'));

      RefItem *item = refList->getRefItem(itemId);
      assert(item != 0);

      if (Doxy_Globals::markdownSupport) {
         item->text = processMarkdown(yyFileName, yyLineNr, current, outputXRef);
      } else {
         item->text = outputXRef;
      }

      item->listAnchor = anchorLabel;
      docEntry->addSpecialListItem(listName, itemId);

      QString cmdString = QString("\\xrefitem %1 %2.").arg(listName).arg(itemId);

      if (inBody) {
         docEntry->inbodyDocs += cmdString;
      } else {
         docEntry->doc += cmdString;
      }

      QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict->find(anchorLabel);

      if (si) {
         if (si->lineNr != -1) {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s, line %d)",
                  csPrintable(anchorLabel), csPrintable(si->fileName), si->lineNr);

         } else {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s)",
                  csPrintable(anchorLabel), csPrintable(si->fileName));
         }

      } else {
         si = QMakeShared<SectionInfo>(listName, yyLineNr, anchorLabel, s_sectionTitle, SectionInfo::Anchor, s_sectionLevel);
         Doxy_Globals::sectionDict->insert(anchorLabel, si);
         docEntry->anchors->append(*si);
      }
   }

   outputXRef.resize(0);
}

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QString addFormula()
{
   QString formLabel;
   QString fText = formulaText.simplified();

   auto f = Doxy_Globals::formulaDict->find(fText);

   if (f == Doxy_Globals::formulaDict->end()) {
      Formula temp = Formula(fText);

      Doxy_Globals::formulaList->append(temp);
      Doxy_Globals::formulaDict->insert(fText, temp);

      formLabel = QString("\\form#%1").arg(temp.getId());

      Doxy_Globals::formulaNameDict->insert(formLabel, temp);
      f = Doxy_Globals::formulaDict->find(fText);

   } else {
      formLabel = QString("\\form#%1").arg(f->getId());

   }

   for (int i = 0; i < formulaNewLines; i++) {
      formLabel += "@_fakenl";   // add fake newlines to
   }

   // keep the warnings correctly aligned
   return formLabel;
}

static void checkFormula();

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level >= 0 && level < 5) {
      return (SectionInfo::SectionType)level;
   }

   return SectionInfo::Anchor;
}

static void addSection()
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict->find(s_sectionLabel);

   if (si) {
      if (si->lineNr != -1) {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName), si->lineNr);

      } else {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName));
      }

   } else {
      // create a new section element
      s_sectionTitle += QString::fromUtf8(commentscanYYtext).trimmed();

      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, s_sectionLabel, s_sectionTitle, 
                  sectionLevelToType(s_sectionLevel), s_sectionLevel);

      // add section to this entry
      current->anchors->append(*si);

      // add section to the global dictionary
      Doxy_Globals::sectionDict->insert(s_sectionLabel, si);

      // for a section the si->fileName is the physical file name. this will be replaced with the section name
      // in doctokenizer processSection()
   }
}

static void addCite()
{
   QString text = QString::fromUtf8(commentscanYYtext);
   Doxy_Globals::citeDict->insert(text);
}

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QString &s)
{
   uint len = s.length();

   int i = len - 1;
   QChar c;

   while (i >= 0 && ((c = s.at(i)) == ' ' || c == '\t' || c == '\r')) {
      i--;
   }

   if (i != len - 1) {
      // string up to and including char at pos i and \0 terminator
      s.resize(i + 2);
   }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
   bool xrefAppendToPrev = xrefAppendFlag;

   // determine append flag for the next item (i.e. the end of this item)
   xrefAppendFlag = ! inBody &&
                    inContext == OutputXRef && ctx == OutputXRef &&    // two consecutive xref items
                    newXRefKind == xrefKind &&                         // of the same kind
                    (xrefKind != XRef_Item ||
                    newXRefItemKey == xrefItemKey);                    // with the same key if \xrefitem

   if (inContext == OutputXRef) {

      // end of XRef section => add the item
      // See if we can append this new xref item to the previous one.
      // We know this at the start of the next item of the same
      // type and need to remember this until the end of that item.

    switch(xrefKind) {
         case XRef_Todo:
            addXRefItem("todo", theTranslator->trTodo(), theTranslator->trTodoList(), xrefAppendToPrev);
            break;

         case XRef_Test:
            addXRefItem("test", theTranslator->trTest(), theTranslator->trTestList(), xrefAppendToPrev);
            break;

         case XRef_Bug:
            addXRefItem("bug", theTranslator->trBug(), theTranslator->trBugList(), xrefAppendToPrev);
            break;

         case XRef_Deprecated:
            addXRefItem("deprecated", theTranslator->trDeprecated(), theTranslator->trDeprecatedList(), xrefAppendToPrev);
            break;

         case XRef_Item:  // user defined list
            addXRefItem(xrefItemKey, xrefItemTitle, xrefListTitle, xrefAppendToPrev);
            break;

         case XRef_None:
            assert(0);
            break;
      }
   }

  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;

   if (inContext != OutputXRef && inBody) {
      inContext = OutputInbody;
   }

  switch(inContext) {
      case OutputDoc:
         if (oldContext != inContext) {
            stripTrailingWhiteSpace(current->doc);

            if (current->docFile.isEmpty()) {
               current->docFile = yyFileName;
               current->docLine = yyLineNr;
            }
         }
         pOutputString = &current->doc;
         break;

      case OutputBrief:
         if (oldContext != inContext) {

            if (current->briefFile.isEmpty()) {
               current->briefFile = yyFileName;
               current->briefLine = yyLineNr;
            }
         }

         if (current->brief.trimmed().isEmpty())  {
            // we only want one brief description even if multiple are given
            pOutputString = &current->brief;

         } else {
            pOutputString = &current->doc;
            inContext = OutputDoc;             // need to switch to detailed docs, see bug 631380
         }
         break;

      case OutputXRef:
         pOutputString = &outputXRef;
         // first item found, so can not append to previous
         // xrefAppendFlag = false;
         break;

      case OutputInbody:
         pOutputString = &current->inbodyDocs;
         break;
   }
}

static void addAnchor(const QString &anchorName)
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict->find(anchorName);

   if (si) {
      // anchor name already exists         
      si->dupAnchor_cnt++;                 

   } else {
      // title is empty, level is zero
      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, anchorName, QString(""), SectionInfo::Anchor, 0);
      si->dupAnchor_fName = yyFileName; 

      Doxy_Globals::sectionDict->insert(anchorName, si);          
      current->anchors->append(*si);
   }
}

// add a string in the output
static inline void addOutput(const QString &s)
{
   *pOutputString += s;
}

static inline void addOutput(QChar s)
{
   *pOutputString += s;
}

static void endBrief(bool addToOutput = true)
{
   if (! current->brief.trimmed().isEmpty()) {
      // only go to the detailed description if we have
      // found some brief description and not just whitespace

      briefEndsAtDot = false;
      setOutput(OutputDoc);

      if (addToOutput) {
         QString text = QString::fromUtf8(commentscanYYtext);
         addOutput(text);
      }
   }
}

static void handleGuard(const QString &expr);

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   s_bufferPosition = buf;

   prevPosition = inputPosition;
   int c = 0;

   while (inputString[inputPosition] != 0) {

      QString tmp1    = inputString.at(inputPosition);
      QByteArray tmp2 = tmp1.toUtf8();

      if (c + tmp2.length() >= max_size)  {
         // buffer is full
         break;
      }

      c += tmp2.length();

      for (auto letters : tmp2) {
         *buf = letters;
          buf++;
      }

      inputPosition++;
   }

   return c;
}

/* start command character */
/* comment parsing states */









































#line 4061 "<stdout>"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38
#define CiteLabel 39
#define CopyDoc 40
#define GuardExpr 41

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 975 "commentscan.l"


  /* What can happen while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 4312 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1145 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9648 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 994 "commentscan.l"
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1000 "commentscan.l"
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1006 "commentscan.l"
{
      // mail address
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1012 "commentscan.l"
{
      // quoted text
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1018 "commentscan.l"
{
      // directory (or chain of commands)
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 1024 "commentscan.l"
{
      // HTML command ends a brief description
      setOutput(OutputDoc);

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 1032 "commentscan.l"
{
      // HTML command that ends a brief description
      if (current->lang == SrcLangExt_CSharp) {
         setOutput(OutputDoc);
      }

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 1042 "commentscan.l"
{
      // start of a .NET XML style brief description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      setOutput(OutputBrief);
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 1049 "commentscan.l"
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      setOutput(OutputBrief);
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 1056 "commentscan.l"
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      setOutput(OutputDoc);
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1063 "commentscan.l"
{
      // end of a brief or detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1069 "commentscan.l"
{
      QString tag = QString::fromUtf8(commentscanYYtext);

      int s = tag.indexOf("id=");

      if (s != -1) {
         // command has id attribute
         QChar c = tag[s + 3];

         if (c == '\'' || c == '"') {
            // valid start
            int e = tag.indexOf(c,s + 4);

            if (e != -1) {
               // found matching end

               QString id = tag.mid(s + 4, e-s-4);   // extract id
               addAnchor(id);
            }
         }
      }

      addOutput(tag);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1094 "commentscan.l"
{
      insidePre = true;
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1100 "commentscan.l"
{
      insidePre = false;
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1106 "commentscan.l"
{
      // RCS tag which end a brief description
      setOutput(OutputDoc);
      REJECT;
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1112 "commentscan.l"
{
      BEGIN(HtmlComment);
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1116 "commentscan.l"
{
      addOutput("\\endinternal ");

      if (! s_processInternalDocs) {
         warn(yyFileName, yyLineNr, "Found \\endinternal without matching \\internal");
      }

      s_processInternalDocs = false;
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1126 "commentscan.l"
{
      // might be a valid command
      // the {B}* in the front was added for bug620924

      QString text = QString::fromUtf8(commentscanYYtext);

      QString cmdName = text.trimmed().mid(1);
      DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);

      if (cmdPtr) {
         // special action is required

         int i = 0;
         while (text[i] == ' ' || text[i] == '\t') {
            i++;
         }

         s_spaceBeforeCmd = QString(text).left(i);

         if (cmdPtr->endsBrief && (inContext != OutputXRef && cmdName=="parblock")) {
            briefEndsAtDot = false;

            // this command forces the end of brief description
            setOutput(OutputDoc);
         }

         if (cmdPtr->func && cmdPtr->func(cmdName)) {
            // implicit split of the comment block into two entries 
            // restart the next block at the start of this command

            s_parseMore = true;

            inputPosition = prevPosition + (yy_bp - s_bufferPosition);     
            yyterminate();

         } else if (cmdPtr->func == nullptr) {
            // command without handler is processed later by parserdoc.cpp
            addOutput(text);
         }

      } else {
         // command not relevant
         addOutput(text);
      }
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1172 "commentscan.l"
{
      // escaped formula command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1178 "commentscan.l"
{
      // language switch command
      QString text = QString::fromUtf8(commentscanYYtext);

      QString langId = text.trimmed().mid(2);

      if (! langId.isEmpty() && Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) != 0) {
         // enable language specific section
         BEGIN(SkipLang);
      }
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1190 "commentscan.l"
{
      // start of a formula with custom environment
      QString text = QString::fromUtf8(commentscanYYtext);

      formulaText = "\\begin";
      formulaEnv = text.trimmed().mid(2);

      if (formulaEnv.at(formulaEnv.length() - 1) == '{') {
         // remove trailing open brace
         formulaEnv = formulaEnv.left(formulaEnv.length() - 1);
      }

      formulaText += formulaEnv;
      formulaNewLines = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1207 "commentscan.l"
{
      // start of a inline formula
      formulaText     = "$";
      formulaNewLines = 0;
      BEGIN(ReadFormulaShort);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1214 "commentscan.l"
{
      // start of a block formula
      formulaText      = "\\[";
      formulaNewLines  = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1221 "commentscan.l"
{
      // begin of a group
      // langParser->handleGroupStartCommand(s_memberGroupHeader);
      openGroup(current, yyFileName, yyLineNr);
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1227 "commentscan.l"
{
      // end of a group
      QString text = QString::fromUtf8(commentscanYYtext);

      closeGroup(current, yyFileName, yyLineNr, true);

      s_memberGroupHeader.resize(0);
      s_parseMore    = true;
      s_needNewEntry = true;

      inputPosition = prevPosition + (yy_bp - s_bufferPosition) + text.length();           
      yyterminate();
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1241 "commentscan.l"
{
      // escaped character
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1247 "commentscan.l"
{
      // normal word
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1253 "commentscan.l"
{
      // explicit end autolist: e.g "  ."
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 29:
#line 1260 "commentscan.l"
case 30:
YY_RULE_SETUP
#line 1260 "commentscan.l"
{
      // start of autolist
      if (! Doxy_Globals::markdownSupport) {
         REJECT;

      } else {

         if (inContext != OutputXRef) {
            briefEndsAtDot = false;
            setOutput(OutputDoc);
         }

         QString text = QString::fromUtf8(commentscanYYtext);
         addOutput(text);
      }
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1277 "commentscan.l"
{
      // start of autolist
      if (inContext != OutputXRef) {
         briefEndsAtDot = false;
         setOutput(OutputDoc);
      }

      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1288 "commentscan.l"
{
      // horizontal line (dashed)
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1294 "commentscan.l"
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1300 "commentscan.l"
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1306 "commentscan.l"
{
      // mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&mdash;");
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1312 "commentscan.l"
{
      // ndash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&ndash;");
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1318 "commentscan.l"
{
      // numbered item
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1324 "commentscan.l"
{
      // . at start or in the middle of a word, or ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1330 "commentscan.l"
{
      // . with escaped space
      QString text = QString::fromUtf8(commentscanYYtext);

      addOutput(text[0]);
      addOutput(text[2]);
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1338 "commentscan.l"
{
      // . with comma such as "e.g.,"
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1344 "commentscan.l"
{
      // ellipsis with escaped space
      addOutput("... ");
   }
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1349 "commentscan.l"
{
      // internal ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 1355 "commentscan.l"
{
      // at least one blank line (or blank line command)

      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext == OutputXRef) {
         // see bug 613024, need to put the newlines after ending the XRef section.

         if (! s_insideParBlock) {
            setOutput(OutputDoc);
         }

         for (int i = 0; i < text.length();  ) {
            if (text[i] == '\n') { 
               addOutput('\n'); 
               i++; 

            } else if (text.mid(i) == "\\_linebr")  { 
               addOutput('\n');
               i += 8;

            } else  {
               i++;
            }
         } 

      } else if (inContext != OutputBrief) {
      
         for (int i = 0; i< text.length(); ) {
            if (text[i] == '\n') {
               addOutput('\n');
               i++;

            } else if (text.mid(i) == "\\_linebr")  { 
                addOutput('\n');
                i += 8;

            } else  {
               i++;

            }
         }

         setOutput(OutputDoc);

      } else {
          // inContext == OutputBrief
          // only go to the detailed description if we have
          // found some brief description and not just whitespace

         endBrief(false);
      }

      lineCount();
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1411 "commentscan.l"
{
      // potential end of a JavaDoc style comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);

      if (briefEndsAtDot) {
         setOutput(OutputDoc);
         briefEndsAtDot=false;
      }
   }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1422 "commentscan.l"
{
      // newline      
      addOutput('\n');
      yyLineNr++;
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1428 "commentscan.l"
{
      // catch-all for anything else
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1434 "commentscan.l"
{     
      QString text = QString::fromUtf8(commentscanYYtext); 
      addOutput(text);
   }
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 48:
YY_RULE_SETUP
#line 1441 "commentscan.l"
{
      BEGIN( Comment );
   }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 1445 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }   
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1453 "commentscan.l"
{
      // ignore unimportant characters
   }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1457 "commentscan.l"
{
      // ignore every else
   }
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 52:
YY_RULE_SETUP
#line 1464 "commentscan.l"
{
      // end of inline formula
      formulaText += "$";
      addOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1471 "commentscan.l"
{
      // end of block formula
      formulaText += "\\]";
      addOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1478 "commentscan.l"
{
      // end of custom env formula
      formulaText += "\\end";
      formulaText += formulaEnv;
      addOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 1486 "commentscan.l"
{
      // any non-special character
      QString text = QString::fromUtf8(commentscanYYtext); 
      formulaText += text;
   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 1492 "commentscan.l"
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext); 

      formulaNewLines++;
      formulaText += text[0];
      yyLineNr++;
   }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 1501 "commentscan.l"
{
      // any othe character
      QString text = QString::fromUtf8(commentscanYYtext); 
      formulaText += text[0]; 
   }
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1510 "commentscan.l"
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext); 
      current->name = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1517 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1523 "commentscan.l"
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\enum");

      addOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 1537 "commentscan.l"
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1544 "commentscan.l"
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext); 
      current->name = substitute(text,".", "::");
      BEGIN( Comment );
   }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1551 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 1557 "commentscan.l"
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\namespace");

      addOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1569 "commentscan.l"
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 66:
YY_RULE_SETUP
#line 1576 "commentscan.l"
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 1583 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 1589 "commentscan.l"
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\package");
      addOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1601 "commentscan.l"
{
      // ignore other stuff
   }
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 1608 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = substitute(removeRedundantWhiteSpace(text),".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 1614 "commentscan.l"
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->name = substitute(text,".","::");
      if (current->section==Entry::PROTOCOLDOC_SEC) {
         current->name+="-p"; 
      }

      // prepend outer scope name
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1627 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = substitute(text,".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1633 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 1639 "commentscan.l"
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\%s", 
                  YY_START == ClassDocArg1 ? "class" : "category" );

      addOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1654 "commentscan.l"
{    
      // ignore other stuff
   }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1658 "commentscan.l"
{
      // second argument; include file
      QString text = QString::fromUtf8(commentscanYYtext);
      current->includeFile = text;
      BEGIN( ClassDocArg3 );
   }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1665 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1671 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addOutput('\n');

      if (text[0] == '\n')  {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1682 "commentscan.l"
{ 
      // ignore other stuff
   }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1687 "commentscan.l"
{
      // third argument; include file name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->includeName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1694 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1700 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] =='\n') { 
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1710 "commentscan.l"
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of {def,add,weak} group commands --------- */
case 84:
YY_RULE_SETUP
#line 1717 "commentscan.l"
{
      // group name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->name = text;

      // lastDefGroup.groupname = text;
      // lastDefGroup.pri = current->groupingPri();
      // the .html stuff is for Qt compatibility

      if (current->name.endsWith(".html")) {
         current->name = current->name.left(current->name.length()-5);
      }

      current->type.resize(0);
      BEGIN(GroupDocArg2);
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1734 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1740 "commentscan.l"
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing group name after %s", csPrintable(current->groupDocCmd()) );

      addOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1753 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1759 "commentscan.l"
{
      // title (stored in type)
      QString text = QString::fromUtf8(commentscanYYtext);
      current->type += text.trimmed();
   }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1765 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if ( current->groupDocType == Entry::GROUPDOC_NORMAL && current->type.isEmpty()) {
            // defgroup requires second argument
            warn(yyFileName, yyLineNr, "Missing title after \\defgroup %s",
                  csPrintable(current->name) );
      }

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 90:
YY_RULE_SETUP
#line 1785 "commentscan.l"
{
      // first argument; page name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->name = stripQuotes(text);
      BEGIN( PageDocArg2 );
   }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1792 "commentscan.l"
{ 
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1797 "commentscan.l"
{
      // missing arguement
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\page");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1810 "commentscan.l"
{
      // ignore other stuff
   }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1814 "commentscan.l"
{
      // second argument; page title
      QString text = QString::fromUtf8(commentscanYYtext);

      yyLineNr++;
      current->args = text;

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1828 "commentscan.l"
{
      // no file name specfied
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1840 "commentscan.l"
{
      // first argument; name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = stripQuotes(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1847 "commentscan.l"
{ 
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1852 "commentscan.l"
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 99:
YY_RULE_SETUP
#line 1859 "commentscan.l"
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      newXRefItemKey = text;
      setOutput(OutputXRef);

      BEGIN(XRefItemParam2);
   }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1869 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1875 "commentscan.l"
{
      // missing arguments
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing first argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      inContext = OutputDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1889 "commentscan.l"
{
      // ignore other stuff
   }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1893 "commentscan.l"
{
      // second argument
      QString text = QString::fromUtf8(commentscanYYtext);
      xrefItemTitle = stripQuotes(text);
      BEGIN(XRefItemParam3);
   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1900 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 1906 "commentscan.l"
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing second argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      inContext = OutputDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1920 "commentscan.l"
{
      // ignore other stuff
   }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1924 "commentscan.l"
{
      // third argument
      QString text = QString::fromUtf8(commentscanYYtext);

      xrefListTitle = stripQuotes(text);
      xrefKind = XRef_Item;

      BEGIN( Comment );
   }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1934 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 1940 "commentscan.l"
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr,"Missing third argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      inContext = OutputDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1954 "commentscan.l"
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 111:
YY_RULE_SETUP
#line 1960 "commentscan.l"
{
      // argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->relates = text;                                          
      BEGIN( Comment );
   }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1968 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 1974 "commentscan.l"
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument of \\relates or \\memberof command");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1987 "commentscan.l"
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1994 "commentscan.l"
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 2006 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 2012 "commentscan.l"
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 118:
YY_RULE_SETUP
#line 2021 "commentscan.l"
{
      // first argyment
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionLabel = text;
      addOutput(text);
      s_sectionTitle.resize(0);

      BEGIN(SectionTitle);
   }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 2032 "commentscan.l"
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\section command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 2045 "commentscan.l"
{
      // invalid character for section label
      warn(yyFileName, yyLineNr, "Invalid or missing section label");
      BEGIN(Comment);
   }
	YY_BREAK
case 121:
/* rule 121 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2051 "commentscan.l"
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 122:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2059 "commentscan.l"
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 2067 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 2073 "commentscan.l"
{
      // any character without special meaning
      QString text = QString::fromUtf8(commentscanYYtext);
      s_sectionTitle += text;
      addOutput(text);
   }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 2080 "commentscan.l"
{
      // unescape escaped command
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text.mid(1);               
      addOutput(text);
   }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 2088 "commentscan.l"
{
      // unescape escaped character
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text[1];
      addOutput(text);
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 2096 "commentscan.l"
{ 
      // anything else
      QString text = QString::fromUtf8(commentscanYYtext);
      
      s_sectionTitle += text;
      addOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 128:
YY_RULE_SETUP
#line 2106 "commentscan.l"
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      
      // we add subpage labels as a kind of "inheritance" relation to prevent
      // needing to add another list to the Entry class.

      current->extends.append(BaseInfo(text, Public, Normal));
      BEGIN(SubpageTitle);
   }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 2118 "commentscan.l"
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\subpage command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 2131 "commentscan.l"
{
      // no title, end command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 2138 "commentscan.l"
{
      // add title, end of command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 2145 "commentscan.l"
{
      // no title, end of command
      unput(commentscanYYtext[0]);     
      BEGIN( Comment );
   }
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 133:
YY_RULE_SETUP
#line 2154 "commentscan.l"
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addAnchor(text);
      addOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 2164 "commentscan.l"
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\anchor command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 2177 "commentscan.l"
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing anchor label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 136:
/* rule 136 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2186 "commentscan.l"
{
      // possible ends
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      if (text.mid(4) == blockName)  {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 2197 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      if (blockName == "startuml")   {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 2207 "commentscan.l"
{ 
      // some word
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 2213 "commentscan.l"
{ 
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
   }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 2224 "commentscan.l"
{
      // */ (editor syntax fix)
      // start of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);

      s_commentCount++;
      addOutput(text);
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 2233 "commentscan.l"
{
      // end of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      s_commentCount--;

      if (s_commentCount < 0 && blockName != "verbatim") {
         warn(yyFileName, yyLineNr, "Found */ without matching /* while inside a \\%s block. "
            "Perhaps there is a missing \\end%s?\n", csPrintable(blockName), csPrintable(blockName));
      }
   }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 2246 "commentscan.l"
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 2252 "commentscan.l"
{
      QString endTag = "@end" + blockName;

      if (blockName == "startuml") {
         endTag = "enduml";
      }

      warn(yyFileName, yyLineNr, "Reached end of comment while inside a @%s block, check for missing @%s tag",
                 csPrintable(blockName), csPrintable(endTag) );

      yyterminate();
   }
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 143:
YY_RULE_SETUP
#line 2268 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr  = text;
      s_roundCount = 1;
      BEGIN(GuardExpr);
   }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 2275 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 2280 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
      s_roundCount++;
   }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 2286 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
      s_roundCount--;

      if (s_roundCount == 0) {
         handleGuard(s_guardExpr);
      }
   }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 2296 "commentscan.l"
{      
      warn(yyFileName, yyLineNr, "Invalid expression '%s' for guard", csPrintable(s_guardExpr));
      unput(commentscanYYtext[0]);
      BEGIN(GuardParam);
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 2302 "commentscan.l"
{
      // parameter of if/ifnot guard
      QString text = QString::fromUtf8(commentscanYYtext);
      handleGuard(text);
   }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 2308 "commentscan.l"
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // next line is commented out due to bug620924
      // addOutput('\n');

      BEGIN( Comment );
   }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 2322 "commentscan.l"
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 2328 "commentscan.l"
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 2334 "commentscan.l"
{
      s_spaceBeforeIf.resize(0);
      BEGIN(Comment);
   }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 2339 "commentscan.l"
{  
      if (! s_spaceBeforeIf.isEmpty()) {
         // needed for 665313 in combation with bug620924
   
         addOutput(s_spaceBeforeIf);
      }

      s_spaceBeforeIf.resize(0);
      BEGIN(Comment);
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 2350 "commentscan.l"
{
      unput(commentscanYYtext[0]);
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 155:
/* rule 155 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2357 "commentscan.l"
{
      guardType = Guard_IfNot;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 156:
/* rule 156 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2362 "commentscan.l"
{
      guardType = Guard_If;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 157:
/* rule 157 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2367 "commentscan.l"
{
      if (guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found @endif without matching start command");

       } else {
         GuardedSection *s  = guards.pop();
         bool parentVisible = s->parentVisible();
         delete s;

         if (parentVisible) {
            enabledSectionFound = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 158:
/* rule 158 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2383 "commentscan.l"
{
      if (guards.isEmpty()) {
         warn(yyFileName, yyLineNr, "Found @else without matching start command");

      } else {

         if (! enabledSectionFound && guards.top()->parentVisible()) {
            delete guards.pop();
            guards.push(new GuardedSection(true,true));
            enabledSectionFound = true;

            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 159:
/* rule 159 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2399 "commentscan.l"
{
      if (guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found @elseif without matching start command");

       } else {

         if (! enabledSectionFound && guards.top()->parentVisible()) {
            guardType = Guard_If;
            delete guards.pop();

            BEGIN( GuardParam );
         }
      }
   }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 2414 "commentscan.l"
{ 
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // addOutput('\n');
   }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 2425 "commentscan.l"
{ 
      // skip non-special characters
   }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 2429 "commentscan.l"
{ 
      // any other character
   }
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 2436 "commentscan.l"
{ 
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  { 
         yyLineNr++;
      }

      addOutput('\n');
   }
	YY_BREAK
case 164:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2447 "commentscan.l"
{
      s_condCount++;
   }
	YY_BREAK
case 165:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2451 "commentscan.l"
{
      s_condCount++;
   }
	YY_BREAK
case 166:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2455 "commentscan.l"
{
      s_condCount--;
   
      if (s_condCount < 0 )   {
         // handle conditional section around \internal, see bug607743
      
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 167:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2466 "commentscan.l"
{
      if (s_sectionLevel > 0 ) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2473 "commentscan.l"
{
      if (s_sectionLevel > 1)  {                 
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 169:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2480 "commentscan.l"
{
      if (s_sectionLevel > 2) {      
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 170:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2487 "commentscan.l"
{
      if (s_sectionLevel > 3) {      
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 2494 "commentscan.l"
{
      addOutput("\\endinternal ");
      BEGIN(Comment);
   }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 2499 "commentscan.l"
{ 
      // skip non-special characters
   }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 2503 "commentscan.l"
{ 
      // any other character
   }
	YY_BREAK
/* ----- handle argument of name command ------- */
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 2509 "commentscan.l"
{ 
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 2521 "commentscan.l"
{ 
      // line continuation
      yyLineNr++;
      addOutput('\n');
      s_memberGroupHeader+=' ';
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2528 "commentscan.l"
{ 
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_memberGroupHeader += text[0];
      current->name       += text[0];
   }
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 177:
YY_RULE_SETUP
#line 2538 "commentscan.l"
{ 
      // group id
      QString text = QString::fromUtf8(commentscanYYtext);

      current->groups->append(Grouping(text, Grouping::GROUPING_INGROUP) ); 
      inGroupParamFound = true;
   }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 2546 "commentscan.l"
{ 
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! inGroupParamFound) {
         warn(yyFileName,yyLineNr, "Missing group name for \\ingroup command");
      }

      if (text[0] == '\n')   {
         yyLineNr++; 
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 2562 "commentscan.l"
{ 
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 2568 "commentscan.l"
{ 
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 2577 "commentscan.l"
{ 
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (braceCount == 0) {
         if (text[0] == '\n')   {
            yyLineNr++; 
         }
         
         addOutput('\n');        
         langParser->parsePrototype(functionProto);
         BEGIN( Comment );
      }
   }
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 2592 "commentscan.l"
{ 
      // line continuation
      yyLineNr++;
      functionProto += ' ';
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2598 "commentscan.l"
{ 
      // non-special characters
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
   }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2604 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
      braceCount++;
   }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2610 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
      braceCount--;
   }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 2616 "commentscan.l"
{ 
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 2624 "commentscan.l"
{ 
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')  {
         yyLineNr++;
      }   

      if (functionProto.trimmed().isEmpty()) { 
         // plain overload command
         addOutput(theTranslator->trOverloadText());
         addOutput('\n');

      }  else   {
         // overload declaration      
         makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
         langParser->parsePrototype(functionProto);
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 2645 "commentscan.l"
{ 
      // line continuation
      yyLineNr++;
      functionProto += ' ';
   }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 2651 "commentscan.l"
{ 
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 190:
YY_RULE_SETUP
#line 2660 "commentscan.l"
{ 
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text), Public, Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 2668 "commentscan.l"
{ 
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\inherit command has no argument");

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2682 "commentscan.l"
{ 
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing name for \\inherit command");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 193:
YY_RULE_SETUP
#line 2691 "commentscan.l"
{ 
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text),Public,Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 2698 "commentscan.l"
{ 
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName,yyLineNr, "\\extends or \\implements command has no argument");

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2711 "commentscan.l"
{ 
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle language specific sections ------- */
case 196:
YY_RULE_SETUP
#line 2717 "commentscan.l"
{
      /* language switch */
      QString text = QString::fromUtf8(commentscanYYtext);
      QString langId = text.mid(2);

      if (langId.isEmpty() || Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) == 0) {
         // enable language specific section
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 2728 "commentscan.l"
{ 
      /* any character not a *, @, backslash or new line */
   }
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 2732 "commentscan.l"
{ 
      /* new line in verbatim block */
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 2741 "commentscan.l"
{ 
      /* any other character */
   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 200:
YY_RULE_SETUP
#line 2748 "commentscan.l"
{ 
      // found argyment
      QString text = QString::fromUtf8(commentscanYYtext);

      addCite();
      addOutput(text);
      BEGIN(Comment);
   }
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 2757 "commentscan.l"
{ 
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\cite command has no label" );

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 2770 "commentscan.l"
{ 
      // invalid character for cite label
      warn(yyFileName,yyLineNr, "Invalid or missing cite label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
#line 2779 "commentscan.l"
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 2780 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')   {
         yyLineNr++; 
      }
      
      addOutput('\n');

      setOutput(OutputDoc);
      addOutput("\\copydetails ");
      addOutput(s_copyDocArg);

      addOutput("\n");

      BEGIN(Comment);
   }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 2797 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addOutput(text);
   }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 2803 "commentscan.l"
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addOutput(text);
   }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 2809 "commentscan.l"
ECHO;
	YY_BREAK
#line 6925 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1145 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1145 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1144);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2809 "commentscan.l"



static bool handleBrief(const QString &)
{
   setOutput(OutputBrief);
   return false;
}

static bool handleFn(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   functionProto.resize(0);
   braceCount = 0;
   BEGIN(FnParam);

   return stop;
}

static bool handleDef(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::DEFINEDOC_SEC);
   functionProto.resize(0);
   BEGIN(FnParam);
   return stop;
}

static bool handleOverload(const QString &)
{
   functionProto.resize(0);
   BEGIN(OverloadParam);
   return false;
}

static bool handleEnum(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::ENUMDOC_SEC);
   BEGIN(EnumDocArg1);
   return stop;
}

static bool handleDefGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_NORMAL;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleAddToGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_ADD;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleWeakGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_WEAK;
   BEGIN( GroupDocArg1 );
   return stop;
}

static bool handleNamespace(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
   BEGIN( NameSpaceDocArg1 );
   return stop;
}

static bool handlePackage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
   BEGIN( PackageDocArg1 );
   return stop;
}

static bool handleClass(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::CLASSDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleHeaderFile(const QString &)
{
   BEGIN( ClassDocArg2 );
   return false;
}

static bool handleProtocol(const QString &)
{
   // Obj-C protocol
   bool stop = makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleCategory(const QString &)
{
   // Obj-C category
   bool stop = makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
   BEGIN( CategoryDocArg1 );
   return stop;
}

static bool handleUnion(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::UNIONDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleStruct(const QString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleInterface(const QString &)
{
  bool stop = makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleIdlException(const QString &)
{
  bool stop = makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handlePage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::PAGEDOC_SEC);
   BEGIN( PageDocArg1 );
   return stop;
}

static bool handleMainpage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
   
   if (! stop) {
      current->name = "mainpage";
   }
   
   BEGIN( PageDocArg2 );
   return stop;
}

static bool handleFile(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::FILEDOC_SEC);

   if (! stop) {
      current->name = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleDir(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::DIRDOC_SEC);

   if (! stop) {
      current->name = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleExample(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::EXAMPLE_SEC);

   if (! stop) {
      current->name = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleDetails(const QString &)
{
   if (inContext != OutputBrief) {
      // treat @details outside brief description as a new paragraph
      addOutput("\n\n"); 
   }

   setOutput(OutputDoc);
   return false;
}

static bool handleName(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERGRP_SEC);

   if (! stop) {  
      s_memberGroupHeader.resize(0);
      BEGIN( NameParam );

      if (s_memberGroupId != DOX_NOGROUP) {
         // end of previous member group
    
         closeGroup(current,yyFileName,yyLineNr,true);
       }
  }

  return stop;
}

static bool handleTodo(const QString &)
{
   newXRefKind = XRef_Todo;
   setOutput(OutputXRef);
   xrefKind = XRef_Todo;
   return false;
}

static bool handleTest(const QString &)
{
   newXRefKind = XRef_Test;
   setOutput(OutputXRef);
   xrefKind = XRef_Test;
   return false;
}

static bool handleBug(const QString &)
{
   newXRefKind = XRef_Bug;
   setOutput(OutputXRef);
   xrefKind = XRef_Bug;
   return false;
}

static bool handleDeprecated(const QString &)
{
   newXRefKind = XRef_Deprecated;
   setOutput(OutputXRef);
   xrefKind = XRef_Deprecated;
   return false;
}

static bool handleXRefItem(const QString &)
{
   newXRefKind = XRef_Item;
   BEGIN(XRefItemParam1);
   return false;
}

static bool handleParBlock(const QString &)
{
   if (s_insideParBlock)   {
      warn(yyFileName,yyLineNr, "Found \\parblock command while already in a parblock");
   }
   
   if (! s_spaceBeforeCmd.isEmpty()) {
      addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }
   
   addOutput("@parblock ");
   s_insideParBlock = true;

   return false;
}

static bool handleEndParBlock(const QString &)
{
   if (! s_insideParBlock) {
     warn(yyFileName,yyLineNr, "Found \\endparblock command without matching \\parblock");
   }

   addOutput("@endparblock");
   setOutput(OutputDoc); // to end a parblock inside a xrefitem like context
   s_insideParBlock = false;

   return false;
}

static bool handleRelated(const QString &)
{
   BEGIN(RelatesParam1);
   return false;
}

static bool handleRelatedAlso(const QString &)
{
   current->relatesType = Duplicate;
   BEGIN(RelatesParam1);
   return false;
}

static bool handleMemberOf(const QString &)
{
   current->relatesType = MemberOf;
   BEGIN(RelatesParam1);
   return false;
}

static bool handleRefItem(const QString &)
{
   addOutput("@refitem ");
   BEGIN(LineParam);
   return false;
}

static bool handleSection(const QString &s)
{
   setOutput(OutputDoc);
   addOutput("@"+s+" ");
   BEGIN(SectionLabel);

   if (s == "section") {
      s_sectionLevel = 1;

   } else if (s == "subsection") {
      s_sectionLevel = 2;

   } else if (s == "subsubsection") {
      s_sectionLevel = 3;

   } else if (s == "paragraph") {
      s_sectionLevel = 4;

   }

   return false;
}

static bool handleSubpage(const QString &s)
{
   if (current->section != Entry::EMPTY_SEC && current->section != Entry::PAGEDOC_SEC && 
         current->section != Entry::MAINPAGEDOC_SEC) {

      warn(yyFileName,yyLineNr, "Found \\subpage command in a comment block that is not marked as a page");
  }

  if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
  }

   addOutput("@"+s+" ");
   BEGIN(SubpageLabel);

   return false;
}

static bool handleAnchor(const QString &s)
{
   addOutput("@"+s+" ");
   BEGIN(AnchorLabel);
   return false;
}

static bool handleCite(const QString &s)
{
   if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addOutput("@"+s+" ");
   BEGIN(CiteLabel);
   return false;
}

static bool handleFormatBlock(const QString &s)
{
   addOutput("@"+s+" ");
   blockName=s;
   s_commentCount=0;
   BEGIN(FormatBlock);

   return false;
}

static bool handleAddIndex(const QString &)
{
   addOutput("@addindex ");
   BEGIN(LineParam);
   return false;
}

static bool handleIf(const QString &)
{
   enabledSectionFound = false;
   guardType = Guard_If;
   s_spaceBeforeIf = s_spaceBeforeCmd;
   BEGIN(GuardParam);
   return false;
}

static bool handleIfNot(const QString &)
{
   enabledSectionFound = false;
   guardType = Guard_IfNot;
   s_spaceBeforeIf = s_spaceBeforeCmd;
   BEGIN(GuardParam);
   return false;
}

static bool handleElseIf(const QString &)
{
   if (guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");
   } else {
      guardType = enabledSectionFound ? Guard_Skip : Guard_If;
      BEGIN(GuardParam);
   }
   
   return false;
}

static bool handleElse(const QString &)
{
   if (guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");
   } else {
      BEGIN( SkipGuardedSection );
   }

   return false;
}

static bool handleEndIf(const QString &)
{
   if (guards.isEmpty())   {
      warn(yyFileName,yyLineNr, "Found \\endif without matching start command");
   
   } else {
      delete guards.pop();
   }
   
   enabledSectionFound = false;
   if (! s_spaceBeforeCmd.isEmpty()) {
      addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   BEGIN( GuardParamEnd );
   return false;
}

static bool handleIngroup(const QString &)
{
   inGroupParamFound = false;
   BEGIN( InGroupParam );
   return false;
}

static bool handleNoSubGrouping(const QString &)
{
   current->subGrouping = false;
   return false;
}

static bool handleShowInitializer(const QString &)
{
   current->initLines = 100000;  // ON
   return false;
}

static bool handleHideInitializer(const QString &)
{
   current->initLines = 0;       
   return false;
}

static bool handleCallgraph(const QString &)
{
   current->callGraph = true; 
   return false;
}

static bool handleHideCallgraph(const QString &)
{
   current->callGraph = false; 
   return false;
}

static bool handleCallergraph(const QString &)
{
   current->callerGraph = true; 
   return false;
}

static bool handleHideCallergraph(const QString &)
{
   current->callerGraph = false; 
   return false;
}

static bool handleInternal(const QString &)
{
   if (s_internalDocs) {
      // re-enabled for bug640828
      addOutput("\\internal ");
      s_processInternalDocs = true;

   } else {
      // make sure some whitespace before an \internal command
      // is not treated as "documentation"

      if (current->doc.trimmed().isEmpty()) {
         current->doc.resize(0);
      }

      s_condCount = 0;
      BEGIN( SkipInternal );  
  }

  return false;
}

static bool handleLineBr(const QString &)
{
   addOutput('\n');
   return false;
}

static bool handleStatic(const QString &)
{
   endBrief();
   current->stat = true;
   return false;
}

static bool handlePure(const QString &)
{
   endBrief();
   current->virt = Pure;
   return false;
}

static bool handlePrivate(const QString &)
{
  current->protection = Private;
  return false;
}

static bool handlePrivateSection(const QString &)
{
   current->protection = protection = Private;
   return false;
}

static bool handleProtected(const QString &)
{
   current->protection = Protected;
   return false;
}

static bool handleProtectedSection(const QString &)
{
   current->protection = protection = Protected ;
   return false;
}

static bool handlePublic(const QString &)
{
   current->protection = Public;
   return false;
}

static bool handlePublicSection(const QString &)
{
   current->protection = protection = Public;
   return false;
}

static bool handleToc(const QString &)
{
   if (current->section == Entry::PAGEDOC_SEC || current->section==Entry::MAINPAGEDOC_SEC) {
      current->stat = true;  // we 'abuse' stat to pass whether or the TOC is enabled
   }
   return false;
}

static bool handleInherit(const QString &)
{
   BEGIN(InheritParam);
   return false;
}

static bool handleExtends(const QString &)
{
   BEGIN(ExtendsParam);
   return false;
}

static bool handleCopyBrief(const QString &)
{
   if (current->brief.isEmpty() && current->doc.isEmpty()) {

      // if we don't have a brief or detailed description yet,
      // then the @copybrief should end up in the brief description.
      // otherwise it will be copied inline (see bug691315 & bug700788)

      setOutput(OutputBrief);
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addOutput("\\copybrief ");
   return false;
}

static bool handleCopyDetails(const QString &)
{
   setOutput(OutputDoc);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addOutput("\\copydetails ");
   return false;
}

static bool handleCopyDoc(const QString &)
{
   setOutput(OutputBrief);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addOutput("\\copybrief ");
   s_copyDocArg.resize(0);
   BEGIN(CopyDoc);

   return false;
}

static void checkFormula()
{
   if (YY_START == ReadFormulaShort || YY_START == ReadFormulaLong) {
      warn(yyFileName, yyLineNr, "End of comment block while inside formula.");
   }
}

// main entry point
bool parseCommentBlock(ParserInterface *parser, QSharedPointer<Entry> curEntry, const QString &comment,
                  const QString &fileName, int &lineNr, bool isBrief, bool isAutoBriefOn, bool isInbody,
                  Protection &r_protection, int &r_position, bool &r_newEntryNeeded )
{
   initParser();

   guards.clear();
   langParser = parser;
   current    = curEntry;

   if (comment.isEmpty()) {
      // avoid empty strings
      return FALSE;
   }

   inputString    = comment;
   inputString.append(" ");

   inputPosition  = r_position;
   yyFileName     = fileName;
   yyLineNr       = lineNr;
   protection     = r_protection;
   s_needNewEntry = false;
   xrefKind       = XRef_None;
   xrefAppendFlag = false;
   insidePre      = false;
   s_parseMore    = false;
   inBody         = isInbody;

   outputXRef.resize(0);
   setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
   briefEndsAtDot = isAutoBriefOn;
  
   s_condCount    = 0;
   s_sectionLevel = 0;
   s_spaceBeforeCmd.resize(0);
   s_spaceBeforeIf.resize(0);

   printlex(commentscanYY_flex_debug, true, __FILE__, fileName);

   if (! current->doc.isEmpty()) {
      // separate detailed doc fragments
      current->doc += "\n\n";
   }

   if (! current->inbodyDocs.isEmpty() && isInbody) {
      // separate in body fragments
      current->inbodyDocs += "\n\n";
   }

   Debug::print(Debug::CommentScan, 0, "-----------\nCommentScanner: %s:%d\n"
                "input=[\n%s]\n", csPrintable(fileName), lineNr, csPrintable(comment) );
              
   commentscanYYrestart(commentscanYYin);   
   BEGIN( Comment );

   commentscanYYlex();
   setOutput(OutputDoc);

   if (YY_START == OverloadParam) {
      // comment ended with \overload
      addOutput(theTranslator->trOverloadText());
   }

   if (! guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Documentation block ended in the middle of a conditional section");
   }

   if (s_insideParBlock) {
      warn(yyFileName, yyLineNr, "Documentation block ended while inside a \\parblock. Missing \\endparblock");
   }

   // removes blank lines from the detailed docs
   current->doc = trimEmptyLines(current->doc, current->docLine);

   if (current->section == Entry::FILEDOC_SEC && current->doc.isEmpty()) {
      // to allow a comment block with just a @file command
      current->doc = "\n\n";
   }

   if (current->section == Entry::MEMBERGRP_SEC && s_memberGroupId == DOX_NOGROUP) {
      // @name section but no group started yet
      openGroup(current, yyFileName, yyLineNr);
   }

   if (Doxy_Globals::markdownSupport) {
      current->brief      = processMarkdown(fileName, lineNr, current, current->brief);
      current->doc        = processMarkdown(fileName, lineNr, current, current->doc);
      current->inbodyDocs = processMarkdown(fileName, lineNr, current, current->inbodyDocs);
   }

   Debug::print(Debug::CommentScan, 0, "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n===========\n",
                current->briefLine,  qPrintable(current->brief), current->docLine, qPrintable(current->doc),
                current->inbodyLine, qPrintable(current->inbodyDocs) );

   checkFormula();
   r_protection = protection;

   groupAddDocs(curEntry);
   r_newEntryNeeded = s_needNewEntry;
    
   if (s_parseMore && r_position == inputPosition) {
      // did not proceed during this call, do not continue or there will be an infinate loop
      s_parseMore = false;
   }

   if (s_parseMore) {
      r_position = inputPosition;
   } else {
      r_position = 0;
   }

   lineNr = yyLineNr;

   printlex(commentscanYY_flex_debug, false, __FILE__, fileName);

   return s_parseMore;
}

void groupEnterFile(const QString &fileName, int)
{
   s_autoGroupStack.clear();
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupDocs.resize(0);
   s_memberGroupRelates.resize(0);
   s_compoundName = fileName;
}

void groupLeaveFile(const QString &fileName, int line)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);

   if (! s_autoGroupStack.isEmpty()) {
      warn(fileName, line, "End of file while inside a group\n");
   }
}

void groupEnterCompound(const QString &fileName, int line, const QString &name)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      warn(fileName, line, "Try to put compound %s inside a member group\n", qPrintable(name));
   }

   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);
   s_compoundName = name;

   int i = s_compoundName.indexOf('(');

   if (i != -1) {
      // strip category (Obj-C)
      s_compoundName=s_compoundName.left(i);
   }

   if (s_compoundName.isEmpty()) {
      s_compoundName=fileName;
   }
}

void groupLeaveCompound(const QString &, int, const QString &)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);
   s_compoundName.resize(0);
}

static int findExistingGroup(int &groupId, const QSharedPointer<MemberGroupInfo> info)
{
   for (auto di = Doxy_Globals::memGrpInfoDict.begin(); di != Doxy_Globals::memGrpInfoDict.end(); ++di) {

      auto mi = *di;

      if (s_compoundName == mi->compoundName && ! mi->header.isEmpty() && 
               mi->header.compare(info->header, Qt::CaseInsensitive) == 0) {

         // same file or scope, not a nameless group, same header name

         return (int)di.key();    // put the item in this group
      }
   }

   groupId++; // start new group
   return groupId;
}

void openGroup(QSharedPointer<Entry> e, const QString &, int)
{
   if (e->section == Entry::GROUPDOC_SEC) {
      // auto group
      s_autoGroupStack.push( QMakeShared<Grouping>(e->name, e->groupingPri()) ); 

   } else {
      // start of a member group

      if (s_memberGroupId == DOX_NOGROUP) {
         // no group started yet
         static int curGroupId = 0;

         QSharedPointer<MemberGroupInfo> info = QMakeShared<MemberGroupInfo>();

         info->header = s_memberGroupHeader.trimmed();
         info->compoundName = s_compoundName;
         s_memberGroupId = findExistingGroup(curGroupId, info);

         Doxy_Globals::memGrpInfoDict.insert(s_memberGroupId, info);

         s_memberGroupRelates = e->relates;
         e->mGrpId = s_memberGroupId;
      }
   }
}

void closeGroup(QSharedPointer<Entry> e, const QString &fileName, int line, bool foundInline)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      // end of member group

      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         // known group
         info->doc = s_memberGroupDocs;
         info->docFile = fileName;
         info->docLine = line;
      }

      s_memberGroupId = DOX_NOGROUP;
      s_memberGroupRelates.resize(0);
      s_memberGroupDocs.resize(0);

      if (! foundInline) {
         e->mGrpId = DOX_NOGROUP;
      }

   } else if (! s_autoGroupStack.isEmpty()) {
      // end of auto group
      QSharedPointer<Grouping> grp = s_autoGroupStack.pop();

      // see bug577005: we should not remove the last group for e
      if (! foundInline) {
         e->groups->removeLast();
      }
     
      if (! foundInline) {
         initGroupInfo(e);
      }
   }
}

void initGroupInfo(QSharedPointer<Entry> e)
{
   e->mGrpId  = s_memberGroupId;
   e->relates = s_memberGroupRelates;

   if (! s_autoGroupStack.isEmpty()) {
      e->groups->append(*s_autoGroupStack.top());
   }
}

static void groupAddDocs(QSharedPointer<Entry> e)
{
   if (e->section == Entry::MEMBERGRP_SEC) {
      s_memberGroupDocs = e->brief.trimmed();
      e->doc = trimEmptyLines(e->doc, e->docLine);

      if (! s_memberGroupDocs.isEmpty() && ! e->doc.isEmpty()) {
         s_memberGroupDocs+="\n\n";
      }

      s_memberGroupDocs += e->doc;
      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         info->doc = s_memberGroupDocs;
         info->docFile = e->docFile;
         info->docLine = e->docLine;
         info->setRefItems(e->sli);
      }

      e->doc.resize(0);
      e->brief.resize(0);
   }
}

static void handleGuard(const QString &expr)
{
   CondParser prs;
   bool sectionEnabled = prs.parse(yyFileName, yyLineNr, expr.trimmed());
   bool parentEnabled  = true;

   if (! guards.isEmpty()) {
      parentEnabled = guards.top()->isEnabled();
   }

   if (parentEnabled) {
      if ( (sectionEnabled && guardType == Guard_If) || (!sectionEnabled && guardType == Guard_IfNot)) {
         // section is visible
         guards.push(new GuardedSection(true, true));
         enabledSectionFound = true;
         BEGIN( GuardParamEnd );

      } else {
         // section is invisible
         if (guardType != Guard_Skip) {
            guards.push(new GuardedSection(false, true));
         }

         BEGIN( SkipGuardedSection );
      }

   } else {
      // invisible because of parent
      guards.push(new GuardedSection(false, false));
      BEGIN( SkipGuardedSection );
   }
}

