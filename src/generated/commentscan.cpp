
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 209
#define YY_END_OF_BUFFER 210
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[777] =
    {   0,
       79,   79,  127,  127,  141,  141,  156,  156,  200,  200,
      147,  147,  210,  209,   46,  209,   46,  209,   45,  209,
       46,  209,   46,  209,   46,  209,   46,  209,   44,   46,
      209,   46,  209,   46,  209,   27,   46,  209,   46,  209,
       46,  209,   46,  209,   46,  209,   46,  209,   46,  209,
       44,   46,  209,   46,  209,   46,  209,   92,  209,   91,
      209,   92,  209,   89,   92,  209,   92,  209,   92,  209,
      209,   93,  209,  117,  209,  116,  209,  117,  209,  114,
      117,  209,  117,  209,   74,  209,   74,  209,   73,  209,
       74,  209,   74,  209,   74,  209,   70,   74,  209,   74,

      209,   74,  209,   78,  209,   77,  209,   78,  209,   75,
       78,  209,   78,  209,   78,  209,   78,  209,   82,  209,
       81,  209,   79,   82,  209,   79,   82,  209,   82,  209,
       79,   82,  209,   79,   82,  209,   82,  209,   74,  209,
       73,  209,   74,  209,   74,  209,   74,  209,   74,  209,
       74,  209,  105,  209,  104,  209,  102,  105,  209,  105,
      209,  109,  209,  108,  209,  109,  209,  109,  209,  113,
      209,  112,  209,  113,  209,  113,  209,  101,  209,   98,
      209,  101,  209,   99,  101,  209,  101,  209,  101,  209,
       97,  209,   97,  209,   95,   97,  209,   96,   97,  209,

    16478,   60,  209,   59,  209,   60,  209,   57,   60,  209,
       60,  209,   64,  209,   64,  209,   63,  209,   64,  209,
       64,  209,   64,  209,   61,   64,  209,   64,  209,   64,
      209,   68,  209,   67,  209,   68,  209,   65,   68,  209,
       68,  209,   85,  209,   83,  209,  209,   87,  209,   88,
      209,  209,  123,  209,  122,  209,  121,  123,  209,  123,
      209,  127,  130,  209,  124,  209,  127,  130,  209,  130,
      209,  130,  209,  132,  209,  131,  209,  209,  135,  209,
      135,  209,  133,  209,  135,  209,  135,  209,  141,  145,
      209,  142,  209,  145,  209,  145,  209,  145,  209,  145,

      209,  145,  209,  120,  209,  118,  209,  120,  209,  154,
      209,  154,  209,  152,  209,  146,  154,  209,  151,  154,
      209,  154,  209,  157,  209,  156,  157,  209,  155,  209,
      157,  209,  164,  165,  209,  163,  209,  165,  209,  165,
      209,  165,  209,  175,  176,  209,  166,  209,  176,  209,
      176,  209,  176,  209,  179,  209,  177,  209,  179,  209,
      183,  209,  181,  209,  180,  183,  209,  183,  209,  186,
      189,  209,  184,  209,  187,  189,  209,  188,  189,  209,
      189,  209,  189,  209,  192,  209,  190,  209,  192,  209,
      195,  209,  194,  209,  195,  209,  193,  195,  209,  195,

      209,  198,  209,  197,  209,  198,  209,  196,  198,  209,
      198,  209,   54,   56,  209,   55,  209,   56,  209,   56,
      209,  138,  209,  137,  209,  136,  138,  209,  138,  209,
       49,   50,  209,   48,  209,   50,  209,   50,  209,  200,
      202,  209,  201,  209,  202,  209,  202,  209,  202,  209,
      205,  209,  204,  209,  203,  205,  209,  205,  209,  207,
      208,  209,  206,  209,  208,  209,  147,  209,  147,  150,
      209,  148,  209,  149,  209,   43,    4,   36,   38,   40,
       38,   26,   26,   18,   26,   18,   18,   24,   25,   20,
       26,   27,   18,   18,   18,   18,   30,   31,   36,   28,

       89,   89,   90,   89,   93,  114,  114,  115,   70,   70,
       72,   70,   75,   75,   76,   75,   79,   79,   79,   79,
       79,   79,   80,   79,  102,  103,  106,  107,  111,  110,
      111,   99,   99,  100,   99,   96,16478, 8286,   96,16478,
       57,   57,   57,   58,   61,   61,   62,   61,   65,   65,
       66,   83,   84,   87,   86,  121,  127,  124,  127,  129,
      129,  126,  131,  134,  141,  144,  143,  119,  146,  151,
      153,  156,  155,  164,  175,  178,  180,  182,  186,  185,
      191,  193,  193,  196,  196,   54,  136,   49,  200,  199,
      203,  207,  147,   26,   37,   35,   42,   38,   42,   42,

       42,   38,   42,   42,   39,    6,   34,    1,    1,    2,
       18,   18,   22,   23,   20,    5,   18,   18,   32,   35,
       29,   89,   89,   70,   75,   75,   79,   79,   79,   99,
       99,   57,   57,   57,   57,   61,   65,  128,   51,   52,
       53,   47,  199,  203,   42,   42,   16,   33,    1,   19,
        2,   18,   18,   18,   89,   69,   75,   79,   79,   71,
       99,   57,   57,   57,   65,  128,  159,  167,   47,  203,
       15,   41,    6,   13,   18,   21,   18,   18,   89,   75,
       79,   99,    3,   14,    7,   18,   21,   18,   18,   89,
       75,   79,   99,   83,  161,  169,   18,   18,   18,   89,

       75,   79,   99,  140,  160,  158,  168,   18,   18,   18,
       89,   91,  116,   73,   75,   77,   79,   81,  104,  108,
      112,   98,   99,   59,   63,   67,   85,   88,  122,  125,
      132,  133,  139,  142,  118,  152,  162,  163,  166,  177,
      181,  184,  190,  194,  197,  137,   48,  201,  204,  206,
       12,    9,    8,   18,   18,    5,   18,  170,   11,   10,
       18,   18,   18,   18,  173,   17,   18,   17,   18,  174,
      171,   17,   18,  174,  172,   43
    } ;

static yyconst flex_int16_t yy_accept[1151] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    5,    5,    5,    5,    6,    7,    7,
        7,    7,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   10,
       11,   11,   11,   11,   11,   12,   13,   14,   15,   17,
       19,   21,   23,   25,   27,   29,   32,   34,   36,   39,

       41,   43,   45,   47,   49,   51,   54,   56,   58,   60,
       62,   64,   67,   69,   71,   72,   74,   76,   78,   80,
       83,   85,   87,   89,   91,   93,   95,   97,  100,  102,
      104,  106,  108,  110,  113,  115,  117,  119,  121,  123,
      126,  129,  131,  134,  137,  139,  141,  143,  145,  147,
      149,  151,  153,  155,  157,  160,  162,  164,  166,  168,
      170,  172,  174,  176,  178,  180,  182,  184,  187,  189,
      191,  193,  195,  198,  202,  204,  206,  208,  211,  213,
      215,  217,  219,  221,  223,  225,  228,  230,  232,  234,
      236,  238,  241,  243,  245,  247,  248,  250,  252,  253,

      255,  257,  260,  262,  265,  267,  270,  272,  274,  276,
      278,  279,  281,  283,  285,  287,  289,  292,  294,  296,
      298,  300,  302,  304,  306,  308,  310,  312,  314,  316,
      319,  322,  324,  326,  329,  331,  333,  336,  338,  340,
      342,  344,  347,  349,  351,  353,  355,  357,  359,  361,
      363,  365,  368,  370,  373,  375,  378,  381,  383,  385,
      387,  389,  391,  393,  395,  397,  400,  402,  404,  406,
      408,  411,  413,  416,  418,  420,  422,  424,  426,  429,
      431,  434,  436,  438,  440,  443,  445,  447,  449,  451,
      453,  455,  458,  460,  463,  465,  467,  469,  472,  474,

      476,  476,  476,  476,  476,  477,  477,  477,  478,  478,
      478,  478,  478,  478,  479,  480,  481,  481,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  483,  483,  484,  485,  486,  487,  488,  489,
      490,  492,  493,  493,  494,  495,  496,  497,  497,  497,
      497,  497,  497,  497,  498,  499,  500,  500,  501,  501,
      501,  501,  501,  501,  502,  503,  503,  503,  503,  504,
      505,  505,  506,  507,  507,  508,  508,  508,  509,  509,
      509,  509,  509,  509,  510,  510,  510,  511,  511,  511,
      512,  512,  512,  512,  513,  513,  514,  515,  515,  515,

      515,  516,  517,  517,  518,  519,  519,  520,  521,  522,
      522,  522,  523,  523,  524,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  526,
      526,  527,  527,  527,  528,  528,  530,  530,  530,  531,
      531,  532,  532,  532,  533,  534,  534,  534,  534,  535,
      536,  538,  538,  539,  541,  542,  542,  542,  543,  543,
      544,  544,  545,  545,  545,  545,  545,  545,  546,  546,
      546,  547,  547,  548,  548,  548,  548,  549,  550,  550,
      551,  551,  552,  552,  553,  553,  553,  554,  554,  555,
      555,  556,  556,  557,  557,  558,  559,  560,  560,  561,

      562,  562,  563,  563,  564,  564,  564,  564,  564,  565,
      565,  566,  567,  568,  568,  568,  568,  569,  569,  569,
      570,  571,  571,  572,  572,  573,  574,  574,  574,  575,
      575,  575,  575,  576,  576,  576,  576,  576,  576,  576,
      577,  577,  578,  578,  579,  579,  580,  580,  581,  581,
      581,  582,  582,  583,  583,  584,  584,  584,  585,  585,
      586,  586,  586,  587,  587,  587,  588,  588,  589,  589,
      589,  590,  591,  591,  592,  592,  592,  593,  593,  594,
      595,  595,  595,  595,  595,  596,  597,  598,  600,  601,
      602,  604,  605,  606,  606,  606,  606,  606,  606,  606,

      606,  606,  606,  607,  607,  607,  607,  607,  607,  608,
      609,  610,  611,  612,  613,  614,  615,  615,  616,  617,
      618,  619,  619,  619,  619,  619,  620,  621,  621,  622,
      623,  623,  624,  624,  624,  624,  624,  624,  625,  626,
      626,  627,  628,  628,  629,  629,  630,  630,  630,  630,
      630,  630,  630,  631,  631,  632,  633,  634,  635,  636,
      636,  636,  637,  637,  638,  638,  638,  638,  638,  638,
      638,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  640,  641,

      642,  642,  642,  643,  643,  644,  644,  645,  645,  645,
      645,  645,  645,  645,  646,  647,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  649,
      650,  651,  652,  653,  653,  653,  654,  655,  655,  655,
      655,  656,  656,  656,  657,  657,  657,  658,  659,  659,
      660,  661,  661,  661,  661,  662,  662,  663,  664,  665,
      665,  665,  666,  666,  666,  666,  666,  666,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  668,
      668,  668,  668,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  670,  670,  670,  671,

      671,  671,  671,  672,  672,  672,  673,  673,  673,  673,
      673,  673,  673,  675,  675,  675,  675,  676,  677,  678,
      679,  679,  680,  680,  680,  681,  682,  682,  682,  682,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  684,  685,  685,
      685,  685,  685,  686,  686,  686,  686,  686,  687,  688,
      689,  690,  691,  691,  691,  692,  693,  693,  693,  693,

      694,  694,  694,  694,  694,  694,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  696,  696,
      696,  696,  696,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      698,  699,  700,  701,  701,  701,  702,  703,  703,  703,
      703,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  706,  707,  707,

      707,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  709,  710,  711,  713,  714,  715,
      717,  719,  720,  721,  722,  724,  725,  726,  727,  728,
      729,  730,  731,  732,  733,  733,  734,  734,  734,  734,
      734,  734,  734,  734,  735,  736,  737,  738,  739,  739,
      739,  739,  739,  739,  740,  741,  742,  743,  744,  745,
      746,  747,  748,  749,  750,  751,  751,  751,  751,  752,
      753,  754,  755,  756,  757,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  759,  759,  759,  760,

      761,  761,  761,  762,  762,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  764,  764,
      765,  765,  765,  765,  765,  765,  765,  766,  766,  766,
      768,  768,  770,  770,  770,  771,  772,  772,  774,  774,
      774,  775,  775,  775,  775,  775,  775,  776,  777,  777
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   32,   32,   36,   37,   38,   39,   40,
       32,   41,   32,   42,   43,   32,   32,   32,   32,   32,
       44,   45,   46,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   32,   57,   58,   59,   60,
       61,   62,   32,   63,   64,   65,   66,   67,   68,   69,
       70,   32,   71,   72,   73,   74,    1,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
        7,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       18,   18,   19,   20,   21,   22,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,    1,   24,    1,   25,   23,   23,   23,
       23,   23,   23,   23,   23,   26,   23,   23,   23,   27,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       28,   29,   30,   31,   32
    } ;

static yyconst flex_int16_t yy_base[1386] =
    {   0,
        0,    0,    0,   74,  146,  220, 5100, 5099,  294,    0,
      369,    0,  444,  518,  592,  666,  740,    0,  815,    0,
       74,   75,   77,   80,  890,  964, 1038,    0, 1113,    0,
     1188,    0, 1263,    0, 1338,    0,   87,   90, 1413,    0,
       91,   95, 1488,    0,  109,  121,  158,  183,   82,   96,
     1563, 1638,  128,  140,  190,  205,  237,  243,   99,  112,
     1713,    0,  244,  452,  131,  134, 1788,    0, 1863,    0,
      234,  449,  456,  458, 1938,    0,  196,  463,  467,  469,
     2013, 2087,  135,  136,  193,  246, 5101, 9757, 9757,  500,
      209, 5093, 5090, 5072,  181,  531, 2156, 2215,  553, 2282,

      603, 2355,   98,  250,  625,  690,  478,  626, 9757, 9757,
     5089,  468,  488, 1578, 5092, 9757, 9757, 9757,    0,   90,
      556, 9757,  549,  697,  919, 1601, 5066,  915,  575,  269,
     9757, 9757, 5081,  537,  616, 5062, 1653, 9757, 9757, 2427,
      934,  977, 1662, 9757, 2118,  927, 1001, 2042, 2164, 5063,
     1009,  281, 9757, 9757,    0,  657, 9757, 9757, 5071,  944,
     9757, 9757, 5065, 1612, 9757, 9757, 5063, 1575, 1647, 2211,
     9757,    0, 9757,  199, 9757, 9757,    0, 2059, 1626, 9757,
     2051, 2124, 2174, 2241, 5046, 2277, 2068,  719, 9757, 9757,
        0, 5050, 2146, 9757, 5049, 2200,    0, 9757, 2249, 9757,

     9757,    0, 5019,  536, 9757, 4989, 2293, 2267, 9757,    0,
     4983, 9757,  469, 9757, 5022, 4981,    0, 9757, 9757, 5008,
     5006, 4967,  131, 9757, 9757, 2273, 9757,  275, 9757, 9757,
      607, 2319, 9757,  581, 9757, 4966,    0, 9757, 9757,   54,
      600,    0, 9757, 9757,  892, 1639, 9757, 9757, 2328, 9757,
     9757,    0, 2337,    0, 9757, 9757, 9757, 9757, 2341, 9757,
     9757, 2345, 9757, 9757,    0,  164, 4964, 9757, 9757,    0,
      244, 4963,    0, 9757, 4956, 4955, 9757, 9757,    0, 4960,
        0, 9757, 4959, 4925,    0, 9757, 9757, 4897,  120, 9757,
     9757, 4952, 4922,    0, 9757, 4918,    0,    0, 9757, 9757,

     2112, 2494, 2561, 2038, 2073, 4916, 4955, 9757,    0, 4938,
     4934,    0,  533,  615, 9757, 9757, 2635, 4933,  564, 4941,
      669,  933,   71,  544,  216,  619, 2360,  626,  660, 4905,
     4890, 9757, 4938,  660, 2709, 4880, 4893,  946, 9757, 9757,
        0, 2395, 2438,  681, 2226, 2292, 2349, 2782,  652, 2117,
      996, 1008, 2260,  712, 2366, 2460, 1013, 9757, 1590, 2377,
     2402, 2452, 4945, 9757, 2127,  882, 2461, 1597, 9757, 2469,
     4948, 9757,  622, 4941,  707, 4925, 1691, 9757, 4889, 2492,
     2526, 4918, 2555, 2538, 2572, 2589, 2599, 2150, 1703, 9757,
     4882, 2606, 2616, 4915, 4931, 9757, 2489, 2165, 2503, 2047,

     9757, 2646, 4927,  485, 2854, 2928, 4925, 9757, 2648, 2399,
     2667, 4924, 2308, 9757, 2680, 2719, 2727, 4904, 2744, 2753,
     2673, 2770, 2807,    0, 2811, 2692, 2833, 2169,    0, 2323,
     9757, 4867, 4917, 9757, 2377, 9757, 4865, 4915, 9757, 2465,
     9757, 4863, 4913, 9757, 2721, 2560, 2741, 2488, 9757, 2829,
     1018, 1616, 9757, 1672, 2881, 2889,    0, 2955, 4896, 2983,
     2548, 9757, 4860, 2913, 3005, 4894, 3013, 2966, 2904, 3030,
     3022, 2594, 9757, 4858, 3047, 3055,    0, 4891, 4899, 4889,
     2625, 9757, 4845, 4883, 4845, 2635, 9757, 4841,    0, 2787,
     9757, 4839,    0, 4838, 2063, 9757, 4849, 4846, 9757, 4883,

     2819, 9757, 4833,    0, 4832,  905, 4882, 4881, 9757, 4828,
        0, 9757, 9757, 4825, 4821, 2838, 9757, 4820, 2261, 9757,
     2511, 2848, 9757, 4819, 2917, 9757, 4829, 4814,    0,  419,
     4817, 4811,    0, 4808, 4812, 4814,  592, 4803, 2977, 9757,
     4802,    0, 2988, 9757, 4801,    0, 2992, 9757, 4797, 3039,
     9757, 4762,  893, 4810,  974, 4795, 4759, 1567, 4801, 1604,
     4786, 4745,    0, 4792,  541,    0, 4742,    0, 1605, 4741,
        0,    0, 4740, 4779,    0, 4708,    0, 4703,    0, 4698,
     4692, 4726,    0, 4730,  938, 4720, 9757, 9757, 4719, 3104,
     4718, 4725, 9757, 4725,  944, 4683, 4666, 1551, 1582, 2844,

     1635, 3041, 9757, 2174, 1647, 2081, 4672, 4671, 4711, 2199,
     3063,    0, 2231, 2531, 9757, 9757,    0,    0,    0, 2826,
     2860, 3068, 2359, 2945, 3072, 9757, 3130, 3079, 2400, 3080,
     3118, 3136,    0, 4669, 3162, 3166, 4665, 4687, 3139, 3167,
     3170, 1672, 3226, 3176, 3234, 3257, 4697, 2943, 3078, 4653,
     4652, 4650, 3201, 3242, 3250, 3287, 3202, 3312, 3320, 4649,
     4648,    0,    0, 4685, 4646, 4627, 4635, 4634, 4632,    0,
        0, 4627, 4622, 4619, 4623, 4617, 4615, 4612, 4609, 4600,
     4612, 4602, 4602, 4605, 2815, 4592, 4604, 4604, 4596, 4595,
     4594, 4593, 4592,    0, 4588,    0, 4556, 9757, 9757, 9757,

     3720, 3750, 2404, 3718,    0, 3717, 3751, 3709, 3708, 2265,
     3703, 3745,    0, 3268, 2409, 9757, 2104, 3694, 3688, 1625,
     2395, 3721, 3198, 2434, 3212, 2191, 3695, 3682, 9757, 2476,
     9757,    0, 2776, 3665, 3676, 3137, 3211, 3334, 3342, 3347,
     3308, 3660, 3358, 9757, 3372, 3643, 3348, 3419, 3493, 3362,
     9757, 3634, 3619, 3615, 3394,    0, 3446, 3520, 3386, 3607,
     3606, 3638, 3595, 3587, 3585, 3584, 3578,    0, 3577, 3572,
     3569, 3420, 3558, 3540, 3536, 3529, 3524, 3519, 9757, 3509,
     3508, 3507, 9757, 3501, 3509, 3481, 3470, 3472, 3468, 3461,
     3459, 3454, 3436, 3428, 3414, 2550, 3413, 3412, 3434, 3387,

     3386, 3385, 9757, 3423, 3385, 9757, 3409, 3379, 3351, 2482,
     3253, 3353, 9757, 2514, 3342, 3346, 3092, 3321, 3456, 3475,
     3413, 3508, 3334, 3332, 3526, 3529, 3320, 3304, 3302, 3532,
     3583, 3296, 3294, 3286, 3272, 3276, 3266, 3260, 3259, 3253,
     3251, 3232, 3227, 3219, 3214, 2116, 3189, 3189, 2661, 3188,
     3191, 3182, 3177, 3170, 3162, 3157, 3144, 3156,  115, 3133,
     3142, 3124, 1982, 3122, 3121, 3120, 3109, 3108, 3093, 3086,
     3079, 3074, 3072, 3049, 3048, 3041, 3074, 9757, 3025, 3038,
     2196, 3451, 9757, 3053, 3457, 3019, 3006, 3508, 9757, 3567,
     3554, 3572, 3018, 3014, 3575, 3590, 3013, 3012, 3006, 3604,

     3638, 3660, 3005, 2998, 2989, 9757, 2988, 2981, 2980, 2972,
     2971, 2970, 2962, 2074, 2953, 2946, 2938, 2946, 2930, 2923,
     2898, 2905, 2896, 2901, 2900, 2894, 2890, 9757, 2870,    0,
        0, 2865, 9757, 2845, 2789, 2834, 2835, 2845, 2840, 2839,
     2832, 2831, 2827, 2808, 2790, 2784, 2777, 2758, 2757, 2753,
     2736, 2728, 2713, 2706, 2285, 2743, 3479, 2699, 2691, 2793,
     3605, 3626, 3607, 2689, 2688, 3654, 3667, 2680, 2678, 2665,
     3670, 2664, 2663, 2652, 2639, 2637, 2626, 2625, 2621, 2620,
     2620, 2621,    0, 2610, 2610, 2596, 2595, 9757, 2584, 2573,
     2565, 2561, 2553, 2532, 2527,    0, 9757, 9757, 2526, 2536,

     9757, 2536, 2520, 2498, 2490, 2474, 2462, 2448, 2446, 2426,
     2413, 2403, 2386, 2385, 2372, 2367, 2361, 2333, 2327, 2320,
     3577, 2361, 2349, 3377, 3631, 3646, 3677, 9757, 9757, 3679,
     3700, 9757, 9757, 9757, 3687, 9757, 9757, 9757, 9757, 9757,
     9757, 9757, 9757, 9757, 2288, 9757, 2280, 2247, 2238, 2225,
     2213, 2202, 2193, 9757, 9757, 9757, 9757, 9757, 2179, 2146,
     2919, 2144, 2118, 9757, 9757, 9757, 9757, 9757, 9757, 9757,
     9757, 9757, 9757, 9757, 9757, 2119, 2082, 3706, 9757, 9757,
     9757, 3455, 3711, 2025, 3682, 2006, 1982, 1974, 1975, 1646,
     1637, 1602, 1568, 1524,  978, 9757,  970,  975, 9757, 9757,

      961, 3724, 3272,  223, 3609,  918,  900,  891,  856,  855,
      842,  675,  659,  679, 3104,  659,  629, 3261,  484, 3699,
      626,  576,  555,  529,  441,  427, 9757, 3141,  417, 3299,
     2149, 3556,  201,  181, 3394, 9757,  139, 3399,  636,  116,
     3528,   58, 2314,   16, 3578, 2242, 9757, 3732, 9757, 3777,
     3809, 3841, 3873, 3905, 3937, 3969, 4001, 4033, 4065, 4097,
     4129, 4161, 4193, 4225, 4257, 4289, 4321, 4353, 4385, 4417,
     4449, 4481, 4513, 4545, 4577, 4609, 4634, 4654, 4671, 4692,
     4711, 4732, 4763, 4789, 4821, 4831, 4848, 4879, 4910, 4941,
     4973, 4999, 5031, 5058, 5089, 5120, 5151, 5169, 5201, 5233,

     5265, 5291, 5301, 5332, 5342, 5373, 5404, 5435, 5466, 5476,
     5493, 5511, 5543, 5561, 5593, 5625, 5656, 5673, 5705, 5737,
     5768, 5795, 5827, 5845, 5877, 5887, 5904, 5914, 5931, 5963,
     5981, 6013, 6045, 6065, 6097, 6129, 6155, 6186, 6196, 6211,
     6231, 6244, 6271, 6281, 6298, 6313, 6339, 6366, 6392, 6418,
     6450, 6467, 6492, 6523, 6554, 6585, 6617, 6632, 6664, 6690,
     6716, 6748, 6780, 6807, 6833, 6864, 6895, 6926, 6958, 6989,
     7007, 7039, 7071, 7103, 7129, 7155, 7186, 7217, 7227, 7258,
     7289, 7320, 7351, 7366, 7383, 7408, 7426, 7458, 7476, 7508,
     7540, 7565, 7583, 7615, 7647, 7678, 7705, 7737, 7755, 7787,

     7804, 7829, 7846, 7871, 7903, 7921, 7953, 7985, 3713, 8005,
     8020, 8052, 8084, 8099, 8131, 8149, 8164, 8191, 8223, 8254,
     3725, 8280, 8307, 8325, 3735, 8351, 8372, 8398, 8408, 8440,
     8455, 8481, 8507, 8539, 8566, 8593, 8625, 8656, 8682, 8708,
     8739, 8770, 8801, 8816, 8826, 8843, 8853, 8868, 8900, 8910,
     8920, 3740, 8940, 8972, 8990, 9007, 9034, 3745, 9065, 9092,
     9102, 9128, 9154, 9177, 9209, 9235, 9267, 9294, 9320, 9330,
     9361, 9392, 9409, 9424, 9442, 9469, 9500, 9532, 9564, 9596,
     9628, 9660, 9692, 9724, 4620
    } ;

static yyconst flex_int16_t yy_def[1386] =
    {   0,
     1150, 1150, 1149,    3, 1151, 1151, 1152, 1152, 1149,    9,
     1149,   11, 1153, 1153, 1154, 1154, 1149,   17, 1149,   19,
     1155, 1155, 1156, 1156, 1157, 1157, 1149,   27, 1149,   29,
     1149,   31, 1149,   33, 1149,   35, 1158, 1158, 1149,   39,
     1159, 1159, 1149,   43, 1160, 1160, 1161, 1161, 1162, 1162,
     1163, 1163, 1164, 1164, 1165, 1165, 1166, 1166, 1167, 1167,
     1149,   61, 1168, 1168, 1169, 1169, 1149,   67, 1149,   69,
     1170, 1170, 1170, 1170, 1149,   75, 1171, 1171, 1172, 1172,
     1173, 1173, 1174, 1174, 1175, 1175, 1149, 1149, 1149, 1149,
     1149, 1176, 1177, 1178, 1178, 1179, 1149, 1180, 1181, 1182,

     1181, 1149, 1149, 1178, 1178, 1179, 1178, 1149, 1149, 1149,
     1183, 1184, 1184, 1184, 1185, 1149, 1149, 1149, 1186, 1187,
     1149, 1149, 1149, 1149, 1188, 1188, 1149, 1189, 1149, 1190,
     1149, 1149, 1191, 1192, 1192, 1149, 1192, 1149, 1149, 1193,
     1194, 1194, 1194, 1149, 1194, 1149, 1149, 1195, 1195, 1149,
     1196, 1197, 1149, 1149, 1198, 1149, 1149, 1149, 1199, 1149,
     1149, 1149, 1200, 1149, 1149, 1149, 1201, 1202, 1202, 1202,
     1149, 1203, 1149, 1204, 1149, 1149, 1205, 1206, 1149, 1149,
     1149, 1149, 1207, 1207, 1149, 1208, 1149, 1209, 1149, 1149,
     1210, 1211, 1149, 1149, 1212, 1149, 1213, 1149, 1149, 1149,

     1149, 1214, 1149, 1215, 1149, 1216, 1149, 1217, 1149, 1218,
     1149, 1149, 1149, 1149, 1219, 1149, 1220, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1221, 1149, 1149,
     1221, 1149, 1149, 1149, 1149, 1149, 1222, 1149, 1149, 1149,
     1149, 1223, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1224, 1149, 1225, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1226, 1227, 1149, 1149, 1149, 1228,
     1229, 1149, 1230, 1149, 1149, 1149, 1149, 1149, 1231, 1149,
     1232, 1149, 1149, 1149, 1233, 1149, 1149, 1149, 1149, 1149,
     1149, 1234, 1149, 1235, 1149, 1149, 1236, 1236, 1149, 1149,

     1149, 1237, 1237, 1149, 1149, 1149, 1238, 1149, 1239, 1240,
     1241, 1242, 1149, 1241, 1149, 1149, 1243, 1241, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1244, 1237, 1244,  335,  335, 1149, 1149,
     1245, 1246, 1246, 1247, 1247, 1247, 1247, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1241, 1149, 1149, 1241, 1241,
     1149, 1149, 1248, 1149, 1249, 1250, 1249, 1149, 1149, 1249,
     1251, 1149, 1252, 1253, 1252, 1149, 1149, 1149, 1149, 1149,
     1254, 1149, 1254, 1255, 1256, 1254, 1255, 1257, 1149, 1149,
     1149, 1256, 1256, 1258, 1259, 1149, 1260, 1261, 1260, 1149,

     1149, 1260, 1262, 1262, 1263, 1263, 1262, 1149, 1264, 1265,
     1264, 1262, 1149, 1149, 1264, 1149, 1266, 1149, 1266, 1267,
     1268, 1266, 1149, 1269, 1267, 1268, 1268, 1270, 1271, 1149,
     1149, 1149, 1272, 1149, 1149, 1149, 1149, 1273, 1149, 1149,
     1149, 1149, 1274, 1149, 1275, 1276, 1275, 1149, 1149, 1275,
     1277, 1149, 1149, 1277, 1278, 1149, 1279, 1278, 1149, 1280,
     1149, 1149, 1149, 1149, 1281, 1149, 1281, 1282, 1283, 1281,
     1282, 1149, 1149, 1149, 1283, 1283, 1284, 1285, 1286, 1285,
     1149, 1149, 1149, 1287, 1149, 1149, 1149, 1149, 1288, 1149,
     1149, 1149, 1289, 1149, 1290, 1149, 1291, 1149, 1149, 1292,

     1149, 1149, 1149, 1293, 1149, 1149, 1294, 1294, 1149, 1149,
     1295, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1296, 1149,
     1296, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1297, 1149,
     1149, 1149, 1298, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1299, 1149, 1149, 1149, 1300, 1149, 1149, 1149, 1149,
     1149, 1149, 1301, 1302, 1301, 1149, 1149, 1303, 1304, 1303,
     1149, 1149, 1305, 1149, 1149, 1306, 1149, 1307, 1149, 1149,
     1308, 1309, 1149, 1310, 1311, 1149, 1312, 1149, 1313, 1149,
     1149, 1314, 1315, 1316, 1149, 1317, 1149, 1149, 1317, 1318,
     1317, 1316, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,

     1149, 1319, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1320,
     1320, 1321, 1149, 1322, 1149, 1149, 1323, 1324, 1325, 1326,
     1326, 1149, 1149, 1149, 1149, 1149, 1317, 1149, 1149, 1327,
     1327, 1328, 1329, 1149, 1330, 1330, 1149, 1331, 1332, 1332,
     1333, 1149, 1334, 1335, 1335, 1336, 1337, 1149, 1338, 1149,
     1149, 1149, 1339, 1339, 1340, 1341, 1342, 1343, 1343, 1149,
     1149, 1344, 1345, 1346, 1149, 1149, 1149, 1149, 1149, 1347,
     1348, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1349, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1350, 1149, 1351, 1149, 1149, 1149, 1149,

     1149, 1149, 1149, 1149, 1352, 1149, 1353, 1149, 1149, 1149,
     1149, 1354, 1355, 1356, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1357, 1357, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1358, 1359, 1360, 1361, 1362, 1362, 1149, 1149, 1363,
     1364, 1149, 1365, 1149, 1365, 1149, 1366, 1367, 1367, 1368,
     1149, 1149, 1149, 1149, 1369, 1370, 1371, 1371, 1372, 1149,
     1149, 1373, 1149, 1149, 1149, 1149, 1149, 1374, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1353, 1149,

     1149, 1149, 1149, 1375, 1356, 1149, 1149, 1149, 1149, 1149,
     1149, 1376, 1149, 1149, 1149, 1149, 1359, 1149, 1362, 1362,
     1149, 1364, 1149, 1149, 1366, 1368, 1149, 1149, 1149, 1369,
     1377, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1378, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1375, 1149, 1149, 1149,
     1149, 1379, 1149, 1376, 1376, 1149, 1149, 1359, 1149, 1362,
     1362, 1364, 1149, 1149, 1366, 1368, 1149, 1149, 1149, 1369,

     1377, 1377, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1380,
     1381, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1379, 1379, 1149, 1149, 1359,
     1362, 1362, 1364, 1149, 1149, 1366, 1368, 1149, 1149, 1149,
     1369, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1382, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1383, 1149, 1149, 1149, 1149,

     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1359, 1362, 1362, 1364, 1149, 1149, 1366,
     1368, 1149, 1149, 1149, 1369, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1384, 1149, 1149,
     1149, 1359, 1149, 1385, 1362, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,

     1384, 1384, 1359, 1385, 1362, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1359, 1385, 1362,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1359,
     1385, 1362, 1149, 1149, 1149, 1149, 1149, 1149, 1385, 1149,
     1149, 1149, 1385, 1149, 1149, 1385, 1149, 1385,    0, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,

     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,

     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149
    } ;

static yyconst flex_int16_t yy_nxt[9833] =
    {   0,
       89,   90,   91,   89,   90,   89,   92,   89,   93,   89,
       89,   89,   89,   89,   94,   89,   95,   96,   89,   94,
       94,   94,   89,   97,   89,   98,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   89,  100,   89,  101,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       89,   89,   89,   89,   89,  102,  158,  158,  102,  162,
      159,  159,  162,  163,  225,  983,  163,  103,  104,  198,
      105,  106,  198,  205,  107,  107,  108,  205,  225,  354,

       88,  248,  354,   88,  206,  530,  600,  374,  206,  531,
      213,  214,  376,  213,  248,  215,  207, 1145,  160,  160,
      207,  164,  213,  214,  164,  213,  226,  215,  600,  234,
      235,  199,  234,  261,  199,  208,  261,  295,  295,  208,
      226,  234,  235,  249,  234,  108,  109,  109,  110,  109,
      109,  109,  111,  216,  109,  109,  249,  109,  109,  109,
      218,  109,  219,  109,  113,  216,  573,  933,  113,  109,
      109,  220,  236, 1144,  934,  262,  221,  515,  262,  296,
      296,  554,  514,  222,  236,  218,  556,  219,  313,  109,
      114,  109,  238,  572,  239,  298,  220,  314,  282, 1142,

      452,  221,  223,  452,  299,  300,  312,  238,  222,  239,
      304,  305,  283,  304,  453,  240,  109,  109,  109,  109,
      109,  109,  110,  109,  109,  109,  111,  223,  109,  109,
      240,  109,  109,  109,  241,  109,  274,  109,  113,  243,
      284,  244,  113,  109,  109,  243,  255,  244,  298,  241,
      983,  354,  601,  306,  354,  256,  257,  299,  300,  275,
     1140,  559,  245,  109,  114,  109,  561,  619,  245,  258,
      392,  392,  392,  392,  601,  312,  519,  393,  275,  519,
     1119,  246,  426,  426,  426,  426,  520,  246,  259,  427,
      109,  109,  109,  109,  117,  117,  118,  117,  117,  117,

      117,  117,  119,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  117,  121,  117,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  117,  117,  117,  117,  120,  122,
      123,  124,  123,  123,  122,  122,  122,  125,  122,  122,
      122,  122,  122,  122,  122,  122,  126,  122,  122,  122,
      122,  127,  122,  122,  122,  128,  128,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  122,  129,  122,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  122,
      122,  122,  130,  128,  131,  131,  132,  131,  131,  131,
      133,  274,  131,  131,  255,  131,  131,  131,  274,  131,
      274,  131,  135,  256,  257,  282,  135,  136,  131,  286,
      506,  286, 1137,  506,  275,  507,  680,  258,  681,  283,
      287,  276,  287,  276, 1135,  366,  367,  131,  137,  131,
      367,  642,  288,  275,  288,  359,  259,  360,  360,  360,

      276,  301,  276,  312,  301, 1149,  367,  284,  983,  407,
      367,  289,  367,  289,  131,  131,  131,  131,  131,  131,
      132,  131,  131,  131,  133,  302,  131,  131,  619,  131,
      131,  131,  367,  131,  585,  131,  135,  585,  496, 1131,
      135,  136,  131,  315,  303,  311,  316,  311,  317,  497,
      380,  380,  380,  380,  398,  399,  312,  377,  378,  399,
      377,  131,  137,  131,  600,  593,  381,  311,  593,  311,
      311,  382,  311,  311,  311,  319,  389,  390,  312,  389,
      498,  399,  525,  526,  600,  525,  699,  983,  131,  131,
      131,  131,  138,  138,  139,  138,  138,  138,  140,  343,

      138,  138,  379,  138,  138,  138,  600,  138, 1149,  138,
      142, 1149, 1134,  700,  142,  143,  144,  311, 1149,  311,
      311,  391,  311,  311,  311,  527,  355,  361,  312,  355,
      361,  586,  313, 1149,  399,  138,  145,  138,  399,  374,
      312,  356,  362,  687,  376,  983,  532,  353,  353,  343,
      312,  530,  606,  354,  600,  531,  354,  688,  430,  431,
      399,  430,  138,  138,  138,  138,  138,  138,  139,  138,
      138,  138,  140,  606,  138,  138,  600,  138,  138,  138,
      619,  138,  613,  138,  142,  613, 1133, 1143,  142,  143,
      144,  357,  358, 1129,  357,  600,  353,  353,  380,  380,

      380,  380,  315,  432,  311,  316,  311,  317,  595,  138,
      145,  138,  611,  354,  381,  312,  354,  600, 1128,  382,
      475,  475,  475,  475,  374,  619, 1126,  476,  983,  376,
      595,  596,  597,  612,  319, 1125,  138,  138,  138,  138,
      122,  146,  147,  146,  146,  122,  122,  122,  148,  122,
      122,  122,  122,  122,  122,  122,  122,  149,  122,  122,
      122,  122,  150,  122,  122,  122,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  122,  129,  122,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      122,  122,  122,  152,  151,  153,  153,  154,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  153,  156,
      153,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  153,  153,  153,  153,  155,
      165,  165,  166,  165,  165,  165,  167, 1124,  165,  165,

      631,  165,  165,  165,  631,  165,  506,  165,  169,  506,
      554,  507,  169,  165,  165,  556,  380,  380,  380,  380,
      380,  380,  380,  380,  983,  983,  631,  383,  416,  416,
      416,  416,  381,  165,  170,  165,  381,  382,  388,  585,
      408,  382,  585,  534,  417,  435,  436,  535,  435,  418,
     1123,  410,  411,  536,  615,  537,  411, 1122,  408,  598,
      165,  165,  165,  165,  165,  165,  166,  165,  165,  165,
      167,  599,  165,  165, 1121,  165,  165,  165,  411,  165,
      598,  165,  169, 1149,  717, 1079,  169,  165,  165,  616,
      437,  554,  385,  599, 1149,  411,  556,  357,  358,  411,

      357, 1149,  416,  416,  416,  416,  717,  165,  170,  165,
      423,  416,  416,  423,  357,  358,  617,  357,  417,  452,
      424,  411,  452,  418, 1117,  623,  417,  624,  624,  624,
     1116,  418, 1115,  453,  165,  165,  165,  165,  171,  171,
       88,  171,  171,  171,  171,  171,  172,  171,  171,  171,
      171,  171,  171,  173,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  171,  171,  171,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  171,  171,
      171,  171,  174,  175,  175,  176,  175,  175,  175,  175,
      175,  177,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  175,  179,  175,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  175,  175,  175,  175,  178,  180,  181,
      182,  181,  181,  180,  180,  180,  183,  180,  180,  180,

      180,  180,  180,  180,  180,  184,  180,  180,  180,  180,
      185,  180,  180,  180,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  180,  187,  180,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  180,  180,
      180,  188,  186,  189,  189,  190,  189,  189,  189,  189,
      189,  191,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  189,  193,  189,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  189,  189,  189,  189,  192,   88,   88,
      194,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,   88,  196,   88,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,   88,   88,
       88,   88,  195,  200,  200,  201,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  200,  203,  200,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  200,  200,  200,  200,  202,   88,   88,
      209,   88,   88,   88,   88,   88,   88,   88,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,   88,  211,   88,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,   88,   88,
       88,   88,  210,  227,  228,  229,  227,  228,  227,  227,
      227,  227,  227,  227,  230,  227,  227,  227,  227,  368,
      369,  227,  368, 1114,  559,  227,  227,  227,  227,  561,
      720,  629,  446,  447,  629, 1149,  367,  447,  368,  369,

      367,  368,  386,  386,  386,  386,  227,  232,  227,  383,
      702,  721,  720,  440,  441,  312,  440,  452,  381,  447,
      452,  559,  367,  382,  370, 1113,  561,  461,  462,  703,
      461,  453,  721,  227,  227,  227,  227,  227,  227,  228,
      229,  227,  228,  227,  227,  227,  227,  227,  227,  230,
      227,  227,  227,  227,  400,  401,  227,  400,  442, 1112,
      227,  227,  227,  227, 1149,  447,  810,  600,  412,  447,
     1149,  399,  463,  452,  385,  399,  452,  725,  408, 1149,
      411,  227,  232,  227,  411,  538,  408,  453,  600,  810,
      534,  447,  377,  378,  535,  377,  408,  399,  725,  402,

      536, 1111,  537, 1110,  389,  390,  411,  389,  227,  227,
      227,  227,  227,  250,  250,  251,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  250,  253,  250,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  250,  250,  250,  250,  252,  263,  263,
      264,  263,  263,  263,  263,  263,  265,  263,  263,  263,

      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  263,  267,  263,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  263,  263,
      263,  263,  266,  268,  268,  269,  268,  268,  268,  268,
      268,  270,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  271,  268,  272,  268,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  268,  268,  268,  268,  271,  277,  277,
      278,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  277,  280,  277,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,

      279,  279,  279,  279,  279,  279,  279,  279,  277,  277,
      277,  277,  279,  290,  290,  291,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290, 1109,  938, 1108,  290,  290,  290,  290,  304,
      305, 1107,  304,  416,  416,  416,  416,  939,  400,  401,
      419,  400,  464,  464,  464,  464,  290,  293,  290,  417,
      456,  456,  456,  456,  418,  496, 1106,  457,  465,  472,
      473, 1104,  472,  466,  304,  305,  497,  304,  458,  458,
      458,  459,  306,  290,  290,  290,  290,  290,  290,  291,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  290,  290,  290, 1100,  498,  726,  290,
      290,  290,  290,  301,  474,  421,  301,  306,  355,  413,
      414,  355,  413,  982, 1149,  464,  464,  464,  464,  726,
      290,  293,  290,  622,  807, 1149,  411,  302,  983,  353,
      411,  465, 1149, 1099,  366,  367,  466,  481,  482,  367,
      481,  636,  636,  636,  636,  807,  303,  290,  290,  290,
      290,  320,  411,  917,  415,  422,  422,  422,  422, 1098,
      648,  367,  419,  648,  321,  464,  464,  464,  464,  918,
      424,  417,  467,  640,  322,  323,  418,  640,  353,  324,
      325,  465,  483,  619,  326,  327,  466,  328,  329, 1097,

      730,  486,  487,  730,  486,  322,  323, 1095, 1139,  640,
      324,  325,  448,  449,  724,  448,  326,  327,  330,  331,
      328,  329,  332,  332,  332,  332,  814,  613, 1149,  447,
      613,  333,  613,  447,  955,  613,  724,  421,  332,  332,
      334, 1094,  470,  470,  470,  470,  488,  469,  814,  467,
      490,  491, 1093,  490, 1092,  447,  955,  450,  465,  336,
     1091,  361,  519,  466,  361,  519,  337,  338,  501,  502,
      619,  501,  520,  731,  516,  517,  362,  516,  464,  464,
      464,  464,  353,  620, 1090,  339,  619,  340,  341,  332,
      332,  332,  332,  613,  465,  492,  613, 1089,  333,  466,

      499,  499,  499,  499, 1148,  332,  332,  336,  731,  413,
      414,  500,  413,  503,  469, 1088,  499,  499,  500,  518,
      522,  523, 1021,  522,  430,  431,  334,  430,  345,  539,
      540,  353,  539,  346,  347,  731,  619,  499,  543,  544,
     1087,  543,  547,  548, 1021,  547,  550,  551, 1086,  550,
      613,  621,  339,  613,  340,  341,  348,  615,  619,  348,
      629,  602, 1146,  629,  602,  524,  499,  355,  349,  349,
      355,  350,  351, 1081,  541,  352,  352,  353,  435,  436,
      302,  435,  362,  545,  603, 1080,  604,  549,  353, 1077,
     1076,  552,  616,  619,  359,  305,  360,  360,  360,  303,

      605,  629,  312,  361,  629,  796,  361,  604,  796,  311,
      806,  311,  311,  806,  311,  311,  311,  645,  362,  617,
      312,  645,  605, 1075,  353,  811,  353,  403,  403, 1074,
      403,  403,  403,  404, 1073,  403,  403,  353,  403,  403,
      403,  343,  403,  645,  403,  406,  811, 1072, 1071,  406,
      403,  407,  311,  361,  311,  311,  361,  311,  311,  311,
      600,  625,  626,  312,  625, 1070,  440,  441,  622,  440,
      403,  406,  403,  353,  353, 1069,  627,  730, 1149,  367,
      730,  600,  628,  367,  343,  312,  366,  367, 1068,  448,
      449,  367,  448,  380,  380,  380,  380,  403,  403,  403,

      403,  332,  332,  332,  332,  367,  398,  399, 1067,  381,
     1066,  399, 1149,  367,  382, 1149,  881,  332,  332,  580,
     1149,  399, 1149,  353, 1065,  399,  632,  386,  386,  386,
      386,  628,  613,  399,  383,  613, 1064,  881,  332,  380,
      380,  380,  380,  381,  600,  337,  338,  399,  382,  461,
      462,  796,  461, 1063,  796,  381, 1149, 1149, 1149, 1149,
      382,  388, 1062, 1149,  339,  600,  340,  341,  332,  332,
      332,  332, 1149,  392,  392,  392,  392, 1149,  654, 1061,
      393,  733,  654, 1060,  332,  332,  332, 1059, 1058,  526,
      386,  386,  386,  386, 1056,  472,  473,  383,  472,  385,

      380,  380,  380,  380,  654,  580,  381,  392,  392,  392,
      392,  382,  337,  338,  393, 1055,  381, 1149, 1149, 1149,
     1149,  382,  388, 1054, 1149, 1053,  481,  482, 1149,  481,
     1052,  339, 1051,  340,  341,  587,  486,  487,  587,  486,
      587,  587,  587,  587,  587,  587,  587,  588,  587,  589,
      587,  589,  590,  587,  408, 1050, 1049,  587,  587,  587,
      592, 1048,  385,  398,  399,  410,  411, 1047,  399, 1045,
      411,  983,  408, 1149,  426,  426,  426,  426,  587,  587,
      587,  427, 1044, 1043, 1149,  411,  408, 1042, 1041,  411,
      399, 1149,  411,  426,  426,  426,  426,  410,  411, 1040,

      427, 1039,  411,  641,  408,  587,  587,  587,  587,  587,
      613,  411,  921,  613, 1038,  922, 1149, 1149, 1149, 1149,
      416,  416,  416,  416,  411, 1037, 1036, 1034,  422,  422,
      422,  422, 1149, 1149, 1149,  419,  417,  646,  446,  447,
     1033,  418, 1032,  447,  417, 1149, 1149, 1149, 1149,  418,
     1029, 1028, 1149, 1149,  423,  416,  416,  423, 1149,  447,
     1023, 1149, 1022,  447,  424,  447, 1149,  883, 1020, 1019,
      417,  422,  422,  422,  422,  418, 1018,  613,  419, 1149,
      613, 1149, 1149,  348, 1017,  447,  348,  417,  490,  491,
     1001,  490,  418, 1001,  613,  349,  349,  613,  350,  351,

      421, 1016,  352,  352,  353, 1015, 1014,  302,  423,  416,
      416,  423,  423,  416,  416,  423,  783, 1149,  424,  783,
      501,  502,  424,  501,  417, 1013,  303,  613,  417,  418,
      613,  817, 1012,  418, 1149, 1149, 1149, 1149, 1011,  516,
      517, 1149,  516,  421, 1024,  602,  446,  447,  602,  522,
      523,  447,  522,  353,  403,  403, 1010,  403,  403,  403,
      642,  613,  403,  403,  613,  403,  403,  403,  603,  403,
      619,  643,  406,  447,  784, 1009,  406,  403,  407, 1008,
     1007,  736,  456,  456,  456,  456,  655, 1006, 1005,  457,
      456,  456,  456,  456, 1004, 1003, 1002,  403,  406,  403,

      458,  458,  458,  459,  619,  475,  475,  475,  475, 1000,
      737,  459,  476,  999,  464,  464,  464,  464,  525,  526,
     1096,  525,  996, 1096,  403,  403,  403,  403,  403,  403,
      465,  403,  403,  403,  642,  466,  403,  403,  995,  403,
      403,  403,  994,  403,  648,  403,  406,  648,  993,  992,
      406,  403,  403,  991,  424,  990,  456,  456,  456,  456,
      989,  527,  623,  457,  624,  624,  624,  464,  464,  464,
      464,  403,  406,  403,  458,  458,  458,  459,  539,  540,
      988,  539,  987,  465,  456,  456,  456,  456,  466,  543,
      544,  457,  543,  547,  548,  983,  547,  986,  403,  403,

      403,  403,  658,  658,  658,  459,  470,  470,  470,  470,
      985,  984,  981,  467, 1149, 1149, 1149, 1149,  980,  979,
      978, 1149,  465,  464,  464,  464,  464,  466,  977,  976,
     1149,  470,  470,  470,  470, 1149,  975,  974,  467,  465,
      550,  551,  723,  550,  466,  723,  973,  465,  475,  475,
      475,  475,  466,  972,  970,  476, 1149, 1149, 1149, 1149,
      969,  968,  965, 1149,  730,  603,  964,  730,  959,  625,
      626,  731,  625,  625,  626,  958,  625,  813,  469,  648,
      625,  626,  648,  625,  738,  954, 1149,  953,  739,  424,
      628,  713,  952,  613,  628,  739,  613,  366,  631,  951,

      950,  628,  631,  469,  587, 1127,  731,  587, 1127,  587,
      587,  587,  587,  587,  587,  587,  588,  587,  589,  587,
      589,  714,  587,  949,  631,  948,  587,  587,  587,  592,
      947,  625,  626,  731,  625, 1149,  631,  946,  613,  628,
      631,  613, 1136,  628,  945, 1136,  740,  587,  715,  587,
      628,  888,  628,  366,  367,  312,  398,  640,  367,  944,
      943,  640,  631,  743,  743,  743,  743,  745,  745,  745,
      745,  942,  941,  940,  587,  587,  587,  587,  587,  937,
      367,  619,  408,  640, 1149,  640,  744,  398,  399,  640,
      744,  741,  399,  410,  645,  936,  819,  935,  645,  723,

      408,  628,  723,  759,  759,  759,  759,  932,  931,  930,
      457,  640,  613,  812,  399,  613,  812,  929,  446,  654,
      645,  927,  603,  654,  459,  747,  403,  403,  926,  403,
      403,  403,  642,  925,  403,  403,  813,  403,  403,  403,
     1149,  403,  924,  403,  749,  654,  923,  920,  749,  403,
      403, 1149,  645,  919,  882,  619,  645,  882, 1149, 1149,
      654,  916,  613,  408,  654,  613,  820,  446,  447,  403,
      749,  403,  447,  613,  410,  411,  613,  883,  645,  411,
      315,  408,  311,  915,  311,  805,  654,  914,  456,  456,
      456,  456,  913,  312,  447,  756,  403,  403,  403,  403,

     1138,  411,  912, 1138,  911,  755,  757,  757,  757,  459,
      910,  909,  750,  456,  456,  456,  456,  908, 1130, 1118,
      457,  456,  456,  456,  456,  366,  367,  907,  457,  906,
      367,  658,  658,  658,  459,  625,  626,  905,  625,  658,
      658,  658,  459,  625,  626,  904,  625,  903,  625,  626,
      738,  625,  367,  899,  885,  898,  628,  885,  821,  743,
      743,  743,  743,  740,  628,  398,  399,  822,  408,  628,
      399,  897,  312,  745,  745,  745,  745,  813,  613,  410,
      411,  613,  744,  894,  411,  893,  408,  759,  759,  759,
      759,  889,  399,  887,  457, 1141,  744,  315, 1141,  311,

     1138,  311,  805, 1138,  886,  628,  411,  825,  459,  880,
      312,  446,  447,  628,  625,  626,  447,  625,  628,  403,
      403,  826,  403,  403,  403,  642,  879,  403,  403,  738,
      403,  403,  403,  878,  403,  628,  643,  749,  447, 1082,
      713,  749,  403,  407,  876,  875,  874,  456,  456,  456,
      456,  575,  957,  830,  756,  957,  613,  613,  885,  613,
      613,  885,  403,  749,  403,  757,  757,  757,  459,  842,
      843,  873,  872,  871,  844,  883,  613,  845,  846,  613,
      957,  813,  847,  957,  628,  848,  849,  870,  850,  403,
      403,  403,  403,  403,  403,  869,  403,  403,  403,  642,

      619,  403,  403,  883,  403,  403,  403,  890,  403,  613,
      403,  749,  613,  868, 1103,  749,  403,  403,  867,  619,
      866,  456,  456,  456,  456,  366,  367,  865,  756, 1141,
      367,  864, 1141,  863,  891,  408,  403,  749,  403,  757,
      757,  757,  459,  398,  399,  862,  410,  411,  399,  446,
      447,  411,  367,  408,  447,  613,  861, 1138,  613,  892,
     1138,  860,  859,  403,  403,  403,  403,  858,  613,  857,
      399,  613,  960,  411,  856,  855,  447,  895, 1078, 1147,
      896, 1078, 1147,  900,  456,  456,  456,  456,  854,  366,
      367,  756,  398,  399,  367,  853,  408,  399,  619,  852,

      619, 1079,  901,  901,  901,  459,  613,  410,  411,  613,
      613,  619,  411,  613,  408,  961,  367,  851,  962,  399,
      963,  446,  447,  966,  366,  367,  447,  613,  841,  367,
      613,  840, 1083,  305,  411, 1083,  839,  838,  967,  456,
      456,  456,  456,  837,  836,  835,  756,  613,  447,  619,
      613,  367,  971,  619,  834,  479, 1120,  901,  901,  901,
      459,  456,  456,  456,  456,  833,  832, 1025,  756, 1027,
      619,  398,  399,  408,  829, 1084,  399, 1026,  828,  901,
      901,  901,  459,  613,  410,  411,  613,  446,  447,  411,
      619,  408,  447,  827,  366,  367,  398,  399,  399,  367,

      613,  399,  824,  613,  446,  447,  408, 1102, 1085,  447,
     1102,  411, 1083,  305,  447, 1083, 1030,  410,  411,  823,
      619,  367,  411,  399,  408, 1102,  619,  705, 1102, 1031,
     1079,  447, 1035,  304,  305,  705,  304,  818,  705,  705,
      816, 1105,  815,  619,  411,  603,  809,  732, 1079,  732,
      732,  732,  808,  803,  705,  306, 1132,  735,  802,  735,
      735,  735,  705,  801,  800,  705,  705,  732,  575,  732,
      732,  732,  798,  797,  703,  795, 1084,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,

      134,  134,  134,  134,  134,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      161,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  212,  212,  212,

      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,

      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,

      297,  297,  297,  297,  297,  297,  297,  297,  297,  307,
      307,  794,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  310,  735,  793,  735,  735,  735,  792,  791,  790,
      789,  788,  787,  786,  785,  782,  310,  781,  310,  310,
      310,  780,  778,  777,  776,  310,  311,  775,  311,  311,
      774,  311,  773,  772,  771,  311,  311,  770,  311,  311,
      311,  318,  769,  318,  318,  318,  318,  767,  318,  766,
      765,  764,  318,  318,  318,  318,  318,  318,  335,  335,

      335,  763,  479,  761,  760,  754,  335,  753,  752,  751,
      388,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      746,  335,  335,  342,  742,  342,  342,  729,  342,  728,
      727,  719,  342,  342,  718,  342,  342,  342,  344,  344,
      344,  716, 1149,  312,  312,  312,  344,  713,  583,  711,
      710,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      709,  344,  344,  363,  363,  708,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  365,  575,  706,  704,  701,

      698,  365,  697,  365,  365,  365,  365,  365,  559,  696,
      365,  365,  365,  365,  365,  365,  695,  554,  694,  693,
      365,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  373,  692,  373,  373,  373,  691,  690,
      689,  686,  373,  375,  685,  375,  375,  684,  683,  682,
      375,  679,  375,  375,  375,  528,  678,  677,  676,  375,
      384,  384,  384,  384,  675,  674,  384,  509,  509,  673,
      672,  670,  503,  498,  384,  669,  668,  384,  667,  666,

      485,  384,  665,  384,  384,  384,  479,  663,  479,  384,
      384,  387,  387,  387,  387,  661,  465,  660,  657,  444,
      652,  439,  651,  434,  650,  387,  417,  387,  387,  387,
      642,  642,  387,  642,  387,  387,  387,  396,  388,  637,
      381,  387,  394,  394,  394,  394,  634,  374,  394,  633,
      372,  364,  614,  612,  609,  608,  607,  594,  312,  312,
      583,  308,  581,  394,  578,  394,  394,  394,  576,  575,
      572,  570,  394,  395,  395,  569,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  397,  567,  565,  564,  562,
      557,  397,  528,  397,  397,  397,  397,  397,  514,  513,
      397,  397,  397,  397,  397,  397,  512,  510,  509,  505,
      397,  405,  405,  498,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  409,  409,  494,  485,  479,  465,  444,
      409,  439,  409,  409,  409,  409,  409,  434,  409,  409,
      409,  409,  409,  409,  409,  417,  396,  396,  381,  409,
      420,  420,  420,  420,  372,  364,  420,  312,  309,  308,

     1149,  116,  116, 1149,  420, 1149, 1149,  420, 1149, 1149,
     1149,  420, 1149,  420,  420,  420, 1149, 1149, 1149,  420,
      420,  425,  425,  425,  425, 1149, 1149, 1149, 1149,  425,
     1149, 1149, 1149, 1149, 1149,  425, 1149,  425,  425, 1149,
     1149, 1149,  425, 1149,  425,  425,  425, 1149, 1149, 1149,
     1149,  425,  428,  428,  428,  428, 1149, 1149,  428, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149,  428, 1149,  428,  428,  428, 1149, 1149,
     1149, 1149,  428,  429, 1149, 1149,  429, 1149, 1149, 1149,
     1149,  429, 1149,  429,  429,  429, 1149, 1149, 1149, 1149,

      429,  433,  433, 1149,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  438,  438, 1149,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  443,  443, 1149,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  445, 1149, 1149,

     1149, 1149, 1149,  445, 1149,  445,  445,  445,  445,  445,
     1149, 1149,  445,  445,  445,  445,  445,  445, 1149, 1149,
     1149, 1149,  445,  451, 1149,  451,  451,  451, 1149, 1149,
     1149, 1149,  451,  454, 1149, 1149,  454, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149,  454, 1149, 1149, 1149,  454,
     1149, 1149, 1149, 1149,  454, 1149,  454,  454,  454, 1149,
     1149, 1149, 1149,  454,  455, 1149,  455,  455,  455, 1149,
     1149, 1149, 1149,  455,  460,  460,  460,  460, 1149, 1149,
      460, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
      460,  460, 1149, 1149, 1149,  460, 1149,  460,  460,  460,

     1149, 1149, 1149, 1149,  460,  468,  468,  468,  468, 1149,
     1149,  468, 1149, 1149, 1149, 1149, 1149, 1149, 1149,  468,
     1149, 1149,  468, 1149, 1149, 1149,  468, 1149,  468,  468,
      468, 1149, 1149, 1149,  468,  468,  471,  471,  471,  471,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
      471, 1149,  471,  471, 1149, 1149, 1149,  471, 1149,  471,
      471,  471, 1149, 1149, 1149, 1149,  471,  477,  477,  477,
      477, 1149, 1149,  477, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,  477, 1149,
      477,  477,  477, 1149, 1149, 1149, 1149,  477,  478, 1149,

      478,  478,  478, 1149, 1149, 1149, 1149,  478,  480, 1149,
      480, 1149, 1149, 1149, 1149,  480, 1149,  480,  480,  480,
     1149, 1149, 1149, 1149,  480,  484,  484, 1149,  484, 1149,
     1149, 1149, 1149,  484, 1149,  484,  484,  484, 1149, 1149,
     1149, 1149,  484,  489,  489, 1149,  489,  489,  489,  489,
      489,  489,  489,  489, 1149,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489, 1149,  489,  489,  489,
      489,  489,  489,  489,  489,  493, 1149, 1149,  493, 1149,
     1149, 1149, 1149,  493, 1149,  493,  493,  493, 1149, 1149,
     1149, 1149,  493,  495,  495,  495,  495,  495,  495,  495,

      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495, 1149,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  497,  497, 1149,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497, 1149,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  499,  499, 1149,
      499, 1149,  499,  499,  499, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149,  499,  499,  499, 1149,  499,
      499, 1149, 1149, 1149, 1149, 1149,  499,  504, 1149, 1149,
      504, 1149, 1149, 1149, 1149,  504, 1149,  504,  504,  504,

     1149, 1149, 1149, 1149,  504,  508,  508, 1149,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  511,  511, 1149,
      511, 1149,  511,  511,  511,  511,  511,  511, 1149,  511,
      511,  511,  511, 1149,  511,  511,  511,  511, 1149,  511,
     1149,  511,  511,  511,  511,  511,  511,  511,  511,  521,
     1149, 1149,  521, 1149, 1149, 1149, 1149,  521, 1149, 1149,
     1149, 1149,  521,  521, 1149,  521, 1149, 1149, 1149, 1149,
      521, 1149,  521,  521,  521,  529,  529, 1149,  529, 1149,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529, 1149,  529, 1149,  529,
      529,  529,  529,  529,  529,  529,  529,  533,  533, 1149,
      533, 1149,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533, 1149,  533,
     1149,  533,  533,  533,  533,  533,  533,  533,  533,  542,
     1149, 1149,  542, 1149, 1149, 1149, 1149,  542, 1149,  542,
      542,  542, 1149, 1149, 1149, 1149,  542,  546,  546, 1149,
      546,  546,  546,  546,  546,  546, 1149, 1149,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546, 1149,  546,

     1149,  546,  546,  546,  546,  546,  546,  546,  546,  553,
     1149,  553,  553,  553, 1149, 1149, 1149, 1149,  553,  555,
     1149,  555,  555, 1149, 1149, 1149,  555, 1149,  555,  555,
      555, 1149, 1149, 1149, 1149,  555,  558, 1149,  558,  558,
      558, 1149, 1149, 1149, 1149,  558,  560, 1149,  560,  560,
     1149, 1149, 1149,  560, 1149,  560,  560,  560, 1149, 1149,
     1149, 1149,  560,  563,  563, 1149,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563, 1149,  563, 1149,  563,  563,  563,
      563,  563,  563,  563,  563,  566, 1149, 1149,  566, 1149,

     1149, 1149, 1149,  566, 1149,  566,  566,  566, 1149, 1149,
     1149, 1149,  566,  568,  568, 1149,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568, 1149,  568,  568,
      568,  568,  568,  568,  568,  568, 1149,  568,  568,  568,
      568,  568,  568,  568,  568,  571,  571, 1149,  571,  571,
      571,  571,  571,  571,  571,  571, 1149,  571,  571,  571,
      571,  571,  571,  571,  571,  571, 1149,  571, 1149,  571,
      571,  571,  571,  571,  571,  571,  571,  574, 1149,  574,
      574,  574,  574,  574, 1149, 1149, 1149,  574, 1149,  574,
      574,  574, 1149, 1149, 1149, 1149,  574,  577,  577, 1149,

      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
     1149,  577,  577,  577,  577,  577,  577,  577,  577,  579,
      579,  579,  579,  579,  579,  579,  579,  579, 1149, 1149,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  335,  335,  335, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149,  335,  335,  335,  335,  335,  335,
      335,  335,  335, 1149,  335,  335,  307,  307, 1149,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  310, 1149,
      310,  310,  310, 1149, 1149, 1149, 1149,  310,  582,  582,
     1149, 1149, 1149,  582, 1149,  582,  582,  582, 1149, 1149,
     1149, 1149,  582,  311, 1149,  311,  311, 1149,  311, 1149,
     1149, 1149,  311,  311, 1149,  311,  311,  311,  584, 1149,
     1149,  584, 1149, 1149, 1149, 1149,  584, 1149,  584,  584,
      584,  591, 1149, 1149,  591, 1149,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  610, 1149,  610,  610,  610, 1149, 1149,
     1149,  610,  618, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
      618, 1149,  618,  618,  618,  342, 1149,  342,  342, 1149,
      342, 1149, 1149, 1149,  342,  342, 1149,  342,  342,  342,
      344, 1149, 1149,  344, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149,  344,  344,  344,  344,  344,  363,  363, 1149,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  365, 1149,

     1149, 1149, 1149, 1149,  365, 1149,  365,  365,  365,  365,
      365, 1149, 1149,  365,  365,  365,  365,  365,  365, 1149,
     1149, 1149, 1149,  365,  630, 1149, 1149, 1149, 1149, 1149,
      630, 1149,  630, 1149,  630,  630,  630, 1149, 1149,  630,
      630,  630,  630,  630,  630, 1149, 1149, 1149, 1149,  630,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  375, 1149,  375,  375, 1149, 1149, 1149,  375,
     1149,  375,  375,  375, 1149, 1149, 1149, 1149,  375,  373,

     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149,  373, 1149,  373,  373,  373, 1149,
     1149, 1149, 1149,  373,  384,  384,  384,  384, 1149, 1149,
      384, 1149, 1149, 1149, 1149, 1149, 1149, 1149,  384, 1149,
     1149,  384, 1149, 1149, 1149,  384, 1149,  384,  384,  384,
     1149, 1149, 1149,  384,  384,  387,  387,  387,  387, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,  387,
     1149,  387,  387,  387, 1149, 1149,  387, 1149,  387,  387,
      387, 1149, 1149, 1149, 1149,  387,  394,  394,  394,  394,
     1149, 1149,  394, 1149, 1149, 1149, 1149, 1149, 1149, 1149,

     1149, 1149, 1149, 1149, 1149, 1149, 1149,  394, 1149,  394,
      394,  394, 1149, 1149, 1149, 1149,  394,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635, 1149,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  638,
     1149,  638, 1149, 1149,  638, 1149,  638,  638,  638, 1149,
     1149, 1149, 1149,  638,  395,  395, 1149,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  397, 1149, 1149, 1149,

     1149, 1149,  397, 1149,  397,  397,  397,  397,  397, 1149,
     1149,  397,  397,  397,  397,  397,  397, 1149, 1149, 1149,
     1149,  397,  639, 1149, 1149, 1149, 1149, 1149,  639, 1149,
      639, 1149,  639,  639,  639, 1149, 1149,  639,  639,  639,
      639,  639,  639, 1149, 1149, 1149, 1149,  639,  403,  403,
     1149,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      405,  405, 1149,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  409,  409, 1149, 1149, 1149, 1149, 1149,  409,
     1149,  409,  409,  409,  409,  409, 1149,  409,  409,  409,
      409,  409,  409,  409, 1149, 1149, 1149, 1149,  409,  644,
     1149, 1149, 1149, 1149, 1149,  644, 1149,  644, 1149,  644,
      644,  644, 1149, 1149,  644,  644,  644,  644,  644,  644,
     1149, 1149, 1149, 1149,  644,  420,  420,  420,  420, 1149,
     1149,  420, 1149, 1149, 1149, 1149, 1149, 1149, 1149,  420,
     1149, 1149,  420, 1149, 1149, 1149,  420, 1149,  420,  420,
      420, 1149, 1149, 1149,  420,  420,  425,  425,  425,  425,

     1149, 1149, 1149, 1149,  425, 1149, 1149, 1149, 1149, 1149,
      425, 1149,  425,  425, 1149, 1149, 1149,  425, 1149,  425,
      425,  425, 1149, 1149, 1149, 1149,  425,  428,  428,  428,
      428, 1149, 1149,  428, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,  428, 1149,
      428,  428,  428, 1149, 1149, 1149, 1149,  428,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647, 1149,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      649, 1149, 1149,  649, 1149, 1149, 1149, 1149,  649, 1149,

     1149, 1149, 1149, 1149, 1149, 1149,  649, 1149, 1149, 1149,
     1149,  649, 1149,  649,  649,  649, 1149, 1149, 1149, 1149,
      649,  429, 1149, 1149,  429, 1149, 1149, 1149, 1149,  429,
     1149,  429,  429,  429, 1149, 1149, 1149, 1149,  429,  433,
      433, 1149,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  438,  438, 1149,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,

      438,  438,  438,  443,  443, 1149,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  445, 1149, 1149, 1149, 1149,
     1149,  445, 1149,  445,  445,  445,  445,  445, 1149, 1149,
      445,  445,  445,  445,  445,  445, 1149, 1149, 1149, 1149,
      445,  653, 1149, 1149, 1149, 1149, 1149,  653, 1149,  653,
     1149,  653,  653,  653, 1149, 1149,  653,  653,  653,  653,
      653,  653, 1149, 1149, 1149, 1149,  653,  454, 1149, 1149,
      454, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,  454,

     1149, 1149, 1149,  454, 1149, 1149, 1149, 1149,  454, 1149,
      454,  454,  454, 1149, 1149, 1149, 1149,  454,  460,  460,
      460,  460, 1149, 1149,  460, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149,  460,  460, 1149, 1149, 1149,  460,
     1149,  460,  460,  460, 1149, 1149, 1149, 1149,  460,  656,
     1149,  656,  656,  656, 1149, 1149, 1149, 1149,  656,  659,
      659,  659,  659, 1149, 1149,  659, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149,  659,  659, 1149, 1149, 1149,
      659, 1149,  659,  659,  659, 1149, 1149, 1149, 1149,  659,
      468,  468,  468,  468, 1149, 1149,  468, 1149, 1149, 1149,

     1149, 1149, 1149, 1149,  468, 1149, 1149,  468, 1149, 1149,
     1149,  468, 1149,  468,  468,  468, 1149, 1149, 1149,  468,
      468,  471,  471,  471,  471, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149,  471, 1149,  471,  471, 1149,
     1149, 1149,  471, 1149,  471,  471,  471, 1149, 1149, 1149,
     1149,  471,  477,  477,  477,  477, 1149, 1149,  477, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149,  477, 1149,  477,  477,  477, 1149, 1149,
     1149, 1149,  477,  662, 1149, 1149, 1149, 1149,  662, 1149,
      662,  662,  662, 1149, 1149, 1149, 1149,  662,  480, 1149,

      480, 1149, 1149, 1149, 1149,  480, 1149,  480,  480,  480,
     1149, 1149, 1149, 1149,  480,  664, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
      664, 1149,  664,  664,  664, 1149, 1149, 1149, 1149,  664,
      484,  484, 1149,  484, 1149, 1149, 1149, 1149,  484, 1149,
      484,  484,  484, 1149, 1149, 1149, 1149,  484,  489,  489,
     1149,  489,  489,  489,  489,  489,  489,  489,  489, 1149,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489, 1149,  489,  489,  489,  489,  489,  489,  489,  489,
      493, 1149, 1149,  493, 1149, 1149, 1149, 1149,  493, 1149,

      493,  493,  493, 1149, 1149, 1149, 1149,  493,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495, 1149,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      497,  497, 1149,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497, 1149,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  671, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149,  671, 1149,  671,
      671,  671, 1149, 1149, 1149, 1149,  671,  504, 1149, 1149,

      504, 1149, 1149, 1149, 1149,  504, 1149,  504,  504,  504,
     1149, 1149, 1149, 1149,  504,  508,  508, 1149,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  511,  511, 1149,
      511, 1149,  511,  511,  511,  511,  511,  511, 1149,  511,
      511,  511,  511, 1149,  511,  511,  511,  511, 1149,  511,
     1149,  511,  511,  511,  511,  511,  511,  511,  511,  521,
     1149, 1149,  521, 1149, 1149, 1149, 1149,  521, 1149, 1149,
     1149, 1149,  521,  521, 1149,  521, 1149, 1149, 1149, 1149,

      521, 1149,  521,  521,  521,  529,  529, 1149,  529, 1149,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529, 1149,  529, 1149,  529,
      529,  529,  529,  529,  529,  529,  529,  533,  533, 1149,
      533, 1149,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533, 1149,  533,
     1149,  533,  533,  533,  533,  533,  533,  533,  533,  542,
     1149, 1149,  542, 1149, 1149, 1149, 1149,  542, 1149,  542,
      542,  542, 1149, 1149, 1149, 1149,  542,  546,  546, 1149,
      546,  546,  546,  546,  546,  546, 1149, 1149,  546,  546,

      546,  546,  546,  546,  546,  546,  546,  546, 1149,  546,
     1149,  546,  546,  546,  546,  546,  546,  546,  546,  555,
     1149,  555,  555, 1149, 1149, 1149,  555, 1149,  555,  555,
      555, 1149, 1149, 1149, 1149,  555,  553, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149,  553, 1149,  553,  553,  553, 1149, 1149, 1149, 1149,
      553,  560, 1149,  560,  560, 1149, 1149, 1149,  560, 1149,
      560,  560,  560, 1149, 1149, 1149, 1149,  560,  558, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149,  558, 1149,  558,  558,  558, 1149, 1149,

     1149, 1149,  558,  563,  563, 1149,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563, 1149,  563, 1149,  563,  563,  563,
      563,  563,  563,  563,  563,  566, 1149, 1149,  566, 1149,
     1149, 1149, 1149,  566, 1149,  566,  566,  566, 1149, 1149,
     1149, 1149,  566,  568,  568, 1149,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568, 1149,  568,  568,
      568,  568,  568,  568,  568,  568, 1149,  568,  568,  568,
      568,  568,  568,  568,  568,  571,  571, 1149,  571,  571,
      571,  571,  571,  571,  571,  571, 1149,  571,  571,  571,

      571,  571,  571,  571,  571,  571, 1149,  571, 1149,  571,
      571,  571,  571,  571,  571,  571,  571,  574, 1149,  574,
      574,  574,  574,  574, 1149, 1149, 1149,  574, 1149,  574,
      574,  574, 1149, 1149, 1149, 1149,  574,  707, 1149, 1149,
     1149, 1149,  707, 1149,  707,  707,  707, 1149, 1149, 1149,
     1149,  707,  577,  577, 1149,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577, 1149,  577,  577,  577,  577,
      577,  577,  577,  577,  579,  579,  579,  579,  579,  579,
      579,  579,  579, 1149, 1149,  579,  579,  579,  579,  579,

      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  582,  582, 1149, 1149,
     1149,  582, 1149,  582,  582,  582, 1149, 1149, 1149, 1149,
      582,  712,  712, 1149,  712,  712,  712,  712, 1149,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  584,  584, 1149,  584, 1149, 1149, 1149,
     1149,  584, 1149,  584,  584,  584,  311, 1149,  311,  311,
     1149,  311, 1149, 1149, 1149,  311,  311, 1149,  311,  311,
      311,  591, 1149, 1149,  591, 1149,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  722,  722, 1149,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  610, 1149, 1149,  610, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149,  610, 1149,  610,  610,
      610,  335, 1149, 1149,  335, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,

     1149, 1149,  335, 1149,  335,  335,  335,  734,  734, 1149,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734, 1149,  734,  734,  618,
     1149, 1149, 1149, 1149, 1149, 1149, 1149,  618, 1149,  618,
      618,  618,  344, 1149, 1149,  344, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149,  344,  344,  344,  344,  344,  630, 1149,
     1149, 1149, 1149, 1149,  630, 1149,  630,  630,  630,  630,
      630, 1149, 1149,  630,  630,  630,  630,  630,  630, 1149,

     1149, 1149, 1149,  630,  365, 1149, 1149, 1149, 1149, 1149,
      365, 1149,  365,  365,  365,  365,  365, 1149, 1149,  365,
      365,  365,  365,  365,  365, 1149, 1149, 1149, 1149,  365,
      373, 1149,  373,  373,  373, 1149, 1149, 1149, 1149,  373,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  638, 1149,  638, 1149, 1149,  638, 1149,  638,
      638,  638, 1149, 1149, 1149, 1149,  638,  639, 1149, 1149,
     1149, 1149, 1149,  639, 1149,  639,  639,  639,  639,  639,

     1149, 1149,  639,  639,  639,  639,  639,  639, 1149, 1149,
     1149, 1149,  639,  397, 1149, 1149, 1149, 1149, 1149,  397,
     1149,  397,  397,  397,  397,  397, 1149, 1149,  397,  397,
      397,  397,  397,  397, 1149, 1149, 1149, 1149,  397,  748,
      748, 1149,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  644,  644, 1149, 1149, 1149, 1149, 1149,  644, 1149,
      644,  644,  644,  644,  644, 1149,  644,  644,  644,  644,
      644,  644,  644, 1149, 1149, 1149, 1149,  644,  409,  409,

     1149, 1149, 1149, 1149, 1149,  409, 1149,  409,  409,  409,
      409,  409, 1149,  409,  409,  409,  409,  409,  409,  409,
     1149, 1149, 1149, 1149,  409,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  649, 1149, 1149,
      649, 1149, 1149, 1149, 1149,  649, 1149, 1149, 1149, 1149,
     1149, 1149, 1149,  649, 1149, 1149, 1149, 1149,  649, 1149,
      649,  649,  649, 1149, 1149, 1149, 1149,  649,  653, 1149,
     1149, 1149, 1149, 1149,  653, 1149,  653,  653,  653,  653,

      653, 1149, 1149,  653,  653,  653,  653,  653,  653, 1149,
     1149, 1149, 1149,  653,  445, 1149, 1149, 1149, 1149, 1149,
      445, 1149,  445,  445,  445,  445,  445, 1149, 1149,  445,
      445,  445,  445,  445,  445, 1149, 1149, 1149, 1149,  445,
      758,  758,  758,  758, 1149, 1149,  758, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149,  758,  758, 1149, 1149,
     1149,  758, 1149,  758,  758,  758, 1149, 1149, 1149, 1149,
      758,  656,  656,  656,  656, 1149, 1149,  656, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,  656, 1149,
     1149, 1149,  656, 1149,  656,  656,  656, 1149, 1149, 1149,

     1149,  656,  659,  659,  659,  659, 1149, 1149,  659, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,  659,  659,
     1149, 1149, 1149,  659, 1149,  659,  659,  659, 1149, 1149,
     1149, 1149,  659,  662, 1149, 1149, 1149, 1149,  662, 1149,
      662,  662,  662, 1149, 1149, 1149, 1149,  662,  664, 1149,
      664,  664,  664, 1149, 1149, 1149, 1149,  664,  762, 1149,
      762, 1149, 1149, 1149, 1149,  762, 1149,  762,  762,  762,
     1149, 1149, 1149, 1149,  762,  671, 1149,  671,  671,  671,
     1149, 1149, 1149, 1149,  671,  768, 1149, 1149, 1149, 1149,
      768, 1149,  768,  768,  768, 1149, 1149, 1149, 1149,  768,

      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779, 1149,  779,  779,
      779,  779, 1149,  779, 1149, 1149,  779,  779,  779,  779,
      779,  779,  553, 1149,  553,  553,  553, 1149, 1149, 1149,
     1149,  553,  558, 1149,  558,  558,  558, 1149, 1149, 1149,
     1149,  558,  799, 1149,  799,  799,  799,  799,  799, 1149,
     1149, 1149,  799, 1149,  799,  799,  799, 1149, 1149, 1149,
     1149,  799,  712,  712, 1149,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  712,  712,  804, 1149, 1149,  804, 1149, 1149,
     1149, 1149,  804, 1149,  804,  804,  804,  318, 1149,  318,
     1149,  318,  318, 1149,  318, 1149, 1149, 1149,  318,  318,
     1149,  318,  318,  318,  722,  722, 1149,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  335, 1149, 1149,  335,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149,  335, 1149,  335,
      335,  335,  734,  734, 1149,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  735,  735,  735,  735,  735,  344,
     1149, 1149,  344, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
      344,  344,  344,  344,  344,  311,  311, 1149,  311, 1149,
     1149, 1149, 1149, 1149, 1149, 1149,  311, 1149,  311,  311,
     1149,  311,  311, 1149, 1149,  311,  311, 1149,  311,  311,
      311, 1149,  311,  365, 1149, 1149, 1149, 1149, 1149,  365,
     1149,  365,  365,  365,  365,  365, 1149, 1149,  365,  365,

      365,  365,  365,  365, 1149, 1149, 1149, 1149,  365,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  397, 1149, 1149, 1149, 1149, 1149,  397, 1149,  397,
      397,  397,  397,  397, 1149, 1149,  397,  397,  397,  397,
      397,  397, 1149, 1149, 1149, 1149,  397,  748,  748, 1149,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  409,

      409, 1149, 1149, 1149, 1149, 1149,  409, 1149,  409,  409,
      409,  409,  409, 1149,  409,  409,  409,  409,  409,  409,
      409, 1149, 1149, 1149, 1149,  409,  445, 1149, 1149, 1149,
     1149, 1149,  445, 1149,  445,  445,  445,  445,  445, 1149,
     1149,  445,  445,  445,  445,  445,  445, 1149, 1149, 1149,
     1149,  445,  831, 1149,  831,  831,  831, 1149, 1149, 1149,
     1149,  831,  758,  758,  758,  758, 1149, 1149,  758, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,  758,  758,
     1149, 1149, 1149,  758, 1149,  758,  758,  758, 1149, 1149,
     1149, 1149,  758,  656,  656,  656,  656, 1149, 1149,  656,

     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
      656, 1149, 1149, 1149,  656, 1149,  656,  656,  656, 1149,
     1149, 1149, 1149,  656,  762, 1149,  762, 1149, 1149, 1149,
     1149,  762, 1149,  762,  762,  762, 1149, 1149, 1149, 1149,
      762,  768, 1149, 1149, 1149, 1149,  768, 1149,  768,  768,
      768, 1149, 1149, 1149, 1149,  768,  877,  877, 1149,  877,
     1149, 1149, 1149, 1149,  877, 1149,  877,  877,  877,  884,
      884, 1149,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,

      884,  902,  902,  902,  902, 1149, 1149,  902, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149,  902,  902, 1149,
     1149, 1149,  902, 1149,  902,  902,  902, 1149, 1149, 1149,
     1149,  902,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928, 1149,
      928,  928,  928,  928, 1149,  928, 1149,  928, 1149,  928,
      928,  928,  928,  928,  956,  956, 1149,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  997,  997,  997,  997,

      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997, 1149,  997,  997,  997,  997, 1149,  997,
     1149, 1149, 1149,  997,  997,  997,  997,  997,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998, 1149,  998,  998,  998,  998,
     1149,  998, 1149, 1149, 1149,  998,  998,  998,  998,  998,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1149, 1046, 1046,
     1046, 1046, 1149, 1046, 1149, 1149, 1149, 1046, 1046, 1046,
     1046, 1046, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,

     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1149,
     1057, 1057, 1057, 1057, 1149, 1057, 1149, 1149, 1149, 1057,
     1057, 1057, 1057, 1057, 1101, 1101, 1149, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101,   87, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,

     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149
    } ;

static yyconst flex_int16_t yy_chk[9833] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,   21,   22,    4,   23,
       21,   22,   24,   23,   49, 1144,   24,    4,    4,   37,
        4,    4,   38,   41,    4,    4,    4,   42,   50,  103,

       37,   59,  103,   38,   41,  240,  323,  120,   42,  240,
       45,   45,  120,   45,   60,   45,   41, 1142,   21,   22,
       42,   23,   46,   46,   24,   46,   49,   46,  323,   53,
       53,   37,   53,   65,   38,   41,   66,   83,   84,   42,
       50,   54,   54,   59,   54,    4,    5,    5,    5,    5,
        5,    5,    5,   45,    5,    5,   60,    5,    5,    5,
       47,    5,   47,    5,    5,   46,  289,  859,    5,    5,
        5,   47,   53, 1140,  859,   65,   47,  223,   66,   83,
       84,  266,  223,   47,   54,   48,  266,   48,   95,    5,
        5,    5,   55,  289,   55,   85,   48,   95,   77, 1137,

      174,   48,   47,  174,   85,   85,   95,   56,   48,   56,
       91,   91,   77,   91,  174,   55,    5,    5,    5,    5,
        6,    6,    6,    6,    6,    6,    6,   48,    6,    6,
       56,    6,    6,    6,   55,    6,   71,    6,    6,   57,
       77,   57,    6,    6,    6,   58,   63,   58,   86,   56,
     1134,  104,  325,   91,  104,   63,   63,   86,   86,   71,
     1133,  271,   57,    6,    6,    6,  271, 1104,   58,   63,
      130,  130,  130,  130,  325,  104,  228,  130,   71,  228,
     1104,   57,  152,  152,  152,  152,  228,   58,   63,  152,
        6,    6,    6,    6,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   13,   13,   13,   13,   13,   13,
       13,   72,   13,   13,   64,   13,   13,   13,   73,   13,
       74,   13,   13,   64,   64,   78,   13,   13,   13,   79,
      213,   80, 1129,  213,   72,  213,  530,   64,  530,   78,
       79,   73,   80,   74, 1126,  112,  112,   13,   13,   13,
      112,  404,   79,   72,   80,  107,   64,  107,  107,  107,

       73,   90,   74,  107,   90,  113,  113,   78, 1125,  404,
      113,   79,  112,   80,   13,   13,   13,   13,   14,   14,
       14,   14,   14,   14,   14,   90,   14,   14, 1119,   14,
       14,   14,  113,   14,  313,   14,   14,  313,  204, 1119,
       14,   14,   14,   96,   90,   96,   96,   96,   96,  204,
      123,  123,  123,  123,  134,  134,   96,  121,  121,  134,
      121,   14,   14,   14,  324,  319,  123,   99,  319,   99,
       99,  123,   99,   99,   99,   96,  129,  129,   99,  129,
      204,  134,  234,  234,  324,  234,  565, 1124,   14,   14,
       14,   14,   15,   15,   15,   15,   15,   15,   15,   99,

       15,   15,  121,   15,   15,   15,  324,   15,  231,   15,
       15,  231, 1123,  565,   15,   15,   15,  101,  231,  101,
      101,  129,  101,  101,  101,  234,  105,  108,  101,  105,
      108,  314,  105,  135,  135,   15,   15,   15,  135,  373,
      314,  105,  108,  537,  373, 1122,  241,  105,  108,  101,
      105,  241,  328,  349,  326,  241,  349,  537,  156,  156,
      135,  156,   15,   15,   15,   15,   16,   16,   16,   16,
       16,   16,   16,  328,   16,   16,  326,   16,   16,   16,
     1139,   16,  344,   16,   16,  344, 1121, 1139,   16,   16,
       16,  106,  106, 1117,  106,  329,  105,  108,  124,  124,

      124,  124,  106,  156,  106,  106,  106,  106,  321,   16,
       16,   16,  334,  354,  124,  106,  354,  329, 1116,  124,
      188,  188,  188,  188,  375,  344, 1114,  188, 1113,  375,
      321,  321,  321,  334,  106, 1112,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       25,   25,   25,   25,   25,   25,   25, 1111,   25,   25,

      366,   25,   25,   25,  366,   25,  506,   25,   25,  506,
      553,  506,   25,   25,   25,  553,  128,  128,  128,  128,
      125,  125,  125,  125, 1110, 1109,  366,  125,  146,  146,
      146,  146,  128,   25,   25,   25,  125,  128,  128,  585,
      141,  125,  585,  245,  146,  160,  160,  245,  160,  146,
     1108,  141,  141,  245,  338,  245,  141, 1107,  141,  322,
       25,   25,   25,   25,   26,   26,   26,   26,   26,   26,
       26,  322,   26,   26, 1106,   26,   26,   26,  141,   26,
      322,   26,   26,  142,  595, 1101,   26,   26,   26,  338,
      160,  555,  125,  322,  142,  142,  555,  351,  351,  142,

      351,  142,  147,  147,  147,  147,  595,   26,   26,   26,
      151,  151,  151,  151,  357,  357,  338,  357,  147,  451,
      151,  142,  451,  147, 1098,  352,  151,  352,  352,  352,
     1097,  151, 1095,  451,   26,   26,   26,   26,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,  114,
      114,   51,  114, 1094,  558,   51,   51,   51,   51,  558,
      598,  359,  168,  168,  359,  114,  114,  168,  368,  368,

      114,  368,  126,  126,  126,  126,   51,   51,   51,  126,
      569,  599,  598,  164,  164,  359,  164,  452,  126,  168,
      452,  560,  114,  126,  114, 1093,  560,  179,  179,  569,
      179,  452,  599,   51,   51,   51,   51,   51,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  137,  137,   52,  137,  164, 1092,
       52,   52,   52,   52,  169,  169,  720,  601,  143,  169,
      137,  137,  179,  454,  126,  137,  454,  605,  642,  143,
      143,   52,   52,   52,  143,  246,  143,  454,  601,  720,
      246,  169,  377,  377,  246,  377,  642,  137,  605,  137,

      246, 1091,  246, 1090,  389,  389,  143,  389,   52,   52,
       52,   52,   52,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81, 1089,  863, 1088,   81,   81,   81,   81,  304,
      304, 1087,  304,  148,  148,  148,  148,  863,  400,  400,
      148,  400,  181,  181,  181,  181,   81,   81,   81,  148,
      178,  178,  178,  178,  148,  495, 1086,  178,  181,  187,
      187, 1084,  187,  181,  305,  305,  495,  305,  178,  178,
      178,  178,  304,   81,   81,   81,   81,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82, 1077,  495,  606,   82,
       82,   82,   82,  301,  187,  148,  301,  305,  350,  145,
      145,  350,  145,  914,  145,  182,  182,  182,  182,  606,
       82,   82,   82,  350,  717,  145,  145,  301,  914,  350,
      145,  182,  145, 1076,  365,  365,  182,  193,  193,  365,
      193,  388,  388,  388,  388,  717,  301,   82,   82,   82,
       82,   97,  145,  846,  145,  149,  149,  149,  149, 1063,
      428,  365,  149,  428,   97,  183,  183,  183,  183,  846,
      428,  149,  183,  398,   97,   97,  149,  398,  350,   97,
       97,  183,  193, 1131,   97,   97,  183,   97,   97, 1062,

      610,  196,  196,  610,  196,   97,   97, 1060, 1131,  398,
       97,   97,  170,  170,  604,  170,   97,   97,   97,   97,
       97,   97,   98,   98,   98,   98,  726,  345,  170,  170,
      345,   98,  613,  170,  881,  613,  604,  149,   98,   98,
       98, 1059,  184,  184,  184,  184,  196,  183,  726,  184,
      199,  199, 1053,  199, 1052,  170,  881,  170,  184,   98,
     1051,  353,  519,  184,  353,  519,   98,   98,  208,  208,
      345,  208,  519,  710,  226,  226,  353,  226,  186,  186,
      186,  186,  353,  345, 1050,   98, 1146,   98,   98,  100,
      100,  100,  100,  346,  186,  199,  346, 1049,  100,  186,

      207,  207,  207,  207, 1146,  100,  100,  100,  710,  413,
      413,  208,  413,  208,  184, 1048,  207,  207,  207,  226,
      232,  232,  955,  232,  430,  430,  100,  430,  100,  249,
      249,  353,  249,  100,  100,  710,  346,  207,  253,  253,
     1047,  253,  259,  259,  955,  259,  262,  262, 1045,  262,
      347,  346,  100,  347,  100,  100,  102,  347, 1143,  102,
      623,  327, 1143,  623,  327,  232,  207,  355,  102,  102,
      355,  102,  102, 1023,  249,  102,  102,  102,  435,  435,
      102,  435,  355,  253,  327, 1022,  327,  259,  355, 1020,
     1019,  262,  347,  347,  360, 1018,  360,  360,  360,  102,

      327,  629,  360,  361,  629,  703,  361,  327,  703,  342,
      715,  342,  342,  715,  342,  342,  342,  410,  361,  347,
      342,  410,  327, 1017,  361,  721,  102,  140,  140, 1016,
      140,  140,  140,  140, 1015,  140,  140,  355,  140,  140,
      140,  342,  140,  410,  140,  140,  721, 1014, 1013,  140,
      140,  140,  343,  362,  343,  343,  362,  343,  343,  343,
      724,  356,  356,  343,  356, 1012,  440,  440,  362,  440,
      140,  140,  140,  361,  362, 1011,  356,  730,  367,  367,
      730,  724,  356,  367,  343,  356,  370,  370, 1010,  448,
      448,  370,  448,  380,  380,  380,  380,  140,  140,  140,

      140,  302,  302,  302,  302,  367,  397,  397, 1009,  380,
     1008,  397,  521,  370,  380,  521,  810,  302,  302,  302,
      399,  399,  521,  362, 1007,  399,  370,  381,  381,  381,
      381,  356,  614,  397,  381,  614, 1006,  810,  302,  384,
      384,  384,  384,  381,  814,  302,  302,  399,  381,  461,
      461,  796,  461, 1005,  796,  384,  383,  383,  383,  383,
      384,  384, 1004,  383,  302,  814,  302,  302,  303,  303,
      303,  303,  383,  385,  385,  385,  385,  383,  446, 1003,
      385,  614,  446, 1002,  303,  303,  303, 1000,  999,  995,
      386,  386,  386,  386,  994,  472,  472,  386,  472,  381,

      387,  387,  387,  387,  446,  303,  386,  392,  392,  392,
      392,  386,  303,  303,  392,  993,  387,  393,  393,  393,
      393,  387,  387,  992,  393,  991,  481,  481,  383,  481,
      990,  303,  989,  303,  303,  317,  486,  486,  317,  486,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  409,  987,  986,  317,  317,  317,
      317,  985,  386,  402,  402,  409,  409,  984,  402,  982,
      409,  981,  409,  411,  421,  421,  421,  421,  317,  317,
      317,  421,  980,  979,  411,  411,  415,  978,  977,  411,
      402,  411,  409,  426,  426,  426,  426,  415,  415,  976,

      426,  975,  415,  402,  415,  317,  317,  317,  317,  317,
      335,  411,  849,  335,  974,  849,  335,  335,  335,  335,
      416,  416,  416,  416,  415,  973,  972,  970,  417,  417,
      417,  417,  335,  335,  335,  417,  416,  415,  445,  445,
      969,  416,  968,  445,  417,  419,  419,  419,  419,  417,
      965,  964,  419,  335,  420,  420,  420,  420,  447,  447,
      959,  419,  958,  447,  420,  445,  419,  956,  954,  953,
      420,  422,  422,  422,  422,  420,  952,  733,  422,  335,
      733,  335,  335,  348,  951,  447,  348,  422,  490,  490,
      935,  490,  422,  935,  960,  348,  348,  960,  348,  348,

      417,  950,  348,  348,  348,  949,  948,  348,  423,  423,
      423,  423,  425,  425,  425,  425,  685,  419,  423,  685,
      501,  501,  425,  501,  423,  947,  348,  620,  425,  423,
      620,  733,  946,  425,  427,  427,  427,  427,  945,  516,
      516,  427,  516,  422,  960,  600,  450,  450,  600,  522,
      522,  450,  522,  348,  405,  405,  944,  405,  405,  405,
      405,  621,  405,  405,  621,  405,  405,  405,  600,  405,
      620,  405,  405,  450,  685,  943,  405,  405,  405,  942,
      941,  620,  455,  455,  455,  455,  450,  940,  939,  455,
      456,  456,  456,  456,  938,  937,  936,  405,  405,  405,

      455,  455,  455,  455,  621,  469,  469,  469,  469,  934,
      621,  456,  469,  932,  464,  464,  464,  464,  525,  525,
     1061,  525,  929, 1061,  405,  405,  405,  405,  406,  406,
      464,  406,  406,  406,  406,  464,  406,  406,  927,  406,
      406,  406,  926,  406,  648,  406,  406,  648,  925,  924,
      406,  406,  406,  923,  648,  922,  458,  458,  458,  458,
      921,  525,  624,  458,  624,  624,  624,  468,  468,  468,
      468,  406,  406,  406,  458,  458,  458,  458,  539,  539,
      920,  539,  919,  468,  460,  460,  460,  460,  468,  543,
      543,  460,  543,  547,  547,  918,  547,  917,  406,  406,

      406,  406,  460,  460,  460,  460,  465,  465,  465,  465,
      916,  915,  913,  465,  467,  467,  467,  467,  912,  911,
      910,  467,  465,  471,  471,  471,  471,  465,  909,  908,
      467,  470,  470,  470,  470,  467,  907,  905,  470,  471,
      550,  550,  602,  550,  471,  602,  904,  470,  475,  475,
      475,  475,  470,  903,  899,  475,  476,  476,  476,  476,
      898,  897,  894,  476,  611,  602,  893,  611,  887,  622,
      622,  611,  622,  625,  625,  886,  625,  884,  465,  649,
      628,  628,  649,  628,  622,  880,  467,  879,  625,  649,
      622,  877,  876,  817,  625,  628,  817,  630,  630,  875,

      874,  628,  630,  470,  590, 1115,  611,  590, 1115,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  873,  630,  872,  590,  590,  590,  590,
      871,  627,  627,  611,  627,  631,  631,  870,  736,  622,
      631,  736, 1128,  625,  869, 1128,  627,  590,  590,  590,
      628,  817,  627,  632,  632,  627,  639,  639,  632,  868,
      867,  639,  631,  635,  635,  635,  635,  636,  636,  636,
      636,  866,  865,  864,  590,  590,  590,  590,  590,  862,
      632,  736,  644,  639,  640,  640,  635,  641,  641,  640,
      636,  632,  641,  644,  644,  861,  736,  860,  644,  723,

      644,  627,  723,  657,  657,  657,  657,  858,  857,  856,
      657,  640,  737,  725,  641,  737,  725,  855,  653,  653,
      644,  854,  723,  653,  657,  641,  643,  643,  853,  643,
      643,  643,  643,  852,  643,  643,  725,  643,  643,  643,
      645,  643,  851,  643,  643,  653,  850,  848,  643,  643,
      643,  645,  645,  847,  811,  737,  645,  811,  645,  654,
      654,  845, 1118,  646,  654, 1118,  737,  655,  655,  643,
      643,  643,  655, 1103,  646,  646, 1103,  811,  645,  646,
      714,  646,  714,  844,  714,  714,  654,  843,  656,  656,
      656,  656,  842,  714,  655,  656,  643,  643,  643,  643,

     1130,  646,  841, 1130,  840,  655,  656,  656,  656,  656,
      839,  838,  646,  658,  658,  658,  658,  837, 1118, 1103,
      658,  659,  659,  659,  659,  741,  741,  836,  659,  835,
      741,  658,  658,  658,  658,  738,  738,  834,  738,  659,
      659,  659,  659,  739,  739,  833,  739,  832,  740,  740,
      738,  740,  741,  829,  812,  828,  738,  812,  739,  743,
      743,  743,  743,  740,  739,  747,  747,  741,  750,  740,
      747,  827,  740,  745,  745,  745,  745,  812, 1024,  750,
      750, 1024,  743,  824,  750,  823,  750,  759,  759,  759,
      759,  818,  747,  816,  759, 1135,  745,  805, 1135,  805,

     1138,  805,  805, 1138,  815,  738,  750,  747,  759,  809,
      805,  755,  755,  739,  821,  821,  755,  821,  740,  748,
      748,  750,  748,  748,  748,  748,  808,  748,  748,  821,
      748,  748,  748,  807,  748,  821,  748,  748,  755, 1024,
      804,  748,  748,  748,  802,  801,  800,  757,  757,  757,
      757,  799,  882,  755,  757,  882, 1082,  819,  885, 1082,
      819,  885,  748,  748,  748,  757,  757,  757,  757,  772,
      772,  798,  797,  795,  772,  882,  820,  772,  772,  820,
      957,  885,  772,  957,  821,  772,  772,  794,  772,  748,
      748,  748,  748,  749,  749,  793,  749,  749,  749,  749,

      819,  749,  749,  957,  749,  749,  749,  819,  749,  888,
      749,  749,  888,  792, 1082,  749,  749,  749,  791,  820,
      790,  758,  758,  758,  758,  822,  822,  789,  758, 1141,
      822,  788, 1141,  787,  820,  826,  749,  749,  749,  758,
      758,  758,  758,  825,  825,  786,  826,  826,  825,  830,
      830,  826,  822,  826,  830,  891,  785, 1132,  891,  822,
     1132,  784,  782,  749,  749,  749,  749,  781,  890,  780,
      825,  890,  888,  826,  778,  777,  830,  825, 1021, 1145,
      826, 1021, 1145,  830,  831,  831,  831,  831,  776,  892,
      892,  831,  895,  895,  892,  775,  896,  895,  891,  774,

     1132, 1021,  831,  831,  831,  831,  961,  896,  896,  961,
     1105,  890,  896, 1105,  896,  890,  892,  773,  891,  895,
      892,  900,  900,  895,  963,  963,  900,  962,  771,  963,
      962,  770, 1025, 1025,  896, 1025,  769,  767,  896,  901,
      901,  901,  901,  766,  765,  764,  901, 1026,  900,  961,
     1026,  963,  900, 1105,  763,  762, 1105,  901,  901,  901,
      901,  902,  902,  902,  902,  761,  760,  961,  902,  963,
      962,  966,  966,  967,  754, 1025,  966,  962,  753,  902,
      902,  902,  902, 1085,  967,  967, 1085,  971,  971,  967,
     1026,  967,  971,  752, 1027, 1027, 1030, 1030,  966, 1027,

     1120, 1030,  746, 1120, 1035, 1035, 1031, 1078, 1026, 1035,
     1078,  967, 1083, 1083,  971, 1083,  966, 1031, 1031,  742,
      735, 1027, 1031, 1030, 1031, 1102, 1085, 1309, 1102,  967,
     1078, 1035,  971, 1148, 1148, 1309, 1148,  734, 1309, 1309,
      728, 1085,  727, 1120, 1031,  722,  719, 1321, 1102, 1321,
     1321, 1321,  718,  712, 1352, 1083, 1120, 1325,  711, 1325,
     1325, 1325, 1352,  709,  708, 1352, 1352, 1358,  707, 1358,
     1358, 1358,  706,  704,  702,  701, 1148, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,

     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1153, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1163, 1163, 1163, 1163, 1163, 1163, 1163,

     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,

     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,

     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1176,
     1176,  697, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1177, 1385,  695, 1385, 1385, 1385,  693,  692,  691,
      690,  689,  688,  687,  686,  684, 1177,  683, 1177, 1177,
     1177,  682,  681,  680,  679, 1177, 1178,  678, 1178, 1178,
      677, 1178,  676,  675,  674, 1178, 1178,  673, 1178, 1178,
     1178, 1179,  672, 1179, 1179, 1179, 1179,  669, 1179,  668,
      667,  666, 1179, 1179, 1179, 1179, 1179, 1179, 1180, 1180,

     1180,  665,  664,  661,  660,  652, 1180,  651,  650,  647,
      638, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
      637, 1180, 1180, 1181,  634, 1181, 1181,  609, 1181,  608,
      607,  597, 1181, 1181,  596, 1181, 1181, 1181, 1182, 1182,
     1182,  594,  592,  591,  589,  586, 1182,  584,  582,  581,
      580, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
      578, 1182, 1182, 1183, 1183,  576, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1184,  574,  573,  570,  567,

      564, 1184,  562, 1184, 1184, 1184, 1184, 1184,  561,  559,
     1184, 1184, 1184, 1184, 1184, 1184,  557,  556,  554,  552,
     1184, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1186,  549, 1186, 1186, 1186,  545,  541,
      538,  536, 1186, 1187,  535, 1187, 1187,  534,  532,  531,
     1187,  528, 1187, 1187, 1187,  527,  524,  518,  515, 1187,
     1188, 1188, 1188, 1188,  514,  510, 1188,  508,  507,  505,
      503,  500,  498,  497, 1188,  494,  492, 1188,  488,  485,

      484, 1188,  483, 1188, 1188, 1188,  480,  479,  478, 1188,
     1188, 1189, 1189, 1189, 1189,  474,  466,  463,  459,  443,
      442,  438,  437,  433,  432, 1189,  418, 1189, 1189, 1189,
      412,  407, 1189,  403, 1189, 1189, 1189,  395,  394,  391,
      382, 1189, 1190, 1190, 1190, 1190,  379,  376, 1190,  374,
      371,  363,  337,  336,  333,  331,  330,  320,  318,  311,
      310,  307,  306, 1190,  296, 1190, 1190, 1190,  293,  292,
      288,  284, 1190, 1191, 1191,  283, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1192,  280,  276,  275,  272,
      267, 1192,  236, 1192, 1192, 1192, 1192, 1192,  222,  221,
     1192, 1192, 1192, 1192, 1192, 1192,  220,  216,  215,  211,
     1192, 1193, 1193,  206, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1194, 1194,  203,  195,  192,  185,  167,
     1194,  163, 1194, 1194, 1194, 1194, 1194,  159, 1194, 1194,
     1194, 1194, 1194, 1194, 1194,  150,  136,  133,  127, 1194,
     1195, 1195, 1195, 1195,  115,  111, 1195,   94,   93,   92,

       87,    8,    7,    0, 1195,    0,    0, 1195,    0,    0,
        0, 1195,    0, 1195, 1195, 1195,    0,    0,    0, 1195,
     1195, 1196, 1196, 1196, 1196,    0,    0,    0,    0, 1196,
        0,    0,    0,    0,    0, 1196,    0, 1196, 1196,    0,
        0,    0, 1196,    0, 1196, 1196, 1196,    0,    0,    0,
        0, 1196, 1197, 1197, 1197, 1197,    0,    0, 1197,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1197,    0, 1197, 1197, 1197,    0,    0,
        0,    0, 1197, 1198,    0,    0, 1198,    0,    0,    0,
        0, 1198,    0, 1198, 1198, 1198,    0,    0,    0,    0,

     1198, 1199, 1199,    0, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1200, 1200,    0, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1201, 1201,    0, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1202,    0,    0,

        0,    0,    0, 1202,    0, 1202, 1202, 1202, 1202, 1202,
        0,    0, 1202, 1202, 1202, 1202, 1202, 1202,    0,    0,
        0,    0, 1202, 1203,    0, 1203, 1203, 1203,    0,    0,
        0,    0, 1203, 1204,    0,    0, 1204,    0,    0,    0,
        0,    0,    0,    0,    0, 1204,    0,    0,    0, 1204,
        0,    0,    0,    0, 1204,    0, 1204, 1204, 1204,    0,
        0,    0,    0, 1204, 1205,    0, 1205, 1205, 1205,    0,
        0,    0,    0, 1205, 1206, 1206, 1206, 1206,    0,    0,
     1206,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1206, 1206,    0,    0,    0, 1206,    0, 1206, 1206, 1206,

        0,    0,    0,    0, 1206, 1207, 1207, 1207, 1207,    0,
        0, 1207,    0,    0,    0,    0,    0,    0,    0, 1207,
        0,    0, 1207,    0,    0,    0, 1207,    0, 1207, 1207,
     1207,    0,    0,    0, 1207, 1207, 1208, 1208, 1208, 1208,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1208,    0, 1208, 1208,    0,    0,    0, 1208,    0, 1208,
     1208, 1208,    0,    0,    0,    0, 1208, 1209, 1209, 1209,
     1209,    0,    0, 1209,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1209,    0,
     1209, 1209, 1209,    0,    0,    0,    0, 1209, 1210,    0,

     1210, 1210, 1210,    0,    0,    0,    0, 1210, 1211,    0,
     1211,    0,    0,    0,    0, 1211,    0, 1211, 1211, 1211,
        0,    0,    0,    0, 1211, 1212, 1212,    0, 1212,    0,
        0,    0,    0, 1212,    0, 1212, 1212, 1212,    0,    0,
        0,    0, 1212, 1213, 1213,    0, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213,    0, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213,    0, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1214,    0,    0, 1214,    0,
        0,    0,    0, 1214,    0, 1214, 1214, 1214,    0,    0,
        0,    0, 1214, 1215, 1215, 1215, 1215, 1215, 1215, 1215,

     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215,    0, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1216, 1216,    0, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216,    0, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1217, 1217,    0,
     1217,    0, 1217, 1217, 1217,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1217, 1217, 1217,    0, 1217,
     1217,    0,    0,    0,    0,    0, 1217, 1218,    0,    0,
     1218,    0,    0,    0,    0, 1218,    0, 1218, 1218, 1218,

        0,    0,    0,    0, 1218, 1219, 1219,    0, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1220, 1220,    0,
     1220,    0, 1220, 1220, 1220, 1220, 1220, 1220,    0, 1220,
     1220, 1220, 1220,    0, 1220, 1220, 1220, 1220,    0, 1220,
        0, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1221,
        0,    0, 1221,    0,    0,    0,    0, 1221,    0,    0,
        0,    0, 1221, 1221,    0, 1221,    0,    0,    0,    0,
     1221,    0, 1221, 1221, 1221, 1222, 1222,    0, 1222,    0,

     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222,    0, 1222,    0, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1223, 1223,    0,
     1223,    0, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,    0, 1223,
        0, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1224,
        0,    0, 1224,    0,    0,    0,    0, 1224,    0, 1224,
     1224, 1224,    0,    0,    0,    0, 1224, 1225, 1225,    0,
     1225, 1225, 1225, 1225, 1225, 1225,    0,    0, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,    0, 1225,

        0, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1226,
        0, 1226, 1226, 1226,    0,    0,    0,    0, 1226, 1227,
        0, 1227, 1227,    0,    0,    0, 1227,    0, 1227, 1227,
     1227,    0,    0,    0,    0, 1227, 1228,    0, 1228, 1228,
     1228,    0,    0,    0,    0, 1228, 1229,    0, 1229, 1229,
        0,    0,    0, 1229,    0, 1229, 1229, 1229,    0,    0,
        0,    0, 1229, 1230, 1230,    0, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230,    0, 1230,    0, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1231,    0,    0, 1231,    0,

        0,    0,    0, 1231,    0, 1231, 1231, 1231,    0,    0,
        0,    0, 1231, 1232, 1232,    0, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232,    0, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232,    0, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1233, 1233,    0, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233,    0, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233,    0, 1233,    0, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1234,    0, 1234,
     1234, 1234, 1234, 1234,    0,    0,    0, 1234,    0, 1234,
     1234, 1234,    0,    0,    0,    0, 1234, 1235, 1235,    0,

     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
        0, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,    0,    0,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1237, 1237, 1237,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237,    0, 1237, 1237, 1238, 1238,    0, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,

     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1239,    0,
     1239, 1239, 1239,    0,    0,    0,    0, 1239, 1240, 1240,
        0,    0,    0, 1240,    0, 1240, 1240, 1240,    0,    0,
        0,    0, 1240, 1241,    0, 1241, 1241,    0, 1241,    0,
        0,    0, 1241, 1241,    0, 1241, 1241, 1241, 1242,    0,
        0, 1242,    0,    0,    0,    0, 1242,    0, 1242, 1242,
     1242, 1243,    0,    0, 1243,    0, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,

     1243, 1243, 1243, 1244,    0, 1244, 1244, 1244,    0,    0,
        0, 1244, 1245,    0,    0,    0,    0,    0,    0,    0,
     1245,    0, 1245, 1245, 1245, 1246,    0, 1246, 1246,    0,
     1246,    0,    0,    0, 1246, 1246,    0, 1246, 1246, 1246,
     1247,    0,    0, 1247,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1247, 1247, 1247, 1247, 1247, 1248, 1248,    0, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1249,    0,

        0,    0,    0,    0, 1249,    0, 1249, 1249, 1249, 1249,
     1249,    0,    0, 1249, 1249, 1249, 1249, 1249, 1249,    0,
        0,    0,    0, 1249, 1250,    0,    0,    0,    0,    0,
     1250,    0, 1250,    0, 1250, 1250, 1250,    0,    0, 1250,
     1250, 1250, 1250, 1250, 1250,    0,    0,    0,    0, 1250,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1252,    0, 1252, 1252,    0,    0,    0, 1252,
        0, 1252, 1252, 1252,    0,    0,    0,    0, 1252, 1253,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1253,    0, 1253, 1253, 1253,    0,
        0,    0,    0, 1253, 1254, 1254, 1254, 1254,    0,    0,
     1254,    0,    0,    0,    0,    0,    0,    0, 1254,    0,
        0, 1254,    0,    0,    0, 1254,    0, 1254, 1254, 1254,
        0,    0,    0, 1254, 1254, 1255, 1255, 1255, 1255,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1255,
        0, 1255, 1255, 1255,    0,    0, 1255,    0, 1255, 1255,
     1255,    0,    0,    0,    0, 1255, 1256, 1256, 1256, 1256,
        0,    0, 1256,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 1256,    0, 1256,
     1256, 1256,    0,    0,    0,    0, 1256, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257,    0, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1258,
        0, 1258,    0,    0, 1258,    0, 1258, 1258, 1258,    0,
        0,    0,    0, 1258, 1259, 1259,    0, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1260,    0,    0,    0,

        0,    0, 1260,    0, 1260, 1260, 1260, 1260, 1260,    0,
        0, 1260, 1260, 1260, 1260, 1260, 1260,    0,    0,    0,
        0, 1260, 1261,    0,    0,    0,    0,    0, 1261,    0,
     1261,    0, 1261, 1261, 1261,    0,    0, 1261, 1261, 1261,
     1261, 1261, 1261,    0,    0,    0,    0, 1261, 1262, 1262,
        0, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1263, 1263,    0, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,

     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1264, 1264,    0,    0,    0,    0,    0, 1264,
        0, 1264, 1264, 1264, 1264, 1264,    0, 1264, 1264, 1264,
     1264, 1264, 1264, 1264,    0,    0,    0,    0, 1264, 1265,
        0,    0,    0,    0,    0, 1265,    0, 1265,    0, 1265,
     1265, 1265,    0,    0, 1265, 1265, 1265, 1265, 1265, 1265,
        0,    0,    0,    0, 1265, 1266, 1266, 1266, 1266,    0,
        0, 1266,    0,    0,    0,    0,    0,    0,    0, 1266,
        0,    0, 1266,    0,    0,    0, 1266,    0, 1266, 1266,
     1266,    0,    0,    0, 1266, 1266, 1267, 1267, 1267, 1267,

        0,    0,    0,    0, 1267,    0,    0,    0,    0,    0,
     1267,    0, 1267, 1267,    0,    0,    0, 1267,    0, 1267,
     1267, 1267,    0,    0,    0,    0, 1267, 1268, 1268, 1268,
     1268,    0,    0, 1268,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1268,    0,
     1268, 1268, 1268,    0,    0,    0,    0, 1268, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,    0, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1270,    0,    0, 1270,    0,    0,    0,    0, 1270,    0,

        0,    0,    0,    0,    0,    0, 1270,    0,    0,    0,
        0, 1270,    0, 1270, 1270, 1270,    0,    0,    0,    0,
     1270, 1271,    0,    0, 1271,    0,    0,    0,    0, 1271,
        0, 1271, 1271, 1271,    0,    0,    0,    0, 1271, 1272,
     1272,    0, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1273, 1273,    0, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,

     1273, 1273, 1273, 1274, 1274,    0, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1275,    0,    0,    0,    0,
        0, 1275,    0, 1275, 1275, 1275, 1275, 1275,    0,    0,
     1275, 1275, 1275, 1275, 1275, 1275,    0,    0,    0,    0,
     1275, 1276,    0,    0,    0,    0,    0, 1276,    0, 1276,
        0, 1276, 1276, 1276,    0,    0, 1276, 1276, 1276, 1276,
     1276, 1276,    0,    0,    0,    0, 1276, 1277,    0,    0,
     1277,    0,    0,    0,    0,    0,    0,    0,    0, 1277,

        0,    0,    0, 1277,    0,    0,    0,    0, 1277,    0,
     1277, 1277, 1277,    0,    0,    0,    0, 1277, 1278, 1278,
     1278, 1278,    0,    0, 1278,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1278, 1278,    0,    0,    0, 1278,
        0, 1278, 1278, 1278,    0,    0,    0,    0, 1278, 1279,
        0, 1279, 1279, 1279,    0,    0,    0,    0, 1279, 1280,
     1280, 1280, 1280,    0,    0, 1280,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1280, 1280,    0,    0,    0,
     1280,    0, 1280, 1280, 1280,    0,    0,    0,    0, 1280,
     1281, 1281, 1281, 1281,    0,    0, 1281,    0,    0,    0,

        0,    0,    0,    0, 1281,    0,    0, 1281,    0,    0,
        0, 1281,    0, 1281, 1281, 1281,    0,    0,    0, 1281,
     1281, 1282, 1282, 1282, 1282,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1282,    0, 1282, 1282,    0,
        0,    0, 1282,    0, 1282, 1282, 1282,    0,    0,    0,
        0, 1282, 1283, 1283, 1283, 1283,    0,    0, 1283,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1283,    0, 1283, 1283, 1283,    0,    0,
        0,    0, 1283, 1284,    0,    0,    0,    0, 1284,    0,
     1284, 1284, 1284,    0,    0,    0,    0, 1284, 1285,    0,

     1285,    0,    0,    0,    0, 1285,    0, 1285, 1285, 1285,
        0,    0,    0,    0, 1285, 1286,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1286,    0, 1286, 1286, 1286,    0,    0,    0,    0, 1286,
     1287, 1287,    0, 1287,    0,    0,    0,    0, 1287,    0,
     1287, 1287, 1287,    0,    0,    0,    0, 1287, 1288, 1288,
        0, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,    0,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288,    0, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1289,    0,    0, 1289,    0,    0,    0,    0, 1289,    0,

     1289, 1289, 1289,    0,    0,    0,    0, 1289, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,    0,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1291, 1291,    0, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291,    0, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1292,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1292,    0, 1292,
     1292, 1292,    0,    0,    0,    0, 1292, 1293,    0,    0,

     1293,    0,    0,    0,    0, 1293,    0, 1293, 1293, 1293,
        0,    0,    0,    0, 1293, 1294, 1294,    0, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1295, 1295,    0,
     1295,    0, 1295, 1295, 1295, 1295, 1295, 1295,    0, 1295,
     1295, 1295, 1295,    0, 1295, 1295, 1295, 1295,    0, 1295,
        0, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1296,
        0,    0, 1296,    0,    0,    0,    0, 1296,    0,    0,
        0,    0, 1296, 1296,    0, 1296,    0,    0,    0,    0,

     1296,    0, 1296, 1296, 1296, 1297, 1297,    0, 1297,    0,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297,    0, 1297,    0, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1298, 1298,    0,
     1298,    0, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,    0, 1298,
        0, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1299,
        0,    0, 1299,    0,    0,    0,    0, 1299,    0, 1299,
     1299, 1299,    0,    0,    0,    0, 1299, 1300, 1300,    0,
     1300, 1300, 1300, 1300, 1300, 1300,    0,    0, 1300, 1300,

     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,    0, 1300,
        0, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1301,
        0, 1301, 1301,    0,    0,    0, 1301,    0, 1301, 1301,
     1301,    0,    0,    0,    0, 1301, 1302,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1302,    0, 1302, 1302, 1302,    0,    0,    0,    0,
     1302, 1303,    0, 1303, 1303,    0,    0,    0, 1303,    0,
     1303, 1303, 1303,    0,    0,    0,    0, 1303, 1304,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1304,    0, 1304, 1304, 1304,    0,    0,

        0,    0, 1304, 1305, 1305,    0, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305,    0, 1305,    0, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1306,    0,    0, 1306,    0,
        0,    0,    0, 1306,    0, 1306, 1306, 1306,    0,    0,
        0,    0, 1306, 1307, 1307,    0, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307,    0, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307,    0, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1308, 1308,    0, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308,    0, 1308, 1308, 1308,

     1308, 1308, 1308, 1308, 1308, 1308,    0, 1308,    0, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1310,    0, 1310,
     1310, 1310, 1310, 1310,    0,    0,    0, 1310,    0, 1310,
     1310, 1310,    0,    0,    0,    0, 1310, 1311,    0,    0,
        0,    0, 1311,    0, 1311, 1311, 1311,    0,    0,    0,
        0, 1311, 1312, 1312,    0, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312,    0, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313,    0,    0, 1313, 1313, 1313, 1313, 1313,

     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1314, 1314,    0,    0,
        0, 1314,    0, 1314, 1314, 1314,    0,    0,    0,    0,
     1314, 1315, 1315,    0, 1315, 1315, 1315, 1315,    0, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1316, 1316,    0, 1316,    0,    0,    0,
        0, 1316,    0, 1316, 1316, 1316, 1317,    0, 1317, 1317,
        0, 1317,    0,    0,    0, 1317, 1317,    0, 1317, 1317,
     1317, 1318,    0,    0, 1318,    0, 1318, 1318, 1318, 1318,

     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1319, 1319,    0, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1320,    0,    0, 1320,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1320,    0, 1320, 1320,
     1320, 1322,    0,    0, 1322,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1322,    0, 1322, 1322, 1322, 1323, 1323,    0,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323,    0, 1323, 1323, 1324,
        0,    0,    0,    0,    0,    0,    0, 1324,    0, 1324,
     1324, 1324, 1326,    0,    0, 1326,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1326, 1326, 1326, 1326, 1326, 1327,    0,
        0,    0,    0,    0, 1327,    0, 1327, 1327, 1327, 1327,
     1327,    0,    0, 1327, 1327, 1327, 1327, 1327, 1327,    0,

        0,    0,    0, 1327, 1328,    0,    0,    0,    0,    0,
     1328,    0, 1328, 1328, 1328, 1328, 1328,    0,    0, 1328,
     1328, 1328, 1328, 1328, 1328,    0,    0,    0,    0, 1328,
     1329,    0, 1329, 1329, 1329,    0,    0,    0,    0, 1329,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1331,    0, 1331,    0,    0, 1331,    0, 1331,
     1331, 1331,    0,    0,    0,    0, 1331, 1332,    0,    0,
        0,    0,    0, 1332,    0, 1332, 1332, 1332, 1332, 1332,

        0,    0, 1332, 1332, 1332, 1332, 1332, 1332,    0,    0,
        0,    0, 1332, 1333,    0,    0,    0,    0,    0, 1333,
        0, 1333, 1333, 1333, 1333, 1333,    0,    0, 1333, 1333,
     1333, 1333, 1333, 1333,    0,    0,    0,    0, 1333, 1334,
     1334,    0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1335, 1335,    0,    0,    0,    0,    0, 1335,    0,
     1335, 1335, 1335, 1335, 1335,    0, 1335, 1335, 1335, 1335,
     1335, 1335, 1335,    0,    0,    0,    0, 1335, 1336, 1336,

        0,    0,    0,    0,    0, 1336,    0, 1336, 1336, 1336,
     1336, 1336,    0, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
        0,    0,    0,    0, 1336, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1338,    0,    0,
     1338,    0,    0,    0,    0, 1338,    0,    0,    0,    0,
        0,    0,    0, 1338,    0,    0,    0,    0, 1338,    0,
     1338, 1338, 1338,    0,    0,    0,    0, 1338, 1339,    0,
        0,    0,    0,    0, 1339,    0, 1339, 1339, 1339, 1339,

     1339,    0,    0, 1339, 1339, 1339, 1339, 1339, 1339,    0,
        0,    0,    0, 1339, 1340,    0,    0,    0,    0,    0,
     1340,    0, 1340, 1340, 1340, 1340, 1340,    0,    0, 1340,
     1340, 1340, 1340, 1340, 1340,    0,    0,    0,    0, 1340,
     1341, 1341, 1341, 1341,    0,    0, 1341,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1341, 1341,    0,    0,
        0, 1341,    0, 1341, 1341, 1341,    0,    0,    0,    0,
     1341, 1342, 1342, 1342, 1342,    0,    0, 1342,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1342,    0,
        0,    0, 1342,    0, 1342, 1342, 1342,    0,    0,    0,

        0, 1342, 1343, 1343, 1343, 1343,    0,    0, 1343,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1343, 1343,
        0,    0,    0, 1343,    0, 1343, 1343, 1343,    0,    0,
        0,    0, 1343, 1344,    0,    0,    0,    0, 1344,    0,
     1344, 1344, 1344,    0,    0,    0,    0, 1344, 1345,    0,
     1345, 1345, 1345,    0,    0,    0,    0, 1345, 1346,    0,
     1346,    0,    0,    0,    0, 1346,    0, 1346, 1346, 1346,
        0,    0,    0,    0, 1346, 1347,    0, 1347, 1347, 1347,
        0,    0,    0,    0, 1347, 1348,    0,    0,    0,    0,
     1348,    0, 1348, 1348, 1348,    0,    0,    0,    0, 1348,

     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349,    0, 1349, 1349,
     1349, 1349,    0, 1349,    0,    0, 1349, 1349, 1349, 1349,
     1349, 1349, 1350,    0, 1350, 1350, 1350,    0,    0,    0,
        0, 1350, 1351,    0, 1351, 1351, 1351,    0,    0,    0,
        0, 1351, 1353,    0, 1353, 1353, 1353, 1353, 1353,    0,
        0,    0, 1353,    0, 1353, 1353, 1353,    0,    0,    0,
        0, 1353, 1354, 1354,    0, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,

     1354, 1354, 1354, 1354, 1355,    0,    0, 1355,    0,    0,
        0,    0, 1355,    0, 1355, 1355, 1355, 1356,    0, 1356,
        0, 1356, 1356,    0, 1356,    0,    0,    0, 1356, 1356,
        0, 1356, 1356, 1356, 1357, 1357,    0, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1359,    0,    0, 1359,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1359,    0, 1359,
     1359, 1359, 1360, 1360,    0, 1360, 1360, 1360, 1360, 1360,

     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1361, 1361, 1361, 1361, 1361, 1362,
        0,    0, 1362,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1362, 1362, 1362, 1362, 1362, 1363, 1363,    0, 1363,    0,
        0,    0,    0,    0,    0,    0, 1363,    0, 1363, 1363,
        0, 1363, 1363,    0,    0, 1363, 1363,    0, 1363, 1363,
     1363,    0, 1363, 1364,    0,    0,    0,    0,    0, 1364,
        0, 1364, 1364, 1364, 1364, 1364,    0,    0, 1364, 1364,

     1364, 1364, 1364, 1364,    0,    0,    0,    0, 1364, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1366,    0,    0,    0,    0,    0, 1366,    0, 1366,
     1366, 1366, 1366, 1366,    0,    0, 1366, 1366, 1366, 1366,
     1366, 1366,    0,    0,    0,    0, 1366, 1367, 1367,    0,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1368,

     1368,    0,    0,    0,    0,    0, 1368,    0, 1368, 1368,
     1368, 1368, 1368,    0, 1368, 1368, 1368, 1368, 1368, 1368,
     1368,    0,    0,    0,    0, 1368, 1369,    0,    0,    0,
        0,    0, 1369,    0, 1369, 1369, 1369, 1369, 1369,    0,
        0, 1369, 1369, 1369, 1369, 1369, 1369,    0,    0,    0,
        0, 1369, 1370,    0, 1370, 1370, 1370,    0,    0,    0,
        0, 1370, 1371, 1371, 1371, 1371,    0,    0, 1371,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1371, 1371,
        0,    0,    0, 1371,    0, 1371, 1371, 1371,    0,    0,
        0,    0, 1371, 1372, 1372, 1372, 1372,    0,    0, 1372,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1372,    0,    0,    0, 1372,    0, 1372, 1372, 1372,    0,
        0,    0,    0, 1372, 1373,    0, 1373,    0,    0,    0,
        0, 1373,    0, 1373, 1373, 1373,    0,    0,    0,    0,
     1373, 1374,    0,    0,    0,    0, 1374,    0, 1374, 1374,
     1374,    0,    0,    0,    0, 1374, 1375, 1375,    0, 1375,
        0,    0,    0,    0, 1375,    0, 1375, 1375, 1375, 1376,
     1376,    0, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,

     1376, 1377, 1377, 1377, 1377,    0,    0, 1377,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1377, 1377,    0,
        0,    0, 1377,    0, 1377, 1377, 1377,    0,    0,    0,
        0, 1377, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,    0,
     1378, 1378, 1378, 1378,    0, 1378,    0, 1378,    0, 1378,
     1378, 1378, 1378, 1378, 1379, 1379,    0, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380, 1380,

     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380,    0, 1380, 1380, 1380, 1380,    0, 1380,
        0,    0,    0, 1380, 1380, 1380, 1380, 1380, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381,    0, 1381, 1381, 1381, 1381,
        0, 1381,    0,    0,    0, 1381, 1381, 1381, 1381, 1381,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382,    0, 1382, 1382,
     1382, 1382,    0, 1382,    0,    0,    0, 1382, 1382, 1382,
     1382, 1382, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,

     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,    0,
     1383, 1383, 1383, 1383,    0, 1383,    0,    0,    0, 1383,
     1383, 1383, 1383, 1383, 1384, 1384,    0, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,

     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2017 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <QFile>
#include <QStack>
#include <QRegExp>
#include <QVector>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <cite.h>
#include <condparser.h>
#include <config.h>
#include <default_args.h>
#include <doxy_globals.h>
#include <entry.h>
#include <formula.h>
#include <index.h>
#include <language.h>
#include <membergroup.h>
#include <message.h>
#include <outputlist.h>
#include <parse_base.h>
#include <parse_cstyle.h>
#include <parse_md.h>
#include <util.h>

#define YY_NO_INPUT 1
#define YY_NEVER_INTERACTIVE 1

// forward declarations
static bool handleBrief(const QString &);
static bool handleFn(const QString &);
static bool handleDef(const QString &);
static bool handleOverload(const QString &);
static bool handleEnum(const QString &);
static bool handleDefGroup(const QString &);
static bool handleAddToGroup(const QString &);
static bool handleWeakGroup(const QString &);
static bool handleNamespace(const QString &);
static bool handlePackage(const QString &);
static bool handleClass(const QString &);
static bool handleHeaderFile(const QString &);
static bool handleProtocol(const QString &);
static bool handleCategory(const QString &);
static bool handleUnion(const QString &);
static bool handleStruct(const QString &);
static bool handleInterface(const QString &);
static bool handleIdlException(const QString &);
static bool handlePage(const QString &);
static bool handleMainpage(const QString &);
static bool handleFile(const QString &);
static bool handleDir(const QString &);
static bool handleExample(const QString &);
static bool handleDetails(const QString &);
static bool handleName(const QString &);
static bool handleTodo(const QString &);
static bool handleTest(const QString &);
static bool handleBug(const QString &);
static bool handleSubpage(const QString &s);
static bool handleDeprecated(const QString &);
static bool handleXRefItem(const QString &);
static bool handleRelated(const QString &);
static bool handleRelatedAlso(const QString &);
static bool handleMemberOf(const QString &);
static bool handleRefItem(const QString &);
static bool handleSection(const QString &);
static bool handleAnchor(const QString &);
static bool handleCite(const QString &);
static bool handleFormatBlock(const QString &);
static bool handleAddIndex(const QString &);
static bool handleIf(const QString &);
static bool handleIfNot(const QString &);
static bool handleElseIf(const QString &);
static bool handleElse(const QString &);
static bool handleEndIf(const QString &);
static bool handleIngroup(const QString &);
static bool handleNoSubGrouping(const QString &);
static bool handleShowInitializer(const QString &);
static bool handleHideInitializer(const QString &);
static bool handleCallgraph(const QString &);
static bool handleHideCallgraph(const QString &);
static bool handleCallergraph(const QString &);
static bool handleHideCallergraph(const QString &);
static bool handleInternal(const QString &);
static bool handleLineBr(const QString &);
static bool handleStatic(const QString &);
static bool handlePure(const QString &);
static bool handlePrivate(const QString &);
static bool handlePrivateSection(const QString &);
static bool handleProtected(const QString &);
static bool handleProtectedSection(const QString &);
static bool handlePublic(const QString &s);
static bool handlePublicSection(const QString &s);
static bool handleToc(const QString &s);
static bool handleInherit(const QString &);
static bool handleExtends(const QString &);
static bool handleCopyDoc(const QString &);
static bool handleCopyBrief(const QString &);
static bool handleCopyDetails(const QString &);
static bool handleParBlock(const QString &);
static bool handleEndParBlock(const QString &);
static void handleGuard(const QString &expr);
static bool handleParam(const QString &);
static bool handleRetval(const QString &);

static void checkFormula();

using DocCmdFunc = bool (*)(const QString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            false },
  { "short",           &handleBrief,            false },
  { "fn",              &handleFn,               false },
  { "var",             &handleFn,               false },
  { "typedef",         &handleFn,               false },
  { "property",        &handleFn,               false },
  { "def",             &handleDef,              false },
  { "overload",        &handleOverload,         false },
  { "enum",            &handleEnum,             false },
  { "defgroup",        &handleDefGroup,         false },
  { "group",           &handleDefGroup,         false },
  { "addtogroup",      &handleAddToGroup,       false },
  { "weakgroup",       &handleWeakGroup,        false },
  { "namespace",       &handleNamespace,        false },
  { "package",         &handlePackage,          false },
  { "class",           &handleClass,            false },
  { "headerfile",      &handleHeaderFile,       false },
  { "protocol",        &handleProtocol,         false },
  { "category",        &handleCategory,         false },
  { "union",           &handleUnion,            false },
  { "struct",          &handleStruct,           false },
  { "interface",       &handleInterface,        false },
  { "idlexcept",       &handleIdlException,     false },
  { "page",            &handlePage,             false },
  { "mainpage",        &handleMainpage,         false },
  { "file",            &handleFile,             false },
  { "dir",             &handleDir,              false },
  { "example",         &handleExample,          false },
  { "details",         &handleDetails,          true  },
  { "name",            &handleName,             false },
  { "todo",            &handleTodo,             false }, // end brief will be done differently
  { "test",            &handleTest,             false }, // end brief will be done differently
  { "bug",             &handleBug,              false }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       false }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         false }, // end brief will be done differently
  { "related",         &handleRelated,          true  },
  { "relates",         &handleRelated,          true  },
  { "relatedalso",     &handleRelatedAlso,      true  },
  { "relatesalso",     &handleRelatedAlso,      true  },
  { "parblock",        &handleParBlock,         true  },
  { "endparblock",     &handleEndParBlock,      true  },
  { "refitem",         &handleRefItem,          true  },
  { "cite",            &handleCite,             false },
  { "subpage",         &handleSubpage,          true  },
  { "section",         &handleSection,          true  },
  { "subsection",      &handleSection,          true  },
  { "subsubsection",   &handleSection,          true  },
  { "paragraph",       &handleSection,          true  },
  { "anchor",          &handleAnchor,           true  },
  { "verbatim",        &handleFormatBlock,      true  },
  { "latexonly",       &handleFormatBlock,      false },
  { "htmlonly",        &handleFormatBlock,      false },
  { "xmlonly",         &handleFormatBlock,      false },
  { "docbookonly",     &handleFormatBlock,      false },
  { "rtfonly",         &handleFormatBlock,      false },
  { "manonly",         &handleFormatBlock,      false },
  { "dot",             &handleFormatBlock,      true  },
  { "msc",             &handleFormatBlock,      true  },
  { "startuml",        &handleFormatBlock,      true  },
  { "code",            &handleFormatBlock,      true  },
  { "addindex",        &handleAddIndex,         false },
  { "if",              &handleIf,               false },
  { "ifnot",           &handleIfNot,            false },
  { "elseif",          &handleElseIf,           false },
  { "else",            &handleElse,             false },
  { "endif",           &handleEndIf,            false },
  { "ingroup",         &handleIngroup,          false },
  { "nosubgrouping",   &handleNoSubGrouping,    false },
  { "showinitializer", &handleShowInitializer,  false },
  { "hideinitializer", &handleHideInitializer,  false },
  { "callgraph",       &handleCallgraph,        false },
  { "hidecallgraph",   &handleHideCallgraph,    false },
  { "callergraph",     &handleCallergraph,      false },
  { "hidecallergraph", &handleHideCallergraph,  false },
  { "internal",        &handleInternal,         true  },
  { "_linebr",         &handleLineBr,           false },
  { "static",          &handleStatic,           false },
  { "pure",            &handlePure,             false },
  { "private",         &handlePrivate,          false },
  { "privatesection",  &handlePrivateSection,   false },
  { "protected",       &handleProtected,        false },
  { "protectedsection",&handleProtectedSection, false },
  { "public",          &handlePublic,           false },
  { "publicsection",   &handlePublicSection,    false },
  { "tableofcontents", &handleToc,              false },
  { "inherit",         &handleInherit,          true  },
  { "extends",         &handleExtends,          true  },
  { "implements",      &handleExtends,          true  },
  { "memberof",        &handleMemberOf,         true  },
  { "arg",             0,                       true  },
  { "attention",       0,                       true  },
  { "author",          0,                       true  },
  { "authors",         0,                       true  },
  { "copydoc",         &handleCopyDoc,          true  },
  { "copybrief",       &handleCopyBrief,        false },
  { "copydetails",     &handleCopyDetails,      true  },
  { "copyright",       0,                       true  },
  { "date",            0,                       true  },
  { "dotfile",         0,                       true  },
  { "htmlinclude",     0,                       false },
  { "image",           0,                       true  },
  { "include",         0,                       true  },
  { "includelineno",   0,                       true  },
  { "invariant",       0,                       true  },
  { "latexinclude",    0,                       false },
  { "li",              0,                       true  },
  { "line",            0,                       true  },
  { "note",            0,                       true  },
  { "par",             0,                       true  },
  { "param",           &handleParam,            true  },
  { "tparam",          0,                       true  },
  { "post",            0,                       true  },
  { "pre",             0,                       true  },
  { "remark",          0,                       true  },
  { "remarks",         0,                       true  },
  { "result",          0,                       true  },
  { "return",          0,                       true  },
  { "returns",         0,                       true  },
  { "exception",       0,                       true  },
  { "retval",          &handleRetval,           true  },
  { "sa",              0,                       true  },
  { "see",             0,                       true  },
  { "since",           0,                       true  },
  { "throw",           0,                       true  },
  { "throws",          0,                       true  },
  { "until",           0,                       true  },
  { "verbinclude",     0,                       false },
  { "version",         0,                       true  },
  { "warning",         0,                       true  },
  { 0, 0, false }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a specific handler function
 */
class DocCmdMapper
{
 public:
   struct Cmd {
      DocCmdFunc func;
      bool endsBrief;
   };

   /** maps a command name to a handler function */
   static Cmd *map(const QString &name) {
      return instance()->find(name);
   }

   /** release the singleton */
   static void freeInstance() {
      delete s_instance;
      s_instance = 0;
   }

  private:
    static DocCmdMapper *instance() {
      if (s_instance == 0) {
         s_instance = new DocCmdMapper;
      }
      return s_instance;
   }

   DocCmdMapper() {
      DocCmdMap *p = docCmdMap;

      while (p->cmdName) {
         if (m_map.contains(p->cmdName)) {
            err("DocCmdMapper: command %s already added\n", p->cmdName);
            Doxy_Work::stopDoxyPress();
         }

         Cmd *cmd       = new Cmd;
         cmd->func      = p->handler;
         cmd->endsBrief = p->endsBrief;

         m_map.insert(p->cmdName, cmd);
         p++;
      }
   }

   Cmd *find(const QString &name) {
      return m_map.value(name);
   }

   QHash<QString, Cmd *> m_map;
   static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance = 0;

#define YY_NEVER_INTERACTIVE 1

enum XRefKind {
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext {
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType {
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
 public:
   GuardedSection(bool enabled, bool parentVisible)
      : m_enabled(enabled), m_parentVisible(parentVisible) {}
   bool isEnabled() const {
      return m_enabled;
   }
   bool parentVisible() const {
      return m_parentVisible;
   }

 private:
   bool m_enabled;
   bool m_parentVisible;
};

void openGroup(QSharedPointer<Entry> e, const QString &file, int line);
void closeGroup(QSharedPointer<Entry> e, const QString &file, int line, bool foundInline = false);
void initGroupInfo(QSharedPointer<Entry> e);
static void groupAddDocs(QSharedPointer<Entry> e);

static ParserInterface *langParser;          // the language parser that is calling us
static QString          inputString;         // input string
static int              inputPosition;       // read pointer
static int              prevPosition;
static char *           s_bufferPosition;

static QString          yyFileName;          // file name that is read from
static int              yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QString          formulaText;         // Running text of a formula
static QString          formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QString         *pOutputString;       // pointer to string to which the output is appended
static QString          outputXRef;          // temp argument of todo/test/../xrefitem commands
static QString          blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         //
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QString          functionProto;       // function prototype

static QStack<GuardedSection *> guards;      // tracks nested conditional sections (if,ifnot,..)
static QSharedPointer<Entry>  current;       // working entry

static bool             s_needNewEntry;
static int              s_docBlockContext;

static QString          s_sectionLabel;
static QString          s_sectionTitle;
static int              s_sectionLevel;
static QString          xrefItemKey;
static QString          newXRefItemKey;
static QString          xrefItemTitle;
static QString          xrefListTitle;
static Protection       protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             s_parseMore;

static int              s_condCount;
static int              s_commentCount;
static QString          s_spaceBeforeCmd;
static QString          s_spaceBeforeIf;
static QString          s_copyDocArg;
static QString          s_guardExpr;
static int              s_roundCount;
static bool             s_insideParBlock;

static QStack<QSharedPointer<Grouping>> s_autoGroupStack;

static int              s_memberGroupId = DOX_NOGROUP;
static QString          s_memberGroupHeader;
static QString          s_memberGroupDocs;
static QString          s_memberGroupRelates;
static QString          s_compoundName;

static bool             s_internalDocs;
static bool             s_processInternalDocs = false;

static void initParser()
{
   s_sectionLabel.resize(0);
   s_sectionTitle.resize(0);
   s_memberGroupHeader.resize(0);

   s_insideParBlock = false;
   s_internalDocs   = Config::getBool("internal-docs");
}

static bool getDocSectionName(int s)
{
  switch(s) {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return true;
    default:
      return false;
  }
}

static bool makeStructuralIndicator(Entry::Sections s)
{
  if (getDocSectionName(current->section)) {
    return true;

  } else {
    s_needNewEntry     = true;
    current->section   = s;
    current->fileName  = yyFileName;
    current->startLine = yyLineNr;
    return false;
  }
}
static void lineCount()
{
  for (const char *c = commentscanYYtext ; *c ; ++c) {
    yyLineNr += (*c == '\n') ;
  }
}

static QString stripQuotes(const QString &s)
{
   QString name = s;

   if (name.isEmpty()) {
      return name;
   }

   if (name.at(0) == '"' && name.at(name.length() - 1) == '"') {
      name = name.mid(1, name.length() - 2);
   }

   return name;
}

static void addXRefItem(const QString &listName, const QString &itemTitle, const QString &listTitle, bool append)
{
   QSharedPointer<Entry> docEntry = current; // inBody && previous ? previous : current;

   if (listName.isEmpty()) {
      return;
   }

   auto refList = Doxy_Globals::xrefLists.find(listName);

   if (refList == Doxy_Globals::xrefLists.end()) {
      // new list
      Doxy_Globals::xrefLists.insert(listName, RefList(listName, listTitle, itemTitle));
      refList = Doxy_Globals::xrefLists.find(listName);
   }

   ListItemInfo *listItem;

   for (auto &item : docEntry->m_specialLists) {
      listItem = &item;

      if (listItem->type == listName) {
         break;
      }
   }

   if (listItem && append) {
      // already found item of same type just before this one

      RefItem *item = refList->getRefItem(listItem->itemId);
      assert(item != 0);

      item->text += " <p>";

      if (Doxy_Globals::markdownSupport) {
         item->text += processMarkdown(yyFileName, yyLineNr, current, outputXRef);
      } else {
         item->text += outputXRef;
      }

   } else {
      // new item

      int itemId  = refList->addRefItem();

      // if we have already an item from the same list type (e.g. a second @todo)
      // in the same Entry (i.e. lii!=0) then we reuse its link anchor.

      QString anchorLabel = QString("_%1%2").arg(listName).arg(itemId, 6, 10, QChar('0'));

      RefItem *item = refList->getRefItem(itemId);
      assert(item != 0);

      if (Doxy_Globals::markdownSupport) {
         item->text = processMarkdown(yyFileName, yyLineNr, current, outputXRef);
      } else {
         item->text = outputXRef;
      }

      item->listAnchor = anchorLabel;
      docEntry->addSpecialListItem(listName, itemId);

      QString cmdString = QString("\\xrefitem %1 %2.").arg(listName).arg(itemId);

      if (inBody) {
         docEntry->inbodyDocs += cmdString;
      } else {
         docEntry->doc += cmdString;
      }

      QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorLabel);

      if (si) {
         if (si->lineNr != -1) {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s, line %d)",
                  csPrintable(anchorLabel), csPrintable(si->fileName), si->lineNr);

         } else {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s)",
                  csPrintable(anchorLabel), csPrintable(si->fileName));
         }

      } else {
         si = QMakeShared<SectionInfo>(listName, yyLineNr, anchorLabel, s_sectionTitle, SectionInfo::Anchor, s_sectionLevel);
         Doxy_Globals::sectionDict.insert(anchorLabel, si);
         docEntry->m_anchors.append(*si);
      }
   }

   outputXRef.resize(0);
}

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QString addFormula()
{
   QString formLabel;
   QString fText = formulaText.simplified();

   auto f = Doxy_Globals::formulaDict.find(fText);

   if (f == Doxy_Globals::formulaDict.end()) {
      Formula temp = Formula(fText);

      Doxy_Globals::formulaList.append(temp);
      Doxy_Globals::formulaDict.insert(fText, temp);

      formLabel = QString("\\form#%1").arg(temp.getId());

      Doxy_Globals::formulaNameDict.insert(formLabel, temp);
      f = Doxy_Globals::formulaDict.find(fText);

   } else {
      formLabel = QString("\\form#%1").arg(f->getId());

   }

   for (int i = 0; i < formulaNewLines; i++) {
      formLabel += "@_fakenl";   // add fake newlines to
   }

   // keep the warnings correctly aligned
   return formLabel;
}

static void checkFormula();

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level >= 0 && level < 5) {
      return (SectionInfo::SectionType)level;
   }

   return SectionInfo::Anchor;
}

static void addSection()
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(s_sectionLabel);

   if (si) {
      if (si->lineNr != -1) {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName), si->lineNr);

      } else {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName));
      }

   } else {
      // create a new section element
      s_sectionTitle += QString::fromUtf8(commentscanYYtext).trimmed();

      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, s_sectionLabel, s_sectionTitle,
                  sectionLevelToType(s_sectionLevel), s_sectionLevel);

      // add section to this entry
      current->m_anchors.append(*si);

      // add section to the global dictionary
      Doxy_Globals::sectionDict.insert(s_sectionLabel, si);

      // for a section the si->fileName is the physical file name. this will be replaced with the section name
      // in doctokenizer processSection()
   }
}

static void addCite()
{
   QString text = QString::fromUtf8(commentscanYYtext);
   Doxy_Globals::citeDict.insert(text);
}

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QString &s)
{
   uint len = s.length();

   int i = len - 1;
   QChar c;

   while (i >= 0 && ((c = s.at(i)) == ' ' || c == '\t' || c == '\r')) {
      i--;
   }

   if (i != len - 1) {
      // string up to and including char at pos i and \0 terminator
      s.resize(i + 2);
   }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
   bool xrefAppendToPrev = xrefAppendFlag;

   // determine append flag for the next item (i.e. the end of this item)
   xrefAppendFlag = ! inBody &&
                    inContext == OutputXRef && ctx == OutputXRef &&    // two consecutive xref items
                    newXRefKind == xrefKind &&                         // of the same kind
                    (xrefKind != XRef_Item ||
                    newXRefItemKey == xrefItemKey);                    // with the same key if \xrefitem

   if (inContext == OutputXRef) {

      // end of XRef section => add the item
      // See if we can append this new xref item to the previous one.
      // We know this at the start of the next item of the same
      // type and need to remember this until the end of that item.

    switch(xrefKind) {
         case XRef_Todo:
            addXRefItem("todo", theTranslator->trTodo(), theTranslator->trTodoList(), xrefAppendToPrev);
            break;

         case XRef_Test:
            addXRefItem("test", theTranslator->trTest(), theTranslator->trTestList(), xrefAppendToPrev);
            break;

         case XRef_Bug:
            addXRefItem("bug", theTranslator->trBug(), theTranslator->trBugList(), xrefAppendToPrev);
            break;

         case XRef_Deprecated:
            addXRefItem("deprecated", theTranslator->trDeprecated(), theTranslator->trDeprecatedList(), xrefAppendToPrev);
            break;

         case XRef_Item:  // user defined list
            addXRefItem(xrefItemKey, xrefItemTitle, xrefListTitle, xrefAppendToPrev);
            break;

         case XRef_None:
            assert(0);
            break;
      }
   }

  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;

   if (inContext != OutputXRef && inBody) {
      inContext = OutputInbody;
   }

  switch(inContext) {
      case OutputDoc:
         if (oldContext != inContext) {
            stripTrailingWhiteSpace(current->doc);

            if (current->docFile.isEmpty()) {
               current->docFile = yyFileName;
               current->docLine = yyLineNr;
            }
         }
         pOutputString = &current->doc;
         break;

      case OutputBrief:
         if (oldContext != inContext) {

            if (current->briefFile.isEmpty()) {
               current->briefFile = yyFileName;
               current->briefLine = yyLineNr;
            }
         }

         if (current->brief.trimmed().isEmpty())  {
            // we only want one brief description even if multiple are given
            pOutputString = &current->brief;

         } else {
            pOutputString = &current->doc;
            inContext = OutputDoc;             // need to switch to detailed docs, see bug 631380
         }
         break;

      case OutputXRef:
         pOutputString = &outputXRef;
         // first item found, so can not append to previous
         // xrefAppendFlag = false;
         break;

      case OutputInbody:
         pOutputString = &current->inbodyDocs;
         break;
   }
}

static void addAnchor(const QString &anchorName)
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorName);

   if (si) {
      // anchor name already exists
      si->dupAnchor_cnt++;

   } else {
      // title is empty, level is zero
      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, anchorName, QString(""), SectionInfo::Anchor, 0);
      si->dupAnchor_fName = yyFileName;

      Doxy_Globals::sectionDict.insert(anchorName, si);
      current->m_anchors.append(*si);
   }
}

// add a string in the output
static inline void addOutput(const QString &s)
{
   *pOutputString += s;
}

static inline void addOutput(QChar s)
{
   *pOutputString += s;
}

static void endBrief(bool addToOutput = true)
{
   if (! current->brief.trimmed().isEmpty()) {
      // only go to the detailed description if we have
      // found some brief description and not just whitespace

      briefEndsAtDot = false;
      setOutput(OutputDoc);

      if (addToOutput) {
         QString text = QString::fromUtf8(commentscanYYtext);
         addOutput(text);
      }
   }
}

static void handleGuard(const QString &expr);

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   s_bufferPosition = buf;

   prevPosition = inputPosition;
   int c = 0;

   while (inputString[inputPosition] != 0) {

      QString tmp1    = inputString.at(inputPosition);
      QByteArray tmp2 = tmp1.toUtf8();

      if (c + tmp2.length() >= max_size)  {
         // buffer is full
         break;
      }

      c += tmp2.length();

      for (auto letters : tmp2) {
         *buf = letters;
          buf++;
      }

      inputPosition++;
   }

   return c;
}

/* start command character */
/* comment parsing states */

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define ParamArg1 13
#define EnumDocArg1 14
#define NameSpaceDocArg1 15
#define PackageDocArg1 16
#define GroupDocArg1 17
#define GroupDocArg2 18
#define SectionLabel 19
#define SectionTitle 20
#define SubpageLabel 21
#define SubpageTitle 22
#define FormatBlock 23
#define LineParam 24
#define GuardParam 25
#define GuardParamEnd 26
#define SkipGuardedSection 27
#define SkipInternal 28
#define NameParam 29
#define InGroupParam 30
#define FnParam 31
#define OverloadParam 32
#define InheritParam 33
#define ExtendsParam 34
#define ReadFormulaShort 35
#define ReadFormulaLong 36
#define AnchorLabel 37
#define HtmlComment 38
#define SkipLang 39
#define CiteLabel 40
#define CopyDoc 41
#define GuardExpr 42

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  /* What can happen while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxy\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1150 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9757 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      // mail address
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // quoted text
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      // directory (or chain of commands)
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
{
      // HTML command ends a brief description
      setOutput(OutputDoc);

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
{
      // HTML command that ends a brief description
      if (current->lang == SrcLangExt_CSharp) {
         setOutput(OutputDoc);
      }

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      // start of a .NET XML style brief description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      setOutput(OutputBrief);
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      setOutput(OutputBrief);
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      setOutput(OutputDoc);
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // end of a brief or detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      QString tag = QString::fromUtf8(commentscanYYtext);

      int s = tag.indexOf("id=");

      if (s != -1) {
         // command has id attribute
         QChar c = tag[s + 3];

         if (c == '\'' || c == '"') {
            // valid start
            int e = tag.indexOf(c,s + 4);

            if (e != -1) {
               // found matching end

               QString id = tag.mid(s + 4, e-s-4);   // extract id
               addAnchor(id);
            }
         }
      }

      addOutput(tag);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      insidePre = true;
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      insidePre = false;
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      // RCS tag which end a brief description
      setOutput(OutputDoc);
      REJECT;
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      BEGIN(HtmlComment);
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      addOutput("\\endinternal ");

      if (! s_processInternalDocs) {
         warn(yyFileName, yyLineNr, "Found \\endinternal without matching \\internal");
      }

      s_processInternalDocs = false;
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      // might be a valid command
      // the {B}* in the front was added for bug620924

      QString text = QString::fromUtf8(commentscanYYtext);

      QString cmdName = text.trimmed().mid(1);
      DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);

      if (cmdPtr) {
         // special action is required

         int i = 0;
         while (text[i] == ' ' || text[i] == '\t') {
            i++;
         }

         s_spaceBeforeCmd = QString(text).left(i);

         if (cmdPtr->endsBrief && ! (inContext == OutputXRef && cmdName == "parblock")) {
            briefEndsAtDot = false;

            // this command forces the end of brief description
            setOutput(OutputDoc);
         }

         if (cmdPtr->func && cmdPtr->func(cmdName)) {
            // implicit split of the comment block into two entries
            // restart the next block at the start of this command

            s_parseMore = true;

            inputPosition = prevPosition + (yy_bp - s_bufferPosition);
            yyterminate();

         } else if (cmdPtr->func == nullptr) {
            // command without handler is processed later by parserdoc.cpp
            addOutput(text);
         }

      } else {
         // command not relevant
         addOutput(text);
      }
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      // escaped formula command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      // language switch command
      static const QString outputLanguage = Config::getEnum("output-language");

      QString text   = QString::fromUtf8(commentscanYYtext);
      QString langId = text.trimmed().mid(2);

      if (! langId.isEmpty() && outputLanguage.compare(langId, Qt::CaseInsensitive) != 0) {
         // enable language specific section
         BEGIN(SkipLang);
      }
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      // start of a formula with custom environment
      QString text = QString::fromUtf8(commentscanYYtext);

      formulaText = "\\begin";
      formulaEnv = text.trimmed().mid(2);

      if (formulaEnv.at(formulaEnv.length() - 1) == '{') {
         // remove trailing open brace
         formulaEnv = formulaEnv.left(formulaEnv.length() - 1);
      }

      formulaText += formulaEnv;
      formulaNewLines = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      // start of a inline formula
      formulaText     = "$";
      formulaNewLines = 0;
      BEGIN(ReadFormulaShort);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      // start of a block formula
      formulaText      = "\\[";
      formulaNewLines  = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      // begin of a group
      // langParser->handleGroupStartCommand(s_memberGroupHeader);
      openGroup(current, yyFileName, yyLineNr);
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      // end of a group
      QString text = QString::fromUtf8(commentscanYYtext);

      closeGroup(current, yyFileName, yyLineNr, true);

      s_memberGroupHeader.resize(0);
      s_parseMore    = true;
      s_needNewEntry = true;

      inputPosition = prevPosition + (yy_bp - s_bufferPosition) + text.length();
      yyterminate();
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      // escaped character
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      // normal word
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // explicit end autolist: e.g "  ."
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 29:
case 30:
YY_RULE_SETUP
{
      // start of autolist
      if (! Doxy_Globals::markdownSupport) {
         REJECT;

      } else {

         if (inContext != OutputXRef) {
            briefEndsAtDot = false;
            setOutput(OutputDoc);
         }

         QString text = QString::fromUtf8(commentscanYYtext);
         addOutput(text);
      }
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      // start of autolist
      if (inContext != OutputXRef) {
         briefEndsAtDot = false;
         setOutput(OutputDoc);
      }

      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // horizontal line (dashed)
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      // mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&mdash;");
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      // ndash
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&ndash;");
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      // numbered item
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      // . at start or in the middle of a word, or ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      // . with escaped space
      QString text = QString::fromUtf8(commentscanYYtext);

      addOutput(text[0]);
      addOutput(text[2]);
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      // . with comma such as "e.g.,"
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      // ellipsis with escaped space
      addOutput("... ");
   }
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // internal ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{
      // at least one blank line (or blank line command)

      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext == OutputXRef) {
         // see bug 613024, need to put the newlines after ending the XRef section.

         if (! s_insideParBlock) {
            setOutput(OutputDoc);
         }

         for (int i = 0; i < text.length();  ) {
            if (text[i] == '\n') {
               addOutput('\n');
               i++;

            } else if (text.mid(i) == "\\_linebr")  {
               addOutput('\n');
               i += 8;

            } else  {
               i++;
            }
         }

      } else if (inContext != OutputBrief) {

         for (int i = 0; i< text.length(); ) {
            if (text[i] == '\n') {
               addOutput('\n');
               i++;

            } else if (text.mid(i) == "\\_linebr")  {
                addOutput('\n');
                i += 8;

            } else  {
               i++;

            }
         }

         setOutput(OutputDoc);

      } else {
          // inContext == OutputBrief
          // only go to the detailed description if we have
          // found some brief description and not just whitespace

         endBrief(false);
      }

      lineCount();
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      // potential end of a JavaDoc style comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);

      if (briefEndsAtDot) {
         setOutput(OutputDoc);
         briefEndsAtDot = false;
      }
   }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{
      // newline
      addOutput('\n');
      yyLineNr++;
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      // catch-all for anything else
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 47:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      // ignore unimportant characters
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // ignore every else
   }
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 51:
YY_RULE_SETUP
{
      // end of inline formula
      formulaText += "$";
      addOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      // end of block formula
      formulaText += "\\]";
      addOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      // end of custom env formula
      formulaText += "\\end";
      formulaText += formulaEnv;
      addOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // any non-special character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text;
   }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      formulaNewLines++;
      formulaText += text[0];
      yyLineNr++;
   }
	YY_BREAK
case 56:
YY_RULE_SETUP
{
      // any othe character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text[0];
   }
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\enum");

      addOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->name = substitute(text,".", "::");
      BEGIN( Comment );
   }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\namespace");

      addOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 65:
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\package");
      addOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 68:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = substitute(removeRedundantWhiteSpace(text),".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->name = substitute(text,".","::");
      if (current->section==Entry::PROTOCOLDOC_SEC) {
         current->name+="-p";
      }

      // prepend outer scope name
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = substitute(text,".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\%s",
                  YY_START == ClassDocArg1 ? "class" : "category" );

      addOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 74:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      // second argument; include file
      QString text = QString::fromUtf8(commentscanYYtext);
      current->includeFile = text;
      BEGIN( ClassDocArg3 );
   }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addOutput('\n');

      if (text[0] == '\n')  {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 78:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 79:
YY_RULE_SETUP
{
      // third argument; include file name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->includeName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] =='\n') {
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of {def,add,weak} group commands --------- */
case 83:
YY_RULE_SETUP
{
      // group name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->name = text;

      // lastDefGroup.groupname = text;
      // lastDefGroup.pri = current->groupingPri();
      // the .html stuff is for Qt compatibility

      if (current->name.endsWith(".html")) {
         current->name = current->name.left(current->name.length()-5);
      }

      current->type.resize(0);
      BEGIN(GroupDocArg2);
   }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing group name after %s", csPrintable(current->groupDocCmd()) );

      addOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      // title (stored in type)
      QString text = QString::fromUtf8(commentscanYYtext);
      current->type += text.trimmed();
   }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if ( current->groupDocType == Entry::GROUPDOC_NORMAL && current->type.isEmpty()) {
            // defgroup requires second argument
            warn(yyFileName, yyLineNr, "Missing title after \\defgroup %s",
                  csPrintable(current->name) );
      }

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 89:
YY_RULE_SETUP
{
      // first argument; page name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->name = stripQuotes(text);
      BEGIN( PageDocArg2 );
   }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      // missing arguement
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\page");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{
      // second argument; page title
      QString text = QString::fromUtf8(commentscanYYtext);

      yyLineNr++;
      current->args = text;

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the param command ------------ */
case 94:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addOutput('\\');
      }

      addOutput(text);
   }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
      addOutput(" , ");
   }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addOutput('\\');
      }

      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ 
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{
      // no file name specfied
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
      // first argument; name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->name = stripQuotes(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 102:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      newXRefItemKey = text;
      setOutput(OutputXRef);

      BEGIN(XRefItemParam2);
   }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{
      // missing arguments
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing first argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      inContext = OutputDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
      // second argument
      QString text = QString::fromUtf8(commentscanYYtext);
      xrefItemTitle = stripQuotes(text);
      BEGIN(XRefItemParam3);
   }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing second argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      inContext = OutputDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
      // third argument
      QString text = QString::fromUtf8(commentscanYYtext);

      xrefListTitle = stripQuotes(text);
      xrefKind = XRef_Item;

      BEGIN( Comment );
   }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr,"Missing third argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      inContext = OutputDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 114:
YY_RULE_SETUP
{
      // argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->relates = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument of \\relates or \\memberof command");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 121:
YY_RULE_SETUP
{
      // first argyment
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionLabel = text;
      addOutput(text);
      s_sectionTitle.resize(0);

      BEGIN(SectionTitle);
   }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\section command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      // invalid character for section label
      warn(yyFileName, yyLineNr, "Invalid or missing section label");
      BEGIN(Comment);
   }
	YY_BREAK
case 124:
/* rule 124 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 125:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      // any character without special meaning
      QString text = QString::fromUtf8(commentscanYYtext);
      s_sectionTitle += text;
      addOutput(text);
   }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
      // unescape escaped command
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text.mid(1);
      addOutput(text);
   }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
      // unescape escaped character
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text[1];
      addOutput(text);
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      // anything else
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text;
      addOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 131:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      // we add subpage labels as a kind of "inheritance" relation to prevent
      // needing to add another list to the Entry class.

      current->extends.append(BaseInfo(text, Public, Normal));
      BEGIN(SubpageTitle);
   }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\subpage command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{
      // no title, end command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
      // add title, end of command
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
      // no title, end of command
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 136:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addAnchor(text);
      addOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\anchor command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing anchor label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 139:
/* rule 139 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // possible ends
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      if (text.mid(4) == blockName)  {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      if (blockName == "startuml")   {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      // some word
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);
   }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
   }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      // start of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);

      s_commentCount++;
      addOutput(text);
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      // end of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text);

      s_commentCount--;

      if (s_commentCount < 0 && blockName != "verbatim") {
         warn(yyFileName, yyLineNr, "Found */ without matching /* while inside a \\%s block. "
            "Perhaps there is a missing \\end%s?\n", csPrintable(blockName), csPrintable(blockName));
      }
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
{
      QString endTag = "@end" + blockName;

      if (blockName == "startuml") {
         endTag = "enduml";
      }

      warn(yyFileName, yyLineNr, "Reached end of comment while inside a @%s block, check for missing @%s tag",
                 csPrintable(blockName), csPrintable(endTag) );

      yyterminate();
   }
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 146:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr  = text;
      s_roundCount = 1;
      BEGIN(GuardExpr);
   }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
      s_roundCount++;
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
      s_roundCount--;

      if (s_roundCount == 0) {
         handleGuard(s_guardExpr);
      }
   }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{
      warn(yyFileName, yyLineNr, "Invalid expression '%s' for guard", csPrintable(s_guardExpr));
      unput(commentscanYYtext[0]);
      BEGIN(GuardParam);
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
{
      // parameter of if/ifnot guard
      QString text = QString::fromUtf8(commentscanYYtext);
      handleGuard(text);
   }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // next line is commented out due to bug620924
      // addOutput('\n');

      BEGIN( Comment );
   }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
{
      s_spaceBeforeIf.resize(0);
      BEGIN(Comment);
   }
	YY_BREAK
case 156:
YY_RULE_SETUP
{
      if (! s_spaceBeforeIf.isEmpty()) {
         // needed for 665313 in combation with bug620924

         addOutput(s_spaceBeforeIf);
      }

      s_spaceBeforeIf.resize(0);
      BEGIN(Comment);
   }
	YY_BREAK
case 157:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 158:
/* rule 158 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      guardType = Guard_IfNot;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 159:
/* rule 159 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      guardType = Guard_If;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 160:
/* rule 160 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found @endif without matching start command");

       } else {
         GuardedSection *s  = guards.pop();
         bool parentVisible = s->parentVisible();
         delete s;

         if (parentVisible) {
            enabledSectionFound = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 161:
/* rule 161 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (guards.isEmpty()) {
         warn(yyFileName, yyLineNr, "Found @else without matching start command");

      } else {

         if (! enabledSectionFound && guards.top()->parentVisible()) {
            delete guards.pop();
            guards.push(new GuardedSection(true,true));
            enabledSectionFound = true;

            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 162:
/* rule 162 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found @elseif without matching start command");

       } else {

         if (! enabledSectionFound && guards.top()->parentVisible()) {
            guardType = Guard_If;
            delete guards.pop();

            BEGIN( GuardParam );
         }
      }
   }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // addOutput('\n');
   }
	YY_BREAK
case 164:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 165:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addOutput('\n');
   }
	YY_BREAK
case 167:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 169:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount--;

      if (s_condCount < 0 )   {
         // handle conditional section around \internal, see bug607743

         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 170:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 0 ) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 171:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 1)  {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 172:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 2) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 173:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 3) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
{
      addOutput("\\endinternal ");
      BEGIN(Comment);
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle argument of name command ------- */
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
      s_memberGroupHeader+=' ';
   }
	YY_BREAK
case 179:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_memberGroupHeader += text[0];
      current->name       += text[0];
   }
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 180:
YY_RULE_SETUP
{
      // group id
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_groups.append(Grouping(text, Grouping::GROUPING_INGROUP) );
      inGroupParamFound = true;
   }
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! inGroupParamFound) {
         warn(yyFileName,yyLineNr, "Missing group name for \\ingroup command");
      }

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addOutput('\n');
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addOutput(text[0]);
   }
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (braceCount == 0) {
         if (text[0] == '\n')   {
            yyLineNr++;
         }

         addOutput('\n');
         langParser->parsePrototype(functionProto);
         BEGIN( Comment );
      }
   }
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      functionProto += ' ';
   }
	YY_BREAK
case 186:
YY_RULE_SETUP
{
      // non-special characters
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
   }
	YY_BREAK
case 187:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
      braceCount++;
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
      braceCount--;
   }
	YY_BREAK
case 189:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')  {
         yyLineNr++;
      }

      if (functionProto.trimmed().isEmpty()) {
         // plain overload command
         addOutput(theTranslator->trOverloadText());
         addOutput('\n');

      }  else   {
         // overload declaration
         makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
         langParser->parsePrototype(functionProto);
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      functionProto += ' ';
   }
	YY_BREAK
case 192:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 193:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text), Public, Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\inherit command has no argument");

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 195:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing name for \\inherit command");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 196:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text),Public,Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName,yyLineNr, "\\extends or \\implements command has no argument");

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 198:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle language specific sections ------- */
case 199:
YY_RULE_SETUP
{
      /* language switch */
      QString text = QString::fromUtf8(commentscanYYtext);
      QString langId = text.mid(2);

      if (langId.isEmpty() || Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) == 0) {
         // enable language specific section
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 200:
YY_RULE_SETUP
{
      /* any character not a *, @, backslash or new line */
   }
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
{
      /* new line in verbatim block */
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 202:
YY_RULE_SETUP
{
      /* any other character */
   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 203:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addCite();
      addOutput(text);
      BEGIN(Comment);
   }
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\cite command has no label" );

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 205:
YY_RULE_SETUP
{
      // invalid character for cite label
      warn(yyFileName,yyLineNr, "Invalid or missing cite label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addOutput('\n');

      setOutput(OutputDoc);
      addOutput("\\copydetails ");
      addOutput(s_copyDocArg);

      addOutput("\n");

      BEGIN(Comment);
   }
	YY_BREAK
case 207:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addOutput(text);
   }
	YY_BREAK
case 208:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addOutput(text);
   }
	YY_BREAK
case 209:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(ParamArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1150 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1150 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1149);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static bool handleBrief(const QString &)
{
   setOutput(OutputBrief);
   return false;
}

static bool handleFn(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   functionProto.resize(0);
   braceCount = 0;
   BEGIN(FnParam);

   return stop;
}

static bool handleDef(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::DEFINEDOC_SEC);
   functionProto.resize(0);
   BEGIN(FnParam);
   return stop;
}

static bool handleOverload(const QString &)
{
   functionProto.resize(0);
   BEGIN(OverloadParam);
   return false;
}

static bool handleEnum(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::ENUMDOC_SEC);
   BEGIN(EnumDocArg1);
   return stop;
}

static bool handleDefGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_NORMAL;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleAddToGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_ADD;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleWeakGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_WEAK;
   BEGIN( GroupDocArg1 );
   return stop;
}

static bool handleNamespace(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
   BEGIN( NameSpaceDocArg1 );
   return stop;
}

static bool handlePackage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
   BEGIN( PackageDocArg1 );
   return stop;
}

static bool handleClass(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::CLASSDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleHeaderFile(const QString &)
{
   BEGIN( ClassDocArg2 );
   return false;
}

static bool handleProtocol(const QString &)
{
   // Obj-C protocol
   bool stop = makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleCategory(const QString &)
{
   // Obj-C category
   bool stop = makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
   BEGIN( CategoryDocArg1 );
   return stop;
}

static bool handleUnion(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::UNIONDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleStruct(const QString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleInterface(const QString &)
{
  bool stop = makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleIdlException(const QString &)
{
  bool stop = makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handlePage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::PAGEDOC_SEC);
   BEGIN( PageDocArg1 );
   return stop;
}

static bool handleMainpage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);

   if (! stop) {
      current->name = "mainpage";
   }

   BEGIN( PageDocArg2 );
   return stop;
}

static bool handleFile(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::FILEDOC_SEC);

   if (! stop) {
      current->name = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleParam(const QString &)
{
  // process param and retval arguments to escape leading underscores
  // in case of markdown processing

  addOutput("@param ");
  BEGIN( ParamArg1 );

  return false;
}

static bool handleRetval(const QString &)
{
  addOutput("@retval ");
  BEGIN( ParamArg1 );

  return false;
}

static bool handleDir(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::DIRDOC_SEC);

   if (! stop) {
      current->name = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleExample(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::EXAMPLE_SEC);

   if (! stop) {
      current->name = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleDetails(const QString &)
{
   if (inContext != OutputBrief) {
      // treat @details outside brief description as a new paragraph
      addOutput("\n\n");
   }

   setOutput(OutputDoc);
   return false;
}

static bool handleName(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERGRP_SEC);

   if (! stop) {
      s_memberGroupHeader.resize(0);
      BEGIN( NameParam );

      if (s_memberGroupId != DOX_NOGROUP) {
         // end of previous member group

         closeGroup(current,yyFileName,yyLineNr,true);
       }
  }

  return stop;
}

static bool handleTodo(const QString &)
{
   newXRefKind = XRef_Todo;
   setOutput(OutputXRef);
   xrefKind = XRef_Todo;
   return false;
}

static bool handleTest(const QString &)
{
   newXRefKind = XRef_Test;
   setOutput(OutputXRef);
   xrefKind = XRef_Test;
   return false;
}

static bool handleBug(const QString &)
{
   newXRefKind = XRef_Bug;
   setOutput(OutputXRef);
   xrefKind = XRef_Bug;
   return false;
}

static bool handleDeprecated(const QString &)
{
   newXRefKind = XRef_Deprecated;
   setOutput(OutputXRef);
   xrefKind = XRef_Deprecated;
   return false;
}

static bool handleXRefItem(const QString &)
{
   newXRefKind = XRef_Item;
   BEGIN(XRefItemParam1);
   return false;
}

static bool handleParBlock(const QString &)
{
   if (s_insideParBlock)   {
      warn(yyFileName,yyLineNr, "Found \\parblock command while already in a parblock");
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addOutput("@parblock ");
   s_insideParBlock = true;

   return false;
}

static bool handleEndParBlock(const QString &)
{
   if (! s_insideParBlock) {
     warn(yyFileName,yyLineNr, "Found \\endparblock command without matching \\parblock");
   }

   addOutput("@endparblock");
   setOutput(OutputDoc); // to end a parblock inside a xrefitem like context
   s_insideParBlock = false;

   return false;
}

static bool handleRelated(const QString &)
{
   BEGIN(RelatesParam1);
   return false;
}

static bool handleRelatedAlso(const QString &)
{
   current->relatesType = Duplicate;
   BEGIN(RelatesParam1);
   return false;
}

static bool handleMemberOf(const QString &)
{
   current->relatesType = MemberOf;
   BEGIN(RelatesParam1);
   return false;
}

static bool handleRefItem(const QString &)
{
   addOutput("@refitem ");
   BEGIN(LineParam);
   return false;
}

static bool handleSection(const QString &s)
{
   setOutput(OutputDoc);
   addOutput("@"+s+" ");
   BEGIN(SectionLabel);

   if (s == "section") {
      s_sectionLevel = 1;

   } else if (s == "subsection") {
      s_sectionLevel = 2;

   } else if (s == "subsubsection") {
      s_sectionLevel = 3;

   } else if (s == "paragraph") {
      s_sectionLevel = 4;

   }

   return false;
}

static bool handleSubpage(const QString &s)
{
   if (current->section != Entry::EMPTY_SEC && current->section != Entry::PAGEDOC_SEC &&
         current->section != Entry::MAINPAGEDOC_SEC) {

      warn(yyFileName,yyLineNr, "Found \\subpage command in a comment block that is not marked as a page");
  }

  if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
  }

   addOutput("@"+s+" ");
   BEGIN(SubpageLabel);

   return false;
}

static bool handleAnchor(const QString &s)
{
   addOutput("@"+s+" ");
   BEGIN(AnchorLabel);
   return false;
}

static bool handleCite(const QString &s)
{
   if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addOutput("@" + s + " ");
   BEGIN(CiteLabel);
   return false;
}

static bool handleFormatBlock(const QString &s)
{
   addOutput("@" + s + " ");

   blockName      = s;
   s_commentCount = 0;
   BEGIN(FormatBlock);

   return false;
}

static bool handleAddIndex(const QString &)
{
   addOutput("@addindex ");
   BEGIN(LineParam);
   return false;
}

static bool handleIf(const QString &)
{
   enabledSectionFound = false;
   guardType = Guard_If;
   s_spaceBeforeIf = s_spaceBeforeCmd;
   BEGIN(GuardParam);
   return false;
}

static bool handleIfNot(const QString &)
{
   enabledSectionFound = false;
   guardType = Guard_IfNot;
   s_spaceBeforeIf = s_spaceBeforeCmd;
   BEGIN(GuardParam);
   return false;
}

static bool handleElseIf(const QString &)
{
   if (guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");
   } else {
      guardType = enabledSectionFound ? Guard_Skip : Guard_If;
      BEGIN(GuardParam);
   }

   return false;
}

static bool handleElse(const QString &)
{
   if (guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");
   } else {
      BEGIN( SkipGuardedSection );
   }

   return false;
}

static bool handleEndIf(const QString &)
{
   if (guards.isEmpty())   {
      warn(yyFileName,yyLineNr, "Found \\endif without matching start command");

   } else {
      delete guards.pop();
   }

   enabledSectionFound = false;
   if (! s_spaceBeforeCmd.isEmpty()) {
      addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   BEGIN( GuardParamEnd );
   return false;
}

static bool handleIngroup(const QString &)
{
   inGroupParamFound = false;
   BEGIN( InGroupParam );
   return false;
}

static bool handleNoSubGrouping(const QString &)
{
   current->subGrouping = false;
   return false;
}

static bool handleShowInitializer(const QString &)
{
   current->initLines = 100000;  // ON
   return false;
}

static bool handleHideInitializer(const QString &)
{
   current->initLines = 0;
   return false;
}

static bool handleCallgraph(const QString &)
{
   current->callGraph = true;
   return false;
}

static bool handleHideCallgraph(const QString &)
{
   current->callGraph = false;
   return false;
}

static bool handleCallergraph(const QString &)
{
   current->callerGraph = true;
   return false;
}

static bool handleHideCallergraph(const QString &)
{
   current->callerGraph = false;
   return false;
}

static bool handleInternal(const QString &)
{
   if (s_internalDocs) {
      // re-enabled for bug640828
      addOutput("\\internal ");
      s_processInternalDocs = true;

   } else {
      // make sure some whitespace before an \internal command
      // is not treated as "documentation"

      if (current->doc.trimmed().isEmpty()) {
         current->doc.resize(0);
      }

      s_condCount = 0;
      BEGIN( SkipInternal );
  }

  return false;
}

static bool handleLineBr(const QString &)
{
   addOutput('\n');
   return false;
}

static bool handleStatic(const QString &)
{
   endBrief();
   current->stat = true;
   return false;
}

static bool handlePure(const QString &)
{
   endBrief();
   current->virt = Pure;
   return false;
}

static bool handlePrivate(const QString &)
{
  current->protection = Private;
  return false;
}

static bool handlePrivateSection(const QString &)
{
   current->protection = protection = Private;
   return false;
}

static bool handleProtected(const QString &)
{
   current->protection = Protected;
   return false;
}

static bool handleProtectedSection(const QString &)
{
   current->protection = protection = Protected ;
   return false;
}

static bool handlePublic(const QString &)
{
   current->protection = Public;
   return false;
}

static bool handlePublicSection(const QString &)
{
   current->protection = protection = Public;
   return false;
}

static bool handleToc(const QString &)
{
   if (current->section == Entry::PAGEDOC_SEC || current->section==Entry::MAINPAGEDOC_SEC) {
      current->stat = true;  // we 'abuse' stat to pass whether or the TOC is enabled
   }
   return false;
}

static bool handleInherit(const QString &)
{
   BEGIN(InheritParam);
   return false;
}

static bool handleExtends(const QString &)
{
   BEGIN(ExtendsParam);
   return false;
}

static bool handleCopyBrief(const QString &)
{
   if (current->brief.isEmpty() && current->doc.isEmpty()) {

      // if we don't have a brief or detailed description yet,
      // then the @copybrief should end up in the brief description.
      // otherwise it will be copied inline (see bug691315 & bug700788)

      setOutput(OutputBrief);
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addOutput("\\copybrief ");
   return false;
}

static bool handleCopyDetails(const QString &)
{
   setOutput(OutputDoc);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addOutput("\\copydetails ");
   return false;
}

static bool handleCopyDoc(const QString &)
{
   setOutput(OutputBrief);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addOutput("\\copybrief ");
   s_copyDocArg.resize(0);
   BEGIN(CopyDoc);

   return false;
}

static void checkFormula()
{
   if (YY_START == ReadFormulaShort || YY_START == ReadFormulaLong) {
      warn(yyFileName, yyLineNr, "End of comment block while inside formula.");
   }
}

// main entry point
bool parseCommentBlock(ParserInterface *parser, QSharedPointer<Entry> curEntry, const QString &comment,
                  const QString &fileName, int &lineNr, bool isBrief, bool isAutoBrief, bool isInbody,
                  Protection &r_protection, int &r_position, bool &r_newEntryNeeded )
{
   initParser();

   guards.clear();
   langParser = parser;
   current    = curEntry;

   if (comment.isEmpty()) {
      // avoid empty strings
      return FALSE;
   }

   inputString    = comment;
   inputString.append(" ");

   inputPosition  = r_position;
   yyFileName     = fileName;
   yyLineNr       = lineNr;
   protection     = r_protection;
   s_needNewEntry = false;
   xrefKind       = XRef_None;
   xrefAppendFlag = false;
   insidePre      = false;
   s_parseMore    = false;
   inBody         = isInbody;

   outputXRef.resize(0);

   if (isBrief || isAutoBrief) {
      setOutput(OutputBrief);

   } else {
      setOutput(OutputDoc);
   }

   briefEndsAtDot = isAutoBrief;

   s_condCount    = 0;
   s_sectionLevel = 0;

   s_spaceBeforeCmd.resize(0);
   s_spaceBeforeIf.resize(0);

   printlex(commentscanYY_flex_debug, true, __FILE__, fileName);

   if (! current->doc.isEmpty()) {
      // separate detailed doc fragments
      current->doc += "\n\n";
   }

   if (! current->inbodyDocs.isEmpty() && isInbody) {
      // separate in body fragments
      current->inbodyDocs += "\n\n";
   }

   Debug::print(Debug::CommentScan, 0, "-----------\nCommentScanner: %s:%d\n"
                "input=[\n%s]\n", csPrintable(fileName), lineNr, csPrintable(comment) );

   commentscanYYrestart(commentscanYYin);
   BEGIN( Comment );

   commentscanYYlex();
   setOutput(OutputDoc);

   if (YY_START == OverloadParam) {
      // comment ended with \overload
      addOutput(theTranslator->trOverloadText());
   }

   if (! guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Documentation block ended in the middle of a conditional section");
   }

   if (s_insideParBlock) {
      warn(yyFileName, yyLineNr, "Documentation block ended while inside a \\parblock. Missing \\endparblock");
   }

   // removes blank lines from the detailed docs
   current->doc = trimEmptyLines(current->doc, current->docLine);

   if (current->section == Entry::FILEDOC_SEC && current->doc.isEmpty()) {
      // to allow a comment block with just a @file command
      current->doc = "\n\n";
   }

   if (current->section == Entry::MEMBERGRP_SEC && s_memberGroupId == DOX_NOGROUP) {
      // @name section but no group started yet
      openGroup(current, yyFileName, yyLineNr);
   }

   if (Doxy_Globals::markdownSupport) {
      current->brief      = processMarkdown(fileName, lineNr, current, current->brief);
      current->doc        = processMarkdown(fileName, lineNr, current, current->doc);
      current->inbodyDocs = processMarkdown(fileName, lineNr, current, current->inbodyDocs);
   }

   Debug::print(Debug::CommentScan, 0, "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n===========\n",
                current->briefLine,  qPrintable(current->brief), current->docLine, qPrintable(current->doc),
                current->inbodyLine, qPrintable(current->inbodyDocs) );

   checkFormula();
   r_protection = protection;

   groupAddDocs(curEntry);
   r_newEntryNeeded = s_needNewEntry;

   if (s_parseMore && r_position == inputPosition) {
      // did not proceed during this call, do not continue or there will be an infinate loop
      s_parseMore = false;
   }

   if (s_parseMore) {
      r_position = inputPosition;
   } else {
      r_position = 0;
   }

   lineNr = yyLineNr;

   printlex(commentscanYY_flex_debug, false, __FILE__, fileName);

   return s_parseMore;
}

void groupEnterFile(const QString &fileName, int)
{
   s_autoGroupStack.clear();
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupDocs.resize(0);
   s_memberGroupRelates.resize(0);
   s_compoundName = fileName;
}

void groupLeaveFile(const QString &fileName, int line)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);

   if (! s_autoGroupStack.isEmpty()) {
      warn(fileName, line, "End of file while inside a group\n");
   }
}

void groupEnterCompound(const QString &fileName, int line, const QString &name)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      warn(fileName, line, "Try to put compound %s inside a member group\n", qPrintable(name));
   }

   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);
   s_compoundName = name;

   int i = s_compoundName.indexOf('(');

   if (i != -1) {
      // strip category (Obj-C)
      s_compoundName=s_compoundName.left(i);
   }

   if (s_compoundName.isEmpty()) {
      s_compoundName=fileName;
   }
}

void groupLeaveCompound(const QString &, int, const QString &)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);
   s_compoundName.resize(0);
}

static int findExistingGroup(int &groupId, const QSharedPointer<MemberGroupInfo> info)
{
   for (auto di = Doxy_Globals::memGrpInfoDict.begin(); di != Doxy_Globals::memGrpInfoDict.end(); ++di) {

      auto mi = *di;

      if (s_compoundName == mi->compoundName && ! mi->header.isEmpty() &&
               mi->header.compare(info->header, Qt::CaseInsensitive) == 0) {

         // same file or scope, not a nameless group, same header name

         return (int)di.key();    // put the item in this group
      }
   }

   groupId++; // start new group
   return groupId;
}

void openGroup(QSharedPointer<Entry> e, const QString &, int)
{
   if (e->section == Entry::GROUPDOC_SEC) {
      // auto group
      s_autoGroupStack.push( QMakeShared<Grouping>(e->name, e->groupingPri()) );

   } else {
      // start of a member group

      if (s_memberGroupId == DOX_NOGROUP) {
         // no group started yet
         static int curGroupId = 0;

         QSharedPointer<MemberGroupInfo> info = QMakeShared<MemberGroupInfo>();

         info->header = s_memberGroupHeader.trimmed();
         info->compoundName = s_compoundName;
         s_memberGroupId = findExistingGroup(curGroupId, info);

         Doxy_Globals::memGrpInfoDict.insert(s_memberGroupId, info);

         s_memberGroupRelates = e->relates;
         e->mGrpId = s_memberGroupId;
      }
   }
}

void closeGroup(QSharedPointer<Entry> e, const QString &fileName, int line, bool foundInline)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      // end of member group

      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         // known group
         info->doc = s_memberGroupDocs;
         info->docFile = fileName;
         info->docLine = line;
      }

      s_memberGroupId = DOX_NOGROUP;
      s_memberGroupRelates.resize(0);
      s_memberGroupDocs.resize(0);

      if (! foundInline) {
         e->mGrpId = DOX_NOGROUP;
      }

   } else if (! s_autoGroupStack.isEmpty()) {
      // end of auto group
      QSharedPointer<Grouping> grp = s_autoGroupStack.pop();

      // see bug577005: we should not remove the last group for e
      if (! foundInline) {
         e->m_groups.removeLast();
      }

      if (! foundInline) {
         initGroupInfo(e);
      }
   }
}

void initGroupInfo(QSharedPointer<Entry> e)
{
   e->mGrpId  = s_memberGroupId;
   e->relates = s_memberGroupRelates;

   if (! s_autoGroupStack.isEmpty()) {
      e->m_groups.append(*s_autoGroupStack.top());
   }
}

static void groupAddDocs(QSharedPointer<Entry> e)
{
   if (e->section == Entry::MEMBERGRP_SEC) {
      s_memberGroupDocs = e->brief.trimmed();
      e->doc = trimEmptyLines(e->doc, e->docLine);

      if (! s_memberGroupDocs.isEmpty() && ! e->doc.isEmpty()) {
         s_memberGroupDocs+="\n\n";
      }

      s_memberGroupDocs += e->doc;
      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         info->doc     = s_memberGroupDocs;
         info->docFile = e->docFile;
         info->docLine = e->docLine;
         info->setRefItems(e->m_specialLists);
      }

      e->doc.resize(0);
      e->brief.resize(0);
   }
}

static void handleGuard(const QString &expr)
{
   CondParser prs;
   bool sectionEnabled = prs.parse(yyFileName, yyLineNr, expr.trimmed());
   bool parentEnabled  = true;

   if (! guards.isEmpty()) {
      parentEnabled = guards.top()->isEnabled();
   }

   if (parentEnabled) {
      if ( (sectionEnabled && guardType == Guard_If) || (!sectionEnabled && guardType == Guard_IfNot)) {
         // section is visible
         guards.push(new GuardedSection(true, true));
         enabledSectionFound = true;
         BEGIN( GuardParamEnd );

      } else {
         // section is invisible
         if (guardType != Guard_Skip) {
            guards.push(new GuardedSection(false, true));
         }

         BEGIN( SkipGuardedSection );
      }

   } else {
      // invisible because of parent
      guards.push(new GuardedSection(false, false));
      BEGIN( SkipGuardedSection );
   }
}

