/*************************************************************************
 *
 * Copyright (C) 2014-2018 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License version 2
 * is hereby granted. No representations are made about the suitability of
 * this software for any purpose. It is provided "as is" without express or
 * implied warranty. See the GNU General Public License for more details.
 *
 * Documents produced by DoxyPress are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 210
#define YY_END_OF_BUFFER 211
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[780] =
    {   0,
       80,   80,  128,  128,  142,  142,  157,  157,  201,  201,
      148,  148,  211,  210,   47,  210,   47,  210,   45,  210,
       47,  210,   47,  210,   47,  210,   47,  210,   44,   47,
      210,   47,  210,   47,  210,   27,   47,  210,   47,  210,
       47,  210,   47,  210,   47,  210,   47,  210,   47,  210,
       47,  210,   44,   47,  210,   47,  210,   47,  210,   93,
      210,   92,  210,   93,  210,   90,   93,  210,   93,  210,
       93,  210,  210,   94,  210,  118,  210,  117,  210,  118,
      210,  115,  118,  210,  118,  210,   75,  210,   75,  210,
       74,  210,   75,  210,   75,  210,   75,  210,   71,   75,

      210,   75,  210,   75,  210,   79,  210,   78,  210,   79,
      210,   76,   79,  210,   79,  210,   79,  210,   79,  210,
       83,  210,   82,  210,   80,   83,  210,   80,   83,  210,
       83,  210,   80,   83,  210,   80,   83,  210,   83,  210,
       75,  210,   74,  210,   75,  210,   75,  210,   75,  210,
       75,  210,   75,  210,  106,  210,  105,  210,  103,  106,
      210,  106,  210,  110,  210,  109,  210,  110,  210,  110,
      210,  114,  210,  113,  210,  114,  210,  114,  210,  102,
      210,   99,  210,  102,  210,  100,  102,  210,  102,  210,
      102,  210,   98,  210,   98,  210,   96,   98,  210,   97,

       98,  210,16479,   61,  210,   60,  210,   61,  210,   58,
       61,  210,   61,  210,   65,  210,   65,  210,   64,  210,
       65,  210,   65,  210,   65,  210,   62,   65,  210,   65,
      210,   65,  210,   69,  210,   68,  210,   69,  210,   66,
       69,  210,   69,  210,   86,  210,   84,  210,  210,   88,
      210,   89,  210,  210,  124,  210,  123,  210,  122,  124,
      210,  124,  210,  128,  131,  210,  125,  210,  128,  131,
      210,  131,  210,  131,  210,  133,  210,  132,  210,  210,
      136,  210,  136,  210,  134,  210,  136,  210,  136,  210,
      142,  146,  210,  143,  210,  146,  210,  146,  210,  146,

      210,  146,  210,  146,  210,  121,  210,  119,  210,  121,
      210,  155,  210,  155,  210,  153,  210,  147,  155,  210,
      152,  155,  210,  155,  210,  158,  210,  157,  158,  210,
      156,  210,  158,  210,  165,  166,  210,  164,  210,  166,
      210,  166,  210,  166,  210,  176,  177,  210,  167,  210,
      177,  210,  177,  210,  177,  210,  180,  210,  178,  210,
      180,  210,  184,  210,  182,  210,  181,  184,  210,  184,
      210,  187,  190,  210,  185,  210,  188,  190,  210,  189,
      190,  210,  190,  210,  190,  210,  193,  210,  191,  210,
      193,  210,  196,  210,  195,  210,  196,  210,  194,  196,

      210,  196,  210,  199,  210,  198,  210,  199,  210,  197,
      199,  210,  199,  210,   55,   57,  210,   56,  210,   57,
      210,   57,  210,  139,  210,  138,  210,  137,  139,  210,
      139,  210,   50,   51,  210,   49,  210,   51,  210,   51,
      210,  201,  203,  210,  202,  210,  203,  210,  203,  210,
      203,  210,  206,  210,  205,  210,  204,  206,  210,  206,
      210,  208,  209,  210,  207,  210,  209,  210,  148,  210,
      148,  151,  210,  149,  210,  150,  210,   43,    4,   36,
       38,   40,   38,   26,   26,   18,   26,   18,   18,   24,
       25,   20,   26,   27,   18,   18,   18,   18,   46,   30,

       31,   36,   28,   90,   90,   91,   90,   94,  115,  115,
      116,   71,   71,   73,   71,   76,   76,   77,   76,   80,
       80,   80,   80,   80,   80,   81,   80,  103,  104,  107,
      108,  112,  111,  112,  100,  100,  101,  100,   97,16479,
     8287,   97,16479,   58,   58,   58,   59,   62,   62,   63,
       62,   66,   66,   67,   84,   85,   88,   87,  122,  128,
      125,  128,  130,  130,  127,  132,  135,  142,  145,  144,
      120,  147,  152,  154,  157,  156,  165,  176,  179,  181,
      183,  187,  186,  192,  194,  194,  197,  197,   55,  137,
       50,  201,  200,  204,  208,  148,   26,   37,   35,   42,

       38,   42,   42,   42,   38,   42,   42,   39,    6,   34,
        1,    1,    2,   18,   18,   22,   23,   20,    5,   18,
       18,   32,   35,   29,   90,   90,   71,   76,   76,   80,
       80,   80,  100,  100,   58,   58,   58,   58,   62,   66,
      129,   52,   53,   54,   48,  200,  204,   42,   42,   16,
       33,    1,   19,    2,   18,   18,   18,   90,   70,   76,
       80,   80,   72,  100,   58,   58,   58,   66,  129,  160,
      168,   48,  204,   15,   41,    6,   13,   18,   21,   18,
       18,   90,   76,   80,  100,    3,   14,    7,   18,   21,
       18,   18,   90,   76,   80,  100,   84,  162,  170,   18,

       18,   18,   90,   76,   80,  100,  141,  161,  159,  169,
       18,   18,   18,   90,   92,  117,   74,   76,   78,   80,
       82,  105,  109,  113,   99,  100,   60,   64,   68,   86,
       89,  123,  126,  133,  134,  140,  143,  119,  153,  163,
      164,  167,  178,  182,  185,  191,  195,  198,  138,   49,
      202,  205,  207,   12,    9,    8,   18,   18,    5,   18,
      171,   11,   10,   18,   18,   18,   18,  174,   17,   18,
       17,   18,  175,  172,   17,   18,  175,  173,   43
    } ;

static yyconst flex_int16_t yy_accept[1153] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    5,    5,    5,    5,    6,    7,    7,
        7,    7,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   10,
       11,   11,   11,   11,   11,   12,   13,   14,   15,   17,
       19,   21,   23,   25,   27,   29,   32,   34,   36,   39,

       41,   43,   45,   47,   49,   51,   53,   56,   58,   60,
       62,   64,   66,   69,   71,   73,   74,   76,   78,   80,
       82,   85,   87,   89,   91,   93,   95,   97,   99,  102,
      104,  106,  108,  110,  112,  115,  117,  119,  121,  123,
      125,  128,  131,  133,  136,  139,  141,  143,  145,  147,
      149,  151,  153,  155,  157,  159,  162,  164,  166,  168,
      170,  172,  174,  176,  178,  180,  182,  184,  186,  189,
      191,  193,  195,  197,  200,  204,  206,  208,  210,  213,
      215,  217,  219,  221,  223,  225,  227,  230,  232,  234,
      236,  238,  240,  243,  245,  247,  249,  250,  252,  254,

      255,  257,  259,  262,  264,  267,  269,  272,  274,  276,
      278,  280,  281,  283,  285,  287,  289,  291,  294,  296,
      298,  300,  302,  304,  306,  308,  310,  312,  314,  316,
      318,  321,  324,  326,  328,  331,  333,  335,  338,  340,
      342,  344,  346,  349,  351,  353,  355,  357,  359,  361,
      363,  365,  367,  370,  372,  375,  377,  380,  383,  385,
      387,  389,  391,  393,  395,  397,  399,  402,  404,  406,
      408,  410,  413,  415,  418,  420,  422,  424,  426,  428,
      431,  433,  436,  438,  440,  442,  445,  447,  449,  451,
      453,  455,  457,  460,  462,  465,  467,  469,  471,  474,

      476,  478,  478,  478,  478,  478,  479,  479,  479,  480,
      480,  480,  480,  480,  480,  481,  482,  483,  483,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  485,  485,  486,  487,  488,  489,  490,
      491,  492,  494,  495,  495,  496,  497,  498,  499,  500,
      500,  500,  500,  500,  500,  500,  501,  502,  503,  503,
      504,  504,  504,  504,  504,  504,  505,  506,  506,  506,
      506,  507,  508,  508,  509,  510,  510,  511,  511,  511,
      512,  512,  512,  512,  512,  512,  513,  513,  513,  514,
      514,  514,  515,  515,  515,  515,  516,  516,  517,  518,

      518,  518,  518,  519,  520,  520,  521,  522,  522,  523,
      524,  525,  525,  525,  526,  526,  527,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  529,  529,  530,  530,  530,  531,  531,  533,  533,
      533,  534,  534,  535,  535,  535,  536,  537,  537,  537,
      537,  538,  539,  541,  541,  542,  544,  545,  545,  545,
      546,  546,  547,  547,  548,  548,  548,  548,  548,  548,
      549,  549,  549,  550,  550,  551,  551,  551,  551,  552,
      553,  553,  554,  554,  555,  555,  556,  556,  556,  557,
      557,  558,  558,  559,  559,  560,  560,  561,  562,  563,

      563,  564,  565,  565,  566,  566,  567,  567,  567,  567,
      567,  568,  568,  569,  570,  571,  571,  571,  571,  572,
      572,  572,  573,  574,  574,  575,  575,  576,  577,  577,
      577,  578,  578,  578,  578,  579,  579,  579,  579,  579,
      579,  579,  580,  580,  581,  581,  582,  582,  583,  583,
      584,  584,  584,  585,  585,  586,  586,  587,  587,  587,
      588,  588,  589,  589,  589,  590,  590,  590,  591,  591,
      592,  592,  592,  593,  594,  594,  595,  595,  595,  596,
      596,  597,  598,  598,  598,  598,  598,  599,  600,  601,
      603,  604,  605,  607,  608,  609,  609,  609,  609,  609,

      609,  609,  609,  609,  609,  610,  610,  610,  610,  610,
      610,  611,  612,  613,  614,  615,  616,  617,  618,  618,
      619,  620,  621,  622,  622,  622,  622,  622,  623,  624,
      624,  625,  626,  626,  627,  627,  627,  627,  627,  627,
      628,  629,  629,  630,  631,  631,  632,  632,  633,  633,
      633,  633,  633,  633,  633,  634,  634,  635,  636,  637,
      638,  639,  639,  639,  640,  640,  641,  641,  641,  641,
      641,  641,  641,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      643,  644,  645,  645,  645,  646,  646,  647,  647,  648,
      648,  648,  648,  648,  648,  648,  649,  650,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  652,  653,  654,  655,  656,  656,  656,  657,  658,
      658,  658,  658,  659,  659,  659,  660,  660,  660,  661,
      662,  662,  663,  664,  664,  664,  664,  665,  665,  666,
      667,  668,  668,  668,  669,  669,  669,  669,  669,  669,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  671,  671,  671,  671,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  673,  673,

      673,  674,  674,  674,  674,  675,  675,  675,  676,  676,
      676,  676,  676,  676,  676,  678,  678,  678,  678,  679,
      680,  681,  682,  682,  683,  683,  683,  684,  685,  685,
      685,  685,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  687,
      688,  688,  688,  688,  688,  689,  689,  689,  689,  689,
      690,  691,  692,  693,  694,  694,  694,  695,  696,  696,

      696,  696,  697,  697,  697,  697,  697,  697,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      699,  699,  699,  699,  699,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  701,  702,  703,  704,  704,  704,  705,  706,
      706,  706,  706,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  709,

      710,  710,  710,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  712,  713,  714,  716,
      717,  718,  720,  722,  723,  724,  725,  727,  728,  729,
      730,  731,  732,  733,  734,  735,  736,  736,  737,  737,
      737,  737,  737,  737,  737,  737,  738,  739,  740,  741,
      742,  742,  742,  742,  742,  742,  743,  744,  745,  746,
      747,  748,  749,  750,  751,  752,  753,  754,  754,  754,
      754,  755,  756,  757,  758,  759,  760,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  762,  762,

      762,  763,  764,  764,  764,  765,  765,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      767,  767,  768,  768,  768,  768,  768,  768,  768,  769,
      769,  769,  771,  771,  773,  773,  773,  774,  775,  775,
      777,  777,  777,  778,  778,  778,  778,  778,  778,  779,
      780,  780
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   32,   32,   36,   37,   38,   39,   40,
       32,   41,   32,   42,   43,   32,   32,   32,   32,   32,
       44,   45,   46,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   32,   57,   58,   59,   60,
       61,   62,   32,   63,   64,   65,   66,   67,   68,   69,
       70,   32,   71,   72,   73,   74,    1,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76
    } ;

static yyconst flex_int32_t yy_meta[77] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
        7,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       18,   18,   19,   20,   21,   22,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,    1,   24,    1,   25,   23,   23,   23,
       23,   23,   23,   23,   23,   26,   23,   23,   23,   27,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       28,   29,   30,   31,   32,   32
    } ;

static yyconst flex_int16_t yy_base[1388] =
    {   0,
        0,    0,    0,   75,  147,  221, 5122, 5121,  295,    0,
      371,    0,  447,  521,  595,  669,  743,    0,  819,    0,
       75,   76,   78,   81,  895,  969, 1043,    0, 1119,    0,
     1195,    0, 1271,    0, 1347,    0,   88,   91, 1423,    0,
       92,   96, 1499,    0,  110,  122,  159,  184,   83,   97,
     1575, 1651,  129,  141,  191,  206,  238,  244,  100,  113,
     1727,    0,  245,  455,  132,  135, 1803,    0, 1879,    0,
      235,  452,  459,  461, 1955,    0,  197,  466,  470,  472,
     2031, 2105,  136,  137,  194,  247, 5123, 9781, 9781,  503,
      210, 5115, 5111, 5093,  182,  534, 2174, 2233,  556, 2300,

      606, 5038, 2373,   99,  251,  628,  693,  481,  629, 9781,
     9781, 5105,  471,  491, 1590, 5108, 9781, 9781, 9781,    0,
       91,  559, 9781,  552,  700,  924, 1613, 5087,  920,  578,
      270, 9781, 9781, 5095,  540,  619, 5071, 1666, 9781, 9781,
     2445,  939,  982, 1675, 9781, 2136,  932, 1006, 2060, 2182,
     5071, 1014,  282, 9781, 9781,    0,  660, 9781, 9781, 5086,
      949, 9781, 9781, 5085, 1625, 9781, 9781, 5084, 1584, 1587,
     2229, 9781,    0, 9781,  200, 9781, 9781,    0, 2077, 1636,
     9781, 2069, 2142, 2192, 2259, 5067, 2295, 2086,  722, 9781,
     9781,    0, 5040, 2164, 9781, 5036, 2218,    0, 9781, 2267,

     9781, 9781,    0, 5006,  539, 9781, 5007, 2311, 2285, 9781,
        0, 5004, 9781,  472, 9781, 5037, 4996,    0, 9781, 9781,
     5018, 5021, 4982,  132, 9781, 9781, 2291, 9781,  276, 9781,
     9781,  610, 2337, 9781,  584, 9781, 4986,    0, 9781, 9781,
       55,  603,    0, 9781, 9781,  897, 1652, 9781, 9781, 2346,
     9781, 9781,    0, 2355,    0, 9781, 9781, 9781, 9781, 2359,
     9781, 9781, 2363, 9781, 9781,    0,  165, 4985, 9781, 9781,
        0,  245, 4984,    0, 9781, 4947, 4943, 9781, 9781,    0,
     4948,    0, 9781, 4977, 4946,    0, 9781, 9781, 4915,  121,
     9781, 9781, 4969, 4939,    0, 9781, 4938,    0,    0, 9781,

     9781, 1676, 2512, 2579, 2056, 2091, 4937, 4976, 9781,    0,
     4959, 4955,    0,  536,  618, 9781, 9781, 2653, 4954,  567,
     4962,  672,  938,   72,  547,  217,  622, 2378,  629,  663,
     4926, 4911, 9781, 4959,  663, 2728, 4901, 4914,  951, 9781,
     9781,    0, 2413, 2456,  684, 2130, 2310, 2367, 4897, 2801,
      655, 2135, 1001, 1013, 2278,  715, 2384, 2478, 1018, 9781,
     1686, 2395, 2420, 2470, 4964, 9781, 2145,  887, 2479, 1609,
     9781, 2487, 4962, 9781,  625, 4955,  710, 4940, 1621, 9781,
     4904, 2510, 2544, 4935, 2573, 2556, 2590, 2607, 2617, 1640,
     1704, 9781, 4898, 2624, 2634, 4931, 4944, 9781, 2507, 2183,

     2521, 2065, 9781, 2664, 4942,  488, 2873, 2947, 4941, 9781,
     2666, 2226, 2687, 4940, 2168, 9781, 2724, 2698, 2754, 4923,
     2762, 2786, 2791, 2829, 2837,    0, 2897, 2808, 2854, 2187,
        0, 2300, 9781, 4887, 4937, 9781, 2326, 9781, 4885, 4935,
     9781, 2341, 9781, 4883, 4933, 9781, 2695, 2417, 2760, 2395,
     9781, 2848, 1023, 2217, 9781, 2483, 2919, 2908,    0, 2974,
     4910, 3002, 2506, 9781, 4874, 2932, 3024, 4908, 3032, 2985,
     3049, 3057, 3065, 2566, 9781, 4869, 3069, 3082,    0, 4907,
     4915, 4905, 2595, 9781, 4863, 4902, 4863, 2612, 9781, 4859,
        0, 2643, 9781, 4858,    0, 4857, 2081, 9781, 4869, 4866,

     9781, 4903, 2653, 9781, 4852,    0, 4851,  910, 4896, 4895,
     9781, 4843,    0, 9781, 9781, 4840, 4838, 2690, 9781, 4836,
     2279, 9781, 2529, 2743, 9781, 4835, 2859, 9781, 4845, 4831,
        0,  422, 4833, 4827,    0, 4824, 4830, 4831,  595, 4786,
     2848, 9781, 4785,    0, 2867, 9781, 4784,    0, 2924, 9781,
     4783, 2979, 9781, 4776,  898, 4824,  979, 4804, 4767, 1687,
     4815, 2067, 4800, 4764,    0, 4812,  544,    0, 4732,    0,
     1667, 4727,    0,    0, 4717, 4756,    0, 4715,    0, 4714,
        0, 4717, 4711, 4745,    0, 4749,  943, 4740, 9781, 9781,
     4733, 3131, 4730, 4737, 9781, 4737,  949, 4700, 4683, 1639,

     1574, 2782, 2094, 2843, 9781, 2210, 2122, 2218, 4686, 4676,
     4717, 1713, 3090,    0, 2287, 2879, 9781, 9781,    0,    0,
        0, 3044, 3012, 3091, 2377, 2980, 3099, 9781, 3107, 3157,
     2418, 3020, 3058, 3163,    0, 4677, 3162, 3186, 4676, 4706,
     3150, 3175, 3178, 2309, 3234, 3242, 3265, 3274, 4716, 2739,
     2962, 4672, 4671, 4670, 3209, 3250, 3293, 3319, 3341, 3349,
     3357, 4660, 4659,    0,    0, 4696, 4656, 4642, 4646, 4643,
     4642,    0,    0, 4641, 4639, 4636, 4638, 4632, 4631, 4630,
     4626, 4616, 4628, 4618, 4621, 4625, 2702, 4612, 4624, 4624,
     4616, 4615, 4614, 4613, 4612,    0, 4611,    0, 4580, 9781,

     9781, 9781, 3744, 3769, 2422, 3737,    0, 3736, 3767, 3728,
     3727, 2423, 3726, 3769,    0, 3100, 2549, 9781, 2223, 3718,
     3716, 1638, 2377, 3744, 3007, 2417, 3208, 2305, 3717, 3705,
     9781, 2568, 9781,    0, 2718, 3685, 3706, 3210, 3219, 3312,
     3371, 3380, 3368, 3686, 3396, 9781, 3405, 3684, 3393, 3453,
     3527, 3461, 9781, 3674, 3673, 3660, 3396,    0, 3487, 3554,
     3422, 3658, 3653, 3693, 3647, 3645, 3643, 3638, 3635,    0,
     3627, 3625, 3616, 3528, 3605, 3597, 3595, 3589, 3592, 3587,
     9781, 3581, 3579, 3567, 9781, 3560, 3564, 3543, 3542, 3543,
     3542, 3536, 3532, 3530, 3524, 3500, 3495, 2579, 3493, 3488,

     3529, 3478, 3475, 3470, 9781, 3500, 3110, 9781, 3487, 3446,
     3434, 2444, 3212, 3220, 9781, 2455, 3425, 3439, 3272, 3412,
     3387, 3388, 3565, 3399, 3423, 3422, 3497, 3586, 3390, 3384,
     3383, 3562, 3613, 3382, 3377, 3352, 3338, 3343, 3329, 3323,
     3315, 3311, 3303, 3287, 3270, 3262, 3278, 2108, 3260, 3261,
     2774, 3259, 3261, 3257, 3250, 3246, 3240, 3236, 3211, 3219,
      116, 3197, 3202, 3195, 2000, 3190, 3179, 3178, 3174, 3166,
     3164, 3157, 3148, 3147, 3140, 3133, 3132, 3131, 3160, 9781,
     3109, 3122, 2320, 3261, 9781, 3133, 3331, 3096, 3089, 2903,
     9781, 3468, 3499, 3601, 3102, 3072, 3607, 3622, 3071, 3070,

     3062, 3609, 3657, 3679, 3058, 3056, 3048, 9781, 3041, 3015,
     3007, 2995, 2991, 2982, 2979, 2092, 2957, 2950, 2939, 2936,
     2932, 2922, 2912, 2922, 2911, 2913, 2909, 2894, 2889, 9781,
     2880,    0,    0, 2883, 9781, 2860, 3008, 2853, 2853, 2857,
     2846, 2845, 2841, 2839, 2827, 2816, 2805, 2795, 2794, 2788,
     2786, 2781, 2776, 2772, 2763, 2751, 2354, 2783, 3332, 2733,
     2722, 3077, 3646, 3509, 3645, 2723, 2718, 3651, 3687, 2713,
     2712, 2707, 3674, 2705, 2698, 2697, 2692, 2687, 2672, 2671,
     2656, 2654, 2663, 2659,    0, 2638, 2638, 2627, 2625, 9781,
     2631, 2617, 2613, 2588, 2586, 2581, 2579,    0, 9781, 9781,

     2571, 2571, 9781, 2565, 2548, 2542, 2542, 2539, 2538, 2509,
     2500, 2493, 2492, 2480, 2472, 2466, 2464, 2433, 2421, 2390,
     2378, 2339, 3480, 2379, 2352, 3418, 3670, 3684, 3698, 9781,
     9781, 3704, 3717, 9781, 9781, 9781, 3707, 9781, 9781, 9781,
     9781, 9781, 9781, 9781, 9781, 9781, 2306, 9781, 2293, 2258,
     2263, 2219, 2212, 2202, 2193, 9781, 9781, 9781, 9781, 9781,
     2163, 2156, 3043, 2142, 2130, 9781, 9781, 9781, 9781, 9781,
     9781, 9781, 9781, 9781, 9781, 9781, 9781, 2137, 2100, 3498,
     9781, 9781, 9781, 3435, 3736, 2013, 3726, 1992, 1991, 1658,
     1659, 1582, 1569, 1575, 1539, 1536,  983, 9781,  975,  980,

     9781, 9781,  966, 3564, 3299,  224, 3517,  923,  905,  896,
      861,  860,  847,  678,  662,  682, 3280,  662,  632, 3444,
      487, 3743,  629,  579,  558,  532,  444,  430, 9781, 3289,
      420, 3298, 2167, 3608,  202,  182, 3363, 9781,  140, 3400,
      639,  117, 3445,   59, 1641,   17, 3459, 2403, 9781, 3751,
     9781, 3801, 3833, 3865, 3897, 3929, 3961, 3993, 4025, 4057,
     4089, 4121, 4153, 4185, 4217, 4249, 4281, 4313, 4345, 4377,
     4409, 4441, 4473, 4505, 4537, 4569, 4601, 4633, 4658, 4678,
     4695, 4716, 4735, 4756, 4787, 4813, 4845, 4855, 4872, 4903,
     4934, 4965, 4997, 5023, 5055, 5082, 5113, 5144, 5175, 5193,

     5225, 5257, 5289, 5315, 5325, 5356, 5366, 5397, 5428, 5459,
     5490, 5500, 5517, 5535, 5567, 5585, 5617, 5649, 5680, 5697,
     5729, 5761, 5792, 5819, 5851, 5869, 5901, 5911, 5928, 5938,
     5955, 5987, 6005, 6037, 6069, 6089, 6121, 6153, 6179, 6210,
     6220, 6235, 6255, 6268, 6295, 6305, 6322, 6337, 6363, 6390,
     6416, 6442, 6474, 6491, 6516, 6547, 6578, 6609, 6641, 6656,
     6688, 6714, 6740, 6772, 6804, 6831, 6857, 6888, 6919, 6950,
     6982, 7013, 7031, 7063, 7095, 7127, 7153, 7179, 7210, 7241,
     7251, 7282, 7313, 7344, 7375, 7390, 7407, 7432, 7450, 7482,
     7500, 7532, 7564, 7589, 7607, 7639, 7671, 7702, 7729, 7761,

     7779, 7811, 7828, 7853, 7870, 7895, 7927, 7945, 7977, 8009,
     3740, 8029, 8044, 8076, 8108, 8123, 8155, 8173, 8188, 8215,
     8247, 8278, 3734, 8304, 8331, 8349, 3747, 8375, 8396, 8422,
     8432, 8464, 8479, 8505, 8531, 8563, 8590, 8617, 8649, 8680,
     8706, 8732, 8763, 8794, 8825, 8840, 8850, 8867, 8877, 8892,
     8924, 8934, 8944, 3753, 8964, 8996, 9014, 9031, 9058, 3764,
     9089, 9116, 9126, 9152, 9178, 9201, 9233, 9259, 9291, 9318,
     9344, 9354, 9385, 9416, 9433, 9448, 9466, 9493, 9524, 9556,
     9588, 9620, 9652, 9684, 9716, 9748, 3772
    } ;

static yyconst flex_int16_t yy_def[1388] =
    {   0,
     1152, 1152, 1151,    3, 1153, 1153, 1154, 1154, 1151,    9,
     1151,   11, 1155, 1155, 1156, 1156, 1151,   17, 1151,   19,
     1157, 1157, 1158, 1158, 1159, 1159, 1151,   27, 1151,   29,
     1151,   31, 1151,   33, 1151,   35, 1160, 1160, 1151,   39,
     1161, 1161, 1151,   43, 1162, 1162, 1163, 1163, 1164, 1164,
     1165, 1165, 1166, 1166, 1167, 1167, 1168, 1168, 1169, 1169,
     1151,   61, 1170, 1170, 1171, 1171, 1151,   67, 1151,   69,
     1172, 1172, 1172, 1172, 1151,   75, 1173, 1173, 1174, 1174,
     1175, 1175, 1176, 1176, 1177, 1177, 1151, 1151, 1151, 1151,
     1151, 1178, 1179, 1180, 1180, 1181, 1151, 1182, 1183, 1184,

     1183, 1151, 1151, 1151, 1180, 1180, 1181, 1180, 1151, 1151,
     1151, 1185, 1186, 1186, 1186, 1187, 1151, 1151, 1151, 1188,
     1189, 1151, 1151, 1151, 1151, 1190, 1190, 1151, 1191, 1151,
     1192, 1151, 1151, 1193, 1194, 1194, 1151, 1194, 1151, 1151,
     1195, 1196, 1196, 1196, 1151, 1196, 1151, 1151, 1197, 1197,
     1151, 1198, 1199, 1151, 1151, 1200, 1151, 1151, 1151, 1201,
     1151, 1151, 1151, 1202, 1151, 1151, 1151, 1203, 1204, 1204,
     1204, 1151, 1205, 1151, 1206, 1151, 1151, 1207, 1208, 1151,
     1151, 1151, 1151, 1209, 1209, 1151, 1210, 1151, 1211, 1151,
     1151, 1212, 1213, 1151, 1151, 1214, 1151, 1215, 1151, 1151,

     1151, 1151, 1216, 1151, 1217, 1151, 1218, 1151, 1219, 1151,
     1220, 1151, 1151, 1151, 1151, 1221, 1151, 1222, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1223, 1151,
     1151, 1223, 1151, 1151, 1151, 1151, 1151, 1224, 1151, 1151,
     1151, 1151, 1225, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1226, 1151, 1227, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1228, 1229, 1151, 1151, 1151,
     1230, 1231, 1151, 1232, 1151, 1151, 1151, 1151, 1151, 1233,
     1151, 1234, 1151, 1151, 1151, 1235, 1151, 1151, 1151, 1151,
     1151, 1151, 1236, 1151, 1237, 1151, 1151, 1238, 1238, 1151,

     1151, 1151, 1239, 1239, 1151, 1151, 1151, 1240, 1151, 1241,
     1242, 1243, 1244, 1151, 1243, 1151, 1151, 1245, 1243, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1246, 1239, 1246,  336,  336, 1151,
     1151, 1247, 1248, 1248, 1249, 1249, 1249, 1249, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1243, 1151, 1151,
     1243, 1243, 1151, 1151, 1250, 1151, 1251, 1252, 1251, 1151,
     1151, 1251, 1253, 1151, 1254, 1255, 1254, 1151, 1151, 1151,
     1151, 1151, 1256, 1151, 1256, 1257, 1258, 1256, 1257, 1259,
     1151, 1151, 1151, 1258, 1258, 1260, 1261, 1151, 1262, 1263,

     1262, 1151, 1151, 1262, 1264, 1264, 1265, 1265, 1264, 1151,
     1266, 1267, 1266, 1264, 1151, 1151, 1266, 1151, 1268, 1151,
     1268, 1269, 1270, 1268, 1151, 1271, 1269, 1270, 1270, 1272,
     1273, 1151, 1151, 1151, 1274, 1151, 1151, 1151, 1151, 1275,
     1151, 1151, 1151, 1151, 1276, 1151, 1277, 1278, 1277, 1151,
     1151, 1277, 1279, 1151, 1151, 1279, 1280, 1151, 1281, 1280,
     1151, 1282, 1151, 1151, 1151, 1151, 1283, 1151, 1283, 1284,
     1285, 1283, 1284, 1151, 1151, 1151, 1285, 1285, 1286, 1287,
     1288, 1287, 1151, 1151, 1151, 1289, 1151, 1151, 1151, 1151,
     1290, 1151, 1151, 1151, 1291, 1151, 1292, 1151, 1293, 1151,

     1151, 1294, 1151, 1151, 1151, 1295, 1151, 1151, 1296, 1296,
     1151, 1151, 1297, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1298, 1151, 1298, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1299, 1151, 1151, 1151, 1300, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1301, 1151, 1151, 1151, 1302, 1151, 1151,
     1151, 1151, 1151, 1151, 1303, 1304, 1303, 1151, 1151, 1305,
     1306, 1305, 1151, 1151, 1307, 1151, 1151, 1308, 1151, 1309,
     1151, 1151, 1310, 1311, 1151, 1312, 1313, 1151, 1314, 1151,
     1315, 1151, 1151, 1316, 1317, 1318, 1151, 1319, 1151, 1151,
     1319, 1320, 1319, 1318, 1151, 1151, 1151, 1151, 1151, 1151,

     1151, 1151, 1151, 1321, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1322, 1322, 1323, 1151, 1324, 1151, 1151, 1325, 1326,
     1327, 1328, 1328, 1151, 1151, 1151, 1151, 1151, 1319, 1151,
     1151, 1329, 1329, 1330, 1331, 1151, 1332, 1332, 1151, 1333,
     1334, 1334, 1335, 1151, 1336, 1337, 1337, 1338, 1339, 1151,
     1340, 1151, 1151, 1151, 1341, 1341, 1342, 1343, 1344, 1345,
     1345, 1151, 1151, 1346, 1347, 1348, 1151, 1151, 1151, 1151,
     1151, 1349, 1350, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1351, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1352, 1151, 1353, 1151, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1354, 1151, 1355, 1151,
     1151, 1151, 1151, 1356, 1357, 1358, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1359, 1359, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1360, 1361, 1362, 1363, 1364, 1364, 1151,
     1151, 1365, 1366, 1151, 1367, 1151, 1367, 1151, 1368, 1369,
     1369, 1370, 1151, 1151, 1151, 1151, 1371, 1372, 1373, 1373,
     1374, 1151, 1151, 1375, 1151, 1151, 1151, 1151, 1151, 1376,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,

     1355, 1151, 1151, 1151, 1151, 1377, 1358, 1151, 1151, 1151,
     1151, 1151, 1151, 1378, 1151, 1151, 1151, 1151, 1361, 1151,
     1364, 1364, 1151, 1366, 1151, 1151, 1368, 1370, 1151, 1151,
     1151, 1371, 1379, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1380, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1377, 1151,
     1151, 1151, 1151, 1381, 1151, 1378, 1378, 1151, 1151, 1361,
     1151, 1364, 1364, 1366, 1151, 1151, 1368, 1370, 1151, 1151,

     1151, 1371, 1379, 1379, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1382, 1383, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1381, 1381, 1151,
     1151, 1361, 1364, 1364, 1366, 1151, 1151, 1368, 1370, 1151,
     1151, 1151, 1371, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1384, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1385, 1151, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1361, 1364, 1364, 1366, 1151,
     1151, 1368, 1370, 1151, 1151, 1151, 1371, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1386,
     1151, 1151, 1151, 1361, 1151, 1387, 1364, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,

     1151, 1151, 1386, 1386, 1361, 1387, 1364, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1361,
     1387, 1364, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1361, 1387, 1364, 1151, 1151, 1151, 1151, 1151, 1151,
     1387, 1151, 1151, 1151, 1387, 1151, 1151, 1387, 1151, 1387,
        0, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151
    } ;

static yyconst flex_int16_t yy_nxt[9858] =
    {   0,
       89,   90,   91,   89,   90,   89,   92,   89,   93,   89,
       89,   89,   89,   89,   94,   89,   95,   96,   89,   94,
       94,   94,   89,   97,   89,   98,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   89,  100,   89,  101,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       89,   89,   89,   89,   89,  102,  103,  159,  159,  103,
      163,  160,  160,  163,  164,  226,  985,  164,  104,  105,
      199,  106,  107,  199,  206,  108,  108,  109,  206,  226,

      356,   88,  249,  356,   88,  207,  532,  602,  376,  207,
      533,  214,  215,  378,  214,  249,  216,  208, 1147,  161,
      161,  208,  165,  214,  215,  165,  214,  227,  216,  602,
      235,  236,  200,  235,  262,  200,  209,  262,  296,  296,
      209,  227,  235,  236,  250,  235,  109,  110,  110,  111,
      110,  110,  110,  112,  217,  110,  110,  250,  110,  110,
      110,  219,  110,  220,  110,  114,  217,  575,  935,  114,
      110,  110,  221,  237, 1146,  936,  263,  222,  517,  263,
      297,  297,  556,  516,  223,  237,  219,  558,  220,  314,
      110,  115,  110,  239,  574,  240,  299,  221,  315,  283,

     1144,  454,  222,  224,  454,  300,  301,  313,  239,  223,
      240,  305,  306,  284,  305,  455,  241,  110,  110,  110,
      110,  110,  110,  111,  110,  110,  110,  112,  224,  110,
      110,  241,  110,  110,  110,  242,  110,  275,  110,  114,
      244,  285,  245,  114,  110,  110,  244,  256,  245,  299,
      242,  985,  356,  603,  307,  356,  257,  258,  300,  301,
      276, 1142,  561,  246,  110,  115,  110,  563,  621,  246,
      259,  394,  394,  394,  394,  603,  313,  521,  395,  276,
      521, 1121,  247,  428,  428,  428,  428,  522,  247,  260,
      429,  110,  110,  110,  110,  118,  118,  119,  118,  118,

      118,  118,  118,  120,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  118,  122,
      118,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  118,  118,  118,  118,  121,
      121,  123,  124,  125,  124,  124,  123,  123,  123,  126,
      123,  123,  123,  123,  123,  123,  123,  123,  127,  123,
      123,  123,  123,  128,  123,  123,  123,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  123,  130,  123,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  123,  123,  123,  131,  129,  129,  132,  132,  133,
      132,  132,  132,  134,  275,  132,  132,  256,  132,  132,
      132,  275,  132,  275,  132,  136,  257,  258,  283,  136,
      137,  132,  287,  508,  287, 1139,  508,  276,  509,  682,
      259,  683,  284,  288,  277,  288,  277, 1137,  368,  369,
      132,  138,  132,  369,  644,  289,  276,  289,  361,  260,

      362,  362,  362,  277,  302,  277,  313,  302, 1151,  369,
      285,  985,  409,  369,  290,  369,  290,  132,  132,  132,
      132,  132,  132,  133,  132,  132,  132,  134,  303,  132,
      132,  621,  132,  132,  132,  369,  132,  587,  132,  136,
      587,  498, 1133,  136,  137,  132,  316,  304,  312,  317,
      312,  318,  499,  382,  382,  382,  382,  400,  401,  313,
      379,  380,  401,  379,  132,  138,  132,  602,  595,  383,
      312,  595,  312,  312,  384,  312,  312,  312,  320,  391,
      392,  313,  391,  500,  401,  527,  528,  602,  527,  701,
      985,  132,  132,  132,  132,  139,  139,  140,  139,  139,

      139,  141,  344,  139,  139,  381,  139,  139,  139,  602,
      139, 1151,  139,  143, 1151, 1136,  702,  143,  144,  145,
      312, 1151,  312,  312,  393,  312,  312,  312,  529,  357,
      363,  313,  357,  363,  588,  314, 1151,  401,  139,  146,
      139,  401,  376,  313,  358,  364,  689,  378,  985,  534,
      355,  355,  344,  313,  532,  608,  356,  602,  533,  356,
      690,  432,  433,  401,  432,  139,  139,  139,  139,  139,
      139,  140,  139,  139,  139,  141,  608,  139,  139,  602,
      139,  139,  139,  621,  139,  615,  139,  143,  615, 1135,
     1145,  143,  144,  145,  359,  360, 1131,  359,  602,  355,

      355,  382,  382,  382,  382,  316,  434,  312,  317,  312,
      318,  597,  139,  146,  139,  613,  356,  383,  313,  356,
      602, 1130,  384,  477,  477,  477,  477,  376,  621, 1128,
      478,  985,  378,  597,  598,  599,  614,  320, 1127,  139,
      139,  139,  139,  123,  147,  148,  147,  147,  123,  123,
      123,  149,  123,  123,  123,  123,  123,  123,  123,  123,
      150,  123,  123,  123,  123,  151,  123,  123,  123,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  123,  130,  123,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,

      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  123,  123,  123,  153,  152,  152,  154,
      154,  155,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  154,  157,  154,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  154,
      154,  154,  154,  156,  156,  166,  166,  167,  166,  166,

      166,  168, 1126,  166,  166,  633,  166,  166,  166,  633,
      166,  508,  166,  170,  508,  556,  509,  170,  166,  166,
      558,  382,  382,  382,  382,  382,  382,  382,  382,  985,
      985,  633,  385,  418,  418,  418,  418,  383,  166,  171,
      166,  383,  384,  390,  587,  410,  384,  587,  536,  419,
      437,  438,  537,  437,  420, 1125,  412,  413,  538,  617,
      539,  413, 1124,  410,  600,  166,  166,  166,  166,  166,
      166,  167,  166,  166,  166,  168,  601,  166,  166, 1123,
      166,  166,  166,  413,  166,  600,  166,  170, 1151,  719,
     1081,  170,  166,  166,  618,  439,  556,  387,  601, 1151,

      413,  558,  359,  360,  413,  359, 1151,  418,  418,  418,
      418,  719,  166,  171,  166,  425,  418,  418,  425,  359,
      360,  619,  359,  419,  454,  426,  413,  454,  420, 1119,
      625,  419,  626,  626,  626, 1118,  420, 1117,  455,  166,
      166,  166,  166,  172,  172,   88,  172,  172,  172,  172,
      172,  173,  172,  172,  172,  172,  172,  172,  174,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  172,  172,  172,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,

      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  172,  172,  172,  172,  175,  175,  176,
      176,  177,  176,  176,  176,  176,  176,  178,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  176,  180,  176,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  176,
      176,  176,  176,  179,  179,  181,  182,  183,  182,  182,

      181,  181,  181,  184,  181,  181,  181,  181,  181,  181,
      181,  181,  185,  181,  181,  181,  181,  186,  181,  181,
      181,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  181,  188,
      181,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  181,  181,  181,  189,  187,
      187,  190,  190,  191,  190,  190,  190,  190,  190,  192,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  193,  193,  193,

      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  190,  194,  190,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  190,  190,  190,  190,  193,  193,   88,   88,  195,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
       88,  197,   88,  196,  196,  196,  196,  196,  196,  196,

      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,   88,   88,   88,
       88,  196,  196,  201,  201,  202,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  201,  204,  201,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  201,  201,  201,  201,  203,  203,   88,

       88,  210,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,   88,  212,   88,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,   88,
       88,   88,   88,  211,  211,  228,  229,  230,  228,  229,
      228,  228,  228,  228,  228,  228,  231,  228,  228,  228,
      228,  370,  371,  228,  370, 1116, 1115,  228,  228,  228,

      228,  448,  449,  723, 1151,  449,  449, 1151,  369,  449,
      370,  371,  369,  370,  388,  388,  388,  388,  228,  233,
      228,  385,  379,  380,  723,  379,  442,  443,  449,  442,
      383,  449, 1114, 1113,  369,  384,  372,  463,  464, 1112,
      463,  638,  638,  638,  638,  228,  228,  228,  228,  228,
      228,  228,  229,  230,  228,  229,  228,  228,  228,  228,
      228,  228,  231,  228,  228,  228,  228,  402,  403,  228,
      402,  444,  704,  228,  228,  228,  228,  302,  722,  812,
      302,  414,  465, 1151,  401,  621,  387,  631,  401, 1148,
      631,  705, 1151,  413,  228,  233,  228,  413,  540,  410,

      722,  303,  812,  536,  561,  391,  392,  537,  391,  563,
      401,  313,  404,  538,  732,  539, 1111,  732, 1110,  413,
      304,  228,  228,  228,  228,  228,  228,  251,  251,  252,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      251,  254,  251,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  251,  251,  251,

      251,  253,  253,  264,  264,  265,  264,  264,  264,  264,
      264,  266,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  264,  268,  264,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  264,  264,  264,  264,  267,  267,  269,
      269,  270,  269,  269,  269,  269,  269,  271,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  269,  269,  269,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  269,  273,  269,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  269,
      269,  269,  269,  272,  272,  278,  278,  279,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  278,  281,

      278,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  278,  278,  278,  278,  280,
      280,  291,  291,  292,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
     1109,  940, 1108,  291,  291,  291,  291,  305,  306, 1106,
      305,  418,  418,  418,  418,  941,  402,  403,  421,  402,
      466,  466,  466,  466,  291,  294,  291,  419,  458,  458,
      458,  458,  420,  498,  561,  459,  467,  474,  475,  563,
      474,  468,  305,  306,  499,  305,  460,  460,  460,  461,

      307,  291,  291,  291,  291,  291,  291,  292,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291, 1102,  500,  602,  291,  291,  291,
      291,  615,  476,  423,  615,  307,  357,  415,  416,  357,
      415,  984, 1151,  466,  466,  466,  466,  602,  291,  294,
      291,  624,  727, 1151,  413,  919,  985,  355,  413,  467,
     1151, 1101,  368,  369,  468,  483,  484,  369,  483,  415,
      416,  920,  415,  727,  621,  291,  291,  291,  291,  321,
      413, 1100,  417,  424,  424,  424,  424,  622,  650,  369,
      421,  650,  322,  466,  466,  466,  466, 1099,  426,  419,

      469,  642,  323,  324,  420,  642,  355,  325,  326,  467,
      485,  621,  327,  328,  468,  329,  330, 1097,  454,  488,
      489,  454,  488,  323,  324, 1096, 1141,  642,  325,  326,
      450,  451,  455,  450,  327,  328,  331,  332,  329,  330,
      333,  333,  333,  333,  647,  728, 1151,  449,  647,  334,
      726,  449, 1095,  809, 1094,  423,  333,  333,  335, 1093,
      472,  472,  472,  472,  490,  471,  728,  469,  492,  493,
      647,  492,  726,  449,  809,  452,  467,  337, 1092,  363,
      521,  468,  363,  521,  338,  339,  503,  504,  615,  503,
      522,  615,  518,  519,  364,  518,  466,  466,  466,  466,

      355,  432,  433,  340,  432,  341,  342,  333,  333,  333,
      333,  615,  467,  494,  615,  410,  334,  468,  501,  501,
      501,  501, 1091,  333,  333,  337, 1090,  437,  438,  502,
      437,  505,  471,  410,  501,  501,  502,  520,  524,  525,
      816,  524,  442,  443,  335,  442,  346,  541,  542,  355,
      541,  347,  348, 1089,  621,  501,  545,  546,  957,  545,
      549,  550,  816,  549,  552,  553, 1088,  552,  615,  623,
      340,  615,  341,  342,  350,  617, 1083,  350,  631,  604,
      957,  631,  604,  526,  501,  357,  351,  351,  357,  352,
      353, 1023,  543,  354,  354,  355,  450,  451,  303,  450,

      364,  547,  605, 1082,  606,  551,  355,  813, 1079,  554,
      618,  621,  361, 1023,  362,  362,  362,  304,  607,  631,
      313,  363,  631,  798,  363,  606,  798,  312,  813,  312,
      312,  733,  312,  312,  312,  656,  364,  619,  313,  656,
      607, 1078,  355,  602,  355,  405,  405,  621,  405,  405,
      405,  406,  306,  405,  405,  355,  405,  405,  405,  344,
      405,  656,  405,  408,  602, 1150,  733,  408,  405,  409,
      312,  363,  312,  312,  363,  312,  312,  312,  883,  627,
      628,  313,  627, 1077,  454,  602,  624,  454,  405,  408,
      405,  355,  355,  733,  629, 1076, 1151,  369,  455,  883,

      630,  369,  344,  313,  368,  369,  602,  463,  464,  369,
      463,  382,  382,  382,  382,  405,  405,  405,  405,  333,
      333,  333,  333,  369,  400,  401, 1075,  383, 1074,  401,
     1151,  369,  384, 1151, 1073,  333,  333,  582, 1151,  401,
     1151,  355, 1072,  401,  634,  388,  388,  388,  388,  630,
      808,  401,  385,  808, 1071, 1070,  333,  382,  382,  382,
      382,  383, 1069,  338,  339,  401,  384,  474,  475,  732,
      474, 1068,  732,  383, 1151, 1151, 1151, 1151,  384,  390,
      798, 1151,  340,  798,  341,  342,  333,  333,  333,  333,
     1151,  394,  394,  394,  394, 1151,  483,  484,  395,  483,

     1067, 1066,  333,  333,  333, 1065, 1064, 1063,  388,  388,
      388,  388, 1062,  488,  489,  385,  488,  387,  382,  382,
      382,  382, 1061,  582,  383,  394,  394,  394,  394,  384,
      338,  339,  395, 1060,  383, 1151, 1151, 1151, 1151,  384,
      390,  528, 1151, 1058,  492,  493, 1151,  492, 1057,  340,
     1056,  341,  342,  589,  503,  504,  589,  503,  589,  589,
      589,  589,  589,  589,  589,  590,  589,  591,  589,  591,
      592,  589,  410, 1055, 1054,  589,  589,  589,  594, 1053,
      387,  400,  401,  412,  413, 1052,  401, 1051,  413, 1050,
      410,  518,  519, 1151,  518, 1049,  589,  589,  589,  418,

      418,  418,  418,  785, 1151,  413,  785, 1047,  401,  413,
      413, 1151,  448,  449,  985,  419, 1046,  449, 1045,  615,
      420,  643,  615,  589,  589,  589,  589,  589,  589,  615,
      410,  413,  615, 1044, 1043, 1151, 1151, 1151, 1151,  449,
      650,  412,  413,  650,  524,  525,  413,  524,  410, 1042,
      426, 1151, 1151, 1151, 1041,  424,  424,  424,  424, 1040,
     1039,  786,  421, 1151, 1151, 1151, 1151, 1038,  413, 1036,
     1151,  419, 1151,  819, 1035, 1034,  420, 1151,  449, 1151,
     1031,  648,  449,  604, 1151, 1030,  604,  425,  418,  418,
      425, 1025,  428,  428,  428,  428, 1024,  426, 1151,  429,

     1151, 1151,  350,  419,  449,  350,  605,  885,  420,  428,
      428,  428,  428, 1022,  351,  351,  429,  352,  353, 1021,
     1020,  354,  354,  355, 1019,  923,  303,  423,  924, 1018,
      424,  424,  424,  424, 1017, 1151, 1016,  421,  425,  418,
      418,  425, 1015, 1014,  725,  304,  419,  725,  426,  541,
      542,  420,  541, 1013,  419, 1151, 1151, 1151, 1151,  420,
      527,  528, 1151,  527, 1012,  448,  449,  605,  545,  546,
      449,  545,  355,  405,  405, 1011,  405,  405,  405,  644,
      615,  405,  405,  615,  405,  405,  405, 1010,  405, 1009,
      645,  408,  449, 1008, 1007,  408,  405,  409,  425,  418,

      418,  425,  423,  529,  615,  657, 1006,  615,  426,  458,
      458,  458,  458, 1005,  419, 1004,  405,  408,  405,  420,
      458,  458,  458,  458, 1002,  549,  550,  459,  549,  735,
      461, 1001,  998,  466,  466,  466,  466,  997,  460,  460,
      460,  461,  996,  405,  405,  405,  405,  405,  405,  467,
      405,  405,  405,  644,  468,  405,  405,  995,  405,  405,
      405,  994,  405,  650,  405,  408,  650,  962,  993,  408,
      405,  405,  992,  426,  991,  458,  458,  458,  458,  990,
      552,  553,  459,  552,  989,  985,  466,  466,  466,  466,
      405,  408,  405,  460,  460,  460,  461,  625,  988,  626,

      626,  626,  467,  458,  458,  458,  458,  468,  725, 1003,
      459,  725, 1003,  615,  987,  986,  615,  405,  405,  405,
      405,  660,  660,  660,  461,  472,  472,  472,  472,  983,
      982,  605,  469, 1151, 1151, 1151, 1151,  368,  633,  981,
     1151,  467,  633,  980, 1098,  615,  468, 1098,  615, 1151,
      477,  477,  477,  477, 1151,  979,  621,  478,  472,  472,
      472,  472,  739,  978,  633,  469,  466,  466,  466,  466,
      477,  477,  477,  477,  467, 1151,  633,  478,  615,  468,
      633,  615,  467, 1151, 1151, 1151, 1151,  468,  621,  977,
     1151,  732,  627,  628,  732,  627,  976,  471,  733,  738,

      627,  628,  633,  627,  975, 1151,  974,  740,  627,  628,
      972,  627,  316,  630,  312,  741,  312,  807,  971,  970,
      967,  630,  316,  742,  312,  313,  312,  807, 1026,  630,
      471,  589,  313,  733,  589,  313,  589,  589,  589,  589,
      589,  589,  589,  590,  589,  591,  589,  591,  716,  589,
      966,  961,  960,  589,  589,  589,  594,  815,  627,  628,
      733,  627,  630,  745,  745,  745,  745,  400,  642,  956,
      630,  955,  642,  741,  589,  717,  589,  715,  630,  630,
      368,  369,  954,  953,  952,  369,  746,  747,  747,  747,
      747,  951, 1151,  642,  642,  400,  401,  642,  950,  949,

      401,  589,  589,  589,  589,  589,  589,  369,  948,  814,
      746,  615,  814,  884,  615,  947,  884,  946,  743,  642,
      615,  887,  401,  615,  887,  945,  448,  656,  630,  944,
      943,  656,  815,  749,  405,  405,  885,  405,  405,  405,
      644,  942,  405,  405,  815,  405,  405,  405,  410,  405,
      939,  405,  751,  656,  621,  938,  751,  405,  405,  412,
      647,  937,  959,  621,  647,  959,  410, 1151,  656,  821,
      934, 1151,  656,  615,  822,  933,  615,  405,  751,  405,
      410, 1129, 1151,  647, 1129,  885,  647,  647,  932, 1151,
     1138,  412,  413, 1138,  656,  931,  413,  929,  410, 1140,

      615,  928, 1140,  615,  405,  405,  405,  405,  927,  647,
      448,  449,  926,  627,  628,  449,  627,  925,  413,  922,
      458,  458,  458,  458,  921,  918,  917,  758,  740,  752,
      916,  890,  887,  959,  630,  887,  959,  449,  759,  759,
      759,  461,  761,  761,  761,  761, 1120,  915,  757,  459,
      458,  458,  458,  458,  914,  815,  885,  459,  458,  458,
      458,  458,  913,  461, 1143,  459,  912, 1143,  660,  660,
      660,  461,  627,  628,  911,  627,  660,  660,  660,  461,
      910,  627,  628,  630,  627,  368,  369,  823,  615,  615,
      369,  615,  615,  630,  909,  908,  742,  745,  745,  745,

      745, 1140,  630,  907, 1140,  313,  747,  747,  747,  747,
      400,  401,  369,  448,  449,  401,  368,  369,  449,  615,
      746,  369,  615,  761,  761,  761,  761,  824,  906,  746,
      459,  621,  621,  905,  901,  900,  615,  401,  892,  615,
      449,  899,  630,  369,  461,  615, 1143,  893,  615, 1143,
      894,  630,  827,  405,  405,  832,  405,  405,  405,  644,
     1149,  405,  405, 1149,  405,  405,  405,  410,  405,  615,
      645,  751,  615,  896,  895,  751,  405,  409,  412,  413,
     1084, 1080,  891,  413, 1080,  410,  889,  888,  458,  458,
      458,  458,  882,  881, 1105,  758,  405,  751,  405, 1104,

      615, 1132, 1104,  615, 1081,  413,  759,  759,  759,  461,
      615,  880,  621,  615,  400,  401,  963,  715,  615,  401,
      828,  615, 1081,  405,  405,  405,  405,  405,  405,  878,
      405,  405,  405,  644,  877,  405,  405,  876,  405,  405,
      405,  401,  405,  621,  405,  751,  577,  875,  897,  751,
      405,  405,  874,  621,  873,  458,  458,  458,  458,  872,
     1028,  621,  758,  964, 1122, 1104,  627,  628, 1104,  627,
      405,  751,  405,  759,  759,  759,  461,  844,  845,  448,
      449,  740,  846,  871,  449,  847,  848,  630, 1081,  870,
      849,  869,  410,  850,  851,  868,  852,  405,  405,  405,

      405,  867,  866,  412,  413,  865,  449,  864,  413, 1140,
      410,  863, 1140,  902,  458,  458,  458,  458,  368,  369,
      862,  758,  861,  369,  400,  401,  448,  449,  410,  401,
      413,  449,  903,  903,  903,  461,  630,  898,  860,  412,
      413,  859,  858,  857,  413,  369,  410,  615,  856,  965,
      615,  401,  621,  449,  855,  968,  854,  973,  458,  458,
      458,  458,  368,  369,  853,  758,  413,  369,  400,  401,
      969, 1085,  306,  401, 1085,  843,  903,  903,  903,  461,
      458,  458,  458,  458,  842,  615,  841,  758,  615,  369,
      621,  448,  449,  410,  840,  401,  449,  839,  903,  903,

      903,  461,  838,  837,  412,  413,  836, 1029, 1027,  413,
      481,  410,  835, 1032, 1086,  368,  369,  834,  449,  831,
      369,  400,  401,  410,  448,  449,  401,  615,  621,  449,
      615,  413,  830,  829,  412,  413, 1037, 1085,  306,  413,
     1085,  410,  369,  826,  615,  825, 1087,  615,  401, 1033,
      621,  449,  305,  306,  707,  305,  734,  820,  734,  734,
      734,  413,  707,  818,  817,  707,  707,  707,  605,  737,
      621,  737,  737,  737,  811,  707,  810,  805,  707,  707,
      307,  804,  803,  802,  577, 1107,  734,  621,  734,  734,
      734,  800,  799,  705,  737, 1086,  737,  737,  737,  797,

     1134,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  162,  162,  162,  162,  162,  162,  162,

      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,

      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  282,  282,  282,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,

      295,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  308,  308,  796,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  311,  795,  794,  793,  792,
      791,  790,  789,  788,  787,  784,  783,  782,  780,  779,
      311,  778,  311,  311,  311,  777,  776,  775,  774,  311,
      312,  773,  312,  312,  772,  312,  771,  769,  768,  312,

      312,  767,  312,  312,  312,  319,  766,  319,  319,  319,
      319,  765,  319,  481,  763,  762,  319,  319,  319,  319,
      319,  319,  336,  336,  336,  756,  755,  754,  753,  390,
      336,  748,  744,  731,  730,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  729,  336,  336,  343,  721,  343,
      343,  720,  343,  718, 1151,  313,  343,  343,  313,  343,
      343,  343,  345,  345,  345,  313,  715,  585,  713,  712,
      345,  711,  710,  577,  708,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  706,  345,  345,  365,  365,  703,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  367,
      700,  699,  561,  698,  697,  367,  556,  367,  367,  367,
      367,  367,  696,  695,  367,  367,  367,  367,  367,  367,
      694,  693,  692,  691,  367,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  375,  688,  375,
      375,  375,  687,  686,  685,  684,  375,  377,  681,  377,
      377,  530,  680,  679,  377,  678,  377,  377,  377,  677,

      676,  511,  511,  377,  386,  386,  386,  386,  675,  674,
      386,  672,  505,  500,  671,  670,  669,  668,  386,  487,
      667,  386,  481,  665,  481,  386,  663,  386,  386,  386,
      467,  662,  659,  386,  386,  389,  389,  389,  389,  446,
      654,  441,  653,  436,  652,  419,  644,  644,  644,  389,
      398,  389,  389,  389,  390,  639,  389,  383,  389,  389,
      389,  636,  376,  635,  374,  389,  396,  396,  396,  396,
      366,  349,  396,  616,  614,  611,  610,  609,  596,  313,
      313,  585,  309,  583,  580,  578,  577,  396,  574,  396,
      396,  396,  572,  571,  569,  567,  396,  397,  397,  566,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  399,
      564,  559,  530,  516,  515,  399,  514,  399,  399,  399,
      399,  399,  512,  511,  399,  399,  399,  399,  399,  399,
      507,  500,  496,  487,  399,  407,  407,  481,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  411,  411,  467,
      446,  441,  436,  419,  411,  398,  411,  411,  411,  411,

      411,  398,  411,  411,  411,  411,  411,  411,  411,  383,
      374,  366,  349,  411,  422,  422,  422,  422,  313,  310,
      422,  309, 1151,  117,  117, 1151, 1151, 1151,  422, 1151,
     1151,  422, 1151, 1151, 1151,  422, 1151,  422,  422,  422,
     1151, 1151, 1151,  422,  422,  427,  427,  427,  427, 1151,
     1151, 1151, 1151,  427, 1151, 1151, 1151, 1151, 1151,  427,
     1151,  427,  427, 1151, 1151, 1151,  427, 1151,  427,  427,
      427, 1151, 1151, 1151, 1151,  427,  430,  430,  430,  430,
     1151, 1151,  430, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151,  430, 1151,  430,

      430,  430, 1151, 1151, 1151, 1151,  430,  431, 1151, 1151,
      431, 1151, 1151, 1151, 1151,  431, 1151,  431,  431,  431,
     1151, 1151, 1151, 1151,  431,  435,  435, 1151,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  440,  440, 1151,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  445,
      445, 1151,  445,  445,  445,  445,  445,  445,  445,  445,

      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  447, 1151, 1151, 1151, 1151, 1151,  447, 1151,  447,
      447,  447,  447,  447, 1151, 1151,  447,  447,  447,  447,
      447,  447, 1151, 1151, 1151, 1151,  447,  453, 1151,  453,
      453,  453, 1151, 1151, 1151, 1151,  453,  456, 1151, 1151,
      456, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,  456,
     1151, 1151, 1151,  456, 1151, 1151, 1151, 1151,  456, 1151,
      456,  456,  456, 1151, 1151, 1151, 1151,  456,  457, 1151,
      457,  457,  457, 1151, 1151, 1151, 1151,  457,  462,  462,

      462,  462, 1151, 1151,  462, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151,  462,  462, 1151, 1151, 1151,  462,
     1151,  462,  462,  462, 1151, 1151, 1151, 1151,  462,  470,
      470,  470,  470, 1151, 1151,  470, 1151, 1151, 1151, 1151,
     1151, 1151, 1151,  470, 1151, 1151,  470, 1151, 1151, 1151,
      470, 1151,  470,  470,  470, 1151, 1151, 1151,  470,  470,
      473,  473,  473,  473, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151,  473, 1151,  473,  473, 1151, 1151,
     1151,  473, 1151,  473,  473,  473, 1151, 1151, 1151, 1151,
      473,  479,  479,  479,  479, 1151, 1151,  479, 1151, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151,  479, 1151,  479,  479,  479, 1151, 1151, 1151,
     1151,  479,  480, 1151,  480,  480,  480, 1151, 1151, 1151,
     1151,  480,  482, 1151,  482, 1151, 1151, 1151, 1151,  482,
     1151,  482,  482,  482, 1151, 1151, 1151, 1151,  482,  486,
      486, 1151,  486, 1151, 1151, 1151, 1151,  486, 1151,  486,
      486,  486, 1151, 1151, 1151, 1151,  486,  491,  491, 1151,
      491,  491,  491,  491,  491,  491,  491,  491, 1151,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
     1151,  491,  491,  491,  491,  491,  491,  491,  491,  495,

     1151, 1151,  495, 1151, 1151, 1151, 1151,  495, 1151,  495,
      495,  495, 1151, 1151, 1151, 1151,  495,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497, 1151,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  499,
      499, 1151,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
     1151,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  501,  501, 1151,  501, 1151,  501,  501,  501, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,  501,

      501,  501, 1151,  501,  501, 1151, 1151, 1151, 1151, 1151,
      501,  506, 1151, 1151,  506, 1151, 1151, 1151, 1151,  506,
     1151,  506,  506,  506, 1151, 1151, 1151, 1151,  506,  510,
      510, 1151,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  513,  513, 1151,  513, 1151,  513,  513,  513,  513,
      513,  513, 1151,  513,  513,  513,  513, 1151,  513,  513,
      513,  513, 1151,  513, 1151,  513,  513,  513,  513,  513,
      513,  513,  513,  523, 1151, 1151,  523, 1151, 1151, 1151,

     1151,  523, 1151, 1151, 1151, 1151,  523,  523, 1151,  523,
     1151, 1151, 1151, 1151,  523, 1151,  523,  523,  523,  531,
      531, 1151,  531, 1151,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
     1151,  531, 1151,  531,  531,  531,  531,  531,  531,  531,
      531,  535,  535, 1151,  535, 1151,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535, 1151,  535, 1151,  535,  535,  535,  535,  535,
      535,  535,  535,  544, 1151, 1151,  544, 1151, 1151, 1151,
     1151,  544, 1151,  544,  544,  544, 1151, 1151, 1151, 1151,

      544,  548,  548, 1151,  548,  548,  548,  548,  548,  548,
     1151, 1151,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548, 1151,  548, 1151,  548,  548,  548,  548,  548,
      548,  548,  548,  555, 1151,  555,  555,  555, 1151, 1151,
     1151, 1151,  555,  557, 1151,  557,  557, 1151, 1151, 1151,
      557, 1151,  557,  557,  557, 1151, 1151, 1151, 1151,  557,
      560, 1151,  560,  560,  560, 1151, 1151, 1151, 1151,  560,
      562, 1151,  562,  562, 1151, 1151, 1151,  562, 1151,  562,
      562,  562, 1151, 1151, 1151, 1151,  562,  565,  565, 1151,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,

      565,  565,  565,  565,  565,  565,  565,  565, 1151,  565,
     1151,  565,  565,  565,  565,  565,  565,  565,  565,  568,
     1151, 1151,  568, 1151, 1151, 1151, 1151,  568, 1151,  568,
      568,  568, 1151, 1151, 1151, 1151,  568,  570,  570, 1151,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570, 1151,  570,  570,  570,  570,  570,  570,  570,  570,
     1151,  570,  570,  570,  570,  570,  570,  570,  570,  573,
      573, 1151,  573,  573,  573,  573,  573,  573,  573,  573,
     1151,  573,  573,  573,  573,  573,  573,  573,  573,  573,
     1151,  573, 1151,  573,  573,  573,  573,  573,  573,  573,

      573,  576, 1151,  576,  576,  576,  576,  576, 1151, 1151,
     1151,  576, 1151,  576,  576,  576, 1151, 1151, 1151, 1151,
      576,  579,  579, 1151,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579, 1151,  579,  579,  579,  579,  579,
      579,  579,  579,  581,  581,  581,  581,  581,  581,  581,
      581,  581, 1151, 1151,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  336,  336,  336, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,  336,  336,

      336,  336,  336,  336,  336,  336,  336, 1151,  336,  336,
      308,  308, 1151,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  311, 1151,  311,  311,  311, 1151, 1151, 1151,
     1151,  311,  584,  584, 1151, 1151, 1151,  584, 1151,  584,
      584,  584, 1151, 1151, 1151, 1151,  584,  312, 1151,  312,
      312, 1151,  312, 1151, 1151, 1151,  312,  312, 1151,  312,
      312,  312,  586, 1151, 1151,  586, 1151, 1151, 1151, 1151,
      586, 1151,  586,  586,  586,  593, 1151, 1151,  593, 1151,

      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  612, 1151,  612,
      612,  612, 1151, 1151, 1151,  612,  620, 1151, 1151, 1151,
     1151, 1151, 1151, 1151,  620, 1151,  620,  620,  620,  343,
     1151,  343,  343, 1151,  343, 1151, 1151, 1151,  343,  343,
     1151,  343,  343,  343,  345, 1151, 1151,  345, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151,  345,  345,  345,  345,  345,
      365,  365, 1151,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  367, 1151, 1151, 1151, 1151, 1151,  367, 1151,
      367,  367,  367,  367,  367, 1151, 1151,  367,  367,  367,
      367,  367,  367, 1151, 1151, 1151, 1151,  367,  632, 1151,
     1151, 1151, 1151, 1151,  632, 1151,  632, 1151,  632,  632,
      632, 1151, 1151,  632,  632,  632,  632,  632,  632, 1151,
     1151, 1151, 1151,  632,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  373,  373,  373,  373,  377, 1151,  377,  377,
     1151, 1151, 1151,  377, 1151,  377,  377,  377, 1151, 1151,
     1151, 1151,  377,  375, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,  375, 1151,
      375,  375,  375, 1151, 1151, 1151, 1151,  375,  386,  386,
      386,  386, 1151, 1151,  386, 1151, 1151, 1151, 1151, 1151,
     1151, 1151,  386, 1151, 1151,  386, 1151, 1151, 1151,  386,
     1151,  386,  386,  386, 1151, 1151, 1151,  386,  386,  389,
      389,  389,  389, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151,  389, 1151,  389,  389,  389, 1151, 1151,

      389, 1151,  389,  389,  389, 1151, 1151, 1151, 1151,  389,
      396,  396,  396,  396, 1151, 1151,  396, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151,  396, 1151,  396,  396,  396, 1151, 1151, 1151, 1151,
      396,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637, 1151,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  640, 1151,  640, 1151, 1151,  640, 1151,
      640,  640,  640, 1151, 1151, 1151, 1151,  640,  397,  397,
     1151,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      399, 1151, 1151, 1151, 1151, 1151,  399, 1151,  399,  399,
      399,  399,  399, 1151, 1151,  399,  399,  399,  399,  399,
      399, 1151, 1151, 1151, 1151,  399,  641, 1151, 1151, 1151,
     1151, 1151,  641, 1151,  641, 1151,  641,  641,  641, 1151,
     1151,  641,  641,  641,  641,  641,  641, 1151, 1151, 1151,
     1151,  641,  405,  405, 1151,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  407,  407, 1151,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  411,  411, 1151, 1151,
     1151, 1151, 1151,  411, 1151,  411,  411,  411,  411,  411,
     1151,  411,  411,  411,  411,  411,  411,  411, 1151, 1151,
     1151, 1151,  411,  646, 1151, 1151, 1151, 1151, 1151,  646,
     1151,  646, 1151,  646,  646,  646, 1151, 1151,  646,  646,
      646,  646,  646,  646, 1151, 1151, 1151, 1151,  646,  422,
      422,  422,  422, 1151, 1151,  422, 1151, 1151, 1151, 1151,

     1151, 1151, 1151,  422, 1151, 1151,  422, 1151, 1151, 1151,
      422, 1151,  422,  422,  422, 1151, 1151, 1151,  422,  422,
      427,  427,  427,  427, 1151, 1151, 1151, 1151,  427, 1151,
     1151, 1151, 1151, 1151,  427, 1151,  427,  427, 1151, 1151,
     1151,  427, 1151,  427,  427,  427, 1151, 1151, 1151, 1151,
      427,  430,  430,  430,  430, 1151, 1151,  430, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151,  430, 1151,  430,  430,  430, 1151, 1151, 1151,
     1151,  430,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649, 1151,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  651, 1151, 1151,  651, 1151, 1151,
     1151, 1151,  651, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
      651, 1151, 1151, 1151, 1151,  651, 1151,  651,  651,  651,
     1151, 1151, 1151, 1151,  651,  431, 1151, 1151,  431, 1151,
     1151, 1151, 1151,  431, 1151,  431,  431,  431, 1151, 1151,
     1151, 1151,  431,  435,  435, 1151,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  440,  440, 1151,  440,  440,

      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  445,  445, 1151,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  447,
     1151, 1151, 1151, 1151, 1151,  447, 1151,  447,  447,  447,
      447,  447, 1151, 1151,  447,  447,  447,  447,  447,  447,
     1151, 1151, 1151, 1151,  447,  655, 1151, 1151, 1151, 1151,
     1151,  655, 1151,  655, 1151,  655,  655,  655, 1151, 1151,

      655,  655,  655,  655,  655,  655, 1151, 1151, 1151, 1151,
      655,  456, 1151, 1151,  456, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151,  456, 1151, 1151, 1151,  456, 1151, 1151,
     1151, 1151,  456, 1151,  456,  456,  456, 1151, 1151, 1151,
     1151,  456,  462,  462,  462,  462, 1151, 1151,  462, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,  462,  462,
     1151, 1151, 1151,  462, 1151,  462,  462,  462, 1151, 1151,
     1151, 1151,  462,  658, 1151,  658,  658,  658, 1151, 1151,
     1151, 1151,  658,  661,  661,  661,  661, 1151, 1151,  661,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,  661,

      661, 1151, 1151, 1151,  661, 1151,  661,  661,  661, 1151,
     1151, 1151, 1151,  661,  470,  470,  470,  470, 1151, 1151,
      470, 1151, 1151, 1151, 1151, 1151, 1151, 1151,  470, 1151,
     1151,  470, 1151, 1151, 1151,  470, 1151,  470,  470,  470,
     1151, 1151, 1151,  470,  470,  473,  473,  473,  473, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,  473,
     1151,  473,  473, 1151, 1151, 1151,  473, 1151,  473,  473,
      473, 1151, 1151, 1151, 1151,  473,  479,  479,  479,  479,
     1151, 1151,  479, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151,  479, 1151,  479,

      479,  479, 1151, 1151, 1151, 1151,  479,  664, 1151, 1151,
     1151, 1151,  664, 1151,  664,  664,  664, 1151, 1151, 1151,
     1151,  664,  482, 1151,  482, 1151, 1151, 1151, 1151,  482,
     1151,  482,  482,  482, 1151, 1151, 1151, 1151,  482,  666,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151,  666, 1151,  666,  666,  666, 1151,
     1151, 1151, 1151,  666,  486,  486, 1151,  486, 1151, 1151,
     1151, 1151,  486, 1151,  486,  486,  486, 1151, 1151, 1151,
     1151,  486,  491,  491, 1151,  491,  491,  491,  491,  491,
      491,  491,  491, 1151,  491,  491,  491,  491,  491,  491,

      491,  491,  491,  491,  491, 1151,  491,  491,  491,  491,
      491,  491,  491,  491,  495, 1151, 1151,  495, 1151, 1151,
     1151, 1151,  495, 1151,  495,  495,  495, 1151, 1151, 1151,
     1151,  495,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497, 1151,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  499,  499, 1151,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499, 1151,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  673, 1151, 1151, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151,  673, 1151,  673,  673,  673, 1151, 1151, 1151, 1151,
      673,  506, 1151, 1151,  506, 1151, 1151, 1151, 1151,  506,
     1151,  506,  506,  506, 1151, 1151, 1151, 1151,  506,  510,
      510, 1151,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  513,  513, 1151,  513, 1151,  513,  513,  513,  513,
      513,  513, 1151,  513,  513,  513,  513, 1151,  513,  513,
      513,  513, 1151,  513, 1151,  513,  513,  513,  513,  513,

      513,  513,  513,  523, 1151, 1151,  523, 1151, 1151, 1151,
     1151,  523, 1151, 1151, 1151, 1151,  523,  523, 1151,  523,
     1151, 1151, 1151, 1151,  523, 1151,  523,  523,  523,  531,
      531, 1151,  531, 1151,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
     1151,  531, 1151,  531,  531,  531,  531,  531,  531,  531,
      531,  535,  535, 1151,  535, 1151,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535, 1151,  535, 1151,  535,  535,  535,  535,  535,
      535,  535,  535,  544, 1151, 1151,  544, 1151, 1151, 1151,

     1151,  544, 1151,  544,  544,  544, 1151, 1151, 1151, 1151,
      544,  548,  548, 1151,  548,  548,  548,  548,  548,  548,
     1151, 1151,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548, 1151,  548, 1151,  548,  548,  548,  548,  548,
      548,  548,  548,  557, 1151,  557,  557, 1151, 1151, 1151,
      557, 1151,  557,  557,  557, 1151, 1151, 1151, 1151,  557,
      555, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151,  555, 1151,  555,  555,  555,
     1151, 1151, 1151, 1151,  555,  562, 1151,  562,  562, 1151,
     1151, 1151,  562, 1151,  562,  562,  562, 1151, 1151, 1151,

     1151,  562,  560, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151,  560, 1151,  560,
      560,  560, 1151, 1151, 1151, 1151,  560,  565,  565, 1151,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565, 1151,  565,
     1151,  565,  565,  565,  565,  565,  565,  565,  565,  568,
     1151, 1151,  568, 1151, 1151, 1151, 1151,  568, 1151,  568,
      568,  568, 1151, 1151, 1151, 1151,  568,  570,  570, 1151,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570, 1151,  570,  570,  570,  570,  570,  570,  570,  570,

     1151,  570,  570,  570,  570,  570,  570,  570,  570,  573,
      573, 1151,  573,  573,  573,  573,  573,  573,  573,  573,
     1151,  573,  573,  573,  573,  573,  573,  573,  573,  573,
     1151,  573, 1151,  573,  573,  573,  573,  573,  573,  573,
      573,  576, 1151,  576,  576,  576,  576,  576, 1151, 1151,
     1151,  576, 1151,  576,  576,  576, 1151, 1151, 1151, 1151,
      576,  709, 1151, 1151, 1151, 1151,  709, 1151,  709,  709,
      709, 1151, 1151, 1151, 1151,  709,  579,  579, 1151,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579, 1151,

      579,  579,  579,  579,  579,  579,  579,  579,  581,  581,
      581,  581,  581,  581,  581,  581,  581, 1151, 1151,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      584,  584, 1151, 1151, 1151,  584, 1151,  584,  584,  584,
     1151, 1151, 1151, 1151,  584,  714,  714, 1151,  714,  714,
      714,  714, 1151,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  586,  586, 1151,
      586, 1151, 1151, 1151, 1151,  586, 1151,  586,  586,  586,

      312, 1151,  312,  312, 1151,  312, 1151, 1151, 1151,  312,
      312, 1151,  312,  312,  312,  593, 1151, 1151,  593, 1151,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  724,  724, 1151,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  612,
     1151, 1151,  612, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,

      612, 1151,  612,  612,  612,  336, 1151, 1151,  336, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151,  336, 1151,  336,  336,
      336,  736,  736, 1151,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
     1151,  736,  736,  620, 1151, 1151, 1151, 1151, 1151, 1151,
     1151,  620, 1151,  620,  620,  620,  345, 1151, 1151,  345,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151,  345,  345,  345,

      345,  345,  632, 1151, 1151, 1151, 1151, 1151,  632, 1151,
      632,  632,  632,  632,  632, 1151, 1151,  632,  632,  632,
      632,  632,  632, 1151, 1151, 1151, 1151,  632,  367, 1151,
     1151, 1151, 1151, 1151,  367, 1151,  367,  367,  367,  367,
      367, 1151, 1151,  367,  367,  367,  367,  367,  367, 1151,
     1151, 1151, 1151,  367,  375, 1151,  375,  375,  375, 1151,
     1151, 1151, 1151,  375,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  640, 1151,  640, 1151,

     1151,  640, 1151,  640,  640,  640, 1151, 1151, 1151, 1151,
      640,  641, 1151, 1151, 1151, 1151, 1151,  641, 1151,  641,
      641,  641,  641,  641, 1151, 1151,  641,  641,  641,  641,
      641,  641, 1151, 1151, 1151, 1151,  641,  399, 1151, 1151,
     1151, 1151, 1151,  399, 1151,  399,  399,  399,  399,  399,
     1151, 1151,  399,  399,  399,  399,  399,  399, 1151, 1151,
     1151, 1151,  399,  750,  750, 1151,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  646,  646, 1151, 1151, 1151,

     1151, 1151,  646, 1151,  646,  646,  646,  646,  646, 1151,
      646,  646,  646,  646,  646,  646,  646, 1151, 1151, 1151,
     1151,  646,  411,  411, 1151, 1151, 1151, 1151, 1151,  411,
     1151,  411,  411,  411,  411,  411, 1151,  411,  411,  411,
      411,  411,  411,  411, 1151, 1151, 1151, 1151,  411,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  651, 1151, 1151,  651, 1151, 1151, 1151, 1151,  651,
     1151, 1151, 1151, 1151, 1151, 1151, 1151,  651, 1151, 1151,

     1151, 1151,  651, 1151,  651,  651,  651, 1151, 1151, 1151,
     1151,  651,  655, 1151, 1151, 1151, 1151, 1151,  655, 1151,
      655,  655,  655,  655,  655, 1151, 1151,  655,  655,  655,
      655,  655,  655, 1151, 1151, 1151, 1151,  655,  447, 1151,
     1151, 1151, 1151, 1151,  447, 1151,  447,  447,  447,  447,
      447, 1151, 1151,  447,  447,  447,  447,  447,  447, 1151,
     1151, 1151, 1151,  447,  760,  760,  760,  760, 1151, 1151,
      760, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
      760,  760, 1151, 1151, 1151,  760, 1151,  760,  760,  760,
     1151, 1151, 1151, 1151,  760,  658,  658,  658,  658, 1151,

     1151,  658, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151,  658, 1151, 1151, 1151,  658, 1151,  658,  658,
      658, 1151, 1151, 1151, 1151,  658,  661,  661,  661,  661,
     1151, 1151,  661, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151,  661,  661, 1151, 1151, 1151,  661, 1151,  661,
      661,  661, 1151, 1151, 1151, 1151,  661,  664, 1151, 1151,
     1151, 1151,  664, 1151,  664,  664,  664, 1151, 1151, 1151,
     1151,  664,  666, 1151,  666,  666,  666, 1151, 1151, 1151,
     1151,  666,  764, 1151,  764, 1151, 1151, 1151, 1151,  764,
     1151,  764,  764,  764, 1151, 1151, 1151, 1151,  764,  673,

     1151,  673,  673,  673, 1151, 1151, 1151, 1151,  673,  770,
     1151, 1151, 1151, 1151,  770, 1151,  770,  770,  770, 1151,
     1151, 1151, 1151,  770,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781, 1151,  781,  781,  781,  781, 1151,  781, 1151, 1151,
      781,  781,  781,  781,  781,  781,  555, 1151,  555,  555,
      555, 1151, 1151, 1151, 1151,  555,  560, 1151,  560,  560,
      560, 1151, 1151, 1151, 1151,  560,  801, 1151,  801,  801,
      801,  801,  801, 1151, 1151, 1151,  801, 1151,  801,  801,
      801, 1151, 1151, 1151, 1151,  801,  714,  714, 1151,  714,

      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  806, 1151,
     1151,  806, 1151, 1151, 1151, 1151,  806, 1151,  806,  806,
      806,  319, 1151,  319, 1151,  319,  319, 1151,  319, 1151,
     1151, 1151,  319,  319, 1151,  319,  319,  319,  724,  724,
     1151,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      336, 1151, 1151,  336, 1151, 1151, 1151, 1151, 1151, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151,  336, 1151,  336,  336,  336,  736,  736, 1151,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  737,  737,
      737,  737,  737,  345, 1151, 1151,  345, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151,  345,  345,  345,  345,  345,  312,
      312, 1151,  312, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
      312, 1151,  312,  312, 1151,  312,  312, 1151, 1151,  312,

      312, 1151,  312,  312,  312, 1151,  312,  367, 1151, 1151,
     1151, 1151, 1151,  367, 1151,  367,  367,  367,  367,  367,
     1151, 1151,  367,  367,  367,  367,  367,  367, 1151, 1151,
     1151, 1151,  367,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  399, 1151, 1151, 1151, 1151,
     1151,  399, 1151,  399,  399,  399,  399,  399, 1151, 1151,
      399,  399,  399,  399,  399,  399, 1151, 1151, 1151, 1151,
      399,  750,  750, 1151,  750,  750,  750,  750,  750,  750,

      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  411,  411, 1151, 1151, 1151, 1151, 1151,
      411, 1151,  411,  411,  411,  411,  411, 1151,  411,  411,
      411,  411,  411,  411,  411, 1151, 1151, 1151, 1151,  411,
      447, 1151, 1151, 1151, 1151, 1151,  447, 1151,  447,  447,
      447,  447,  447, 1151, 1151,  447,  447,  447,  447,  447,
      447, 1151, 1151, 1151, 1151,  447,  833, 1151,  833,  833,
      833, 1151, 1151, 1151, 1151,  833,  760,  760,  760,  760,
     1151, 1151,  760, 1151, 1151, 1151, 1151, 1151, 1151, 1151,

     1151, 1151,  760,  760, 1151, 1151, 1151,  760, 1151,  760,
      760,  760, 1151, 1151, 1151, 1151,  760,  658,  658,  658,
      658, 1151, 1151,  658, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151,  658, 1151, 1151, 1151,  658, 1151,
      658,  658,  658, 1151, 1151, 1151, 1151,  658,  764, 1151,
      764, 1151, 1151, 1151, 1151,  764, 1151,  764,  764,  764,
     1151, 1151, 1151, 1151,  764,  770, 1151, 1151, 1151, 1151,
      770, 1151,  770,  770,  770, 1151, 1151, 1151, 1151,  770,
      879,  879, 1151,  879, 1151, 1151, 1151, 1151,  879, 1151,
      879,  879,  879,  886,  886, 1151,  886,  886,  886,  886,

      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  904,  904,  904,  904, 1151,
     1151,  904, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151,  904,  904, 1151, 1151, 1151,  904, 1151,  904,  904,
      904, 1151, 1151, 1151, 1151,  904,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930, 1151,  930,  930,  930,  930, 1151,  930,
     1151,  930, 1151,  930,  930,  930,  930,  930,  958,  958,
     1151,  958,  958,  958,  958,  958,  958,  958,  958,  958,

      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,
      999,  999,  999,  999,  999,  999,  999, 1151,  999,  999,
      999,  999, 1151,  999, 1151, 1151, 1151,  999,  999,  999,
      999,  999, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1151,
     1000, 1000, 1000, 1000, 1151, 1000, 1151, 1151, 1151, 1000,
     1000, 1000, 1000, 1000, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,

     1048, 1151, 1048, 1048, 1048, 1048, 1151, 1048, 1151, 1151,
     1151, 1048, 1048, 1048, 1048, 1048, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1151, 1059, 1059, 1059, 1059, 1151, 1059,
     1151, 1151, 1151, 1059, 1059, 1059, 1059, 1059, 1103, 1103,
     1151, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103,
     1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103,
     1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103,
       87, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151
    } ;

static yyconst flex_int16_t yy_chk[9858] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    4,   21,   22,    4,
       23,   21,   22,   24,   23,   49, 1146,   24,    4,    4,
       37,    4,    4,   38,   41,    4,    4,    4,   42,   50,

      104,   37,   59,  104,   38,   41,  241,  324,  121,   42,
      241,   45,   45,  121,   45,   60,   45,   41, 1144,   21,
       22,   42,   23,   46,   46,   24,   46,   49,   46,  324,
       53,   53,   37,   53,   65,   38,   41,   66,   83,   84,
       42,   50,   54,   54,   59,   54,    4,    5,    5,    5,
        5,    5,    5,    5,   45,    5,    5,   60,    5,    5,
        5,   47,    5,   47,    5,    5,   46,  290,  861,    5,
        5,    5,   47,   53, 1142,  861,   65,   47,  224,   66,
       83,   84,  267,  224,   47,   54,   48,  267,   48,   95,
        5,    5,    5,   55,  290,   55,   85,   48,   95,   77,

     1139,  175,   48,   47,  175,   85,   85,   95,   56,   48,
       56,   91,   91,   77,   91,  175,   55,    5,    5,    5,
        5,    6,    6,    6,    6,    6,    6,    6,   48,    6,
        6,   56,    6,    6,    6,   55,    6,   71,    6,    6,
       57,   77,   57,    6,    6,    6,   58,   63,   58,   86,
       56, 1136,  105,  326,   91,  105,   63,   63,   86,   86,
       71, 1135,  272,   57,    6,    6,    6,  272, 1106,   58,
       63,  131,  131,  131,  131,  326,  105,  229,  131,   71,
      229, 1106,   57,  153,  153,  153,  153,  229,   58,   63,
      153,    6,    6,    6,    6,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,   13,   13,
       13,   13,   13,   13,   72,   13,   13,   64,   13,   13,
       13,   73,   13,   74,   13,   13,   64,   64,   78,   13,
       13,   13,   79,  214,   80, 1131,  214,   72,  214,  532,
       64,  532,   78,   79,   73,   80,   74, 1128,  113,  113,
       13,   13,   13,  113,  406,   79,   72,   80,  108,   64,

      108,  108,  108,   73,   90,   74,  108,   90,  114,  114,
       78, 1127,  406,  114,   79,  113,   80,   13,   13,   13,
       13,   14,   14,   14,   14,   14,   14,   14,   90,   14,
       14, 1121,   14,   14,   14,  114,   14,  314,   14,   14,
      314,  205, 1121,   14,   14,   14,   96,   90,   96,   96,
       96,   96,  205,  124,  124,  124,  124,  135,  135,   96,
      122,  122,  135,  122,   14,   14,   14,  325,  320,  124,
       99,  320,   99,   99,  124,   99,   99,   99,   96,  130,
      130,   99,  130,  205,  135,  235,  235,  325,  235,  567,
     1126,   14,   14,   14,   14,   15,   15,   15,   15,   15,

       15,   15,   99,   15,   15,  122,   15,   15,   15,  325,
       15,  232,   15,   15,  232, 1125,  567,   15,   15,   15,
      101,  232,  101,  101,  130,  101,  101,  101,  235,  106,
      109,  101,  106,  109,  315,  106,  136,  136,   15,   15,
       15,  136,  375,  315,  106,  109,  539,  375, 1124,  242,
      106,  109,  101,  106,  242,  329,  351,  327,  242,  351,
      539,  157,  157,  136,  157,   15,   15,   15,   15,   16,
       16,   16,   16,   16,   16,   16,  329,   16,   16,  327,
       16,   16,   16, 1141,   16,  345,   16,   16,  345, 1123,
     1141,   16,   16,   16,  107,  107, 1119,  107,  330,  106,

      109,  125,  125,  125,  125,  107,  157,  107,  107,  107,
      107,  322,   16,   16,   16,  335,  356,  125,  107,  356,
      330, 1118,  125,  189,  189,  189,  189,  377,  345, 1116,
      189, 1115,  377,  322,  322,  322,  335,  107, 1114,   16,
       16,   16,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   25,   25,   25,   25,   25,

       25,   25, 1113,   25,   25,  368,   25,   25,   25,  368,
       25,  508,   25,   25,  508,  555,  508,   25,   25,   25,
      555,  129,  129,  129,  129,  126,  126,  126,  126, 1112,
     1111,  368,  126,  147,  147,  147,  147,  129,   25,   25,
       25,  126,  129,  129,  587,  142,  126,  587,  246,  147,
      161,  161,  246,  161,  147, 1110,  142,  142,  246,  339,
      246,  142, 1109,  142,  323,   25,   25,   25,   25,   26,
       26,   26,   26,   26,   26,   26,  323,   26,   26, 1108,
       26,   26,   26,  142,   26,  323,   26,   26,  143,  597,
     1103,   26,   26,   26,  339,  161,  557,  126,  323,  143,

      143,  557,  353,  353,  143,  353,  143,  148,  148,  148,
      148,  597,   26,   26,   26,  152,  152,  152,  152,  359,
      359,  339,  359,  148,  453,  152,  143,  453,  148, 1100,
      354,  152,  354,  354,  354, 1099,  152, 1097,  453,   26,
       26,   26,   26,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,  115,  115,   51,  115, 1096, 1095,   51,   51,   51,

       51,  169,  169,  601,  170,  170,  169,  115,  115,  170,
      370,  370,  115,  370,  127,  127,  127,  127,   51,   51,
       51,  127,  379,  379,  601,  379,  165,  165,  169,  165,
      127,  170, 1094, 1093,  115,  127,  115,  180,  180, 1092,
      180,  390,  390,  390,  390,   51,   51,   51,   51,   51,
       51,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,  138,  138,   52,
      138,  165,  571,   52,   52,   52,   52,  302,  600,  722,
      302,  144,  180,  138,  138, 1145,  127,  361,  138, 1145,
      361,  571,  144,  144,   52,   52,   52,  144,  247,  144,

      600,  302,  722,  247,  560,  391,  391,  247,  391,  560,
      138,  361,  138,  247,  612,  247, 1091,  612, 1090,  144,
      302,   52,   52,   52,   52,   52,   52,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
     1089,  865, 1088,   81,   81,   81,   81,  305,  305, 1086,
      305,  149,  149,  149,  149,  865,  402,  402,  149,  402,
      182,  182,  182,  182,   81,   81,   81,  149,  179,  179,
      179,  179,  149,  497,  562,  179,  182,  188,  188,  562,
      188,  182,  306,  306,  497,  306,  179,  179,  179,  179,

      305,   81,   81,   81,   81,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82, 1079,  497,  603,   82,   82,   82,
       82,  346,  188,  149,  346,  306,  352,  146,  146,  352,
      146,  916,  146,  183,  183,  183,  183,  603,   82,   82,
       82,  352,  607,  146,  146,  848,  916,  352,  146,  183,
      146, 1078,  367,  367,  183,  194,  194,  367,  194,  415,
      415,  848,  415,  607,  346,   82,   82,   82,   82,   97,
      146, 1065,  146,  150,  150,  150,  150,  346,  430,  367,
      150,  430,   97,  184,  184,  184,  184, 1064,  430,  150,

      184,  400,   97,   97,  150,  400,  352,   97,   97,  184,
      194, 1133,   97,   97,  184,   97,   97, 1062,  454,  197,
      197,  454,  197,   97,   97, 1061, 1133,  400,   97,   97,
      171,  171,  454,  171,   97,   97,   97,   97,   97,   97,
       98,   98,   98,   98,  412,  608,  171,  171,  412,   98,
      606,  171, 1055,  719, 1054,  150,   98,   98,   98, 1053,
      185,  185,  185,  185,  197,  184,  608,  185,  200,  200,
      412,  200,  606,  171,  719,  171,  185,   98, 1052,  355,
      521,  185,  355,  521,   98,   98,  209,  209,  615,  209,
      521,  615,  227,  227,  355,  227,  187,  187,  187,  187,

      355,  432,  432,   98,  432,   98,   98,  100,  100,  100,
      100,  347,  187,  200,  347,  644,  100,  187,  208,  208,
      208,  208, 1051,  100,  100,  100, 1050,  437,  437,  209,
      437,  209,  185,  644,  208,  208,  208,  227,  233,  233,
      728,  233,  442,  442,  100,  442,  100,  250,  250,  355,
      250,  100,  100, 1049,  347,  208,  254,  254,  883,  254,
      260,  260,  728,  260,  263,  263, 1047,  263,  348,  347,
      100,  348,  100,  100,  103,  348, 1025,  103,  625,  328,
      883,  625,  328,  233,  208,  357,  103,  103,  357,  103,
      103,  957,  250,  103,  103,  103,  450,  450,  103,  450,

      357,  254,  328, 1024,  328,  260,  357,  723, 1022,  263,
      348,  348,  362,  957,  362,  362,  362,  103,  328,  631,
      362,  363,  631,  705,  363,  328,  705,  343,  723,  343,
      343,  712,  343,  343,  343,  448,  363,  348,  343,  448,
      328, 1021,  363,  726,  103,  141,  141, 1148,  141,  141,
      141,  141, 1020,  141,  141,  357,  141,  141,  141,  343,
      141,  448,  141,  141,  726, 1148,  712,  141,  141,  141,
      344,  364,  344,  344,  364,  344,  344,  344,  812,  358,
      358,  344,  358, 1019,  456,  816,  364,  456,  141,  141,
      141,  363,  364,  712,  358, 1018,  369,  369,  456,  812,

      358,  369,  344,  358,  372,  372,  816,  463,  463,  372,
      463,  382,  382,  382,  382,  141,  141,  141,  141,  303,
      303,  303,  303,  369,  399,  399, 1017,  382, 1016,  399,
      523,  372,  382,  523, 1015,  303,  303,  303,  401,  401,
      523,  364, 1014,  401,  372,  383,  383,  383,  383,  358,
      717,  399,  383,  717, 1013, 1012,  303,  386,  386,  386,
      386,  383, 1011,  303,  303,  401,  383,  474,  474,  732,
      474, 1010,  732,  386,  385,  385,  385,  385,  386,  386,
      798,  385,  303,  798,  303,  303,  304,  304,  304,  304,
      385,  387,  387,  387,  387,  385,  483,  483,  387,  483,

     1009, 1008,  304,  304,  304, 1007, 1006, 1005,  388,  388,
      388,  388, 1004,  488,  488,  388,  488,  383,  389,  389,
      389,  389, 1002,  304,  388,  394,  394,  394,  394,  388,
      304,  304,  394, 1001,  389,  395,  395,  395,  395,  389,
      389,  997,  395,  996,  492,  492,  385,  492,  995,  304,
      994,  304,  304,  318,  503,  503,  318,  503,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  411,  993,  992,  318,  318,  318,  318,  991,
      388,  404,  404,  411,  411,  989,  404,  988,  411,  987,
      411,  518,  518,  413,  518,  986,  318,  318,  318,  418,

      418,  418,  418,  687,  413,  413,  687,  984,  404,  413,
      411,  413,  447,  447,  983,  418,  982,  447,  981,  735,
      418,  404,  735,  318,  318,  318,  318,  318,  318,  336,
      417,  413,  336,  980,  979,  336,  336,  336,  336,  447,
      650,  417,  417,  650,  524,  524,  417,  524,  417,  978,
      650,  336,  336,  336,  977,  419,  419,  419,  419,  976,
      975,  687,  419,  421,  421,  421,  421,  974,  417,  972,
      421,  419,  336,  735,  971,  970,  419,  449,  449,  421,
      967,  417,  449,  602,  421,  966,  602,  422,  422,  422,
      422,  961,  423,  423,  423,  423,  960,  422,  336,  423,

      336,  336,  350,  422,  449,  350,  602,  958,  422,  428,
      428,  428,  428,  956,  350,  350,  428,  350,  350,  955,
      954,  350,  350,  350,  953,  851,  350,  419,  851,  952,
      424,  424,  424,  424,  951,  421,  950,  424,  425,  425,
      425,  425,  949,  948,  604,  350,  424,  604,  425,  541,
      541,  424,  541,  947,  425,  429,  429,  429,  429,  425,
      527,  527,  429,  527,  946,  452,  452,  604,  545,  545,
      452,  545,  350,  407,  407,  945,  407,  407,  407,  407,
      616,  407,  407,  616,  407,  407,  407,  944,  407,  943,
      407,  407,  452,  942,  941,  407,  407,  407,  427,  427,

      427,  427,  424,  527,  890,  452,  940,  890,  427,  458,
      458,  458,  458,  939,  427,  938,  407,  407,  407,  427,
      457,  457,  457,  457,  936,  549,  549,  457,  549,  616,
      458,  934,  931,  466,  466,  466,  466,  929,  457,  457,
      457,  457,  928,  407,  407,  407,  407,  408,  408,  466,
      408,  408,  408,  408,  466,  408,  408,  927,  408,  408,
      408,  926,  408,  651,  408,  408,  651,  890,  925,  408,
      408,  408,  924,  651,  923,  460,  460,  460,  460,  922,
      552,  552,  460,  552,  921,  920,  470,  470,  470,  470,
      408,  408,  408,  460,  460,  460,  460,  626,  919,  626,

      626,  626,  470,  462,  462,  462,  462,  470,  725,  937,
      462,  725,  937,  623,  918,  917,  623,  408,  408,  408,
      408,  462,  462,  462,  462,  467,  467,  467,  467,  915,
      914,  725,  467,  469,  469,  469,  469,  632,  632,  913,
      469,  467,  632,  912, 1063,  622,  467, 1063,  622,  469,
      471,  471,  471,  471,  469,  911,  623,  471,  472,  472,
      472,  472,  623,  910,  632,  472,  473,  473,  473,  473,
      477,  477,  477,  477,  472,  633,  633,  477,  962,  472,
      633,  962,  473,  478,  478,  478,  478,  473,  622,  909,
      478,  613,  624,  624,  613,  624,  907,  467,  613,  622,

      627,  627,  633,  627,  906,  469,  905,  624,  629,  629,
      901,  629,  716,  624,  716,  627,  716,  716,  900,  899,
      896,  627,  807,  629,  807,  716,  807,  807,  962,  629,
      472,  592,  629,  613,  592,  807,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      895,  889,  888,  592,  592,  592,  592,  886,  630,  630,
      613,  630,  624,  637,  637,  637,  637,  641,  641,  882,
      627,  881,  641,  630,  592,  592,  592,  879,  629,  630,
      634,  634,  878,  877,  876,  634,  637,  638,  638,  638,
      638,  875,  642,  642,  641,  643,  643,  642,  874,  873,

      643,  592,  592,  592,  592,  592,  592,  634,  872,  727,
      638,  738,  727,  813,  738,  871,  813,  870,  634,  642,
      739,  814,  643,  739,  814,  869,  655,  655,  630,  868,
      867,  655,  727,  643,  645,  645,  813,  645,  645,  645,
      645,  866,  645,  645,  814,  645,  645,  645,  646,  645,
      864,  645,  645,  655,  738,  863,  645,  645,  645,  646,
      646,  862,  884,  739,  646,  884,  646,  656,  656,  738,
      860,  647,  656,  819,  739,  859,  819,  645,  645,  645,
      648, 1117,  647,  647, 1117,  884,  646,  647,  858,  647,
     1130,  648,  648, 1130,  656,  857,  648,  856,  648, 1132,

     1105,  855, 1132, 1105,  645,  645,  645,  645,  854,  647,
      657,  657,  853,  740,  740,  657,  740,  852,  648,  850,
      658,  658,  658,  658,  849,  847,  846,  658,  740,  648,
      845,  819,  887,  959,  740,  887,  959,  657,  658,  658,
      658,  658,  659,  659,  659,  659, 1105,  844,  657,  659,
      660,  660,  660,  660,  843,  887,  959,  660,  661,  661,
      661,  661,  842,  659, 1137,  661,  841, 1137,  660,  660,
      660,  660,  741,  741,  840,  741,  661,  661,  661,  661,
      839,  742,  742,  740,  742,  743,  743,  741,  821,  822,
      743,  821,  822,  741,  838,  837,  742,  745,  745,  745,

      745, 1140,  742,  836, 1140,  742,  747,  747,  747,  747,
      749,  749,  743,  757,  757,  749,  824,  824,  757, 1026,
      745,  824, 1026,  761,  761,  761,  761,  743,  835,  747,
      761,  821,  822,  834,  831,  830, 1084,  749,  821, 1084,
      757,  829,  741,  824,  761, 1120, 1143,  822, 1120, 1143,
      824,  742,  749,  750,  750,  757,  750,  750,  750,  750,
     1147,  750,  750, 1147,  750,  750,  750,  752,  750,  892,
      750,  750,  892,  826,  825,  750,  750,  750,  752,  752,
     1026, 1023,  820,  752, 1023,  752,  818,  817,  759,  759,
      759,  759,  811,  810, 1084,  759,  750,  750,  750, 1080,

      893, 1120, 1080,  893, 1023,  752,  759,  759,  759,  759,
      964,  809,  892,  964,  827,  827,  892,  806, 1107,  827,
      752, 1107, 1080,  750,  750,  750,  750,  751,  751,  804,
      751,  751,  751,  751,  803,  751,  751,  802,  751,  751,
      751,  827,  751,  893,  751,  751,  801,  800,  827,  751,
      751,  751,  799,  964,  797,  760,  760,  760,  760,  796,
      964, 1107,  760,  893, 1107, 1104,  823,  823, 1104,  823,
      751,  751,  751,  760,  760,  760,  760,  774,  774,  832,
      832,  823,  774,  795,  832,  774,  774,  823, 1104,  794,
      774,  793,  828,  774,  774,  792,  774,  751,  751,  751,

      751,  791,  790,  828,  828,  789,  832,  788,  828, 1134,
      828,  787, 1134,  832,  833,  833,  833,  833,  894,  894,
      786,  833,  784,  894,  897,  897,  902,  902,  898,  897,
      828,  902,  833,  833,  833,  833,  823,  828,  783,  898,
      898,  782,  780,  779,  898,  894,  898,  963,  778,  894,
      963,  897, 1134,  902,  777,  897,  776,  902,  903,  903,
      903,  903,  965,  965,  775,  903,  898,  965,  968,  968,
      898, 1027, 1027,  968, 1027,  773,  903,  903,  903,  903,
      904,  904,  904,  904,  772, 1028,  771,  904, 1028,  965,
      963,  973,  973,  969,  769,  968,  973,  768,  904,  904,

      904,  904,  767,  766,  969,  969,  765,  965,  963,  969,
      764,  969,  763,  968, 1027, 1029, 1029,  762,  973,  756,
     1029, 1032, 1032, 1033, 1037, 1037, 1032, 1087, 1028, 1037,
     1087,  969,  755,  754, 1033, 1033,  973, 1085, 1085, 1033,
     1085, 1033, 1029,  748, 1122,  744, 1028, 1122, 1032,  969,
      737, 1037, 1150, 1150, 1311, 1150, 1323,  736, 1323, 1323,
     1323, 1033, 1311,  730,  729, 1311, 1311, 1354,  724, 1327,
     1087, 1327, 1327, 1327,  721, 1354,  720,  714, 1354, 1354,
     1085,  713,  711,  710,  709, 1087, 1360, 1122, 1360, 1360,
     1360,  708,  706,  704, 1387, 1150, 1387, 1387, 1387,  703,

     1122, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1158, 1158, 1158, 1158, 1158, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,

     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,

     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,

     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,

     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,

     1173, 1173, 1173, 1173, 1173, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,

     1176, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1178, 1178,  699, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1179,  697,  695,  694,  693,
      692,  691,  690,  689,  688,  686,  685,  684,  683,  682,
     1179,  681, 1179, 1179, 1179,  680,  679,  678,  677, 1179,
     1180,  676, 1180, 1180,  675, 1180,  674,  671,  670, 1180,

     1180,  669, 1180, 1180, 1180, 1181,  668, 1181, 1181, 1181,
     1181,  667, 1181,  666,  663,  662, 1181, 1181, 1181, 1181,
     1181, 1181, 1182, 1182, 1182,  654,  653,  652,  649,  640,
     1182,  639,  636,  611,  610, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182,  609, 1182, 1182, 1183,  599, 1183,
     1183,  598, 1183,  596,  594,  593, 1183, 1183,  591, 1183,
     1183, 1183, 1184, 1184, 1184,  588,  586,  584,  583,  582,
     1184,  580,  578,  576,  575, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184,  572, 1184, 1184, 1185, 1185,  569,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,

     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1186,
      566,  564,  563,  561,  559, 1186,  558, 1186, 1186, 1186,
     1186, 1186,  556,  554, 1186, 1186, 1186, 1186, 1186, 1186,
      551,  547,  543,  540, 1186, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1188,  538, 1188,
     1188, 1188,  537,  536,  534,  533, 1188, 1189,  530, 1189,
     1189,  529,  526,  520, 1189,  517, 1189, 1189, 1189,  516,

      512,  510,  509, 1189, 1190, 1190, 1190, 1190,  507,  505,
     1190,  502,  500,  499,  496,  494,  490,  487, 1190,  486,
      485, 1190,  482,  481,  480, 1190,  476, 1190, 1190, 1190,
      468,  465,  461, 1190, 1190, 1191, 1191, 1191, 1191,  445,
      444,  440,  439,  435,  434,  420,  414,  409,  405, 1191,
      397, 1191, 1191, 1191,  396,  393, 1191,  384, 1191, 1191,
     1191,  381,  378,  376,  373, 1191, 1192, 1192, 1192, 1192,
      365,  349, 1192,  338,  337,  334,  332,  331,  321,  319,
      312,  311,  308,  307,  297,  294,  293, 1192,  289, 1192,
     1192, 1192,  285,  284,  281,  277, 1192, 1193, 1193,  276,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1194,
      273,  268,  237,  223,  222, 1194,  221, 1194, 1194, 1194,
     1194, 1194,  217,  216, 1194, 1194, 1194, 1194, 1194, 1194,
      212,  207,  204,  196, 1194, 1195, 1195,  193, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1196, 1196,  186,
      168,  164,  160,  151, 1196,  137, 1196, 1196, 1196, 1196,

     1196,  134, 1196, 1196, 1196, 1196, 1196, 1196, 1196,  128,
      116,  112,  102, 1196, 1197, 1197, 1197, 1197,   94,   93,
     1197,   92,   87,    8,    7,    0,    0,    0, 1197,    0,
        0, 1197,    0,    0,    0, 1197,    0, 1197, 1197, 1197,
        0,    0,    0, 1197, 1197, 1198, 1198, 1198, 1198,    0,
        0,    0,    0, 1198,    0,    0,    0,    0,    0, 1198,
        0, 1198, 1198,    0,    0,    0, 1198,    0, 1198, 1198,
     1198,    0,    0,    0,    0, 1198, 1199, 1199, 1199, 1199,
        0,    0, 1199,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1199,    0, 1199,

     1199, 1199,    0,    0,    0,    0, 1199, 1200,    0,    0,
     1200,    0,    0,    0,    0, 1200,    0, 1200, 1200, 1200,
        0,    0,    0,    0, 1200, 1201, 1201,    0, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1202, 1202,    0,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1203,
     1203,    0, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,

     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1204,    0,    0,    0,    0,    0, 1204,    0, 1204,
     1204, 1204, 1204, 1204,    0,    0, 1204, 1204, 1204, 1204,
     1204, 1204,    0,    0,    0,    0, 1204, 1205,    0, 1205,
     1205, 1205,    0,    0,    0,    0, 1205, 1206,    0,    0,
     1206,    0,    0,    0,    0,    0,    0,    0,    0, 1206,
        0,    0,    0, 1206,    0,    0,    0,    0, 1206,    0,
     1206, 1206, 1206,    0,    0,    0,    0, 1206, 1207,    0,
     1207, 1207, 1207,    0,    0,    0,    0, 1207, 1208, 1208,

     1208, 1208,    0,    0, 1208,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1208, 1208,    0,    0,    0, 1208,
        0, 1208, 1208, 1208,    0,    0,    0,    0, 1208, 1209,
     1209, 1209, 1209,    0,    0, 1209,    0,    0,    0,    0,
        0,    0,    0, 1209,    0,    0, 1209,    0,    0,    0,
     1209,    0, 1209, 1209, 1209,    0,    0,    0, 1209, 1209,
     1210, 1210, 1210, 1210,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1210,    0, 1210, 1210,    0,    0,
        0, 1210,    0, 1210, 1210, 1210,    0,    0,    0,    0,
     1210, 1211, 1211, 1211, 1211,    0,    0, 1211,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1211,    0, 1211, 1211, 1211,    0,    0,    0,
        0, 1211, 1212,    0, 1212, 1212, 1212,    0,    0,    0,
        0, 1212, 1213,    0, 1213,    0,    0,    0,    0, 1213,
        0, 1213, 1213, 1213,    0,    0,    0,    0, 1213, 1214,
     1214,    0, 1214,    0,    0,    0,    0, 1214,    0, 1214,
     1214, 1214,    0,    0,    0,    0, 1214, 1215, 1215,    0,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,    0, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
        0, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1216,

        0,    0, 1216,    0,    0,    0,    0, 1216,    0, 1216,
     1216, 1216,    0,    0,    0,    0, 1216, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,    0, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1218,
     1218,    0, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
        0, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1219, 1219,    0, 1219,    0, 1219, 1219, 1219,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1219,

     1219, 1219,    0, 1219, 1219,    0,    0,    0,    0,    0,
     1219, 1220,    0,    0, 1220,    0,    0,    0,    0, 1220,
        0, 1220, 1220, 1220,    0,    0,    0,    0, 1220, 1221,
     1221,    0, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1222, 1222,    0, 1222,    0, 1222, 1222, 1222, 1222,
     1222, 1222,    0, 1222, 1222, 1222, 1222,    0, 1222, 1222,
     1222, 1222,    0, 1222,    0, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1223,    0,    0, 1223,    0,    0,    0,

        0, 1223,    0,    0,    0,    0, 1223, 1223,    0, 1223,
        0,    0,    0,    0, 1223,    0, 1223, 1223, 1223, 1224,
     1224,    0, 1224,    0, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
        0, 1224,    0, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1225, 1225,    0, 1225,    0, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225,    0, 1225,    0, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1226,    0,    0, 1226,    0,    0,    0,
        0, 1226,    0, 1226, 1226, 1226,    0,    0,    0,    0,

     1226, 1227, 1227,    0, 1227, 1227, 1227, 1227, 1227, 1227,
        0,    0, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227,    0, 1227,    0, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1228,    0, 1228, 1228, 1228,    0,    0,
        0,    0, 1228, 1229,    0, 1229, 1229,    0,    0,    0,
     1229,    0, 1229, 1229, 1229,    0,    0,    0,    0, 1229,
     1230,    0, 1230, 1230, 1230,    0,    0,    0,    0, 1230,
     1231,    0, 1231, 1231,    0,    0,    0, 1231,    0, 1231,
     1231, 1231,    0,    0,    0,    0, 1231, 1232, 1232,    0,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,    0, 1232,
        0, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1233,
        0,    0, 1233,    0,    0,    0,    0, 1233,    0, 1233,
     1233, 1233,    0,    0,    0,    0, 1233, 1234, 1234,    0,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234,    0, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
        0, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1235,
     1235,    0, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
        0, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
        0, 1235,    0, 1235, 1235, 1235, 1235, 1235, 1235, 1235,

     1235, 1236,    0, 1236, 1236, 1236, 1236, 1236,    0,    0,
        0, 1236,    0, 1236, 1236, 1236,    0,    0,    0,    0,
     1236, 1237, 1237,    0, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237,    0, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238,    0,    0, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1239, 1239, 1239,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1239, 1239,

     1239, 1239, 1239, 1239, 1239, 1239, 1239,    0, 1239, 1239,
     1240, 1240,    0, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1241,    0, 1241, 1241, 1241,    0,    0,    0,
        0, 1241, 1242, 1242,    0,    0,    0, 1242,    0, 1242,
     1242, 1242,    0,    0,    0,    0, 1242, 1243,    0, 1243,
     1243,    0, 1243,    0,    0,    0, 1243, 1243,    0, 1243,
     1243, 1243, 1244,    0,    0, 1244,    0,    0,    0,    0,
     1244,    0, 1244, 1244, 1244, 1245,    0,    0, 1245,    0,

     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1246,    0, 1246,
     1246, 1246,    0,    0,    0, 1246, 1247,    0,    0,    0,
        0,    0,    0,    0, 1247,    0, 1247, 1247, 1247, 1248,
        0, 1248, 1248,    0, 1248,    0,    0,    0, 1248, 1248,
        0, 1248, 1248, 1248, 1249,    0,    0, 1249,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1249, 1249, 1249, 1249, 1249,
     1250, 1250,    0, 1250, 1250, 1250, 1250, 1250, 1250, 1250,

     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1251,    0,    0,    0,    0,    0, 1251,    0,
     1251, 1251, 1251, 1251, 1251,    0,    0, 1251, 1251, 1251,
     1251, 1251, 1251,    0,    0,    0,    0, 1251, 1252,    0,
        0,    0,    0,    0, 1252,    0, 1252,    0, 1252, 1252,
     1252,    0,    0, 1252, 1252, 1252, 1252, 1252, 1252,    0,
        0,    0,    0, 1252, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1253, 1253, 1253, 1253, 1253, 1253, 1254,    0, 1254, 1254,
        0,    0,    0, 1254,    0, 1254, 1254, 1254,    0,    0,
        0,    0, 1254, 1255,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1255,    0,
     1255, 1255, 1255,    0,    0,    0,    0, 1255, 1256, 1256,
     1256, 1256,    0,    0, 1256,    0,    0,    0,    0,    0,
        0,    0, 1256,    0,    0, 1256,    0,    0,    0, 1256,
        0, 1256, 1256, 1256,    0,    0,    0, 1256, 1256, 1257,
     1257, 1257, 1257,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1257,    0, 1257, 1257, 1257,    0,    0,

     1257,    0, 1257, 1257, 1257,    0,    0,    0,    0, 1257,
     1258, 1258, 1258, 1258,    0,    0, 1258,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1258,    0, 1258, 1258, 1258,    0,    0,    0,    0,
     1258, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259,    0, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1260,    0, 1260,    0,    0, 1260,    0,
     1260, 1260, 1260,    0,    0,    0,    0, 1260, 1261, 1261,
        0, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,

     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1262,    0,    0,    0,    0,    0, 1262,    0, 1262, 1262,
     1262, 1262, 1262,    0,    0, 1262, 1262, 1262, 1262, 1262,
     1262,    0,    0,    0,    0, 1262, 1263,    0,    0,    0,
        0,    0, 1263,    0, 1263,    0, 1263, 1263, 1263,    0,
        0, 1263, 1263, 1263, 1263, 1263, 1263,    0,    0,    0,
        0, 1263, 1264, 1264,    0, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,

     1264, 1264, 1264, 1264, 1265, 1265,    0, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1266, 1266,    0,    0,
        0,    0,    0, 1266,    0, 1266, 1266, 1266, 1266, 1266,
        0, 1266, 1266, 1266, 1266, 1266, 1266, 1266,    0,    0,
        0,    0, 1266, 1267,    0,    0,    0,    0,    0, 1267,
        0, 1267,    0, 1267, 1267, 1267,    0,    0, 1267, 1267,
     1267, 1267, 1267, 1267,    0,    0,    0,    0, 1267, 1268,
     1268, 1268, 1268,    0,    0, 1268,    0,    0,    0,    0,

        0,    0,    0, 1268,    0,    0, 1268,    0,    0,    0,
     1268,    0, 1268, 1268, 1268,    0,    0,    0, 1268, 1268,
     1269, 1269, 1269, 1269,    0,    0,    0,    0, 1269,    0,
        0,    0,    0,    0, 1269,    0, 1269, 1269,    0,    0,
        0, 1269,    0, 1269, 1269, 1269,    0,    0,    0,    0,
     1269, 1270, 1270, 1270, 1270,    0,    0, 1270,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1270,    0, 1270, 1270, 1270,    0,    0,    0,
        0, 1270, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271,    0, 1271, 1271, 1271, 1271, 1271, 1271, 1271,

     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1272,    0,    0, 1272,    0,    0,
        0,    0, 1272,    0,    0,    0,    0,    0,    0,    0,
     1272,    0,    0,    0,    0, 1272,    0, 1272, 1272, 1272,
        0,    0,    0,    0, 1272, 1273,    0,    0, 1273,    0,
        0,    0,    0, 1273,    0, 1273, 1273, 1273,    0,    0,
        0,    0, 1273, 1274, 1274,    0, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1275, 1275,    0, 1275, 1275,

     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1276, 1276,    0,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1277,
        0,    0,    0,    0,    0, 1277,    0, 1277, 1277, 1277,
     1277, 1277,    0,    0, 1277, 1277, 1277, 1277, 1277, 1277,
        0,    0,    0,    0, 1277, 1278,    0,    0,    0,    0,
        0, 1278,    0, 1278,    0, 1278, 1278, 1278,    0,    0,

     1278, 1278, 1278, 1278, 1278, 1278,    0,    0,    0,    0,
     1278, 1279,    0,    0, 1279,    0,    0,    0,    0,    0,
        0,    0,    0, 1279,    0,    0,    0, 1279,    0,    0,
        0,    0, 1279,    0, 1279, 1279, 1279,    0,    0,    0,
        0, 1279, 1280, 1280, 1280, 1280,    0,    0, 1280,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1280, 1280,
        0,    0,    0, 1280,    0, 1280, 1280, 1280,    0,    0,
        0,    0, 1280, 1281,    0, 1281, 1281, 1281,    0,    0,
        0,    0, 1281, 1282, 1282, 1282, 1282,    0,    0, 1282,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1282,

     1282,    0,    0,    0, 1282,    0, 1282, 1282, 1282,    0,
        0,    0,    0, 1282, 1283, 1283, 1283, 1283,    0,    0,
     1283,    0,    0,    0,    0,    0,    0,    0, 1283,    0,
        0, 1283,    0,    0,    0, 1283,    0, 1283, 1283, 1283,
        0,    0,    0, 1283, 1283, 1284, 1284, 1284, 1284,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1284,
        0, 1284, 1284,    0,    0,    0, 1284,    0, 1284, 1284,
     1284,    0,    0,    0,    0, 1284, 1285, 1285, 1285, 1285,
        0,    0, 1285,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1285,    0, 1285,

     1285, 1285,    0,    0,    0,    0, 1285, 1286,    0,    0,
        0,    0, 1286,    0, 1286, 1286, 1286,    0,    0,    0,
        0, 1286, 1287,    0, 1287,    0,    0,    0,    0, 1287,
        0, 1287, 1287, 1287,    0,    0,    0,    0, 1287, 1288,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1288,    0, 1288, 1288, 1288,    0,
        0,    0,    0, 1288, 1289, 1289,    0, 1289,    0,    0,
        0,    0, 1289,    0, 1289, 1289, 1289,    0,    0,    0,
        0, 1289, 1290, 1290,    0, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290,    0, 1290, 1290, 1290, 1290, 1290, 1290,

     1290, 1290, 1290, 1290, 1290,    0, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1291,    0,    0, 1291,    0,    0,
        0,    0, 1291,    0, 1291, 1291, 1291,    0,    0,    0,
        0, 1291, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292,    0, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1293, 1293,    0, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293,    0, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1294,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1294,    0, 1294, 1294, 1294,    0,    0,    0,    0,
     1294, 1295,    0,    0, 1295,    0,    0,    0,    0, 1295,
        0, 1295, 1295, 1295,    0,    0,    0,    0, 1295, 1296,
     1296,    0, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1297, 1297,    0, 1297,    0, 1297, 1297, 1297, 1297,
     1297, 1297,    0, 1297, 1297, 1297, 1297,    0, 1297, 1297,
     1297, 1297,    0, 1297,    0, 1297, 1297, 1297, 1297, 1297,

     1297, 1297, 1297, 1298,    0,    0, 1298,    0,    0,    0,
        0, 1298,    0,    0,    0,    0, 1298, 1298,    0, 1298,
        0,    0,    0,    0, 1298,    0, 1298, 1298, 1298, 1299,
     1299,    0, 1299,    0, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
        0, 1299,    0, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1300, 1300,    0, 1300,    0, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300,    0, 1300,    0, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1301,    0,    0, 1301,    0,    0,    0,

        0, 1301,    0, 1301, 1301, 1301,    0,    0,    0,    0,
     1301, 1302, 1302,    0, 1302, 1302, 1302, 1302, 1302, 1302,
        0,    0, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302,    0, 1302,    0, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1303,    0, 1303, 1303,    0,    0,    0,
     1303,    0, 1303, 1303, 1303,    0,    0,    0,    0, 1303,
     1304,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1304,    0, 1304, 1304, 1304,
        0,    0,    0,    0, 1304, 1305,    0, 1305, 1305,    0,
        0,    0, 1305,    0, 1305, 1305, 1305,    0,    0,    0,

        0, 1305, 1306,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1306,    0, 1306,
     1306, 1306,    0,    0,    0,    0, 1306, 1307, 1307,    0,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,    0, 1307,
        0, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1308,
        0,    0, 1308,    0,    0,    0,    0, 1308,    0, 1308,
     1308, 1308,    0,    0,    0,    0, 1308, 1309, 1309,    0,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309,    0, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,

        0, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1310,
     1310,    0, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
        0, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
        0, 1310,    0, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1312,    0, 1312, 1312, 1312, 1312, 1312,    0,    0,
        0, 1312,    0, 1312, 1312, 1312,    0,    0,    0,    0,
     1312, 1313,    0,    0,    0,    0, 1313,    0, 1313, 1313,
     1313,    0,    0,    0,    0, 1313, 1314, 1314,    0, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,    0,

     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315,    0,    0, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1316, 1316,    0,    0,    0, 1316,    0, 1316, 1316, 1316,
        0,    0,    0,    0, 1316, 1317, 1317,    0, 1317, 1317,
     1317, 1317,    0, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1318, 1318,    0,
     1318,    0,    0,    0,    0, 1318,    0, 1318, 1318, 1318,

     1319,    0, 1319, 1319,    0, 1319,    0,    0,    0, 1319,
     1319,    0, 1319, 1319, 1319, 1320,    0,    0, 1320,    0,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1321, 1321,    0,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1322,
        0,    0, 1322,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1322,    0, 1322, 1322, 1322, 1324,    0,    0, 1324,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1324,    0, 1324, 1324,
     1324, 1325, 1325,    0, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
        0, 1325, 1325, 1326,    0,    0,    0,    0,    0,    0,
        0, 1326,    0, 1326, 1326, 1326, 1328,    0,    0, 1328,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1328, 1328, 1328,

     1328, 1328, 1329,    0,    0,    0,    0,    0, 1329,    0,
     1329, 1329, 1329, 1329, 1329,    0,    0, 1329, 1329, 1329,
     1329, 1329, 1329,    0,    0,    0,    0, 1329, 1330,    0,
        0,    0,    0,    0, 1330,    0, 1330, 1330, 1330, 1330,
     1330,    0,    0, 1330, 1330, 1330, 1330, 1330, 1330,    0,
        0,    0,    0, 1330, 1331,    0, 1331, 1331, 1331,    0,
        0,    0,    0, 1331, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1333,    0, 1333,    0,

        0, 1333,    0, 1333, 1333, 1333,    0,    0,    0,    0,
     1333, 1334,    0,    0,    0,    0,    0, 1334,    0, 1334,
     1334, 1334, 1334, 1334,    0,    0, 1334, 1334, 1334, 1334,
     1334, 1334,    0,    0,    0,    0, 1334, 1335,    0,    0,
        0,    0,    0, 1335,    0, 1335, 1335, 1335, 1335, 1335,
        0,    0, 1335, 1335, 1335, 1335, 1335, 1335,    0,    0,
        0,    0, 1335, 1336, 1336,    0, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1337, 1337,    0,    0,    0,

        0,    0, 1337,    0, 1337, 1337, 1337, 1337, 1337,    0,
     1337, 1337, 1337, 1337, 1337, 1337, 1337,    0,    0,    0,
        0, 1337, 1338, 1338,    0,    0,    0,    0,    0, 1338,
        0, 1338, 1338, 1338, 1338, 1338,    0, 1338, 1338, 1338,
     1338, 1338, 1338, 1338,    0,    0,    0,    0, 1338, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1340,    0,    0, 1340,    0,    0,    0,    0, 1340,
        0,    0,    0,    0,    0,    0,    0, 1340,    0,    0,

        0,    0, 1340,    0, 1340, 1340, 1340,    0,    0,    0,
        0, 1340, 1341,    0,    0,    0,    0,    0, 1341,    0,
     1341, 1341, 1341, 1341, 1341,    0,    0, 1341, 1341, 1341,
     1341, 1341, 1341,    0,    0,    0,    0, 1341, 1342,    0,
        0,    0,    0,    0, 1342,    0, 1342, 1342, 1342, 1342,
     1342,    0,    0, 1342, 1342, 1342, 1342, 1342, 1342,    0,
        0,    0,    0, 1342, 1343, 1343, 1343, 1343,    0,    0,
     1343,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1343, 1343,    0,    0,    0, 1343,    0, 1343, 1343, 1343,
        0,    0,    0,    0, 1343, 1344, 1344, 1344, 1344,    0,

        0, 1344,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1344,    0,    0,    0, 1344,    0, 1344, 1344,
     1344,    0,    0,    0,    0, 1344, 1345, 1345, 1345, 1345,
        0,    0, 1345,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1345, 1345,    0,    0,    0, 1345,    0, 1345,
     1345, 1345,    0,    0,    0,    0, 1345, 1346,    0,    0,
        0,    0, 1346,    0, 1346, 1346, 1346,    0,    0,    0,
        0, 1346, 1347,    0, 1347, 1347, 1347,    0,    0,    0,
        0, 1347, 1348,    0, 1348,    0,    0,    0,    0, 1348,
        0, 1348, 1348, 1348,    0,    0,    0,    0, 1348, 1349,

        0, 1349, 1349, 1349,    0,    0,    0,    0, 1349, 1350,
        0,    0,    0,    0, 1350,    0, 1350, 1350, 1350,    0,
        0,    0,    0, 1350, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351,    0, 1351, 1351, 1351, 1351,    0, 1351,    0,    0,
     1351, 1351, 1351, 1351, 1351, 1351, 1352,    0, 1352, 1352,
     1352,    0,    0,    0,    0, 1352, 1353,    0, 1353, 1353,
     1353,    0,    0,    0,    0, 1353, 1355,    0, 1355, 1355,
     1355, 1355, 1355,    0,    0,    0, 1355,    0, 1355, 1355,
     1355,    0,    0,    0,    0, 1355, 1356, 1356,    0, 1356,

     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1357,    0,
        0, 1357,    0,    0,    0,    0, 1357,    0, 1357, 1357,
     1357, 1358,    0, 1358,    0, 1358, 1358,    0, 1358,    0,
        0,    0, 1358, 1358,    0, 1358, 1358, 1358, 1359, 1359,
        0, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1361,    0,    0, 1361,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1361,    0, 1361, 1361, 1361, 1362, 1362,    0, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1363, 1363,
     1363, 1363, 1363, 1364,    0,    0, 1364,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1364, 1364, 1364, 1364, 1364, 1365,
     1365,    0, 1365,    0,    0,    0,    0,    0,    0,    0,
     1365,    0, 1365, 1365,    0, 1365, 1365,    0,    0, 1365,

     1365,    0, 1365, 1365, 1365,    0, 1365, 1366,    0,    0,
        0,    0,    0, 1366,    0, 1366, 1366, 1366, 1366, 1366,
        0,    0, 1366, 1366, 1366, 1366, 1366, 1366,    0,    0,
        0,    0, 1366, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1368,    0,    0,    0,    0,
        0, 1368,    0, 1368, 1368, 1368, 1368, 1368,    0,    0,
     1368, 1368, 1368, 1368, 1368, 1368,    0,    0,    0,    0,
     1368, 1369, 1369,    0, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1370, 1370,    0,    0,    0,    0,    0,
     1370,    0, 1370, 1370, 1370, 1370, 1370,    0, 1370, 1370,
     1370, 1370, 1370, 1370, 1370,    0,    0,    0,    0, 1370,
     1371,    0,    0,    0,    0,    0, 1371,    0, 1371, 1371,
     1371, 1371, 1371,    0,    0, 1371, 1371, 1371, 1371, 1371,
     1371,    0,    0,    0,    0, 1371, 1372,    0, 1372, 1372,
     1372,    0,    0,    0,    0, 1372, 1373, 1373, 1373, 1373,
        0,    0, 1373,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1373, 1373,    0,    0,    0, 1373,    0, 1373,
     1373, 1373,    0,    0,    0,    0, 1373, 1374, 1374, 1374,
     1374,    0,    0, 1374,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1374,    0,    0,    0, 1374,    0,
     1374, 1374, 1374,    0,    0,    0,    0, 1374, 1375,    0,
     1375,    0,    0,    0,    0, 1375,    0, 1375, 1375, 1375,
        0,    0,    0,    0, 1375, 1376,    0,    0,    0,    0,
     1376,    0, 1376, 1376, 1376,    0,    0,    0,    0, 1376,
     1377, 1377,    0, 1377,    0,    0,    0,    0, 1377,    0,
     1377, 1377, 1377, 1378, 1378,    0, 1378, 1378, 1378, 1378,

     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1379, 1379, 1379, 1379,    0,
        0, 1379,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1379, 1379,    0,    0,    0, 1379,    0, 1379, 1379,
     1379,    0,    0,    0,    0, 1379, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380,    0, 1380, 1380, 1380, 1380,    0, 1380,
        0, 1380,    0, 1380, 1380, 1380, 1380, 1380, 1381, 1381,
        0, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,

     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382,    0, 1382, 1382,
     1382, 1382,    0, 1382,    0,    0,    0, 1382, 1382, 1382,
     1382, 1382, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,    0,
     1383, 1383, 1383, 1383,    0, 1383,    0,    0,    0, 1383,
     1383, 1383, 1383, 1383, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,

     1384,    0, 1384, 1384, 1384, 1384,    0, 1384,    0,    0,
        0, 1384, 1384, 1384, 1384, 1384, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385,    0, 1385, 1385, 1385, 1385,    0, 1385,
        0,    0,    0, 1385, 1385, 1385, 1385, 1385, 1386, 1386,
        0, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2018 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <QFile>
#include <QStack>
#include <QVector>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <cite.h>
#include <condparser.h>
#include <config.h>
#include <default_args.h>
#include <doxy_globals.h>
#include <entry.h>
#include <formula.h>
#include <index.h>
#include <language.h>
#include <membergroup.h>
#include <message.h>
#include <outputlist.h>
#include <parse_base.h>
#include <parse_cstyle.h>
#include <parse_md.h>
#include <util.h>

#define YY_NO_INPUT 1
#define YY_NEVER_INTERACTIVE 1

// forward declarations
static bool handleBrief(const QString &);
static bool handleFn(const QString &);
static bool handleDef(const QString &);
static bool handleOverload(const QString &);
static bool handleEnum(const QString &);
static bool handleDefGroup(const QString &);
static bool handleAddToGroup(const QString &);
static bool handleWeakGroup(const QString &);
static bool handleNamespace(const QString &);
static bool handlePackage(const QString &);
static bool handleClass(const QString &);
static bool handleHeaderFile(const QString &);
static bool handleProtocol(const QString &);
static bool handleCategory(const QString &);
static bool handleUnion(const QString &);
static bool handleStruct(const QString &);
static bool handleInterface(const QString &);
static bool handleIdlException(const QString &);
static bool handlePage(const QString &);
static bool handleMainpage(const QString &);
static bool handleFile(const QString &);
static bool handleDir(const QString &);
static bool handleExample(const QString &);
static bool handleDetails(const QString &);
static bool handleName(const QString &);
static bool handleTodo(const QString &);
static bool handleTest(const QString &);
static bool handleBug(const QString &);
static bool handleSubpage(const QString &s);
static bool handleDeprecated(const QString &);
static bool handleXRefItem(const QString &);
static bool handleRelated(const QString &);
static bool handleRelatedAlso(const QString &);
static bool handleMemberOf(const QString &);
static bool handleRefItem(const QString &);
static bool handleSection(const QString &);
static bool handleAnchor(const QString &);
static bool handleCite(const QString &);
static bool handleFormatBlock(const QString &);
static bool handleAddIndex(const QString &);
static bool handleIf(const QString &);
static bool handleIfNot(const QString &);
static bool handleElseIf(const QString &);
static bool handleElse(const QString &);
static bool handleEndIf(const QString &);
static bool handleIngroup(const QString &);
static bool handleNoSubGrouping(const QString &);
static bool handleShowInitializer(const QString &);
static bool handleHideInitializer(const QString &);
static bool handleCallgraph(const QString &);
static bool handleHideCallgraph(const QString &);
static bool handleCallergraph(const QString &);
static bool handleHideCallergraph(const QString &);
static bool handleInternal(const QString &);
static bool handleLineBr(const QString &);
static bool handleStatic(const QString &);
static bool handlePure(const QString &);
static bool handlePrivate(const QString &);
static bool handlePrivateSection(const QString &);
static bool handleProtected(const QString &);
static bool handleProtectedSection(const QString &);
static bool handlePublic(const QString &s);
static bool handlePublicSection(const QString &s);
static bool handleToc(const QString &s);
static bool handleInherit(const QString &);
static bool handleExtends(const QString &);
static bool handleCopyDoc(const QString &);
static bool handleCopyBrief(const QString &);
static bool handleCopyDetails(const QString &);
static bool handleParBlock(const QString &);
static bool handleEndParBlock(const QString &);
static void handleGuard(const QString &expr);
static bool handleParam(const QString &);
static bool handleRetval(const QString &);

static void checkFormula();

using DocCmdFunc = bool (*)(const QString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            false },
  { "short",           &handleBrief,            false },
  { "fn",              &handleFn,               false },
  { "var",             &handleFn,               false },
  { "typedef",         &handleFn,               false },
  { "property",        &handleFn,               false },
  { "def",             &handleDef,              false },
  { "overload",        &handleOverload,         false },
  { "enum",            &handleEnum,             false },
  { "defgroup",        &handleDefGroup,         false },
  { "group",           &handleDefGroup,         false },
  { "addtogroup",      &handleAddToGroup,       false },
  { "weakgroup",       &handleWeakGroup,        false },
  { "namespace",       &handleNamespace,        false },
  { "package",         &handlePackage,          false },
  { "class",           &handleClass,            false },
  { "headerfile",      &handleHeaderFile,       false },
  { "protocol",        &handleProtocol,         false },
  { "category",        &handleCategory,         false },
  { "union",           &handleUnion,            false },
  { "struct",          &handleStruct,           false },
  { "interface",       &handleInterface,        false },
  { "idlexcept",       &handleIdlException,     false },
  { "page",            &handlePage,             false },
  { "mainpage",        &handleMainpage,         false },
  { "file",            &handleFile,             false },
  { "dir",             &handleDir,              false },
  { "example",         &handleExample,          false },
  { "details",         &handleDetails,          true  },
  { "name",            &handleName,             false },
  { "todo",            &handleTodo,             false }, // end brief will be done differently
  { "test",            &handleTest,             false }, // end brief will be done differently
  { "bug",             &handleBug,              false }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       false }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         false }, // end brief will be done differently
  { "related",         &handleRelated,          true  },
  { "relates",         &handleRelated,          true  },
  { "relatedalso",     &handleRelatedAlso,      true  },
  { "relatesalso",     &handleRelatedAlso,      true  },
  { "parblock",        &handleParBlock,         true  },
  { "endparblock",     &handleEndParBlock,      true  },
  { "refitem",         &handleRefItem,          true  },
  { "cite",            &handleCite,             false },
  { "subpage",         &handleSubpage,          true  },
  { "section",         &handleSection,          true  },
  { "subsection",      &handleSection,          true  },
  { "subsubsection",   &handleSection,          true  },
  { "paragraph",       &handleSection,          true  },
  { "anchor",          &handleAnchor,           true  },
  { "verbatim",        &handleFormatBlock,      true  },
  { "latexonly",       &handleFormatBlock,      false },
  { "htmlonly",        &handleFormatBlock,      false },
  { "xmlonly",         &handleFormatBlock,      false },
  { "docbookonly",     &handleFormatBlock,      false },
  { "rtfonly",         &handleFormatBlock,      false },
  { "manonly",         &handleFormatBlock,      false },
  { "dot",             &handleFormatBlock,      true  },
  { "msc",             &handleFormatBlock,      true  },
  { "startuml",        &handleFormatBlock,      true  },
  { "code",            &handleFormatBlock,      true  },
  { "addindex",        &handleAddIndex,         false },
  { "if",              &handleIf,               false },
  { "ifnot",           &handleIfNot,            false },
  { "elseif",          &handleElseIf,           false },
  { "else",            &handleElse,             false },
  { "endif",           &handleEndIf,            false },
  { "ingroup",         &handleIngroup,          false },
  { "nosubgrouping",   &handleNoSubGrouping,    false },
  { "showinitializer", &handleShowInitializer,  false },
  { "hideinitializer", &handleHideInitializer,  false },
  { "callgraph",       &handleCallgraph,        false },
  { "hidecallgraph",   &handleHideCallgraph,    false },
  { "callergraph",     &handleCallergraph,      false },
  { "hidecallergraph", &handleHideCallergraph,  false },
  { "internal",        &handleInternal,         true  },
  { "_linebr",         &handleLineBr,           false },
  { "static",          &handleStatic,           false },
  { "pure",            &handlePure,             false },
  { "private",         &handlePrivate,          false },
  { "privatesection",  &handlePrivateSection,   false },
  { "protected",       &handleProtected,        false },
  { "protectedsection",&handleProtectedSection, false },
  { "public",          &handlePublic,           false },
  { "publicsection",   &handlePublicSection,    false },
  { "tableofcontents", &handleToc,              false },
  { "inherit",         &handleInherit,          true  },
  { "extends",         &handleExtends,          true  },
  { "implements",      &handleExtends,          true  },
  { "memberof",        &handleMemberOf,         true  },
  { "arg",             0,                       true  },
  { "attention",       0,                       true  },
  { "author",          0,                       true  },
  { "authors",         0,                       true  },
  { "copydoc",         &handleCopyDoc,          true  },
  { "copybrief",       &handleCopyBrief,        false },
  { "copydetails",     &handleCopyDetails,      true  },
  { "copyright",       0,                       true  },
  { "date",            0,                       true  },
  { "dotfile",         0,                       true  },
  { "htmlinclude",     0,                       false },
  { "image",           0,                       true  },
  { "include",         0,                       true  },
  { "includelineno",   0,                       true  },
  { "invariant",       0,                       true  },
  { "latexinclude",    0,                       false },
  { "li",              0,                       true  },
  { "line",            0,                       true  },
  { "note",            0,                       true  },
  { "par",             0,                       true  },
  { "param",           &handleParam,            true  },
  { "tparam",          0,                       true  },
  { "post",            0,                       true  },
  { "pre",             0,                       true  },
  { "remark",          0,                       true  },
  { "remarks",         0,                       true  },
  { "result",          0,                       true  },
  { "return",          0,                       true  },
  { "returns",         0,                       true  },
  { "exception",       0,                       true  },
  { "retval",          &handleRetval,           true  },
  { "sa",              0,                       true  },
  { "see",             0,                       true  },
  { "since",           0,                       true  },
  { "throw",           0,                       true  },
  { "throws",          0,                       true  },
  { "until",           0,                       true  },
  { "verbinclude",     0,                       false },
  { "version",         0,                       true  },
  { "warning",         0,                       true  },
  { 0, 0, false }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a specific handler function
 */
class DocCmdMapper
{
 public:
   struct Cmd {
      DocCmdFunc func;
      bool endsBrief;
   };

   /** maps a command name to a handler function */
   static Cmd *map(const QString &name) {
      return instance()->find(name);
   }

   /** release the singleton */
   static void freeInstance() {
      delete s_instance;
      s_instance = 0;
   }

  private:
    static DocCmdMapper *instance() {
      if (s_instance == nullptr) {
         s_instance = new DocCmdMapper;
      }
      return s_instance;
   }

   DocCmdMapper() {
      DocCmdMap *p = docCmdMap;

      while (p->cmdName) {
         if (m_map.contains(p->cmdName)) {
            err("DocCmdMapper: command %s already added\n", p->cmdName);
            Doxy_Work::stopDoxyPress();
         }

         Cmd *cmd       = new Cmd;
         cmd->func      = p->handler;
         cmd->endsBrief = p->endsBrief;

         m_map.insert(p->cmdName, cmd);
         p++;
      }
   }

   Cmd *find(const QString &name) {
      return m_map.value(name);
   }

   QHash<QString, Cmd *> m_map;
   static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance = 0;

#define YY_NEVER_INTERACTIVE 1

enum XRefKind {
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext {
  OutputMainDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType {
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
 public:
   GuardedSection(bool enabled, bool parentVisible)
      : m_enabled(enabled), m_parentVisible(parentVisible) {}
   bool isEnabled() const {
      return m_enabled;
   }
   bool parentVisible() const {
      return m_parentVisible;
   }

 private:
   bool m_enabled;
   bool m_parentVisible;
};

void openGroup(QSharedPointer<Entry> e, const QString &file, int line);
void closeGroup(QSharedPointer<Entry> e, const QString &file, int line, bool foundInline = false);
void initGroupInfo(QSharedPointer<Entry> e);
static void groupAddDocs(QSharedPointer<Entry> e);

static QString          s_inputString;         // input string
static int              s_inputPosition;       // read pointer
static int              s_prevPosition;
static char            *s_bufferPosition;

static QString          yyFileName;            // file name that is read from
static int              yyLineNr;              // line number in the input
static bool             inBody;                // was the comment found inside the body of a function?
static OutputContext    inContext;             // are we inside the brief, details or xref part
static bool             briefEndsAtDot;        // does the brief description stop at a dot?
static QString          formulaText;           // Running text of a formula
static QString          formulaEnv;            // environment name
static int              formulaNewLines;       // amount of new lines in the formula

static QString          s_outputXRef;          // tmp argument of todo/test/../xrefitem commands
static QString          blockName;             // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;              // kind of cross-reference command
static XRefKind         newXRefKind;
static GuardType        guardType;             // kind of guard for conditional section
static bool             enabledSectionFound;
static QString          functionProto;         // function prototype

static bool             s_needNewEntry;
static int              s_docBlockContext;

static QString          s_sectionLabel;
static QString          s_sectionTitle;
static int              s_sectionLevel;
static QString          xrefItemKey;
static QString          newXRefItemKey;
static QString          xrefItemTitle;
static QString          xrefListTitle;
static Protection       protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             s_parseMore;

static int              s_condCount;
static int              s_commentCount;
static QString          s_spaceBeforeCmd;
static QString          s_spaceBeforeIf;
static QString          s_copyDocArg;
static QString          s_guardExpr;
static int              s_roundCount;
static bool             s_insideParBlock;

static int              s_memberGroupId = DOX_NOGROUP;
static QString          s_memberGroupHeader;
static QString          s_memberGroupDocs;
static QString          s_memberGroupRelates;
static QString          s_compoundName;

static bool             s_internalDocs;
static bool             s_processInternalDocs = false;

static ParserInterface        *langParser;        // the language parser that is calling us

static QSharedPointer<Entry>  s_docsEntry;        // which entry
static EntryKey               s_docsEnum;         // which enum in EntryKey (brief, main, inbody)

static QStack<GuardedSection> s_guards;           // tracks nested conditional sections (if, ifnot, ..)
static QSharedPointer<Entry>  current;            // working entry

static QStack<QSharedPointer<Grouping>> s_autoGroupStack;

static void initParser()
{
   s_sectionLabel.resize(0);
   s_sectionTitle.resize(0);
   s_memberGroupHeader.resize(0);

   s_insideParBlock = false;
   s_internalDocs   = Config::getBool("internal-docs");
}

static bool getDocSectionName(int s)
{
  switch(s) {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return true;
    default:
      return false;
  }
}

static bool makeStructuralIndicator(Entry::Sections s)
{
  if (getDocSectionName(current->section)) {
    return true;

  } else {
    s_needNewEntry     = true;
    current->section   = s;
    current->startLine = yyLineNr;

    current->setData(EntryKey::File_Name, yyFileName);
    return false;
  }
}
static void lineCount()
{
  for (const char *c = commentscanYYtext ; *c ; ++c) {
    yyLineNr += (*c == '\n') ;
  }
}

static QString stripQuotes(const QString &s)
{
   QString name = s;

   if (name.isEmpty()) {
      return name;
   }

   if (name.at(0) == '"' && name.at(name.length() - 1) == '"') {
      name = name.mid(1, name.length() - 2);
   }

   return name;
}

static void addXRefItem(const QString &listName, const QString &itemTitle, const QString &listTitle, bool append)
{
   QSharedPointer<Entry> docEntry = current; // inBody && previous ? previous : current;

   if (listName.isEmpty()) {
      return;
   }

   auto refList = Doxy_Globals::xrefLists.find(listName);

   if (refList == Doxy_Globals::xrefLists.end()) {
      // new list
      Doxy_Globals::xrefLists.insert(listName, RefList(listName, listTitle, itemTitle));
      refList = Doxy_Globals::xrefLists.find(listName);
   }

   ListItemInfo *listItem;

   for (auto &item : docEntry->m_specialLists) {
      listItem = &item;

      if (listItem->type == listName) {
         break;
      }
   }

   if (listItem && append) {
      // already found item of same type just before this one

      RefItem *item = refList->getRefItem(listItem->itemId);
      assert(item != 0);

      item->text += " <p>";

      if (Doxy_Globals::markdownSupport) {
         item->text += processMarkdown(yyFileName, yyLineNr, current, s_outputXRef);
      } else {
         item->text += s_outputXRef;
      }

   } else {
      // new item

      int itemId  = refList->addRefItem();

      // if we have already an item from the same list type (e.g. a second @todo)
      // in the same Entry (i.e. lii!=0) then we reuse its link anchor.

      QString anchorLabel = QString("_%1%2").arg(listName).arg(itemId, 6, 10, QChar('0'));

      RefItem *item = refList->getRefItem(itemId);
      assert(item != 0);

      if (Doxy_Globals::markdownSupport) {
         item->text = processMarkdown(yyFileName, yyLineNr, current, s_outputXRef);
      } else {
         item->text = s_outputXRef;
      }

      item->listAnchor = anchorLabel;
      docEntry->addSpecialListItem(listName, itemId);

      QString cmdString = QString("\\xrefitem %1 %2.").arg(listName).arg(itemId);

      if (inBody) {
         docEntry->appendData(EntryKey::Inbody_Docs, cmdString);
      } else {
         docEntry->appendData(EntryKey::Main_Docs,   cmdString);
      }

      QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorLabel);

      if (si) {
         if (si->lineNr != -1) {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s, line %d)",
                  csPrintable(anchorLabel), csPrintable(si->fileName), si->lineNr);

         } else {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s)",
                  csPrintable(anchorLabel), csPrintable(si->fileName));
         }

      } else {
         si = QMakeShared<SectionInfo>(listName, yyLineNr, anchorLabel, s_sectionTitle, SectionInfo::Anchor, s_sectionLevel);
         Doxy_Globals::sectionDict.insert(anchorLabel, si);
         docEntry->m_anchors.append(*si);
      }
   }

   s_outputXRef = "";
}

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QString addFormula()
{
   QString formLabel;
   QString fText = formulaText.simplified();

   auto f = Doxy_Globals::formulaDict.find(fText);

   if (f == Doxy_Globals::formulaDict.end()) {
      Formula temp = Formula(fText);

      Doxy_Globals::formulaList.append(temp);
      Doxy_Globals::formulaDict.insert(fText, temp);

      formLabel = QString("\\form#%1").arg(temp.getId());

      Doxy_Globals::formulaNameDict.insert(formLabel, temp);
      f = Doxy_Globals::formulaDict.find(fText);

   } else {
      formLabel = QString("\\form#%1").arg(f->getId());

   }

   for (int i = 0; i < formulaNewLines; i++) {
      formLabel += "@_fakenl";   // add fake newlines to
   }

   // keep the warnings correctly aligned
   return formLabel;
}

static void checkFormula();

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level >= 0 && level < 5) {
      return (SectionInfo::SectionType)level;
   }

   return SectionInfo::Anchor;
}

static void addSection()
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(s_sectionLabel);

   if (si) {
      if (si->lineNr != -1) {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName), si->lineNr);

      } else {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName));
      }

   } else {
      // create a new section element
      s_sectionTitle += QString::fromUtf8(commentscanYYtext).trimmed();

      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, s_sectionLabel, s_sectionTitle,
                  sectionLevelToType(s_sectionLevel), s_sectionLevel);

      // add section to this entry
      current->m_anchors.append(*si);

      // add section to the global dictionary
      Doxy_Globals::sectionDict.insert(s_sectionLabel, si);

      // for a section the si->fileName is the physical file name. this will be replaced with the section name
      // in doctokenizer processSection()
   }
}

static void addCite()
{
   QString text = QString::fromUtf8(commentscanYYtext);
   Doxy_Globals::citeDict.insert(text);
}

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QString &s)
{
   uint len = s.length();

   int i = len - 1;
   QChar c;

   while (i >= 0 && ((c = s.at(i)) == ' ' || c == '\t' || c == '\r')) {
      i--;
   }

   if (i != len - 1) {
      // string up to and including char at pos i and \0 terminator
      s.resize(i + 2);
   }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
   bool xrefAppendToPrev = xrefAppendFlag;

   // determine append flag for the next item (i.e. the end of this item)
   xrefAppendFlag = ! inBody &&
                    inContext == OutputXRef && ctx == OutputXRef &&    // two consecutive xref items
                    newXRefKind == xrefKind &&                         // of the same kind
                    (xrefKind != XRef_Item ||
                    newXRefItemKey == xrefItemKey);                    // with the same key if \xrefitem

   if (inContext == OutputXRef) {

      // end of XRef section => add the item
      // See if we can append this new xref item to the previous one.
      // We know this at the start of the next item of the same
      // type and need to remember this until the end of that item.

    switch(xrefKind) {
         case XRef_Todo:
            addXRefItem("todo", theTranslator->trTodo(), theTranslator->trTodoList(), xrefAppendToPrev);
            break;

         case XRef_Test:
            addXRefItem("test", theTranslator->trTest(), theTranslator->trTestList(), xrefAppendToPrev);
            break;

         case XRef_Bug:
            addXRefItem("bug", theTranslator->trBug(), theTranslator->trBugList(), xrefAppendToPrev);
            break;

         case XRef_Deprecated:
            addXRefItem("deprecated", theTranslator->trDeprecated(), theTranslator->trDeprecatedList(), xrefAppendToPrev);
            break;

         case XRef_Item:
            // user defined list
            addXRefItem(xrefItemKey, xrefItemTitle, xrefListTitle, xrefAppendToPrev);
            break;

         case XRef_None:
            assert(0);
            break;
      }
   }

  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;

   if (inContext != OutputXRef && inBody) {
      inContext = OutputInbody;
   }

  switch(inContext) {
      case OutputMainDoc:
         if (oldContext != inContext) {

            QString tmpDocs = current->getData(EntryKey::Main_Docs);
            stripTrailingWhiteSpace(tmpDocs);
            current->setData(EntryKey::Main_Docs, tmpDocs);

            if (current->getData(EntryKey::MainDocs_File).isEmpty()) {
               current->setData(EntryKey::MainDocs_File, yyFileName);
               current->docLine = yyLineNr;
            }
         }

         s_docsEntry = current;
         s_docsEnum  = EntryKey::Main_Docs;

         break;

      case OutputBrief:
         if (oldContext != inContext) {

            if (current->getData(EntryKey::Brief_File).isEmpty()) {
               current->setData(EntryKey::Brief_File,   yyFileName);
               current->briefLine = yyLineNr;
            }
         }

         if (current->getData(EntryKey::Brief_Docs).trimmed().isEmpty())  {
            // we only want one brief description even if multiple are given
            s_docsEntry = current;
            s_docsEnum  = EntryKey::Brief_Docs;

         } else {
            s_docsEntry  = current;
            s_docsEnum   = EntryKey::Main_Docs;

            inContext    = OutputMainDoc;             // need to switch to detailed docs
         }
         break;

      case OutputInbody:
         s_docsEntry = current;
         s_docsEnum  = EntryKey::Inbody_Docs;
         break;

      case OutputXRef:
         // indicates s_outputXRef should be used for the output string
         s_docsEntry = QSharedPointer<Entry>();

         break;
   }
}

static void addAnchor(const QString &anchorName)
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorName);

   if (si) {
      // anchor name already exists
      si->dupAnchor_cnt++;

   } else {
      // title is empty, level is zero
      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, anchorName, QString(""), SectionInfo::Anchor, 0);
      si->dupAnchor_fName = yyFileName;

      Doxy_Globals::sectionDict.insert(anchorName, si);
      current->m_anchors.append(*si);
   }
}

// add a string to one of the three doc outputs
static void addToOutput(const QString &str)
{
   if (s_docsEntry == nullptr) {
      // indicates s_outputXRef should be used for the output string
      s_outputXRef += str;

   } else {
      s_docsEntry->appendData(s_docsEnum, str);
   }
}

static void addToOutput(QChar c)
{
   if (s_docsEntry == nullptr) {
      // indicates s_outputXRef should be used for the output string
      s_outputXRef += c;

   } else {
      s_docsEntry->appendData(s_docsEnum, c);
   }
}

static void endBrief(bool isOutput = true)
{
   if (! current->getData(EntryKey::Brief_Docs).trimmed().isEmpty()) {
      // only go to the detailed description if we found some brief description and not just whitespace

      briefEndsAtDot = false;
      setOutput(OutputMainDoc);

      if (isOutput) {
         QString text = QString::fromUtf8(commentscanYYtext);
         addToOutput(text);
      }
   }
}

static void handleGuard(const QString &expr);

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   s_bufferPosition = buf;
   s_prevPosition   = s_inputPosition;

   //
   int len = max_size;

   QString tmp1    = s_inputString.mid(s_inputPosition, max_size);
   QByteArray tmp2 = tmp1.toUtf8();

   while(len > 0 && tmp2.size() > len) {
     len = len / 2;

     tmp1.truncate(len);
     tmp2 = tmp1.toUtf8();
   };

   s_inputPosition += len;
   memcpy(buf, tmp2.constData(), tmp2.size());

   return tmp2.size();
}

/* start command character */
/* comment parsing states */

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define ParamArg1 13
#define EnumDocArg1 14
#define NameSpaceDocArg1 15
#define PackageDocArg1 16
#define GroupDocArg1 17
#define GroupDocArg2 18
#define SectionLabel 19
#define SectionTitle 20
#define SubpageLabel 21
#define SubpageTitle 22
#define FormatBlock 23
#define LineParam 24
#define GuardParam 25
#define GuardParamEnd 26
#define SkipGuardedSection 27
#define SkipInternal 28
#define NameParam 29
#define InGroupParam 30
#define FnParam 31
#define OverloadParam 32
#define InheritParam 33
#define ExtendsParam 34
#define ReadFormulaShort 35
#define ReadFormulaLong 36
#define AnchorLabel 37
#define HtmlComment 38
#define SkipLang 39
#define CiteLabel 40
#define CopyDoc 41
#define GuardExpr 42

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  /* What can happen while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxy\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1152 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9781 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      // mail address
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // quoted text
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      // directory (or chain of commands)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
{
      // HTML command ends a brief description
      setOutput(OutputMainDoc);

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
{
      // HTML command that ends a brief description
      if (current->m_srcLang == SrcLangExt_CSharp) {
         setOutput(OutputMainDoc);
      }

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      // start of a .NET XML style brief description
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
      setOutput(OutputBrief);
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
      setOutput(OutputBrief);
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
      setOutput(OutputMainDoc);
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // end of a brief or detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      QString tag = QString::fromUtf8(commentscanYYtext);

      int s = tag.indexOf("id=");

      if (s != -1) {
         // command has id attribute
         QChar c = tag[s + 3];

         if (c == '\'' || c == '"') {
            // valid start
            int e = tag.indexOf(c,s + 4);

            if (e != -1) {
               // found matching end

               QString id = tag.mid(s + 4, e-s-4);   // extract id
               addAnchor(id);
            }
         }
      }

      addToOutput(tag);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      insidePre = true;
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      insidePre = false;
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      // RCS tag which end a brief description
      setOutput(OutputMainDoc);
      REJECT;
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      BEGIN(HtmlComment);
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      addToOutput("\\endinternal ");

      if (! s_processInternalDocs) {
         warn(yyFileName, yyLineNr, "Found \\endinternal without matching \\internal");
      }

      s_processInternalDocs = false;
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      // might be a valid command
      // the {B}* in the front was added for bug620924

      QString text = QString::fromUtf8(commentscanYYtext);

      QString cmdName = text.trimmed().mid(1);
      DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);

      if (cmdPtr) {
         // special action is required

         int i = 0;
         while (text[i] == ' ' || text[i] == '\t') {
            i++;
         }

         s_spaceBeforeCmd = QString(text).left(i);

         if (cmdPtr->endsBrief && ! (inContext == OutputXRef && cmdName == "parblock")) {
            briefEndsAtDot = false;

            // this command forces the end of brief description
            setOutput(OutputMainDoc);
         }

         if (cmdPtr->func && cmdPtr->func(cmdName)) {
            // implicit split of the comment block into two entries
            // restart the next block at the start of this command

            s_parseMore = true;

            s_inputPosition = s_prevPosition + (yy_bp - s_bufferPosition);
            yyterminate();

         } else if (cmdPtr->func == nullptr) {
            // command without handler is processed later by parserdoc.cpp
            addToOutput(text);
         }

      } else {
         // command not relevant
         addToOutput(text);
      }
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      // escaped formula command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      // language switch command
      static const QString outputLanguage = Config::getEnum("output-language");

      QString text   = QString::fromUtf8(commentscanYYtext);
      QString langId = text.trimmed().mid(2);

      if (! langId.isEmpty() && outputLanguage.compare(langId, Qt::CaseInsensitive) != 0) {
         // enable language specific section
         BEGIN(SkipLang);
      }
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      // start of a formula with custom environment
      QString text = QString::fromUtf8(commentscanYYtext);

      formulaText = "\\begin";
      formulaEnv = text.trimmed().mid(2);

      if (formulaEnv.at(formulaEnv.length() - 1) == '{') {
         // remove trailing open brace
         formulaEnv = formulaEnv.left(formulaEnv.length() - 1);
      }

      formulaText += formulaEnv;
      formulaNewLines = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      // start of a inline formula
      formulaText     = "$";
      formulaNewLines = 0;
      BEGIN(ReadFormulaShort);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      // start of a block formula
      formulaText      = "\\[";
      formulaNewLines  = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      // beginning of a group
      openGroup(current, yyFileName, yyLineNr);
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      // end of a group
      QString text = QString::fromUtf8(commentscanYYtext);

      closeGroup(current, yyFileName, yyLineNr, true);

      s_memberGroupHeader.clear();
      s_parseMore    = true;
      s_needNewEntry = true;

      s_inputPosition = s_prevPosition + (yy_bp - s_bufferPosition) + text.length();
      yyterminate();
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      // escaped character
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      // normal word
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // explicit end autolist: e.g "  ."
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 29:
case 30:
YY_RULE_SETUP
{
      // start of autolist
      if (! Doxy_Globals::markdownSupport) {
         REJECT;

      } else {

         if (inContext != OutputXRef) {
            briefEndsAtDot = false;
            setOutput(OutputMainDoc);
         }

         QString text = QString::fromUtf8(commentscanYYtext);
         addToOutput(text);
      }
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      // start of autolist
      if (inContext != OutputXRef) {
         briefEndsAtDot = false;
         setOutput(OutputMainDoc);
      }

      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // horizontal line (dashed)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      // mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&mdash;");
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      // ndash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&ndash;");
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      // numbered item
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      // . at start or in the middle of a word, or ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      // . with escaped space
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text[0]);
      addToOutput(text[2]);
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      // . with comma such as "e.g.,"
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      // ellipsis with escaped space
      addToOutput("... ");
   }
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // internal ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{
      // at least one blank line (or blank line command)

      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext == OutputXRef) {
         // see bug 613024, need to put the newlines after ending the XRef section.

         if (! s_insideParBlock) {
            setOutput(OutputMainDoc);
         }

         for (int i = 0; i < text.length();  ) {
            if (text[i] == '\n') {
               addToOutput('\n');
               i++;

            } else if (text.mid(i) == "\\_linebr")  {
               addToOutput('\n');
               i += 8;

            } else  {
               i++;
            }
         }

      } else if (inContext != OutputBrief) {

         for (int i = 0; i< text.length(); ) {
            if (text[i] == '\n') {
               addToOutput('\n');
               i++;

            } else if (text.mid(i) == "\\_linebr")  {
                addToOutput('\n');
                i += 8;

            } else  {
               i++;

            }
         }

         setOutput(OutputMainDoc);

      } else {
          // inContext == OutputBrief
          // only go to the detailed description if we have
          // found some brief description and not just whitespace

         endBrief(false);
      }

      lineCount();
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      // potential end of a JavaDoc style comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);

      if (briefEndsAtDot) {
         setOutput(OutputMainDoc);
         briefEndsAtDot = false;
      }
   }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{
      // newline
      addToOutput('\n');
      yyLineNr++;
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      // utf-8 code point
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      // catch all for anything else
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 48:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // ignore unimportant characters
   }
	YY_BREAK
case 51:
YY_RULE_SETUP
{
      // ignore every else
   }
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 52:
YY_RULE_SETUP
{
      // end of inline formula
      formulaText += "$";
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      // end of block formula
      formulaText += "\\]";
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // end of custom env formula
      formulaText += "\\end";
      formulaText += formulaEnv;
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
{
      // any non-special character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text;
   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      formulaNewLines++;
      formulaText += text[0];
      yyLineNr++;
   }
	YY_BREAK
case 57:
YY_RULE_SETUP
{
      // any othe character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text[0];
   }
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\enum");

      addToOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 61:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text,".", "::");
      BEGIN( Comment );
   }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\namespace");

      addToOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 66:
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\package");
      addToOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 69:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(removeRedundantWhiteSpace(text),".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_entryName = substitute(text,".","::");
      if (current->section == Entry::PROTOCOLDOC_SEC) {
         current->m_entryName += "-p";
      }

      // prepend outer scope name
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text,".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\%s",
                  YY_START == ClassDocArg1 ? "class" : "category" );

      addToOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 76:
YY_RULE_SETUP
{
      // second argument, include file
      QString text = QString::fromUtf8(commentscanYYtext);
      current->setData(EntryKey::Include_File, text);
      BEGIN( ClassDocArg3 );
   }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput('\n');

      if (text[0] == '\n')  {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 79:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 80:
YY_RULE_SETUP
{
      // third argument, include file name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->setData(EntryKey::Include_Name, text);
      BEGIN( Comment );
   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] =='\n') {
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of {def,add,weak} group commands --------- */
case 84:
YY_RULE_SETUP
{
      // group name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;

      // lastDefGroup.groupname = text;
      // lastDefGroup.pri = current->groupingPri();
      // the .html stuff is for Qt compatibility

      if (current->m_entryName.endsWith(".html")) {
         current->m_entryName = current->m_entryName.left(current->m_entryName.length() - 5);
      }

      current->setData(EntryKey::Member_Type, "");
      BEGIN(GroupDocArg2);
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing group name after %s", csPrintable(current->groupDocCmd()) );

      addToOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      // title (stored in type)
      QString text = QString::fromUtf8(commentscanYYtext);
      current->appendData(EntryKey::Member_Type, text.trimmed());
   }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if ( current->groupDocType == Entry::GROUPDOC_NORMAL && current->getData(EntryKey::Member_Type).isEmpty()) {
            // defgroup requires second argument
            warn(yyFileName, yyLineNr, "Missing title after \\defgroup %s", csPrintable(current->m_entryName) );
      }

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 90:
YY_RULE_SETUP
{
      // first argument; page name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = stripQuotes(text);
      BEGIN( PageDocArg2 );
   }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{
      // missing arguement
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\page");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{
      // second argument; page title
      QString text = QString::fromUtf8(commentscanYYtext);

      yyLineNr++;
      current->setData(EntryKey::Member_Args, text);

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the param command ------------ */
case 95:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addToOutput('\\');
      }

      addToOutput(text);
   }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
      addToOutput(" , ");
   }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addToOutput('\\');
      }

      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{
      // no file name specified
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
      // first argument; name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = stripQuotes(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 103:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      newXRefItemKey = text;
      setOutput(OutputXRef);

      BEGIN(XRefItemParam2);
   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{
      // missing arguments
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing first argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
      // second argument
      QString text = QString::fromUtf8(commentscanYYtext);
      xrefItemTitle = stripQuotes(text);
      BEGIN(XRefItemParam3);
   }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing second argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
      // third argument
      QString text = QString::fromUtf8(commentscanYYtext);

      xrefListTitle = stripQuotes(text);
      xrefKind = XRef_Item;

      BEGIN( Comment );
   }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr,"Missing third argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 115:
YY_RULE_SETUP
{
      // argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->setData(EntryKey::Related_Class, text);
      BEGIN( Comment );
   }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument of \\relates or \\memberof command");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 122:
YY_RULE_SETUP
{
      // first argyment
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionLabel = text;
      addToOutput(text);
      s_sectionTitle.resize(0);

      BEGIN(SectionTitle);
   }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\section command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      // invalid character for section label
      warn(yyFileName, yyLineNr, "Invalid or missing section label");
      BEGIN(Comment);
   }
	YY_BREAK
case 125:
/* rule 125 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 126:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
      // any character without special meaning
      QString text = QString::fromUtf8(commentscanYYtext);
      s_sectionTitle += text;
      addToOutput(text);
   }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
      // unescape escaped command
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text.mid(1);
      addToOutput(text);
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      // unescape escaped character
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text[1];
      addToOutput(text);
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      // anything else
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text;
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 132:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      // we add subpage labels as a kind of "inheritance" relation to prevent
      // needing to add another list to the Entry class.

      current->extends.append(BaseInfo(text, Public, Normal));
      BEGIN(SubpageTitle);
   }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\subpage command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{
      // no title, end command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
      // add title, end of command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
      // no title, end of command
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 137:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addAnchor(text);
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\anchor command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing anchor label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 140:
/* rule 140 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // possible ends
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (text.mid(4) == blockName)  {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (blockName == "startuml")   {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
      // some word
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text);
   }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      // start of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);

      s_commentCount++;
      addToOutput(text);
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
      // end of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      s_commentCount--;

      if (s_commentCount < 0 && blockName != "verbatim") {
         warn(yyFileName, yyLineNr, "Found */ without matching /* while inside a \\%s block. "
            "Perhaps there is a missing \\end%s?\n", csPrintable(blockName), csPrintable(blockName));
      }
   }
	YY_BREAK
case 146:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
{
      QString endTag = "@end" + blockName;

      if (blockName == "startuml") {
         endTag = "enduml";
      }

      warn(yyFileName, yyLineNr, "Reached end of comment while inside a @%s block, check for missing @%s tag",
                 csPrintable(blockName), csPrintable(endTag) );

      yyterminate();
   }
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 147:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr  = text;
      s_roundCount = 1;
      BEGIN(GuardExpr);
   }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
      s_roundCount++;
   }
	YY_BREAK
case 150:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_guardExpr += text;
      s_roundCount--;

      if (s_roundCount == 0) {
         handleGuard(s_guardExpr);
      }
   }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{
      warn(yyFileName, yyLineNr, "Invalid expression '%s' for guard", csPrintable(s_guardExpr));
      unput(commentscanYYtext[0]);
      BEGIN(GuardParam);
   }
	YY_BREAK
case 152:
YY_RULE_SETUP
{
      // parameter of if/ifnot guard
      QString text = QString::fromUtf8(commentscanYYtext);
      handleGuard(text);
   }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // next line is commented out due to bug620924
      // addToOutput('\n');

      BEGIN( Comment );
   }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 155:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
{
      s_spaceBeforeIf.resize(0);
      BEGIN(Comment);
   }
	YY_BREAK
case 157:
YY_RULE_SETUP
{
      if (! s_spaceBeforeIf.isEmpty()) {
         // needed for 665313 in combation with bug620924

         addToOutput(s_spaceBeforeIf);
      }

      s_spaceBeforeIf.resize(0);
      BEGIN(Comment);
   }
	YY_BREAK
case 158:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 159:
/* rule 159 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      guardType = Guard_IfNot;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 160:
/* rule 160 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      guardType = Guard_If;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 161:
/* rule 161 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found @endif without matching start command");

       } else {
         GuardedSection s   = s_guards.pop();
         bool parentVisible = s.parentVisible();

         if (parentVisible) {
            enabledSectionFound = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 162:
/* rule 162 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName, yyLineNr, "Found @else without matching start command");

      } else {

         if (! enabledSectionFound && s_guards.top().parentVisible()) {
            s_guards.pop();
            s_guards.push(GuardedSection(true,true));

            enabledSectionFound = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 163:
/* rule 163 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found @elseif without matching start command");

       } else {

         if (! enabledSectionFound && s_guards.top().parentVisible()) {
            guardType = Guard_If;
            s_guards.pop();

            BEGIN( GuardParam );
         }
      }
   }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // addToOutput('\n');
   }
	YY_BREAK
case 165:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 166:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
   }
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 169:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 170:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount--;

      if (s_condCount < 0 )   {
         // handle conditional section around \internal, see bug607743

         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 171:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 0 ) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 172:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 1)  {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 173:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 2) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 174:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 3) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{
      addToOutput("\\endinternal ");
      BEGIN(Comment);
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 177:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle argument of name command ------- */
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
      s_memberGroupHeader+=' ';
   }
	YY_BREAK
case 180:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_memberGroupHeader  += text[0];
      current->m_entryName += text[0];
   }
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 181:
YY_RULE_SETUP
{
      // group id
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_groups.append(Grouping(text, Grouping::GROUPING_INGROUP) );
      inGroupParamFound = true;
   }
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! inGroupParamFound) {
         warn(yyFileName,yyLineNr, "Missing group name for \\ingroup command");
      }

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 184:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
{
      // end of fn declaration, pass to langParser as a "prototype"
      QString text = QString::fromUtf8(commentscanYYtext);

      if (braceCount == 0) {
         if (text[0] == '\n')   {
            yyLineNr++;
         }

         addToOutput('\n');

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(functionProto);
         }

         BEGIN( Comment );
      }
   }
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      functionProto += ' ';
   }
	YY_BREAK
case 187:
YY_RULE_SETUP
{
      // non-special characters
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
      braceCount++;
   }
	YY_BREAK
case 189:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text;
      braceCount--;
   }
	YY_BREAK
case 190:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
{
      // end of overload declaration, pass to langParser as a "prototype"
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')  {
         yyLineNr++;
      }

      if (functionProto.trimmed().isEmpty()) {
         // plain overload command
         addToOutput(theTranslator->trOverloadText());
         addToOutput('\n');

      }  else   {
         // overload declaration
         makeStructuralIndicator(Entry::OVERLOADDOC_SEC);

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(functionProto);
         }
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      functionProto += ' ';
   }
	YY_BREAK
case 193:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 194:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text), Public, Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\inherit command has no argument");

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 196:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing name for \\inherit command");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 197:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text),Public,Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName,yyLineNr, "\\extends or \\implements command has no argument");

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 199:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle language specific sections ------- */
case 200:
YY_RULE_SETUP
{
      /* language switch */
      QString text = QString::fromUtf8(commentscanYYtext);
      QString langId = text.mid(2);

      if (langId.isEmpty() || Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) == 0) {
         // enable language specific section
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 201:
YY_RULE_SETUP
{
      /* any character not a *, @, backslash or new line */
   }
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
{
      /* new line in verbatim block */
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 203:
YY_RULE_SETUP
{
      /* any other character */
   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 204:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addCite();
      addToOutput(text);
      BEGIN(Comment);
   }
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\cite command has no label" );

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 206:
YY_RULE_SETUP
{
      // invalid character for cite label
      warn(yyFileName,yyLineNr, "Invalid or missing cite label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');

      setOutput(OutputMainDoc);
      addToOutput("\\copydetails ");
      addToOutput(s_copyDocArg);

      addToOutput("\n");

      BEGIN(Comment);
   }
	YY_BREAK
case 208:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addToOutput(text);
   }
	YY_BREAK
case 209:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addToOutput(text);
   }
	YY_BREAK
case 210:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(ParamArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1152 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1152 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1151);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static bool handleBrief(const QString &)
{
   setOutput(OutputBrief);
   return false;
}

static bool handleFn(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   functionProto.resize(0);
   braceCount = 0;
   BEGIN(FnParam);

   return stop;
}

static bool handleDef(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::DEFINEDOC_SEC);
   functionProto.resize(0);
   BEGIN(FnParam);
   return stop;
}

static bool handleOverload(const QString &)
{
   functionProto.resize(0);
   BEGIN(OverloadParam);
   return false;
}

static bool handleEnum(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::ENUMDOC_SEC);
   BEGIN(EnumDocArg1);
   return stop;
}

static bool handleDefGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_NORMAL;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleAddToGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_ADD;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleWeakGroup(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_WEAK;
   BEGIN( GroupDocArg1 );
   return stop;
}

static bool handleNamespace(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
   BEGIN( NameSpaceDocArg1 );
   return stop;
}

static bool handlePackage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
   BEGIN( PackageDocArg1 );
   return stop;
}

static bool handleClass(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::CLASSDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleHeaderFile(const QString &)
{
   BEGIN( ClassDocArg2 );
   return false;
}

static bool handleProtocol(const QString &)
{
   // Obj-C protocol
   bool stop = makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleCategory(const QString &)
{
   // Obj-C category
   bool stop = makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
   BEGIN( CategoryDocArg1 );
   return stop;
}

static bool handleUnion(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::UNIONDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleStruct(const QString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleInterface(const QString &)
{
  bool stop = makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleIdlException(const QString &)
{
  bool stop = makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handlePage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::PAGEDOC_SEC);
   BEGIN( PageDocArg1 );
   return stop;
}

static bool handleMainpage(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);

   if (! stop) {
      current->m_entryName = "mainpage";
   }

   BEGIN( PageDocArg2 );
   return stop;
}

static bool handleFile(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::FILEDOC_SEC);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleParam(const QString &)
{
  // process param and retval arguments to escape leading underscores
  // in case of markdown processing

  addToOutput("@param ");
  BEGIN( ParamArg1 );

  return false;
}

static bool handleRetval(const QString &)
{
  addToOutput("@retval ");
  BEGIN( ParamArg1 );

  return false;
}

static bool handleDir(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::DIRDOC_SEC);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleExample(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::EXAMPLE_SEC);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleDetails(const QString &)
{
   if (inContext != OutputBrief) {
      // treat @details outside brief description as a new paragraph
      addToOutput("\n\n");
   }

   setOutput(OutputMainDoc);
   return false;
}

static bool handleName(const QString &)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERGRP_SEC);

   if (! stop) {
      s_memberGroupHeader.resize(0);
      BEGIN( NameParam );

      if (s_memberGroupId != DOX_NOGROUP) {
         // end of previous member group

         closeGroup(current,yyFileName,yyLineNr,true);
       }
  }

  return stop;
}

static bool handleTodo(const QString &)
{
   newXRefKind = XRef_Todo;
   setOutput(OutputXRef);
   xrefKind = XRef_Todo;
   return false;
}

static bool handleTest(const QString &)
{
   newXRefKind = XRef_Test;
   setOutput(OutputXRef);
   xrefKind = XRef_Test;
   return false;
}

static bool handleBug(const QString &)
{
   newXRefKind = XRef_Bug;
   setOutput(OutputXRef);
   xrefKind = XRef_Bug;
   return false;
}

static bool handleDeprecated(const QString &)
{
   newXRefKind = XRef_Deprecated;
   setOutput(OutputXRef);
   xrefKind = XRef_Deprecated;
   return false;
}

static bool handleXRefItem(const QString &)
{
   newXRefKind = XRef_Item;
   BEGIN(XRefItemParam1);
   return false;
}

static bool handleParBlock(const QString &)
{
   if (s_insideParBlock)   {
      warn(yyFileName,yyLineNr, "Found \\parblock command while already in a parblock");
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addToOutput("@parblock ");
   s_insideParBlock = true;

   return false;
}

static bool handleEndParBlock(const QString &)
{
   if (! s_insideParBlock) {
     warn(yyFileName,yyLineNr, "Found \\endparblock command without matching \\parblock");
   }

   addToOutput("@endparblock");
   setOutput(OutputMainDoc);    // to end a parblock inside a xrefitem like context
   s_insideParBlock = false;

   return false;
}

static bool handleRelated(const QString &)
{
   BEGIN(RelatesParam1);
   return false;
}

static bool handleRelatedAlso(const QString &)
{
   current->relatesType = Duplicate;
   BEGIN(RelatesParam1);
   return false;
}

static bool handleMemberOf(const QString &)
{
   current->relatesType = MemberOf;
   BEGIN(RelatesParam1);
   return false;
}

static bool handleRefItem(const QString &)
{
   addToOutput("@refitem ");
   BEGIN(LineParam);
   return false;
}

static bool handleSection(const QString &s)
{
   setOutput(OutputMainDoc);
   addToOutput("@"+s+" ");
   BEGIN(SectionLabel);

   if (s == "section") {
      s_sectionLevel = 1;

   } else if (s == "subsection") {
      s_sectionLevel = 2;

   } else if (s == "subsubsection") {
      s_sectionLevel = 3;

   } else if (s == "paragraph") {
      s_sectionLevel = 4;

   }

   return false;
}

static bool handleSubpage(const QString &s)
{
   if (current->section != Entry::EMPTY_SEC && current->section != Entry::PAGEDOC_SEC &&
         current->section != Entry::MAINPAGEDOC_SEC) {

      warn(yyFileName,yyLineNr, "Found \\subpage command in a comment block that is not marked as a page");
  }

  if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
  }

   addToOutput("@"+s+" ");
   BEGIN(SubpageLabel);

   return false;
}

static bool handleAnchor(const QString &s)
{
   addToOutput("@"+s+" ");
   BEGIN(AnchorLabel);
   return false;
}

static bool handleCite(const QString &s)
{
   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("@" + s + " ");
   BEGIN(CiteLabel);
   return false;
}

static bool handleFormatBlock(const QString &s)
{
   addToOutput("@" + s + " ");

   blockName      = s;
   s_commentCount = 0;
   BEGIN(FormatBlock);

   return false;
}

static bool handleAddIndex(const QString &)
{
   addToOutput("@addindex ");
   BEGIN(LineParam);
   return false;
}

static bool handleIf(const QString &)
{
   enabledSectionFound = false;
   guardType = Guard_If;
   s_spaceBeforeIf = s_spaceBeforeCmd;
   BEGIN(GuardParam);
   return false;
}

static bool handleIfNot(const QString &)
{
   enabledSectionFound = false;
   guardType = Guard_IfNot;
   s_spaceBeforeIf = s_spaceBeforeCmd;
   BEGIN(GuardParam);
   return false;
}

static bool handleElseIf(const QString &)
{
   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      guardType = enabledSectionFound ? Guard_Skip : Guard_If;
      BEGIN(GuardParam);
   }

   return false;
}

static bool handleElse(const QString &)
{
   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      BEGIN( SkipGuardedSection );
   }

   return false;
}

static bool handleEndIf(const QString &)
{
   if (s_guards.isEmpty())   {
      warn(yyFileName,yyLineNr, "Found \\endif without matching start command");

   } else {
      s_guards.pop();
   }

   enabledSectionFound = false;
   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   BEGIN( GuardParamEnd );
   return false;
}

static bool handleIngroup(const QString &)
{
   inGroupParamFound = false;
   BEGIN( InGroupParam );
   return false;
}

static bool handleNoSubGrouping(const QString &)
{
   current->subGrouping = false;
   return false;
}

static bool handleShowInitializer(const QString &)
{
   current->initLines = 100000;  // ON
   return false;
}

static bool handleHideInitializer(const QString &)
{
   current->initLines = 0;
   return false;
}

static bool handleCallgraph(const QString &)
{
   current->callGraph = true;
   return false;
}

static bool handleHideCallgraph(const QString &)
{
   current->callGraph = false;
   return false;
}

static bool handleCallergraph(const QString &)
{
   current->callerGraph = true;
   return false;
}

static bool handleHideCallergraph(const QString &)
{
   current->callerGraph = false;
   return false;
}

static bool handleInternal(const QString &)
{
   if (s_internalDocs) {
      addToOutput("\\internal ");
      s_processInternalDocs = true;

   } else {
      // make sure some whitespace before an \internal command
      // is not treated as "documentation"

      if (current->getData(EntryKey::Main_Docs).trimmed().isEmpty()) {
         current->setData(EntryKey::Main_Docs,   "");
      }

      s_condCount = 0;
      BEGIN( SkipInternal );
  }

  return false;
}

static bool handleLineBr(const QString &)
{
   addToOutput('\n');
   return false;
}

static bool handleStatic(const QString &)
{
   endBrief();
   current->stat = true;
   return false;
}

static bool handlePure(const QString &)
{
   endBrief();
   current->virt = Pure;
   return false;
}

static bool handlePrivate(const QString &)
{
  current->protection = Private;
  return false;
}

static bool handlePrivateSection(const QString &)
{
   current->protection = protection = Private;
   return false;
}

static bool handleProtected(const QString &)
{
   current->protection = Protected;
   return false;
}

static bool handleProtectedSection(const QString &)
{
   current->protection = protection = Protected ;
   return false;
}

static bool handlePublic(const QString &)
{
   current->protection = Public;
   return false;
}

static bool handlePublicSection(const QString &)
{
   current->protection = protection = Public;
   return false;
}

static bool handleToc(const QString &)
{
   if (current->section == Entry::PAGEDOC_SEC || current->section==Entry::MAINPAGEDOC_SEC) {
      current->stat = true;  // we 'abuse' stat to pass whether or the TOC is enabled
   }
   return false;
}

static bool handleInherit(const QString &)
{
   BEGIN(InheritParam);
   return false;
}

static bool handleExtends(const QString &)
{
   BEGIN(ExtendsParam);
   return false;
}

static bool handleCopyBrief(const QString &)
{
   if (current->getData(EntryKey::Brief_Docs).isEmpty() && current->getData(EntryKey::Main_Docs).isEmpty()) {

      // if we do not have a brief or detailed description yet,
      // then the @copybrief should end up in the brief description.
      // otherwise it will be copied inline (see bug691315 & bug700788)

      setOutput(OutputBrief);
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copybrief ");
   return false;
}

static bool handleCopyDetails(const QString &)
{
   setOutput(OutputMainDoc);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copydetails ");
   return false;
}

static bool handleCopyDoc(const QString &)
{
   setOutput(OutputBrief);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copybrief ");
   s_copyDocArg.resize(0);
   BEGIN(CopyDoc);

   return false;
}

static void checkFormula()
{
   if (YY_START == ReadFormulaShort || YY_START == ReadFormulaLong) {
      warn(yyFileName, yyLineNr, "End of comment block while inside formula.");
   }
}

// main entry point
bool parseCommentBlock(ParserInterface *parser, QSharedPointer<Entry> curEntry, const QString &comment,
                  const QString &fileName, int &lineNr, bool isBrief, bool isAutoBrief, bool isInbody,
                  Protection &r_protection, int &r_position, bool &r_newEntryNeeded )
{
   initParser();
   s_guards.clear();

   if (comment.isEmpty()) {
      // avoid empty strings
      return false;
   }

   langParser     = parser;
   current        = curEntry;
   s_inputString    = comment;
   yyFileName     = fileName;
   yyLineNr       = lineNr;
   briefEndsAtDot = isAutoBrief;
   inBody         = isInbody;

   protection     = r_protection;
   s_inputPosition  = r_position;

   xrefKind       = XRef_None;
   xrefAppendFlag = false;
   insidePre      = false;
   s_needNewEntry = false;
   s_parseMore    = false;

   s_outputXRef   = "";
   s_inputString.append(" ");

   if (isBrief || isAutoBrief) {
      setOutput(OutputBrief);

   } else {
      setOutput(OutputMainDoc);
   }

   s_condCount    = 0;
   s_sectionLevel = 0;

   s_spaceBeforeCmd.clear();
   s_spaceBeforeIf.clear();

   if (! current->getData(EntryKey::Main_Docs).isEmpty()) {
      // separate detailed doc fragments
      current->appendData(EntryKey::Main_Docs,  "\n\n");
   }

   if (! current->getData(EntryKey::Inbody_Docs).isEmpty() && isInbody) {
      // separate in body fragments
      current->appendData(EntryKey::Inbody_Docs, "\n\n");
   }

   commentscanYYrestart(commentscanYYin);
   BEGIN( Comment );
   commentscanYYlex();

   setOutput(OutputMainDoc);

   if (YY_START == OverloadParam) {
      // comment ended with \overload
      addToOutput(theTranslator->trOverloadText());
   }

   if (! s_guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Documentation block ended in the middle of a conditional section");
   }

   if (s_insideParBlock) {
      warn(yyFileName, yyLineNr, "Documentation block ended while inside a \\parblock. Missing \\endparblock");
   }

   // removes blank lines from the detailed docs
   current->setData(EntryKey::Main_Docs, trimEmptyLines(current->getData(EntryKey::Main_Docs), current->docLine));

   if (current->section == Entry::FILEDOC_SEC && current->getData(EntryKey::Main_Docs).isEmpty()) {
      // to allow a comment block with just a @file command
      current->setData(EntryKey::Main_Docs, "\n\n");
   }

   if (current->section == Entry::MEMBERGRP_SEC && s_memberGroupId == DOX_NOGROUP) {
      // @name section but no group started yet
      openGroup(current, yyFileName, yyLineNr);
   }

   if (Doxy_Globals::markdownSupport) {
      current->setData(EntryKey::Brief_Docs,  processMarkdown(fileName, lineNr, current, current->getData(EntryKey::Brief_Docs)  ));
      current->setData(EntryKey::Main_Docs,   processMarkdown(fileName, lineNr, current, current->getData(EntryKey::Main_Docs)   ));
      current->setData(EntryKey::Inbody_Docs, processMarkdown(fileName, lineNr, current, current->getData(EntryKey::Inbody_Docs) ));
   }

   checkFormula();
   r_protection = protection;

   groupAddDocs(curEntry);
   r_newEntryNeeded = s_needNewEntry;

   if (s_parseMore && r_position == s_inputPosition) {
      // did not proceed during this call, do not continue or there will be an infinate loop
      s_parseMore = false;
   }

   if (s_parseMore) {
      r_position = s_inputPosition;
   } else {
      r_position = 0;
   }

   lineNr = yyLineNr;

   return s_parseMore;
}

void groupEnterFile(const QString &fileName, int)
{
   s_autoGroupStack.clear();
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupDocs.clear();
   s_memberGroupRelates.clear();
   s_compoundName = fileName;
}

void groupLeaveFile(const QString &fileName, int line)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();

   if (! s_autoGroupStack.isEmpty()) {
      warn(fileName, line, "End of file while inside a group\n");
   }
}

void groupEnterCompound(const QString &fileName, int line, const QString &name)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      warn(fileName, line, "Try to put compound %s inside a member group\n", csPrintable(name));
   }

   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();
   s_compoundName = name;

   int i = s_compoundName.indexOf('(');

   if (i != -1) {
      // strip category (Obj-C)
      s_compoundName=s_compoundName.left(i);
   }

   if (s_compoundName.isEmpty()) {
      s_compoundName=fileName;
   }
}

void groupLeaveCompound(const QString &, int, const QString &)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);
   s_compoundName.resize(0);
}

static int findExistingGroup(int &groupId, const QSharedPointer<MemberGroupInfo> info)
{
   for (auto di = Doxy_Globals::memGrpInfoDict.begin(); di != Doxy_Globals::memGrpInfoDict.end(); ++di) {

      auto mi = *di;

      if (s_compoundName == mi->compoundName && ! mi->header.isEmpty() &&
               mi->header.compare(info->header, Qt::CaseInsensitive) == 0) {

         // same file or scope, not a nameless group, same header name
         return (int)di.key();    // put the item in this group
      }
   }

   groupId++; // start new group
   return groupId;
}

void openGroup(QSharedPointer<Entry> e, const QString &, int)
{
   if (e->section == Entry::GROUPDOC_SEC) {
      // auto group
      s_autoGroupStack.push( QMakeShared<Grouping>(e->m_entryName, e->groupingPri()) );

   } else {
      // start of a member group

      if (s_memberGroupId == DOX_NOGROUP) {
         // no group started yet
         static int curGroupId = 0;

         QSharedPointer<MemberGroupInfo> info = QMakeShared<MemberGroupInfo>();

         info->header = s_memberGroupHeader.trimmed();
         info->compoundName = s_compoundName;
         s_memberGroupId = findExistingGroup(curGroupId, info);

         Doxy_Globals::memGrpInfoDict.insert(s_memberGroupId, info);

         s_memberGroupRelates = e->getData(EntryKey::Related_Class);
         e->mGrpId = s_memberGroupId;
      }
   }
}

void closeGroup(QSharedPointer<Entry> e, const QString &fileName, int line, bool foundInline)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      // end of member group

      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         // known group
         info->doc     = s_memberGroupDocs;
         info->docFile = fileName;
         info->docLine = line;
      }

      s_memberGroupId = DOX_NOGROUP;
      s_memberGroupRelates.resize(0);
      s_memberGroupDocs.resize(0);

      if (! foundInline) {
         e->mGrpId = DOX_NOGROUP;
      }

   } else if (! s_autoGroupStack.isEmpty()) {
      // end of auto group
      QSharedPointer<Grouping> grp = s_autoGroupStack.pop();

      // see bug577005: we should not remove the last group for e
      if (! foundInline) {
         e->m_groups.removeLast();
      }

      if (! foundInline) {
         initGroupInfo(e);
      }
   }
}

void initGroupInfo(QSharedPointer<Entry> e)
{
   e->mGrpId  = s_memberGroupId;
   e->setData(EntryKey::Related_Class, s_memberGroupRelates);

   if (! s_autoGroupStack.isEmpty()) {
      e->m_groups.append(*s_autoGroupStack.top());
   }
}

static void groupAddDocs(QSharedPointer<Entry> e)
{
   if (e->section == Entry::MEMBERGRP_SEC) {
      s_memberGroupDocs = e->getData(EntryKey::Brief_Docs).trimmed();
      e->setData(EntryKey::Main_Docs, trimEmptyLines(e->getData(EntryKey::Main_Docs), e->docLine));

      if (! s_memberGroupDocs.isEmpty() && ! e->getData(EntryKey::Main_Docs).isEmpty()) {
         s_memberGroupDocs+="\n\n";
      }

      s_memberGroupDocs += e->getData(EntryKey::Main_Docs);
      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         info->doc      = s_memberGroupDocs;
         info->docFile  = e->getData(EntryKey::MainDocs_File);
         info->docLine  = e->docLine;
         info->setRefItems(e->m_specialLists);
      }

      e->setData(EntryKey::Brief_Docs, "");
      e->setData(EntryKey::Main_Docs,  "");
   }
}

static void handleGuard(const QString &expr)
{
   CondParser prs;
   bool sectionEnabled = prs.parse(yyFileName, yyLineNr, expr.trimmed());
   bool parentEnabled  = true;

   if (! s_guards.isEmpty()) {
      parentEnabled = s_guards.top().isEnabled();
   }

   if (parentEnabled) {
      if ( (sectionEnabled && guardType == Guard_If) || (! sectionEnabled && guardType == Guard_IfNot)) {
         // section is visible
         s_guards.push(GuardedSection(true, true));
         enabledSectionFound = true;
         BEGIN( GuardParamEnd );

      } else {
         // section is invisible
         if (guardType != Guard_Skip) {
            s_guards.push(GuardedSection(false, true));
         }

         BEGIN( SkipGuardedSection );
      }

   } else {
      // invisible because of parent
      s_guards.push(GuardedSection(false, false));
      BEGIN( SkipGuardedSection );
   }
}

