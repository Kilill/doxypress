/************************************************************************
*
* Copyright (c) 2014-2021 Barbara Geller & Ansel Sermersheim
* Copyright (c) 1997-2014 Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,int len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 199
#define YY_END_OF_BUFFER 200
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1682] =
    {   0,
      180,  180,  200,  198,  199,    1,  198,  199,  196,  199,
        3,  198,  199,  198,  199,  198,  199,  198,  199,    2,
      198,  199,    6,  198,  199,    1,    6,  198,  199,    6,
      198,  199,    6,  196,  199,    3,    6,  198,  199,    5,
      198,  199,    6,  198,  199,    6,  198,  199,    6,  198,
      199,    6,  198,  199,    6,  198,  199,    2,    6,  198,
      199,   68,  198,  199,    1,   68,  198,  199,   63,  196,
      199,    3,   68,  198,  199,   68,  198,  199,   68,  198,
      199,   65,   68,  198,  199,   65,   68,  198,  199,   65,
       68,  198,  199,   65,   68,  198,  199,   65,   68,  198,

      199,   65,   68,  198,  199,   65,   68,  198,  199,   65,
       68,  198,  199,    2,   68,  198,  199,   93,  198,  199,
        1,   93,  198,  199,   91,  196,  199,    3,   93,  198,
      199,   93,  198,  199,   93,  198,  199,   92,   93,  198,
      199,   92,   93,  198,  199,   92,   93,  198,  199,   92,
       93,  198,  199,    2,   93,  198,  199,   94,   97,  198,
      199,    1,   94,   97,  198,  199,  102,  196,  199,    3,
       94,   97,  198,  199,   96,   97,  198,  199,   97,  198,
      199,   97,  198,  199,   94,   97,  198,  199,   94,   97,
      198,  199,    2,   94,   97,  198,  199,  103,  106,  198,

      199,    1,  103,  106,  198,  199,    3,  103,  106,  198,
      199,  105,  106,  198,  199,  103,  106,  198,  199,  103,
      106,  198,  199,  106,  198,  199,  103,  106,  198,  199,
        2,  103,  106,  198,  199,   29,  198,  199,    1,   29,
      198,  199,   30,  196,  199,    3,   29,  198,  199,   17,
       29,  198,  199,   18,   29,  198,  199,   29,  198,  199,
       29,  198,  199,   29,  198,  199,   27,   29,  198,  199,
    16410,   27,   29,  198,  199,16410,   29,  198,  199,   11,
       29,  198,  199,   12,   29,  198,  199,   27,   29,  198,
      199,16410,    2,   29,  198,  199,   19,  198,  199,    1,

       19,  198,  199,   22,  198,  199,   19,  198,  199,   19,
      198,  199,  198,  199,   19,  198,  199,    2,   19,  198,
      199,   20,  198,  199,    1,   20,  198,  199,   20,  198,
      199,   20,  198,  199,   20,  198,  199,    2,   20,  198,
      199,   23,  198,  199,    1,   23,  198,  199,   25,  198,
      199,   23,  198,  199,   23,  198,  199,  198,  199,   23,
      198,  199,    2,   23,  198,  199,  198,  199,    1,  198,
      199,    3,  198,  199,  198,  199,  198,  199,  198,  199,
        2,  198,  199,  108,  198,  199,  108,  198,  199,  112,
      198,  199,    1,  112,  198,  199,  110,  196,  199,    3,

      112,  198,  199,  112,  198,  199,  112,  198,  199,  112,
      198,  199,  112,  198,  199,    2,  112,  198,  199, 8308,
      198,  199,16497,16499,16500, 8308,  198,  199,16497,16499,
    16500,  198,  199,  119,  198,  199,  120,  198,  199,  118,
      198,  199,  198,  199,  122,  198,  199,  198,  199,  122,
      198,  199,  192,  198,  199,    1,  192,  198,  199,  180,
      192,  198,  199,  179,  196,  199,    3,  192,  198,  199,
      183,  192,  198,  199,  175,  192,  198,  199,  184,  192,
      198,  199,  192,  198,  199,  192,  198,  199,  182,  192,
      198,  199,  176,  192,  198,  199,  192,  198,  199,  176,

      192,  198,  199,    2,  192,  198,  199,   86,  198,  199,
        1,   86,  198,  199,   85,  196,  199,    3,   86,  198,
      199,   86,  198,  199,   86,  198,  199,   86,  198,  199,
        2,   86,  198,  199,   84,   86,  198,  199,    1,   84,
       86,  198,  199,   84,   86,  198,  199,   84,   85,  196,
      199,    3,   84,   86,  198,  199,   83,   86,  198,  199,
       84,   86,  198,  199,   84,   86,  198,  199,   84,   86,
      198,  199,    2,   84,   86,  198,  199,  151,  153,  198,
      199,    1,  153,  198,  199,  152,  196,  199,    3,  151,
      153,  198,  199,  153,  198,  199,  153,  198,  199,  151,

      153,  198,  199,  153,  198,  199,  153,  198,  199,  151,
      153,  198,  199,    2,  151,  153,  198,  199,  151,  153,
      198,  199,  153,  198,  199,  153,  198,  199,  153,  198,
      199,   40,   43,  198,  199,    1,   40,   43,  198,  199,
       42,  196,  199,    3,   40,   43,  198,  199,   43,  198,
      199,   40,   43,  198,  199,   40,   43,  198,  199,   40,
       43,  198,  199,    2,   40,   43,  198,  199,  154,  177,
      198,  199,    1,  154,  177,  198,  199,  157,  196,  199,
        3,  154,  177,  198,  199,  177,  198,  199,  154,  177,
      198,  199,  154,  177,  198,  199,  176,  177,  198,  199,

      177,  198,  199,  176,  177,  198,  199,    2,  154,  177,
      198,  199,  153,  198,  199,  153,  198,  199,  153,  198,
      199,  151,  153,  198,  199,  153,  198,  199,  153,  198,
      199,  153,  198,  199,  165,  169,  170,  198,  199,    1,
      165,  170,  198,  199,  166,  196,  199,    3,  165,  169,
      170,  198,  199,  169,  170,  198,  199,  165,  169,  170,
      198,  199,  170,  198,  199,  165,  169,  170,  198,  199,
        2,  165,  169,  170,  198,  199,  162,  164,  198,  199,
        1,  164,  198,  199,  163,  196,  199,    3,  162,  164,
      198,  199,  164,  198,  199,  162,  164,  198,  199,  162,

      164,  198,  199,  162,  164,  198,  199,    2,  162,  164,
      198,  199,  173,  174,  198,  199,    1,  174,  198,  199,
        3,  173,  174,  198,  199,  173,  174,  198,  199,  173,
      174,  198,  199,  173,  174,  198,  199,    2,  173,  174,
      198,  199,   75,  198,  199,    1,   75,  198,  199,   76,
      196,  199,    3,   75,  198,  199,   75,  198,  199,   75,
      198,  199,   74,   75,  198,  199,   73,   75,  198,  199,
       73,   75,  198,  199,   75,  198,  199,   73,   75,  198,
      199,    2,   75,  198,  199,   82,  198,  199,    1,   82,
      198,  199,   80,  196,  199,    3,   82,  198,  199,   82,

      198,  199,   82,  198,  199,   78,   82,  198,  199,   82,
      198,  199,   78,   82,  198,  199,    2,   82,  198,  199,
       81,   82,  198,  199,   79,   82,  198,  199,   79,   82,
      198,  199,  190,  198,  199,    1,  190,  198,  199,    3,
      190,  198,  199,  187,  190,  198,  199,  190,  198,  199,
      190,  198,  199,  190,  198,  199,  190,  198,  199,    2,
      190,  198,  199,  191,  198,  199,    1,  191,  198,  199,
        3,  191,  198,  199,  189,  191,  198,  199,  191,  198,
      199,  191,  198,  199,  191,  198,  199,  191,  198,  199,
        2,  191,  198,  199,   69,  198,  199,   69,  198,  199,

       67,  198,  199,    1,   67,  198,  199,    3,   67,  198,
      199,   67,  198,  199,   67,  198,  199,   67,  198,  199,
       67,  198,  199,    2,   67,  198,  199,   39,  198,  199,
        1,   39,  198,  199,   37,  196,  199,    3,   39,  198,
      199,   35,   39,  198,  199,   36,   39,  198,  199,   31,
       39,  198,  199,   32,   39,  198,  199,   39,  198,  199,
       39,  198,  199,   38,   39,  198,  199,   39,  198,  199,
        2,   39,  198,  199,   49,  198,  199,    1,   49,  198,
      199,    3,   49,  198,  199,   44,   49,  198,  199,   45,
       49,  198,  199,   49,  198,  199,   49,  198,  199,   49,

      198,  199,   49,  198,  199,    2,   49,  198,  199,  137,
      198,  199,    1,  137,  198,  199,  136,  137,  198,  199,
        3,  137,  198,  199,  137,  198,  199,  137,  198,  199,
      136,  137,  198,  199,    2,  137,  198,  199,  140,  141,
      198,  199,    1,  140,  141,  198,  199,  139,  196,  199,
        3,  140,  141,  198,  199,  140,  198,  199,  140,  198,
      199,  140,  141,  198,  199,  140,  198,  199,  140,  141,
      198,  199,    2,  140,  141,  198,  199,  194,  195,  197,
        6,    6,    5,    6,    6,  197,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,  197,  101,  194,

       99,  195,   92,   92,   92,   92,   92,  197,   94,   94,
       94,  197,  103,  100,  103,  194,   98,  103,  195,  103,
      104,  103,  197,   16, 8218,   27,16410,   27,16410,   28,
       27,  197,16410,   19,   19,  194,   19,  195,   19,   21,
       19,  197,   20,   20,  194,   20,  195,   20,   20,  197,
       23,   23,  194,   23,  195,   23,   24,   23,  197,  109,
      194,  195,  197,  107,  108,  108,  197,  110,  194,  195,
      111,  197, 8308, 8307, 8305, 8308,16497,16499,16500, 8308,
      197,16497,16499,16500,  120,  119,  120,  118,  122,  122,
      117,  122,  197,  180,  181,  123,  194,  124,  195,  176,

      178,  176,  197,   84,   84,   83,  151,  125,  127,  194,
      126,  195,  151,  151,  197,  151,   40,   41,   40,  195,
       40,   40,  197,  154,  156,  154,  195,  154,  155,  154,
      150,  150,  194,  151,  165,  169,  165,  169,  167,  169,
      194,  168,  169,  195,  165,  169,  165,  169,  197,  162,
      159,  161,  194,  160,  162,  195,  162,  162,  197,  173,
      171,  173,  194,  172,  173,  195,  173,  173,  197,   73,
       73,   70,   73,  197,   78,   77,   78,  197,   79,   79,
      197,  186,  194,  185,  195,  188,   69,   69,  197,   66,
       34,  194,   46,  194,   46,  195,   48,   47,   48,  136,

      136,  197,  141,  194,  195,  141,  141,  197,  194,  195,
        4,   65,   65,   65,   65,   65,   57,   65,   65,   65,
       65,   65,   65,  101,  101,  194,   99,   99,  195,   92,
       92,   92,   87,   92,   92,   95,    4,   94,  100,  103,
      100,  100,  103,  194,   98,  103,   98,   98,  103,  195,
        4,  103,   15,   15,   27,16410,   19,  194,   19,  195,
        4,   19,   20,  194,   20,  195,    4,   20,   23,  194,
       23,  195,    4,   23,  194,  195,    4,    4,  109,  194,
      195,    4,  121,  181,  123,  123,  194,  124,  124,  195,
      126,  195,    4,  151,  151,  130,  129,   40,  195,    4,

       40,  154,  195,    4,  154,  147,  151,  149,  148,  169,
      194,  169,  195,    4,  165,  169,    4,  169,  158,  162,
      195,    4,  162,  173,  194,  173,  195,    4,  173,   73,
      186,  194,  185,  195,   33,   34,  194,  143,  143,  194,
      142,  142,  195,    4,  141,  193,16391,16391,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,  101,
      193,   92,   88,   92,   92,   92,   95,  100,  103,  193,
       14,   13,   14,   27,16410,   19,  193,   20,  193,   23,
      193,  193,  193,  114,  122,  126,  128,  151,  130,  129,
      151,  149,  148,  169,  193,  173,  193,   73,   33,16391,

        9, 8199,   65,   65,   58,   61,   59,   59,   65,   65,
       65,   65,   65,   65,   65,   65,   89,   92,   90,   92,
       92,   13,   27,16410,  132,   73, 8199,    9,   65,   65,
       65,   62,   54,   53,   65,   65,   65,   65,   60,   92,
       27,16410,  131,  135,  138,  134,   73,    8,    9,   52,
       56,   55,16434,   51,   65,   10,  133,  147,   73,    9,
     8242,  147,   72,   71,    9, 8242,  146,  145,    9,  144,
        9,   64,  147,  147,  147,    9,  147,    9,  147,    9,
      147
    } ;

static yyconst flex_int16_t yy_accept[1448] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    6,    9,
       11,   14,   16,   18,   20,   23,   26,   30,   33,   36,
       40,   43,   46,   49,   52,   55,   58,   62,   65,   69,

       72,   76,   79,   82,   86,   90,   94,   98,  102,  106,
      110,  114,  118,  121,  125,  128,  132,  135,  138,  142,
      146,  150,  154,  158,  162,  167,  170,  175,  179,  182,
      185,  189,  193,  198,  202,  207,  212,  216,  220,  224,
      227,  231,  236,  239,  243,  246,  250,  254,  258,  261,
      264,  267,  272,  277,  280,  284,  288,  293,  297,  300,
      304,  307,  310,  313,  315,  318,  322,  325,  329,  332,
      335,  338,  342,  345,  349,  352,  355,  358,  360,  363,
      367,  369,  372,  375,  377,  379,  381,  384,  387,  390,
      393,  397,  400,  404,  407,  410,  413,  416,  420,  426,

      432,  434,  437,  440,  443,  445,  448,  450,  453,  456,
      460,  464,  467,  471,  475,  479,  483,  486,  489,  493,
      497,  500,  504,  508,  511,  515,  518,  522,  525,  528,
      531,  535,  539,  544,  548,  552,  557,  561,  565,  569,
      573,  578,  582,  586,  589,  594,  597,  600,  604,  607,
      610,  614,  619,  623,  626,  629,  632,  636,  641,  644,
      649,  652,  656,  660,  664,  669,  673,  678,  681,  686,
      689,  693,  697,  701,  704,  708,  713,  716,  719,  722,
      726,  729,  732,  735,  740,  745,  748,  754,  758,  763,
      766,  771,  777,  781,  785,  788,  793,  796,  800,  804,

      808,  813,  817,  821,  826,  830,  834,  838,  843,  846,
      850,  853,  857,  860,  863,  867,  871,  875,  878,  882,
      886,  889,  893,  896,  900,  903,  906,  910,  913,  917,
      921,  925,  929,  933,  936,  940,  944,  948,  951,  954,
      957,  960,  964,  967,  971,  975,  979,  982,  985,  988,
      991,  995,  998, 1001, 1004, 1008, 1012, 1015, 1018, 1021,
     1024, 1028, 1031, 1035, 1038, 1042, 1046, 1050, 1054, 1058,
     1061, 1064, 1068, 1071, 1075, 1078, 1082, 1086, 1090, 1094,
     1097, 1100, 1103, 1106, 1110, 1113, 1117, 1121, 1125, 1128,
     1131, 1135, 1139, 1143, 1148, 1151, 1156, 1159, 1162, 1166,

     1169, 1173, 1178, 1179, 1180, 1180, 1181, 1182, 1183, 1184,
     1185, 1186, 1186, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193, 1194, 1195, 1196, 1197, 1199, 1201, 1203, 1204, 1205,
     1206, 1207, 1209, 1210, 1210, 1210, 1211, 1213, 1214, 1217,
     1220, 1221, 1222, 1224, 1224, 1224, 1225, 1225, 1226, 1228,
     1230, 1231, 1231, 1234, 1235, 1237, 1239, 1240, 1241, 1243,
     1244, 1246, 1248, 1249, 1251, 1252, 1254, 1256, 1257, 1258,
     1260, 1260, 1261, 1262, 1263, 1263, 1264, 1264, 1265, 1266,
     1268, 1268, 1269, 1270, 1271, 1271, 1272, 1272, 1273, 1274,
     1275, 1276, 1280, 1280, 1285, 1285, 1286, 1287, 1288, 1289,

     1289, 1290, 1290, 1291, 1292, 1294, 1295, 1295, 1296, 1298,
     1300, 1301, 1302, 1302, 1304, 1305, 1306, 1307, 1308, 1309,
     1311, 1313, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1316, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1318, 1319, 1321, 1322, 1324, 1325, 1325, 1326, 1328,
     1329, 1330, 1331, 1332, 1334, 1334, 1334, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1337, 1338, 1339, 1342, 1345, 1347,
     1347, 1347, 1350, 1351, 1352, 1354, 1357, 1358, 1360, 1361,
     1364, 1367, 1368, 1370, 1371, 1372, 1373, 1373, 1375, 1376,
     1377, 1379, 1380, 1382, 1384, 1386, 1387, 1388, 1390, 1391,

     1391, 1391, 1391, 1393, 1395, 1397, 1398, 1399, 1400, 1401,
     1403, 1404, 1405, 1406, 1407, 1407, 1407, 1409, 1410, 1411,
     1412, 1412, 1412, 1412, 1412, 1413, 1414, 1415, 1416, 1417,
     1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1427, 1428,
     1430, 1431, 1432, 1433, 1434, 1435, 1436, 1436, 1437, 1437,
     1437, 1439, 1441, 1442, 1445, 1447, 1448, 1451, 1453, 1454,
     1454, 1455, 1455, 1455, 1457, 1459, 1461, 1463, 1465, 1467,
     1469, 1471, 1473, 1475, 1476, 1477, 1478, 1480, 1481, 1482,
     1483, 1483, 1483, 1484, 1484, 1485, 1486, 1488, 1489, 1491,
     1493, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1496, 1496, 1497, 1498, 1500, 1502, 1504, 1506, 1506,
     1507, 1508, 1508, 1509, 1510, 1512, 1514, 1517, 1519, 1519,
     1519, 1519, 1520, 1522, 1524, 1526, 1528, 1530, 1531, 1533,
     1535, 1535, 1536, 1536, 1536, 1538, 1539, 1541, 1542, 1544,
     1546, 1546, 1547, 1547, 1547, 1548, 1548, 1549, 1550, 1551,
     1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1562,
     1563, 1565, 1566, 1567, 1567, 1568, 1568, 1571, 1572, 1574,
     1574, 1574, 1576, 1578, 1580, 1582, 1583, 1584, 1585, 1586,
     1587, 1587, 1587, 1587, 1588, 1588, 1588, 1588, 1588, 1588,

     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1589, 1589, 1590, 1591, 1591, 1592, 1592, 1593,
     1594, 1596, 1596, 1596, 1598, 1599, 1599, 1600, 1600, 1600,
     1600, 1601, 1601, 1602, 1602, 1603, 1604, 1605, 1607, 1608,
     1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618,
     1618, 1619, 1621, 1622, 1622, 1622, 1623, 1623, 1623, 1625,
     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
     1625, 1625, 1625, 1625, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1628,

     1628, 1629, 1629, 1630, 1631, 1631, 1631, 1632, 1633, 1634,
     1635, 1636, 1637, 1638, 1639, 1640, 1640, 1641, 1641, 1643,
     1643, 1643, 1643, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1645, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1647, 1648, 1648, 1648, 1648, 1648, 1649, 1649, 1650,
     1650, 1651, 1651, 1652, 1653, 1654, 1655, 1656, 1656, 1656,
     1656, 1656, 1656, 1657, 1657, 1658, 1658, 1658, 1658, 1658,
     1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658,
     1658, 1658, 1658, 1658, 1658, 1658, 1659, 1659, 1659, 1659,

     1659, 1659, 1659, 1660, 1660, 1660, 1660, 1660, 1661, 1661,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1664, 1665, 1665, 1665, 1665, 1665, 1666, 1666, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1669, 1669, 1669, 1669, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,

     1671, 1672, 1672, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1674, 1675, 1675, 1676, 1676, 1676, 1676,
     1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1678, 1678,
     1678, 1678, 1678, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1680, 1680, 1680, 1680, 1681, 1681, 1681, 1681, 1681, 1681,
     1681, 1681, 1681, 1681, 1681, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,

     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,

     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,

     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,    1,   15,   16,   17,   18,   19,   20,   19,
       19,   19,   19,   19,   19,   21,   21,   22,    1,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       37,   44,   45,   46,   47,   48,   37,   49,   50,   37,
       51,   52,   53,    1,   37,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   37,   64,   65,   66,   67,
       68,   69,   37,   70,   71,   72,   73,   74,   37,   75,
       76,   37,   77,   10,   78,   79,    1,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81
    } ;

static yyconst flex_int32_t yy_meta[83] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,   10,    8,   11,    1,    8,   12,   13,   14,   14,
       14,    1,   15,    1,    1,    1,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
        1,   18,    1,   19,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,    1,    1,   19,   17,
       17,    1
    } ;

static yyconst flex_int16_t yy_base[1600] =
    {   0,
        0,    4,    9,   91,  173,    0,  255,    0,  336,  346,
      356,  363,  445,    0,  526,  530,  536,  553,  562,  572,
      595,  621,  703,    0,  784,  788,  870,    0,  952,    0,
     1034,    0,  601, 1115, 1120, 1124, 1130, 1135, 1155, 1236,
     1150, 1161, 1318,    0, 1399, 1480, 1405, 1410, 1438, 1445,
     1470, 1495, 1577,    0, 1659,    0, 1741,    0, 1822, 1826,
     1832, 1849, 1931,    0, 1837, 2012, 2016, 2042, 2054, 2074,
     2156, 2238,    0,    0, 2069, 2114, 4120, 7808, 7808, 7808,
     7808,    1, 4093, 4027, 7808, 7808, 7808, 2320, 7808, 7808,
     7808,    2, 4080,    3,    0, 4022, 7808, 7808, 7808, 7808,

     7808,    3, 4064,    0,    0,    0,    0,    3,    1,    1,
     4009, 7808, 7808, 7808, 7808, 7808,   10, 4059,    0,    7,
        0, 3987, 7808,    0,    0, 7808,    0, 7808, 4010,   11,
     4035, 3975,    0,    0,    0,    0, 7808,   20, 4028,    0,
     3972,    0, 7808, 7808, 7808, 7808, 7808, 3987,   33, 4012,
     4027,   49,  581,   45, 7808, 7808, 1180, 7808,    0,    0,
     7808,   44, 3996,    0, 3941,    0,    0,    0,   59, 3991,
     3925,    0,    0,    0, 7808,   61, 3978,    0, 3920,    0,
       30,  348,  352,  362,  359,  556,  368,    0,  558, 3978,
     3970, 7808, 3969,  338,   52,   83,  340, 3967,  387, 1168,

      336, 3965, 3963, 3951, 3935,  375, 3945,  536, 7808, 7808,
      380, 7808, 7808, 7808, 3929, 7808,   62, 3910, 7808,    0,
      341, 3852, 7808, 7808, 7808, 7808, 7808,  380, 3894, 3839,
     7808, 7808, 7808,  392, 7808, 7808, 7808,  383, 3891, 3831,
     7808,    0, 7808, 7808,    0, 3891,  388, 3867, 2376, 7808,
     3808,    0,  601,  619, 3828, 3798,    0,    0, 7808,    0,
     3851,  389, 3842, 3784,    0, 3800, 3799, 7808, 3795, 3811,
      391,    5,    0,  542, 3744, 3766, 3799,  396,  536,  784,
     1144, 3761, 3734,    5,    0, 7808,  394,  405,  414,  632,
     1149,  411,    0, 7808, 7808,    0, 3783,  407, 3774, 3716,

        0,    0, 7808,    0,  408, 3763, 3704,    0, 7808, 7808,
     7808, 7808,  416, 3755, 7808,    0,  372,  431, 3699, 7808,
     7808, 7808, 7808, 7808,  531, 3741,    0, 3762, 3684, 7808,
     7808,    0, 3674, 7808, 7808, 7808, 7808,  573, 3723,    0,
     3664, 7808, 7808, 7808, 7808, 7808,  627, 3717,    0, 3661,
     7808,    0, 3660, 7808, 7808, 7808,  634, 3708,  437, 3647,
     7808, 7808, 7808, 7808, 7808, 7808, 3670, 7808, 7808,  643,
     3694, 7808, 3639, 7808, 7808, 7808, 7808, 7808, 7808,  649,
     3691,  546, 3632, 7808, 7808, 7808,    0, 7808,  651, 3681,
     3626, 7808,    0,    0, 7808,    0, 7808,  652, 3678,  764,

     3623,    0, 3687, 3678,  806, 3611, 7808, 2451, 7808,  529,
        0, 1133,  421, 1187,    0,  537,  598,  615,  637,  801,
      532,  642,  646,  763, 3606, 3657, 3636,    0,  763,  769,
     1215, 3549,    0, 3589,  630,  833, 3513,    0, 1163,  802,
     1253, 7808, 3508, 3570,  668, 7808, 1221, 7808, 1280, 1464,
     7808, 3561, 1415,    0, 3549, 3543, 1283, 7808, 3473,    0,
     3530, 3525, 1517, 3451,    0, 3511, 3506, 1532, 7808, 3440,
      668, 7808,  836,  830, 1870, 1124,  678, 7808,  682, 1188,
     3493, 7808,  628,  793, 2181, 7808, 3481, 1123, 1190, 7808,
     7808, 1241, 3479, 2110,  792, 3469, 3442, 3417, 3407, 3389,

      798, 3366,  830, 7808, 1171,  689, 3350, 3341,  365,  835,
        0, 7808, 3325, 3240, 7808,  859, 7808,    0, 7808,  682,
     3252, 1899, 2504, 1193, 1207, 1214, 1226,  797, 1167, 1228,
     1198, 1239, 3186, 1842, 2012, 3202, 3176, 1435, 3178, 3117,
        0, 7808, 3136, 2205, 3073, 3091, 3049, 7808, 1126, 2260,
     7808, 1402, 7808, 3046, 1245, 1238, 2036, 2048, 2993, 2966,
     1436, 2985, 2952, 1285,    0,    0, 3011, 2955, 2569, 1507,
     1366, 1428,    0, 1294, 2957, 2917, 2282, 2853,    0, 2904,
     2869, 2584, 2792,    0, 1369, 7808, 2862, 2723,    0, 7808,
     2721,    0, 2716, 2781, 2765, 7808,    0, 2685, 7808, 2719,

     2711, 1290, 2679, 2672, 2663, 7808, 7808, 2676,    0, 2594,
        0, 1410, 1252, 2599, 1389, 1394, 2526, 2583, 7808, 7808,
     1118, 1301, 1216, 2575, 1406, 1397, 1433, 1445, 1486, 7808,
     1499, 1515, 1437, 1796, 1513, 1800,    0, 2566,    0,    0,
     1805, 1814, 1828, 7808, 1838, 1840, 2572, 7808, 2428, 1492,
        0, 1466,    0, 1850, 1502,    0, 1517,    0, 7808, 2426,
     2416, 1552, 2028, 2141, 2391,    0,    0, 2300,    0,    0,
     2285,    0,    0, 1862, 1865, 1902, 7808, 1437, 2293, 2275,
     2032,  577, 7808, 2257, 2266, 7808, 2249, 7808, 7808, 2239,
        0, 1824, 1857, 1859, 2048, 1973, 1851, 1997, 1976, 2045,

     2001, 2076, 2129, 2051, 2023, 2038, 2045, 2070, 2061, 2072,
     2135, 2098, 2196, 2147,    0,    0, 2168, 2161, 2111, 7808,
     2535, 2165, 2137, 2105, 2136,    0, 1499,    0, 2130, 2135,
     1557, 7808,    0,    0, 2115,    0,    0, 2152, 2111, 7808,
     2097, 7808, 2013, 1909, 1898, 7808, 1867, 7808, 7808,    0,
     2193, 7808, 1555, 1849, 2551, 1836, 2554, 2195, 2181, 2274,
     2631, 2198, 2199, 2209, 2211, 2223, 2235, 2249,    0, 2296,
     2615, 2539, 2656, 1836, 7808, 2128, 1518, 7808, 7808, 2393,
     2414, 2660,    0,    0,    0, 2063, 1821, 7808, 7808, 1557,
     2519, 2375, 2256, 7808, 2370, 2368, 2381, 2507, 2379, 2526,

     2509, 2567, 2574, 2426, 2620, 2587, 2628, 2624, 2627, 2632,
     2628, 1408,   10, 1499, 1437, 2701, 2222,  332, 1448, 1386,
        0, 2630, 2642,    0, 2634, 1447, 7808, 2679, 2646, 1432,
     2702, 2715, 2722, 2730, 7808, 2671, 2679, 7808, 7808, 2676,
     2688, 2807, 2200, 2695, 2645, 2711, 2715, 1402, 7808, 2711,
     2794, 2748, 2750, 1300, 1293, 7808, 1269, 2777, 2832, 2714,
     2726, 2732, 2440, 2734, 2729, 2745, 2730, 2760, 2749, 2784,
     2835, 2782, 2799, 2842, 2800, 2801, 2799, 2808, 2809, 2823,
     2812, 2813, 2814, 2811, 2835, 2836, 2816, 2833, 2830, 2890,
     2839, 1241, 1197, 2835, 2300, 2897, 2901, 2307, 2600, 2904,

     2912, 2917, 2865, 1140, 2877, 2878, 2924, 7808, 2617, 7808,
     2925, 2922, 2899,  861,  857, 2899, 2938, 2943, 2949, 2959,
      832, 2900, 2962, 2901, 2907, 2902, 2916, 2919, 2942, 2931,
      750, 2987, 7808, 2996, 2934, 2938, 2939, 2940, 2945, 2946,
     2941, 2949, 2962, 2966, 2955, 2957, 2963, 2974, 2965, 2976,
     3013, 2988, 2981, 3039, 3046, 2543, 7808, 3050, 3053, 3059,
      800, 3021, 3025, 7808, 3062, 7808, 3063, 3029, 3070, 3075,
     3086, 3010, 7808,  593,  637, 3032, 3036, 3042, 3042, 3049,
     3053, 3048, 3056,  494, 3101, 3058, 3068, 3063, 3066, 3058,
     3061, 3076, 3065, 3081, 3088, 7808, 3080, 3092, 3087, 3089,

     3096, 3090, 3135, 3104, 3156, 3161, 3145, 3167, 3172,    0,
     3101, 3176, 3188,  552,  464, 3181, 3118, 3115, 3148, 3149,
     3147, 3148, 3163, 3151, 3160,    0, 3153, 3165, 3202, 3205,
     3171, 3214, 7808, 3172, 3173, 3171, 3180, 3184, 3184, 3190,
     3231, 7808,    0, 3249, 3255, 3269, 3275, 3278,    0, 3206,
     3281, 3291, 3285, 3193,    0, 3200, 3236, 3301, 3304, 3247,
     3307, 3258, 7808, 3311, 3252, 3314, 3279, 3281, 3281, 3285,
     3288, 3284, 3292, 7808, 3332, 3338, 3360, 3366, 3369, 3210,
     3372, 3382, 3335, 3292, 7808, 3375, 3316, 3392, 3328, 3395,
     3343, 3351, 3360, 3352, 3353, 3298, 3354, 3418, 3429, 3414,

     3444, 3449, 7808, 3452, 3458, 3421, 3374, 3464, 3400, 3416,
     3410, 3434, 7808, 7808, 3434, 7808, 3474, 3489, 3485, 3500,
     3505, 3511, 3525, 3477, 3425, 3514, 3471, 7808, 3463, 3537,
     3542, 3553, 3564, 3567, 3575, 3587, 3580, 3592, 3495, 7808,
     3600, 3603, 3606, 3628, 3631, 3634, 3644, 3655, 3498, 3662,
     3665, 3669, 3685, 3658, 7808, 3690, 3706, 3695, 3711, 3721,
     3726, 3733, 3743, 3748, 3753, 3756, 3766, 3770, 3773, 3783,
     3787, 3790, 3801, 3804, 3807, 3818, 3823, 3827, 3833, 3837,
     3841, 3851, 3854, 3858, 3868, 3871, 3882, 3876, 3887, 3893,
     3898, 3903, 3909, 3919, 3922, 3926, 3936, 3939, 3943, 3953,

     3957, 3960, 3973, 3976, 3980, 3986, 3990, 3994, 4004, 4007,
     4011, 4021, 4024, 4028, 4038, 4041, 4044, 4055, 4061, 4065,
     4071, 4075, 4079, 4089, 4092, 4096, 4106, 4113, 4119, 4109,
     4124, 4134, 4130, 4140, 4146, 4156, 4159, 4165, 4171, 4175,
     4185, 4190, 4196, 4209, 4199, 4214, 4224, 4234, 4240, 4246,
     4251, 4256, 4266, 4260, 4276, 4280, 4286, 4290, 4293, 4303,
     4309, 4312, 4322, 4326, 4329, 4341, 4344, 4347, 4357, 4361,
     4364, 4374, 4378, 4381, 4391, 4397, 4400, 4410, 4416, 4426,
     4422, 4432, 4442, 4452, 4457, 4460, 4470, 4476, 4479, 4489,
     4492, 4502, 4497, 4508, 4518, 4512, 4523, 4529, 4535, 4539,

     4545, 4550, 4555, 4558, 4568, 4572, 4578, 4583, 4588, 4598,
     4593, 4604, 4614, 4610, 4620, 4626, 4636, 4639, 4645, 4658,
     4661, 4664, 4674, 4677, 4681, 4691, 4694, 4697, 4707, 4711,
     4714, 4724, 4727, 4733, 4739, 4743, 4749, 4759, 4766, 4776,
     4762, 4782, 4792, 4772, 4802, 4808, 4814, 4818, 4828, 4824,
      524, 4838, 4843, 4851, 4856, 4861, 4867, 4871, 4876, 4883,
     4889, 4895, 4905, 4908, 4913, 4918, 4921, 4926,  452, 4931,
     4936, 4942, 4946, 4951, 4954, 4958, 4964, 4970, 4973, 4976,
     4983, 4988, 4996, 5001, 5006, 5011, 5017, 5021, 5029, 5033,
     5039, 5051, 5054, 5058, 5063, 5066, 5071, 5076, 5081, 5086,

     5092, 5096, 5099, 5104, 5108, 5114, 5117, 5120, 5129, 5133,
     5141, 5146, 5151, 5156, 5161, 5167, 5174, 5179, 5183, 5195,
     5198, 5204, 5208, 5211, 5216, 5221, 5226, 5231, 5236, 5242,
     5245, 5249, 5254, 5258, 5261, 5264, 5273, 5279, 5286, 5291,
     5296, 5301, 5306, 5311, 5320, 7808, 5397, 5416, 5435, 5454,
     5473, 5492, 5511, 5530, 5549, 5568, 5587, 5606, 5625, 5644,
     5663, 5682, 5701, 5720, 5739, 5758, 5777, 5796, 1172, 2602,
     2776, 3231, 5815, 5834, 5853, 5872, 5891, 5908, 5925, 5944,
     5963, 5982, 6001, 6020, 6037, 6054, 6071, 6087, 3250, 6104,
     6123, 6140, 6159, 6178, 6197, 6216, 6235, 6254, 3391, 3397,

     3421, 6273, 3427, 6292, 6311, 6328, 6345, 3519, 3535, 3559,
     6364, 6383, 3584, 6402, 6421, 6440, 6459, 6478, 6497, 6516,
     6533, 6550, 6569, 6588, 6607, 6624, 6641, 6658, 6674, 3598,
     6691, 6710, 6727, 6746, 6765, 6784, 6803, 6822, 6841, 3603,
     3604, 3609, 3610, 6860, 6879, 6896, 6913, 6932, 6951, 3626,
     6970, 6989, 3628, 7008, 7027, 7046, 7065, 7084, 7103, 7122,
     7139, 7156, 7175, 7194, 7213, 7232, 7251, 7268, 7287, 7306,
     7325, 7344, 7363, 3638, 7382, 7401, 7420, 7439, 7458, 3662,
     7477, 7494, 7511, 7530, 7547, 7564, 7583, 7602, 7621, 7640,
     7659, 7678, 7697, 7714, 7731, 3668, 7750, 7769, 7788

    } ;

static yyconst flex_int16_t yy_def[1600] =
    {   0,
     1447, 1447, 1447, 1446, 1446,    5, 1446,    7, 1448, 1448,
     1449, 1449, 1446,   13, 1450, 1450, 1451, 1451, 1452, 1452,
     1453, 1453, 1446,   23, 1454, 1454, 1446,   27, 1446,   29,
     1446,   31, 1455, 1456, 1447, 1447, 1447, 1447, 1457, 1457,
     1458, 1458, 1446,   43, 1457, 1457, 1459, 1459, 1460, 1460,
     1461, 1461, 1446,   53, 1446,   55, 1446,   57, 1462, 1462,
     1463, 1463, 1446,   63, 1464, 1464, 1465, 1465, 1466, 1466,
     1467, 1467,   72,   72, 1468, 1468, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1469, 1470, 1470, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1472, 1472,
     1472, 1472, 1446, 1473, 1473, 1446, 1473, 1446, 1474, 1446,
     1473, 1473, 1473, 1475, 1475, 1475, 1446, 1475, 1475, 1476,
     1475, 1475, 1446, 1446, 1446, 1446, 1446, 1477, 1446, 1446,
     1446, 1478, 1478, 1446, 1446, 1446, 1478, 1446, 1479, 1479,
     1446, 1479, 1479, 1480, 1479, 1479, 1481, 1481, 1481, 1481,
     1481, 1481, 1482, 1482, 1446, 1482, 1482, 1483, 1482, 1482,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1485, 1485, 1486,
     1486, 1446, 1486, 1486, 1486, 1446, 1486, 1486, 1487, 1487,

     1446, 1446, 1446, 1446, 1446, 1488, 1446, 1488, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1489,
     1446, 1489, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1490, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1491, 1446, 1446, 1491, 1446, 1446, 1491, 1446, 1446,
     1491, 1491, 1491, 1446, 1446, 1446, 1492, 1492, 1446, 1492,
     1446, 1492, 1492, 1492, 1492, 1493, 1493, 1446, 1493, 1446,
     1493, 1493, 1489, 1493, 1489, 1493, 1446, 1446, 1446, 1491,
     1446, 1446, 1446, 1494, 1495, 1446, 1494, 1496, 1494, 1446,
     1494, 1494, 1497, 1446, 1446, 1497, 1446, 1497, 1497, 1497,

     1497, 1498, 1446, 1498, 1498, 1498, 1498, 1498, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1499, 1499, 1446, 1499, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1500, 1446, 1500, 1446,
     1446, 1501, 1501, 1446, 1446, 1446, 1446, 1446, 1446, 1502,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1502, 1446,
     1446, 1503, 1503, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1504, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1505, 1446, 1446, 1446, 1446, 1506, 1446, 1446, 1446,
     1506, 1446, 1507, 1507, 1446, 1507, 1446, 1446, 1507, 1446,

     1507, 1507, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1508,
     1509, 1508, 1509, 1509, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1510, 1511, 1512, 1513, 1513, 1513,
     1513, 1513, 1514, 1515, 1516, 1514, 1514, 1517, 1518, 1519,
     1517, 1446, 1517, 1446, 1520, 1446, 1446, 1446, 1521, 1521,
     1446, 1446, 1521, 1522, 1522, 1522, 1522, 1446, 1522, 1523,
     1523, 1523, 1523, 1523, 1524, 1524, 1524, 1524, 1446, 1524,
     1525, 1446, 1525, 1525, 1525, 1525, 1446, 1446, 1526, 1526,
     1527, 1446, 1527, 1527, 1527, 1446, 1446, 1527, 1446, 1446,
     1446, 1528, 1446, 1528, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1529, 1446, 1529, 1446, 1446, 1446, 1446, 1446,
     1530, 1446, 1446, 1530, 1446, 1531, 1446, 1532, 1446, 1446,
     1446, 1532, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1532, 1532, 1446, 1446, 1446, 1446, 1446, 1446,
     1533, 1446, 1533, 1533, 1533, 1534, 1534, 1446, 1534, 1534,
     1446, 1534, 1446, 1446, 1446, 1446, 1532, 1446, 1446, 1446,
     1446, 1446, 1446, 1535, 1536, 1537, 1537, 1537, 1535, 1446,
     1446, 1535, 1538, 1446, 1446, 1538, 1538, 1538, 1539, 1539,
     1539, 1539, 1539, 1540, 1540, 1446, 1446, 1540, 1541, 1446,
     1541, 1542, 1542, 1446, 1446, 1446, 1543, 1543, 1446, 1446,

     1544, 1545, 1446, 1446, 1446, 1446, 1446, 1446, 1546, 1546,
     1547, 1446, 1446, 1547, 1446, 1446, 1547, 1446, 1446, 1446,
     1446, 1548, 1446, 1549, 1550, 1550, 1550, 1550, 1550, 1446,
     1550, 1550, 1550, 1550, 1550, 1550, 1551, 1551, 1552, 1552,
     1553, 1553, 1553, 1446, 1553, 1553, 1554, 1446, 1446, 1446,
     1555, 1556, 1557, 1556, 1558, 1559, 1558, 1560, 1446, 1446,
     1446, 1446, 1446, 1561, 1562, 1562, 1562, 1563, 1563, 1563,
     1564, 1564, 1564, 1565, 1565, 1565, 1446, 1566, 1566, 1566,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1567, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1567, 1446, 1446, 1446, 1568, 1568, 1569, 1569, 1446, 1446,
     1567, 1446, 1446, 1446, 1570, 1570, 1571, 1570, 1446, 1446,
     1446, 1446, 1572, 1572, 1573, 1573, 1573, 1574, 1446, 1446,
     1575, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1576,
     1446, 1446, 1577, 1578, 1446, 1579, 1446, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1581, 1582,
     1582, 1582, 1582, 1583, 1446, 1446, 1584, 1446, 1446, 1446,
     1446, 1585, 1586, 1587, 1588, 1589, 1590, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1567, 1446, 1446, 1446, 1446, 1567, 1446, 1446, 1446,
     1570, 1446, 1446, 1573, 1574, 1591, 1446, 1446, 1446, 1578,
     1592, 1446, 1446, 1446, 1446, 1580, 1580, 1446, 1446, 1446,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1446, 1446,
     1582, 1582, 1582, 1446, 1446, 1446, 1446, 1446, 1585, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1574, 1446, 1446, 1446, 1592, 1592, 1592, 1446, 1592, 1446,

     1446, 1446, 1580, 1580, 1446, 1446, 1580, 1446, 1446, 1446,
     1580, 1580, 1580, 1580, 1446, 1446, 1582, 1446, 1585, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1593, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1574, 1446, 1592, 1592, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1594, 1446, 1580, 1446, 1446, 1446,
     1446, 1446, 1446, 1595, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1593, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1574, 1446, 1592, 1592, 1446, 1446, 1446, 1596,
     1446, 1446, 1446, 1446, 1595, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1597, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1598, 1592, 1592, 1446, 1446, 1446, 1596, 1446,
     1446, 1446, 1446, 1446, 1599, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1592, 1592, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1592, 1592, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1592, 1592, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1592,
     1592, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1592, 1592, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1592,
     1592, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446,    0, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446

    } ;

static yyconst flex_int16_t yy_nxt[7891] =
    {   0,
     1446,   79,  477,   80,   81,   79,  565,   80,   81, 1446,
       79,  478,   80,   81,  403,  403,  403,   82,  404,  404,
      404,   82,  566,  426,  426,   83,   82,  427,  427,   83,
      550,  417,  431,  439,   83,  420,  472,  440,  418,  416,
      419,  424,  421,  422,  423,  429,  403,  430,  451,  452,
      404,  447,  447,  447,  472,  482,  547,  455,  417,  431,
      448,  456,  420,  536,  418,  416,  419,  424,  421,  422,
      423,  429,  461,  430,  466,  509,  462,  485,  467,  510,
       84,   85,  413,  413,   84,   85,  486,  487,  537,   84,
       85,   86,   87,   88,   89,   90,   86,   86,   91,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   92,   86,
       86,   86,   86,   86,   86,   86,   93,   86,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   86,   86,   86,   86,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   86,   86,   86,
       95,   96,   97,   98,   99,   98,  100,  101,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      102,   98,   98,   98,   98,   98,   98,   98,  103,   98,

      104,  104,  105,  106,  107,  104,  104,  104,  108,  104,
      104,  104,  104,  104,  104,  109,  104,  104,  104,  110,
      104,  104,  104,   98,   98,   98,   98,  104,  104,  105,
      106,  107,  104,  104,  104,  108,  104,  104,  104,  104,
      104,  109,  104,  104,  104,  110,  104,  104,  104,   98,
       98,   98,  104,  111,  112,  113,  114,  113,  115,  116,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  117,  113,  113,  113,  113,  113,  113,  113,
      118,  113,  119,  119,  119,  119,  120,  119,  119,  119,
      121,  119,  119,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  113,  113,  113,  113,  119,
      119,  119,  119,  120,  119,  119,  119,  121,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  113,  113,  113,  119,  122,  123,  125,  495,  126,
      127,  482,  128,  482,  512,  513,  129,  125,  496,  126,
      127,  483,  128,  130,  472,  484,  129,  135,  472,   80,
      136,  131,  137,  130,  135,  472,   80,  136,  472,  137,
      686,  131,  472,  138,  472,  473,  472,  501,  687,  474,
      138,  139,  506,  472,  475,  559,  472,  507,  139,  489,
      490,  502,  472,  426,  516,  565,  426,  427,  491,  517,

      427,  520,  403,  585,  403,  521,  543,  140,  549,  554,
      560,  566,  565,  404,  140,  565,  132,  133,  567,  488,
      575,  580,  568,  623,  576,  581,  132,  133,  566,  403,
      585,  566,  624,  404,  586,  587,  141,  142,  493,  569,
      599,  600,  547,  141,  142,  143,  144,  143,  145,  146,
      143,  147,  143,  143,  143,  148,  143,  143,  143,  143,
      143,  143,  149,  143,  143,  143,  143,  143,  143,  143,
      150,  151,  152,  152,  152,  152,  153,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  143,  154,  143,  143,  152,

      152,  152,  152,  153,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  155,  156,  143,  152,  157,  158,  160,  973,   80,
       81,  160,  161,   80,   81,  448,  161,  168,  501,   80,
       81, 1016,  161,  162,  403,  551,  552,  162,  404,  607,
      608,  163,  502,  169,  168,  163,   80,   81, 1053,  161,
      477,  170,  472,  174,  625,   80,   81,  555,  556,  478,
      169,  985,  175,  174,  633,   80,   81,  164,  170,  176,
      472,  164,  175,  447,  447,  447,  594,  177,  491,  176,
      595,  625,  448,  547,  555,  556,  182,  177,   80,  183,

      633,   78,  225,  534,  226,  227,  165,  166,  413,  413,
      165,  166,  184,  178,  535,  505,  171,  172,  228,   78,
      185,  538,  182,  178,   80,  183,  229,   78,  493,  450,
      626,  482,  535,  171,  172,  476,  519,  480,  184,  975,
      403,  678,  179,  180,  404,   78,  185,  403,  650,  650,
      627,  404,  179,  180,  536,  450,  603,  626,  570,  628,
      404,  571,  604,  526,  403,  612,  605,  629,  404,  613,
     1016,  634,  536,  635,  472,  186,  187,  627,  661,  537,
      477,  230,  231,  570,  477,  628,  662,  662,  571,  478,
      526,  506,  472,  478,  629,  618,  507,  537,  634,  519,

      635,  186,  187,   78,   79,   78,   80,   81,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       82,   78,   78,   78,   78,   78,   78,   78,   83,   78,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,   78,   78,   78,   78,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,   78,
       78,   78,  188,  189,   85,  191,  557,  192,  193,  191,
      615,  192,  193,  636,  495,  616,  482,  558,  641,  643,

      501,  194,  961,  630,  496,  194,  630,  642,  656,  195,
      679,  620,  630,  195,  502,  615,  620,  620,  620,  657,
      636,  620,  616,  620,  706,  641,  643,  985,  620,  620,
      620,  631,  501,  642,  975,  196,  472,  559,  651,  196,
      688,  632,  472,  620,  651,  651,  502,  675,  651,  674,
      620,  706,  689,  656,  472,  651,  651,  651,  631,  915,
      472,  516,  560,  968,  197,  198,  517,  632,  197,  198,
       78,   79,   78,   80,   81,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   82,   78,   78,
       78,   78,   78,   78,   78,   83,   78,  199,  199,  199,

      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
       78,   78,   78,   78,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,   78,   78,   78,  199,
      200,   85,   78,   79,  201,   80,   81,   78,   78,   78,
       78,   78,   78,  202,  203,   78,  204,   78,  205,   82,
       78,   78,   78,   78,   78,   78,   78,   83,   78,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,   78,  207,   78,   78,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,   78,   78,
       78,  206,  208,   85,  209,  210,  211,  212,  213,  209,
      214,  215,  209,  209,  216,  209,  209,  209,  209,  209,
      209,  217,  209,  209,  209,  209,  209,  209,  209,  218,
      219,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  209,  221,  209,  209,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      209,  209,  209,  220,  222,  223,  233,  234,  235,  236,
      621,   79,  237,   80,   81,   79,  482,   80,   81,  622,
      472,   79,  238,   80,   81,  621,   79,   82,   80,   81,
      239,   82,  961,  717,  622,   83,  561,   82,  472,   83,
      565,  258,   82,  259,  260,   83,  243,  558,  244,  245,
       83,  553,  258,  261,  259,  260,  566,  262,  246,  653,
      489,  490,  247,  501,  261,  263,  654,  547,  262,  491,
      248,  249,  447,  447,  447,  412,  263,  502,  412,  623,
      477,  448,  489,  490,  707,  240,  241,  559,  624,  478,

       84,   85,  488,  476,   84,   85,  249,  742,  250,  681,
       84,   85,  413,  413,  653,   84,   85,  644,  623,  493,
      644,  707,  560,  663,  663,  663,  644,  624,  572,  709,
      264,  265,  448,  250,  702,  251,  252,  243,  253,  244,
      245,  264,  265,  489,  490,  645,  720,  494,  703,  254,
      505,  742,  491,  247,  704,  646,  709,  748,  658,  453,
      702,  248,  249,  658,  658,  658,  414,  480,  658,  749,
      658,  705,  645,  708,  703,  658,  658,  658,  710,  856,
      704,  646,  447,  447,  447,  719,  565,  249,  667,  255,
      720,  448,  493,  667,  667,  667,  731,  705,  667,  708,

      667,  732,  566,  648,  710,  667,  667,  667,  744,  744,
      648,  719,  754,  755,  256,  720,  251,  252,  266,  267,
      266,  268,  269,  266,  266,  266,  266,  266,  266,  266,
      266,  270,  266,  266,  266,  271,  266,  266,  266,  266,
      266,  266,  266,  272,  266,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  266,  274,
      266,  266,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  266,  266,  266,  273,  275,  276,

      243,  738,  244,  245,  915,  551,  285,  730,  286,  287,
      812,  285,  277,  286,  287,  746,  278,  447,  447,  447,
      694,  535,  288,  747,  248,  279,  448,  288,  738,  565,
      289,  290,  759,  730,  751,  289,  290,  712,  722,  294,
      482,  295,  296,  758,  831,  566,  294,  694,  295,  296,
      279,  297,  250,  547,  787,  298,  290,  742,  297,  759,
      751,  290,  298,  299,  820,  760,  447,  447,  447,  758,
      299,  303,  653,  286,  304,  448,  761,  250,  765,  251,
      252,  243,  280,  244,  245,  291,  292,  305,  536,  559,
      291,  292,  760,  281,  453,  306,  303,  278,  286,  304,

      565,  819,  775,  761,  765,  248,  279,  572,  656,  664,
      776,  776,  305,  537,  560,  815,  566,  653,  300,  301,
      306,  762,  670,  656,  653,  300,  301,  670,  670,  670,
      763,  279,  670,  282,  670,  664,  729,  673,  694,  670,
      670,  670,  620,  673,  673,  764,  767,  673,  762,  673,
      307,  308,  814,  656,  673,  673,  673,  763,  283,  731,
      251,  252,  779,  729,  732,  694,  754,  755,  656,  653,
      780,  780,  764,  767,  790,  307,  308,  309,  310,  309,
      311,  312,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  313,  309,  309,  309,  309,  309,

      309,  309,  314,  315,  316,  316,  316,  317,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  309,  318,  309,
      309,  316,  316,  316,  317,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  309,  309,  309,  316,  319,  320,  321,
      322,  321,  323,  324,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  325,  321,  321,  321,
      321,  321,  321,  321,  326,  321,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  321,
      328,  321,  321,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  321,  321,  321,  327,  329,
      330,  321,  322,  321,  323,  324,  321,  321,  321,  321,
      321,  321,  321,  331,  321,  321,  321,  321,  325,  321,
      321,  321,  321,  321,  321,  321,  326,  321,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  321,  328,  321,  321,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  321,  321,  321,
      332,  333,  330,  335,  482,   80,  336,  335,  337,   80,
      336,  768,  337,  344,  766,   80,  345,  770,  355,  338,
      100,  356,  346,  338,  711,  771,  648,  339,  757,  347,
      344,  339,   80,  345,  357,  535,  653,  348,  768,  346,
      766,  831,  358,  772,  770,  791,  347,  777,  472,  773,
      645,  472,  771,  340,  348,  676,  472,  340,  796,  786,
      676,  676,  676,  349,  752,  676,  472,  676,  359,  472,
      772,  791,  676,  676,  677,  536,  773,  645,  792,  793,

      349,  653,  341,  342,  691,  796,  341,  342,  472,  691,
      691,  691,  350,  351,  691,  752,  620,  360,  361,  827,
      537,  691,  691,  691,  792,  793,  472,  828,  828,  350,
      351,   78,   79,   78,   80,   81,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   82,   78,
       78,   78,   78,   78,   78,   78,   83,   78,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,   78,   78,   78,   78,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,

      352,  352,  352,  352,  352,  352,  352,   78,   78,   78,
      352,  353,   85,  355,  538,  100,  356,  363,  795,  364,
      365,  798,  366,  742,  797,  535,  367,  368,  369,  357,
      781,  781,  781,  370,  788,  788,  788,  358,  721,  448,
      800,  371,  372,  363,  795,  364,  365,  798,  366,  558,
      561,  797,  367,  368,  369,  376,  794,   80,  377,  370,
      378,  558,  806,  359,  379,  536,  800,  371,  372,  472,
      394,  380,  395,  396,  397,  376,  799,   80,  377,  381,
      378,  805,  397,  807,  379,  808,  398,  472,  806,  559,
      537,  380,  360,  361,  399,  400,  373,  374,  794,  381,

      813,  559,  809,  799,  810,  382,  801,  742,  805,  807,
      811,  808,  489,  490,  560,  394,  802,  395,  396,  397,
      400,  491,  373,  374,  794,  382,  560,  397,  752,  809,
      810,  398,  824,  801,  383,  384,  811,  812,  648,  399,
      400,  816,  802,  447,  447,  447,  855,  855,  535,  401,
      402,  536,  448,  821,  383,  384,  385,  386,  803,   80,
      388,  493,  385,  385,  385,  400,  385,  818,  816,  385,
      385,  822,  782,  389,  804,  823,  537,  385,  385,  385,
      385,  390,  385,  820,  482,  803,  680,  825,  536,  494,
      819,  680,  680,  680,  401,  402,  680,  822,  680,  782,

      804,  823,  909,  680,  680,  680,  385,  385,  385,  385,
      716,  910,  547,  537,  825,  716,  716,  716,  559,  547,
      716,  837,  716,  829,  817,  815,  836,  716,  716,  716,
      842,  843,  385,  385,  385,  558,  391,  392,  385,  386,
      844,   80,  388,  560,  385,  385,  385,  837,  385,  814,
      829,  385,  385,  836,  845,  389,  790,  842,  843,  385,
      385,  385,  385,  390,  385,  718,  752,  844,  685,  846,
      718,  718,  718,  789,  847,  718,  838,  718,  482,  838,
      845,  848,  718,  718,  718,  838,  864,  734,  385,  385,
      385,  385,  734,  734,  734,  846,  482,  734,  849,  734,

      847,  849,  785, 1446,  734,  734,  734,  849,  848,  956,
      957,  547,  898,  864,  385,  385,  385,  784,  391,  392,
      407,  407,  408,  407,  407,  407,  407,  409,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      407,  407,  407,  407,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  407,  407,  407,  411,

      411,  407,  523,  856,  862,  524,  525,  526,  783,  865,
      527,  857,  857,  866,  528,  529,  858,  858,  858,  530,
      863,  867,  869,  531,  532,  448,  778,  523,  874,  874,
      874,  862,  524,  525,  526,  865,  778,  527,  648,  866,
      528,  529,  923,  923,  923,  530,  863,  867,  869,  531,
      532,  407,  407,  408,  407,  407,  407,  407,  409,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  407,  407,  407,  407,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  407,  407,  407,
      411,  411,  407,  692,  693,  694,  695,  817,  696,  868,
      871, 1446,  697,  698, 1446,  956,  957,  699,  558,  860,
     1446,  700,  701,  832,  833,  834,  834,  834,  834,  861,
      692,  693,  694,  695,  870,  696,  868,  871,  697,  698,
      565,  852,  835,  699,  727,  835,  860,  700,  701,  727,
      727,  727,  648,  769,  727,  861,  728,  757,  559,  737,
      870,  727,  727,  727,  737,  737,  737,  872,  852,  737,

      752,  737,  873, 1446,  620,  617,  737,  737,  737,  750,
      750,  750,  898,  560,  750,  413,  620,  850,  413,  909,
     1446,  750,  750,  750,  872,  876, 1446,  835,  910,  873,
      835,  839,  839,  840,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  875,
      851,  876,  839,  839,  839,  839,  839,  839, 1446,  877,
      880, 1446,  447,  447,  447,  878,  841, 1446,  879,  881,
      861,  448,  890,  610,  891,  894,  875,  851,  905,  607,
      619,  839,  839,  839,  839,  618,  877,  880,  853,  742,
      912,  878,  745,  841,  879,  881,  861,  893,  893,  890,

      891,  903,  894,  859,  896,  833,  897,  839,  839,  839,
      904,  906,  839,  850,  898,  853,  912,  900,  901,  902,
      907,  742,  599,  899,  902,  902,  902,  911,  903,  859,
      882,  883,  902,  902,  902,  884,  835,  904,  906,  885,
      886,  913,  914,  835,  887,  920,  916,  907,  888,  889,
     1446,  835,  644, 1446,  911,  644,  921,  882,  883, 1446,
      922,  644,  884,  924,  598,  885,  886,  925,  913,  914,
      887,  927,  920,  916,  888,  889,  926,  929,  899,  918,
      918,  918,  740,  921,  932,  933,  934,  922,  448,  415,
      924,  835,  415,  925,  739,  593, 1446,  927,  835, 1446,

      591,  928,  588,  926,  929, 1446,  835,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  930,  917,  928,  908,  908,
      908,  908,  908,  908,  447,  447,  447,  874,  874,  874,
      935,  936,  937,  448,  874,  874,  874,  938,  939,  940,
      941,  930,  942,  917,  943,  944,  945,  908,  908,  908,
      908,  948,  946,  947,  949,  586,  935,  936,  937,  950,
      952,  583,  919,  938,  939,  940,  953,  941,  942,  905,
      943,  944,  945,  908,  908,  908,  736,  948,  908,  946,
      947,  949,  951,  933,  934,  950,  417,  952,  919,  954,

      901,  955,  953,  955,  902,  955,  958,  959,  960,  898,
      962,  931,  906,  898,  960,  960,  960,  735,  899,  960,
      960,  960,  899,  417,  965,  835,  838,  963,  966,  838,
      967,  969,  578,  835,  733,  838,  964,  962,  835,  906,
      849,  976,  977,  849,  966,  970,  970,  970,  978,  849,
      979,  971,  971,  971,  448,  972,  980,  967,  969,  981,
      448,  923,  923,  923,  923,  923,  923,  976,  977,  982,
      618,  983,  726,  899,  978,  986,  979,  899,  987,  988,
      835,  989,  980,  990,  991,  981,  992,  993,  835,  932,
      933,  934,  994,  835,  997,  995,  982,  983,  934,  933,

      934,  986,  998,  999,  987,  988, 1000,  989, 1001,  990,
      991,  996,  992,  993, 1002,  951,  933,  934, 1003,  994,
      997, 1004,  995,  838,  725,  973,  838,  963,  998,  999,
      724,  968,  838, 1000, 1001,  974,  964,  996,  723, 1014,
     1002, 1005,  959, 1006,  563, 1003,  562, 1004, 1006,  960,
     1006,  898, 1007, 1008, 1009, 1009, 1009, 1009,  898,  618,
      899, 1009, 1009, 1009,  965,  965, 1014,  899,  966,  966,
     1011,  835,  849, 1017,  835,  849, 1018, 1012, 1012, 1012,
      835,  849, 1019, 1020,  966,  966,  448, 1021, 1013, 1013,
     1013, 1022,  972, 1023, 1024, 1025, 1011,  448, 1026, 1017,

      547, 1027, 1018,  874,  874,  874, 1028, 1029, 1019, 1020,
     1030, 1031, 1033, 1021, 1032,  899, 1034, 1022, 1035, 1023,
     1024, 1025,  899, 1036, 1039, 1026,  835, 1027, 1037,  835,
     1038, 1040, 1028, 1029, 1043,  835, 1030, 1041, 1031, 1033,
     1032, 1050,  547, 1034, 1035, 1055, 1042, 1046, 1047, 1048,
     1036, 1039,  545,  715, 1037, 1054, 1038, 1040, 1044, 1008,
     1045, 1043,  973, 1045, 1009, 1045,  835, 1050,  898, 1048,
     1048, 1048, 1055,  898, 1048, 1048, 1048,  899, 1051, 1051,
     1051, 1054,  899,  923,  923,  923, 1056,  448,  835, 1057,
     1052, 1052, 1052,  835,  972,  714, 1058, 1059, 1060,  448,

     1061, 1062, 1064, 1065,  874,  874,  874,  874,  874,  874,
     1066, 1072, 1056, 1067, 1068, 1057,  874,  874,  874, 1069,
     1070,  835, 1058, 1059, 1071, 1060, 1061, 1062, 1064, 1065,
     1073,  713,  899, 1041, 1084, 1080, 1066,  899, 1072, 1067,
     1068, 1103, 1042,  835,  428, 1069, 1070,  428,  835, 1086,
     1071, 1075, 1047, 1076,  540,  539, 1073, 1076, 1048, 1076,
     1084,  898, 1080,  511,  973,  533,  511,  898, 1103,  690,
      899, 1077, 1078, 1079, 1087, 1086,  899, 1079, 1079, 1079,
     1079, 1079, 1079, 1081, 1081, 1081, 1088, 1083, 1083, 1083,
      835,  972,  448, 1082, 1082, 1082,  835,  972, 1089,  835,

     1087, 1090,  448,  923,  923,  923,  923,  923,  923,  923,
      923,  923, 1088,  874,  874,  874,  874,  874,  874,  514,
     1091, 1092, 1093, 1094, 1089,  899, 1095, 1090,  512, 1096,
     1097,  899, 1107, 1115, 1098, 1078, 1099, 1106, 1106, 1106,
     1099, 1079, 1099,  685,  898,  835, 1091, 1092, 1093, 1094,
      898,  835, 1095,  899,  835, 1096, 1097,  508, 1107,  899,
     1115,  973, 1100, 1101, 1102, 1108, 1109,  973, 1102, 1102,
     1102, 1102, 1102, 1102, 1104, 1104, 1104,  923,  923,  923,
     1110,  835,  684,  448, 1105, 1105, 1105,  835,  972, 1111,
      835, 1108, 1109,  448,  923,  923,  923,  874,  874,  874,

     1112, 1113, 1114, 1116,  584,  683, 1110,  584,  899,  499,
      589,  973, 1125,  589,  899, 1111, 1119, 1120, 1121,  498,
     1117, 1101, 1118, 1124, 1124, 1124, 1112, 1113, 1114, 1116,
      898, 1118, 1102, 1118,  592,  835,  835,  592, 1125,  899,
      597,  898,  835,  597,  497,  835, 1121, 1121, 1121, 1126,
      899, 1121, 1121, 1121, 1122, 1122, 1122, 1127,  973, 1128,
     1123, 1123, 1123,  448,  972,  835,  923,  923,  923,  448,
      835,  498, 1129,  720, 1138, 1126, 1130, 1120, 1131, 1137,
     1137, 1137,  682, 1127,  486, 1128,  898, 1132, 1133, 1134,
      835, 1131, 1121, 1131,  899,  899,  482,  973, 1129,  720,

     1138,  898, 1134, 1134, 1134,  899,  835, 1134, 1134, 1134,
      899, 1139, 1140, 1135, 1135, 1135,  874,  874,  874,  470,
      835,  835,  448,  672,  671,  835,  835, 1136, 1136, 1136,
      464,  972,  412, 1149,  973,  412,  448, 1139, 1140, 1141,
     1133, 1142,  669,  668, 1142, 1134, 1142, 1155,  413,  898,
      899,  413,  459,  973,  898, 1143, 1144, 1145,  899, 1149,
      666,  835,  665,  899,  451,  899, 1145, 1145, 1145, 1145,
     1145, 1145,  415, 1155,  835,  415,  835, 1146, 1146, 1146,
      659,  835, 1148, 1148, 1148,  835,  448,  443,  835, 1147,
     1147, 1147,  437,  972,  923,  923,  923,  428,  448,  648,

      428,  973, 1150, 1144, 1151, 1151, 1145, 1151, 1143, 1144,
     1145,  511,  898,  899,  511,  898,  584,  589,  899,  584,
      589,  899,  592,  597,  899,  592,  597,  835,  432,  835,
     1145, 1145, 1145, 1145, 1145, 1145, 1152, 1152, 1152,  415,
      835,  428,  415,  835,  428,  448, 1153, 1153, 1153,  835,
      972,  584,  835,  640,  584,  448,  973, 1154, 1154, 1154,
     1158, 1158, 1158,  973, 1150, 1144, 1151, 1151, 1145, 1151,
      638, 1156, 1156, 1156,  898,  415,  899,  898,  415,  899,
      448, 1049,  835,  899, 1049,  425,  899, 1157, 1157, 1157,
      406,  972, 1159, 1159, 1159,  619,  448, 1161, 1161, 1161,

      618,  448,  617,  614,  835,  610,  405,  835, 1160, 1160,
     1160,  406,  972, 1162, 1162, 1162,  405,  448,  406,  405,
      973,  602,  448, 1163, 1163, 1163,  406,  972, 1164, 1164,
     1164,  973,  448,  405,  973, 1165, 1165, 1165,  899,  598,
      406,  899,  405,  406,  448, 1166, 1166, 1166,  405,  972,
     1167, 1167, 1167,  593,  448, 1168, 1168, 1168, 1169, 1169,
     1169,  973,  972,  591,  448,  590,  405,  448, 1170, 1170,
     1170,  973, 1171, 1171, 1171, 1172, 1172, 1172,  588,  972,
      405,  448,  973,  583,  448, 1173, 1173, 1173,  582, 1174,
     1174, 1174, 1175, 1175, 1175,  578,  972,  973,  448,  577,

      574,  448,  973, 1176, 1176, 1176, 1177, 1177, 1177, 1178,
     1178, 1178,  563,  972,  562,  448,  553,  547,  448,  973,
     1179, 1179, 1179,  514,  973, 1180, 1180, 1180,  548, 1181,
     1181, 1181,  973,  972,  448, 1182, 1182, 1182,  448, 1183,
     1183, 1183,  973, 1184, 1184, 1184,  547,  972,  448,  973,
      547,  547,  448, 1185, 1185, 1185, 1186, 1186, 1186,  973,
     1187, 1187, 1187,  545,  972,  448,  973,  544,  542,  448,
     1188, 1188, 1188, 1189, 1189, 1189,  540,  973, 1191, 1191,
     1191,  539,  448,  973, 1190, 1190, 1190,  533,  972, 1192,
     1192, 1192,  522,  448,  973, 1193, 1193, 1193,  448,  972,

     1194, 1194, 1194,  973,  448, 1195, 1195, 1195,  519,  973,
      406, 1196, 1196, 1196,  448,  972,  405,  973,  406,  405,
      448, 1197, 1197, 1197, 1198, 1198, 1198,  973, 1199, 1199,
     1199,  514,  972,  448,  973,  405,  508,  448, 1200, 1200,
     1200, 1201, 1201, 1201,  973, 1202, 1202, 1202,  504,  972,
      448,  500,  973,  499,  448, 1203, 1203, 1203,  973, 1204,
     1204, 1204, 1205, 1205, 1205,  498,  972,  497,  448,  973,
      482,  448,  482,  482,  973, 1206, 1206, 1206, 1207, 1207,
     1207,  482, 1208, 1208, 1208,  973,  972,  448, 1209, 1209,
     1209,  448, 1210, 1210, 1210,  973, 1211, 1211, 1211,  470,

      972,  448,  973,  468,  464,  448, 1212, 1212, 1212, 1213,
     1213, 1213,  973, 1214, 1214, 1214,  463,  972,  448,  973,
      459,  457,  448, 1215, 1215, 1215, 1216, 1216, 1216,  973,
     1217, 1217, 1217,  446,  972,  448,  973,  405,  445,  448,
     1218, 1218, 1218, 1219, 1219, 1219, 1220, 1220, 1220,  973,
      972,  443,  448,  441,  437,  448,  973, 1221, 1221, 1221,
      436,  435,  973, 1222, 1222, 1222,  432, 1223, 1223, 1223,
      973,  972,  448, 1224, 1224, 1224,  448, 1225, 1225, 1225,
      973, 1226, 1226, 1226,  405,  972,  448,  973,  425,  405,
      448, 1227, 1227, 1227, 1228, 1228, 1228,  973, 1229, 1229,

     1229,  414,  972,  448,  973,  405,  406,  448, 1230, 1230,
     1230, 1233, 1233, 1233,  973, 1231, 1231, 1231,  405, 1446,
      973, 1232, 1232, 1232,  448,  972, 1234, 1234, 1234, 1446,
      448,  973, 1236, 1236, 1236,  448, 1235, 1235, 1235, 1446,
      972,  973, 1237, 1237, 1237,  448, 1446,  973, 1238, 1238,
     1238,  448,  972, 1446, 1446,  973, 1446,  448, 1239, 1239,
     1239, 1240, 1240, 1240, 1446,  973, 1446, 1241, 1241, 1241,
      448,  972,  973, 1242, 1242, 1242,  448, 1243, 1243, 1243,
     1446, 1446,  973, 1446, 1446,  973,  448, 1244, 1244, 1244,
     1446,  972, 1245, 1245, 1245,  973,  448, 1446, 1246, 1246,

     1246, 1248, 1248, 1248, 1446, 1446,  973,  448, 1446, 1446,
      973, 1247, 1247, 1247, 1446,  972, 1249, 1249, 1249, 1446,
      448, 1446,  973, 1446, 1446,  448, 1250, 1250, 1250, 1446,
      972, 1446,  973, 1446, 1446,  448, 1251, 1251, 1251, 1446,
     1446,  973, 1252, 1252, 1252, 1446, 1446,  973, 1253, 1253,
     1253,  448,  972, 1254, 1254, 1254, 1446,  448, 1255, 1255,
     1255,  973, 1257, 1257, 1257, 1446,  973,  448, 1256, 1256,
     1256, 1446,  972, 1446, 1446,  973, 1446,  448, 1258, 1258,
     1258, 1446, 1259, 1259, 1259,  973,  972,  448, 1260, 1260,
     1260,  448, 1261, 1261, 1261, 1262, 1262, 1262, 1446,  972,

      973,  448, 1446, 1446,  448, 1263, 1263, 1263, 1446, 1446,
      973, 1264, 1264, 1264, 1265, 1265, 1265, 1446,  972, 1446,
      448, 1446,  973,  448, 1266, 1266, 1266,  973, 1267, 1267,
     1267, 1268, 1268, 1268, 1446,  972,  973,  448, 1446, 1446,
      448, 1446,  973, 1269, 1269, 1269, 1270, 1270, 1270, 1271,
     1271, 1271, 1446,  972, 1446,  448,  973, 1446,  448, 1272,
     1272, 1272,  973, 1273, 1273, 1273, 1274, 1274, 1274,  973,
      972, 1446,  448, 1446, 1446,  448, 1275, 1275, 1275,  973,
     1276, 1276, 1276, 1277, 1277, 1277, 1446,  972,  973,  448,
     1446, 1446,  448, 1278, 1278, 1278, 1446, 1446,  973, 1279,

     1279, 1279, 1280, 1280, 1280,  973,  972, 1446,  448, 1446,
     1446,  448, 1281, 1281, 1281, 1446, 1446,  973, 1282, 1282,
     1282, 1446, 1446,  973, 1284, 1284, 1284,  448, 1283, 1283,
     1283, 1446,  972,  973, 1285, 1285, 1285,  448, 1446, 1446,
      973, 1446, 1446,  448, 1286, 1286, 1286, 1446,  972, 1446,
      973, 1446, 1446,  448, 1287, 1287, 1287,  973, 1446, 1288,
     1288, 1288, 1289, 1289, 1289, 1446,  972,  973,  448, 1446,
     1446,  448, 1290, 1290, 1290, 1446,  973, 1446, 1291, 1291,
     1291, 1292, 1292, 1292, 1446,  972,  973,  448, 1446, 1446,
      448, 1293, 1293, 1293, 1294, 1294, 1294, 1446,  973, 1296,

     1296, 1296,  973,  448, 1295, 1295, 1295, 1446,  972, 1446,
     1297, 1297, 1297,  448, 1299, 1299, 1299, 1446,  973,  448,
     1298, 1298, 1298, 1446,  972, 1300, 1300, 1300,  973,  448,
     1446, 1301, 1301, 1301,  448,  972,  973, 1302, 1302, 1302,
      448, 1303, 1303, 1303, 1446, 1446,  973, 1304, 1304, 1304,
      448,  972, 1305, 1305, 1305,  973,  448, 1306, 1306, 1306,
     1307, 1307, 1307, 1446,  972,  973,  448, 1446, 1446,  448,
     1308, 1308, 1308,  973, 1309, 1309, 1309, 1446,  973, 1446,
     1310, 1310, 1310,  448,  972, 1311, 1311, 1311,  973,  448,
     1312, 1312, 1312, 1446,  973, 1314, 1314, 1314, 1446,  448,

     1313, 1313, 1313, 1446,  972,  973, 1315, 1315, 1315,  448,
     1446,  973, 1317, 1317, 1317,  448, 1316, 1316, 1316, 1446,
      972,  973, 1318, 1318, 1318,  448,  973, 1446, 1319, 1319,
     1319,  448,  972, 1446,  973, 1446, 1446,  448, 1320, 1320,
     1320, 1321, 1321, 1321,  973, 1446, 1446, 1322, 1322, 1322,
      448,  972, 1446, 1446,  973, 1446,  448, 1446, 1446,  973,
     1323, 1323, 1323, 1324, 1324, 1324, 1325, 1325, 1325,  973,
      972, 1446,  448, 1446,  973,  448, 1326, 1326, 1326, 1327,
     1327, 1327, 1446, 1328, 1328, 1328,  973,  972,  448, 1446,
      973, 1446,  448, 1329, 1329, 1329, 1330, 1330, 1330, 1331,

     1331, 1331,  973,  972, 1446,  448, 1446, 1446,  448, 1332,
     1332, 1332,  973, 1333, 1333, 1333, 1334, 1334, 1334, 1446,
      972,  973,  448, 1446, 1446,  448, 1335, 1335, 1335, 1336,
     1336, 1336, 1446, 1446,  973, 1337, 1337, 1337,  448,  972,
      973, 1338, 1338, 1338,  448, 1339, 1339, 1339, 1446, 1446,
      973, 1340, 1340, 1340,  448,  972, 1446,  973, 1446, 1446,
      448, 1341, 1341, 1341, 1344, 1344, 1344,  973, 1342, 1342,
     1342, 1446, 1446,  973, 1347, 1347, 1347,  448, 1343, 1343,
     1343, 1446,  972,  973, 1345, 1345, 1345,  448, 1446, 1446,
      973, 1446, 1446,  448, 1346, 1346, 1346, 1446,  972, 1446,

      973, 1446, 1446,  448, 1348, 1348, 1348, 1446, 1446,  973,
     1349, 1349, 1349,  448,  972,  973, 1350, 1350, 1350,  448,
     1351, 1351, 1351, 1446, 1446,  973, 1353, 1353, 1353,  448,
     1352, 1352, 1352, 1446,  972,  973, 1446, 1446,  973,  448,
     1354, 1354, 1354, 1446,  972, 1355, 1355, 1355,  973,  448,
     1446, 1446,  973, 1356, 1356, 1356, 1446,  972, 1357, 1357,
     1357, 1446,  448, 1358, 1358, 1358, 1446,  972,  973, 1359,
     1359, 1359,  448, 1360, 1360, 1360, 1446,  972, 1361, 1361,
     1361, 1446,  448, 1446,  973, 1362, 1362, 1362, 1446,  972,
      973, 1363, 1363, 1363,  448, 1446, 1446, 1364, 1364, 1364,

      973,  972, 1446, 1446,  973, 1446,  448, 1365, 1365, 1365,
     1366, 1366, 1366, 1446,  973, 1367, 1367, 1367, 1446,  973,
     1368, 1368, 1368, 1369, 1369, 1369, 1446,  973, 1370, 1370,
     1370, 1446,  973, 1371, 1371, 1371, 1446,  973, 1372, 1372,
     1372, 1446, 1446,  973, 1373, 1373, 1373,  973, 1374, 1374,
     1374, 1446,  973, 1375, 1375, 1375, 1376, 1376, 1376,  973,
     1377, 1377, 1377, 1446, 1446,  973, 1378, 1378, 1378, 1446,
     1446,  973, 1379, 1379, 1379, 1380, 1380, 1380, 1381, 1381,
     1381,  973, 1446, 1446,  973, 1382, 1382, 1382, 1446,  973,
     1383, 1383, 1383, 1446,  973, 1446, 1446,  973, 1384, 1384,

     1384, 1446,  973, 1385, 1385, 1385, 1446,  973, 1386, 1386,
     1386, 1446,  973, 1387, 1387, 1387, 1446, 1446,  973, 1388,
     1388, 1388,  973, 1389, 1389, 1389, 1446,  973, 1446, 1446,
      973, 1390, 1390, 1390,  973, 1391, 1391, 1391, 1446, 1446,
      973, 1392, 1392, 1392, 1446, 1446,  973, 1446, 1446,  973,
     1446, 1446,  973, 1393, 1393, 1393, 1394, 1394, 1394,  973,
     1395, 1395, 1395, 1446,  973, 1396, 1396, 1396, 1397, 1397,
     1397, 1446,  973, 1398, 1398, 1398, 1446,  973, 1399, 1399,
     1399, 1446,  973, 1400, 1400, 1400, 1446,  973, 1401, 1401,
     1401, 1446, 1446,  973, 1402, 1402, 1402,  973, 1403, 1403,

     1403, 1404, 1404, 1404, 1446,  973, 1405, 1405, 1405,  973,
     1406, 1406, 1406, 1446, 1446,  973, 1407, 1407, 1407, 1408,
     1408, 1408, 1409, 1409, 1409, 1446, 1446,  973, 1446, 1446,
      973, 1410, 1410, 1410,  973, 1411, 1411, 1411, 1446,  973,
     1446, 1446,  973, 1412, 1412, 1412, 1446,  973, 1413, 1413,
     1413, 1446,  973, 1414, 1414, 1414, 1446,  973, 1415, 1415,
     1415, 1446,  973, 1416, 1416, 1416, 1446, 1446,  973, 1417,
     1417, 1417,  973, 1446, 1446,  973, 1418, 1418, 1418, 1446,
      973, 1419, 1419, 1419,  973, 1420, 1420, 1420, 1446, 1446,
      973, 1446, 1446,  973, 1446, 1446,  973, 1421, 1421, 1421,

     1422, 1422, 1422, 1446, 1446,  973, 1423, 1423, 1423,  973,
     1424, 1424, 1424, 1425, 1425, 1425, 1446,  973, 1426, 1426,
     1426, 1446,  973, 1427, 1427, 1427, 1446,  973, 1428, 1428,
     1428, 1446,  973, 1429, 1429, 1429, 1446,  973, 1430, 1430,
     1430, 1446, 1446,  973, 1431, 1431, 1431, 1432, 1432, 1432,
      973, 1433, 1433, 1433, 1446,  973, 1434, 1434, 1434,  973,
     1435, 1435, 1435, 1436, 1436, 1436, 1437, 1437, 1437, 1446,
     1446,  973, 1446, 1446,  973, 1438, 1438, 1438, 1446, 1446,
      973, 1439, 1439, 1439,  973, 1446, 1446,  973, 1440, 1440,
     1440, 1446,  973, 1441, 1441, 1441, 1446,  973, 1442, 1442,

     1442, 1446,  973, 1443, 1443, 1443, 1446,  973, 1444, 1444,
     1444, 1446,  973, 1445, 1445, 1445, 1446, 1446,  973, 1446,
     1446,  973, 1369, 1369, 1369,  973, 1446, 1446, 1446, 1446,
      973, 1446, 1446, 1446,  973, 1446, 1446,  973, 1446, 1446,
      973, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,  973,
     1446, 1446, 1446, 1446, 1446,  973, 1446, 1446, 1446, 1446,
     1446, 1446,  973, 1446, 1446, 1446, 1446,  973, 1446, 1446,
     1446, 1446,  973, 1446, 1446, 1446, 1446,  973, 1446, 1446,
     1446, 1446,  973, 1446, 1446, 1446, 1446,  973, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446,  973,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,  242,  242,  242,  242,  242,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,

      334,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  433,  433,  433, 1446,  433,
      433, 1446,  433, 1446,  433,  433,  433, 1446,  433,  433,
      433,  433,  433,  433,  434,  434,  434, 1446,  434,  434,
      434,  434, 1446,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  438,  438,  438, 1446,  438,  438, 1446,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
     1446,  438,  442,  442,  442, 1446,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  444,  444,  444, 1446,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      449,  449,  449, 1446, 1446, 1446, 1446,  449, 1446, 1446,
     1446,  449, 1446, 1446,  449,  454,  454,  454, 1446, 1446,
      454, 1446,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454, 1446,  454,  458,  458,  458, 1446,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  460,  460,  460, 1446, 1446,  460, 1446,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  465,  465,  465, 1446, 1446,  465,  465,  465,
     1446,  465,  465,  465,  465,  465,  465,  465,  465, 1446,

      465,  469,  469,  469, 1446,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      471,  471,  471, 1446,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  479,
     1446, 1446, 1446, 1446, 1446, 1446,  479, 1446, 1446, 1446,
      479, 1446, 1446,  479,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481, 1446,  481,  492,  492, 1446, 1446, 1446, 1446, 1446,
      492, 1446, 1446, 1446,  492, 1446, 1446,  492,  492,  503,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,  503, 1446,

      503, 1446, 1446,  503,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  518, 1446,  518, 1446,  518,  518,  518,
      518,  518,  518, 1446,  518, 1446,  518,  518, 1446,  518,
      541,  541,  541, 1446,  541,  541,  541,  541,  541,  541,
     1446,  541,  541,  541,  541,  541,  541,  541,  541,  546,
      546,  546, 1446,  546,  546,  546,  546,  546,  546, 1446,
      546,  546,  546,  546,  546, 1446,  546,  546,  564,  564,
      564, 1446,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564, 1446,  564, 1446,  564,  565,  565,  565,

     1446,  565,  565,  565,  565,  565,  565,  565,  565, 1446,
      565,  565, 1446,  565, 1446,  565,  566, 1446,  566, 1446,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566, 1446,  566, 1446,  566,  573, 1446,  573, 1446,  573,
      573,  573,  573,  573,  573, 1446,  573,  573,  573,  573,
      573,  573,  573,  573,  579, 1446,  579, 1446,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  596,  596,  596, 1446,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  601,  601,  601, 1446,  601,  601,  601,  601,

     1446,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      609, 1446, 1446,  609, 1446,  609, 1446,  609, 1446,  609,
     1446,  609, 1446, 1446,  609,  611,  611,  611, 1446,  611,
     1446,  611,  611,  611,  611, 1446,  611, 1446,  611,  611,
     1446,  611, 1446,  611,  637,  637,  637, 1446,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  639,  639,  639, 1446,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  433,  433,  433, 1446,  433,  433, 1446,  433,
     1446,  433,  433,  433, 1446,  433,  433,  433,  433,  433,
      433,  647,  647,  647, 1446,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647, 1446,  647,
      649,  649,  649, 1446,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  438,
      438,  438, 1446,  438,  438, 1446,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438, 1446,  438,  652,  652,
      652, 1446,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  655,  655,  655,

     1446,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  660,  660,  660, 1446,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  449,  449,  449, 1446, 1446,
     1446, 1446,  449, 1446, 1446, 1446,  449, 1446, 1446,  449,
      454,  454,  454, 1446, 1446,  454, 1446,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454, 1446,  454,  460,
      460,  460, 1446, 1446,  460, 1446,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  465,  465,
      465, 1446, 1446,  465,  465,  465, 1446,  465,  465,  465,

      465,  465,  465,  465,  465, 1446,  465,  471,  471,  471,
     1446,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  479, 1446, 1446, 1446,
     1446, 1446, 1446,  479, 1446, 1446, 1446,  479, 1446, 1446,
      479,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481, 1446,  481,
      492,  492, 1446, 1446, 1446, 1446, 1446,  492, 1446, 1446,
     1446,  492, 1446, 1446,  492,  492,  503, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446,  503, 1446,  503, 1446, 1446,
      503,  515,  515,  515,  515,  515,  515,  515,  515,  515,

      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      518, 1446,  518, 1446,  518,  518,  518,  518,  518,  518,
     1446,  518, 1446,  518,  518, 1446,  518,  541,  541,  541,
     1446,  541,  541,  541,  541,  541,  541, 1446,  541,  541,
      541,  541,  541,  541,  541,  541,  546,  546,  546, 1446,
      546,  546,  546,  546,  546,  546, 1446,  546,  546,  546,
      546,  546, 1446,  546,  546,  564,  564,  564, 1446,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
     1446,  564, 1446,  564,  565,  565,  565, 1446,  565,  565,
      565,  565,  565,  565,  565,  565, 1446,  565,  565, 1446,

      565, 1446,  565,  566, 1446,  566, 1446,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566, 1446,  566,
     1446,  566,  573, 1446,  573, 1446,  573,  573,  573,  573,
      573,  573, 1446,  573,  573,  573,  573,  573,  573,  573,
      573,  579, 1446,  579, 1446,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      741,  741,  741, 1446,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741, 1446,  741,  743,
      743,  743, 1446,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  609, 1446,

     1446,  609, 1446,  609, 1446,  609, 1446,  609, 1446,  609,
     1446, 1446,  609,  611,  611,  611, 1446,  611, 1446,  611,
      611,  611,  611, 1446,  611, 1446,  611,  611, 1446,  611,
     1446,  611,  753,  753,  753, 1446,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  756,  756,  756, 1446,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      637,  637,  637, 1446,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  639,
      639,  639, 1446,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  639,  639,  639,  639,  774,  774,
      774, 1446,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774, 1446,  774,  433,  433,  433,
     1446,  433,  433, 1446,  433, 1446,  433,  433,  433, 1446,
      433,  433,  433,  433,  433,  433,  652,  652,  652, 1446,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  653,  653,  653, 1446,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  655,  655,  655, 1446,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,

      655,  655,  655,  656,  656,  656, 1446,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  438,  438,  438, 1446,  438,  438, 1446,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438, 1446,
      438,  449,  449,  449, 1446, 1446, 1446, 1446,  449, 1446,
     1446, 1446,  449, 1446, 1446,  449,  454,  454,  454, 1446,
     1446,  454, 1446,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454, 1446,  454,  460,  460,  460, 1446, 1446,
      460, 1446,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  465,  465,  465, 1446, 1446,  465,

      465,  465, 1446,  465,  465,  465,  465,  465,  465,  465,
      465, 1446,  465,  471,  471,  471, 1446,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481, 1446,
      481,  518, 1446,  518, 1446,  518,  518,  518,  518,  518,
      518, 1446,  518, 1446,  518,  518, 1446,  518,  541,  541,
      541, 1446,  541,  541,  541,  541,  541,  541, 1446,  541,
      541,  541,  541,  541,  541,  541,  541,  546,  546,  546,
     1446,  546,  546,  546,  546,  546,  546, 1446,  546,  546,

      546,  546,  546, 1446,  546,  546,  566, 1446,  566, 1446,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566, 1446,  566, 1446,  566,  564,  564,  564, 1446,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
     1446,  564, 1446,  564,  573, 1446,  573, 1446,  573,  573,
      573,  573,  573,  573, 1446,  573,  573,  573,  573,  573,
      573,  573,  573,  579, 1446,  579, 1446,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  826,  826,  826, 1446,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826, 1446,

      826,  611,  611,  611, 1446,  611, 1446,  611,  611,  611,
      611, 1446,  611, 1446,  611,  611, 1446,  611, 1446,  611,
      753,  753,  753, 1446,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  830,
      830,  830, 1446,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  756,  756,
      756, 1446,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  637,  637,  637,
     1446,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  428, 1446, 1446,  428,

     1446, 1446, 1446,  428, 1446, 1446, 1446,  428, 1446, 1446,
      428,  854,  854,  854, 1446,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854, 1446,  854,
      652,  652,  652, 1446,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  449,
      449,  449, 1446, 1446, 1446, 1446,  449, 1446, 1446, 1446,
      449, 1446, 1446,  449,  454,  454,  454, 1446, 1446,  454,
     1446,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454, 1446,  454,  460,  460,  460, 1446, 1446,  460, 1446,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,

      460,  460,  465,  465,  465, 1446, 1446,  465,  465,  465,
     1446,  465,  465,  465,  465,  465,  465,  465,  465, 1446,
      465,  471,  471,  471, 1446,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481, 1446,  481,  892,
      892,  892, 1446,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892, 1446,  892,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  984,  984,  984,

      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984, 1010, 1446, 1446, 1446,
     1010, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1010, 1446,
     1010, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1446, 1063, 1063, 1446, 1063, 1063, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1446, 1074, 1074, 1446, 1074, 1074, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1446, 1085, 1085, 1446, 1085, 1085,   77, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446
    } ;

static yyconst flex_int16_t yy_chk[7891] =
    {   0,
        0,    1,  188,    1,    1,    2,  284,    2,    2,    0,
        3,  188,    3,    3,   82,   92,  102,    1,   82,   92,
      102,    2,  284,  117,  130,    1,    3,  117,  130,    2,
      272,  106,  121,  138,    3,  108,  181,  138,  107,  105,
      107,  110,  108,  108,  109,  120,  149,  120,  154,  154,
      149,  152,  152,  152,  181,  195,  272,  162,  106,  121,
      152,  162,  108,  813,  107,  105,  107,  110,  108,  108,
      109,  120,  169,  120,  176,  217,  169,  195,  176,  217,
        1,    1,   94,   94,    2,    2,  196,  196,  813,    3,
        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    9,  201,    9,
        9,  194,    9,  197,  221,  221,    9,   10,  201,   10,
       10,  194,   10,    9,  182,  194,   10,   11,  183,   11,
       11,    9,   11,   10,   12,  185,   12,   12,  184,   12,
      509,   10,  182,   11,  187,  184,  183,  206,  509,  184,
       12,   11,  211,  185,  185,  818,  184,  211,   12,  199,
      199,  206,  187,  228,  234,  287,  238,  228,  199,  234,

      238,  247,  262,  317,  271,  247,  262,   11,  271,  278,
      818,  287,  292,  278,   12,  289,    9,    9,  288,  197,
      298,  305,  288,  413,  298,  305,   10,   10,  292,  313,
      317,  289,  413,  313,  318,  318,   11,   11,  199,  289,
      359,  359,  271,   12,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15, 1369,   15,
       15,   16,   15,   16,   16, 1351,   16,   17,  208,   17,
       17, 1015,   17,   15,  325,  274,  274,   16,  325,  382,
      382,   15,  208,   17,   18,   16,   18,   18, 1014,   18,
      189,   17,  186,   19,  416,   19,   19,  279,  279,  189,
       18,  984,   19,   20,  421,   20,   20,   15,   18,   19,
      186,   16,   20,  153,  153,  153,  338,   19,  682,   20,
      338,  416,  153,  274,  279,  279,   21,   20,   21,   21,

      421,   21,   33,  253,   33,   33,   15,   15,  410,  410,
       16,   16,   21,   19,  253,  208,   17,   17,   33,   21,
       21,  254,   22,   20,   22,   22,   33,   22,  682,  153,
      417,  483,  254,   18,   18,  186,  254,  189,   22,  975,
      347,  483,   19,   19,  347,   22,   22,  357,  435,  435,
      418,  357,   20,   20,  253,  153,  370,  417,  290,  418,
      370,  290,  380,  290,  389,  398,  380,  419,  389,  398,
      974,  422,  254,  423,  471,   21,   21,  418,  445,  253,
      477,   33,   33,  290,  479,  418,  445,  445,  290,  477,
      290,  506,  471,  479,  419,  520,  506,  254,  422,  520,

      423,   22,   22,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   25,  280,   25,   25,   26,
      400,   26,   26,  424,  495,  400,  484,  280,  429,  430,

      501,   25,  961,  420,  495,   26,  420,  429,  440,   25,
      484,  405,  420,   26,  501,  400,  405,  405,  405,  440,
      424,  405,  400,  405,  528,  429,  430,  931,  405,  405,
      405,  420,  503,  429,  921,   25,  474,  280,  436,   26,
      510,  420,  473,  436,  436,  436,  503,  474,  436,  473,
      436,  528,  510,  440,  474,  436,  436,  436,  420,  915,
      473,  516,  280,  914,   25,   25,  516,  420,   26,   26,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   34,   34,   34,   34,
      621,   35,   34,   35,   35,   36,  488,   36,   36,  621,
      476,   37,   34,   37,   37,  412,   38,   35,   38,   38,
       34,   36,  904,  549,  412,   35,  281,   37,  476,   36,
      291,   41,   38,   41,   41,   37,   39,  281,   39,   39,
       38,  281,   42,   41,   42,   42,  291,   41,   39,  439,
      200,  200,   39,  505,   42,   41,  439,  549,   42,  200,
       39,   39,  157,  157,  157, 1469,   42,  505, 1469,  414,
      480,  157,  489,  489,  529,   34,   34,  281,  414,  480,

       35,   35,  488,  476,   36,   36,   39,  893,   39,  489,
       37,   37,  412,  412,  439,   38,   38,  431,  623,  200,
      431,  529,  281,  447,  447,  447,  431,  623,  291,  531,
       41,   41,  447,   39,  524,   39,   39,   40,   40,   40,
       40,   42,   42,  492,  492,  431,  556,  200,  525,   40,
      505,  892,  492,   40,  526,  431,  531,  613,  441,  157,
      524,   40,   40,  441,  441,  441,  414,  480,  441,  613,
      441,  527,  431,  530,  525,  441,  441,  441,  532,  857,
      526,  431,  449,  449,  449,  555,  564,   40,  457,   40,
      556,  449,  492,  457,  457,  457,  574,  527,  457,  530,

      457,  574,  564,  855,  532,  457,  457,  457,  602,  602,
      854,  555,  622,  622,   40,  556,   40,   40,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       45,  585,   45,   45,  848,  552,   47,  571,   47,   47,
      812,   48,   45,   48,   48,  612,   45,  453,  453,  453,
      615,  812,   47,  612,   45,   45,  453,   48,  585,  572,
       47,   47,  626,  571,  616,   48,   48,  538,  561,   49,
      678,   49,   49,  625,  830,  572,   50,  615,   50,   50,
       45,   49,   45,  552,  678,   49,   47,  826,   50,  626,
      616,   48,   50,   49,  820,  627,  450,  450,  450,  625,
       50,   51,  652,   51,   51,  450,  628,   45,  633,   45,
       45,   46,   46,   46,   46,   47,   47,   51,  538,  561,
       48,   48,  627,   46,  453,   51,   52,   46,   52,   52,

      727,  819,  650,  628,  633,   46,   46,  572,  655,  450,
      650,  650,   52,  538,  561,  815,  727,  652,   49,   49,
       52,  629,  463,  657,  777,   50,   50,  463,  463,  463,
      631,   46,  463,   46,  463,  450,  570,  468,  570,  463,
      463,  463,  468,  468,  468,  632,  635,  468,  629,  468,
       51,   51,  814,  655,  468,  468,  468,  631,   46,  731,
       46,   46,  662,  570,  731,  570,  753,  753,  657,  777,
      662,  662,  632,  635,  790,   52,   52,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   59,  787,   59,   59,   60,   59,   60,
       60,  636,   60,   61,  634,   61,   61,  641,   65,   59,
       65,   65,   61,   60,  534,  642,  774,   59,  756,   61,
       62,   60,   62,   62,   65,  534,  654,   61,  636,   62,
      634,  754,   65,  643,  641,  692,   62,  654,  674,  645,
      646,  675,  642,   59,   62,  475,  475,   60,  697,  674,
      475,  475,  475,   61,  747,  475,  674,  475,   65,  675,
      643,  692,  475,  475,  475,  534,  645,  646,  693,  694,

       62,  654,   59,   59,  522,  697,   60,   60,  676,  522,
      522,  522,   61,   61,  522,  745,  522,   65,   65,  744,
      534,  522,  522,  522,  693,  694,  676,  744,  744,   62,
       62,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   66,  535,   66,   66,   67,  696,   67,
       67,  699,   67,  743,  698,  535,   67,   67,   67,   66,
      663,  663,  663,   67,  681,  681,  681,   66,  557,  663,
      701,   67,   67,   68,  696,   68,   68,  699,   68,  557,
      558,  698,   68,   68,   68,   69,  695,   69,   69,   68,
       69,  558,  705,   66,   69,  535,  701,   68,   68,  786,
       75,   69,   75,   75,   75,   70,  700,   70,   70,   69,
       70,  704,   75,  706,   70,  707,   75,  786,  705,  557,
      535,   70,   66,   66,   75,   75,   67,   67,  695,   70,

      712,  558,  708,  700,  709,   69,  702,  741,  704,  706,
      710,  707,  494,  494,  557,   76,  702,   76,   76,   76,
       75,  494,   68,   68,  695,   70,  558,   76,  739,  708,
      709,   76,  735,  702,   69,   69,  710,  711,  776,   76,
       76,  719,  702,  664,  664,  664,  776,  776,  711,   75,
       75,  712,  664,  725,   70,   70,   71,   71,  703,   71,
       71,  494,   71,   71,   71,   76,   71,  722,  719,   71,
       71,  729,  664,   71,  703,  730,  712,   71,   71,   71,
       71,   71,   71,  724,  485,  703,  485,  738,  711,  494,
      723,  485,  485,  485,   76,   76,  485,  729,  485,  664,

      703,  730,  843,  485,  485,  485,   71,   71,   71,   71,
      544,  843,  718,  711,  738,  544,  544,  544,  722,  717,
      544,  759,  544,  751,  817,  714,  758,  544,  544,  544,
      762,  763,   71,   71,   71,  817,   71,   71,   72,   72,
      764,   72,   72,  722,   72,   72,   72,  759,   72,  713,
      751,   72,   72,  758,  765,   72,  690,  762,  763,   72,
       72,   72,   72,   72,   72,  550,  687,  764,  685,  766,
      550,  550,  550,  684,  767,  550,  760,  550,  680,  760,
      765,  768,  550,  550,  550,  760,  793,  577,   72,   72,
       72,   72,  577,  577,  577,  766,  679,  577,  770,  577,

      767,  770,  671,  895,  577,  577,  577,  770,  768,  898,
      898,  550,  895,  793,   72,   72,   72,  668,   72,   72,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,

       88,   88,  249,  780,  792,  249,  249,  249,  665,  795,
      249,  780,  780,  796,  249,  249,  781,  781,  781,  249,
      792,  797,  799,  249,  249,  781,  661,  249,  804,  804,
      804,  792,  249,  249,  249,  795,  660,  249,  649,  796,
      249,  249,  863,  863,  863,  249,  792,  797,  799,  249,
      249,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  523,  523,  523,  523,  721,  523,  798,
      801,  772,  523,  523,  772,  956,  956,  523,  721,  791,
      772,  523,  523,  755,  755,  755,  757,  757,  757,  791,
      523,  523,  523,  523,  800,  523,  798,  801,  523,  523,
      569,  772,  755,  523,  569,  757,  791,  523,  523,  569,
      569,  569,  647,  638,  569,  791,  569,  624,  721,  582,
      800,  569,  569,  569,  582,  582,  582,  802,  772,  582,

      618,  582,  803,  899,  614,  617,  582,  582,  582,  614,
      614,  614,  899,  721,  614, 1470,  614,  771, 1470,  909,
      771,  614,  614,  614,  802,  806,  771,  755,  909,  803,
      757,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  805,
      771,  806,  761,  761,  761,  761,  761,  761,  773,  807,
      810,  773,  782,  782,  782,  808,  761,  773,  809,  811,
      822,  782,  823,  610,  825,  829,  805,  771,  840,  608,
      605,  761,  761,  761,  761,  604,  807,  810,  773,  828,
      845,  808,  603,  761,  809,  811,  822,  828,  828,  823,

      825,  836,  829,  782,  831,  831,  831,  761,  761,  761,
      837,  840,  761,  850,  831,  773,  845,  832,  832,  832,
      841,  601,  600,  831,  833,  833,  833,  844,  836,  782,
      816,  816,  834,  834,  834,  816,  832,  837,  840,  816,
      816,  846,  847,  833,  816,  860,  850,  841,  816,  816,
      852,  834,  853,  852,  844,  853,  861,  816,  816,  852,
      862,  853,  816,  864,  598,  816,  816,  865,  846,  847,
      816,  867,  860,  850,  816,  816,  866,  869,  831,  858,
      858,  858,  595,  861,  872,  872,  872,  862,  858, 1471,
      864,  832, 1471,  865,  594,  593,  851,  867,  833,  851,

      591,  868,  588,  866,  869,  851,  834,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  870,  851,  868,  842,  842,
      842,  842,  842,  842,  859,  859,  859,  871,  871,  871,
      873,  875,  876,  859,  874,  874,  874,  877,  878,  879,
      880,  870,  881,  851,  882,  883,  884,  842,  842,  842,
      842,  887,  885,  886,  888,  587,  873,  875,  876,  889,
      891,  583,  859,  877,  878,  879,  894,  880,  881,  905,
      882,  883,  884,  842,  842,  842,  581,  887,  842,  885,
      886,  888,  890,  890,  890,  889,  903,  891,  859,  896,

      896,  896,  894,  897,  897,  897,  900,  900,  900,  896,
      906,  871,  905,  897,  901,  901,  901,  580,  896,  902,
      902,  902,  897,  903,  912,  900,  907,  911,  912,  907,
      913,  916,  578,  901,  576,  907,  911,  906,  902,  905,
      917,  922,  924,  917,  912,  918,  918,  918,  925,  917,
      926,  919,  919,  919,  918,  919,  927,  913,  916,  928,
      919,  920,  920,  920,  923,  923,  923,  922,  924,  929,
      575,  930,  568,  896,  925,  935,  926,  897,  936,  937,
      900,  938,  927,  939,  940,  928,  941,  942,  901,  932,
      932,  932,  943,  902,  945,  944,  929,  930,  934,  934,

      934,  935,  946,  947,  936,  937,  948,  938,  949,  939,
      940,  944,  941,  942,  950,  951,  951,  951,  952,  943,
      945,  953,  944,  962,  567,  919,  962,  963,  946,  947,
      563,  968,  962,  948,  949,  920,  963,  944,  562,  972,
      950,  954,  954,  954,  560,  952,  559,  953,  955,  955,
      955,  954,  958,  958,  958,  959,  959,  959,  955,  554,
      954,  960,  960,  960,  965,  967,  972,  955,  965,  967,
      968,  958,  969,  976,  959,  969,  977,  970,  970,  970,
      960,  969,  978,  979,  965,  967,  970,  980,  971,  971,
      971,  981,  971,  982,  983,  986,  968,  971,  987,  976,

      547,  988,  977,  985,  985,  985,  989,  990,  978,  979,
      991,  992,  994,  980,  993,  954,  995,  981,  997,  982,
      983,  986,  955,  998, 1001,  987,  958,  988,  999,  959,
     1000, 1002,  989,  990, 1004,  960,  991, 1003,  992,  994,
      993, 1011,  546,  995,  997, 1018, 1003, 1007, 1007, 1007,
      998, 1001,  545,  543,  999, 1017, 1000, 1002, 1005, 1005,
     1005, 1004,  971, 1006, 1006, 1006, 1007, 1011, 1005, 1008,
     1008, 1008, 1018, 1006, 1009, 1009, 1009, 1005, 1012, 1012,
     1012, 1017, 1006, 1016, 1016, 1016, 1019, 1012, 1008, 1020,
     1013, 1013, 1013, 1009, 1013,  540, 1021, 1022, 1023, 1013,

     1024, 1025, 1027, 1028, 1029, 1029, 1029, 1030, 1030, 1030,
     1031, 1039, 1019, 1034, 1035, 1020, 1032, 1032, 1032, 1036,
     1037, 1007, 1021, 1022, 1038, 1023, 1024, 1025, 1027, 1028,
     1040,  539, 1005, 1041, 1054, 1050, 1031, 1006, 1039, 1034,
     1035, 1080, 1041, 1008, 1472, 1036, 1037, 1472, 1009, 1056,
     1038, 1044, 1044, 1044,  537,  536, 1040, 1045, 1045, 1045,
     1054, 1044, 1050, 1489, 1013,  533, 1489, 1045, 1080,  521,
     1044, 1046, 1046, 1046, 1057, 1056, 1045, 1047, 1047, 1047,
     1048, 1048, 1048, 1051, 1051, 1051, 1060, 1053, 1053, 1053,
     1046, 1053, 1051, 1052, 1052, 1052, 1047, 1052, 1062, 1048,

     1057, 1065, 1052, 1058, 1058, 1058, 1059, 1059, 1059, 1061,
     1061, 1061, 1060, 1064, 1064, 1064, 1066, 1066, 1066,  514,
     1067, 1068, 1069, 1070, 1062, 1044, 1071, 1065,  513, 1072,
     1073, 1045, 1084, 1096, 1075, 1075, 1075, 1083, 1083, 1083,
     1076, 1076, 1076,  508, 1075, 1046, 1067, 1068, 1069, 1070,
     1076, 1047, 1071, 1075, 1048, 1072, 1073,  507, 1084, 1076,
     1096, 1053, 1077, 1077, 1077, 1087, 1089, 1052, 1078, 1078,
     1078, 1079, 1079, 1079, 1081, 1081, 1081, 1086, 1086, 1086,
     1091, 1077,  502, 1081, 1082, 1082, 1082, 1078, 1082, 1092,
     1079, 1087, 1089, 1082, 1088, 1088, 1088, 1090, 1090, 1090,

     1093, 1094, 1095, 1097, 1499,  500, 1091, 1499, 1075,  499,
     1500, 1083, 1107, 1500, 1076, 1092, 1100, 1100, 1100,  498,
     1098, 1098, 1098, 1106, 1106, 1106, 1093, 1094, 1095, 1097,
     1098, 1099, 1099, 1099, 1501, 1100, 1077, 1501, 1107, 1098,
     1503, 1099, 1078, 1503,  497, 1079, 1101, 1101, 1101, 1109,
     1099, 1102, 1102, 1102, 1104, 1104, 1104, 1110, 1082, 1111,
     1105, 1105, 1105, 1104, 1105, 1101, 1108, 1108, 1108, 1105,
     1102,  496, 1112, 1115, 1125, 1109, 1117, 1117, 1117, 1124,
     1124, 1124,  493, 1110,  487, 1111, 1117, 1119, 1119, 1119,
     1100, 1118, 1118, 1118, 1098, 1117,  481, 1106, 1112, 1115,

     1125, 1118, 1120, 1120, 1120, 1099, 1119, 1121, 1121, 1121,
     1118, 1127, 1129, 1122, 1122, 1122, 1126, 1126, 1126,  470,
     1101, 1120, 1122,  467,  466, 1102, 1121, 1123, 1123, 1123,
      464, 1123, 1508, 1139, 1105, 1508, 1123, 1127, 1129, 1130,
     1130, 1130,  462,  461, 1131, 1131, 1131, 1149, 1509, 1130,
     1117, 1509,  459, 1124, 1131, 1132, 1132, 1132, 1130, 1139,
      456, 1119,  455, 1131,  452, 1118, 1133, 1133, 1133, 1134,
     1134, 1134, 1510, 1149, 1132, 1510, 1120, 1135, 1135, 1135,
      444, 1121, 1137, 1137, 1137, 1133, 1135,  443, 1134, 1136,
     1136, 1136,  437, 1136, 1138, 1138, 1138, 1513, 1136,  434,

     1513, 1123, 1141, 1141, 1141, 1142, 1142, 1142, 1143, 1143,
     1143, 1530, 1141, 1130, 1530, 1142, 1540, 1541, 1131, 1540,
     1541, 1141, 1542, 1543, 1142, 1542, 1543, 1143,  432, 1132,
     1144, 1144, 1144, 1145, 1145, 1145, 1146, 1146, 1146, 1550,
     1133, 1553, 1550, 1134, 1553, 1146, 1147, 1147, 1147, 1144,
     1147, 1574, 1145,  427, 1574, 1147, 1137, 1148, 1148, 1148,
     1154, 1154, 1154, 1136, 1150, 1150, 1150, 1151, 1151, 1151,
      426, 1152, 1152, 1152, 1150, 1580, 1141, 1151, 1580, 1142,
     1152, 1596, 1143, 1150, 1596,  425, 1151, 1153, 1153, 1153,
      406, 1153, 1156, 1156, 1156,  404, 1153, 1158, 1158, 1158,

      403, 1156,  401,  399, 1144,  391,  390, 1145, 1157, 1157,
     1157,  383, 1157, 1159, 1159, 1159,  381, 1157,  373,  371,
     1147,  367, 1159, 1160, 1160, 1160,  360, 1160, 1161, 1161,
     1161, 1148, 1160,  358, 1154, 1162, 1162, 1162, 1150,  353,
      350, 1151,  348,  341, 1162, 1163, 1163, 1163,  339, 1163,
     1164, 1164, 1164,  333, 1163, 1165, 1165, 1165, 1166, 1166,
     1166, 1153, 1166,  329, 1165,  328,  326, 1166, 1167, 1167,
     1167, 1158, 1168, 1168, 1168, 1169, 1169, 1169,  319, 1169,
      314, 1168, 1157,  307, 1169, 1170, 1170, 1170,  306, 1171,
     1171, 1171, 1172, 1172, 1172,  300, 1172, 1160, 1171,  299,

      297, 1172, 1161, 1173, 1173, 1173, 1174, 1174, 1174, 1175,
     1175, 1175,  283, 1175,  282, 1174,  277,  276, 1175, 1163,
     1176, 1176, 1176,  275, 1164, 1177, 1177, 1177,  270, 1178,
     1178, 1178, 1166, 1178, 1177, 1179, 1179, 1179, 1178, 1180,
     1180, 1180, 1167, 1181, 1181, 1181,  269, 1181, 1180, 1169,
      267,  266, 1181, 1182, 1182, 1182, 1183, 1183, 1183, 1170,
     1184, 1184, 1184,  264, 1184, 1183, 1172,  263,  261, 1184,
     1185, 1185, 1185, 1186, 1186, 1186,  256, 1173, 1188, 1188,
     1188,  255, 1186, 1175, 1187, 1187, 1187,  251, 1187, 1189,
     1189, 1189,  248, 1187, 1176, 1190, 1190, 1190, 1189, 1190,

     1191, 1191, 1191, 1178, 1190, 1192, 1192, 1192,  246, 1179,
      240, 1193, 1193, 1193, 1192, 1193,  239, 1181,  230,  229,
     1193, 1194, 1194, 1194, 1195, 1195, 1195, 1182, 1196, 1196,
     1196,  222, 1196, 1195, 1184,  218,  215, 1196, 1197, 1197,
     1197, 1198, 1198, 1198, 1185, 1199, 1199, 1199,  207, 1199,
     1198,  205, 1188,  204, 1199, 1200, 1200, 1200, 1187, 1201,
     1201, 1201, 1202, 1202, 1202,  203, 1202,  202, 1201, 1190,
      198, 1202,  193,  191, 1191, 1203, 1203, 1203, 1204, 1204,
     1204,  190, 1205, 1205, 1205, 1193, 1205, 1204, 1206, 1206,
     1206, 1205, 1207, 1207, 1207, 1194, 1208, 1208, 1208,  179,

     1208, 1207, 1196,  177,  171, 1208, 1209, 1209, 1209, 1210,
     1210, 1210, 1197, 1211, 1211, 1211,  170, 1211, 1210, 1199,
      165,  163, 1211, 1212, 1212, 1212, 1213, 1213, 1213, 1200,
     1214, 1214, 1214,  151, 1214, 1213, 1202,  150,  148, 1214,
     1215, 1215, 1215, 1216, 1216, 1216, 1217, 1217, 1217, 1203,
     1217,  141, 1216,  139,  132, 1217, 1205, 1218, 1218, 1218,
      131,  129, 1206, 1219, 1219, 1219,  122, 1220, 1220, 1220,
     1208, 1220, 1219, 1221, 1221, 1221, 1220, 1222, 1222, 1222,
     1209, 1223, 1223, 1223,  118, 1223, 1222, 1211,  111,  103,
     1223, 1224, 1224, 1224, 1225, 1225, 1225, 1212, 1226, 1226,

     1226,   96, 1226, 1225, 1214,   93,   84, 1226, 1227, 1227,
     1227, 1230, 1230, 1230, 1215, 1228, 1228, 1228,   83,   77,
     1217, 1229, 1229, 1229, 1228, 1229, 1231, 1231, 1231,    0,
     1229, 1218, 1233, 1233, 1233, 1231, 1232, 1232, 1232,    0,
     1232, 1220, 1234, 1234, 1234, 1232,    0, 1221, 1235, 1235,
     1235, 1234, 1235,    0,    0, 1223,    0, 1235, 1236, 1236,
     1236, 1237, 1237, 1237,    0, 1224,    0, 1238, 1238, 1238,
     1237, 1238, 1226, 1239, 1239, 1239, 1238, 1240, 1240, 1240,
        0,    0, 1227,    0,    0, 1230, 1240, 1241, 1241, 1241,
        0, 1241, 1242, 1242, 1242, 1229, 1241,    0, 1243, 1243,

     1243, 1245, 1245, 1245,    0,    0, 1233, 1243,    0,    0,
     1232, 1244, 1244, 1244,    0, 1244, 1246, 1246, 1246,    0,
     1244,    0, 1235,    0,    0, 1246, 1247, 1247, 1247,    0,
     1247,    0, 1236,    0,    0, 1247, 1248, 1248, 1248,    0,
        0, 1238, 1249, 1249, 1249,    0,    0, 1239, 1250, 1250,
     1250, 1249, 1250, 1251, 1251, 1251,    0, 1250, 1252, 1252,
     1252, 1241, 1254, 1254, 1254,    0, 1242, 1252, 1253, 1253,
     1253,    0, 1253,    0,    0, 1245,    0, 1253, 1255, 1255,
     1255,    0, 1256, 1256, 1256, 1244, 1256, 1255, 1257, 1257,
     1257, 1256, 1258, 1258, 1258, 1259, 1259, 1259,    0, 1259,

     1247, 1258,    0,    0, 1259, 1260, 1260, 1260,    0,    0,
     1248, 1261, 1261, 1261, 1262, 1262, 1262,    0, 1262,    0,
     1261,    0, 1250, 1262, 1263, 1263, 1263, 1251, 1264, 1264,
     1264, 1265, 1265, 1265,    0, 1265, 1254, 1264,    0,    0,
     1265,    0, 1253, 1266, 1266, 1266, 1267, 1267, 1267, 1268,
     1268, 1268,    0, 1268,    0, 1267, 1256,    0, 1268, 1269,
     1269, 1269, 1257, 1270, 1270, 1270, 1271, 1271, 1271, 1259,
     1271,    0, 1270,    0,    0, 1271, 1272, 1272, 1272, 1260,
     1273, 1273, 1273, 1274, 1274, 1274,    0, 1274, 1262, 1273,
        0,    0, 1274, 1275, 1275, 1275,    0,    0, 1263, 1276,

     1276, 1276, 1277, 1277, 1277, 1265, 1277,    0, 1276,    0,
        0, 1277, 1278, 1278, 1278,    0,    0, 1266, 1279, 1279,
     1279,    0,    0, 1268, 1281, 1281, 1281, 1279, 1280, 1280,
     1280,    0, 1280, 1269, 1282, 1282, 1282, 1280,    0,    0,
     1271,    0,    0, 1282, 1283, 1283, 1283,    0, 1283,    0,
     1272,    0,    0, 1283, 1284, 1284, 1284, 1274,    0, 1285,
     1285, 1285, 1286, 1286, 1286,    0, 1286, 1275, 1285,    0,
        0, 1286, 1287, 1287, 1287,    0, 1277,    0, 1288, 1288,
     1288, 1289, 1289, 1289,    0, 1289, 1278, 1288,    0,    0,
     1289, 1290, 1290, 1290, 1291, 1291, 1291,    0, 1281, 1293,

     1293, 1293, 1280, 1291, 1292, 1292, 1292,    0, 1292,    0,
     1294, 1294, 1294, 1292, 1296, 1296, 1296,    0, 1283, 1294,
     1295, 1295, 1295,    0, 1295, 1297, 1297, 1297, 1284, 1295,
        0, 1298, 1298, 1298, 1297, 1298, 1286, 1299, 1299, 1299,
     1298, 1300, 1300, 1300,    0,    0, 1287, 1301, 1301, 1301,
     1300, 1301, 1302, 1302, 1302, 1289, 1301, 1303, 1303, 1303,
     1304, 1304, 1304,    0, 1304, 1290, 1303,    0,    0, 1304,
     1305, 1305, 1305, 1293, 1306, 1306, 1306,    0, 1292,    0,
     1307, 1307, 1307, 1306, 1307, 1308, 1308, 1308, 1296, 1307,
     1309, 1309, 1309,    0, 1295, 1311, 1311, 1311,    0, 1309,

     1310, 1310, 1310,    0, 1310, 1298, 1312, 1312, 1312, 1310,
        0, 1299, 1314, 1314, 1314, 1312, 1313, 1313, 1313,    0,
     1313, 1301, 1315, 1315, 1315, 1313, 1302,    0, 1316, 1316,
     1316, 1315, 1316,    0, 1304,    0,    0, 1316, 1317, 1317,
     1317, 1318, 1318, 1318, 1305,    0,    0, 1319, 1319, 1319,
     1318, 1319,    0,    0, 1307,    0, 1319,    0,    0, 1308,
     1320, 1320, 1320, 1321, 1321, 1321, 1322, 1322, 1322, 1311,
     1322,    0, 1321,    0, 1310, 1322, 1323, 1323, 1323, 1324,
     1324, 1324,    0, 1325, 1325, 1325, 1314, 1325, 1324,    0,
     1313,    0, 1325, 1326, 1326, 1326, 1327, 1327, 1327, 1328,

     1328, 1328, 1316, 1328,    0, 1327,    0,    0, 1328, 1329,
     1329, 1329, 1317, 1330, 1330, 1330, 1331, 1331, 1331,    0,
     1331, 1319, 1330,    0,    0, 1331, 1332, 1332, 1332, 1333,
     1333, 1333,    0,    0, 1320, 1334, 1334, 1334, 1333, 1334,
     1322, 1335, 1335, 1335, 1334, 1336, 1336, 1336,    0,    0,
     1323, 1337, 1337, 1337, 1336, 1337,    0, 1325,    0,    0,
     1337, 1338, 1338, 1338, 1341, 1341, 1341, 1326, 1339, 1339,
     1339,    0,    0, 1328, 1344, 1344, 1344, 1339, 1340, 1340,
     1340,    0, 1340, 1329, 1342, 1342, 1342, 1340,    0,    0,
     1331,    0,    0, 1342, 1343, 1343, 1343,    0, 1343,    0,

     1332,    0,    0, 1343, 1345, 1345, 1345,    0,    0, 1334,
     1346, 1346, 1346, 1345, 1346, 1335, 1347, 1347, 1347, 1346,
     1348, 1348, 1348,    0,    0, 1337, 1350, 1350, 1350, 1348,
     1349, 1349, 1349,    0, 1349, 1338,    0,    0, 1341, 1349,
     1352, 1352, 1352,    0, 1352, 1353, 1353, 1353, 1344, 1352,
        0,    0, 1340, 1354, 1354, 1354,    0, 1354, 1355, 1355,
     1355,    0, 1354, 1356, 1356, 1356,    0, 1356, 1343, 1357,
     1357, 1357, 1356, 1358, 1358, 1358,    0, 1358, 1359, 1359,
     1359,    0, 1358,    0, 1346, 1360, 1360, 1360,    0, 1360,
     1347, 1361, 1361, 1361, 1360,    0,    0, 1362, 1362, 1362,

     1350, 1362,    0,    0, 1349,    0, 1362, 1363, 1363, 1363,
     1364, 1364, 1364,    0, 1352, 1365, 1365, 1365,    0, 1353,
     1366, 1366, 1366, 1367, 1367, 1367,    0, 1354, 1368, 1368,
     1368,    0, 1355, 1370, 1370, 1370,    0, 1356, 1371, 1371,
     1371,    0,    0, 1357, 1372, 1372, 1372, 1358, 1373, 1373,
     1373,    0, 1359, 1374, 1374, 1374, 1375, 1375, 1375, 1360,
     1376, 1376, 1376,    0,    0, 1361, 1377, 1377, 1377,    0,
        0, 1362, 1378, 1378, 1378, 1379, 1379, 1379, 1380, 1380,
     1380, 1363,    0,    0, 1364, 1381, 1381, 1381,    0, 1365,
     1382, 1382, 1382,    0, 1366,    0,    0, 1367, 1383, 1383,

     1383,    0, 1368, 1384, 1384, 1384,    0, 1370, 1385, 1385,
     1385,    0, 1371, 1386, 1386, 1386,    0,    0, 1372, 1387,
     1387, 1387, 1373, 1388, 1388, 1388,    0, 1374,    0,    0,
     1375, 1389, 1389, 1389, 1376, 1390, 1390, 1390,    0,    0,
     1377, 1391, 1391, 1391,    0,    0, 1378,    0,    0, 1379,
        0,    0, 1380, 1392, 1392, 1392, 1393, 1393, 1393, 1381,
     1394, 1394, 1394,    0, 1382, 1395, 1395, 1395, 1396, 1396,
     1396,    0, 1383, 1397, 1397, 1397,    0, 1384, 1398, 1398,
     1398,    0, 1385, 1399, 1399, 1399,    0, 1386, 1400, 1400,
     1400,    0,    0, 1387, 1401, 1401, 1401, 1388, 1402, 1402,

     1402, 1403, 1403, 1403,    0, 1389, 1404, 1404, 1404, 1390,
     1405, 1405, 1405,    0,    0, 1391, 1406, 1406, 1406, 1407,
     1407, 1407, 1408, 1408, 1408,    0,    0, 1392,    0,    0,
     1393, 1409, 1409, 1409, 1394, 1410, 1410, 1410,    0, 1395,
        0,    0, 1396, 1411, 1411, 1411,    0, 1397, 1412, 1412,
     1412,    0, 1398, 1413, 1413, 1413,    0, 1399, 1414, 1414,
     1414,    0, 1400, 1415, 1415, 1415,    0,    0, 1401, 1416,
     1416, 1416, 1402,    0,    0, 1403, 1417, 1417, 1417,    0,
     1404, 1418, 1418, 1418, 1405, 1419, 1419, 1419,    0,    0,
     1406,    0,    0, 1407,    0,    0, 1408, 1420, 1420, 1420,

     1421, 1421, 1421,    0,    0, 1409, 1422, 1422, 1422, 1410,
     1423, 1423, 1423, 1424, 1424, 1424,    0, 1411, 1425, 1425,
     1425,    0, 1412, 1426, 1426, 1426,    0, 1413, 1427, 1427,
     1427,    0, 1414, 1428, 1428, 1428,    0, 1415, 1429, 1429,
     1429,    0,    0, 1416, 1430, 1430, 1430, 1431, 1431, 1431,
     1417, 1432, 1432, 1432,    0, 1418, 1433, 1433, 1433, 1419,
     1434, 1434, 1434, 1435, 1435, 1435, 1436, 1436, 1436,    0,
        0, 1420,    0,    0, 1421, 1437, 1437, 1437,    0,    0,
     1422, 1438, 1438, 1438, 1423,    0,    0, 1424, 1439, 1439,
     1439,    0, 1425, 1440, 1440, 1440,    0, 1426, 1441, 1441,

     1441,    0, 1427, 1442, 1442, 1442,    0, 1428, 1443, 1443,
     1443,    0, 1429, 1444, 1444, 1444,    0,    0, 1430,    0,
        0, 1431, 1445, 1445, 1445, 1432,    0,    0,    0,    0,
     1433,    0,    0,    0, 1434,    0,    0, 1435,    0,    0,
     1436,    0,    0,    0,    0,    0,    0,    0,    0, 1437,
        0,    0,    0,    0,    0, 1438,    0,    0,    0,    0,
        0,    0, 1439,    0,    0,    0,    0, 1440,    0,    0,
        0,    0, 1441,    0,    0,    0,    0, 1442,    0,    0,
        0,    0, 1443,    0,    0,    0,    0, 1444,    0,    0,
        0,    0,    0,    0,    0,    0, 1445, 1447, 1447, 1447,

     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,

     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,

     1457, 1457, 1457, 1457, 1457, 1457, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,

     1462, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1468, 1468, 1468, 1468,

     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1473, 1473, 1473,    0, 1473,
     1473,    0, 1473,    0, 1473, 1473, 1473,    0, 1473, 1473,
     1473, 1473, 1473, 1473, 1474, 1474, 1474,    0, 1474, 1474,
     1474, 1474,    0, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1475, 1475, 1475,    0, 1475, 1475,    0,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
        0, 1475, 1476, 1476, 1476,    0, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1477, 1477, 1477,    0, 1477, 1477, 1477, 1477, 1477,

     1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1478, 1478, 1478,    0,    0,    0,    0, 1478,    0,    0,
        0, 1478,    0,    0, 1478, 1479, 1479, 1479,    0,    0,
     1479,    0, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1479, 1479,    0, 1479, 1480, 1480, 1480,    0, 1480, 1480,
     1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1480, 1481, 1481, 1481,    0,    0, 1481,    0,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1482, 1482, 1482,    0,    0, 1482, 1482, 1482,
        0, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,    0,

     1482, 1483, 1483, 1483,    0, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
     1484, 1484, 1484,    0, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1485,
        0,    0,    0,    0,    0,    0, 1485,    0,    0,    0,
     1485,    0,    0, 1485, 1486, 1486, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486,
     1486,    0, 1486, 1487, 1487,    0,    0,    0,    0,    0,
     1487,    0,    0,    0, 1487,    0,    0, 1487, 1487, 1488,
        0,    0,    0,    0,    0,    0,    0,    0, 1488,    0,

     1488,    0,    0, 1488, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1491,    0, 1491,    0, 1491, 1491, 1491,
     1491, 1491, 1491,    0, 1491,    0, 1491, 1491,    0, 1491,
     1492, 1492, 1492,    0, 1492, 1492, 1492, 1492, 1492, 1492,
        0, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1493,
     1493, 1493,    0, 1493, 1493, 1493, 1493, 1493, 1493,    0,
     1493, 1493, 1493, 1493, 1493,    0, 1493, 1493, 1494, 1494,
     1494,    0, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1494,    0, 1494,    0, 1494, 1495, 1495, 1495,

        0, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,    0,
     1495, 1495,    0, 1495,    0, 1495, 1496,    0, 1496,    0,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496,    0, 1496,    0, 1496, 1497,    0, 1497,    0, 1497,
     1497, 1497, 1497, 1497, 1497,    0, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1498,    0, 1498,    0, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1502, 1502, 1502,    0, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1504, 1504, 1504,    0, 1504, 1504, 1504, 1504,

        0, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
     1506,    0,    0, 1506,    0, 1506,    0, 1506,    0, 1506,
        0, 1506,    0,    0, 1506, 1507, 1507, 1507,    0, 1507,
        0, 1507, 1507, 1507, 1507,    0, 1507,    0, 1507, 1507,
        0, 1507,    0, 1507, 1511, 1511, 1511,    0, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1512, 1512, 1512,    0, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1514, 1514, 1514,    0, 1514, 1514,    0, 1514,
        0, 1514, 1514, 1514,    0, 1514, 1514, 1514, 1514, 1514,
     1514, 1515, 1515, 1515,    0, 1515, 1515, 1515, 1515, 1515,
     1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515,    0, 1515,
     1516, 1516, 1516,    0, 1516, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1517,
     1517, 1517,    0, 1517, 1517,    0, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517,    0, 1517, 1518, 1518,
     1518,    0, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1519, 1519, 1519,

        0, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
     1519, 1519, 1519, 1519, 1519, 1519, 1520, 1520, 1520,    0,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1521, 1521, 1521,    0,    0,
        0,    0, 1521,    0,    0,    0, 1521,    0,    0, 1521,
     1522, 1522, 1522,    0,    0, 1522,    0, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522,    0, 1522, 1523,
     1523, 1523,    0,    0, 1523,    0, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1524, 1524,
     1524,    0,    0, 1524, 1524, 1524,    0, 1524, 1524, 1524,

     1524, 1524, 1524, 1524, 1524,    0, 1524, 1525, 1525, 1525,
        0, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
     1525, 1525, 1525, 1525, 1525, 1525, 1526,    0,    0,    0,
        0,    0,    0, 1526,    0,    0,    0, 1526,    0,    0,
     1526, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,    0, 1527,
     1528, 1528,    0,    0,    0,    0,    0, 1528,    0,    0,
        0, 1528,    0,    0, 1528, 1528, 1529,    0,    0,    0,
        0,    0,    0,    0,    0, 1529,    0, 1529,    0,    0,
     1529, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531,

     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531,
     1532,    0, 1532,    0, 1532, 1532, 1532, 1532, 1532, 1532,
        0, 1532,    0, 1532, 1532,    0, 1532, 1533, 1533, 1533,
        0, 1533, 1533, 1533, 1533, 1533, 1533,    0, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1534, 1534, 1534,    0,
     1534, 1534, 1534, 1534, 1534, 1534,    0, 1534, 1534, 1534,
     1534, 1534,    0, 1534, 1534, 1535, 1535, 1535,    0, 1535,
     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
        0, 1535,    0, 1535, 1536, 1536, 1536,    0, 1536, 1536,
     1536, 1536, 1536, 1536, 1536, 1536,    0, 1536, 1536,    0,

     1536,    0, 1536, 1537,    0, 1537,    0, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,    0, 1537,
        0, 1537, 1538,    0, 1538,    0, 1538, 1538, 1538, 1538,
     1538, 1538,    0, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1539,    0, 1539,    0, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1544, 1544, 1544,    0, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544,    0, 1544, 1545,
     1545, 1545,    0, 1545, 1545, 1545, 1545, 1545, 1545, 1545,
     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1546,    0,

        0, 1546,    0, 1546,    0, 1546,    0, 1546,    0, 1546,
        0,    0, 1546, 1547, 1547, 1547,    0, 1547,    0, 1547,
     1547, 1547, 1547,    0, 1547,    0, 1547, 1547,    0, 1547,
        0, 1547, 1548, 1548, 1548,    0, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1549, 1549, 1549,    0, 1549, 1549, 1549, 1549, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
     1551, 1551, 1551,    0, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1552,
     1552, 1552,    0, 1552, 1552, 1552, 1552, 1552, 1552, 1552,

     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1554, 1554,
     1554,    0, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554,    0, 1554, 1555, 1555, 1555,
        0, 1555, 1555,    0, 1555,    0, 1555, 1555, 1555,    0,
     1555, 1555, 1555, 1555, 1555, 1555, 1556, 1556, 1556,    0,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1557, 1557, 1557,    0, 1557,
     1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
     1557, 1557, 1557, 1557, 1558, 1558, 1558,    0, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,

     1558, 1558, 1558, 1559, 1559, 1559,    0, 1559, 1559, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1560, 1560, 1560,    0, 1560, 1560,    0, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,    0,
     1560, 1561, 1561, 1561,    0,    0,    0,    0, 1561,    0,
        0,    0, 1561,    0,    0, 1561, 1562, 1562, 1562,    0,
        0, 1562,    0, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562,    0, 1562, 1563, 1563, 1563,    0,    0,
     1563,    0, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1564, 1564, 1564,    0,    0, 1564,

     1564, 1564,    0, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
     1564,    0, 1564, 1565, 1565, 1565,    0, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,    0,
     1566, 1567,    0, 1567,    0, 1567, 1567, 1567, 1567, 1567,
     1567,    0, 1567,    0, 1567, 1567,    0, 1567, 1568, 1568,
     1568,    0, 1568, 1568, 1568, 1568, 1568, 1568,    0, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1569, 1569, 1569,
        0, 1569, 1569, 1569, 1569, 1569, 1569,    0, 1569, 1569,

     1569, 1569, 1569,    0, 1569, 1569, 1570,    0, 1570,    0,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570,    0, 1570,    0, 1570, 1571, 1571, 1571,    0, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
        0, 1571,    0, 1571, 1572,    0, 1572,    0, 1572, 1572,
     1572, 1572, 1572, 1572,    0, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1573,    0, 1573,    0, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
     1573, 1573, 1575, 1575, 1575,    0, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,    0,

     1575, 1576, 1576, 1576,    0, 1576,    0, 1576, 1576, 1576,
     1576,    0, 1576,    0, 1576, 1576,    0, 1576,    0, 1576,
     1577, 1577, 1577,    0, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1578,
     1578, 1578,    0, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1579, 1579,
     1579,    0, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1581, 1581, 1581,
        0, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1581, 1581, 1581, 1581, 1581, 1582,    0,    0, 1582,

        0,    0,    0, 1582,    0,    0,    0, 1582,    0,    0,
     1582, 1583, 1583, 1583,    0, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,    0, 1583,
     1584, 1584, 1584,    0, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1585,
     1585, 1585,    0,    0,    0,    0, 1585,    0,    0,    0,
     1585,    0,    0, 1585, 1586, 1586, 1586,    0,    0, 1586,
        0, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586,    0, 1586, 1587, 1587, 1587,    0,    0, 1587,    0,
     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,

     1587, 1587, 1588, 1588, 1588,    0,    0, 1588, 1588, 1588,
        0, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,    0,
     1588, 1589, 1589, 1589,    0, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590,    0, 1590, 1591,
     1591, 1591,    0, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1591,    0, 1591, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1593, 1593, 1593,

     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1594,    0,    0,    0,
     1594,    0,    0,    0,    0,    0,    0,    0, 1594,    0,
     1594, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597,    0, 1597, 1597,    0, 1597, 1597, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598,    0, 1598, 1598,    0, 1598, 1598, 1599, 1599,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,

     1599,    0, 1599, 1599,    0, 1599, 1599, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446
    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
/*************************************************************************
 *
 * Copyright (c) 2014-2021 Barbara Geller & Ansel Sermersheim
 * Copyright (c) 1997-2014 Dimitri van Heesch
 *
*************************************************************************/

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include <QDir>
#include <QFile>
#include <QFileInfo>
#include <QHash>
#include <QRegularExpression>
#include <QStringList>
#include <QStack>
#include <QVector>

#include <pre.h>

#include <a_define.h>
#include <arguments.h>
#include <constexp.h>
#include <config.h>
#include <condparser.h>
#include <doxy_globals.h>
#include <default_args.h>
#include <entry.h>
#include <message.h>
#include <membername.h>
#include <util.h>

// Toggle for some debugging info
// #define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

struct CondCtx
{
   CondCtx(int line, const QString &id, bool b)
      : lineNr(line), sectionId(id), skip(b)
   {
   }

   int lineNr;
   QString sectionId;
   bool skip;
};

struct FileState {
   FileState(int size) : lineNr(1), curlyCount(0), fileBuf(size),
      oldFileBuf(""), oldFileBufPos(0), bufState(0) {}

   int       lineNr;
   int       curlyCount;

   QString   fileBuf;
   QString   oldFileBuf;
   int       oldFileBufPos;
   QString   fileName;
   YY_BUFFER_STATE bufState;
};

/** @brief Singleton which manages the defines available while preprocessing files
 */
class DefineManager
{
   // local class used to hold the defines for a single file
   class DefinesPerFile
   {
    public:
      DefinesPerFile() {
      }

      virtual ~DefinesPerFile() {
      }

      /** Adds a define in the context of a file. Will replace an existing define
       *  with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(QSharedPointer<A_Define> def) {
         QSharedPointer<A_Define> d = m_defines.value(def->m_name);

         if (d != nullptr) {
            // redefine
            m_defines.remove(d->m_name);
         }

         m_defines.insert(def->m_name, def);
      }

      /** Adds an include file for this file
       *  @param fileName The name of the include file
       */
      void addInclude(const QString &fileName) {
         m_includedFiles.insert(fileName);
      }

      void collectDefines(DefineDict &dict, QSet<QString> &includeStack);

    private:
      DefineDict m_defines;
      QSet<QString> m_includedFiles;
   };

 public:
   friend class DefinesPerFile;

   /** Returns a reference to the singleton */
   static DefineManager &instance() {
      if (theInstance == nullptr) {
         theInstance = new DefineManager;
      }
      return *theInstance;
   }

   static void deleteInstance() {
      delete theInstance;
      theInstance = nullptr;
   }

   /** Starts a context in which defines are collected.
    *  Called at the start of a new file that is preprocessed.
    *  @param fileName the name of the file to process.
    */
   void startContext(const QString &fileName) {
      m_contextDefines.clear();
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         // new file

         m_fileMap.insert(fileName, QMakeShared<DefinesPerFile>());
      }
   }

   /** Ends the context started with startContext() freeing any
    *  defines collected within in this context.
    */
   void endContext() {
      m_contextDefines.clear();
   }

   /** Add an included file to the current context.
    *  If the file has been pre-processed already, all defines are added to the context.
    *  @param fileName The name of the include file to add to the context.
    */
   void addFileToContext(const QString &fileName) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         // new file

         m_fileMap.insert(fileName, QMakeShared<DefinesPerFile>());

      } else {
         // existing file

         QSet<QString> includeStack;
         dpf->collectDefines(m_contextDefines, includeStack);
      }
   }

   /** Add a define to the manager object.
    *  @param fileName The file in which the define was found
    *  @param def The Define object to add.
    */
   void addDefine(const QString &fileName, QSharedPointer<A_Define> def) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<A_Define> d = m_contextDefines.value(def->m_name);

      if (d != nullptr) {
         // redefine
         m_contextDefines.remove(d->m_name);
      }

      m_contextDefines.insert(def->m_name, def);

      //
      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);
      }

      dpf->addDefine(std::move(def));
   }

   /** Add an include relation to the manager object.
    *  @param fromFileName file name in which the include was found.
    *  @param toFileName file name that is included.
    */
   void addInclude(const QString &fromFileName, const QString &toFileName) {
      if (fromFileName.isEmpty() || toFileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fromFileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fromFileName, dpf);
      }

      dpf->addInclude(toFileName);
   }

   /** Returns a Define object given its name or 0 if the Define does not exist.
   */
   QSharedPointer<A_Define> isDefined(const QString &name) const {
      QSharedPointer<A_Define> d = m_contextDefines.value(name);

      if (d && d->undef) {
         d = QSharedPointer<A_Define>();
      }

      return d;
   }

   /** Returns a reference to the defines found in the current context. */
   const DefineDict &defineContext() const {
      return m_contextDefines;
   }

 private:
   static DefineManager *theInstance;

   /** Helper function to collect all define for a given file */
   void collectDefinesForFile(const QString &fileName, QSharedPointer<DefineDict> dict) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf) {
         QSet<QString> includeStack;
         dpf->collectDefines(*dict, includeStack);
      }
   }

   /** returns the DefinesPerFile object for a given file name. */
   QSharedPointer<DefinesPerFile> find(const QString &fileName) const {
      if (fileName.isEmpty()) {
         return QSharedPointer<DefinesPerFile>();
      }

      return m_fileMap.value(fileName);
   }

   DefineManager() {
   }

   virtual ~DefineManager() {
   }

   QHash<QString, QSharedPointer<DefinesPerFile>> m_fileMap;
   DefineDict m_contextDefines;
};

/** Singleton instance */
DefineManager *DefineManager::theInstance = 0;

/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(DefineDict &dict, QSet<QString> &includeStack)
{
   {
      for (auto di : m_includedFiles) {
         QString incFile = di;

         QSharedPointer<DefinesPerFile> dpf = DefineManager::instance().find(incFile);

         if (dpf && ! includeStack.contains(incFile)) {
            includeStack.insert(incFile);
            dpf->collectDefines(dict, includeStack);
         }
      }
   }

   {
      for (const auto &def : m_defines)  {
         QSharedPointer<A_Define> d = dict.value(def->m_name);

         if (d != nullptr) {
            // redefine
            dict.remove(d->m_name);
         }

         dict.insert(def->m_name, def);
      }
   }
}

static QStringList              s_pathList;
static QString                  s_yyFileName;
static QSharedPointer<FileDef>  s_yyFileDef;
static QSharedPointer<FileDef>  s_inputFileDef;

static QSharedPointer<QHash<QString, int>> s_argDict;
static QStack<QSharedPointer<FileState>>   s_includeStack;
static QStack<QSharedPointer<CondCtx>>     s_condStack;
static QSharedPointer<DefineDict>          s_expandedDict;

static int          s_yyLineNr   = 1;
static int          s_yyMLines   = 1;
static int          s_yyColNr    = 1;
static int          s_ifcount    = 0;
static int          s_defArgs    = -1;

static QString      s_defName;
static QString      s_defText;
static QString      s_defLitText;
static QString      s_defArgsStr;
static QString      s_defExtraSpacing;
static bool         s_defVarArgs;

static int          s_lastCContext;
static int          s_lastCPPContext;
static QStack<int>  s_levelGuard;

static QString      s_outputString;
static QString      s_inputString;
static int          s_inputPosition;

static int          s_roundCount;
static bool         s_quoteArg;

static int          s_findDefArgContext;
static bool         s_expectGuard;
static QString      s_guardName;
static QString      s_lastGuardName;
static QString      s_incName;
static QString      s_guardExpr;
static int          s_curlyCount;
static bool         s_nospaces;          // add extra spaces during macro expansion

static bool         s_macroExpansion;    // from the configuration
static bool         s_expandOnlyPredef;  // from the configuration
static int          s_commentCount;
static bool         s_insideComment;
static bool         s_isImported;
static QString      s_blockName;
static int          s_condCtx;
static bool         s_skip;

static bool         s_insideCS;          // C# has simpler preprocessor
static bool         s_isSource;

static bool         s_lexInit   = false;
static int          s_fenceSize = 0;
static bool         s_ccomment;

static QSet<QString> s_allIncludes;
static QSet<QString> s_expansionDict;

#define MAX_EXPANSION_DEPTH 50

static void setFileName(const QString &name)
{
   bool ambig;
   QFileInfo fi(name);

   s_yyFileName = fi.absoluteFilePath();
   s_yyFileDef  = findFileDef(&Doxy_Globals::inputNameDict, s_yyFileName, ambig);

   if (s_yyFileDef == nullptr) {
      // if this is not an input file check if it is an include file
      s_yyFileDef = findFileDef(&Doxy_Globals::includeNameDict, s_yyFileName, ambig);
   }

   if (s_yyFileDef && s_yyFileDef->isReference()) {
      s_yyFileDef = QSharedPointer<FileDef>();
   }

   s_insideCS = getLanguageFromFileName(s_yyFileName) == SrcLangExt_CSharp;
   s_isSource = determineSection(s_yyFileName);
}

static void incrLevel()
{
   s_levelGuard.push(0);
}

static void decrLevel()
{
   if (s_levelGuard.size() > 0) {
      s_levelGuard.pop();

   } else {
      warn(s_yyFileName, s_yyLineNr, "More #endif's than #if's found\n");

   }
}

static bool otherCaseDone()
{
   if (s_levelGuard.size() == 0) {
      warn(s_yyFileName, s_yyLineNr, "Found an #else without a preceding #if\n");
      return true;

   } else {
      return s_levelGuard.top();

   }
}

static void setCaseDone(bool value)
{
   s_levelGuard.top() = value;
}

static QSharedPointer<FileState> checkAndOpenFile(const QString &fileName, bool &alreadyIncluded)
{
   alreadyIncluded = false;
   QSharedPointer<FileState> fs;

   QFileInfo fi(fileName);

   if (fi.exists() && fi.isFile()) {
      static const QStringList exclPatterns = Config::getList("exclude-patterns");

      if (patternMatch(fi, exclPatterns)) {
         return QSharedPointer<FileState>();
      }

      QString absName = fi.absoluteFilePath();

      // global guard
      if (s_curlyCount == 0) {
         // not #include inside { ... }

         if (s_allIncludes.contains(absName)) {
            alreadyIncluded = true;
            return QSharedPointer<FileState>();
         }

         s_allIncludes.insert(absName);
      }

      // check include stack for absName
      QStack<QSharedPointer<FileState>> tmpStack;

      while (! s_includeStack.isEmpty()) {
         fs = s_includeStack.pop();

         if (fs->fileName == absName) {
            alreadyIncluded = true;
         }

         tmpStack.push(fs);
      }

      while (! tmpStack.isEmpty()) {
         fs = tmpStack.pop();

         s_includeStack.push(fs);
      }

      if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }

      fs = QMakeShared<FileState>(fi.size() + 4096);
      alreadyIncluded = false;

      if (! readInputFile(absName, fs->fileBuf)) {
         // error
         fs = QSharedPointer<FileState>();

      } else {
         fs->oldFileBuf    = s_inputString;
         fs->oldFileBufPos = s_inputPosition;
      }
   }

   return fs;
}

static QSharedPointer<FileState> findFile(const QString &fileName, bool localInclude, bool &alreadyIncluded)
{
   if (QDir::isAbsolutePath(fileName)) {
      QSharedPointer<FileState> fs = checkAndOpenFile(fileName, alreadyIncluded);

      if (fs) {
         setFileName(fileName);
         s_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   if (localInclude && ! s_yyFileName.isEmpty()) {
      QFileInfo fi(s_yyFileName);

      if (fi.exists()) {
         QString absName = fi.absolutePath() + "/" + fileName;
         QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

         if (fs) {
            setFileName(absName);
            s_yyLineNr = 1;
            return fs;

         } else if (alreadyIncluded) {
            return QSharedPointer<FileState>();
         }
      }
   }

   if (s_pathList.isEmpty()) {
      return QSharedPointer<FileState>();
   }

   for (auto &s : s_pathList) {
      QString absName = s + "/" + fileName;

      QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

      if (fs) {
         setFileName(absName);
         s_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   return QSharedPointer<FileState>();
}

static QString extractTrailingComment(const QString &s)
{
   if (s.isEmpty()) {
      return QString("");
   }

   int i = s.length() - 1;

   while (i >= 0) {
      QChar c = s[i];

      switch (c.unicode()) {
         case '/': {
            i--;

            if (i >= 0 && s[i] == '*') {
               // end of a comment block
               i--;

               while (i > 0 && !(s[i - 1] == '/' && s[i] == '*')) {
                  i--;
               }

               if (i == 0) {
                  i++;
               }

               // only /*!< or /**< are treated as a comment for the macro name     */
               // otherwise the comment is treated as part of the macro definition

               return ((s[i + 1] == '*' || s[i + 1] == '!') && s[i + 2] == '<') ? s.mid(i - 1) : "";

            } else {
               return QString("");
            }
         }

         break;

         // whitespace or line-continuation
         case ' ':
         case '\t':
         case '\r':
         case '\n':
         case '\\':
            break;

         default:
            return QString("");
      }

      i--;
   }

   return QString("");
}

static int getNextChar(const QString &expr, QString *rest, uint &pos);
static int getCurrentChar(const QString &expr, QString *rest, uint pos);
static void unputChar(const QString &expr, QString *rest, uint &pos, char c);
static bool expandExpression(QString &expr, QString *rest, int pos, int level);

static QString stringize(const QString &s)
{
   QString result;
   QChar c;
   QChar pc;

   uint i = 0;
   bool inString = false;
   bool inChar   = false;

   while (i < s.length()) {

      if (! inString && ! inChar) {
         while (i < s.length() && ! inString && ! inChar) {
            c = s.at(i++);

            if (c == '"') {
               result += "\\\"";
               inString = true;
            } else if (c == '\'') {
               result += c;
               inChar = true;
            } else {
               result += c;
            }
         }

      } else if (inChar) {
         while (i < s.length() && inChar) {
            c = s.at(i++);

            if (c == '\'') {
               result += '\'';
               inChar = false;
            } else if (c == '\\') {
               result += "\\\\";
            } else {
               result += c;
            }
         }

      } else {
         pc = 0;

         while (i < s.length() && inString) {
            QChar c2 = s.at(i++);

            if (c2 == '"') {
               result += "\\\"";
               inString = pc == '\\';

            } else if (c2 == '\\') {
               result += "\\\\";

            } else {
               result += c2;
            }

            pc = c2;
         }
      }
   }

   return result;
}

static void processConcatOperators(QString &str)
{
   if (str.isEmpty()) {
      return;
   }

   static QRegularExpression regExp("[ \t\r\n]*##[ \t\r\n]*");
   QRegularExpressionMatch match = regExp.match(str);

   int matchLen;
   int pos;

   while (match.hasMatch()) {

      pos      = match.capturedStart() - str.constBegin();
      matchLen = match.capturedLength();

      if (pos + matchLen + 1 < str.length() && str.at(pos + matchLen) == '@' && str.at(pos + matchLen + 1) == '-') {
         // remove no-rescan marker after ID
         matchLen += 2;
      }

      // remove the ## operator and the surrounding whitespace
      str   = str.left(pos) + str.right(str.length() - pos - matchLen);
      int k = pos - 1;

      while (k >= 0 && isId(str.at(k))) {
         --k;
      }

      if (k > 0 && str.at(k) == '-' && str.at(k - 1) == '@') {
         // remove no-rescan marker before ID
         str  = str.left(k - 1) + str.right(str.length() - k - 1);
         pos -= 2;
      }

      match = regExp.match(str, str.constBegin() + pos);
   }
}

static void yyunput (int c,char *buf_ptr);
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QString &expr, QString *rest, uint &pos, char term, QString &arg)
{
   int cc;

   while ((cc = getNextChar(expr, rest, pos)) != EOF && cc != 0) {
      if (cc == '\\') {
         arg += (char)cc, cc = getNextChar(expr, rest, pos);
      } else if (cc == term) {
         return;
      }
      arg += (char)cc;
   }
}

/*! replaces the function macro def whose argument list starts at pos in expression \a expr.
 * Notice that this routine may scan beyond the expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the
 * length of the (unexpanded) argument list is stored in \a len.
 */
static bool replaceFunctionMacro(const QString &expr, QString *rest, int pos, int &len,
                  QSharedPointer<const A_Define> def, QString &result, int level)
{
   uint j = pos;
   len    = 0;

   result.clear();
   int cc;

   while ((cc = getCurrentChar(expr, rest, j)) != EOF && isspace(cc)) {
      ++len;
      getNextChar(expr, rest, j);
   }

   if (cc != '(') {
      unputChar(expr, rest, j, cc);
      return false;
   }

   // consume the `(' character
   getNextChar(expr, rest, j);

   // list of arguments
   QHash<QString, QString> argTable;

   QString arg;
   int argCount = 0;
   bool done    = false;

   // PHASE 1: read the macro arguments
   if (def->nargs == 0) {
      while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
         char c = (char)cc;

         if (c == ')') {
            break;
         }
      }

   } else {
      while (! done && (argCount < def->nargs || def->varArgs) &&
             ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0)) {

         char c = (char)cc;

         if (c == '(') {
            // argument is a function => search for matching )
            int level = 1;
            arg += c;

            //char term='\0';

            while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               char c = (char)cc;

               if (c == '\'' || c == '\"') {
                  // skip ('s and )'s inside strings
                  arg += c;
                  addTillEndOfString(expr, rest, j, c, arg);
               }

               if (c == ')') {
                  level--;
                  arg += c;
                  if (level == 0) {
                     break;
                  }

               } else if (c == '(') {
                  level++;
                  arg += c;

               } else {
                  arg += c;
               }
            }

         } else if (c == ')' || c == ',') {
            // last or next argument found

            if (c == ',' && argCount == def->nargs - 1 && def->varArgs) {
               arg = arg.trimmed();
               arg += ',';

            } else {

               QString argKey;
               argKey = QString("@%1").formatArg(argCount++);    // key name
               arg    = arg.trimmed();

               // add argument to the lookup table
               argTable.insert(argKey, arg);
               arg.clear();

               if (c == ')') {
                  // end of the argument list
                  done = true;
               }
            }

         } else if (c == '\"') {
            // append literal strings

            arg += c;
            bool found = false;

            while (!found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '"';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;
                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }
               c = (char)cc;
               arg += c;
            }

         } else if (c == '\'') {
            // append literal characters
            arg += c;
            bool found = false;

            while (! found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '\'';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;

                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }

               c = (char)cc;
               arg += c;
            }

         } else if (c == '/') {
            // possible start of a comment

            char prevChar = '\0';
            arg += c;

            cc = getCurrentChar(expr, rest, j);

            if (cc == '*') {
               // we have a comment

               while ((cc = getNextChar(expr,rest,j)) != EOF && cc != 0) {
                  c    = (char)cc;
                  arg += c;

                  if (c == '/' && prevChar == '*')  {
                     // found an end of comment
                     break;
                  }

                  prevChar = c;
               }
            }

         } else {
            // append other characters
            arg += c;
         }
      }
   }

   // PHASE 2: apply the macro function
   if (argCount == def->nargs || // same number of arguments
         (argCount >= def->nargs - 1 && def->varArgs)) {

         // variadic macro with at least as many
         // params as the non-variadic part (see bug731985)

      uint k = 0;

      // substitution of all formal arguments
      QString resExpr;
      const QString d = def->m_definition.trimmed();

      bool inString = false;

      while (k < d.length()) {
         if (d.at(k) == '@') {
            // maybe a marker, otherwise an escaped @

            if (d.at(k + 1) == '@') {
               // escaped @ => copy it (is unescaped later)

               k += 2;
               resExpr += "@@"; // we unescape these later

            } else if (d.at(k + 1) == '-') {
               // no-rescan marker
               k += 2;
               resExpr += "@-";

            } else {
               // argument marker, read the argument number
               QString key = "@";

               bool hash = false;
               int len2  = k - 1;

               // search for ## backward
               if (len2 >= 0 && d.at(len2) == '\"') {
                  len2--;
               }

               while (len2 >= 0 && d.at(len2) == ' ') {
                  len2--;
               }

               if (len2 > 0 && d.at(len2) == '#' && d.at(len2 - 1) == '#') {
                  hash = true;
               }

               k++;

               // scan the number
               while (k < d.length() && d.at(k) >= '0' && d.at(k) <= '9') {
                  key += d.at(k++);
               }

               if (! hash) {
                  // search for ## forward
                  len2 = k;

                  if (len2 < d.length() && d.at(len2) == '\"') {
                     len2++;
                  }

                  while (len2 < d.length() && d.at(len2) == ' ') {
                     len2++;
                  }

                  if (len2 < d.length() - 1 && d.at(len2) == '#' && d.at(len2 + 1) == '#') {
                     hash = true;
                  }
               }

               if (key.length() > 1 && argTable.contains(key)) {
                  QString substArg = argTable.value(key);

                  // only if no ## operator is before or after the argument marker, then do macro expansion
                  if (! hash) {
                     expandExpression(substArg, nullptr, 0, level + 1);
                  }

                  if (inString) {
                     // if the marker is inside a string (because a # was put
                     // before the macro name), escape " and \ characters
                     resExpr += stringize(substArg);

                  } else {
                     if (hash && substArg.isEmpty()) {
                        // empty argument will be remove later on
                        resExpr += "@E";

                     } else if (s_nospaces) {
                        resExpr += substArg;

                     } else {
                        resExpr += " " + substArg + " ";
                     }
                  }
               }
            }

         } else {
            // no marker, just copy

            if (! inString && d.at(k) == '\"') {
               inString = true; // entering a literal string

            } else if (inString && d.at(k) == '\"' && (d.at(k - 1) != '\\' || d.at(k - 2) == '\\')) {
               inString = false; // leaving a literal string
            }
            resExpr += d.at(k++);
         }
      }

      len    = j - pos;
      result = resExpr;

      return true;
   }

   return false;
}

/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QString &expr, int p, int *l)
{
   int n;

   while (p < expr.length()) {
      QChar c = expr.at(p++);

      if (c.isNumber()) {
         // skip number
         while (p < expr.length() && isId(expr.at(p))) {
            p++;
         }

      } else if (c.isLetter() || c == '_') {
         // read id
         n = p - 1;

         while (p < expr.length() && isId(expr.at(p))) {
            p++;
         }

         *l = p - n;
         return n;

      } else if (c == '"') {
         // skip string

         QChar ppc = 0;
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);
         }

         while (p < expr.length() && (c != '"' || (pc == '\\' && ppc != '\\')))
            // continue as long as no " is found, but ignoring \", but not \\"
         {
            ppc = pc;
            pc = c;
            c = expr.at(p);
            p++;
         }

         if (p < expr.length()) {
            ++p;   // skip closing quote
         }

      } else if (c == '/') { // skip C Comment
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);

            if (c == '*') { // Start of C comment
               p++;

               while (p < expr.length() && !(pc == '*' && c == '/')) {
                  pc = c;
                  c = expr.at(p++);
               }
            }
         }

      }
   }

   return -1;
}

/*! preforms recursive macro expansion on the string expr starting at position pos.
 *  May read additional characters from the input while re-scanning
 *  If expandAll is true then all macros in the expression are expanded, otherwise only the first is expanded
 */
static bool expandExpression(QString &expr, QString *rest, int pos, int level)
{

   if (expr.isEmpty()) {
     return true;
   }

   if (s_expansionDict.contains(expr) && level > MAX_EXPANSION_DEPTH) {
      // check for too deep recursive expansions
      return false;

   } else {
      s_expansionDict.insert(expr);
   }

   QString macroName;
   QString expMacro;

   bool definedTest = false;
   int i = pos;
   int tmpLen;
   int p;
   int len;

   int startPos     = pos;
   int samePosCount = 0;

   while ((p = getNextId(expr, i, &tmpLen)) != -1) {
      // search for an macro name

      bool replaced = false;
      macroName = expr.mid(p, tmpLen);

      if (p < 2 || ! (expr.at(p - 2) == '@' && expr.at(p - 1) == '-')) {
         // no-rescan marker?

         if (! s_expandedDict->contains(macroName)) {

            // expand macro
            QSharedPointer<A_Define> def = DefineManager::instance().isDefined(macroName);

            if (macroName == "defined") {
               definedTest = true;

            } else if (definedTest) {
               // macro name was found after defined

               if (def) {
                  expMacro = " 1 ";
               } else {
                  expMacro = " 0 ";
               }

               replaced    = true;
               len         = tmpLen;
               definedTest = false;

            } else if (def && def->nargs == -1) {
               // simple macro
               // substitute the definition of the macro

               if (s_nospaces) {
                  expMacro = def->m_definition.trimmed();
               } else {
                  expMacro = " " + def->m_definition.trimmed() + " ";
               }

               replaced = true;
               len = tmpLen;

            } else if (def && def->nargs >= 0) {
               // function macro
               replaced = replaceFunctionMacro(expr, rest, p + tmpLen, len, def, expMacro, level);
               len += tmpLen;
            }

            if (replaced) {
               // expand the macro and rescan the expression

               QString resultExpr = expMacro;
               QString restExpr   = expr.right(expr.length() - len - p);

               processConcatOperators(resultExpr);

               bool isExpanded = false;

               if (def && ! def->nonRecursive) {
                  s_expandedDict->insert(macroName, def);
                  isExpanded = expandExpression(resultExpr, &restExpr, 0, level + 1);
                  s_expandedDict->remove(macroName);
               } else if (def && def->nonRecursive) {
                  isExpanded = true;

               }
               if (isExpanded) {
                  expr = expr.left(p) + resultExpr + restExpr;
                  i    = p;

                } else {
                   expr = expr.left(p) + "@-" + expr.right(expr.length()-p);
                   i    = p + tmpLen + 2;
                }

            } else {
               // move to the next macro name
               i = p + tmpLen;
            }

         } else {
            // move to the next macro name
            expr = expr.left(p) + "@-" + expr.right(expr.length() - p);
            i = p + tmpLen + 2;

         }

         // check for too many inplace expansions without making progress
         if (i == startPos) {
           samePosCount++;

         } else {
           startPos     = i;
           samePosCount = 0;
         }

         if (samePosCount > MAX_EXPANSION_DEPTH) {
           break;
         }

      } else {
         // no re-scan marker found, skip the macro name
         i = p + tmpLen;
      }
   }
  return true;
}

//  inputStr should point to the start of a string or character literal.
// the routine will return a pointer to just after the end of the literal
// the character making up the literal will be added to \a result.

QString::const_iterator processUntilMatch(QString::const_iterator iter_start, QString::const_iterator iter_end,
                  QString &result)
{
   if (iter_start == iter_end) {
      return iter_start;
   }

   // capture start character
   QChar term = *iter_start;

   if (term != '\'' && term != '"') {
      // not a valid literal
      return iter_start;
   }

   QChar ch = term;

   // output start character
   result += ch;
   ++iter_start;

   while (iter_start != iter_end) {
      ch = *iter_start;

      if (ch == term) {
         // found end marker of the literal, output end character and stop

         result += ch;
         ++iter_start;
         break;

      } else if (ch == '\\')  {
         // escaped character, process next character
         // as well without checking for end marker

         result += ch;
         ++iter_start;

         if (iter_start == iter_end) {
            // unexpected end of string after escape character
            break;
         }

         ch = *iter_start;
      }

      result += ch;
      ++iter_start;
   }

   return iter_start;
}

/*! replaces all occurrences of @@@@ in s by @@
 *  and removes all occurrences of @@E
 *  All identifiers found are replaced by 0L
 */
QString removeIdsAndMarkers(const QString &s)
{
   QString::const_iterator iter     = s.constBegin();
   QString::const_iterator iter_end = s.constEnd();

   QString result;

   bool inNum = false;

   while (iter != iter_end) {
      QChar c = *iter;

      // replace @@ with @ and remove @E
      if (c == '@') {

         if (*(iter + 1) == '@') {
            result += c;

         } else if (*(iter + 1) == 'E') {
            // skip
         }

         iter += 2;

      } else if (c.isNumber()) {
         // number

         result += c;
         inNum = true;

         ++iter;

      } else if (c == '\'') {
         iter = processUntilMatch(iter, iter_end, result);

      } else if (c == 'd' && ! inNum) {
         // identifier starting with a `d'

         QStringView tmp = QStringView(iter, iter_end);

         if (tmp.startsWith("defined ") || tmp.startsWith("defined(")) {
            // defined keyword, skip defined
            iter += 7;

         } else {
            result += "0L";
            ++iter;

            while (iter != iter_end) {
               c = *iter;

               if (isId(c)) {
                  ++iter;

               } else {
                  break;
               }
            }
         }

      } else if ((c.isLetter() || c == '_') && ! inNum) {
         // replace identifier with 0L
         result += "0L";
         ++iter;

         while (iter != iter_end) {
            c = *iter;

            if (isId(c)) {
               ++iter;

            } else {
               break;
            }
         }

         while (iter != iter_end) {
            c = *iter;

            if (c.isSpace()) {
               ++iter;

            } else {
               break;
            }
         }

         if (*iter == '(') {
            // undefined function macro
            ++iter;

            int count = 1;

            while (iter != iter_end) {
               c = *iter;
               ++iter;

               if (c == '(') {
                  count++;

               } else if (c == ')') {
                  count--;

                  if (count == 0) {
                     break;
                  }

               } else if (c == '/') {
                  QChar pc = c;

                  ++iter;
                  c = *iter;

                  if (c == '*') {
                     // start of C comment

                     while (iter != iter_end && ! (pc == '*' && c == '/')) {
                        // search end of comment
                        pc = c;

                        ++iter;
                        c = *iter;
                     }

                     ++iter;
                  }
               }
            }
         }

      } else if (c == '/') {
         // skip C comments
         QChar pc = c;

         ++iter;
         c = *iter;

         if (c == '*') {
            // start of C comment

            while (iter != iter_end && ! (pc == '*' && c == '/')) {
               // search end of comment
               pc = c;

               ++iter;
               c = *iter;
            }

            ++iter;

         } else {
            // not comment but division
            result += pc;
            result += c;

            QChar lc = c.toLower()[0];

            if (! isId(lc) && lc != '.') {
               inNum = false;
            }

            ++iter;
         }

      } else {
         result += c;
         QChar lc = c.toLower()[0];

         if (! isId(lc) && lc != '.') {
            inNum = false;
         }

         ++iter;
      }
   }

   return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption:
 *   \a s only contains pairs of @@'s
 */
QString removeMarkers(const QString &s)
{
   QString::const_iterator iter     = s.constBegin();
   QString::const_iterator iter_end = s.constEnd();
   QString result;

   while (iter != iter_end) {
      QChar c = *iter;

      switch (c.unicode()) {

         case '@': {
            // replace @@ with @

            if (iter + 1 != iter_end && iter[1] ==  '@') {
               result += c;
               ++iter;
            }

            ++iter;
         }
         break;

         case '/': {
            // skip C comments
            result  += c;

            QChar pc = c;
            ++iter;

            if (iter != s.constEnd()) {
               c = *iter;
            }

            if (c == '*') {
               // start of C comment

               while (iter != iter_end  && ! (pc == '*' && c == '/')) {
                  // search end of comment

                  if (*iter == '@' &&  (iter + 1 != iter_end && iter[1] == '@')) {
                     result += c;
                     ++iter;

                  } else {
                     result += c;
                  }

                  pc = c;
                  ++iter;

                  if (iter != iter_end) {
                     c = *iter;
                  }
               }

               if (iter != iter_end) {
                  result += c;
                  ++iter;
               }
            }
         }
         break;

         case '"':
         case '\'':
            // skip string literals and char literals

            iter = processUntilMatch(iter, iter_end, result);
            break;

         default: {
            result += c;
            ++iter;
         }
         break;
      }
   }

   return result;
}

/*! compute the value of the expression in string expr.
 *  If needed the function may read additional characters from the input.
 */
bool computeExpression(const QString &expr)
{
   QString e = expr;

   s_expansionDict.clear();
   expandExpression(e, nullptr, 0, 0);

   e = removeIdsAndMarkers(e);

   if (e.isEmpty()) {
      return false;
   }

   bool retval = parseconstexp(s_yyFileName, s_yyLineNr, e);

   return retval;
}

/*! expands the macro definition in name
 *  If needed the function may read additional characters from the input
 */

QString expandMacro(const QString &name)
{
   QString n = name;

   s_expansionDict.clear();
   expandExpression(n, nullptr, 0, 0);

   n = removeMarkers(n);

   return n;
}

QSharedPointer<A_Define> newDefine()
{
   QSharedPointer<A_Define> def = QMakeShared<A_Define>();

   def->m_name       = s_defName;
   def->m_definition = s_defText.trimmed();
   def->nargs        = s_defArgs;
   def->m_fileName   = s_yyFileName;
   def->fileDef      = s_yyFileDef;
   def->lineNr       = s_yyLineNr - s_yyMLines;
   def->columnNr     = s_yyColNr;
   def->varArgs      = s_defVarArgs;

   if (! def->m_name.isEmpty() && Doxy_Globals::expandAsDefinedDict.contains(def->m_name)) {
      def->isPredefined = true;
   }

   return def;
}

static void addDefine()
{
   if (s_skip) {
      // do not add this define as it is inside a
      // conditional section (cond command) that is disabled

      return;
   }

   QSharedPointer<MemberDef> md = QMakeShared<MemberDef>(s_yyFileName, s_yyLineNr - s_yyMLines, s_yyColNr,
               "#define", s_defName, s_defArgsStr, "", Protection::Public, Specifier::Normal, false,
               Relationship::Member, MemberDefType::Define, ArgumentList(), ArgumentList());

   if (! s_defArgsStr.isEmpty()) {
      ArgumentList argList;

      argList = stringToArgumentList(s_defArgsStr);
      md->setArgumentList(argList);
   }

   int len = s_defLitText.indexOf('\n');

   if (len > 0 && s_defLitText.left(len).trimmed() == "\\") {
      // strip first line if it only contains a slash
      s_defLitText = s_defLitText.right(s_defLitText.length() - len - 1);

   } else if (len > 0) {
      // align the items on the first line with the items on the second line
      int k = len + 1;

      QString::const_iterator iter = s_defLitText.constBegin() + k;

      while (iter !=  s_defLitText.constEnd())  {
         QChar c = *iter;
         ++iter;

         if (c == ' ' || c == '\t') {
            ++k;

         } else {
            break;

         }
      }

      s_defLitText = s_defLitText.mid(len + 1, k - len - 1) + s_defLitText.trimmed();
   }

   md->setInitializer(s_defLitText.trimmed());
   md->setFileDef(s_inputFileDef);
   md->setDefinition("#define " + s_defName);

   QSharedPointer<MemberName> mn = Doxy_Globals::functionNameSDict.find(s_defName);

   if (! mn) {
      mn = QMakeShared<MemberName>(s_defName);
      Doxy_Globals::functionNameSDict.insert(s_defName, mn);
   }

   mn->append(md);

   if (s_yyFileDef) {
      s_yyFileDef->insertMember(md);
   }
}

static inline void outputChar(QChar c)
{
   if (s_includeStack.isEmpty() || s_curlyCount > 0) {
      s_outputString += c;
   }
}

static inline void outputArray(const QString &a, int len)
{
   if (s_includeStack.isEmpty() || s_curlyCount > 0) {
      s_outputString += a.mid(0, len);
   }
}

static void readIncludeFile(const QString &inc)
{
   static bool searchIncludes = Config::getBool("search-includes");
   uint i = 0;

   // find the start of the include file name
   while (i < inc.length() && (inc.at(i) == ' ' || inc.at(i) == '"' || inc.at(i) == '<')) {
      i++;
   }
   uint s = i;

   // was it a local include?
   bool localInclude = s > 0 && inc.at(s - 1) == '"';

   // find the end of the include file name
   while (i < inc.length() && inc.at(i) != '"' && inc.at(i) != '>') {
      i++;
   }

   if (s < inc.length() && i > s) {
      // valid include file name found

      // extract include path+name
      QString incFileName = inc.mid(s, i - s).trimmed();
      QString dosExt      = incFileName.right(4);

      if (dosExt == ".exe" || dosExt == ".dll" || dosExt == ".tlb") {
         // skip imported binary files (e.g. M$ type libraries)
         return;
      }

      QString oldFileName = s_yyFileName;

      QSharedPointer<FileDef> oldFileDef = s_yyFileDef;
      int oldLineNr = s_yyLineNr;

      // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
      QString absIncFileName = incFileName;
      {
         QFileInfo fi(s_yyFileName);

         if (fi.exists()) {
            QString absName = fi.absolutePath() + "/" + incFileName;

            QFileInfo fi2(absName);
            if (fi2.exists()) {
               absIncFileName = fi2.absoluteFilePath();

            } else if (searchIncludes) {
               const QStringList includePath = Config::getList("include-path");

               for (auto s : includePath) {

                  QFileInfo fi(s);

                  if (fi.exists() && fi.isDir()) {
                     QString absName = fi.absoluteFilePath() + "/" + incFileName;

                     QFileInfo fi2(absName);
                     if (fi2.exists()) {
                        absIncFileName = fi2.absoluteFilePath();
                        break;
                     }

                  }

               }
            }

         }
      }

      DefineManager::instance().addInclude(s_yyFileName, absIncFileName);
      DefineManager::instance().addFileToContext(absIncFileName);

      // findFile will overwrite s_yyFileDef if found
      QSharedPointer<FileState> fs;
      bool alreadyIncluded = false;

      if ((fs = findFile(incFileName, localInclude, alreadyIncluded))) {
         // see if the include file can be found

         if (oldFileDef) {
            // add include dependency to the file in which the #include was found
            bool ambig;

            // change to absolute name
            QSharedPointer<FileDef> incFd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            QSharedPointer<FileDef> temp;
            if (ambig) {
               temp = QSharedPointer<FileDef>();
            } else {
               temp = incFd;
            }

            oldFileDef->addIncludeDependency(temp, incFileName, localInclude, s_isImported, false);

            // add included by dependency
            if (s_yyFileDef) {
               s_yyFileDef->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, s_isImported);
            }

         } else if (s_inputFileDef) {
            s_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, s_isImported, true);

         }

         fs->bufState   = YY_CURRENT_BUFFER;
         fs->lineNr     = oldLineNr;
         fs->fileName   = oldFileName;
         fs->curlyCount = s_curlyCount;

         s_curlyCount   = 0;

         // push the state on the stack
         s_includeStack.push(fs);

         // set the scanner to the include file

         // Deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# 1 \"%1\" 1\n").formatArg(QString(s_yyFileName));
         outputArray(lineStr, lineStr.length());

         DBG_CTX((stderr, "Switching to include file %s\n", csPrintable(incFileName)));
         s_expectGuard = true;
         s_inputString    = fs->fileBuf;
         s_inputPosition = 0;

         preYY_switch_to_buffer(preYY_create_buffer(0, YY_BUF_SIZE));

      } else {

         if (oldFileDef) {
            bool ambig;

            // change to absolute name for bug 641336
            QSharedPointer<FileDef> fd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            // add include dependency to the file in which the #include was found
            oldFileDef->addIncludeDependency(ambig ? QSharedPointer<FileDef>() : fd, incFileName, localInclude, s_isImported, false);

            // add included by dependency
            if (fd) {
               fd->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, s_isImported);
            }

         } else if (s_inputFileDef) {
            s_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, s_isImported, true);
         }

         if (Debug::isFlagSet(Debug::Preprocessor)) {
            if (alreadyIncluded) {
               Debug::print(Debug::Preprocessor, 0, "#include %s: already included, skipping...\n", csPrintable(incFileName));
            } else {
               Debug::print(Debug::Preprocessor, 0, "#include %s: not found, skipping...\n", csPrintable(incFileName));
            }
         }

         if (s_curlyCount > 0 && !alreadyIncluded) { // failed to find #include inside { ... }
            warn(s_yyFileName, s_yyLineNr, "include file %s was not found, check the value of INCLUDE_PATH", csPrintable(incFileName));
         }
      }
   }
}

static void startCondSection(const QString &sectId)
{
   CondParser prs;

   bool expResult = prs.parse(s_yyFileName, s_yyLineNr, sectId);
   s_condStack.push( QMakeShared<CondCtx>(s_yyLineNr, sectId, s_skip) );

   if (! expResult) {
      s_skip = true;
   }
}

static void endCondSection()
{
   if (s_condStack.isEmpty()) {
      s_skip = false;

   } else {
      QSharedPointer<CondCtx> ctx = s_condStack.pop();
      s_skip = ctx->skip;
   }
}

static void forceEndCondSection()
{
   while (! s_condStack.isEmpty()) {
      s_condStack.pop();
   }

   s_skip = false;
}

static QString escapeAt(const QString &text)
{
   QString result;

   for (auto c : text) {
      if (c == '@') {
         result += "@@";

      } else {
         result += c;
      }
   }

   return result;
}

static char resolveTrigraph(char c)
{
   switch (c) {
      case '=':
         return '#';

      case '/':
         return '\\';

      case '\'':
         return '^';

      case '(':
         return '[';

      case ')':
         return ']';

      case '!':
         return '|';

      case '<':
         return '{';

      case '>':
         return '}';

      case '-':
         return '~';
   }

   return '?';
}

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size)   result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

#define YY_NO_UNISTD_H 1

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define CopyStringCs 8
#define CopyStringFtn 9
#define Include 10
#define IncludeID 11
#define EndImport 12
#define DefName 13
#define DefineArg 14
#define DefineText 15
#define SkipCPPBlock 16
#define Ifdef 17
#define Ifndef 18
#define SkipCComment 19
#define ArgCopyCComment 20
#define CopyCComment 21
#define SkipVerbatim 22
#define SkipCPPComment 23
#define RemoveCComment 24
#define RemoveCPPComment 25
#define Guard 26
#define DefinedExpr1 27
#define DefinedExpr2 28
#define SkipDoubleQuote 29
#define SkipSingleQuote 30
#define UndefName 31
#define IgnoreLine 32
#define FindDefineArgs 33
#define ReadString 34
#define CondLineC 35
#define CondLineCpp 36
#define SkipCond 37

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

int preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( preYYtext, preYYleng, 1, preYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1447 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1446 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP

	YY_BREAK
case 2:
YY_RULE_SETUP

	YY_BREAK
case 3:
YY_RULE_SETUP

	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // Trigraph
      unput(resolveTrigraph(preYYtext[2]));
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      BEGIN(Command);
      s_yyColNr  += preYYleng;
      s_yyMLines = 0;
   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
      BEGIN(CopyLine);
   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
      // constructors?
      int i;

      for (i = preYYleng - 1; i >= 0; i--) {
         unput(preYYtext[i]);
      }

      BEGIN(CopyLine);
   }
	YY_BREAK
case 8:
/* rule 8 can match eol */
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{

      // function list macro with one (...) argument, e.g. for K_GLOBAL_STATIC_WITH_ARGS
      // function like macro

      static bool skipFuncMacros = Config::getBool("skip-function-macros");

      QString name = QString::fromUtf8(preYYtext);
      name = name.left(name.indexOf('(')).trimmed();

      QSharedPointer<A_Define> def;

      if (skipFuncMacros && name != "Q_PROPERTY" && ! ( (s_includeStack.isEmpty() || s_curlyCount > 0) && s_macroExpansion &&
                  (def = DefineManager::instance().isDefined(name)) && (! s_expandOnlyPredef || def->isPredefined)) ) {

         outputChar('\n');
         s_yyLineNr++;

      } else {
         // do not skip

         for (int i = preYYleng - 1; i >= 0; i--) {
            unput(preYYtext[i]);
         }

         BEGIN(CopyLine);
      }
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_yyLineNr += text.count('\n');
      outputArray(text, text.length());
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (s_includeStack.isEmpty())  {
         s_curlyCount++;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (s_includeStack.isEmpty() && s_curlyCount > 0)  {
         s_curlyCount--;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_CSharp) {
         REJECT;
      }

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      BEGIN( CopyStringCs );
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyString );
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);

      BEGIN( CopyStringFtn );
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_expectGuard = false;
      QSharedPointer<A_Define> def;

      if ((s_includeStack.isEmpty() || s_curlyCount > 0) && s_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                  (! s_expandOnlyPredef || def->isPredefined)) {

         // found it
         s_roundCount = 0;
         s_defArgsStr = text;

         if (def->nargs == -1) {
            // no function macro

            QString result = def->isPredefined ? def->m_definition : expandMacro(s_defArgsStr);
            outputArray(result, result.length());

         } else {
            // zero or more arguments

            s_findDefArgContext = CopyLine;
            BEGIN(FindDefineArgs);

         }

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((s_includeStack.isEmpty() || s_curlyCount > 0) && s_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                   def->nargs == -1 && (! s_expandOnlyPredef || def->isPredefined)) {

            QString result = def->isPredefined ? def->m_definition : expandMacro(text);
            outputArray(result, result.length());

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      //  strip line continuation characters
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
   }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      s_yyLineNr++;
      s_yyColNr = 1;
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      s_defArgsStr += '(';
      s_roundCount++;
   }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
      s_defArgsStr += ')';
      s_roundCount--;

      if (s_roundCount == 0) {
         QString result = expandMacro(s_defArgsStr);

         if (s_findDefArgContext == CopyLine) {
            outputArray(result, result.length());
            BEGIN(s_findDefArgContext);

         } else {
            readIncludeFile(result);
            s_nospaces = false;
            BEGIN(Start);
         }
      }
   }
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("       {
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
   }
  */
case 33:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
    }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
      BEGIN(ArgCopyCComment);
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
      BEGIN(ReadString);
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      s_defArgsStr += text[0];
      BEGIN(ReadString);
   }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
{
      s_defArgsStr += ' ';
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      s_defArgsStr += "@@";
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{
      s_defArgsStr += ' ';
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      s_defArgsStr += text[0];
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // continue line
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_isImported = text[1] == 'm';

      if (s_macroExpansion) {
         BEGIN(IncludeID);
      }
   }
	YY_BREAK
case 51:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_isImported = text[1] == 'm';
      s_incName = text[text.length() - 1];
      BEGIN(Include);
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      s_yyColNr += preYYleng;
      BEGIN(DefName);
   }
	YY_BREAK
case 53:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr.resize(0);
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 54:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr.resize(0);
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 55:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr = "! ";
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 56:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr = "! ";
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 57:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr.resize(0);
      BEGIN(Guard);
   }
	YY_BREAK
case 58:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         s_guardExpr.resize(0);
         BEGIN(Guard);

      } else {
         s_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 59:
/* rule 59 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      if (otherCaseDone()) {
         s_ifcount = 0;
         BEGIN(SkipCPPBlock);

      } else {
         setCaseDone(true);
      }
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
      BEGIN(UndefName);
   }
	YY_BREAK
case 61:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         s_guardExpr.resize(0);
         BEGIN(Guard);
      }
   }
	YY_BREAK
case 62:
/* rule 62 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      decrLevel();
   }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      s_yyLineNr++;
   }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
      s_expectGuard = false;
   }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(IgnoreLine);
   }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
   }
	YY_BREAK
case 67:
YY_RULE_SETUP

	YY_BREAK
case 68:
YY_RULE_SETUP
{
      s_yyColNr += preYYleng;
   }
	YY_BREAK
case 69:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((def = DefineManager::instance().isDefined(text)) && ! def->nonRecursive) {
         def->undef = true;
      }
      BEGIN(Start);
   }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_guardExpr += ' ';
      ++s_yyLineNr;
   }
	YY_BREAK
case 71:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 72:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 74:
YY_RULE_SETUP
{
      s_guardExpr += "@@";
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_guardExpr += text[0];
   }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
      unput(*preYYtext);

      bool guard = computeExpression(s_guardExpr);
      setCaseDone(guard);

      if (guard) {
         BEGIN(Start);

      } else {
         s_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 78:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || s_guardName == text) {
         s_guardExpr+=" 1L ";
      } else {
         s_guardExpr+=" 0L ";
      }

      s_lastGuardName = text;
      BEGIN(Guard);
   }
	YY_BREAK
case 79:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || s_guardName == text){
         s_guardExpr+=" 1L ";
      } else {
         s_guardExpr+=" 0L ";
      }

      s_lastGuardName = text;
   }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
      // should not happen, handle anyway

      s_yyLineNr++;
      s_ifcount = 0;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 81:
YY_RULE_SETUP
{
      BEGIN(Guard);
   }
	YY_BREAK
case 82:
YY_RULE_SETUP

	YY_BREAK
case 83:
YY_RULE_SETUP
{
      BEGIN(SkipCommand);
   }
	YY_BREAK
case 84:
/* rule 84 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 86:
YY_RULE_SETUP

	YY_BREAK
case 87:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_ifcount++;
   }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      if (s_ifcount == 0 && ! otherCaseDone()) {
         setCaseDone(true);
         BEGIN(Start);
      }
   }
	YY_BREAK
case 89:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (s_ifcount == 0)  {

         if (! otherCaseDone()) {
            s_guardExpr.resize(0);
            s_lastGuardName.resize(0);
            BEGIN(Guard);

         } else {
            BEGIN(SkipCPPBlock);
         }
      }
   }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      s_expectGuard = false;
      decrLevel();

      if (--s_ifcount < 0) {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(SkipLine);
   }
	YY_BREAK
case 93:
YY_RULE_SETUP

	YY_BREAK
case 94:
YY_RULE_SETUP

	YY_BREAK
case 95:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
      BEGIN(SkipString);
   }
	YY_BREAK
case 97:
YY_RULE_SETUP

	YY_BREAK
case 98:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
   }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
      s_lastCPPContext = YY_START;
      BEGIN(RemoveCPPComment);
   }
	YY_BREAK
case 100:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
   }
	YY_BREAK
case 101:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      s_lastCContext=YY_START;
      BEGIN(RemoveCComment);
   }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 107:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_nospaces   = true;
      s_roundCount = 0;
      s_defArgsStr = text;
      s_findDefArgContext = IncludeID;
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_nospaces = true;
      readIncludeFile(expandMacro(text));
      BEGIN(Start);
   }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_incName += text;
      readIncludeFile(s_incName);

      if (s_isImported) {
         BEGIN(EndImport);
      } else {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 110:
/* rule 110 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(Start);
   }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
   }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{
      // define with argument

      s_argDict = QMakeShared<QHash<QString, int>>();

      s_defArgs = 0;
      s_defArgsStr.resize(0);
      s_defText.resize(0);
      s_defLitText.resize(0);

      s_defName    = QString::fromUtf8(preYYtext);
      s_defVarArgs = false;
      s_defExtraSpacing.resize(0);
      BEGIN(DefineArg);
   }
	YY_BREAK
case 114:
/* rule 114 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // special case: define with 1 -> can be "guard"

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_defArgs = -1;
      s_defArgsStr.resize(0);

      s_defName = QString::fromUtf8(preYYtext);
      s_defName = s_defName.left(s_defName.length() - 1).trimmed();
      s_defVarArgs = false;

      if (s_curlyCount > 0 || s_defName != s_lastGuardName || ! s_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + s_defName;
         outputArray(tmp, tmp.length());

         s_quoteArg      = false;
         s_insideComment = false;
         s_lastGuardName.resize(0);
         s_defText    = "1";
         s_defLitText = "1";
         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         s_defText.resize(0);
         s_defLitText.resize(0);
         BEGIN(Start);
      }

      s_expectGuard = false;
   }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{
      // empty define
      QString text = QString::fromUtf8(preYYtext);

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_defArgs = -1;
      s_defName = text;

      s_defArgsStr.resize(0);
      s_defText.resize(0);
      s_defLitText.resize(0);
      s_defVarArgs = false;

      if (s_curlyCount > 0 || s_defName != s_lastGuardName || ! s_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + s_defName;
         outputArray(tmp, tmp.length());

         s_quoteArg      = false;
         s_insideComment = false;

         if (s_insideCS) {
            s_defText="1"; // for C#, use "1" as define text
         }

         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         s_guardName = text;
         s_lastGuardName.resize(0);
         BEGIN(Start);
      }

      s_expectGuard = false;
   }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
      // define with content
      QString text = QString::fromUtf8(preYYtext);

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_defArgs = -1;
      s_defArgsStr.resize(0);

      s_defText.resize(0);
      s_defLitText.resize(0);
      s_defName    = text;
      s_defVarArgs = false;

      QString tmp = "#define " + s_defName + s_defArgsStr;
      outputArray(tmp, tmp.length());

      s_quoteArg      = false;
      s_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{
      s_defExtraSpacing += "\n";
      s_yyLineNr++;
   }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;

      QString tmp = "#define " + s_defName + s_defArgsStr + s_defExtraSpacing;
      outputArray(tmp, tmp.length());

      s_quoteArg      = false;
      s_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
      // Variadic macro
      s_defVarArgs = true;
      s_defArgsStr +=  QString::fromUtf8(preYYtext);

      s_argDict->insert("__VA_ARGS__", s_defArgs);
      s_defArgs++;
   }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;

      s_defVarArgs = text.endsWith("...");

      if (s_defVarArgs)  {
         // strip ellipsis
         text = text.left(text.length() - 3);
      }

      text = text.trimmed();

      s_argDict->insert(text, s_defArgs);
      s_defArgs++;
   }
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"  {
      s_defText+=preYYtext;
      s_defLitText+=preYYtext;
      s_insideComment=true;
   }

<DefineText>"* /"          {
      s_defText+=preYYtext;
      s_defLitText+=preYYtext;
      s_insideComment=false;
   }
  */
case 123:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
       QString text = QString::fromUtf8(preYYtext);

      s_defText   += text;
      s_defLitText+= text;
      s_lastCContext = YY_START;
      s_commentCount = 1;
      BEGIN(CopyCComment);
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      s_lastCPPContext  = YY_START;
      s_defLitText     += ' ';
      BEGIN(SkipCPPComment);
   }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (text[0] == '/') {
         outputChar('/');
      }

      outputChar('*');
      outputChar('/');

      if (--s_commentCount <= 0) {

         if (s_lastCContext == Start) {
            // small hack to make sure that ^... rule will
            // match when going to Start... Example: "/*...*/ some stuff..."

            YY_CURRENT_BUFFER->yy_at_bol = 1;
         }

         BEGIN(s_lastCContext);
      }
   }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');

      // s_commentCount++;
   }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());
      s_yyLineNr += text.count('\n');
   }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());

      s_yyLineNr += text.count('\n');
      s_fenceSize = 0;

      if (text[1] == 'f') {
         s_blockName = "f";

      } else {
         QString bn = text.mid(1);
         int i = bn.indexOf('{');

         // for \code{.c}
         if (i != -1) {
            bn = bn.left(i);
         }

         s_blockName = bn.trimmed();
      }
      BEGIN(SkipVerbatim);
   }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
      // escaped @cond
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
      // conditional section
      s_ccomment = true;
      s_condCtx  = YY_START;
      BEGIN(CondLineCpp);
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
      // conditional section
      s_ccomment = false;
      s_condCtx  = YY_START;
      BEGIN(CondLineC);
   }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      startCondSection(text);

      if (s_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/", 2);
            s_ccomment = true;

         } else {
            s_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(s_condCtx);

      }
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
      // non-guard character
      unput(*preYYtext);
      startCondSection(" ");

      if (s_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/",2);
            s_ccomment = true;

         } else {
            s_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(s_condCtx);
      }
   }
	YY_BREAK
case 138:
/* rule 138 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // no guard
      if (YY_START == SkipCComment) {
         s_ccomment=true;
         // end C comment
         outputArray("*/",2);

      } else {
         s_ccomment = false;
      }

      s_condCtx = YY_START;
      startCondSection(" ");
      BEGIN(SkipCond);
   }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
{
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
      s_ccomment = false;
   }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      s_ccomment = true;
   }
	YY_BREAK
case 144:
/* rule 144 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! s_skip) {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 145:
/* rule 145 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      bool oldSkip = s_skip;
      endCondSection();

      if (oldSkip && ! s_skip) {
         if (s_ccomment) {
            outputArray("/** ",4);

            // */ (editor syntax fix)
         }

         BEGIN(s_condCtx);
      }
   }
	YY_BREAK
case 146:
/* rule 146 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      bool oldSkip = s_skip;
      endCondSection();

      if (oldSkip && ! s_skip)  {
         BEGIN(s_condCtx);
      }
   }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
      /* end of verbatim block */

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (text[1] == 'f' && s_blockName == "f") {
         BEGIN(SkipCComment);

      } else if (text.mid(4) == s_blockName) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (s_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (s_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 150:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
{
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 153:
YY_RULE_SETUP
{
      outputChar(*preYYtext);
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      s_defText    += escapeAt(text);
   }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defLitText += text;

      s_defText += " ";
      s_yyLineNr++;
      s_yyMLines++;
   }
	YY_BREAK
case 156:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      s_defText    += text;
      BEGIN(s_lastCContext);
   }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_yyLineNr++;

      s_defLitText += text;
      s_defText+=' ';
   }
	YY_BREAK
case 158:
YY_RULE_SETUP
{
      // see bug 594021 for a usecase for this rule
      if (s_lastCContext == SkipCPPBlock) {
         BEGIN(SkipCommand);

      } else {
         REJECT;
      }
   }
	YY_BREAK
case 159:
YY_RULE_SETUP
{
      BEGIN(s_lastCContext);
   }
	YY_BREAK
case 160:
YY_RULE_SETUP

	YY_BREAK
case 161:
YY_RULE_SETUP

	YY_BREAK
case 162:
YY_RULE_SETUP

	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 164:
YY_RULE_SETUP

	YY_BREAK
case 165:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
{
      unput(*preYYtext);
      BEGIN(s_lastCPPContext);
   }
	YY_BREAK
case 167:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');
   }
	YY_BREAK
case 168:
YY_RULE_SETUP
{
      outputChar('/');
      outputChar('/');
   }
	YY_BREAK
case 169:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 170:
YY_RULE_SETUP
{
      outputChar(*preYYtext);
   }
	YY_BREAK
case 171:
YY_RULE_SETUP

	YY_BREAK
case 172:
YY_RULE_SETUP

	YY_BREAK
case 173:
YY_RULE_SETUP

	YY_BREAK
case 174:
YY_RULE_SETUP

	YY_BREAK
case 175:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      s_quoteArg   = true;
      s_defLitText += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defLitText += text;

      if (s_quoteArg) {
         s_defText+="\"";
      }

      if (s_defArgs > 0) {
         auto iter = s_argDict->find(text);

         if (iter != s_argDict->end()) {
            int n = iter.value();

            s_defText += '@';

            QString numStr = QString("%1").formatArg(n);
            s_defText += numStr;

         } else {
            s_defText += text;

         }

      } else {
         s_defText += text;
      }

      if (s_quoteArg) {
         s_defText += "\"";
      }

      s_quoteArg = false;
   }
	YY_BREAK
case 177:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      s_defText    += text;
   }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      outputChar('\n');
      s_defText += ' ';
      s_yyLineNr++;
      s_yyMLines++;
   }
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QString comment = extractTrailingComment(s_defLitText);
      s_defLitText += text;

      if (! comment.isEmpty()) {
         outputArray(comment, comment.length());
         s_defLitText = s_defLitText.left(s_defLitText.length() - comment.length() - 1);
      }

      outputChar('\n');

      QSharedPointer<A_Define> def;

      if (s_includeStack.isEmpty() || s_curlyCount > 0) {
         addDefine();
      }

      def = DefineManager::instance().isDefined(s_defName);

      if (def == nullptr)  {
         // new define

         QSharedPointer<A_Define> nd = newDefine();
         DefineManager::instance().addDefine(s_yyFileName, nd);

      } else if (def) {
         // name already exists

         if (def->undef) {
            // undefined name
            def->undef        = false;
            def->m_name       = s_defName;
            def->m_definition = s_defText.trimmed();
            def->nargs        = s_defArgs;
            def->m_fileName   = s_yyFileName;
            def->lineNr       = s_yyLineNr - s_yyMLines;
            def->columnNr     = s_yyColNr;
         }
      }

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_yyLineNr++;
      s_yyColNr = 1;
      s_lastGuardName.resize(0);
      BEGIN(Start);
   }
	YY_BREAK
case 180:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defText    += ' ';
      s_defLitText += text;
   }
	YY_BREAK
case 181:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defText    += "##";
      s_defLitText += text;
   }
	YY_BREAK
case 182:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defText     += "@@";
      s_defLitText  += text;
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;

      if (! s_insideComment) {
         BEGIN(SkipDoubleQuote);
      }
   }
	YY_BREAK
case 184:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;

      if (! s_insideComment) {
         BEGIN(SkipSingleQuote);
      }
   }
	YY_BREAK
case 185:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text;
      s_defLitText += text;
   }
	YY_BREAK
case 186:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text;
      s_defLitText += text;
   }
	YY_BREAK
case 187:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
{
     QString text = QString::fromUtf8(preYYtext);

      s_defText    += text;
      s_defLitText += text;
   }
	YY_BREAK
case 189:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 190:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
   }
	YY_BREAK
case 191:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
   }
	YY_BREAK
case 192:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
   }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(CopyStringCs):
case YY_STATE_EOF(CopyStringFtn):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
{
      DBG_CTX((stderr, "End of include file\n"));

      if (s_includeStack.isEmpty()) {
         DBG_CTX((stderr, "Terminating scanner\n"));
         yyterminate();

      } else {
         QSharedPointer<FileState> fs = s_includeStack.pop();

         YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
         preYY_switch_to_buffer(fs->bufState );
         preYY_delete_buffer(oldBuf );

         s_yyLineNr      = fs->lineNr;
         s_inputString   = fs->oldFileBuf;
         s_inputPosition = fs->oldFileBufPos;
         s_curlyCount    = fs->curlyCount;
         setFileName(fs->fileName);

         DBG_CTX((stderr, "######## FileName %s\n", csPrintable(s_yyFileName)));

         // deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# %1 \"%2\" 2").formatArg(s_yyLineNr).formatArg(QString(s_yyFileName));
         outputArray(lineStr, lineStr.length());
      }
   }
	YY_BREAK
case 193:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
case 194:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      if (YY_START == SkipVerbatim || YY_START == SkipCond) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_lastCContext = YY_START;
         s_commentCount = 1;

         if (preYYleng == 3) {
            s_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 195:
YY_RULE_SETUP
{
      if (YY_START == SkipVerbatim || YY_START == SkipCond || getLanguageFromFileName(s_yyFileName) == SrcLangExt_Fortran) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_lastCPPContext = YY_START;

         if (preYYleng == 3) {
            s_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCPPComment);
      }
   }
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
   }
	YY_BREAK
case 197:
YY_RULE_SETUP
{
      // utf-8 code point
      QString text  = QString::fromUtf8(preYYtext);
      s_expectGuard = false;

      for (QChar c : text) {
         outputChar(c);
      }
   }
	YY_BREAK
case 198:
YY_RULE_SETUP
{
      // catch all
      QString text  = QString::fromUtf8(preYYtext);
      s_expectGuard = false;

      for (QChar c : text) {
         outputChar(c);
      }
   }
	YY_BREAK
case 199:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 82);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1447 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 82;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1447 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1446);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
int preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static int getNextChar(const QString &expr, QString *rest, uint &pos)
{
   if (pos < expr.length()) {
      return expr.at(pos++).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc  = rest->at(0).unicode();
      *rest   = rest->right(rest->length() - 1);
      return cc;

   } else {
      int cc = yyinput();

      return cc;
   }
}

static int getCurrentChar(const QString &expr, QString *rest, uint pos)
{
   if (pos < expr.length()) {
      return expr.at(pos).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc = rest->at(0).unicode();
      return cc;

   } else {
      int cc = yyinput();

      returnCharToStream(cc);
      return cc;
   }
}

static void unputChar(const QString &expr, QString *rest, uint &pos, char c)
{
   if (pos < expr.length()) {
      pos++;

   } else if (rest) {
      char cs[2];
      cs[0] = c;
      cs[1] = '\0';
      rest->prepend(cs);

   } else {

      returnCharToStream(c);
   }
}

void addSearchDir(const QString &dir)
{
   QFileInfo fi(dir);

   if (fi.isDir()) {
      s_pathList.append(fi.absoluteFilePath());
   }
}

void initPreprocessor()
{
   addSearchDir(".");
   s_expandedDict = QMakeShared<DefineDict>();
}

void removePreProcessor()
{
   s_expandedDict = QSharedPointer<DefineDict>();
   s_pathList.clear();

   DefineManager::deleteInstance();
}

QString preprocessFile(const QString &fileName, const QString &input)
{
   printlex(preYY_flex_debug, true, __FILE__, fileName);

   s_macroExpansion   = Config::getBool("macro-expansion");
   s_expandOnlyPredef = Config::getBool("expand-only-predefined");

   s_skip        = false;
   s_curlyCount  = 0;
   s_nospaces    = false;

   s_inputPosition  = 0;
   s_inputString    = input;
   s_outputString   = "";

   s_includeStack.clear();
   s_expandedDict->clear();
   s_condStack.clear();

   setFileName(fileName);

   s_inputFileDef = s_yyFileDef;
   DefineManager::instance().startContext(s_yyFileName);

   static bool firstTime = true;

   if (firstTime)  {
      // add predefined macros
      static QStringList const preDefinedMacros = Config::getList("predefined-macros");

      for (const auto &definedMacro : preDefinedMacros) {

         int posEquals = definedMacro.indexOf('=');
         int posOpen   = definedMacro.indexOf('(');
         int posClose  = definedMacro.indexOf(')');

         bool nonRecursive = posEquals > 0 && definedMacro.at(posEquals - 1) == ':';

         if (posOpen == 0) {
            // no define name
            continue;
         }

         if (posOpen < posEquals && posClose < posEquals && posOpen != -1  &&
                  posClose != -1  &&  posOpen < posClose) {

            // predefined function macro definition

            // regexp matching an id
            static QRegularExpression regExp_id("[a-z_A-Z\x80-\xFF][a-z_A-Z0-9\x80-\xFF]*");
            QHash<QString, int> argDict;

            QString args    = definedMacro.mid(posOpen + 1, posClose - posOpen - 1);
            bool hasVarArgs = args.contains("...");

            int index = posOpen + 1;
            int count = 0;
            int len;

            QRegularExpressionMatch match = regExp_id.match(definedMacro, definedMacro.constBegin() + index);

            // gather the formal arguments in a dictionary
            while (index < posClose) {

               if (match.hasMatch()) {
                  len = match.capturedLength();

                  if (len > 0) {
                     argDict.insert(match.captured(), count);
                     index = match.capturedEnd() - definedMacro.begin();

                     ++count;

                  } else {
                     ++index;
                  }

               } else {
                  break;
               }

               match = regExp_id.match(definedMacro, definedMacro.constBegin() + index);
            }

            if (hasVarArgs) {
              // add the variable argument if present
              argDict.insert("__VA_ARGS__", count);
              ++count;
            }

            // strip definition part
            QString tmp = definedMacro.right(definedMacro.length() - posEquals - 1);
            QString definition;

            index = 0;
            match = regExp_id.match(tmp);

            // substitute all occurrences of formal arguments with their corresponding markers
            while (match.hasMatch()) {

               int p = match.capturedStart() - tmp.constBegin();
               len   = match.capturedLength();

               definition += tmp.mid(index, p - index);

               auto iter = argDict.find(match.captured());

               if (iter != argDict.end()) {
                  int argIndex = iter.value();

                  QString marker = QString(" @%1 ").formatArg(argIndex);
                  definition += marker;

               } else {
                  definition += match.captured();
               }

               index = p + len;
               match = regExp_id.match(tmp, match.capturedEnd());
            }

            if (index < tmp.length()) {
               definition += tmp.mid(index, tmp.length() - index);
            }

            // add define definition to the dictionary of defines for this file
            QString dname = definedMacro.left(posOpen);

            if (! dname.isEmpty()) {
               QSharedPointer<A_Define> def = QMakeShared<A_Define>();

               def->m_name       = dname;
               def->m_definition = definition;
               def->nargs        = count;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = s_yyFileDef;
               def->m_fileName   = fileName;

               DefineManager::instance().addDefine(s_yyFileName, def);
            }

         } else if ((posOpen == -1 || posOpen > posEquals)   &&
                    (posClose == -1 || posClose > posEquals) &&
                    ! definedMacro.isEmpty() && definedMacro.length() > posEquals)  {

            // predefined non-function macro definition
            QSharedPointer<A_Define> def = QMakeShared<A_Define>();

            if (posEquals == -1) {
               // simple define without argument
               def->m_name = definedMacro;
               def->m_definition = "1"; // substitute occurrences by 1 (true)

            } else {
               // simple define with argument
               int ine = posEquals - (nonRecursive ? 1 : 0);
               def->m_name = definedMacro.left(ine);
               def->m_definition = definedMacro.right(definedMacro.length() - posEquals - 1);
            }

            if (! def->m_name.isEmpty()) {
               def->nargs = -1;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = s_yyFileDef;
               def->m_fileName   = fileName;
               DefineManager::instance().addDefine(s_yyFileName, def);
            }
         }
      }
   }

   s_yyLineNr = 1;
   s_yyColNr  = 1;
   s_ifcount  = 0;

   s_levelGuard.clear();

   BEGIN( Start );

   s_expectGuard = determineSection(fileName) == Entry::HEADER_SEC;
   s_guardName.resize(0);
   s_lastGuardName.resize(0);
   s_guardExpr = "";

   preYYlex();

   s_lexInit = true;

   while (! s_condStack.isEmpty()) {
      QSharedPointer<CondCtx> ctx = s_condStack.pop();
      QString sectionInfo = " ";

      if (ctx->sectionId != " ") {
         sectionInfo = QString(" with label '%1' ").formatArg(QString(ctx->sectionId));
      }

      warn(fileName, ctx->lineNr, "Conditional section %s does not have "
           "a corresponding \\endcond command within this file.", csPrintable(sectionInfo));
   }

   // make sure we do not extend a \cond with missing \endcond over multiple files
   forceEndCondSection();

   DefineManager::instance().endContext();
   printlex(preYY_flex_debug, false, __FILE__, fileName);

   return s_outputString;
}

void preFreeScanner()
{
   if (s_lexInit) {
      preYYlex_destroy();
   }
}

