/*************************************************************************
 *
 * Copyright (C) 2014-2017 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License version 2
 * is hereby granted. No representations are made about the suitability of
 * this software for any purpose. It is provided "as is" without express or
 * implied warranty. See the GNU General Public License for more details.
 *
 * Documents produced by DoxyPress are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,int len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 191
#define YY_END_OF_BUFFER 192
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1517] =
    {   0,
      173,  173,  192,  190,  191,    1,  190,  191,  189,  191,
        3,  190,  191,  190,  191,  190,  191,    2,  190,  191,
        6,  190,  191,    1,    6,  190,  191,    6,  190,  191,
        6,  189,  191,    3,    6,  190,  191,    5,  190,  191,
        6,  190,  191,    6,  190,  191,    6,  190,  191,    6,
      190,  191,    2,    6,  190,  191,   63,  190,  191,    1,
       63,  190,  191,   58,  189,  191,    3,   63,  190,  191,
       63,  190,  191,   63,  190,  191,   60,   63,  190,  191,
       60,   63,  190,  191,   60,   63,  190,  191,   60,   63,
      190,  191,   60,   63,  190,  191,   60,   63,  190,  191,

       60,   63,  190,  191,    2,   63,  190,  191,   87,  190,
      191,    1,   87,  190,  191,   85,  189,  191,    3,   87,
      190,  191,   87,  190,  191,   87,  190,  191,   86,   87,
      190,  191,   86,   87,  190,  191,   86,   87,  190,  191,
        2,   87,  190,  191,   88,   91,  190,  191,    1,   88,
       91,  190,  191,   96,  189,  191,    3,   88,   91,  190,
      191,   90,   91,  190,  191,   91,  190,  191,   91,  190,
      191,   88,   91,  190,  191,    2,   88,   91,  190,  191,
       97,  100,  190,  191,    1,   97,  100,  190,  191,    3,
       97,  100,  190,  191,   99,  100,  190,  191,   97,  100,

      190,  191,   97,  100,  190,  191,  100,  190,  191,    2,
       97,  100,  190,  191,   27,  190,  191,    1,   27,  190,
      191,   28,  189,  191,    3,   27,  190,  191,   16,   27,
      190,  191,   17,   27,  190,  191,   27,  190,  191,   27,
      190,  191,   25,   27,  190,  191,16408,   27,  190,  191,
       25,   27,  190,  191,16408,   11,   27,  190,  191,   12,
       27,  190,  191,    2,   27,  190,  191,   18,  190,  191,
        1,   18,  190,  191,   20,  190,  191,   18,  190,  191,
       18,  190,  191,  190,  191,    2,   18,  190,  191,   21,
      190,  191,    1,   21,  190,  191,   23,  190,  191,   21,

      190,  191,   21,  190,  191,  190,  191,    2,   21,  190,
      191,  190,  191,    1,  190,  191,    3,  190,  191,  190,
      191,  190,  191,    2,  190,  191,  102,  190,  191,  106,
      190,  191,    1,  106,  190,  191,  104,  189,  191,    3,
      106,  190,  191,  106,  190,  191,  106,  190,  191,  106,
      190,  191,    2,  106,  190,  191, 8302,  190,  191,16491,
    16493,16494,  190,  191,  113,  190,  191,  114,  190,  191,
      112,  190,  191,  190,  191,  116,  190,  191,  190,  191,
      185,  190,  191,    1,  185,  190,  191,  173,  185,  190,
      191,  172,  189,  191,    3,  185,  190,  191,  176,  185,

      190,  191,  168,  185,  190,  191,  177,  185,  190,  191,
      185,  190,  191,  185,  190,  191,  175,  185,  190,  191,
      169,  185,  190,  191,  185,  190,  191,    2,  185,  190,
      191,   80,  190,  191,    1,   80,  190,  191,   79,  189,
      191,    3,   80,  190,  191,   80,  190,  191,   80,  190,
      191,    2,   80,  190,  191,   78,   80,  190,  191,    1,
       78,   80,  190,  191,   78,   80,  190,  191,   78,   79,
      189,  191,    3,   78,   80,  190,  191,   77,   80,  190,
      191,   78,   80,  190,  191,   78,   80,  190,  191,    2,
       78,   80,  190,  191,  145,  147,  190,  191,    1,  147,

      190,  191,  146,  189,  191,    3,  145,  147,  190,  191,
      147,  190,  191,  147,  190,  191,  145,  147,  190,  191,
      147,  190,  191,  147,  190,  191,    2,  145,  147,  190,
      191,  145,  147,  190,  191,  147,  190,  191,  147,  190,
      191,  147,  190,  191,   37,   40,  190,  191,    1,   37,
       40,  190,  191,   39,  189,  191,    3,   37,   40,  190,
      191,   40,  190,  191,   37,   40,  190,  191,   37,   40,
      190,  191,    2,   37,   40,  190,  191,  148,  170,  190,
      191,    1,  148,  170,  190,  191,  150,  189,  191,    3,
      148,  170,  190,  191,  170,  190,  191,  148,  170,  190,

      191,  148,  170,  190,  191,  169,  170,  190,  191,    2,
      148,  170,  190,  191,  147,  190,  191,  147,  190,  191,
      147,  190,  191,  145,  147,  190,  191,  147,  190,  191,
      147,  190,  191,  147,  190,  191,  158,  162,  163,  190,
      191,    1,  158,  163,  190,  191,  159,  189,  191,    3,
      158,  162,  163,  190,  191,  162,  163,  190,  191,  158,
      162,  163,  190,  191,  163,  190,  191,    2,  158,  162,
      163,  190,  191,  155,  157,  190,  191,    1,  157,  190,
      191,  156,  189,  191,    3,  155,  157,  190,  191,  157,
      190,  191,  155,  157,  190,  191,  155,  157,  190,  191,

        2,  155,  157,  190,  191,  166,  167,  190,  191,    1,
      167,  190,  191,    3,  166,  167,  190,  191,  166,  167,
      190,  191,  166,  167,  190,  191,    2,  166,  167,  190,
      191,   69,  190,  191,    1,   69,  190,  191,   70,  189,
      191,    3,   69,  190,  191,   69,  190,  191,   69,  190,
      191,   68,   69,  190,  191,   69,  190,  191,   68,   69,
      190,  191,    2,   69,  190,  191,   76,  190,  191,    1,
       76,  190,  191,   74,  189,  191,    3,   76,  190,  191,
       76,  190,  191,   76,  190,  191,   72,   76,  190,  191,
       76,  190,  191,    2,   76,  190,  191,   75,   76,  190,

      191,   73,   76,  190,  191,  183,  190,  191,    1,  183,
      190,  191,    3,  183,  190,  191,  180,  183,  190,  191,
      183,  190,  191,  183,  190,  191,  183,  190,  191,    2,
      183,  190,  191,  184,  190,  191,    1,  184,  190,  191,
        3,  184,  190,  191,  182,  184,  190,  191,  184,  190,
      191,  184,  190,  191,  184,  190,  191,    2,  184,  190,
      191,   64,  190,  191,   62,  190,  191,    1,   62,  190,
      191,    3,   62,  190,  191,   62,  190,  191,   62,  190,
      191,   62,  190,  191,    2,   62,  190,  191,   36,  190,
      191,    1,   36,  190,  191,   34,  189,  191,    3,   36,

      190,  191,   33,   36,  190,  191,   36,  190,  191,   29,
       36,  190,  191,   30,   36,  190,  191,   36,  190,  191,
       36,  190,  191,   35,   36,  190,  191,    2,   36,  190,
      191,   44,  190,  191,    1,   44,  190,  191,    3,   44,
      190,  191,   41,   44,  190,  191,   44,  190,  191,   44,
      190,  191,   44,  190,  191,    2,   44,  190,  191,  131,
      190,  191,    1,  131,  190,  191,  130,  131,  190,  191,
        3,  131,  190,  191,  131,  190,  191,  131,  190,  191,
        2,  131,  190,  191,  134,  135,  190,  191,    1,  134,
      135,  190,  191,  133,  189,  191,    3,  134,  135,  190,

      191,  134,  190,  191,  134,  190,  191,  134,  135,  190,
      191,  134,  190,  191,    2,  134,  135,  190,  191,  190,
      187,  188,    6,    6,    5,    6,    6,    6,  190,  190,
       60,   60,  190,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   95,  187,   93,  188,   86,   86,  190,   86,
       86,   86,   88,   88,  190,  190,   88,   97,   97,  190,
       94,   97,  187,   92,   97,  188,   97,   98,   98,  190,
      190, 8216,   25,16408,   25,  190,16408,   26,   25,16408,
       18,   18,  190,   18,  187,   18,  188,   18,   19,   19,
      190,   21,   21,  190,   21,  187,   21,  188,   21,   22,

       22,  190,  103,  190,  187,  188,  101,  102,  102,  190,
      104,  190,  187,  188,  105, 8302, 8301, 8299, 8302,16491,
    16493,16494, 8302,  190,16491,16493,16494,  114,  113,  114,
      112,  116,  116,  116,  190,  111,  173,  174,  117,  187,
      118,  188,  169,  169,  190,  171,   78,   78,   77,   78,
      190,  145,  145,  190,  119,  121,  187,  120,  188,  145,
      145,   37,   37,  190,   38,   37,  188,   37,  148,  149,
      148,  188,  148,  144,  144,  187,  145,  158,  162,  158,
      162,  158,  162,  190,  158,  190,  160,  162,  187,  161,
      162,  188,  162,  190,  158,  162,  155,  155,  190,  152,

      154,  187,  153,  155,  188,  155,  166,  166,  190,  164,
      166,  187,  165,  166,  188,  166,   68,   68,  190,   65,
       68,   72,   72,  190,   71,   73,   73,  190,  179,  187,
      178,  188,  181,  181,  190,   64,   64,  190,   61,  190,
       32,  187,   42,  187,   42,  188,   43,   43,  190,  130,
      130,  190,  135,  135,  190,  187,  188,  135,  187,  188,
        4,   60,   60,   60,   60,   60,   52,   60,   60,   60,
       60,   60,   60,   95,   95,  187,   93,   93,  188,   86,
       86,   86,   81,   86,   86,   89,  190,    4,   88,   94,
       97,   94,   94,   97,  187,   92,   97,   92,   92,   97,

      188,    4,   97,   15,   15,   25,16408,   18,  187,   18,
      188,    4,   18,   21,  187,   21,  188,    4,   21,  187,
      188,    4,    4,  103,  187,  188,    4,  115,  174,  117,
      117,  187,  118,  118,  188,  120,  188,    4,  145,  145,
      124,  123,   37,  188,    4,   37,  148,  188,    4,  148,
      141,  145,  143,  142,  162,  187,  162,  188,    4,  158,
      162,    4,  162,  151,  155,  188,    4,  155,  166,  187,
      166,  188,    4,  166,   68,  178,  188,   31,  190,   32,
      187,  137,  137,  187,  136,  136,  188,    4,  135,  186,
    16391,16391,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   95,  186,   86,   82,   86,   86,   86,
       89,  190,   94,   97,  186,   14,   13,   14,   25,16408,
       18,  186,   21,  186,  186,  186,  108,  116,  120,  122,
      145,  124,  123,  145,  143,  142,  162,  186,  166,  186,
       68,   31,  190,16391,    9, 8199,   60,   60,   53,   56,
       54,   54,   60,   60,   60,   60,   60,   60,   60,   60,
       83,   86,   84,   86,   86,  190,   13,   25,16408,  126,
       68,  190, 8199,    9,   60,   60,   57,   49,   48,   60,
       60,   60,   60,   55,   25,16408,  125,  129,  132,  128,
       68,    8,    9,   47,   51,   50,16429,   46,   10,  127,

       68,    9, 8237,   67,   66,    9, 8237,  140,  139,    9,
      138,    9,   59,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_accept[1379] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    6,    9,   11,   14,
       16,   18,   21,   24,   28,   31,   34,   38,   41,   44,
       47,   50,   53,   57,   60,   64,   67,   71,   74,   77,

       81,   85,   89,   93,   97,  101,  105,  109,  112,  116,
      119,  123,  126,  129,  133,  137,  141,  145,  149,  154,
      157,  162,  166,  169,  172,  176,  181,  185,  190,  195,
      199,  203,  207,  210,  215,  218,  222,  225,  229,  233,
      237,  240,  243,  248,  251,  256,  260,  264,  268,  271,
      275,  278,  281,  284,  286,  290,  293,  297,  300,  303,
      306,  308,  312,  314,  317,  320,  322,  324,  327,  330,
      333,  337,  340,  344,  347,  350,  353,  357,  363,  365,
      368,  371,  374,  376,  379,  381,  384,  388,  392,  395,
      399,  403,  407,  411,  414,  417,  421,  425,  428,  432,

      435,  439,  442,  446,  449,  452,  456,  460,  465,  469,
      473,  478,  482,  486,  490,  495,  499,  503,  506,  511,
      514,  517,  521,  524,  527,  532,  536,  539,  542,  545,
      549,  554,  557,  562,  565,  569,  573,  578,  582,  587,
      590,  595,  598,  602,  606,  610,  615,  618,  621,  624,
      628,  631,  634,  637,  642,  647,  650,  656,  660,  665,
      668,  674,  678,  682,  685,  690,  693,  697,  701,  706,
      710,  714,  719,  723,  727,  732,  735,  739,  742,  746,
      749,  752,  756,  759,  763,  767,  770,  774,  777,  781,
      784,  787,  791,  794,  798,  802,  806,  809,  813,  817,

      821,  824,  827,  830,  834,  837,  841,  845,  849,  852,
      855,  858,  862,  865,  868,  872,  876,  879,  882,  885,
      889,  892,  896,  899,  903,  907,  910,  914,  918,  921,
      924,  928,  932,  935,  939,  943,  947,  950,  953,  956,
      960,  963,  967,  971,  975,  978,  981,  985,  989,  994,
      997, 1002, 1005, 1008, 1012, 1015, 1020, 1021, 1022, 1023,
     1023, 1024, 1025, 1026, 1027, 1028, 1030, 1030, 1030, 1031,
     1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
     1043, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1056,
     1056, 1056, 1057, 1058, 1059, 1061, 1064, 1067, 1068, 1069,

     1071, 1071, 1071, 1072, 1072, 1073, 1075, 1078, 1079, 1079,
     1081, 1082, 1084, 1086, 1088, 1089, 1090, 1092, 1093, 1095,
     1097, 1099, 1100, 1101, 1103, 1103, 1104, 1105, 1106, 1107,
     1107, 1107, 1108, 1109, 1111, 1111, 1112, 1113, 1114, 1115,
     1115, 1116, 1116, 1117, 1118, 1119, 1123, 1123, 1128, 1128,
     1129, 1130, 1131, 1132, 1132, 1133, 1133, 1134, 1136, 1137,
     1138, 1138, 1139, 1141, 1143, 1144, 1146, 1147, 1147, 1148,
     1149, 1150, 1152, 1153, 1155, 1156, 1158, 1160, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1163, 1165, 1166, 1168,

     1169, 1170, 1171, 1173, 1174, 1175, 1177, 1177, 1177, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1180, 1181, 1182, 1185,
     1187, 1190, 1193, 1195, 1197, 1197, 1197, 1198, 1200, 1201,
     1203, 1206, 1207, 1208, 1210, 1213, 1216, 1217, 1218, 1220,
     1221, 1221, 1222, 1223, 1225, 1226, 1227, 1229, 1231, 1233,
     1234, 1236, 1237, 1239, 1240, 1240, 1240, 1240, 1241, 1243,
     1245, 1247, 1248, 1250, 1251, 1253, 1254, 1256, 1257, 1258,
     1259, 1259, 1259, 1260, 1261, 1262, 1262, 1262, 1262, 1262,
     1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
     1273, 1274, 1275, 1277, 1278, 1280, 1281, 1282, 1283, 1284,

     1285, 1286, 1286, 1287, 1287, 1287, 1288, 1290, 1292, 1293,
     1296, 1298, 1299, 1302, 1304, 1305, 1305, 1306, 1306, 1306,
     1308, 1310, 1312, 1314, 1316, 1318, 1320, 1321, 1322, 1323,
     1325, 1326, 1327, 1328, 1328, 1328, 1329, 1329, 1330, 1331,
     1333, 1334, 1336, 1338, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1341, 1341, 1342, 1343, 1345, 1347,
     1349, 1351, 1351, 1352, 1353, 1353, 1354, 1355, 1357, 1359,
     1362, 1364, 1364, 1364, 1364, 1365, 1367, 1369, 1371, 1373,
     1375, 1376, 1378, 1378, 1379, 1379, 1379, 1380, 1382, 1383,

     1385, 1386, 1388, 1390, 1390, 1391, 1391, 1391, 1392, 1392,
     1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
     1403, 1404, 1406, 1407, 1409, 1410, 1411, 1411, 1412, 1412,
     1413, 1416, 1417, 1419, 1419, 1419, 1421, 1423, 1425, 1426,
     1427, 1428, 1429, 1430, 1430, 1430, 1430, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1432, 1432, 1433, 1434, 1434,
     1435, 1435, 1436, 1437, 1439, 1439, 1439, 1441, 1442, 1442,
     1443, 1443, 1444, 1444, 1444, 1445, 1445, 1446, 1446, 1447,
     1448, 1449, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,

     1459, 1460, 1461, 1462, 1462, 1463, 1465, 1466, 1466, 1466,
     1467, 1468, 1468, 1468, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1472, 1472, 1472, 1473,
     1473, 1473, 1473, 1473, 1473, 1474, 1474, 1475, 1475, 1476,
     1477, 1477, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
     1485, 1485, 1485, 1487, 1487, 1487, 1487, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1489, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,

     1490, 1490, 1490, 1490, 1490, 1491, 1492, 1492, 1492, 1492,
     1492, 1493, 1493, 1494, 1494, 1495, 1495, 1496, 1497, 1498,
     1499, 1499, 1499, 1499, 1499, 1499, 1500, 1500, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1502, 1502, 1502, 1502, 1502,
     1503, 1503, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1505,
     1506, 1506, 1506, 1506, 1506, 1507, 1507, 1508, 1508, 1508,

     1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1509, 1509,
     1509, 1509, 1509, 1509, 1509, 1509, 1509, 1510, 1510, 1510,
     1510, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1513, 1513, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
     1514, 1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515, 1515,
     1515, 1515, 1515, 1515, 1515, 1515, 1515, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,

     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,

     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,

     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,    1,   15,   16,   17,   18,   19,   20,   19,
       19,   19,   19,   19,   19,   21,   21,   22,    1,   23,
       24,   25,   26,   27,   28,   28,   29,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       30,   31,   32,    1,   28,   33,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   43,   50,   51,   52,   53,   54,   43,   55,
       56,   43,   57,   10,   58,   59,    1,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43
    } ;

static yyconst flex_int32_t yy_meta[62] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,   10,    8,   11,    1,    8,   12,   13,   14,   14,
       14,    1,   15,    1,    1,    1,   16,   17,   17,    1,
       18,    1,   19,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,    1,    1,   19,   20,
        1
    } ;

static yyconst flex_int16_t yy_base[1510] =
    {   0,
        0,    4,    9,   70,  131,    0,  192,    0,  252,  262,
      272,  279,  340,    0,  400,  404,  410,  438,  448,  475,
      536,    0,  458,  596,  630,    0,  690,    0,  751,    0,
      600,  626,  811,  815,  820,  826,  886,  946,  845,  860,
     1007,    0, 1067, 1127,  897,  928,  939, 1073,  849, 1078,
     1188,    0, 1249,    0, 1298,    0, 1107, 1117, 1355, 1359,
     1393,    0, 1393, 1453, 1513, 1573, 1460, 1485, 1634,    0,
        0,    0, 1694, 1754, 5127, 5065, 5064, 6649, 5062,    2,
        3, 5060, 5059, 5058, 1815, 6649, 5057, 5056,    7,    6,
      272, 5055, 5054, 5053, 5050, 6649, 5047,  244,    8, 5046,

        0,    4,    9,  248,  205,  225, 5044, 5038, 5031, 6649,
     5011,  257,  242, 5008,  262,  222, 5000, 4997, 4979, 6649,
     4959, 4953,  229,  399,  270, 4944, 4940, 4939, 4919, 4913,
      415,  377, 4902, 4900, 4899, 4893, 6649, 4890, 4886,  268,
      430,  394,  603,  434,  865, 4883, 4882, 4861, 4841, 4835,
     4824,  454,  397, 4821, 4806, 4801, 4790, 4786,  467,  398,
     4784, 4781,  463,  471,  596,  628,  629,  820,  407,  423,
      442, 6649,  443,  822,  835,  838,  447,  854,  876,  431,
      832,  845,  469,  880,  851, 4376, 4375,  923, 6649, 4374,
     4372,  437, 4371,  602,  461, 4370, 4357,  903, 4352, 4349,

     4347, 6649, 4344,  800,  466, 4339, 4336, 4334,  926, 6649,
     4331, 4329,  921,  472, 4326, 4317, 4316, 6649, 4311,  581,
      924,  583, 1850, 4310, 4304, 1087, 1366,  278,  255, 4299,
     4294, 6649, 4286,  909,  938,  585, 4281, 4272, 4271, 6649,
     4262,  943, 1056,  587, 4261, 4249,  944, 1089,  473, 1103,
     1463,  279,  259, 1077, 4244, 6649, 1084, 1109, 1353, 1425,
     1090, 4239, 4238, 6649, 4236, 1055, 1302,  591, 4231, 4226,
     4217, 4216, 1305,  858, 4207, 4206, 4204, 6649, 4203, 1307,
      877, 4194, 1308,  457, 4189, 4181, 4176, 6649, 4171, 1358,
      941, 4162,  918, 4161, 4149, 4148, 4139, 4134, 4133, 4131,

     1390,  942, 4126, 4121, 4116, 4107, 4106, 4101, 1391, 1050,
     4100, 4094, 4093, 4084, 4076, 4071, 1481, 1058, 1410, 4066,
     4061, 4052, 6649, 4051, 4039,  275, 4038, 4029, 1483, 1114,
     4028, 4026, 4021, 4016, 4011, 4006, 1484, 1116, 3997, 3996,
     3994, 3993, 3984, 3983, 1490, 1125, 3971, 3966, 3961, 6649,
     3956, 3951, 1491, 1296, 1507, 3939, 3938, 3975, 3970,   25,
     6649, 1910, 6649,  604,    0, 3923, 1152,    0, 1400,    0,
     3921, 3922, 3913,    2, 3913, 1524, 3894, 3897, 3894, 3890,
     3911, 3887,    0, 3844,  274, 3852, 1546,    0, 3828, 3863,
        4, 1318, 1590,    0, 3800,   26,   21, 1605, 6649, 3798,

     3838,  505, 1363,  501, 6649,  987, 1550, 6649, 3843, 1560,
        0, 3774, 3818, 3813, 1691, 6649, 3767,    0, 3760, 3804,
     3794, 1711, 6649, 3751,  503, 6649, 1468,  968,  969, 1966,
        7, 6649,  317, 1530, 3804, 6649, 1101,    3,   41, 1988,
     6649, 3785, 1162, 6649, 6649, 1379, 3784, 1707,  318, 3770,
     3769, 3755, 3741, 3725,  505, 3716,  517, 1477, 6649,  527,
     3723, 3715,   41,  318,    0, 3656, 6649, 3711, 6649,  963,
     6649, 3651,    0, 3644, 6649,  956, 3684, 1771, 1978, 3648,
     3647, 3645, 3621, 3638, 3623, 3604, 3604, 3582, 1565, 1729,
     3593, 3558, 1473, 3582, 3543,    0, 3540, 6649, 3581, 1786,

        0, 6649, 3577, 2023, 6649, 3574, 3539, 1573, 1972, 1993,
     3547, 3520, 1698, 3543, 3498,  414,    0,    0, 1399, 3496,
     3527, 3522, 3466, 2051,  574, 3464,    0, 3450,  977, 3487,
     3481, 2066,    0, 3426, 3470, 3465, 2081,    0, 3419, 6649,
     3468, 3431,    0, 3404, 6649,    0, 3403, 3446, 3423, 6649,
     3380,    0, 3365, 6649, 3420, 3399,  307, 1496, 3382, 3380,
     3367, 6649, 3323,    0, 3310,    0, 3308,  634,  631, 2096,
     3329, 3316, 3338, 6649, 6649,  820,  626,  985, 3341, 3304,
     3305, 3305, 3287, 3282, 6649, 3271, 3271, 3246, 3235, 3238,
     3231,    0, 3249,    0,    0, 3215, 3214, 3209, 6649, 3209,

     3203, 3227, 6649, 3221, 1164, 1499,    0, 1082,    0, 1563,
     1481,    0, 1566,    0, 6649, 3220, 3217, 1463, 1384, 1736,
     3191,    0,    0, 3190,    0,    0, 1152, 1368, 1522, 6649,
     1310, 3190, 3188, 1584, 1488, 6649, 3161, 3161, 6649, 3144,
     6649, 6649, 3135,    0, 3104, 3097, 3089, 1696, 3083, 3097,
     3089, 3070, 3079, 3070,  613,  857, 3075, 3057, 3042, 3040,
     3038, 3023, 3023, 2007, 1742, 3033, 3006,    0,    0,    0,
        0, 3022, 6649, 2067, 1746, 3025, 2990, 3030,    0, 1313,
        0, 2998, 2998, 1149, 6649,    0,    0, 3023,    0,    0,
     2989, 6649, 3011, 6649, 3010, 1731, 1549, 2998, 6649, 2993,

     6649, 6649,    0, 2973, 6649,  983, 2995, 2039, 2974, 2046,
     2944, 2930, 1758, 2126, 2937, 2935, 2935, 2910, 2906, 2909,
     2909,    0, 1800,  831, 2907, 2906, 2923, 6649, 1873, 1565,
     1588, 6649, 6649, 1878, 2112, 2185,    0,    0, 1541, 2928,
     6649, 6649, 2905, 1355, 1568, 2879, 6649, 2855, 2839, 2842,
     2842, 2829, 2833, 2838, 2833, 2827, 1875, 2814, 2794, 2791,
     2775, 2774, 2774, 2757, 1153, 1574, 2766, 2738, 2155, 1730,
     1695, 2761, 2725,    0, 2727, 2731,    0, 2720, 2753, 6649,
     1883, 1726, 2723, 2742, 2190, 2203, 2210, 2214, 6649, 2717,
     2710, 6649, 6649, 1710, 2708, 2271, 1085, 2689, 2664, 2678,

     2676, 2704, 6649, 1727, 2667,    0, 2053, 2692, 2691, 1754,
     6649, 2675, 2217, 2330, 2636, 2634, 2635, 1903, 2631, 2621,
     2623, 2611, 2588, 2600, 2586, 2333, 2223, 2584, 2234, 2580,
     2575, 2566, 2565, 2553, 2565, 2538, 2535, 2532, 2520, 2535,
     2534, 2508, 2517, 2494, 2237, 2495, 2521, 2519, 1965, 2476,
     1787, 2336, 2340, 1314, 1886, 2343, 2347, 2351, 2485, 2519,
     1978, 2480, 6649, 1971, 6649, 1985, 1995, 2461, 2491, 2485,
     2448, 2240, 2356, 2367, 2480, 2427, 2245, 2426, 2416, 2407,
     2413, 2408, 2420, 2402, 2386, 2250, 6649, 2253, 2391, 2390,
     2388, 2384, 2369, 2362, 2343, 2346, 2348, 1711, 2330, 2323,

     2320, 2327, 2314, 2312, 2258, 2222, 2204, 2376, 2379, 1403,
     6649, 2383, 2406, 2412, 2243, 2400, 2042, 6649, 2371, 6649,
     1465, 2415, 2426, 2438, 2205, 6649, 2175, 2228, 2182, 2177,
     2176, 2168, 2166, 2159, 2150, 2154, 2140, 2261, 2081, 2086,
     2077, 2071, 2057, 2055, 2068, 2045, 2060, 2053, 2040, 2045,
     2025, 2012, 2023, 2007, 2068, 2001, 2443, 2448, 2454, 2463,
     2468,    0, 1990, 2474, 2477, 2023, 1969, 2265, 1978, 1972,
     1963, 1956, 1939, 1937, 1945, 1929, 1932,    0, 1853, 1856,
     1839, 1835, 1834, 1758, 1761, 1760, 1759, 1743, 2083, 6649,
        0, 2488, 2493, 2499, 2504, 2509,    0, 1742, 2524, 2534,

     2544, 1728,    0, 1717, 1726, 1720, 1699, 6649, 1662, 1658,
     1585, 1579, 1581, 1577, 1540, 1524, 6649, 2549, 2554, 2513,
     2560, 2570, 1519, 2574, 2590, 2539, 1488, 6649, 1417, 1427,
     1425, 1355, 1347, 1274, 1268, 1145, 1123, 2585, 2600, 2611,
     2615, 2621, 6649, 2626, 2641, 2605,  961,    2,  286,  281,
      380,  469, 2636, 2647, 2651, 2660, 2672, 2676, 2680, 2686,
      462,  572,  765, 2692, 2696, 2708, 2716, 2719, 2722, 2728,
     2741,  811, 2747, 2753, 2758, 2767, 2774, 2778, 2788, 2783,
      838, 2798, 2803, 2809, 2823, 2814, 2829, 2839, 2833, 2844,
     2854, 2849, 2860, 2870, 2864, 2880, 2890, 2883, 2895, 2905,

     2900, 2910, 2921, 2915, 2926, 2932, 2938, 2946, 2949, 2960,
     2963, 2976, 2966, 2981, 2987, 2993, 2997, 3000, 3010, 3015,
     3025, 3021, 3031, 3035, 3048, 3051, 3057, 3067, 3071, 3081,
     3076, 3086, 3092, 3097, 3103, 3106, 3116, 3122, 3125, 3136,
     3139, 3143, 3153, 3156, 3162, 3167, 3172, 3176, 3182, 3186,
     3192, 3198, 3202, 3208, 3213, 3218, 3222, 3232, 3238, 3241,
     3253, 3256, 3259, 3269, 3272, 3278, 3283, 3288, 3292, 3298,
     3302, 3308, 3314, 3318, 3324, 3329, 3334, 3338, 3348, 3354,
     3357, 3369, 3372, 3375, 3385, 3388, 3394, 3399, 3404, 3408,
     3414, 3418, 3424, 3430, 3434, 3440, 3445, 3450, 3454, 3464,

     3470, 3473, 3485, 3488, 3491, 3501, 3504, 3510, 3515, 3520,
     3524, 3530, 3534, 3540, 3546, 3550, 3556, 3561, 3566, 3570,
     3580, 3586, 3589, 3601, 3604, 3607, 3617, 3620, 3626, 3631,
     3636, 3640, 3646, 3650, 3656, 3662, 3666, 3672, 3677, 3682,
     3686, 3696, 3702, 3705, 3717, 3720, 3723, 3733, 3736, 3742,
     3747, 3752, 3756, 3762, 3766, 3772, 3778, 3782, 3788, 3793,
     3798, 3802, 3812, 3818, 3821, 3833, 3836, 3839, 3849, 3852,
     3858, 3863, 3868, 3872, 3878, 3882, 3888, 3894, 3898, 3904,
     3909,  884, 3914, 3919, 3927, 3933, 3937, 3943, 3950, 3955,
     3960, 3965, 3970, 3975, 3982, 3988, 3992, 3998, 4001,  859,

     4005, 4010, 4015, 4020, 4025, 4030, 4033, 4037, 4043, 4047,
     4056, 4060, 4065, 4070, 4075, 4080, 4088, 4092, 4098, 4102,
     4105, 4111, 4115, 4120, 4125, 4130, 4135, 4138, 4143, 4147,
     4153, 4160, 4166, 4170, 4175, 4180, 4185, 4193, 4198, 4202,
     4208, 4211, 4215, 4221, 4225, 4230, 4235, 4240, 4243, 4248,
     4253, 4257, 4266, 4270, 4276, 4280, 4285, 4290, 4298, 4303,
     4308, 4312, 4315, 4321, 4325, 4331, 4335, 4340, 4345, 4348,
     4353, 4358, 4363, 4370, 4376, 4380, 6649, 4437, 4457, 4477,
     4497, 4517, 4537, 4557, 4577, 4597, 4617, 4637, 4657, 4677,
     4697, 4717, 4737, 4757, 4777, 4797, 4817, 2382, 2405, 2406,

     4837, 4857, 4877, 4897, 4917, 4935, 4955, 4975, 4995, 5015,
     5035, 5053, 5073, 5091, 5109, 2567, 5129, 5149, 5169, 5189,
     5209, 5229, 5249, 5269, 5289, 2722, 4373, 4381, 5309, 4386,
     5329, 5349, 5367, 5387, 4394, 4399, 5407, 5427, 4404, 5447,
     5467, 5487, 5507, 5527, 5547, 5567, 5585, 5605, 5625, 5645,
     5663, 5683, 5701, 5719, 4408, 5739, 5759, 5779, 5799, 5818,
     5838, 5858, 5878, 5898, 4409, 4927, 4934, 5044, 5918, 5938,
     5956, 5976, 5996, 6016, 5045, 6036, 6056, 5052, 6076, 6096,
     6116, 6136, 6156, 6176, 6196, 6214, 6234, 6254, 6274, 6294,
     6314, 6334, 6353, 6373, 6393, 6413, 5082, 6433, 6453, 6473,

     6493, 6513, 6533, 6551, 6571, 5083, 6591, 6610, 6629
    } ;

static yyconst flex_int16_t yy_def[1510] =
    {   0,
     1378, 1378, 1378, 1377, 1377,    5, 1377,    7, 1379, 1379,
     1380, 1380, 1377,   13, 1381, 1381, 1382, 1382, 1383, 1383,
     1377,   21, 1384, 1384,   21,   25, 1377,   27, 1377,   29,
     1385, 1386, 1378, 1378, 1378, 1378, 1387, 1387, 1388, 1388,
     1377,   41, 1387, 1387, 1389, 1389, 1390, 1390, 1391, 1391,
     1377,   51, 1377,   53,   53,   55, 1392, 1392, 1393, 1393,
       25,   61, 1394, 1394, 1395, 1395, 1396, 1396, 1377,   69,
       69,   69, 1397, 1397, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1398, 1398, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1399,

     1399, 1399, 1399, 1399, 1399, 1399, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1400, 1400, 1400, 1377, 1401, 1401, 1377,
     1401, 1377, 1402, 1377, 1401, 1401, 1403, 1403, 1403, 1377,
     1403, 1403, 1404, 1403, 1377, 1377, 1377, 1377, 1377, 1405,
     1377, 1377, 1406, 1377, 1406, 1377, 1377, 1377, 1407, 1407,
     1377, 1407, 1407, 1408, 1407, 1409, 1409, 1377, 1409, 1409,
     1410, 1409, 1411, 1411, 1411, 1411, 1411, 1411, 1412, 1413,
     1413, 1377, 1413, 1413, 1413, 1377, 1413, 1414, 1377, 1377,
     1377, 1377, 1377, 1415, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1416, 1377, 1377, 1377,

     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1417, 1377,
     1377, 1377, 1377, 1377, 1377, 1418, 1377, 1377, 1418, 1377,
     1377, 1418, 1377, 1377, 1418, 1418, 1377, 1377, 1377, 1419,
     1419, 1377, 1419, 1377, 1419, 1419, 1419, 1420, 1420, 1377,
     1420, 1377, 1420, 1420, 1416, 1420, 1377, 1377, 1377, 1418,
     1377, 1377, 1377, 1421, 1422, 1377, 1421, 1423, 1421, 1377,
     1421, 1424, 1377, 1377, 1424, 1377, 1424, 1424, 1424, 1425,
     1377, 1425, 1425, 1425, 1425, 1377, 1377, 1377, 1377, 1377,
     1377, 1426, 1377, 1426, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1427, 1377, 1377, 1377, 1428, 1377, 1377, 1377, 1377,

     1377, 1377, 1429, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1429, 1377, 1430, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1431, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1432, 1377,
     1377, 1377, 1433, 1377, 1377, 1377, 1377, 1434, 1434, 1377,
     1434, 1377, 1377, 1434, 1377, 1434, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1435, 1435, 1435, 1435, 1435, 1435, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1437, 1438, 1439, 1439, 1439, 1439, 1439, 1440, 1440, 1441,
     1442, 1441, 1440, 1443, 1443, 1444, 1445, 1443, 1377, 1377,

     1377, 1446, 1377, 1377, 1377, 1447, 1447, 1377, 1377, 1447,
     1448, 1448, 1448, 1448, 1448, 1377, 1377, 1449, 1449, 1449,
     1449, 1449, 1377, 1377, 1450, 1377, 1450, 1450, 1450, 1450,
     1377, 1377, 1451, 1451, 1452, 1377, 1452, 1452, 1452, 1452,
     1377, 1377, 1377, 1377, 1377, 1453, 1377, 1453, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1454, 1454, 1377, 1377,
     1377, 1377, 1377, 1377, 1455, 1455, 1377, 1377, 1377, 1456,
     1377, 1377, 1457, 1457, 1377, 1377, 1377, 1457, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1457, 1377,
     1377, 1377, 1377, 1377, 1377, 1458, 1458, 1377, 1458, 1458,

     1459, 1377, 1459, 1459, 1377, 1377, 1377, 1377, 1457, 1377,
     1377, 1377, 1377, 1377, 1377, 1460, 1461, 1462, 1460, 1461,
     1462, 1462, 1462, 1460, 1377, 1377, 1463, 1463, 1377, 1377,
     1463, 1463, 1464, 1464, 1464, 1464, 1464, 1465, 1465, 1377,
     1377, 1465, 1466, 1466, 1377, 1467, 1467, 1377, 1377, 1377,
     1377, 1468, 1468, 1377, 1377, 1469, 1470, 1469, 1377, 1377,
     1377, 1377, 1377, 1471, 1471, 1472, 1472, 1377, 1377, 1472,
     1377, 1377, 1377, 1377, 1377, 1377, 1473, 1377, 1474, 1475,
     1475, 1475, 1475, 1475, 1377, 1475, 1475, 1475, 1475, 1475,
     1475, 1476, 1476, 1477, 1477, 1478, 1478, 1478, 1377, 1478,

     1478, 1479, 1377, 1377, 1377, 1479, 1480, 1481, 1482, 1481,
     1483, 1484, 1483, 1485, 1377, 1377, 1377, 1377, 1377, 1486,
     1487, 1487, 1487, 1488, 1488, 1488, 1489, 1489, 1489, 1377,
     1490, 1490, 1490, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1457, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1457, 1377, 1377, 1377, 1491, 1491, 1492,
     1492, 1377, 1377, 1457, 1377, 1377, 1377, 1493, 1493, 1494,
     1493, 1377, 1377, 1377, 1377, 1495, 1495, 1496, 1496, 1496,
     1497, 1377, 1498, 1377, 1377, 1377, 1498, 1377, 1377, 1377,

     1377, 1377, 1472, 1377, 1377, 1473, 1499, 1377, 1474, 1377,
     1475, 1475, 1475, 1377, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1476, 1478, 1478, 1478, 1478, 1500, 1377, 1377, 1500,
     1481, 1377, 1377, 1377, 1377, 1486, 1487, 1488, 1489, 1490,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1457, 1377, 1377, 1377, 1377, 1457,
     1377, 1377, 1377, 1493, 1377, 1377, 1496, 1497, 1501, 1377,
     1377, 1501, 1377, 1499, 1502, 1377, 1377, 1377, 1377, 1475,
     1475, 1377, 1377, 1377, 1475, 1377, 1475, 1475, 1475, 1475,

     1475, 1475, 1377, 1377, 1478, 1478, 1478, 1377, 1377, 1377,
     1377, 1377, 1377, 1486, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1497, 1377, 1377, 1377, 1377,
     1502, 1502, 1502, 1377, 1502, 1377, 1377, 1377, 1475, 1475,
     1377, 1377, 1377, 1377, 1377, 1475, 1475, 1475, 1475, 1377,
     1377, 1377, 1486, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1503, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,

     1377, 1377, 1377, 1377, 1377, 1497, 1377, 1502, 1502, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1504, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1505, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1503, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1497, 1377, 1502, 1502, 1377, 1377,
     1377, 1506, 1377, 1377, 1377, 1377, 1505, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1507, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1508, 1502, 1502, 1377, 1377, 1377, 1506, 1377, 1377, 1377,

     1377, 1377, 1509, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1502, 1502, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1502, 1502, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1502, 1502, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1502, 1502, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1502, 1502, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1502, 1502, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,

     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,

     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,

     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377,    0, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,

     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,

     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377
    } ;

static yyconst flex_int16_t yy_nxt[6711] =
    {   0,
     1377,   77,  578,   78,   79,   77,  436,   78,   79,  431,
       77,  579,   78,   79, 1377,  358,  631,   80,  432,  359,
      358,   80,  605,  605,  359,   81,   80,  612,  360,   81,
      575,  360,  609,  360,   81,  575,  575,  575,  613,  610,
      575,  373,  575,  582,  436,  372,  639,  575,  575,  575,
     1377,  612,  583,  374,  640,  375,  609,  757,  632,  371,
       82,  357,  357,  371,   82,  357,  357,  357,  371,   82,
       83,   84,   85,   86,   87,   83,   83,   88,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   89,   83,   83,
       83,   83,   83,   83,   83,   90,   83,   91,   91,   83,

       83,   83,   83,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   83,   83,   83,   92,
       93,   94,   95,   94,   96,   97,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   98,   94,
       94,   94,   94,   94,   94,   94,   99,   94,  100,  100,
       94,   94,   94,   94,  100,  100,  101,  102,  103,  100,
      100,  100,  104,  100,  100,  100,  100,  100,  100,  105,
      100,  100,  100,  106,  100,  100,  100,   94,   94,   94,
      100,  107,  108,  109,  108,  110,  111,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  112,
      108,  108,  108,  108,  108,  108,  108,  113,  108,  114,
      114,  108,  108,  108,  108,  114,  114,  114,  114,  115,
      114,  114,  114,  116,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  108,  108,
      108,  114,  117,  119,  379,  120,  121,  358,  122,  391,
      387,  359,  123,  119,  371,  120,  121,  360,  122,  124,
      381,  380,  123,  128,  382,   78,  129,  125,  130,  124,
      128,  384,   78,  129,  371,  130,  376,  125,  392,  131,
      367,  367,  367,  377,  378,  393,  131,  132,  402,  367,

      367,  357,  133,  357,  132,  557,  385,  371,  386,  133,
      494,  514,  126,  495,  357,  596,  357,  515,  357,  431,
      449,  384,  126,  641,  597,  696,  696,  403,  432,  389,
      450,  369,  134, 1062,  558,  642,  673,  357,  357,  134,
      135,  136,  135,  137,  138,  135,  139,  135,  135,  135,
      140,  135,  135,  135,  135,  135,  135,  141,  135,  135,
      135,  135,  135,  135,  135,  142,  135,  143,  143,  135,
      144,  135,  135,  143,  143,  143,  143,  145,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  146,  147,  135,  143,

      148,  150,  398,   78,   79,  150,  151,   78,   79,  431,
      151,  157,  381,   78,   79,  517,  382,  152,  432,  360,
      158,  152,  415,  422, 1063,  153,  436,  159,  396,  153,
      154,  518,  397,  451,  154,  160,  395,  408,  409,  157,
      161,   78,   79,  358,  462,  436,  436,  359,  158,  164,
      436,   78,  165,  357,   76,  159,  412,  419,  357,  171,
      155,  172,  173,  160,  155,  166,  434,  413,  161,  426,
      162,  414,   76,  167,  395,  174,  164,  426,   78,  165,
      420,   76,  437,  175,  421,  454,  360,  426,  176,  357,
      357,  360,  166,  357,  542,  426,  357,  360,  162,   76,

      167,  437,  437,  619,  619,  619,  437,  455,  168,  426,
      507,  508,  405,  412,  673,  617,  539,  818,  177,  455,
      357,  456,  427,  618,  618,  357,  419,  426,  357,  460,
      427,  357,  357,  456,  461,  168,   76,   77,   76,   78,
       79,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   80,   76,   76,   76,   76,   76,   76,
       76,   81,   76,  169,  169,   76,   76,   76,   76,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,   76,   76,   76,  169,   82,  171,  475,  172,

      173,  201,  426,  202,  203,  404,  404,  404,  478,  682,
      500,  647,  504,  174,  405,  463,  532,  204, 1072,  464,
      426,  175,  367,  367,  367,  205,  176,  208,  209,  210,
      211,  367,  367,  212,  426,  426,  701,  707,  708,  699,
      357,  428,  474,  213,  497,  429,  357,  700,  702,  754,
      528,  214,  426,  426,  430,  427,  177,  178,  178,  755,
      206,  357,  407,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  215,  427,  427,  178,
       76,   77,  179,   78,   79,   76,   76,   76,   76,   76,

       76,  180,  181,   76,  182,   76,  183,   80,   76,   76,
       76,   76,   76,   76,   76,   81,   76,  184,  184,   76,
      185,   76,   76,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,   76,   76,   76,  184,
       82,  186,  187,  188,  189,  190,  186,  191,  192,  186,
      186,  193,  186,  186,  186,  186,  186,  186,  194,  186,
      186,  186,  186,  186,  186,  186,  195,  196,  197,  197,
      186,  198,  186,  186,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  197,  197,  197,  197,  186,  186,  186,
      197,  199,   77,  381,   78,   79,   77,  382,   78,   79,
      673,   77,  576,   78,   79,  436,  426,   77,   80,   78,
       79,  577,   80,  804,  452,  438,   81,   80,  436,  439,
       81,  441,  442,   80,  426,   81,  231,  453,  232,  233,
      271,   81,  256,  272,  459, 1081,  443,  444,  234,  357,
      440,  231,  235,  232,  233,  445,  273,  404,  404,  404,
      236,   82,  805,  234,  274,   82,  405,  235,  449,  427,
       82,  437,  455,  537,  447,  236,   82,  217,  450,  218,
      219,  357,  756,  673,  437,  405,  456,  357,  255,  220,

      256,  257,  360,  221,  357,  237,  467,  468,  757,  275,
      357,  222,  223,  448,  258,  926,  223,  534,  224,  410,
      237,  545,  259,  260,  407,  460,  498,  260,  470,  255,
      461,  256,  257,  471,  381,  357,  357,  476,  382,  458,
      263,  477,  264,  265,  224,  258,  225,  217,  226,  218,
      219,  358,  266,  259,  260,  499,  267,  261,  260,  227,
      502,  505,  357,  221,  268,  470,  360,  360,  357,  573,
      471,  222,  223,  475,  426,  426,  223,  357,  228,  684,
      357,  627,  357,  357,  685,  472,  628,  578,  261,  404,
      404,  404,  426,  426,  707,  708,  579,  497,  405,  269,

      357,  357,  357,  357,  229, 1061,  225,  238,  239,  238,
      240,  241,  238,  238,  238,  238,  238,  238,  238,  238,
      242,  238,  238,  238,  243,  238,  238,  238,  238,  238,
      238,  238,  244,  238,  245,  245,  238,  238,  238,  238,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  238,  238,  238,  245,  246,  217,  358,
      218,  219,  529,  503,  263,  360,  264,  265,  517,  271,
      247,  256,  272,  360,  248,  517,  266,  864,  609,  489,
      267,  517,  222,  249,  518,  273,  865,  249,  268,  224,

      490,  518,  506,  274,  436,  509,  359,  518,  298,  357,
       78,  299,  609,  300,  357,  357,  510,  357,  298,  491,
       78,  299,  521,  300,  301,  224,  522,  225,  217,  250,
      218,  219,  302,  269,  301,  511,  519,  303,  275,  360,
      251,  360,  302,  519,  248,  492,  474,  303,  357,  519,
      360,  684,  222,  249,  576,  765,  685,  249,  426,  252,
      437,  512,  474,  577,  443,  444,  490,  304,  523,  739,
      367,  367,  367,  357,  728,  357,  426,  304,  673,  367,
      367,  634,  729,  729,  357,  253, 1052,  225,  276,  277,
      276,  278,  279,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  276,  276,  280,  276,  276,  276,  276,
      276,  276,  276,  281,  276,  282,  282,  276,  283,  276,
      276,  282,  282,  282,  284,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  276,  276,  276,  282,  285,  286,
      287,  286,  288,  289,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  290,  286,  286,  286,
      286,  286,  286,  286,  291,  286,  292,  292,  286,  293,
      286,  286,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,

      292,  292,  292,  292,  292,  286,  286,  286,  292,  294,
      295,  540,  541,  436,  517,  530,  910,  911,  535,  531,
      358,  570,  536,  673,  359,  296,  296,  740,  603,  673,
      518,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  517,  567,  306,  296,   78,  307,
      306,  528,   78,  307,  534,  308,  357,  357,  493,  308,
      518,  358,  309,  615,  426,  359,  309,  606,  524,  490,
      310,  443,  444,  475,  310,  311,  735,  735,  735,  311,
      445,  815,  426, 1051,  315,  405,   96,  316,  491, 1050,

      517,  816,  578,  548,  358,  910,  911,  549,  359,  447,
      317,  579,  519,  554,  555,  312,  518,  357,  318,  312,
      313,  313,  357,  319,  492,  357,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  357,
      357,  525,  313,  320,  315,  525,   96,  316,  519,  369,
      526,  334,  482,   78,  335,  513,  336,  921, 1049,  357,
      317, 1048,  818,  733,  426,  665,  510,  337,  318,  455,
      505,  734,  734,  319,  357,  338,  334,  612,   78,  335,
      339,  336,  426,  456,  358,  511,  559,  560,  359,  445,

      359,  561,  337,  358,  568,  491,  694,  359,  569,  603,
      338,  612,  963,  320,  322,  339,  323,  324,  447,  325,
      340,  512,  357,  326,  327,  328,  585,  427,  426,  585,
      329,  492,  431,  571, 1047,  585,  458,  571,  330,  331,
      357,  432,  357,  357,  572,  340,  426,  426,  599,  357,
      357,  599,  404,  404,  404,  697, 1043,  599,  730,  694,
      586,  405,  404,  404,  404,  426,  357,  664, 1037,  609,
      587,  405,  612,  332,  322,  603,  323,  324,  490,  325,
      731,  673,  600,  326,  327,  328,  741,  741,  741,  434,
      329, 1036,  601,  609,  609,  607,  612,  491,  330,  331,

      575,  607,  607,  817,  673,  607,  491,  575,  782,  407,
      614,  620,  607,  607,  607,  614,  614,  614,  609,  818,
      614, 1035,  614,  492,  810, 1034, 1033,  614,  614,  614,
      673, 1032,  492,  332,  341,  342,  343,   78,  344,  343,
      341,  341,  341,  343,  341,  343,  343,  341,  341,  343,
      343,  345,  343,  343,  343,  341,  341,  341,  341,  346,
      341,  343,  343,  341,  341,  341,  341,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      341,  341,  341,  343,  347,  349,  623,  350,  351,  352,

      675,  623,  623,  623,  747, 1031,  623,  352,  623,  443,
      444,  353,  861,  623,  623,  623,  626,  757,  445,  354,
      355,  575,  626,  626,  355,  747,  626,  511,  626,  804,
      511,  493,  770,  626,  626,  626,  694,  447,  404,  404,
      404,  780,  490,  510,  766, 1030,  948,  405,  771,  781,
      781,  862,  747,  512,  356,  349,  512,  350,  351,  352,
      792,  491,  673,  792,  603,  818,  448,  352,  871,  792,
     1029,  353,  818,  736,  491, 1027,  644, 1023,  511,  354,
      355,  644,  644,  644,  355,  849,  644,  492,  575, 1016,
     1377,  669, 1015,  644,  644,  644,  669,  669,  669,  854,

      492,  669,  803,  669,  512,  803, 1014, 1013,  669,  669,
      669,  803, 1012,  357,  356,  361,  361,  362,  361,  361,
      361,  361,  363,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  364,  364,  361,  361,  361,  361,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  361,  361,  361,  366,  361,  479,  829,  829,  829,
      479, 1011, 1010,  603,  757,  480,  481,  482,  811, 1377,
      483,  809,  809,  694,  484,  485,  812,  812,  854,  486,

     1009,  848,  848,  487,  488,  877,  877,  877,  757,  357,
      361,  361,  362,  361,  361,  361,  361,  363,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  364,  364,  361,
      361,  361,  361,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  361,  361,  361,  365,
      361,  629,  426,  864,  674,  694,  629,  629,  629, 1007,
      861,  629,  865,  629,  818,  510, 1006,  917,  629,  629,
      630,  436,  818,  633,  818,  513,  918,  919,  633,  633,

      633,  920, 1005,  633,  511,  633,  510, 1004, 1003,  765,
      633,  633,  633,  645,  646,  647,  648,  920,  649,  862,
      490, 1002,  650,  651,  357,  511,  968,  652,  671, 1001,
      512,  653,  654,  671,  671,  671,  998,  991,  671,  491,
      671,  786,  787,  788,  917,  671,  671,  671,  788,  788,
      788,  512,  517,  918,  988,  599,  680,  987,  599,  986,
      789,  680,  680,  680,  599,  492,  680,  789,  681,  770,
      989,  687,  985,  680,  680,  680,  687,  687,  687,  990,
      510,  687,  984,  687,  983,  989,  690,  982,  687,  687,
      687,  690,  690,  690,  990,  789,  690,  673,  690,  511,

      757,  575,  789,  690,  690,  690,  703,  703,  703,  981,
      757,  703,  757,  575,  813,  813,  813,  980,  703,  703,
      703,  979,  978,  405,  977,  512,  793,  793,  794,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  370,  370,  370,  793,  793,  793,
      793,  793,  793,  370,  370,  793,  793,  793,  793,  370,
      370,  370,  370,  370,  370,  370,  370,  795,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  793,  793,  793,  370,  793,  404,  404,  404,
      837,  838,  852,  787,  853,  839,  405,  938,  976,  840,

      841,  975,  854,  974,  842,  856,  857,  858,  843,  844,
      973,  855,  858,  858,  858,  972,  858,  858,  858,  872,
      872,  872,  971,  970,  789,  886,  887,  888,  405,  969,
      928,  789,  968,  966,  814,  789,  829,  829,  829,  905,
      887,  888,  923,  923,  923,  915,  855,  877,  877,  877,
      956,  405,  886,  887,  888,  888,  887,  888,  955,  789,
      905,  887,  888,  829,  829,  829,  789,  877,  877,  877,
      789,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  370,
      370,  370,  863,  863,  863,  863,  863,  863,  370,  370,

      863,  863,  863,  863,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  863,  863,  863,
      370,  863,  404,  404,  404,  829,  829,  829,  908,  857,
      909,  405,  909,  858,  909,  912,  913,  914,  854,  914,
      914,  914,  854,  914,  914,  914,  954,  855,  924,  924,
      924,  855,  925,  953,  789,  952,  951,  405,  789,  877,
      877,  877,  789,  919,  950,  949,  873,  920,  957,  913,
      958,  958,  914,  958,  947,  959,  960,  961,  854,  885,
      946,  854,  855,  920,  945,  368,  855,  855,  368,  789,

      855,  368,  792,  789,  789,  792,  944,  789,  961,  961,
      961,  792,  926,  943,  961,  961,  961,  803,  370,  383,
      803,  370,  383,  927,  370,  383,  803,  789,  964,  964,
      964,  942,  855,  789,  941,  855,  940,  405,  939,  789,
      965,  965,  965,  938,  925,  992,  960,  993,  936,  405,
      993,  961,  993,  935,  934,  854,  994,  995,  996,  933,
      854,  932,  789,  931,  855,  996,  996,  996,  789,  855,
      996,  996,  996,  930,  929,  789,  999,  999,  999, 1000,
     1000, 1000,  928,  925,  789,  405,  922,  870,  405,  789,
     1018,  995, 1019,  921,  926, 1019,  996, 1019,  867,  855,

      854, 1020, 1021, 1022,  855,  854, 1022, 1022, 1022,  855,
      789, 1022, 1022, 1022,  855, 1040, 1041, 1042,  916,  789,
      789,  915,  373,  907,  789,  789, 1024, 1024, 1024,  694,
      789,  694,  906,  926,  789,  405, 1025, 1025, 1025,  904,
      925, 1046, 1046, 1046,  855,  405, 1026, 1026, 1026,  855,
      925, 1038, 1021, 1039,  903,  789, 1039, 1022, 1039,  902,
      789,  854, 1042, 1042, 1042,  789,  854,  901,  900,  789,
      855,  899, 1042, 1042, 1042,  855, 1044, 1044, 1044,  898,
      465,  789,  897,  465,  896,  405,  465, 1053, 1041, 1054,
      926,  789, 1045, 1045, 1045,  926,  925,  854,  895,  894,

      926,  405, 1054, 1042, 1054,  855,  855, 1060, 1060, 1060,
      855,  893,  854, 1055, 1056, 1057,  789, 1057, 1057, 1057,
      892,  855,  891, 1057, 1057, 1057,  789,  890, 1058, 1058,
     1058,  889,  789,  884,  883,  882,  789,  405, 1064, 1056,
     1065,  855,  789, 1059, 1059, 1059,  926,  925,  854, 1065,
     1057, 1065,  405, 1066, 1067, 1068,  855,  855,  881,  854,
      880,  926, 1068, 1068, 1068,  879,  878,  789,  855,  876,
      875,  789,  789,  874, 1068, 1068, 1068,  789, 1069, 1069,
     1069,  789, 1070, 1070, 1070,  811,  925,  405, 1071, 1071,
     1071,  405,  855,  789, 1073, 1067, 1074,  926, 1074, 1068,

     1074,  603,  603,  855,  854,  723,  870,  789,  854,  869,
     1075, 1076, 1077,  855,  868,  867,  789,  855, 1077, 1077,
     1077, 1077, 1077, 1077, 1078, 1078, 1078,  866,  789,  789,
     1079, 1079, 1079,  405,  925,  538,  926,  789,  538,  405,
      789,  538,  926, 1080, 1080, 1080,  713,  860,  855, 1082,
     1076, 1083,  855,  859,  785, 1083, 1077, 1083,  850,  854,
     1075, 1076, 1077,  694,  789,  854,  846,  845,  855, 1077,
     1077, 1077,  789,  816,  855,  789, 1077, 1077, 1077,  789,
     1084, 1084, 1084,  773,  926, 1086, 1086, 1086,  789,  405,
     1085, 1085, 1085,  772,  925,  789,  768,  926,  767,  405,

     1082, 1076, 1083,  855,  836, 1083, 1077, 1083,  835,  855,
      854, 1087, 1087, 1087,  789,  854, 1089, 1089, 1089,  855,
      405,  834,  833,  789,  855, 1088, 1088, 1088,  832,  925,
      789, 1090, 1090, 1090,  405, 1092, 1092, 1092,  831,  926,
      405, 1091, 1091, 1091,  926,  925, 1093, 1093, 1093,  830,
      405, 1095, 1095, 1095,  855,  405, 1094, 1094, 1094,  855,
      925,  828, 1096, 1096, 1096,  405, 1098, 1098, 1098,  827,
      926,  405, 1097, 1097, 1097,  826,  925,  825,  824,  926,
      823,  405, 1099, 1099, 1099, 1101, 1101, 1101,  822,  926,
      821,  405, 1100, 1100, 1100,  926,  925, 1102, 1102, 1102,

      820,  405, 1104, 1104, 1104,  926,  405, 1103, 1103, 1103,
      926,  925, 1105, 1105, 1105,  819,  405, 1107, 1107, 1107,
      926,  405,  743, 1106, 1106, 1106,  926,  925, 1108, 1108,
     1108,  436,  405,  603, 1109, 1109, 1109,  405,  925,  926,
     1110, 1110, 1110,  405,  807,  806,  926,  802, 1111, 1111,
     1111, 1112, 1112, 1112,  801,  925,  926,  405,  800,  799,
      405,  926, 1113, 1113, 1113, 1114, 1114, 1114, 1116, 1116,
     1116,  926,  798,  797,  405,  796,  791,  926, 1115, 1115,
     1115,  790,  925, 1117, 1117, 1117,  710,  405,  926, 1118,
     1118, 1118,  405,  925,  926, 1119, 1119, 1119,  405, 1120,

     1120, 1120, 1121, 1121, 1121,  926,  925,  785,  405,  783,
      705,  405, 1122, 1122, 1122,  705,  926, 1123, 1123, 1123,
      694,  694,  926, 1125, 1125, 1125,  405, 1124, 1124, 1124,
      778,  925,  926, 1126, 1126, 1126,  405, 1127, 1127, 1127,
      777,  925,  405,  926,  776,  775,  405,  774,  773,  926,
     1128, 1128, 1128, 1129, 1129, 1129,  926,  772,  769, 1130,
     1130, 1130,  405,  925,  768,  767,  926,  764,  405, 1131,
     1131, 1131,  763, 1132, 1132, 1132,  762,  926, 1134, 1134,
     1134,  926,  405, 1133, 1133, 1133,  761,  925, 1135, 1135,
     1135,  926,  405,  760, 1136, 1136, 1136,  405,  925, 1137,

     1137, 1137,  759,  405,  926, 1138, 1138, 1138, 1139, 1139,
     1139,  758,  925,  926,  405,  753,  752,  405, 1140, 1140,
     1140,  751,  750,  926, 1141, 1141, 1141, 1142, 1142, 1142,
      749,  925,  926,  405,  748,  746,  405,  926, 1143, 1143,
     1143, 1144, 1144, 1144,  745, 1145, 1145, 1145,  926,  925,
      405,  744,  743,  926,  405, 1146, 1146, 1146, 1147, 1147,
     1147,  705,  926,  638, 1148, 1148, 1148,  405,  925, 1149,
     1149, 1149,  926,  405, 1150, 1150, 1150,  742, 1151, 1151,
     1151,  926,  925,  405, 1152, 1152, 1152,  405, 1153, 1153,
     1153,  436,  926,  436, 1154, 1154, 1154,  405,  925,  926,

     1155, 1155, 1155,  405, 1156, 1156, 1156,  738,  737,  926,
     1157, 1157, 1157,  405,  925, 1158, 1158, 1158,  926,  405,
     1159, 1159, 1159,  926, 1160, 1160, 1160,  732,  925,  405,
      732,  603,  926,  405, 1161, 1161, 1161,  603,  926,  600,
     1162, 1162, 1162, 1163, 1163, 1163,  726,  925,  926,  405,
      725,  724,  405,  723,  926, 1164, 1164, 1164, 1165, 1165,
     1165, 1166, 1166, 1166,  926,  925,  722,  405,  721,  926,
      405, 1167, 1167, 1167, 1168, 1168, 1168,  720,  926,  719,
     1169, 1169, 1169,  405,  925, 1170, 1170, 1170,  926,  405,
     1171, 1171, 1171,  718, 1172, 1172, 1172,  926,  925,  405,

     1173, 1173, 1173,  405, 1174, 1174, 1174,  717,  716,  926,
     1175, 1175, 1175,  405,  925,  926, 1176, 1176, 1176,  405,
     1177, 1177, 1177,  715,  714,  926, 1178, 1178, 1178,  405,
      925, 1179, 1179, 1179,  926,  405, 1180, 1180, 1180,  926,
     1181, 1181, 1181,  713,  925,  405,  712,  711,  926,  405,
     1182, 1182, 1182,  710,  926,  705, 1183, 1183, 1183, 1184,
     1184, 1184,  704,  925,  926,  405,  647,  567,  405,  565,
      926, 1185, 1185, 1185, 1186, 1186, 1186, 1187, 1187, 1187,
      926,  925,  357,  405,  574,  926,  405, 1188, 1188, 1188,
     1189, 1189, 1189,  573,  926,  698, 1190, 1190, 1190,  405,

      925, 1191, 1191, 1191,  926,  405, 1192, 1192, 1192,  694,
     1193, 1193, 1193,  926,  925,  405, 1194, 1194, 1194,  405,
     1195, 1195, 1195,  554,  553,  926, 1196, 1196, 1196,  405,
      925,  926, 1197, 1197, 1197,  405, 1198, 1198, 1198,  357,
      692,  926, 1199, 1199, 1199,  405,  925, 1200, 1200, 1200,
      926,  405, 1201, 1201, 1201,  926, 1202, 1202, 1202,  573,
      925,  405,  547,  544,  926,  405, 1203, 1203, 1203,  691,
      926,  540, 1204, 1204, 1204, 1205, 1205, 1205,  539,  925,
      926,  405,  689,  688,  405,  534,  926, 1206, 1206, 1206,
     1207, 1207, 1207, 1208, 1208, 1208,  926,  925,  686,  405,

      573,  926,  405, 1209, 1209, 1209, 1210, 1210, 1210,  528,
      926,  683, 1211, 1211, 1211,  405,  925, 1212, 1212, 1212,
      926,  405, 1213, 1213, 1213,  523, 1214, 1214, 1214,  926,
      925,  405, 1215, 1215, 1215,  405, 1216, 1216, 1216,  679,
      678,  926, 1217, 1217, 1217,  405,  925,  926, 1218, 1218,
     1218,  405, 1219, 1219, 1219,  520,  677,  926, 1220, 1220,
     1220,  405,  925, 1221, 1221, 1221,  926,  405, 1222, 1222,
     1222,  926, 1223, 1223, 1223,  676,  925,  405,  515,  514,
      926,  405, 1224, 1224, 1224,  672,  926,  573, 1225, 1225,
     1225, 1226, 1226, 1226,  670,  925,  926,  405,  668,  497,

      405,  667,  926, 1227, 1227, 1227, 1228, 1228, 1228, 1229,
     1229, 1229,  926,  925,  666,  405,  495,  926,  405, 1230,
     1230, 1230, 1231, 1231, 1231,  494,  926,  663, 1232, 1232,
     1232,  405,  925, 1233, 1233, 1233,  926,  405, 1234, 1234,
     1234,  662, 1235, 1235, 1235,  926,  925,  405, 1236, 1236,
     1236,  405, 1237, 1237, 1237,  661,  660,  926, 1238, 1238,
     1238,  405,  925,  926, 1239, 1239, 1239,  405, 1240, 1240,
     1240,  659,  658,  926, 1241, 1241, 1241,  405,  925, 1242,
     1242, 1242,  926,  405, 1243, 1243, 1243,  926, 1244, 1244,
     1244,  657,  925,  405,  656,  655,  926,  405, 1245, 1245,

     1245,  643,  926,  474, 1246, 1246, 1246, 1247, 1247, 1247,
      357,  925,  926,  405,  467,  466,  405,  638,  926, 1248,
     1248, 1248, 1249, 1249, 1249, 1250, 1250, 1250,  926,  925,
      462,  405,  637,  926,  405, 1251, 1251, 1251, 1252, 1252,
     1252,  636,  926,  453, 1253, 1253, 1253,  405,  925, 1254,
     1254, 1254,  926,  405, 1255, 1255, 1255,  452, 1256, 1256,
     1256,  926,  925,  405, 1257, 1257, 1257,  405, 1258, 1258,
     1258,  451,  452,  926, 1259, 1259, 1259,  405,  925,  926,
     1260, 1260, 1260,  405, 1261, 1261, 1261,  635,  441,  926,
     1262, 1262, 1262,  405,  925, 1263, 1263, 1263,  926,  405,

     1264, 1264, 1264,  926, 1265, 1265, 1265,  436,  925,  405,
      357,  625,  926,  405, 1266, 1266, 1266,  624,  926,  419,
     1267, 1267, 1267, 1268, 1268, 1268,  357,  925,  926,  405,
      622,  621,  405,  412,  926, 1269, 1269, 1269, 1270, 1270,
     1270, 1271, 1271, 1271,  926,  925,  408,  405,  615,  926,
      405, 1272, 1272, 1272, 1273, 1273, 1273,  357,  926,  395,
     1274, 1274, 1274,  405,  925, 1275, 1275, 1275,  926,  405,
     1276, 1276, 1276,  603, 1277, 1277, 1277,  926,  925,  405,
     1278, 1278, 1278,  405, 1279, 1279, 1279,  389,  598,  926,
     1280, 1280, 1280,  405,  925,  926, 1281, 1281, 1281,  405,

     1282, 1282, 1282,  384,  595,  926, 1283, 1283, 1283,  405,
      925, 1284, 1284, 1284,  926,  405, 1285, 1285, 1285,  926,
      925, 1286, 1286, 1286,  593,  405,  591,  590,  926, 1287,
     1287, 1287,  589,  925,  926, 1288, 1288, 1288,  405, 1289,
     1289, 1289,  588,  925,  926, 1290, 1290, 1290,  405,  584,
      926,  581, 1291, 1291, 1291,  580,  925, 1292, 1292, 1292,
      926,  405, 1293, 1293, 1293,  926,  925, 1294, 1294, 1294,
      926,  405, 1295, 1295, 1295,  926,  925, 1296, 1296, 1296,
      371,  405,  369,  926, 1297, 1297, 1297,  574,  573,  926,
     1298, 1298, 1298,  926, 1299, 1299, 1299,  357,  567,  926,

     1300, 1300, 1300, 1301, 1301, 1301,  926, 1302, 1302, 1302,
      357,  926, 1303, 1303, 1303,  567,  926, 1304, 1304, 1304,
      567,  926, 1305, 1305, 1305,  567,  926, 1306, 1306, 1306,
      357,  926, 1307, 1307, 1307, 1308, 1308, 1308,  926, 1309,
     1309, 1309,  357,  565,  926, 1310, 1310, 1310,  926, 1311,
     1311, 1311,  357,  357,  926,  357,  563,  926, 1312, 1312,
     1312,  926, 1313, 1313, 1313,  357,  926, 1314, 1314, 1314,
      357,  926, 1315, 1315, 1315,  357,  926, 1316, 1316, 1316,
      357,  926, 1317, 1317, 1317,  357,  926,  357,  357,  926,
     1318, 1318, 1318,  926, 1319, 1319, 1319,  357,  357,  926,

     1320, 1320, 1320,  926, 1321, 1321, 1321, 1322, 1322, 1322,
      357,  357,  926, 1323, 1323, 1323,  926, 1324, 1324, 1324,
      357,  926, 1325, 1325, 1325,  357,  926, 1326, 1326, 1326,
      357,  926, 1327, 1327, 1327,  357,  926, 1328, 1328, 1328,
     1329, 1329, 1329,  357,  926, 1330, 1330, 1330,  926, 1331,
     1331, 1331,  553,  357,  926, 1332, 1332, 1332,  926,  551,
      357,  926, 1333, 1333, 1333,  357,  357,  926, 1334, 1334,
     1334,  926, 1335, 1335, 1335,  357,  926, 1336, 1336, 1336,
      357,  926, 1337, 1337, 1337,  551,  926, 1338, 1338, 1338,
      357,  926,  357,  357,  926, 1339, 1339, 1339,  357,  926,

     1340, 1340, 1340,  926, 1341, 1341, 1341,  547,  357,  926,
     1342, 1342, 1342, 1343, 1343, 1343,  926, 1344, 1344, 1344,
      357,  544,  926, 1345, 1345, 1345,  926, 1346, 1346, 1346,
      357,  926, 1347, 1347, 1347,  357,  926, 1348, 1348, 1348,
      357,  926, 1349, 1349, 1349, 1350, 1350, 1350,  357,  926,
     1351, 1351, 1351,  539,  926, 1352, 1352, 1352,  926, 1353,
     1353, 1353,  357,  357,  926,  357,  534,  926, 1354, 1354,
     1354,  926, 1355, 1355, 1355,  534,  357,  926, 1356, 1356,
     1356,  926, 1357, 1357, 1357,  534,  926, 1358, 1358, 1358,
      528,  926, 1359, 1359, 1359,  528,  926,  357,  528,  926,

     1360, 1360, 1360,  520,  926, 1361, 1361, 1361,  357,  926,
     1362, 1362, 1362,  926, 1363, 1363, 1363, 1364, 1364, 1364,
      466,  357,  926, 1365, 1365, 1365,  926, 1366, 1366, 1366,
      357,  357,  926, 1367, 1367, 1367,  926, 1368, 1368, 1368,
      497,  926, 1369, 1369, 1369,  497,  926, 1370, 1370, 1370,
     1371, 1371, 1371,  497,  926, 1372, 1372, 1372,  497,  926,
     1373, 1373, 1373,  474,  926, 1374, 1374, 1374,  926,  357,
      474,  926, 1375, 1375, 1375,  357,  474,  926, 1376, 1376,
     1376,  926, 1300, 1300, 1300,  357,  543,  926,  357,  543,
      357,  926,  543,  357,  546,  357,  926,  546,  357,  552,

      546,  926,  552,  357,  926,  552,  357,  368,  357,  926,
      368,  357,  370,  368,  926,  370,  466,  383,  370,  926,
      383,  465,  538,  383,  465,  538,  926,  465,  538,  357,
      357,  357,  926,  357,  357,  357,  926,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  270,  270,  270,

      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  388,  388,  388,
      419,  388,  388,  424,  388,  357,  388,  388,  388,  419,
      388,  388,  388,  388,  388,  388,  388,  390,  390,  390,
      419,  390,  390,  390,  390,  412,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  394,  394,  394,
      417,  394,  394,  357,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  412,  394,  394,  399,  399,  399,

      412,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  401,  401,  401,
      357,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  406,  406,  406,
      543,  357,  357,  543,  406,  357,  543,  546,  406,  357,
      546,  406,  357,  546,  406,  411,  411,  411,  357,  395,
      411,  400,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  357,  411,  411,  416,  416,  416,  395,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  418,  418,  418,  395,  395,

      418,  418,  418,  389,  418,  418,  418,  418,  418,  418,
      418,  418,  357,  418,  418,  423,  423,  423,  389,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  425,  425,  425,  389,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  433,  389,  552,  370,  357,
      552,  370,  433,  552,  370,  383,  433,  384,  383,  433,
      357,  383,  433,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      357,  435,  435,  446,  446,  538,  997,  357,  538,  997,

      446,  538,  997,  357,  446,  371,  357,  446,  446,  357,
      446,  457,  357,  357,  369,  357,  357,  357,  357,  357,
      457,  357,  457,  357,  357,  457, 1377, 1377,  457,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  473,
     1377,  473, 1377,  473,  473,  473,  473,  473,  473, 1377,
      473, 1377,  473,  473, 1377,  473, 1377, 1377,  473,  496,
      496,  496, 1377,  496,  496,  496,  496,  496,  496, 1377,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  501,
      501,  501, 1377,  501,  501,  501,  501,  501,  501, 1377,

      501,  501,  501,  501,  501, 1377,  501,  501,  501,  516,
      516,  516, 1377,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516, 1377,  516, 1377,  516,  516,  517,
      517,  517, 1377,  517,  517,  517,  517,  517,  517,  517,
      517, 1377,  517,  517, 1377,  517, 1377,  517,  517,  518,
     1377,  518, 1377,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518, 1377,  518, 1377,  518,  518,  527,
     1377,  527, 1377,  527,  527,  527,  527,  527,  527, 1377,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  533,
     1377,  533, 1377,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  550,
      550,  550, 1377,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  556,
      556,  556, 1377,  556,  556,  556,  556, 1377,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  562,
      562,  562, 1377,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  564,
     1377, 1377,  564, 1377,  564, 1377,  564, 1377,  564, 1377,
      564, 1377, 1377,  564, 1377, 1377,  564,  566,  566,  566,
     1377,  566, 1377,  566,  566,  566,  566, 1377,  566, 1377,

      566,  566, 1377,  566, 1377,  566,  566,  592,  592,  592,
     1377,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  594,  594,  594,
     1377,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  388,  388,  388,
     1377,  388,  388, 1377,  388, 1377,  388,  388,  388, 1377,
      388,  388,  388,  388,  388,  388,  388,  602,  602,  602,
     1377,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602, 1377,  602,  602,  604,  604,  604,
     1377,  604,  604,  604,  604,  604,  604,  604,  604,  604,

      604,  604,  604,  604,  604,  604,  604,  394,  394,  394,
     1377,  394,  394, 1377,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394, 1377,  394,  394,  608,  608,  608,
     1377,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  611,  611,  611,
     1377,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  616,  616,  616,
     1377,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  406,  406,  406,
     1377, 1377, 1377, 1377,  406, 1377, 1377, 1377,  406, 1377,

     1377,  406, 1377, 1377,  406,  411,  411,  411, 1377, 1377,
      411, 1377,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411, 1377,  411,  411,  418,  418,  418, 1377, 1377,
      418,  418,  418, 1377,  418,  418,  418,  418,  418,  418,
      418,  418, 1377,  418,  418,  425,  425,  425, 1377,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  433, 1377, 1377, 1377, 1377,
     1377, 1377,  433, 1377, 1377, 1377,  433, 1377, 1377,  433,
     1377, 1377,  433,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

     1377,  435,  435,  446,  446, 1377, 1377, 1377, 1377, 1377,
      446, 1377, 1377, 1377,  446, 1377, 1377,  446,  446, 1377,
      446,  457, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
      457, 1377,  457, 1377, 1377,  457, 1377, 1377,  457,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  473,
     1377,  473, 1377,  473,  473,  473,  473,  473,  473, 1377,
      473, 1377,  473,  473, 1377,  473, 1377, 1377,  473,  496,
      496,  496, 1377,  496,  496,  496,  496,  496,  496, 1377,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  501,

      501,  501, 1377,  501,  501,  501,  501,  501,  501, 1377,
      501,  501,  501,  501,  501, 1377,  501,  501,  516,  516,
      516, 1377,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516, 1377,  516, 1377,  516,  516,  517,  517,
      517, 1377,  517,  517,  517,  517,  517,  517,  517,  517,
     1377,  517,  517, 1377,  517, 1377,  517,  517,  518, 1377,
      518, 1377,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518, 1377,  518, 1377,  518,  518,  527, 1377,
      527, 1377,  527,  527,  527,  527,  527,  527, 1377,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  533, 1377,

      533, 1377,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  693,  693,
      693, 1377,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693, 1377,  693,  693,  695,  695,
      695, 1377,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  564, 1377,
     1377,  564, 1377,  564, 1377,  564, 1377,  564, 1377,  564,
     1377, 1377,  564, 1377, 1377,  564,  566,  566,  566, 1377,
      566, 1377,  566,  566,  566,  566, 1377,  566, 1377,  566,
      566, 1377,  566, 1377,  566,  566,  706,  706,  706, 1377,

      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  709,  709,  709, 1377,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  592,  592,  592, 1377,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  594,  594,  594, 1377,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  727,  727,  727, 1377,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727, 1377,  727,  727,  388,  388,  388, 1377,

      388,  388, 1377,  388, 1377,  388,  388,  388, 1377,  388,
      388,  388,  388,  388,  388,  388,  608,  608,  608, 1377,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  609,  609,  609, 1377,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  611,  611,  611, 1377,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  612,  612,  612, 1377,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  394,  394,  394, 1377,

      394,  394, 1377,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394, 1377,  394,  394,  406,  406,  406, 1377,
     1377, 1377, 1377,  406, 1377, 1377, 1377,  406, 1377, 1377,
      406, 1377, 1377,  406,  411,  411,  411, 1377, 1377,  411,
     1377,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411, 1377,  411,  411,  418,  418,  418, 1377, 1377,  418,
      418,  418, 1377,  418,  418,  418,  418,  418,  418,  418,
      418, 1377,  418,  418,  425,  425,  425, 1377,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435, 1377,  435,  435,  496,  496,  496, 1377,  496,  496,
      496,  496,  496,  496, 1377,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  501,  501,  501, 1377,  501,  501,
      501,  501,  501,  501, 1377,  501,  501,  501,  501,  501,
     1377,  501,  501,  518, 1377,  518, 1377,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518, 1377,  518,
     1377,  518,  518,  516,  516,  516, 1377,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516, 1377,  516,
     1377,  516,  516,  527, 1377,  527, 1377,  527,  527,  527,

      527,  527,  527, 1377,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  533, 1377,  533, 1377,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  779,  779,  779, 1377,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
     1377,  779,  779,  784,  784,  784, 1377,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  808,  808,  808, 1377,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
     1377,  808,  808,  847,  847,  847, 1377,  847,  847,  847,

      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
     1377,  847,  847,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  962, 1377, 1377, 1377,  962, 1377, 1377,
     1377, 1377, 1377, 1377, 1377,  962, 1377,  962, 1377, 1377,
      962,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,

     1008, 1008, 1008, 1008, 1377, 1008, 1008, 1377, 1008, 1008,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1377, 1017, 1017, 1377, 1017, 1017, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1377, 1028, 1028, 1377, 1028, 1028,   75, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,

     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377
    } ;

static yyconst flex_int16_t yy_chk[6711] =
    {   0,
        0,    1,  368,    1,    1,    2,  438,    2,    2,  431,
        3,  368,    3,    3,    0,   80,  438,    1,  431,   80,
       89,    2,  391,  391,   89,    1,    3,  397,   81,    2,
      360,   90,  396,   99,    3,  360,  360,  360,  397,  396,
      360,  102,  360,  374,  439,  101,  463,  360,  360,  360,
        0,  397,  374,  103,  463,  103,  396, 1048,  439,  101,
        1,   80,   81,  102,    2,   90,   89,   99,  103,    3,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,  105,    9,    9,   98,    9,  123,
      116,   98,    9,   10,  105,   10,   10,  113,   10,    9,
      112,  106,   10,   11,  112,   11,   11,    9,   11,   10,
       12,  116,   12,   12,  106,   12,  104,   10,  123,   11,
       91,   91,   91,  104,  104,  125,   12,   11,  140,   91,

       91,  113,   11,   98,   12,  326,  115,  104,  115,   12,
      228,  252,    9,  229,  229,  385,  112,  253,  253,  433,
      449,  115,   10,  464,  385,  557,  557,  140,  433,  125,
      449,   91,   11, 1049,  326,  464, 1050,  228,  252,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   15,  132,   15,   15,   16,   15,   16,   16,  169,
       16,   17,  124,   17,   17,  516,  124,   15,  169,  142,
       17,   16,  153,  160, 1051,   15,  170,   17,  131,   16,
       15,  516,  131,  180,   16,   17,  132,  144,  144,   18,
       17,   18,   18,  141,  192,  171,  173,  141,   18,   19,
      177,   19,   19,  142,   19,   18,  153,  160,  124,   23,
       15,   23,   23,   18,   16,   19,  169,  152,   18,  163,
       17,  152,   19,   19,  131,   23,   20,  164,   20,   20,
      159,   20,  170,   23,  159,  183,  195,  163,   23,  141,
      180,  205,   20,  144,  284,  164,  192,  214,   18,   20,

       20,  171,  173,  404,  404,  404,  177,  455,   19,  425,
      249,  249,  404,  152, 1052,  402,  284, 1061,   23,  457,
      195,  455,  163,  402,  402,  205,  159,  425,  183,  460,
      164,  214,  249,  457,  460,   20,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   24,  220,   24,

       24,   31,  165,   31,   31,  143,  143,  143,  222,  525,
      236,  525,  244,   24,  143,  194,  268,   31, 1062,  194,
      165,   24,  364,  364,  364,   31,   24,   32,   32,   32,
       32,  364,  364,   32,  166,  167,  569,  577,  577,  568,
      220,  166,  222,   32,  236,  166,  244,  568,  569,  655,
      268,   32,  166,  167,  167,  165,   24,   25,   25,  655,
       31,  194,  143,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   32,  166,  167,   25,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   33,  204,   33,   33,   34,  204,   34,   34,
     1063,   35,  576,   35,   35,  174,  168,   36,   33,   36,
       36,  576,   34,  724,  181,  174,   33,   35,  175,  174,
       34,  176,  176,   36,  168,   35,   39,  182,   39,   39,
       49,   36,   49,   49,  185, 1072,  178,  178,   39,  204,
      175,   40,   39,   40,   40,  178,   49,  145,  145,  145,
       39,   33,  724,   40,   49,   34,  145,   40,  179,  168,
       35,  174,  184,  274,  178,   40,   36,   37,  179,   37,
       37,  181,  656, 1081,  175, 1282,  184,  176,   45,   37,

       45,   45,  281,   37,  182,   39,  198,  198,  656,   49,
      185,   37,   37,  178,   45, 1300,   37,  274,   37,  145,
       40,  293,   45,   45,  145,  188,  234,   45,  209,   46,
      188,   46,   46,  209,  213,  179,  281,  221,  213,  184,
       47,  221,   47,   47,   37,   46,   37,   38,   38,   38,
       38,  235,   47,   46,   46,  235,   47,   45,   46,   38,
      242,  247,  198,   38,   47,  470,  291,  302,  234,  476,
      470,   38,   38,  476,  428,  429,   38,  293,   38,  529,
      213,  428,  188,  221,  529,  209,  429,  578,   46,  406,
      406,  406,  428,  429,  706,  706,  578,  235,  406,   47,

      291,  302,  242,  247,   38, 1047,   38,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   43,  243,
       43,   43,  266,  243,   48,  310,   48,   48,  254,   50,
       43,   50,   50,  318,   43,  257,   48,  797,  608,  226,
       48,  261,   43,   43,  254,   50,  797,   43,   48,   43,

      226,  257,  248,   50,  437,  250,  248,  261,   57,  310,
       57,   57,  608,   57,  266,  243,  250,  318,   58,  226,
       58,   58,  258,   58,   57,   43,  258,   43,   44,   44,
       44,   44,   57,   48,   58,  250,  254,   57,   50,  330,
       44,  338,   58,  257,   44,  226,  226,   58,  248,  261,
      346,  684,   44,   44,  367,  765,  684,   44,  627,   44,
      437,  250,  250,  367,  443,  443,  765,   57,  258,  627,
      367,  367,  367,  330,  605,  338,  627,   58, 1037,  367,
      367,  443,  605,  605,  346,   44, 1036,   44,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  283,  283,  631,  680,  267,  854,  854,  273,  267,
      280,  354,  273, 1035,  280,   55,   55,  631,  392, 1034,
      680,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,  259,  354,   59,   55,   59,   59,
       60,  267,   60,   60,  273,   59,  280,  283,  227,   60,
      259,  290,   59,  403,  628,  290,   60,  392,  259,  227,
       59,  446,  446,  227,   60,   59,  619,  619,  619,   60,
      446,  744,  628, 1033,   63,  619,   63,   63,  227, 1032,

      519,  744,  369,  301,  309,  910,  910,  301,  309,  446,
       63,  369,  259,  319,  319,   59,  519,  290,   63,   60,
       61,   61,  403,   63,  227,  227,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  301,
      309,  260,   61,   63,   64,  260,   64,   64,  519,  369,
      260,   67,  260,   67,   67,  251,   67,  921, 1031,  319,
       64, 1030, 1029,  618,  427,  493,  251,   67,   64,  458,
      251,  618,  618,   64,  260,   67,   68,  611,   68,   68,
       67,   68,  427,  458,  317,  251,  329,  337,  317,  635,

      329,  337,   68,  345,  353,  493,  558,  345,  353,  606,
       68,  611,  921,   64,   65,   68,   65,   65,  635,   65,
       67,  251,  251,   65,   65,   65,  376,  427,  629,  376,
       65,  493,  434,  355, 1027,  376,  458,  355,   65,   65,
      317,  434,  329,  337,  355,   68,  629,  739,  387,  345,
      353,  387,  407,  407,  407,  558, 1023,  387,  606,  697,
      376,  407,  410,  410,  410,  739,  355,  489, 1016,  610,
      376,  410,  613,   65,   66,  730,   66,   66,  489,   66,
      610,  508,  387,   66,   66,   66,  634,  634,  634,  434,
       66, 1015,  387,  610,  731,  393,  613,  489,   66,   66,

      393,  393,  393,  745,  508,  393,  766,  393,  697,  407,
      398,  410,  393,  393,  393,  398,  398,  398,  731,  745,
      398, 1014,  398,  489,  730, 1013, 1012,  398,  398,  398,
      508, 1011,  766,   66,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   73,  415,   73,   73,   73,

      513,  415,  415,  415,  648, 1010,  415,   73,  415,  448,
      448,   73,  794,  415,  415,  415,  422, 1009,  448,   73,
       73,  422,  422,  422,   73,  648,  422,  771,  422,  804,
      513,  490,  770,  422,  422,  422,  782,  448,  620,  620,
      620,  696,  490,  770,  665, 1007,  898,  620,  675,  696,
      696,  794,  648,  771,   73,   74,  513,   74,   74,   74,
      713,  490,  898,  713,  810, 1006,  448,   74,  804,  713,
     1005,   74, 1004,  620,  665, 1002,  478,  998,  675,   74,
       74,  478,  478,  478,   74,  782,  478,  490,  478,  988,
      851,  500,  987,  478,  478,  478,  500,  500,  500,  851,

      665,  500,  723,  500,  675,  723,  986,  985,  500,  500,
      500,  723,  984,  810,   74,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,  223,  757,  757,  757,
      223,  983,  982,  729,  981,  223,  223,  223,  734,  855,
      223,  729,  729,  781,  223,  223,  734,  734,  855,  223,

      980,  781,  781,  223,  223,  818,  818,  818,  979,  223,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  430,  430,  864,  509,  849,  430,  430,  430,  977,
      861,  430,  864,  430,  976,  509,  975,  866,  430,  430,
      430,  440,  974,  440,  973,  510,  866,  867,  440,  440,

      440,  867,  972,  440,  509,  440,  510,  971,  970,  664,
      440,  440,  440,  479,  479,  479,  479,  867,  479,  861,
      664,  969,  479,  479,  849,  510,  967,  479,  504,  966,
      509,  479,  479,  504,  504,  504,  963,  956,  504,  664,
      504,  708,  708,  708,  917,  504,  504,  504,  710,  710,
      710,  510,  524,  917,  954,  807,  524,  953,  807,  952,
      708,  524,  524,  524,  807,  664,  524,  710,  524,  674,
      955,  532,  951,  524,  524,  524,  532,  532,  532,  955,
      674,  532,  950,  532,  949,  989,  537,  948,  532,  532,
      532,  537,  537,  537,  989,  708,  537,  947,  537,  674,

      946,  570,  710,  537,  537,  537,  570,  570,  570,  945,
      944,  570,  943,  570,  735,  735,  735,  942,  570,  570,
      570,  941,  940,  735,  939,  674,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  736,  736,  736,
      769,  769,  785,  785,  785,  769,  736,  937,  936,  769,

      769,  935,  785,  934,  769,  786,  786,  786,  769,  769,
      933,  785,  787,  787,  787,  932,  788,  788,  788,  813,
      813,  813,  931,  930,  786,  827,  827,  827,  813,  929,
      928,  787,  927,  925,  736,  788,  829,  829,  829,  845,
      845,  845,  872,  872,  872,  915,  785,  877,  877,  877,
      907,  872,  886,  886,  886,  888,  888,  888,  906,  786,
      905,  905,  905,  938,  938,  938,  787,  968,  968,  968,
      788,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  814,  814,  814,  826,  826,  826,  852,  852,
      852,  814,  853,  853,  853,  856,  856,  856,  852,  857,
      857,  857,  853,  858,  858,  858,  904,  852,  873,  873,
      873,  853,  873,  903,  856,  902,  901,  873,  857,  874,
      874,  874,  858,  919,  900,  899,  814,  919,  908,  908,
      908,  909,  909,  909,  897,  912,  912,  912,  908,  826,
      896,  909,  852,  919,  895, 1398,  853,  908, 1398,  856,

      909, 1398,  916,  857,  912,  916,  894,  858,  913,  913,
      913,  916,  873,  893,  914,  914,  914,  922, 1399, 1400,
      922, 1399, 1400,  874, 1399, 1400,  922,  913,  923,  923,
      923,  892,  908,  914,  891,  909,  890,  923,  889,  912,
      924,  924,  924,  885,  924,  957,  957,  957,  884,  924,
      958,  958,  958,  883,  882,  957,  959,  959,  959,  881,
      958,  880,  913,  879,  957,  960,  960,  960,  914,  958,
      961,  961,  961,  878,  876,  959,  964,  964,  964,  965,
      965,  965,  875,  965,  960,  964,  871,  870,  965,  961,
      992,  992,  992,  869,  924,  993,  993,  993,  868,  957,

      992,  994,  994,  994,  958,  993,  995,  995,  995,  992,
      959,  996,  996,  996,  993, 1020, 1020, 1020,  862,  960,
      994,  860,  859,  850,  961,  995,  999,  999,  999,  848,
      996,  847,  846,  965, 1020,  999, 1000, 1000, 1000,  844,
     1000, 1026, 1026, 1026,  992, 1000, 1001, 1001, 1001,  993,
     1001, 1018, 1018, 1018,  843,  994, 1019, 1019, 1019,  842,
      995, 1018, 1021, 1021, 1021,  996, 1019,  841,  840, 1020,
     1018,  839, 1022, 1022, 1022, 1019, 1024, 1024, 1024,  838,
     1416, 1021,  837, 1416,  836, 1024, 1416, 1038, 1038, 1038,
     1000, 1022, 1025, 1025, 1025, 1026, 1025, 1038,  835,  834,

     1001, 1025, 1039, 1039, 1039, 1018, 1038, 1046, 1046, 1046,
     1019,  833, 1039, 1040, 1040, 1040, 1021, 1041, 1041, 1041,
      832, 1039,  831, 1042, 1042, 1042, 1022,  830, 1044, 1044,
     1044,  828, 1040,  825,  824,  823, 1041, 1044, 1053, 1053,
     1053, 1038, 1042, 1045, 1045, 1045, 1025, 1045, 1053, 1054,
     1054, 1054, 1045, 1055, 1055, 1055, 1039, 1053,  822, 1054,
      821, 1046, 1056, 1056, 1056,  820,  819, 1040, 1054,  817,
      816, 1041, 1055,  815, 1057, 1057, 1057, 1042, 1058, 1058,
     1058, 1056, 1059, 1059, 1059,  812, 1059, 1058, 1060, 1060,
     1060, 1059, 1053, 1057, 1064, 1064, 1064, 1045, 1065, 1065,

     1065,  809,  808, 1054, 1064,  805,  802, 1055, 1065,  801,
     1066, 1066, 1066, 1064,  800,  799, 1056, 1065, 1067, 1067,
     1067, 1068, 1068, 1068, 1069, 1069, 1069,  798, 1057, 1066,
     1070, 1070, 1070, 1069, 1070, 1426, 1059, 1067, 1426, 1070,
     1068, 1426, 1060, 1071, 1071, 1071,  795,  791, 1064, 1073,
     1073, 1073, 1065,  790,  784, 1074, 1074, 1074,  783, 1073,
     1075, 1075, 1075,  779, 1066, 1074,  778,  776, 1073, 1076,
     1076, 1076, 1067,  775, 1074, 1068, 1077, 1077, 1077, 1075,
     1078, 1078, 1078,  773, 1070, 1080, 1080, 1080, 1076, 1078,
     1079, 1079, 1079,  772, 1079, 1077,  768, 1071,  767, 1079,

     1082, 1082, 1082, 1073,  764, 1083, 1083, 1083,  763, 1074,
     1082, 1084, 1084, 1084, 1075, 1083, 1086, 1086, 1086, 1082,
     1084,  762,  761, 1076, 1083, 1085, 1085, 1085,  760, 1085,
     1077, 1087, 1087, 1087, 1085, 1089, 1089, 1089,  759, 1080,
     1087, 1088, 1088, 1088, 1079, 1088, 1090, 1090, 1090,  758,
     1088, 1092, 1092, 1092, 1082, 1090, 1091, 1091, 1091, 1083,
     1091,  756, 1093, 1093, 1093, 1091, 1095, 1095, 1095,  755,
     1086, 1093, 1094, 1094, 1094,  754, 1094,  753,  752, 1085,
      751, 1094, 1096, 1096, 1096, 1098, 1098, 1098,  750, 1089,
      749, 1096, 1097, 1097, 1097, 1088, 1097, 1099, 1099, 1099,

      748, 1097, 1101, 1101, 1101, 1092, 1099, 1100, 1100, 1100,
     1091, 1100, 1102, 1102, 1102,  746, 1100, 1104, 1104, 1104,
     1095, 1102,  743, 1103, 1103, 1103, 1094, 1103, 1105, 1105,
     1105,  740, 1103,  727, 1106, 1106, 1106, 1105, 1106, 1098,
     1107, 1107, 1107, 1106,  726,  725, 1097,  721, 1108, 1108,
     1108, 1109, 1109, 1109,  720, 1109, 1101, 1108,  719,  718,
     1109, 1100, 1110, 1110, 1110, 1111, 1111, 1111, 1113, 1113,
     1113, 1104,  717,  716, 1111,  715,  712, 1103, 1112, 1112,
     1112,  711, 1112, 1114, 1114, 1114,  709, 1112, 1106, 1115,
     1115, 1115, 1114, 1115, 1107, 1116, 1116, 1116, 1115, 1117,

     1117, 1117, 1118, 1118, 1118, 1109, 1118,  707, 1117,  704,
      700, 1118, 1119, 1119, 1119,  698, 1110, 1120, 1120, 1120,
      695,  693, 1113, 1122, 1122, 1122, 1120, 1121, 1121, 1121,
      691, 1121, 1112, 1123, 1123, 1123, 1121, 1124, 1124, 1124,
      688, 1124, 1123, 1115,  683,  682, 1124,  678,  677, 1116,
     1125, 1125, 1125, 1126, 1126, 1126, 1118,  676,  672, 1127,
     1127, 1127, 1126, 1127,  667,  666, 1119,  663, 1127, 1128,
     1128, 1128,  662, 1129, 1129, 1129,  661, 1122, 1131, 1131,
     1131, 1121, 1129, 1130, 1130, 1130,  660, 1130, 1132, 1132,
     1132, 1124, 1130,  659, 1133, 1133, 1133, 1132, 1133, 1134,

     1134, 1134,  658, 1133, 1125, 1135, 1135, 1135, 1136, 1136,
     1136,  657, 1136, 1127, 1135,  654,  653, 1136, 1137, 1137,
     1137,  652,  651, 1128, 1138, 1138, 1138, 1139, 1139, 1139,
      650, 1139, 1131, 1138,  649,  647, 1139, 1130, 1140, 1140,
     1140, 1141, 1141, 1141,  646, 1142, 1142, 1142, 1133, 1142,
     1141,  645,  643, 1134, 1142, 1143, 1143, 1143, 1144, 1144,
     1144,  640, 1136,  638, 1145, 1145, 1145, 1144, 1145, 1146,
     1146, 1146, 1137, 1145, 1147, 1147, 1147,  637, 1148, 1148,
     1148, 1139, 1148, 1147, 1149, 1149, 1149, 1148, 1150, 1150,
     1150,  633, 1140,  632, 1151, 1151, 1151, 1150, 1151, 1142,

     1152, 1152, 1152, 1151, 1153, 1153, 1153,  624,  621, 1143,
     1154, 1154, 1154, 1153, 1154, 1155, 1155, 1155, 1145, 1154,
     1156, 1156, 1156, 1146, 1157, 1157, 1157,  617, 1157, 1156,
      616,  604, 1148, 1157, 1158, 1158, 1158,  602, 1149,  601,
     1159, 1159, 1159, 1160, 1160, 1160,  600, 1160, 1151, 1159,
      598,  597, 1160,  596, 1152, 1161, 1161, 1161, 1162, 1162,
     1162, 1163, 1163, 1163, 1154, 1163,  593, 1162,  591, 1155,
     1163, 1164, 1164, 1164, 1165, 1165, 1165,  590, 1157,  589,
     1166, 1166, 1166, 1165, 1166, 1167, 1167, 1167, 1158, 1166,
     1168, 1168, 1168,  588, 1169, 1169, 1169, 1160, 1169, 1168,

     1170, 1170, 1170, 1169, 1171, 1171, 1171,  587,  586, 1161,
     1172, 1172, 1172, 1171, 1172, 1163, 1173, 1173, 1173, 1172,
     1174, 1174, 1174,  584,  583, 1164, 1175, 1175, 1175, 1174,
     1175, 1176, 1176, 1176, 1166, 1175, 1177, 1177, 1177, 1167,
     1178, 1178, 1178,  582, 1178, 1177,  581,  580, 1169, 1178,
     1179, 1179, 1179,  579, 1170,  573, 1180, 1180, 1180, 1181,
     1181, 1181,  572, 1181, 1172, 1180,  571,  567, 1181,  565,
     1173, 1182, 1182, 1182, 1183, 1183, 1183, 1184, 1184, 1184,
     1175, 1184,  563, 1183,  561, 1176, 1184, 1185, 1185, 1185,
     1186, 1186, 1186,  560, 1178,  559, 1187, 1187, 1187, 1186,

     1187, 1188, 1188, 1188, 1179, 1187, 1189, 1189, 1189,  556,
     1190, 1190, 1190, 1181, 1190, 1189, 1191, 1191, 1191, 1190,
     1192, 1192, 1192,  555,  553, 1182, 1193, 1193, 1193, 1192,
     1193, 1184, 1194, 1194, 1194, 1193, 1195, 1195, 1195,  551,
      549, 1185, 1196, 1196, 1196, 1195, 1196, 1197, 1197, 1197,
     1187, 1196, 1198, 1198, 1198, 1188, 1199, 1199, 1199,  548,
     1199, 1198,  547,  544, 1190, 1199, 1200, 1200, 1200,  542,
     1191,  541, 1201, 1201, 1201, 1202, 1202, 1202,  539, 1202,
     1193, 1201,  536,  535, 1202,  534, 1194, 1203, 1203, 1203,
     1204, 1204, 1204, 1205, 1205, 1205, 1196, 1205,  531, 1204,

      530, 1197, 1205, 1206, 1206, 1206, 1207, 1207, 1207,  528,
     1199,  526, 1208, 1208, 1208, 1207, 1208, 1209, 1209, 1209,
     1200, 1208, 1210, 1210, 1210,  523, 1211, 1211, 1211, 1202,
     1211, 1210, 1212, 1212, 1212, 1211, 1213, 1213, 1213,  522,
      521, 1203, 1214, 1214, 1214, 1213, 1214, 1205, 1215, 1215,
     1215, 1214, 1216, 1216, 1216,  520,  515, 1206, 1217, 1217,
     1217, 1216, 1217, 1218, 1218, 1218, 1208, 1217, 1219, 1219,
     1219, 1209, 1220, 1220, 1220,  514, 1220, 1219,  512,  511,
     1211, 1220, 1221, 1221, 1221,  507, 1212,  506, 1222, 1222,
     1222, 1223, 1223, 1223,  503, 1223, 1214, 1222,  499,  497,

     1223,  495, 1215, 1224, 1224, 1224, 1225, 1225, 1225, 1226,
     1226, 1226, 1217, 1226,  494, 1225,  492, 1218, 1226, 1227,
     1227, 1227, 1228, 1228, 1228,  491, 1220,  488, 1229, 1229,
     1229, 1228, 1229, 1230, 1230, 1230, 1221, 1229, 1231, 1231,
     1231,  487, 1232, 1232, 1232, 1223, 1232, 1231, 1233, 1233,
     1233, 1232, 1234, 1234, 1234,  486,  485, 1224, 1235, 1235,
     1235, 1234, 1235, 1226, 1236, 1236, 1236, 1235, 1237, 1237,
     1237,  484,  483, 1227, 1238, 1238, 1238, 1237, 1238, 1239,
     1239, 1239, 1229, 1238, 1240, 1240, 1240, 1230, 1241, 1241,
     1241,  482, 1241, 1240,  481,  480, 1232, 1241, 1242, 1242,

     1242,  477, 1233,  474, 1243, 1243, 1243, 1244, 1244, 1244,
      472, 1244, 1235, 1243,  468,  466, 1244,  462, 1236, 1245,
     1245, 1245, 1246, 1246, 1246, 1247, 1247, 1247, 1238, 1247,
      461, 1246,  456, 1239, 1247, 1248, 1248, 1248, 1249, 1249,
     1249,  454, 1241,  453, 1250, 1250, 1250, 1249, 1250, 1251,
     1251, 1251, 1242, 1250, 1252, 1252, 1252,  452, 1253, 1253,
     1253, 1244, 1253, 1252, 1254, 1254, 1254, 1253, 1255, 1255,
     1255,  451,  450, 1245, 1256, 1256, 1256, 1255, 1256, 1247,
     1257, 1257, 1257, 1256, 1258, 1258, 1258,  447,  442, 1248,
     1259, 1259, 1259, 1258, 1259, 1260, 1260, 1260, 1250, 1259,

     1261, 1261, 1261, 1251, 1262, 1262, 1262,  435, 1262, 1261,
      424,  421, 1253, 1262, 1263, 1263, 1263,  420, 1254,  419,
     1264, 1264, 1264, 1265, 1265, 1265,  417, 1265, 1256, 1264,
      414,  413, 1265,  412, 1257, 1266, 1266, 1266, 1267, 1267,
     1267, 1268, 1268, 1268, 1259, 1268,  409, 1267,  401, 1260,
     1268, 1269, 1269, 1269, 1270, 1270, 1270,  400, 1262,  395,
     1271, 1271, 1271, 1270, 1271, 1272, 1272, 1272, 1263, 1271,
     1273, 1273, 1273,  390, 1274, 1274, 1274, 1265, 1274, 1273,
     1275, 1275, 1275, 1274, 1276, 1276, 1276,  389,  386, 1266,
     1277, 1277, 1277, 1276, 1277, 1268, 1278, 1278, 1278, 1277,

     1279, 1279, 1279,  384,  382, 1269, 1280, 1280, 1280, 1279,
     1280, 1281, 1281, 1281, 1271, 1280, 1283, 1283, 1283, 1272,
     1283, 1284, 1284, 1284,  381, 1283,  380,  379, 1274, 1285,
     1285, 1285,  378, 1285, 1275, 1286, 1286, 1286, 1285, 1287,
     1287, 1287,  377, 1287, 1277, 1288, 1288, 1288, 1287,  375,
     1278,  373, 1289, 1289, 1289,  372, 1289, 1290, 1290, 1290,
     1280, 1289, 1291, 1291, 1291, 1281, 1291, 1292, 1292, 1292,
     1283, 1291, 1293, 1293, 1293, 1284, 1293, 1294, 1294, 1294,
      371, 1293,  366, 1285, 1295, 1295, 1295,  359,  358, 1286,
     1296, 1296, 1296, 1287, 1297, 1297, 1297,  357,  356, 1288,

     1298, 1298, 1298, 1299, 1299, 1299, 1289, 1301, 1301, 1301,
      352, 1290, 1302, 1302, 1302,  351, 1291, 1303, 1303, 1303,
      349, 1292, 1304, 1304, 1304,  348, 1293, 1305, 1305, 1305,
      347, 1294, 1306, 1306, 1306, 1307, 1307, 1307, 1295, 1308,
     1308, 1308,  344,  343, 1296, 1309, 1309, 1309, 1297, 1310,
     1310, 1310,  342,  341, 1298,  340,  339, 1299, 1311, 1311,
     1311, 1301, 1312, 1312, 1312,  336, 1302, 1313, 1313, 1313,
      335, 1303, 1314, 1314, 1314,  334, 1304, 1315, 1315, 1315,
      333, 1305, 1316, 1316, 1316,  332, 1306,  331,  328, 1307,
     1317, 1317, 1317, 1308, 1318, 1318, 1318,  327,  325, 1309,

     1319, 1319, 1319, 1310, 1320, 1320, 1320, 1321, 1321, 1321,
      324,  322, 1311, 1322, 1322, 1322, 1312, 1323, 1323, 1323,
      321, 1313, 1324, 1324, 1324,  320, 1314, 1325, 1325, 1325,
      316, 1315, 1326, 1326, 1326,  315, 1316, 1327, 1327, 1327,
     1328, 1328, 1328,  314, 1317, 1329, 1329, 1329, 1318, 1330,
     1330, 1330,  313,  312, 1319, 1331, 1331, 1331, 1320,  311,
      308, 1321, 1332, 1332, 1332,  307,  306, 1322, 1333, 1333,
     1333, 1323, 1334, 1334, 1334,  305, 1324, 1335, 1335, 1335,
      304, 1325, 1336, 1336, 1336,  303, 1326, 1337, 1337, 1337,
      300, 1327,  299,  298, 1328, 1338, 1338, 1338,  297, 1329,

     1339, 1339, 1339, 1330, 1340, 1340, 1340,  296,  295, 1331,
     1341, 1341, 1341, 1342, 1342, 1342, 1332, 1343, 1343, 1343,
      294,  292, 1333, 1344, 1344, 1344, 1334, 1345, 1345, 1345,
      289, 1335, 1346, 1346, 1346,  287, 1336, 1347, 1347, 1347,
      286, 1337, 1348, 1348, 1348, 1349, 1349, 1349,  285, 1338,
     1350, 1350, 1350,  282, 1339, 1351, 1351, 1351, 1340, 1352,
     1352, 1352,  279,  277, 1341,  276,  275, 1342, 1353, 1353,
     1353, 1343, 1354, 1354, 1354,  272,  271, 1344, 1355, 1355,
     1355, 1345, 1356, 1356, 1356,  270, 1346, 1357, 1357, 1357,
      269, 1347, 1358, 1358, 1358,  265, 1348,  263,  262, 1349,

     1359, 1359, 1359,  255, 1350, 1360, 1360, 1360,  246, 1351,
     1361, 1361, 1361, 1352, 1362, 1362, 1362, 1363, 1363, 1363,
      245,  241, 1353, 1364, 1364, 1364, 1354, 1365, 1365, 1365,
      239,  238, 1355, 1366, 1366, 1366, 1356, 1367, 1367, 1367,
      237, 1357, 1368, 1368, 1368,  233, 1358, 1369, 1369, 1369,
     1370, 1370, 1370,  231, 1359, 1371, 1371, 1371,  230, 1360,
     1372, 1372, 1372,  225, 1361, 1373, 1373, 1373, 1362,  224,
      219, 1363, 1374, 1374, 1374,  217,  216, 1364, 1375, 1375,
     1375, 1365, 1376, 1376, 1376,  215, 1427, 1366,  212, 1427,
      211, 1367, 1427,  208, 1428,  207, 1368, 1428,  206, 1430,

     1428, 1369, 1430,  203, 1370, 1430,  201, 1435,  200, 1371,
     1435,  199, 1436, 1435, 1372, 1436,  197, 1439, 1436, 1373,
     1439, 1455, 1465, 1439, 1455, 1465, 1374, 1455, 1465,  196,
      193,  191, 1375,  190,  187,  186, 1376, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381,

     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386,

     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391, 1391,

     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1396, 1396, 1396,

     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1401, 1401, 1401,
      162, 1401, 1401,  161, 1401,  158, 1401, 1401, 1401,  157,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1402, 1402, 1402,
      156, 1402, 1402, 1402, 1402,  155, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1403, 1403, 1403,
      154, 1403, 1403,  151, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403,  150, 1403, 1403, 1404, 1404, 1404,

      149, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1405, 1405, 1405,
      148, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1406, 1406, 1406,
     1466,  147,  146, 1466, 1406,  139, 1466, 1467, 1406,  138,
     1467, 1406,  136, 1467, 1406, 1407, 1407, 1407,  135,  134,
     1407,  133, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407,  130, 1407, 1407, 1408, 1408, 1408,  129, 1408,
     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1409, 1409, 1409,  128,  127,

     1409, 1409, 1409,  126, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409,  122, 1409, 1409, 1410, 1410, 1410,  121, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411,  119, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1412,  118, 1468, 1475,  117,
     1468, 1475, 1412, 1468, 1475, 1478, 1412,  114, 1478, 1412,
      111, 1478, 1412, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
      109, 1413, 1413, 1414, 1414, 1497, 1506,  108, 1497, 1506,

     1414, 1497, 1506,  107, 1414,  100,   97, 1414, 1414,   95,
     1414, 1415,   94,   93,   92,   88,   87,   84,   83,   82,
     1415,   79, 1415,   77,   76, 1415,   75,    0, 1415, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1418,
        0, 1418,    0, 1418, 1418, 1418, 1418, 1418, 1418,    0,
     1418,    0, 1418, 1418,    0, 1418,    0,    0, 1418, 1419,
     1419, 1419,    0, 1419, 1419, 1419, 1419, 1419, 1419,    0,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1420,
     1420, 1420,    0, 1420, 1420, 1420, 1420, 1420, 1420,    0,

     1420, 1420, 1420, 1420, 1420,    0, 1420, 1420, 1420, 1421,
     1421, 1421,    0, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421,    0, 1421,    0, 1421, 1421, 1422,
     1422, 1422,    0, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1422,    0, 1422, 1422,    0, 1422,    0, 1422, 1422, 1423,
        0, 1423,    0, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1423,    0, 1423,    0, 1423, 1423, 1424,
        0, 1424,    0, 1424, 1424, 1424, 1424, 1424, 1424,    0,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1425,
        0, 1425,    0, 1425, 1425, 1425, 1425, 1425, 1425, 1425,

     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1429,
     1429, 1429,    0, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1431,
     1431, 1431,    0, 1431, 1431, 1431, 1431,    0, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1432,
     1432, 1432,    0, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1433,
        0,    0, 1433,    0, 1433,    0, 1433,    0, 1433,    0,
     1433,    0,    0, 1433,    0,    0, 1433, 1434, 1434, 1434,
        0, 1434,    0, 1434, 1434, 1434, 1434,    0, 1434,    0,

     1434, 1434,    0, 1434,    0, 1434, 1434, 1437, 1437, 1437,
        0, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1438, 1438, 1438,
        0, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1440, 1440, 1440,
        0, 1440, 1440,    0, 1440,    0, 1440, 1440, 1440,    0,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1441, 1441, 1441,
        0, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441,    0, 1441, 1441, 1442, 1442, 1442,
        0, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442,

     1442, 1442, 1442, 1442, 1442, 1442, 1442, 1443, 1443, 1443,
        0, 1443, 1443,    0, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443,    0, 1443, 1443, 1444, 1444, 1444,
        0, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445,
        0, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1446, 1446, 1446,
        0, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1447, 1447, 1447,
        0,    0,    0,    0, 1447,    0,    0,    0, 1447,    0,

        0, 1447,    0,    0, 1447, 1448, 1448, 1448,    0,    0,
     1448,    0, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448,    0, 1448, 1448, 1449, 1449, 1449,    0,    0,
     1449, 1449, 1449,    0, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449,    0, 1449, 1449, 1450, 1450, 1450,    0, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1451,    0,    0,    0,    0,
        0,    0, 1451,    0,    0,    0, 1451,    0,    0, 1451,
        0,    0, 1451, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,

        0, 1452, 1452, 1453, 1453,    0,    0,    0,    0,    0,
     1453,    0,    0,    0, 1453,    0,    0, 1453, 1453,    0,
     1453, 1454,    0,    0,    0,    0,    0,    0,    0,    0,
     1454,    0, 1454,    0,    0, 1454,    0,    0, 1454, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1457,
        0, 1457,    0, 1457, 1457, 1457, 1457, 1457, 1457,    0,
     1457,    0, 1457, 1457,    0, 1457,    0,    0, 1457, 1458,
     1458, 1458,    0, 1458, 1458, 1458, 1458, 1458, 1458,    0,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1459,

     1459, 1459,    0, 1459, 1459, 1459, 1459, 1459, 1459,    0,
     1459, 1459, 1459, 1459, 1459,    0, 1459, 1459, 1460, 1460,
     1460,    0, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460,    0, 1460,    0, 1460, 1460, 1461, 1461,
     1461,    0, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
        0, 1461, 1461,    0, 1461,    0, 1461, 1461, 1462,    0,
     1462,    0, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462,    0, 1462,    0, 1462, 1462, 1463,    0,
     1463,    0, 1463, 1463, 1463, 1463, 1463, 1463,    0, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1464,    0,

     1464,    0, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1469, 1469,
     1469,    0, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1469,    0, 1469, 1469, 1470, 1470,
     1470,    0, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1471,    0,
        0, 1471,    0, 1471,    0, 1471,    0, 1471,    0, 1471,
        0,    0, 1471,    0,    0, 1471, 1472, 1472, 1472,    0,
     1472,    0, 1472, 1472, 1472, 1472,    0, 1472,    0, 1472,
     1472,    0, 1472,    0, 1472, 1472, 1473, 1473, 1473,    0,

     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1474, 1474, 1474,    0,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1476, 1476, 1476,    0,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1477, 1477, 1477,    0,
     1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1477, 1477, 1477, 1477, 1477, 1477, 1479, 1479, 1479,    0,
     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1479, 1479, 1479,    0, 1479, 1479, 1480, 1480, 1480,    0,

     1480, 1480,    0, 1480,    0, 1480, 1480, 1480,    0, 1480,
     1480, 1480, 1480, 1480, 1480, 1480, 1481, 1481, 1481,    0,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1482, 1482, 1482,    0,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1483, 1483, 1483,    0,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1484, 1484, 1484,    0,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1485, 1485, 1485,    0,

     1485, 1485,    0, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485,    0, 1485, 1485, 1486, 1486, 1486,    0,
        0,    0,    0, 1486,    0,    0,    0, 1486,    0,    0,
     1486,    0,    0, 1486, 1487, 1487, 1487,    0,    0, 1487,
        0, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487,    0, 1487, 1487, 1488, 1488, 1488,    0,    0, 1488,
     1488, 1488,    0, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488,    0, 1488, 1488, 1489, 1489, 1489,    0, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1490, 1490, 1490, 1490, 1490, 1490,

     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490,    0, 1490, 1490, 1491, 1491, 1491,    0, 1491, 1491,
     1491, 1491, 1491, 1491,    0, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1492, 1492, 1492,    0, 1492, 1492,
     1492, 1492, 1492, 1492,    0, 1492, 1492, 1492, 1492, 1492,
        0, 1492, 1492, 1493,    0, 1493,    0, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,    0, 1493,
        0, 1493, 1493, 1494, 1494, 1494,    0, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494,    0, 1494,
        0, 1494, 1494, 1495,    0, 1495,    0, 1495, 1495, 1495,

     1495, 1495, 1495,    0, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1496,    0, 1496,    0, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1498, 1498, 1498,    0, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
        0, 1498, 1498, 1499, 1499, 1499,    0, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1500, 1500, 1500,    0, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
        0, 1500, 1500, 1501, 1501, 1501,    0, 1501, 1501, 1501,

     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
        0, 1501, 1501, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1504,    0,    0,    0, 1504,    0,    0,
        0,    0,    0,    0,    0, 1504,    0, 1504,    0,    0,
     1504, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,

     1507, 1507, 1507, 1507,    0, 1507, 1507,    0, 1507, 1507,
     1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
     1508, 1508, 1508,    0, 1508, 1508,    0, 1508, 1508, 1509,
     1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509,
     1509, 1509,    0, 1509, 1509,    0, 1509, 1509, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,

     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377
    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2017 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include <QDir>
#include <QFile>
#include <QFileInfo>
#include <QHash>
#include <QRegExp>
#include <QStringList>
#include <QStack>
#include <QVector>

#include <pre.h>

#include <a_define.h>
#include <arguments.h>
#include <constexp.h>
#include <config.h>
#include <condparser.h>
#include <doxy_globals.h>
#include <default_args.h>
#include <entry.h>
#include <message.h>
#include <membername.h>
#include <util.h>

#define YY_NEVER_INTERACTIVE 1

// Toggle for some debugging info
// #define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

struct CondCtx
{

   CondCtx(int line, const QString &id, bool b)
      : lineNr(line), sectionId(id), skip(b) {}

   int lineNr;
   QString sectionId;
   bool skip;
};

struct FileState {
   FileState(int size) : lineNr(1), fileBuf(size),
      oldFileBuf(""), oldFileBufPos(0), bufState(0) {}

   int       lineNr;
   QString   fileBuf;
   QString   oldFileBuf;
   int       oldFileBufPos;
   QString   fileName;
   YY_BUFFER_STATE bufState;
};

/** @brief Singleton which manages the defines available while proprocessing files
 */
class DefineManager
{
   // local class used to hold the defines for a single file
   class DefinesPerFile
   {
    public:
      DefinesPerFile() {
      }

      virtual ~DefinesPerFile() {
      }

      /** Adds a define in the context of a file. Will replace an existing define
       *  with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(QSharedPointer<A_Define> def) {
         QSharedPointer<A_Define> d = m_defines.value(def->m_name);

         if (d != nullptr) {
            // redefine
            m_defines.remove(d->m_name);
         }

         m_defines.insert(def->m_name, def);
      }

      /** Adds an include file for this file
       *  @param fileName The name of the include file
       */
      void addInclude(const QString &fileName) {
         m_includedFiles.insert(fileName);
      }

      void collectDefines(DefineDict &dict, QSet<QString> &includeStack);

    private:
      DefineDict m_defines;
      QSet<QString> m_includedFiles;
   };

 public:
   friend class DefinesPerFile;

   /** Returns a reference to the singleton */
   static DefineManager &instance() {
      if (theInstance == nullptr) {
         theInstance = new DefineManager;
      }
      return *theInstance;
   }
  
   static void deleteInstance() {
      delete theInstance;
      theInstance = nullptr;
   }

   /** Starts a context in which defines are collected.
    *  Called at the start of a new file that is preprocessed.
    *  @param fileName the name of the file to process.
    */
   void startContext(const QString &fileName) {
      m_contextDefines.clear();
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);
      if (dpf == nullptr) {
         // new file

         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);
      }
   }

   /** Ends the context started with startContext() freeing any
    *  defines collected within in this context.
    */
   void endContext() {
      m_contextDefines.clear();
   }

   /** Add an included file to the current context.
    *  If the file has been pre-processed already, all defines are added to the context.
    *  @param fileName The name of the include file to add to the context.
    */
   void addFileToContext(const QString &fileName) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         // new file

         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);

      } else {
         // existing file

         QSet<QString> includeStack;
         dpf->collectDefines(m_contextDefines, includeStack);
      }
   }

   /** Add a define to the manager object.
    *  @param fileName The file in which the define was found
    *  @param def The Define object to add.
    */
   void addDefine(const QString &fileName, QSharedPointer<A_Define> def) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<A_Define> d = m_contextDefines.value(def->m_name);

      if (d != nullptr) {
         // redefine
         m_contextDefines.remove(d->m_name);
      }

      m_contextDefines.insert(def->m_name, def);

      //
      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);
      }

      dpf->addDefine(def);
   }

   /** Add an include relation to the manager object.
    *  @param fromFileName file name in which the include was found.
    *  @param toFileName file name that is included.
    */
   void addInclude(const QString &fromFileName, const QString &toFileName) {
      if (fromFileName.isEmpty() || toFileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fromFileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fromFileName, dpf);
      }
      dpf->addInclude(toFileName);
   }

   /** Returns a Define object given its name or 0 if the Define does not exist.
   */
   QSharedPointer<A_Define> isDefined(const QString &name) const {
      QSharedPointer<A_Define> d = m_contextDefines.value(name);

      if (d && d->undef) {
         d = QSharedPointer<A_Define>();
      }

      return d;
   }

   /** Returns a reference to the defines found in the current context. */
   const DefineDict &defineContext() const {
      return m_contextDefines;
   }

 private:
   static DefineManager *theInstance;

   /** Helper function to collect all define for a given file */
   void collectDefinesForFile(const QString &fileName, QSharedPointer<DefineDict> dict) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf) {
         QSet<QString> includeStack;
         dpf->collectDefines(*dict, includeStack);
      }
   }

   /** returns the DefinesPerFile object for a given file name. */
   QSharedPointer<DefinesPerFile> find(const QString &fileName) const {
      if (fileName.isEmpty()) {
         return QSharedPointer<DefinesPerFile>();
      }

      return m_fileMap.value(fileName);
   }

   DefineManager() {
   }

   virtual ~DefineManager() {
   }

   QHash<QString, QSharedPointer<DefinesPerFile>> m_fileMap;
   DefineDict m_contextDefines;
};

/** Singleton instance */
DefineManager *DefineManager::theInstance = 0;

/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(DefineDict &dict, QSet<QString> &includeStack)
{
   {
      for (auto di : m_includedFiles) {
         QString incFile = di;

         QSharedPointer<DefinesPerFile> dpf = DefineManager::instance().find(incFile);

         if (dpf && ! includeStack.contains(incFile)) {
            includeStack.insert(incFile);
            dpf->collectDefines(dict, includeStack);
         }
      }
   }

   {
      for (const auto &def : m_defines)  {
         QSharedPointer<A_Define> d = dict.value(def->m_name);

         if (d != nullptr) {
            // redefine
            dict.remove(d->m_name);
         }

         dict.insert(def->m_name, def);
      }
   }
}

static QStringList              g_pathList;
static QString                  g_yyFileName;
static QSharedPointer<FileDef>  g_yyFileDef;
static QSharedPointer<FileDef>  g_inputFileDef;

static QSharedPointer<QHash<QString, int>> g_argDict;
static QStack<QSharedPointer<FileState>>   g_includeStack;
static QStack<QSharedPointer<CondCtx>>     g_condStack;
static QSharedPointer<DefineDict>          g_expandedDict;

static int          g_yyLineNr   = 1;
static int          g_yyMLines   = 1;
static int          g_yyColNr    = 1;
static int          g_ifcount    = 0;
static int          g_defArgs    = -1;

static QString      g_defName;
static QString      g_defText;
static QString      g_defLitText;
static QString      g_defArgsStr;
static QString      g_defExtraSpacing;
static bool         g_defVarArgs;
static int          g_lastCContext;
static int          g_lastCPPContext;
static QStack<int>  g_levelGuard;
static QString      g_inputBuf;
static int          g_inputBufPos;
static QString      g_outputBuf;
static int          g_roundCount;
static bool         g_quoteArg;

static int          g_findDefArgContext;
static bool         g_expectGuard;
static QString      g_guardName;
static QString      g_lastGuardName;
static QString      g_incName;
static QString      g_guardExpr;
static int          g_curlyCount;
static bool         g_nospaces;          // add extra spaces during macro expansion

static bool         g_macroExpansion;    // from the configuration
static bool         g_expandOnlyPredef;  // from the configuration
static int          g_commentCount;
static bool         g_insideComment;
static bool         g_isImported;
static QString      g_blockName;
static int          g_condCtx;
static bool         g_skip;

static bool         g_insideCS;          // C# has simpler preprocessor
static bool         g_isSource;

static bool         g_lexInit   = false;
static int          g_fenceSize = 0;
static bool         g_ccomment;

static void setFileName(const QString &name)
{
   bool ambig;
   QFileInfo fi(name);

   g_yyFileName = fi.absoluteFilePath();
   g_yyFileDef  = findFileDef(&Doxy_Globals::inputNameDict, g_yyFileName, ambig);

   if (g_yyFileDef == nullptr) {
      // if this is not an input file check if it is an include file
      g_yyFileDef = findFileDef(&Doxy_Globals::includeNameDict, g_yyFileName, ambig);
   }

   if (g_yyFileDef && g_yyFileDef->isReference()) {
      g_yyFileDef = QSharedPointer<FileDef>();
   }

   g_insideCS = getLanguageFromFileName(g_yyFileName) == SrcLangExt_CSharp;
   g_isSource = determineSection(g_yyFileName);
}

static void incrLevel()
{
   g_levelGuard.push(0);
}

static void decrLevel()
{
   if (g_levelGuard.size() > 0) {
      g_levelGuard.pop();

   } else {
      warn(g_yyFileName, g_yyLineNr, "More #endif's than #if's found\n");

   }
}

static bool otherCaseDone()
{
   if (g_levelGuard.size() == 0) {
      warn(g_yyFileName, g_yyLineNr, "Found an #else without a preceding #if\n");
      return true;

   } else {
      return g_levelGuard.top();

   }
}

static void setCaseDone(bool value)
{
   g_levelGuard.top() = value;
}

static QSet<QString> g_allIncludes;

static QSharedPointer<FileState> checkAndOpenFile(const QString &fileName, bool &alreadyIncluded)
{
   alreadyIncluded = false;
   QSharedPointer<FileState> fs;

   QFileInfo fi(fileName);

   if (fi.exists() && fi.isFile()) {
      static const QStringList exclPatterns = Config::getList("exclude-patterns");

      if (patternMatch(fi, exclPatterns)) {
         return QSharedPointer<FileState>();
      }

      QString absName = fi.absoluteFilePath();

      // global guard
      if (g_curlyCount == 0) {
         // not #include inside { ... }

         if (g_allIncludes.contains(absName)) {
            alreadyIncluded = true;
            return QSharedPointer<FileState>();
         }

         g_allIncludes.insert(absName);
      }

      // check include stack for absName
      QStack<QSharedPointer<FileState>> tmpStack;

      while (! g_includeStack.isEmpty()) {
         fs = g_includeStack.pop();

         if (fs->fileName == absName) {
            alreadyIncluded = true;
         }

         tmpStack.push(fs);
      }

      while (! tmpStack.isEmpty()) {
         fs = tmpStack.pop();

         g_includeStack.push(fs);
      }

      if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }

      fs = QMakeShared<FileState>(fi.size() + 4096);
      alreadyIncluded = false;

      if (! readInputFile(absName, fs->fileBuf)) {
         // error
         fs = QSharedPointer<FileState>();

      } else {
         fs->oldFileBuf    = g_inputBuf;
         fs->oldFileBufPos = g_inputBufPos;
      }
   }

   return fs;
}

static QSharedPointer<FileState> findFile(const QString &fileName, bool localInclude, bool &alreadyIncluded)
{
   if (QDir::isAbsolutePath(fileName)) {
      QSharedPointer<FileState> fs = checkAndOpenFile(fileName, alreadyIncluded);

      if (fs) {
         setFileName(fileName);
         g_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   if (localInclude && ! g_yyFileName.isEmpty()) {
      QFileInfo fi(g_yyFileName);

      if (fi.exists()) {
         QString absName = fi.absolutePath() + "/" + fileName;
         QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

         if (fs) {
            setFileName(absName);
            g_yyLineNr = 1;
            return fs;

         } else if (alreadyIncluded) {
            return QSharedPointer<FileState>();
         }
      }
   }

   if (g_pathList.isEmpty()) {
      return QSharedPointer<FileState>();
   }

   for (auto &s : g_pathList) {
      QString absName = s + "/" + fileName;

      QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

      if (fs) {
         setFileName(absName);
         g_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   return QSharedPointer<FileState>();
}

static QString extractTrailingComment(const QString &s)
{
   if (s.isEmpty()) {
      return "";
   }

   int i = s.length() - 1;

   while (i >= 0) {
      QChar c = s[i];

      switch (c.unicode()) {
         case '/': {
            i--;

            if (i >= 0 && s[i] == '*') {
               // end of a comment block
               i--;

               while (i > 0 && !(s[i - 1] == '/' && s[i] == '*')) {
                  i--;
               }

               if (i == 0) {
                  i++;
               }

               // only /*!< or /**< are treated as a comment for the macro name     */
               // otherwise the comment is treated as part of the macro definition

               return ((s[i + 1] == '*' || s[i + 1] == '!') && s[i + 2] == '<') ? s.mid(i - 1) : "";

            } else {
               return "";
            }
         }

         break;

         // whitespace or line-continuation
         case ' ':
         case '\t':
         case '\r':
         case '\n':
         case '\\':
            break;

         default:
            return "";
      }

      i--;
   }

   return "";
}

static int getNextChar(const QString &expr, QString *rest, uint &pos);
static int getCurrentChar(const QString &expr, QString *rest, uint pos);
static void unputChar(const QString &expr, QString *rest, uint &pos, char c);
static void expandExpression(QString &expr, QString *rest, int pos);

static QString stringize(const QString &s)
{
   QString result;
   QChar c;
   QChar pc;

   uint i = 0;
   bool inString = false;
   bool inChar   = false;

   while (i < s.length()) {

      if (! inString && ! inChar) {
         while (i < s.length() && ! inString && ! inChar) {
            c = s.at(i++);

            if (c == '"') {
               result += "\\\"";
               inString = true;
            } else if (c == '\'') {
               result += c;
               inChar = true;
            } else {
               result += c;
            }
         }

      } else if (inChar) {
         while (i < s.length() && inChar) {
            c = s.at(i++);

            if (c == '\'') {
               result += '\'';
               inChar = false;
            } else if (c == '\\') {
               result += "\\\\";
            } else {
               result += c;
            }
         }

      } else {
         pc = 0;

         while (i < s.length() && inString) {
            QChar c2 = s.at(i++);

            if (c2 == '"') {
               result += "\\\"";
               inString = pc == '\\';

            } else if (c2 == '\\') {
               result += "\\\\";

            } else {
               result += c2;
            }

            pc = c2;
         }
      }
   }

   return result;
}

/*! Execute all ## operators in expr.
 * If the macro name before or after the operator contains a no-rescan
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QString &expr)
{
   QRegExp r("[ \\t\\n]*##[ \\t\\n]*");
   int l;
   int n;
   int i = 0;

   if (expr.isEmpty()) {
      return;
   }

   while ((n = r.indexIn(expr, i)) != -1) {
      l = r.matchedLength();

      if (n + l + 1 < (int)expr.length() && expr.at(n + l) == '@' && expr.at(n + l + 1) == '-') {
         // remove no-rescan marker after ID
         l += 2;
      }

      // remove the ## operator and the surrounding whitespace
      expr  = expr.left(n) + expr.right(expr.length() - n - l);
      int k = n - 1;

      while (k >= 0 && isId(expr.at(k))) {
         k--;
      }

      if (k > 0 && expr.at(k) == '-' && expr.at(k - 1) == '@') {
         // remove no-rescan marker before ID
         expr = expr.left(k - 1) + expr.right(expr.length() - k - 1);
         n -= 2;
      }

      i = n;
   }
}

static void yyunput (int c,char *buf_ptr);
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QString &expr, QString *rest, uint &pos, char term, QString &arg)
{
   int cc;

   while ((cc = getNextChar(expr, rest, pos)) != EOF && cc != 0) {
      if (cc == '\\') {
         arg += (char)cc, cc = getNextChar(expr, rest, pos);
      } else if (cc == term) {
         return;
      }
      arg += (char)cc;
   }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr.
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the
 * length of the (unexpanded) argument list is stored in \a len.
 */
static bool replaceFunctionMacro(const QString &expr, QString *rest, int pos, int &len, QSharedPointer<const A_Define> def, QString &result)
{
   uint j = pos;
   len    = 0;

   result.clear();
   int cc;

   while ((cc = getCurrentChar(expr, rest, j)) != EOF && isspace(cc)) {
      len++;
      getNextChar(expr, rest, j);
   }

   if (cc != '(') {
      unputChar(expr, rest, j, ' ');
      return false;
   }

   // consume the `(' character
   getNextChar(expr, rest, j);

   // list of arguments
   QHash<QString, QString> argTable;

   QString arg;
   int argCount = 0;
   bool done    = false;

   // PHASE 1: read the macro arguments
   if (def->nargs == 0) {
      while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
         char c = (char)cc;

         if (c == ')') {
            break;
         }
      }

   } else {
      while (! done && (argCount < def->nargs || def->varArgs) &&
             ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0)) {

         char c = (char)cc;

         if (c == '(') {
            // argument is a function => search for matching )
            int level = 1;
            arg += c;

            //char term='\0';

            while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               char c = (char)cc;

               if (c == '\'' || c == '\"') {
                  // skip ('s and )'s inside strings
                  arg += c;
                  addTillEndOfString(expr, rest, j, c, arg);
               }

               if (c == ')') {
                  level--;
                  arg += c;
                  if (level == 0) {
                     break;
                  }

               } else if (c == '(') {
                  level++;
                  arg += c;

               } else {
                  arg += c;
               }
            }

         } else if (c == ')' || c == ',') {
            // last or next argument found

            if (c == ',' && argCount == def->nargs - 1 && def->varArgs) {
               arg = arg.trimmed();
               arg += ',';

            } else {

               QString argKey;
               argKey = QString("@%1").arg(argCount++);    // key name
               arg    = arg.trimmed();

               // add argument to the lookup table
               argTable.insert(argKey, arg);
               arg.clear();

               if (c == ')') {
                  // end of the argument list
                  done = true;
               }
            }

         } else if (c == '\"') {
            // append literal strings

            arg += c;
            bool found = false;

            while (!found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '"';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;
                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }
               c = (char)cc;
               arg += c;
            }

         } else if (c == '\'') {
            // append literal characters
            arg += c;
            bool found = false;

            while (!found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '\'';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;
                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }
               c = (char)cc;
               arg += c;
            }
         } else { // append other characters
            arg += c;
         }
      }
   }

   // PHASE 2: apply the macro function
   if (argCount == def->nargs || // same number of arguments
         (argCount >= def->nargs - 1 && def->varArgs)) {

         // variadic macro with at least as many
         // params as the non-variadic part (see bug731985)

      uint k = 0;

      // substitution of all formal arguments
      QString resExpr;
      const QString d = def->m_definition.trimmed();

      bool inString = false;

      while (k < d.length()) {
         if (d.at(k) == '@') {
            // maybe a marker, otherwise an escaped @

            if (d.at(k + 1) == '@') {
               // escaped @ => copy it (is unescaped later)

               k += 2;
               resExpr += "@@"; // we unescape these later

            } else if (d.at(k + 1) == '-') {
               // no-rescan marker
               k += 2;
               resExpr += "@-";

            } else {
               // argument marker, read the argument number
               QString key = "@";

               bool hash = false;
               int len2  = k - 1;

               // search for ## backward
               if (len2 >= 0 && d.at(len2) == '\"') {
                  len2--;
               }

               while (len2 >= 0 && d.at(len2) == ' ') {
                  len2--;
               }

               if (len2 > 0 && d.at(len2) == '#' && d.at(len2 - 1) == '#') {
                  hash = true;
               }

               k++;

               // scan the number
               while (k < d.length() && d.at(k) >= '0' && d.at(k) <= '9') {
                  key += d.at(k++);
               }

               if (! hash) {
                  // search for ## forward
                  len2 = k;

                  if (len2 < d.length() && d.at(len2) == '\"') {
                     len2++;
                  }

                  while (len2 < d.length() && d.at(len2) == ' ') {
                     len2++;
                  }

                  if (len2 < d.length() - 1 && d.at(len2) == '#' && d.at(len2 + 1) == '#') {
                     hash = true;
                  }
               }

               if (key.length() > 1 && argTable.contains(key)) {
                  QString substArg = argTable.value(key);

                  // only if no ## operator is before or after the argument marker, then do macro expansion
                  if (! hash) {
                     expandExpression(substArg, 0, 0);
                  }

                  if (inString) {
                     // if the marker is inside a string (because a # was put
                     // before the macro name), escape " and \ characters
                     resExpr += stringize(substArg);

                  } else {
                     if (hash && substArg.isEmpty()) {
                        // empty argument will be remove later on
                        resExpr += "@E";

                     } else if (g_nospaces) {
                        resExpr += substArg;

                     } else {
                        resExpr += " " + substArg + " ";
                     }
                  }
               }
            }

         } else {
            // no marker, just copy

            if (! inString && d.at(k) == '\"') {
               inString = true; // entering a literal string

            } else if (inString && d.at(k) == '\"' && (d.at(k - 1) != '\\' || d.at(k - 2) == '\\')) {
               inString = false; // leaving a literal string
            }
            resExpr += d.at(k++);
         }
      }

      len    = j - pos;
      result = resExpr;

      return true;
   }

   return false;
}

/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QString &expr, int p, int *l)
{
   int n;

   while (p < expr.length()) {
      QChar c = expr.at(p++);

      if (c.isNumber()) {
         // skip number
         while (p < expr.length() && isId(expr.at(p))) {
            p++;
         }

      } else if (c.isLetter() || c == '_') {
         // read id
         n = p - 1;

         while (p < expr.length() && isId(expr.at(p))) {
            p++;
         }

         *l = p - n;
         return n;

      } else if (c == '"') {
         // skip string

         QChar ppc = 0;
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);
         }

         while (p < expr.length() && (c != '"' || (pc == '\\' && ppc != '\\')))
            // continue as long as no " is found, but ignoring \", but not \\"
         {
            ppc = pc;
            pc = c;
            c = expr.at(p);
            p++;
         }

         if (p < expr.length()) {
            ++p;   // skip closing quote
         }

      } else if (c == '/') { // skip C Comment
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);

            if (c == '*') { // Start of C comment
               p++;

               while (p < expr.length() && !(pc == '*' && c == '/')) {
                  pc = c;
                  c = expr.at(p++);
               }
            }
         }

      }
   }

   return -1;
}

/*! preforms recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 *  If \a expandAll is \c true then all macros in the expression are
 *  expanded, otherwise only the first is expanded.
 */
static void expandExpression(QString &expr, QString *rest, int pos)
{
   QString macroName;
   QString expMacro;

   bool definedTest = false;
   int i = pos;
   int l;
   int p;
   int len;

   while ((p = getNextId(expr, i, &l)) != -1) {
      // search for an macro name

      bool replaced = false;
      macroName = expr.mid(p, l);

      if (p < 2 || ! (expr.at(p - 2) == '@' && expr.at(p - 1) == '-')) {
         // no-rescan marker?

         if (! g_expandedDict->contains(macroName)) {

            // expand macro
            QSharedPointer<A_Define> def = DefineManager::instance().isDefined(macroName);

            if (definedTest) {
               // macro name was found after defined

               if (def) {
                  expMacro = " 1 ";
               } else {
                  expMacro = " 0 ";
               }

               replaced = true;
               len = l;
               definedTest = false;

            } else if (def && def->nargs == -1) {
               // simple macro
               // substitute the definition of the macro

               if (g_nospaces) {
                  expMacro = def->m_definition.trimmed();
               } else {
                  expMacro = " " + def->m_definition.trimmed() + " ";
               }

               replaced = true;
               len = l;

            } else if (def && def->nargs >= 0) {
               // function macro
               replaced = replaceFunctionMacro(expr, rest, p + l, len, def, expMacro);
               len += l;

            } else if (macroName == "defined") {
               definedTest = true;

            }

            if (replaced) {
               // expand the macro and rescan the expression

               //printf("replacing `%s'->`%s'\n",expr.mid(p,len).data(),expMacro.data());
               QString resultExpr = expMacro;
               QString restExpr   = expr.right(expr.length() - len - p);

               processConcatOperators(resultExpr);

               if (def && !def->nonRecursive) {
                  g_expandedDict->insert(macroName, def);
                  expandExpression(resultExpr, &restExpr, 0);
                  g_expandedDict->remove(macroName);
               }

               expr = expr.left(p) + resultExpr + restExpr;
               i    = p;

            } else {
               // move to the next macro name
               i = p + l;
            }

         } else { // move to the next macro name
            expr = expr.left(p) + "@-" + expr.right(expr.length() - p);
            i = p + l + 2;

         }

      } else { // no re-scan marker found, skip the macro name
         i = p + l;
      }
   }
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
QString removeIdsAndMarkers(const QString &s)
{
   const QChar *p = s.constData();
   const QChar *ptr = p;
   QChar c;

   bool inNum = false;
   QString result;

   if (p) {

      while ((c = *p) != 0) {
         // replace @@ with @ and remove @E

         if (c == '@') {

            if (*(p + 1) == '@') {
               result += c;

            } else if (*(p + 1) == 'E') {
               // skip
            }

            p += 2;

         } else if (c.isNumber()) {
            // number

            result += c;
            p++;
            inNum = true;

         } else if (c == 'd' && ! inNum) {
            // identifier starting with a `d'

            if (s.mid(p - ptr, 8) == "defined " || s.mid(p - ptr, 8) == "defined(") {
               // defined keyword, skip defined
               p += 7;

            } else {
               result += "0L";
               p++;

               while ((c = *p) != 0 && isId(c)) {
                  p++;
               }
            }

         } else if ((c.isLetter() || c == '_') && ! inNum) {
            // replace identifier with 0L
            result += "0L";
            p++;

            while ((c = *p) != 0 && isId(c)) {
               p++;
            }

            if (*p == '(') { // undefined function macro
               p++;
               int count = 1;

               while ((c = *p++) != 0 ) {
                  if (c == '(') {
                     count++;

                  } else if (c == ')') {
                     count--;
                     if (count == 0) {
                        break;
                     }

                  } else if (c == '/') {
                     QChar pc = c;
                     c = *++p;

                     if (c == '*') { // start of C comment
                        while (*p != 0 && ! (pc == '*' && c == '/')) {
                           // search end of comment
                           pc = c;
                           c = *++p;
                        }
                        p++;
                     }
                  }
               }
            }

         } else if (c == '/') {
            // skip C comments

            QChar pc = c;
            c = *++p;

            if (c == '*') {
               // start of C comment

               while (*p != 0 && ! (pc == '*' && c == '/')) {
                  // search end of comment
                  pc = c;
                  c = *++p;
               }
               p++;

            } else { // not comment but division
               result += pc;
               goto nextChar;
            }

         } else {

         nextChar:
            result += c;
            QChar lc = c.toLower();

            if (! isId(lc) && lc != '.' /*&& lc!='-' && lc!='+'*/) {
               inNum = false;
            }
            p++;
         }
      }
   }

   return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption:
 *   \a s only contains pairs of @@'s
 */
QString removeMarkers(const QString &s)
{
   const QChar *p = s.constData();
   QChar c;

   QString result;

   while ((c = *p) != 0) {
      switch (c.unicode()) {
         case '@': { // replace @@ with @
            if (*(p + 1) == '@') {
               result += c;
            }
            p += 2;
         }
         break;

         case '/': { // skip C comments
            result  += c;
            QChar pc = c;
            c = *++p;

            if (c == '*') { // start of C comment

               while (*p != 0  && !(pc == '*' && c == '/')) { // search end of comment
                  if (*p == '@' && *(p + 1) == '@') {
                     result += c;
                     p++;

                  } else {
                     result += c;
                  }

                  pc = c;
                  c  = *++p;
               }

               if (*p != 0) {
                  result += c;
                  p++;
               }
            }
         }
         break;

         case '"': { // skip string literals
            result += c;
            QChar pc = c;
            c = *++p;

            while (*p != 0 && (c != '"' || pc == '\\')) { // no end quote
               result += c;
               c = *++p;
            }
            if (*p != 0) {
               result += c;
               p++;
            }
         }
         break;

         case '\'': { // skip char literals
            result += c;
            QChar pc = c;
            c = *++p;

            while (*p != 0 && (c != '\'' || pc == '\\')) {
               // no end quote
               result += c;
               c = *++p;
            }

            if (*p != 0) {
               result += c;
               p++;
            }
         }
         break;

         default: {
            result += c;
            p++;
         }
         break;
      }
   }

   return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */
bool computeExpression(const QString &expr)
{
   QString e = expr;

   expandExpression(e, 0, 0);
   e = removeIdsAndMarkers(e);

   if (e.isEmpty()) {
      return false;
   }

   bool retval = parseconstexp(g_yyFileName, g_yyLineNr, e);

   return retval;
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

QString expandMacro(const QString &name)
{
   QString n = name;

   expandExpression(n, 0, 0);
   n = removeMarkers(n);

   return n;
}

QSharedPointer<A_Define> newDefine()
{
   QSharedPointer<A_Define> def = QMakeShared<A_Define>();

   def->m_name       = g_defName;
   def->m_definition = g_defText.trimmed();
   def->nargs        = g_defArgs;
   def->m_fileName   = g_yyFileName;
   def->fileDef      = g_yyFileDef;
   def->lineNr       = g_yyLineNr - g_yyMLines;
   def->columnNr     = g_yyColNr;
   def->varArgs      = g_defVarArgs;

   if (! def->m_name.isEmpty() && Doxy_Globals::expandAsDefinedDict.contains(def->m_name)) {
      def->isPredefined = true;
   }

   return def;
}

void addDefine()
{
   if (g_skip) {
      return;   // do not add this define as it is inside a
   }

   // conditional section (cond command) that is disabled
   if (! Doxy_Globals::gatherDefines) {
      return;
   }

   QSharedPointer<MemberDef> md = QMakeShared<MemberDef>(g_yyFileName, g_yyLineNr - g_yyMLines, g_yyColNr,
               "#define", g_defName, g_defArgsStr, "", Public, Normal, false, Member,
               MemberType_Define, ArgumentList(), ArgumentList());

   if (! g_defArgsStr.isEmpty()) {
      ArgumentList argList;

      argList = stringToArgumentList(g_defArgsStr);
      md->setArgumentList(argList);
   }

   int l = g_defLitText.indexOf('\n');

   if (l > 0 && g_defLitText.left(l).trimmed() == "\\") {
      // strip first line if it only contains a slash
      g_defLitText = g_defLitText.right(g_defLitText.length() - l - 1);

   } else if (l > 0) {
      // align the items on the first line with the items on the second line
      int k = l + 1;

      const QChar *p = g_defLitText.data() + k;
      QChar c;

      while ((c = *p++) != 0 && (c == ' ' || c == '\t')) {
         k++;
      }

      g_defLitText = g_defLitText.mid(l + 1, k - l - 1) + g_defLitText.trimmed();
   }
   md->setInitializer(g_defLitText.trimmed());

   md->setFileDef(g_inputFileDef);
   md->setDefinition("#define " + g_defName);

   QSharedPointer<MemberName> mn = Doxy_Globals::functionNameSDict.find(g_defName);

   if (! mn) {
      mn = QMakeShared<MemberName>(g_defName);
      Doxy_Globals::functionNameSDict.insert(g_defName, mn);
   }

   mn->append(md);

   if (g_yyFileDef) {
      g_yyFileDef->insertMember(md);
   }
}

static inline void outputChar(QChar c)
{
   if (g_includeStack.isEmpty() || g_curlyCount > 0) {
      g_outputBuf += c;
   }
}

static inline void outputArray(const QString &a, int len)
{
   if (g_includeStack.isEmpty() || g_curlyCount > 0) {
      g_outputBuf += a.mid(0, len);
   }
}

static void readIncludeFile(const QString &inc)
{
   static bool searchIncludes = Config::getBool("search-includes");
   uint i = 0;

   // find the start of the include file name
   while (i < inc.length() && (inc.at(i) == ' ' || inc.at(i) == '"' || inc.at(i) == '<')) {
      i++;
   }
   uint s = i;

   // was it a local include?
   bool localInclude = s > 0 && inc.at(s - 1) == '"';

   // find the end of the include file name
   while (i < inc.length() && inc.at(i) != '"' && inc.at(i) != '>') {
      i++;
   }

   if (s < inc.length() && i > s) {
      // valid include file name found

      // extract include path+name
      QString incFileName = inc.mid(s, i - s).trimmed();

      QString dosExt = incFileName.right(4);
      if (dosExt == ".exe" || dosExt == ".dll" || dosExt == ".tlb") {
         // skip imported binary files (e.g. M$ type libraries)
         return;
      }

      QString oldFileName = g_yyFileName;

      QSharedPointer<FileDef> oldFileDef = g_yyFileDef;
      int oldLineNr = g_yyLineNr;

      // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
      QString absIncFileName = incFileName;
      {
         QFileInfo fi(g_yyFileName);

         if (fi.exists()) {
            QString absName = fi.absolutePath() + "/" + incFileName;

            QFileInfo fi2(absName);
            if (fi2.exists()) {
               absIncFileName = fi2.absoluteFilePath();

            } else if (searchIncludes) {
               const QStringList includePath = Config::getList("include-path");

               for (auto s : includePath) {

                  QFileInfo fi(s);

                  if (fi.exists() && fi.isDir()) {
                     QString absName = fi.absoluteFilePath() + "/" + incFileName;

                     QFileInfo fi2(absName);
                     if (fi2.exists()) {
                        absIncFileName = fi2.absoluteFilePath();
                        break;
                     }

                  }

               }
            }

         }
      }

      DefineManager::instance().addInclude(g_yyFileName, absIncFileName);
      DefineManager::instance().addFileToContext(absIncFileName);

      // findFile will overwrite g_yyFileDef if found
      QSharedPointer<FileState> fs;
      bool alreadyIncluded = false;

      if ((fs = findFile(incFileName, localInclude, alreadyIncluded))) {
         // see if the include file can be found

         if (oldFileDef) {
            // add include dependency to the file in which the #include was found
            bool ambig;

            // change to absolute name
            QSharedPointer<FileDef> incFd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            QSharedPointer<FileDef> temp;
            if (ambig) {
               temp = QSharedPointer<FileDef>();
            } else {
               temp = incFd;
            }

            oldFileDef->addIncludeDependency(temp, incFileName, localInclude, g_isImported, false);

            // add included by dependency
            if (g_yyFileDef) {
               g_yyFileDef->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, g_isImported);
            }

         } else if (g_inputFileDef) {
            g_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, g_isImported, true);

         }

         fs->bufState = YY_CURRENT_BUFFER;
         fs->lineNr   = oldLineNr;
         fs->fileName = oldFileName;

         // push the state on the stack
         g_includeStack.push(fs);

         // set the scanner to the include file

         // Deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# 1 \"%1\" 1\n").arg(QString(g_yyFileName));
         outputArray(lineStr, lineStr.length());

         DBG_CTX((stderr, "Switching to include file %s\n", csPrintable(incFileName)));
         g_expectGuard = true;
         g_inputBuf    = fs->fileBuf;
         g_inputBufPos = 0;

         preYY_switch_to_buffer(preYY_create_buffer(0, YY_BUF_SIZE));

      } else {

         if (oldFileDef) {
            bool ambig;

            // change to absolute name for bug 641336
            QSharedPointer<FileDef> fd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            // add include dependency to the file in which the #include was found
            oldFileDef->addIncludeDependency(ambig ? QSharedPointer<FileDef>() : fd, incFileName, localInclude, g_isImported, false);

            // add included by dependency
            if (fd) {
               fd->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, g_isImported);
            }

         } else if (g_inputFileDef) {
            g_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, g_isImported, true);
         }

         if (Debug::isFlagSet(Debug::Preprocessor)) {
            if (alreadyIncluded) {
               Debug::print(Debug::Preprocessor, 0, "#include %s: already included, skipping...\n", csPrintable(incFileName));
            } else {
               Debug::print(Debug::Preprocessor, 0, "#include %s: not found, skipping...\n", csPrintable(incFileName));
            }
         }

         if (g_curlyCount > 0 && !alreadyIncluded) { // failed to find #include inside { ... }
            warn(g_yyFileName, g_yyLineNr, "include file %s was not found, check the value of INCLUDE_PATH", csPrintable(incFileName));
         }
      }
   }
}

static void startCondSection(const QString &sectId)
{
   CondParser prs;

   bool expResult = prs.parse(g_yyFileName, g_yyLineNr, sectId);
   g_condStack.push( QMakeShared<CondCtx>(g_yyLineNr, sectId, g_skip) );

   if (! expResult) {
      g_skip = true;
   }
}

static void endCondSection()
{
   if (g_condStack.isEmpty()) {
      g_skip = false;

   } else {
      QSharedPointer<CondCtx> ctx = g_condStack.pop();
      g_skip = ctx->skip;
   }
}

static void forceEndCondSection()
{
   while (! g_condStack.isEmpty()) {
      g_condStack.pop();
   }

   g_skip = false;
}

static QString escapeAt(const QString &text)
{
   QString result;

   for (auto c : text) {
      if (c == '@') {
         result += "@@";

      } else {
         result += c;
      }
   }

   return result;
}

static char resolveTrigraph(char c)
{
   switch (c) {
      case '=':
         return '#';

      case '/':
         return '\\';

      case '\'':
         return '^';

      case '(':
         return '[';

      case ')':
         return ']';

      case '!':
         return '|';

      case '<':
         return '{';

      case '>':
         return '}';

      case '-':
         return '~';
   }

   return '?';
}

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size)   result=yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int c = 0;

   while (g_inputBuf[g_inputBufPos] != 0) {

      QString tmp1    = g_inputBuf.at(g_inputBufPos);
      QByteArray tmp2 = tmp1.toUtf8();

      if (c + tmp2.length() >= max_size)  {
         // buffer is full
         break;
      }

      c += tmp2.length();

      for (auto letters : tmp2) {
         *buf = letters;
          buf++;
      }

      g_inputBufPos++;
   }

   return c;
}

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define CopyStringFtn 8
#define Include 9
#define IncludeID 10
#define EndImport 11
#define DefName 12
#define DefineArg 13
#define DefineText 14
#define SkipCPPBlock 15
#define Ifdef 16
#define Ifndef 17
#define SkipCComment 18
#define ArgCopyCComment 19
#define CopyCComment 20
#define SkipVerbatim 21
#define SkipCPPComment 22
#define RemoveCComment 23
#define RemoveCPPComment 24
#define Guard 25
#define DefinedExpr1 26
#define DefinedExpr2 27
#define SkipDoubleQuote 28
#define SkipSingleQuote 29
#define UndefName 30
#define IgnoreLine 31
#define FindDefineArgs 32
#define ReadString 33
#define CondLineC 34
#define CondLineCpp 35
#define SkipCond 36

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

int preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( preYYtext, preYYleng, 1, preYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1378 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6649 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP

	YY_BREAK
case 2:
YY_RULE_SETUP

	YY_BREAK
case 3:
YY_RULE_SETUP

	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // Trigraph
      unput(resolveTrigraph(preYYtext[2]));
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      BEGIN(Command);
      g_yyColNr  += preYYleng;
      g_yyMLines = 0;
   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
      BEGIN(CopyLine);
   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
      // constructors?
      int i;

      for (i = preYYleng - 1; i >= 0; i--) {
         unput(preYYtext[i]);
      }

      BEGIN(CopyLine);
   }
	YY_BREAK
case 8:
/* rule 8 can match eol */
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{

      // function list macro with one (...) argument, e.g. for K_GLOBAL_STATIC_WITH_ARGS
      // function like macro

      static bool skipFuncMacros = Config::getBool("skip-function-macros");

      QString name = QString::fromUtf8(preYYtext);
      name = name.left(name.indexOf('(')).trimmed();

      QSharedPointer<A_Define> def;

      if (skipFuncMacros && name != "Q_PROPERTY" && ! ( (g_includeStack.isEmpty() || g_curlyCount > 0) && g_macroExpansion &&
                  (def = DefineManager::instance().isDefined(name)) && (! g_expandOnlyPredef || def->isPredefined)) ) {

         outputChar('\n');
         g_yyLineNr++;

      } else {
         // do not skip

         for (int i = preYYleng - 1; i >= 0; i--) {
            unput(preYYtext[i]);
         }

         BEGIN(CopyLine);
      }
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_yyLineNr += text.count('\n');
      outputArray(text, text.length());
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (g_includeStack.isEmpty())  {
         g_curlyCount++;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (g_includeStack.isEmpty() && g_curlyCount > 0)  {
         g_curlyCount--;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyString );
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      if (getLanguageFromFileName(g_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);

      BEGIN( CopyStringFtn );
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_expectGuard = false;
      QSharedPointer<A_Define> def;

      if ((g_includeStack.isEmpty() || g_curlyCount > 0) && g_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                  (! g_expandOnlyPredef || def->isPredefined)) {

         // fount it
         g_roundCount = 0;
         g_defArgsStr = text;

         if (def->nargs == -1) {
            // no function macro

            QString result = def->isPredefined ? def->m_definition : expandMacro(g_defArgsStr);
            outputArray(result, result.length());

         } else {
            // zero or more arguments

            g_findDefArgContext = CopyLine;
            BEGIN(FindDefineArgs);

         }

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((g_includeStack.isEmpty() || g_curlyCount > 0) && g_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                   def->nargs == -1 && (! g_expandOnlyPredef || def->isPredefined)) {

            QString result = def->isPredefined ? def->m_definition : expandMacro(text);
            outputArray(result, result.length());

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 26:
/* rule 26 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      //  strip line continuation characters
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      g_yyLineNr++;
      g_yyColNr = 1;
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      g_defArgsStr += '(';
      g_roundCount++;
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      g_defArgsStr += ')';
      g_roundCount--;

      if (g_roundCount == 0) {
         QString result = expandMacro(g_defArgsStr);

         if (g_findDefArgContext == CopyLine) {
            outputArray(result, result.length());
            BEGIN(g_findDefArgContext);

         } else {
            readIncludeFile(result);
            g_nospaces = false;
            BEGIN(Start);
         }
      }
   }
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("       {
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
   }
  */
case 31:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
    }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
      BEGIN(ArgCopyCComment);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text[0];
      BEGIN(ReadString);
   }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{
      g_defArgsStr += ' ';
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      g_defArgsStr += "@@";
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text[0];
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      g_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      g_defArgsStr += QString::fromUtf8(preYYtext);
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
{
      g_defArgsStr += ' ';
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      g_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text[0];
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      g_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      g_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text[0];
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_isImported = text[1] == 'm';

      if (g_macroExpansion) {
         BEGIN(IncludeID);
      }
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_isImported = text[1] == 'm';
      g_incName = text[text.length() - 1];
      BEGIN(Include);
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      g_yyColNr += preYYleng;
      BEGIN(DefName);
   }
	YY_BREAK
case 48:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr.resize(0);
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 49:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr.resize(0);
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 50:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr = "! ";
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 51:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr = "! ";
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 52:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr.resize(0);
      BEGIN(Guard);
   }
	YY_BREAK
case 53:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         g_guardExpr.resize(0);
         BEGIN(Guard);

      } else {
         g_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      if (otherCaseDone()) {
         g_ifcount = 0;
         BEGIN(SkipCPPBlock);

      } else {
         setCaseDone(true);
      }
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
{
      BEGIN(UndefName);
   }
	YY_BREAK
case 56:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         g_guardExpr.resize(0);
         BEGIN(Guard);
      }
   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      decrLevel();
   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      g_yyLineNr++;
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      g_expectGuard = false;
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(IgnoreLine);
   }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
   }
	YY_BREAK
case 62:
YY_RULE_SETUP

	YY_BREAK
case 63:
YY_RULE_SETUP
{
      g_yyColNr += preYYleng;
   }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((def = DefineManager::instance().isDefined(text)) && ! def->nonRecursive) {
         def->undef = true;
      }
      BEGIN(Start);
   }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_guardExpr += ' ';
      g_yyLineNr++;
   }
	YY_BREAK
case 66:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 67:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 68:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_guardExpr += text;
   }
	YY_BREAK
case 69:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_guardExpr += text[0];
   }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{
      unput(*preYYtext);

      bool guard = computeExpression(g_guardExpr);
      setCaseDone(guard);

      if (guard) {
         BEGIN(Start);

      } else {
         g_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 72:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || g_guardName == text) {
         g_guardExpr+=" 1L ";
      } else {
         g_guardExpr+=" 0L ";
      }

      g_lastGuardName = text;
      BEGIN(Guard);
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || g_guardName == text){
         g_guardExpr+=" 1L ";
      } else {
         g_guardExpr+=" 0L ";
      }

      g_lastGuardName = text;
   }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{
      // should not happen, handle anyway

      g_yyLineNr++;
      g_ifcount = 0;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      BEGIN(Guard);
   }
	YY_BREAK
case 76:
YY_RULE_SETUP

	YY_BREAK
case 77:
YY_RULE_SETUP
{
      BEGIN(SkipCommand);
   }
	YY_BREAK
case 78:
/* rule 78 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 80:
YY_RULE_SETUP

	YY_BREAK
case 81:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_ifcount++;
   }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
      // printf("Else! g_ifcount=%d otherCaseDone=%d\n",g_ifcount,otherCaseDone());

      if (g_ifcount == 0 && ! otherCaseDone()) {
         setCaseDone(true);
         BEGIN(Start);
      }
   }
	YY_BREAK
case 83:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (g_ifcount == 0)  {

         if (! otherCaseDone()) {
            g_guardExpr.resize(0);
            g_lastGuardName.resize(0);
            BEGIN(Guard);

         } else {
            BEGIN(SkipCPPBlock);
         }
      }
   }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
      g_expectGuard = false;
      decrLevel();

      if (--g_ifcount < 0) {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(SkipLine);
   }
	YY_BREAK
case 87:
YY_RULE_SETUP

	YY_BREAK
case 88:
YY_RULE_SETUP

	YY_BREAK
case 89:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      BEGIN(SkipString);
   }
	YY_BREAK
case 91:
YY_RULE_SETUP

	YY_BREAK
case 92:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
   }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
      g_lastCPPContext = YY_START;
      BEGIN(RemoveCPPComment);
   }
	YY_BREAK
case 94:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
   }
	YY_BREAK
case 95:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      g_lastCContext=YY_START;
      BEGIN(RemoveCComment);
   }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 101:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_nospaces   = true;
      g_roundCount = 0;
      g_defArgsStr = text;
      g_findDefArgContext = IncludeID;
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_nospaces = true;
      readIncludeFile(expandMacro(text));
      BEGIN(Start);
   }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_incName += text;
      readIncludeFile(g_incName);

      if (g_isImported) {
         BEGIN(EndImport);
      } else {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(Start);
   }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
      // define with argument

      g_argDict = QMakeShared<QHash<QString, int>>();

      g_defArgs = 0;
      g_defArgsStr.resize(0);
      g_defText.resize(0);
      g_defLitText.resize(0);

      g_defName    = QString::fromUtf8(preYYtext);
      g_defVarArgs = false;
      g_defExtraSpacing.resize(0);
      BEGIN(DefineArg);
   }
	YY_BREAK
case 108:
/* rule 108 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // special case: define with 1 -> can be "guard"

      g_argDict = QSharedPointer<QHash<QString, int>>();

      g_defArgs = -1;
      g_defArgsStr.resize(0);

      g_defName = QString::fromUtf8(preYYtext);
      g_defName = g_defName.left(g_defName.length() - 1).trimmed();
      g_defVarArgs = false;

      if (g_curlyCount > 0 || g_defName != g_lastGuardName || ! g_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + g_defName;
         outputArray(tmp, tmp.length());

         g_quoteArg      = false;
         g_insideComment = false;
         g_lastGuardName.resize(0);
         g_defText    = "1";
         g_defLitText = "1";
         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         g_defText.resize(0);
         g_defLitText.resize(0);
         BEGIN(Start);
      }

      g_expectGuard = false;
   }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{
      // empty define
      QString text = QString::fromUtf8(preYYtext);

      g_argDict = QSharedPointer<QHash<QString, int>>();

      g_defArgs = -1;
      g_defName = text;

      g_defArgsStr.resize(0);
      g_defText.resize(0);
      g_defLitText.resize(0);
      g_defVarArgs = false;

      if (g_curlyCount > 0 || g_defName != g_lastGuardName || ! g_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + g_defName;
         outputArray(tmp, tmp.length());

         g_quoteArg      = false;
         g_insideComment = false;

         if (g_insideCS) {
            g_defText="1"; // for C#, use "1" as define text
         }

         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         g_guardName = text;
         g_lastGuardName.resize(0);
         BEGIN(Start);
      }

      g_expectGuard = false;
   }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
      // define with content
      QString text = QString::fromUtf8(preYYtext);

      g_argDict = QSharedPointer<QHash<QString, int>>();

      g_defArgs = -1;
      g_defArgsStr.resize(0);

      g_defText.resize(0);
      g_defLitText.resize(0);
      g_defName    = text;
      g_defVarArgs = false;

      QString tmp = "#define " + g_defName + g_defArgsStr;
      outputArray(tmp, tmp.length());

      g_quoteArg      = false;
      g_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{
      g_defExtraSpacing += "\n";
      g_yyLineNr++;
   }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
   }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
   }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;

      QString tmp = "#define " + g_defName + g_defArgsStr + g_defExtraSpacing;
      outputArray(tmp, tmp.length());

      g_quoteArg      = false;
      g_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
      // Variadic macro
      g_defVarArgs = true;
      g_defArgsStr +=  QString::fromUtf8(preYYtext);

      g_argDict->insert("__VA_ARGS__", g_defArgs);
      g_defArgs++;
   }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;

      g_defVarArgs = text.endsWith("...");

      if (g_defVarArgs)  {
         // strip ellipsis
         text = text.left(text.length() - 3);
      }

      text = text.trimmed();

      g_argDict->insert(text, g_defArgs);
      g_defArgs++;
   }
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"  {
      g_defText+=preYYtext;
      g_defLitText+=preYYtext;
      g_insideComment=true;
   }

<DefineText>"* /"          {
      g_defText+=preYYtext;
      g_defLitText+=preYYtext;
      g_insideComment=false;
   }
  */
case 117:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
       QString text = QString::fromUtf8(preYYtext);

      g_defText   += text;
      g_defLitText+= text;
      g_lastCContext = YY_START;
      g_commentCount = 1;
      BEGIN(CopyCComment);
   }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      g_lastCPPContext  = YY_START;
      g_defLitText     += ' ';
      BEGIN(SkipCPPComment);
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (text[0] == '/') {
         outputChar('/');
      }

      outputChar('*');
      outputChar('/');

      if (--g_commentCount <= 0) {

         if (g_lastCContext == Start) {
            // small hack to make sure that ^... rule will
            // match when going to Start... Example: "/*...*/ some stuff..."

            YY_CURRENT_BUFFER->yy_at_bol = 1;
         }

         BEGIN(g_lastCContext);
      }
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');

      // g_commentCount++;
   }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         g_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         g_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());
      g_yyLineNr += text.count('\n');
   }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());

      g_yyLineNr += text.count('\n');
      g_fenceSize = 0;

      if (text[1] == 'f') {
         g_blockName = "f";

      } else {
         QString bn = text.mid(1);
         int i = bn.indexOf('{');

         // for \code{.c}
         if (i != -1) {
            bn = bn.left(i);
         }

         g_blockName = bn.trimmed();
      }
      BEGIN(SkipVerbatim);
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      // escaped @cond
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
      // conditional section
      g_ccomment = true;
      g_condCtx  = YY_START;
      BEGIN(CondLineCpp);
   }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
      // conditional section
      g_ccomment = false;
      g_condCtx  = YY_START;
      BEGIN(CondLineC);
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      startCondSection(text);

      if (g_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/", 2);
            g_ccomment = true;

         } else {
            g_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(g_condCtx);

      }
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      // non-guard character
      unput(*preYYtext);
      startCondSection(" ");

      if (g_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/",2);
            g_ccomment = true;

         } else {
            g_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(g_condCtx);
      }
   }
	YY_BREAK
case 132:
/* rule 132 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // no guard
      if (YY_START == SkipCComment) {
         g_ccomment=true;
         // end C comment
         outputArray("*/",2);

      } else {
         g_ccomment = false;
      }

      g_condCtx = YY_START;
      startCondSection(" ");
      BEGIN(SkipCond);
   }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
      g_ccomment = false;
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      g_ccomment = true;
   }
	YY_BREAK
case 138:
/* rule 138 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! g_skip) {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 139:
/* rule 139 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      bool oldSkip = g_skip;
      endCondSection();

      if (oldSkip && ! g_skip) {
         if (g_ccomment) {
            outputArray("/** ",4);

            // */ (editor syntax fix)
         }

         BEGIN(g_condCtx);
      }
   }
	YY_BREAK
case 140:
/* rule 140 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      bool oldSkip = g_skip;
      endCondSection();

      if (oldSkip && ! g_skip)  {
         BEGIN(g_condCtx);
      }
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      /* end of verbatim block */

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (text[1] == 'f' && g_blockName == "f") {
         BEGIN(SkipCComment);

      } else if (text.mid(4) == g_blockName) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (g_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (g_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
      outputChar(*preYYtext);
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defLitText += text;
      g_defText    += escapeAt(text);
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defLitText += text;
      g_defText    += text;
      BEGIN(g_lastCContext);
   }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_yyLineNr++;
      outputChar('\n');
      g_defLitText += text;
      g_defText+=' ';
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
{
      // see bug 594021 for a usecase for this rule
      if (g_lastCContext == SkipCPPBlock) {
         BEGIN(SkipCommand);

      } else {
         REJECT;
      }
   }
	YY_BREAK
case 152:
YY_RULE_SETUP
{
      BEGIN(g_lastCContext);
   }
	YY_BREAK
case 153:
YY_RULE_SETUP

	YY_BREAK
case 154:
YY_RULE_SETUP

	YY_BREAK
case 155:
YY_RULE_SETUP

	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 157:
YY_RULE_SETUP

	YY_BREAK
case 158:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
{
      unput(*preYYtext);
      BEGIN(g_lastCPPContext);
   }
	YY_BREAK
case 160:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');
   }
	YY_BREAK
case 161:
YY_RULE_SETUP
{
      outputChar('/');
      outputChar('/');
   }
	YY_BREAK
case 162:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 163:
YY_RULE_SETUP
{
      outputChar(*preYYtext);
   }
	YY_BREAK
case 164:
YY_RULE_SETUP

	YY_BREAK
case 165:
YY_RULE_SETUP

	YY_BREAK
case 166:
YY_RULE_SETUP

	YY_BREAK
case 167:
YY_RULE_SETUP

	YY_BREAK
case 168:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      g_quoteArg   = true;
      g_defLitText += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 169:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defLitText += text;

      if (g_quoteArg) {
         g_defText+="\"";
      }

      if (g_defArgs > 0) {
         auto iter = g_argDict->find(text);

         if (iter != g_argDict->end()) {
            int n = iter.value();

            g_defText += '@';

            QString numStr = QString("%1").arg(n);
            g_defText += numStr;

         } else {
            g_defText += text;

         }

      } else {
         g_defText += text;
      }

      if (g_quoteArg) {
         g_defText += "\"";
      }

      g_quoteArg = false;
   }
	YY_BREAK
case 170:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defLitText += text;
      g_defText    += text;
   }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defLitText += text;
      outputChar('\n');
      g_defText += ' ';
      g_yyLineNr++;
      g_yyMLines++;
   }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QString comment = extractTrailingComment(g_defLitText);
      g_defLitText += text;

      if (! comment.isEmpty()) {
         outputArray(comment, comment.length());
         g_defLitText = g_defLitText.left(g_defLitText.length() - comment.length() - 1);
      }

      outputChar('\n');

      QSharedPointer<A_Define> def;

      if (g_includeStack.isEmpty() || g_curlyCount > 0) {
         addDefine();
      }

      def = DefineManager::instance().isDefined(g_defName);

      if (def == nullptr)  {
         // new define

         QSharedPointer<A_Define> nd = newDefine();
         DefineManager::instance().addDefine(g_yyFileName, nd);

      } else if (def) {
         // name already exists

         if (def->undef) {
            // undefined name
            def->undef        = false;
            def->m_name       = g_defName;
            def->m_definition = g_defText.trimmed();
            def->nargs        = g_defArgs;
            def->m_fileName   = g_yyFileName;
            def->lineNr       = g_yyLineNr - g_yyMLines;
            def->columnNr     = g_yyColNr;
         }
      }

      g_argDict = QSharedPointer<QHash<QString, int>>();

      g_yyLineNr++;
      g_yyColNr = 1;
      g_lastGuardName.resize(0);
      BEGIN(Start);
   }
	YY_BREAK
case 173:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defText    += ' ';
      g_defLitText += text;
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defText    += "##";
      g_defLitText += text;
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defText     += "@@";
      g_defLitText  += text;
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;

      if (! g_insideComment) {
         BEGIN(SkipDoubleQuote);
      }
   }
	YY_BREAK
case 177:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;

      if (! g_insideComment) {
         BEGIN(SkipSingleQuote);
      }
   }
	YY_BREAK
case 178:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text;
      g_defLitText += text;
   }
	YY_BREAK
case 179:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text;
      g_defLitText += text;
   }
	YY_BREAK
case 180:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 181:
YY_RULE_SETUP
{
     QString text = QString::fromUtf8(preYYtext);

      g_defText    += text;
      g_defLitText += text;
   }
	YY_BREAK
case 182:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
   }
	YY_BREAK
case 184:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
   }
	YY_BREAK
case 185:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
   }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(CopyStringFtn):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
{
      DBG_CTX((stderr, "End of include file\n"));

      if (g_includeStack.isEmpty()) {
         DBG_CTX((stderr, "Terminating scanner\n"));
         yyterminate();

      } else {
         QSharedPointer<FileState> fs = g_includeStack.pop();

         YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
         preYY_switch_to_buffer(fs->bufState );
         preYY_delete_buffer(oldBuf );

         g_yyLineNr    = fs->lineNr;
         g_inputBuf    = fs->oldFileBuf;
         g_inputBufPos = fs->oldFileBufPos;
         setFileName(fs->fileName);

         DBG_CTX((stderr, "######## FileName %s\n", csPrintable(g_yyFileName)));

         // deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# %1 \"%2\" 2").arg(g_yyLineNr).arg(QString(g_yyFileName));
         outputArray(lineStr, lineStr.length());
      }
   }
	YY_BREAK
case 186:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
case 187:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      if (YY_START == SkipVerbatim || YY_START == SkipCond) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         g_lastCContext = YY_START;
         g_commentCount = 1;

         if (preYYleng == 3) {
            g_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
{
      if (YY_START == SkipVerbatim || YY_START == SkipCond) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         g_lastCPPContext = YY_START;

         if (preYYleng == 3) {
            g_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCPPComment);
      }
   }
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
   }
	YY_BREAK
case 190:
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(preYYtext);
      g_expectGuard = false;

      for (QChar c : text) {
         outputChar(c);
      }
   }
	YY_BREAK
case 191:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 61);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1378 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 61;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1378 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1377);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
int preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static int getNextChar(const QString &expr, QString *rest, uint &pos)
{
   if (pos < expr.length()) {
      return expr.at(pos++).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc  = rest->at(0).unicode();
      *rest   = rest->right(rest->length() - 1);
      return cc;

   } else {
      int cc = yyinput();

      return cc;
   }
}

static int getCurrentChar(const QString &expr, QString *rest, uint pos)
{
   if (pos < expr.length()) {
      return expr.at(pos).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc = rest->at(0).unicode();
      return cc;

   } else {
      int cc = yyinput();

      returnCharToStream(cc);
      return cc;
   }
}

static void unputChar(const QString &expr, QString *rest, uint &pos, char c)
{
   if (pos < expr.length()) {
      pos++;

   } else if (rest) {
      char cs[2];
      cs[0] = c;
      cs[1] = '\0';
      rest->prepend(cs);

   } else {

      returnCharToStream(c);
   }
}

void addSearchDir(const QString &dir)
{
   QFileInfo fi(dir);

   if (fi.isDir()) {
      g_pathList.append(fi.absoluteFilePath());
   }
}

void initPreprocessor()
{
   addSearchDir(".");
   g_expandedDict = QMakeShared<DefineDict>();
}

void removePreProcessor()
{
   g_expandedDict = QSharedPointer<DefineDict>();
   g_pathList.clear();

   DefineManager::deleteInstance();
}

QString preprocessFile(const QString &fileName, const QString &input)
{
   printlex(preYY_flex_debug, true, __FILE__, csPrintable(fileName) );

   g_macroExpansion   = Config::getBool("macro-expansion");
   g_expandOnlyPredef = Config::getBool("expand-only-predefined");

   g_skip        = false;
   g_curlyCount  = 0;
   g_nospaces    = false;
   g_inputBufPos = 0;

   g_inputBuf    = input;
   g_outputBuf   = "";

   g_includeStack.clear();
   g_expandedDict->clear();
   g_condStack.clear();

   uint orgOffset = 0;

   setFileName(fileName);

   g_inputFileDef = g_yyFileDef;
   DefineManager::instance().startContext(g_yyFileName);

   static bool firstTime = true;

   if (firstTime)  {
      // add predefined macros
      static QStringList const preDefinedMacros = Config::getList("predefined-macros");

      for (const auto &definedMacro : preDefinedMacros) {

         int posEquals = definedMacro.indexOf('=');
         int posOpen   = definedMacro.indexOf('(');
         int posClose  = definedMacro.indexOf(')');

         bool nonRecursive = posEquals > 0 && definedMacro.at(posEquals - 1) == ':';

         if (posOpen == 0) {
            // no define name
            continue;
         }

         if (posOpen < posEquals && posClose < posEquals && posOpen != -1  &&
                  posClose != -1  &&  posOpen < posClose) {

            // predefined function macro definition

            // regexp matching an id
            QRegExp reId("[a-z_A-Z\x80-\xFF][a-z_A-Z0-9\x80-\xFF]*");
            QHash<QString, int> argDict;

            int index = posOpen + 1;
            int pos;
            int len;
            int count = 0;

            // gather the formal arguments in a dictionary
            while (index < posClose && (pos = reId.indexIn(definedMacro, index))) {
               len = reId.matchedLength();

               if (len > 0) {
                  argDict.insert(definedMacro.mid(pos, len), count++);
                  index = pos + len;

               } else {
                  index++;
               }
            }

            // strip definition part
            QString tmp = definedMacro.right(definedMacro.length() - posEquals - 1);
            QString definition;

            index = 0;

            // substitute all occurrences of formal arguments with their corresponding markers
            while ((pos = reId.indexIn(tmp, index)) != -1) {
               len = reId.matchedLength();

               if (pos > index) {
                  definition += tmp.mid(index, pos - index);
               }

               auto iter = argDict.find(tmp.mid(pos, len));

               if (iter != argDict.end()) {
                  int argIndex = iter.value();

                  QString marker = QString(" @%1 ").arg(argIndex);
                  definition += marker;

               } else {
                  definition += tmp.mid(pos, len);
               }

               index = pos + len;
            }

            if (index < tmp.length()) {
               definition += tmp.mid(index, tmp.length() - index);
            }

            // add define definition to the dictionary of defines for this file
            QString dname = definedMacro.left(posOpen);

            if (! dname.isEmpty()) {
               QSharedPointer<A_Define> def = QMakeShared<A_Define>();

               def->m_name       = dname;
               def->m_definition = definition;
               def->nargs        = count;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = g_yyFileDef;
               def->m_fileName   = fileName;

               DefineManager::instance().addDefine(g_yyFileName, def);
            }

         } else if ((posOpen == -1 || posOpen > posEquals)   &&
                    (posClose == -1 || posClose > posEquals) &&
                    ! definedMacro.isEmpty() && definedMacro.length() > posEquals)  {

            // predefined non-function macro definition
            QSharedPointer<A_Define> def = QMakeShared<A_Define>();

            if (posEquals == -1) {
               // simple define without argument
               def->m_name = definedMacro;
               def->m_definition = "1"; // substitute occurrences by 1 (true)

            } else {
               // simple define with argument
               int ine = posEquals - (nonRecursive ? 1 : 0);
               def->m_name = definedMacro.left(ine);
               def->m_definition = definedMacro.right(definedMacro.length() - posEquals - 1);
            }

            if (! def->m_name.isEmpty()) {
               def->nargs = -1;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = g_yyFileDef;
               def->m_fileName   = fileName;
               DefineManager::instance().addDefine(g_yyFileName, def);
            }
         }
      }
   }

   g_yyLineNr = 1;
   g_yyColNr  = 1;
   g_ifcount  = 0;

   g_levelGuard.clear();

   BEGIN( Start );

   g_expectGuard = determineSection(fileName) == Entry::HEADER_SEC;
   g_guardName.resize(0);
   g_lastGuardName.resize(0);
   g_guardExpr = "";

   preYYlex();

   g_lexInit = true;

   while (! g_condStack.isEmpty()) {
      QSharedPointer<CondCtx> ctx = g_condStack.pop();
      QString sectionInfo = " ";

      if (ctx->sectionId != " ") {
         sectionInfo = QString(" with label %1 ").arg(QString(ctx->sectionId));
      }

      warn(fileName, ctx->lineNr, "Conditional section %s does not have "
           "a corresponding \\endcond command within this file.", csPrintable(sectionInfo));
   }

   // make sure we do not extend a \cond with missing \endcond over multiple files
   forceEndCondSection();

   DefineManager::instance().endContext();
   printlex(preYY_flex_debug, false, __FILE__, csPrintable(fileName));

   return g_outputBuf;
}

void preFreeScanner()
{
   if (g_lexInit) {
      preYYlex_destroy();
   }
}

