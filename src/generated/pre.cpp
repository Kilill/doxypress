/*************************************************************************
 *
 * Copyright (C) 2014-2018 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License version 2
 * is hereby granted. No representations are made about the suitability of
 * this software for any purpose. It is provided "as is" without express or
 * implied warranty. See the GNU General Public License for more details.
 *
 * Documents produced by DoxyPress are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,int len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 193
#define YY_END_OF_BUFFER 194
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1618] =
    {   0,
      174,  174,  194,  192,  193,    1,  192,  193,  190,  193,
        3,  192,  193,  192,  193,  192,  193,  192,  193,    2,
      192,  193,    6,  192,  193,    1,    6,  192,  193,    6,
      192,  193,    6,  190,  193,    3,    6,  192,  193,    5,
      192,  193,    6,  192,  193,    6,  192,  193,    6,  192,
      193,    6,  192,  193,    6,  192,  193,    2,    6,  192,
      193,   63,  192,  193,    1,   63,  192,  193,   58,  190,
      193,    3,   63,  192,  193,   63,  192,  193,   63,  192,
      193,   60,   63,  192,  193,   60,   63,  192,  193,   60,
       63,  192,  193,   60,   63,  192,  193,   60,   63,  192,

      193,   60,   63,  192,  193,   60,   63,  192,  193,   60,
       63,  192,  193,    2,   63,  192,  193,   87,  192,  193,
        1,   87,  192,  193,   85,  190,  193,    3,   87,  192,
      193,   87,  192,  193,   87,  192,  193,   86,   87,  192,
      193,   86,   87,  192,  193,   86,   87,  192,  193,   86,
       87,  192,  193,    2,   87,  192,  193,   88,   91,  192,
      193,    1,   88,   91,  192,  193,   96,  190,  193,    3,
       88,   91,  192,  193,   90,   91,  192,  193,   91,  192,
      193,   91,  192,  193,   88,   91,  192,  193,   88,   91,
      192,  193,    2,   88,   91,  192,  193,   97,  100,  192,

      193,    1,   97,  100,  192,  193,    3,   97,  100,  192,
      193,   99,  100,  192,  193,   97,  100,  192,  193,   97,
      100,  192,  193,  100,  192,  193,   97,  100,  192,  193,
        2,   97,  100,  192,  193,   27,  192,  193,    1,   27,
      192,  193,   28,  190,  193,    3,   27,  192,  193,   16,
       27,  192,  193,   17,   27,  192,  193,   27,  192,  193,
       27,  192,  193,   25,   27,  192,  193,16408,   27,  192,
      193,   25,   27,  192,  193,16408,   11,   27,  192,  193,
       12,   27,  192,  193,   25,   27,  192,  193,16408,    2,
       27,  192,  193,   18,  192,  193,    1,   18,  192,  193,

       20,  192,  193,   18,  192,  193,   18,  192,  193,  192,
      193,   18,  192,  193,    2,   18,  192,  193,   21,  192,
      193,    1,   21,  192,  193,   23,  192,  193,   21,  192,
      193,   21,  192,  193,  192,  193,   21,  192,  193,    2,
       21,  192,  193,  192,  193,    1,  192,  193,    3,  192,
      193,  192,  193,  192,  193,  192,  193,    2,  192,  193,
      102,  192,  193,  102,  192,  193,  106,  192,  193,    1,
      106,  192,  193,  104,  190,  193,    3,  106,  192,  193,
      106,  192,  193,  106,  192,  193,  106,  192,  193,  106,
      192,  193,    2,  106,  192,  193, 8302,  192,  193,16491,

    16493,16494, 8302,  192,  193,16491,16493,16494,  192,  193,
      113,  192,  193,  114,  192,  193,  112,  192,  193,  192,
      193,  116,  192,  193,  192,  193,  116,  192,  193,  186,
      192,  193,    1,  186,  192,  193,  174,  186,  192,  193,
      173,  190,  193,    3,  186,  192,  193,  177,  186,  192,
      193,  169,  186,  192,  193,  178,  186,  192,  193,  186,
      192,  193,  186,  192,  193,  176,  186,  192,  193,  170,
      186,  192,  193,  186,  192,  193,  170,  186,  192,  193,
        2,  186,  192,  193,   80,  192,  193,    1,   80,  192,
      193,   79,  190,  193,    3,   80,  192,  193,   80,  192,

      193,   80,  192,  193,   80,  192,  193,    2,   80,  192,
      193,   78,   80,  192,  193,    1,   78,   80,  192,  193,
       78,   80,  192,  193,   78,   79,  190,  193,    3,   78,
       80,  192,  193,   77,   80,  192,  193,   78,   80,  192,
      193,   78,   80,  192,  193,   78,   80,  192,  193,    2,
       78,   80,  192,  193,  145,  147,  192,  193,    1,  147,
      192,  193,  146,  190,  193,    3,  145,  147,  192,  193,
      147,  192,  193,  147,  192,  193,  145,  147,  192,  193,
      147,  192,  193,  147,  192,  193,  145,  147,  192,  193,
        2,  145,  147,  192,  193,  145,  147,  192,  193,  147,

      192,  193,  147,  192,  193,  147,  192,  193,   37,   40,
      192,  193,    1,   37,   40,  192,  193,   39,  190,  193,
        3,   37,   40,  192,  193,   40,  192,  193,   37,   40,
      192,  193,   37,   40,  192,  193,   37,   40,  192,  193,
        2,   37,   40,  192,  193,  148,  171,  192,  193,    1,
      148,  171,  192,  193,  151,  190,  193,    3,  148,  171,
      192,  193,  171,  192,  193,  148,  171,  192,  193,  148,
      171,  192,  193,  170,  171,  192,  193,  171,  192,  193,
      170,  171,  192,  193,    2,  148,  171,  192,  193,  147,
      192,  193,  147,  192,  193,  147,  192,  193,  145,  147,

      192,  193,  147,  192,  193,  147,  192,  193,  147,  192,
      193,  159,  163,  164,  192,  193,    1,  159,  164,  192,
      193,  160,  190,  193,    3,  159,  163,  164,  192,  193,
      163,  164,  192,  193,  159,  163,  164,  192,  193,  164,
      192,  193,  159,  163,  164,  192,  193,    2,  159,  163,
      164,  192,  193,  156,  158,  192,  193,    1,  158,  192,
      193,  157,  190,  193,    3,  156,  158,  192,  193,  158,
      192,  193,  156,  158,  192,  193,  156,  158,  192,  193,
      156,  158,  192,  193,    2,  156,  158,  192,  193,  167,
      168,  192,  193,    1,  168,  192,  193,    3,  167,  168,

      192,  193,  167,  168,  192,  193,  167,  168,  192,  193,
      167,  168,  192,  193,    2,  167,  168,  192,  193,   69,
      192,  193,    1,   69,  192,  193,   70,  190,  193,    3,
       69,  192,  193,   69,  192,  193,   69,  192,  193,   68,
       69,  192,  193,   69,  192,  193,   68,   69,  192,  193,
       68,   69,  192,  193,    2,   69,  192,  193,   76,  192,
      193,    1,   76,  192,  193,   74,  190,  193,    3,   76,
      192,  193,   76,  192,  193,   76,  192,  193,   72,   76,
      192,  193,   76,  192,  193,   72,   76,  192,  193,    2,
       76,  192,  193,   75,   76,  192,  193,   73,   76,  192,

      193,   73,   76,  192,  193,  184,  192,  193,    1,  184,
      192,  193,    3,  184,  192,  193,  181,  184,  192,  193,
      184,  192,  193,  184,  192,  193,  184,  192,  193,  184,
      192,  193,    2,  184,  192,  193,  185,  192,  193,    1,
      185,  192,  193,    3,  185,  192,  193,  183,  185,  192,
      193,  185,  192,  193,  185,  192,  193,  185,  192,  193,
      185,  192,  193,    2,  185,  192,  193,   64,  192,  193,
       64,  192,  193,   62,  192,  193,    1,   62,  192,  193,
        3,   62,  192,  193,   62,  192,  193,   62,  192,  193,
       62,  192,  193,   62,  192,  193,    2,   62,  192,  193,

       36,  192,  193,    1,   36,  192,  193,   34,  190,  193,
        3,   36,  192,  193,   33,   36,  192,  193,   36,  192,
      193,   29,   36,  192,  193,   30,   36,  192,  193,   36,
      192,  193,   36,  192,  193,   35,   36,  192,  193,   36,
      192,  193,    2,   36,  192,  193,   44,  192,  193,    1,
       44,  192,  193,    3,   44,  192,  193,   41,   44,  192,
      193,   44,  192,  193,   44,  192,  193,   44,  192,  193,
       44,  192,  193,    2,   44,  192,  193,  131,  192,  193,
        1,  131,  192,  193,  130,  131,  192,  193,    3,  131,
      192,  193,  131,  192,  193,  131,  192,  193,  130,  131,

      192,  193,    2,  131,  192,  193,  134,  135,  192,  193,
        1,  134,  135,  192,  193,  133,  190,  193,    3,  134,
      135,  192,  193,  134,  192,  193,  134,  192,  193,  134,
      135,  192,  193,  134,  192,  193,  134,  135,  192,  193,
        2,  134,  135,  192,  193,  188,  189,  191,    6,    6,
        5,    6,    6,  191,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,  191,   95,  188,   93,  189,
       86,   86,   86,   86,   86,  191,   88,   88,   88,  191,
       97,   94,   97,  188,   92,   97,  189,   97,   98,   97,
      191, 8216,   25,16408,   26,   25,16408,   25,  191,16408,

       18,   18,  188,   18,  189,   18,   19,   18,  191,   21,
       21,  188,   21,  189,   21,   22,   21,  191,  103,  188,
      189,  191,  101,  102,  102,  191,  104,  188,  189,  105,
      191, 8302, 8301, 8299, 8302,16491,16493,16494, 8302,  191,
    16491,16493,16494,  114,  113,  114,  112,  116,  116,  111,
      116,  191,  174,  175,  117,  188,  118,  189,  170,  172,
      170,  191,   78,   78,   77,  145,  119,  121,  188,  120,
      189,  145,  145,  191,  145,   37,   38,   37,  189,   37,
       37,  191,  148,  150,  148,  189,  148,  149,  148,  144,
      144,  188,  145,  159,  163,  159,  163,  161,  163,  188,

      162,  163,  189,  159,  163,  159,  163,  191,  156,  153,
      155,  188,  154,  156,  189,  156,  156,  191,  167,  165,
      167,  188,  166,  167,  189,  167,  167,  191,   68,   65,
       68,   68,  191,   72,   71,   72,  191,   73,   73,  191,
      180,  188,  179,  189,  182,   64,   64,  191,   61,   32,
      188,   42,  188,   42,  189,   43,  130,  130,  191,  135,
      188,  189,  135,  135,  191,  188,  189,    4,   60,   60,
       60,   60,   60,   52,   60,   60,   60,   60,   60,   60,
       95,   95,  188,   93,   93,  189,   86,   86,   86,   81,
       86,   86,   89,    4,   88,   94,   97,   94,   94,   97,

      188,   92,   97,   92,   92,   97,  189,    4,   97,   15,
       15,   25,16408,   18,  188,   18,  189,    4,   18,   21,
      188,   21,  189,    4,   21,  188,  189,    4,    4,  103,
      188,  189,    4,  115,  175,  117,  117,  188,  118,  118,
      189,  120,  189,    4,  145,  145,  124,  123,   37,  189,
        4,   37,  148,  189,    4,  148,  141,  145,  143,  142,
      163,  188,  163,  189,    4,  159,  163,    4,  163,  152,
      156,  189,    4,  156,  167,  188,  167,  189,    4,  167,
       68,  179,  189,   31,   32,  188,  137,  137,  188,  136,
      136,  189,    4,  135,  187,16391,16391,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   95,  187,
       86,   82,   86,   86,   86,   89,   94,   97,  187,   14,
       13,   14,   25,16408,   18,  187,   21,  187,  187,  187,
      108,  116,  120,  122,  145,  124,  123,  145,  143,  142,
      163,  187,  167,  187,   68,   31,16391,    9, 8199,   60,
       60,   53,   56,   54,   54,   60,   60,   60,   60,   60,
       60,   60,   60,   83,   86,   84,   86,   86,   13,   25,
    16408,  126,   68, 8199,    9,   60,   60,   57,   49,   48,
       60,   60,   60,   60,   55,   25,16408,  125,  129,  132,
      128,   68,    8,    9,   47,   51,   50,16429,   46,   10,

      127,   68,    9, 8237,   67,   66,    9, 8237,  140,  139,
        9,  138,    9,   59,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_accept[1399] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    6,    9,   11,   14,
       16,   18,   20,   23,   26,   30,   33,   36,   40,   43,
       46,   49,   52,   55,   58,   62,   65,   69,   72,   76,

       79,   82,   86,   90,   94,   98,  102,  106,  110,  114,
      118,  121,  125,  128,  132,  135,  138,  142,  146,  150,
      154,  158,  162,  167,  170,  175,  179,  182,  185,  189,
      193,  198,  202,  207,  212,  216,  220,  224,  227,  231,
      236,  239,  243,  246,  250,  254,  258,  261,  264,  269,
      272,  277,  281,  285,  290,  294,  297,  301,  304,  307,
      310,  312,  315,  319,  322,  326,  329,  332,  335,  337,
      340,  344,  346,  349,  352,  354,  356,  358,  361,  364,
      367,  370,  374,  377,  381,  384,  387,  390,  393,  397,
      403,  409,  411,  414,  417,  420,  422,  425,  427,  430,

      433,  437,  441,  444,  448,  452,  456,  460,  463,  466,
      470,  474,  477,  481,  485,  488,  492,  495,  499,  502,
      505,  508,  512,  516,  521,  525,  529,  534,  538,  542,
      546,  550,  555,  559,  563,  566,  571,  574,  577,  581,
      584,  587,  591,  596,  600,  603,  606,  609,  613,  618,
      621,  626,  629,  633,  637,  641,  646,  650,  655,  658,
      663,  666,  670,  674,  678,  681,  685,  690,  693,  696,
      699,  703,  706,  709,  712,  717,  722,  725,  731,  735,
      740,  743,  748,  754,  758,  762,  765,  770,  773,  777,
      781,  785,  790,  794,  798,  803,  807,  811,  815,  820,

      823,  827,  830,  834,  837,  840,  844,  847,  851,  855,
      859,  862,  866,  869,  873,  876,  879,  883,  886,  890,
      894,  898,  902,  906,  909,  913,  917,  921,  924,  927,
      930,  933,  937,  940,  944,  948,  952,  955,  958,  961,
      964,  968,  971,  974,  977,  981,  985,  988,  991,  994,
      997, 1001, 1004, 1008, 1011, 1015, 1019, 1022, 1026, 1030,
     1033, 1036, 1040, 1043, 1047, 1050, 1054, 1058, 1062, 1065,
     1068, 1071, 1074, 1078, 1081, 1085, 1089, 1093, 1096, 1099,
     1103, 1107, 1111, 1116, 1119, 1124, 1127, 1130, 1134, 1137,
     1141, 1146, 1147, 1148, 1148, 1149, 1150, 1151, 1152, 1153,

     1154, 1154, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
     1162, 1163, 1164, 1165, 1167, 1169, 1171, 1172, 1173, 1174,
     1175, 1177, 1178, 1178, 1178, 1179, 1181, 1182, 1185, 1188,
     1189, 1190, 1192, 1192, 1192, 1192, 1193, 1195, 1196, 1196,
     1198, 1201, 1202, 1204, 1206, 1207, 1208, 1210, 1211, 1213,
     1215, 1216, 1217, 1219, 1219, 1220, 1221, 1222, 1222, 1223,
     1223, 1224, 1225, 1227, 1227, 1228, 1229, 1230, 1230, 1231,
     1231, 1232, 1233, 1234, 1235, 1239, 1239, 1244, 1244, 1245,
     1246, 1247, 1248, 1248, 1249, 1249, 1250, 1251, 1253, 1254,
     1254, 1255, 1257, 1259, 1260, 1261, 1261, 1263, 1264, 1265,

     1266, 1267, 1268, 1270, 1272, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1275, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1277, 1278, 1280, 1281, 1283, 1284,
     1284, 1285, 1287, 1288, 1289, 1290, 1291, 1293, 1293, 1293,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1296, 1297, 1298,
     1301, 1304, 1306, 1306, 1306, 1309, 1310, 1311, 1313, 1316,
     1317, 1319, 1320, 1323, 1326, 1327, 1329, 1330, 1331, 1331,
     1332, 1334, 1335, 1336, 1338, 1339, 1341, 1343, 1345, 1346,
     1347, 1349, 1350, 1350, 1350, 1350, 1352, 1354, 1356, 1357,
     1358, 1360, 1361, 1362, 1363, 1364, 1364, 1364, 1366, 1367,

     1368, 1369, 1369, 1369, 1369, 1369, 1370, 1371, 1372, 1373,
     1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1384,
     1385, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1393, 1394,
     1394, 1394, 1396, 1398, 1399, 1402, 1404, 1405, 1408, 1410,
     1411, 1411, 1412, 1412, 1412, 1414, 1416, 1418, 1420, 1422,
     1424, 1426, 1427, 1428, 1429, 1431, 1432, 1433, 1434, 1434,
     1434, 1435, 1435, 1436, 1437, 1439, 1440, 1442, 1444, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1447,
     1447, 1448, 1449, 1451, 1453, 1455, 1457, 1457, 1458, 1459,

     1459, 1460, 1461, 1463, 1465, 1468, 1470, 1470, 1470, 1470,
     1471, 1473, 1475, 1477, 1479, 1481, 1482, 1484, 1484, 1485,
     1485, 1485, 1487, 1488, 1490, 1491, 1493, 1495, 1495, 1496,
     1496, 1496, 1497, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
     1504, 1505, 1506, 1507, 1508, 1509, 1511, 1512, 1514, 1515,
     1516, 1516, 1517, 1517, 1520, 1521, 1523, 1523, 1523, 1525,
     1527, 1529, 1530, 1531, 1532, 1533, 1534, 1534, 1534, 1534,
     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1536, 1536,
     1537, 1538, 1538, 1539, 1539, 1540, 1541, 1543, 1543, 1543,

     1545, 1546, 1546, 1547, 1547, 1547, 1547, 1548, 1548, 1549,
     1549, 1550, 1551, 1552, 1554, 1555, 1556, 1557, 1558, 1559,
     1560, 1561, 1562, 1563, 1564, 1565, 1565, 1566, 1568, 1569,
     1569, 1569, 1570, 1570, 1570, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1573, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1575, 1575, 1576, 1576, 1577,
     1578, 1578, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
     1586, 1586, 1586, 1588, 1588, 1588, 1588, 1589, 1589, 1589,

     1589, 1589, 1589, 1589, 1589, 1589, 1590, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1592, 1593, 1593, 1593, 1593,
     1593, 1594, 1594, 1595, 1595, 1596, 1596, 1597, 1598, 1599,
     1600, 1600, 1600, 1600, 1600, 1600, 1601, 1601, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1603, 1603, 1603, 1603, 1603,
     1604, 1604, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,

     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1606,
     1607, 1607, 1607, 1607, 1607, 1608, 1608, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1611, 1611, 1611,
     1611, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1614, 1614, 1615, 1615, 1615, 1615, 1615, 1615, 1615,
     1615, 1615, 1615, 1615, 1615, 1615, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1617, 1618, 1618, 1618, 1618,

     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,

     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,

     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,    1,   15,   16,   17,   18,   19,   20,   19,
       19,   19,   19,   19,   19,   21,   21,   22,    1,   23,
       24,   25,   26,   27,   28,   28,   29,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       30,   31,   32,    1,   28,   33,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   43,   50,   51,   52,   53,   54,   43,   55,
       56,   43,   57,   10,   58,   59,    1,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,   10,    8,   11,    1,    8,   12,   13,   14,   14,
       14,    1,   15,    1,    1,    1,   16,   17,   17,    1,
       18,    1,   19,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,    1,    1,   19,   17,
       17,    1
    } ;

static yyconst flex_int16_t yy_base[1530] =
    {   0,
        0,    4,    9,   71,  133,    0,  195,    0,  256,  266,
      276,  283,  345,    0,  406,  410,  416,  444,  456,  482,
      544,    0,  605,  609,  644,    0,  705,    0,  767,    0,
      615,  828,  833,  837,  843,  848,  909,  970,  882,  915,
     1032,    0,  426,  931,  920, 1093, 1099, 1104,  961, 1110,
     1172,    0, 1234,    0, 1284,    0, 1344, 1348, 1354, 1382,
     1417,    0, 1386, 1477, 1538, 1599, 1486, 1492, 1661,    0,
        0,    0, 1722, 1783, 4152, 6488, 6488, 6488, 6488,    1,
     4117, 4078, 6488, 6488, 6488, 1845, 6488, 6488, 6488,    2,
     4107,    4,    0, 4072, 6488, 6488, 6488, 6488, 6488,    3,

     4101,    0, 4072, 4075,    0,    2, 4062, 4063, 4049, 6488,
     6488, 6488, 6488, 6488,   20, 4078,    0,    5, 4064, 4038,
     6488,    0,    0, 6488,    0, 6488, 4066,   22, 4062, 4023,
        0,    0,    0,    0, 6488,   25, 4052,    0, 4017,    0,
     6488, 6488, 6488, 6488, 6488, 4041,   28, 4037,   51,   24,
      461, 6488, 6488,  641, 6488,    0,    0, 6488,   39, 4029,
        0, 3994,    0,    0,    0, 6488,   46, 4023,    0, 3988,
        0,   44,  268,  272,  297,  298,  431,  288,    0,  419,
     4039, 4038, 6488, 4029,  258,   33,   63,  260, 4024,  489,
      861,  256, 4020, 4019, 4014, 3991,   41, 4003,  283, 6488,

     6488,  288, 6488, 6488, 6488, 3997, 6488,  285, 3974, 6488,
        0,  261, 3939, 6488, 6488, 6488, 6488, 6488,  292, 3968,
     3933, 6488, 6488, 6488,  313, 6488, 6488, 6488,  294, 3962,
     3927, 6488,    0, 6488, 6488,    0, 3960,  311, 3947, 1881,
     6488, 3908,    0,  436,  480, 3934, 3903,    0,    0, 6488,
        0, 3932,  312, 3919, 3884,    0, 3908, 3901, 6488, 3883,
     3894,  412,  305,    0,  492, 3843, 3869, 3877,  321,  294,
      615,  898, 3857, 3820,  407,    0, 6488,  417,  462,  486,
      483,  842,  497,    0, 6488, 6488,    0, 3859,  508, 3837,
     3801,    0,    0, 6488,    0,  510, 3825, 3787,    0, 6488,

     6488, 6488, 6488,  511, 3819,    0,  336, 3806, 3781, 6488,
     6488, 6488, 6488, 6488,  513, 3814,    0, 3825, 3768, 6488,
     6488,    0, 3766, 6488, 6488, 6488, 6488,  516, 3798,    0,
     3763, 6488, 6488, 6488, 6488, 6488,  518, 3791,    0, 3755,
     6488,    0, 3735, 6488, 6488, 6488,  519, 3760,  447, 3725,
     6488, 6488, 6488, 6488, 6488, 6488, 3748, 6488, 6488,  524,
     3743, 6488, 3708, 6488, 6488, 6488, 6488, 6488,  594, 3733,
        0, 3698, 6488, 6488, 6488,    0, 6488,  607, 3728, 3686,
     6488,    0,    0, 6488,    0, 6488,  608, 3715,  601, 3680,
        0, 3724, 3706,  993, 3663, 6488, 1936, 6488,  630,    0,

      635,  286,  442,    0, 3685, 3671,  573, 3664,  977, 3650,
     3654, 3655, 3648, 3617, 3661, 3648,    0,  592, 3627, 1104,
     3596,    0, 3643,  521, 1121, 3593,    0,  923,  849, 1292,
     6488, 3589, 3621,  641,  867, 6488,  873, 6488, 3626, 1422,
     1297,    0, 3608, 3603, 1417, 6488, 3559,    0, 3604, 3596,
     1503, 6488, 3536,  650, 6488,  868,  960, 1993,  890,  831,
     6488,  837, 1093, 3587, 6488,  419,  612, 2015, 6488, 3586,
      858,  949, 6488, 6488,  988, 3581, 1364,  855, 3581, 3577,
     3570, 3551, 3536,  990, 3532,  991, 6488, 1360,  634, 3534,
     3533,  328,  885,    0, 6488, 3531, 3473, 6488,  880, 6488,

        0, 6488,  651, 3513, 1555, 2005, 3478, 3477, 3476, 3470,
     3481, 3472, 3453, 3462, 3449, 3434, 1340, 1378, 3459, 3419,
      953, 3444, 3416,    0, 6488, 3443, 1570, 3400, 3427, 3413,
     6488,  472, 2055, 6488,  924, 6488, 3429, 3392, 1091, 1472,
     1473, 3394, 3367, 1338, 3391, 3351,  930,    0,    0, 3395,
     3389, 2085,  473, 3349, 1376,    0, 1007, 3381, 3367, 1616,
     3324,    0, 3361, 3356, 1631, 3307,    0, 6488, 3354, 3318,
     3290,    0, 6488, 3282,    0, 3280, 3325, 3317, 6488,    0,
     3268, 6488, 3321, 3304,  683, 3300, 3294, 3279, 6488,    0,
     3232,    0, 1007, 1120, 1719, 3248, 3229, 3212, 3252, 6488,

     6488, 1128,  894, 1140, 3256, 3223, 3224, 3214, 3214, 3208,
     6488, 3206, 3200, 3185, 3185, 3180, 3176,    0, 3186,    0,
        0, 3156, 3156, 3144, 6488, 3147, 3146, 3158, 6488, 3155,
     1137,    0,    0,    0, 1400,  850,    0,  995,    0, 6488,
     3153, 3145, 1139, 1480, 1532, 3137,    0,    0, 3132,    0,
        0, 1396, 1122, 1335, 6488, 1117, 3145, 3143,  956, 1352,
     6488, 3128, 3137, 6488, 3121, 6488, 6488, 3119,    0, 3087,
     3077, 3076, 1392, 3059, 3076, 3072, 3047, 3059, 3045,  983,
     1346, 3053, 3041, 3017, 3017, 3023, 3003, 3006, 1731, 1526,
     3003, 2976,    0,    0, 2996, 2993, 2985, 6488, 1736, 1530,

     2981, 2950, 2990,    0, 1523,    0, 2958, 2958, 1159, 6488,
        0,    0, 2983,    0,    0, 2951, 6488, 2971, 6488, 2960,
     1594, 2951, 6488, 2941, 6488, 6488,    0, 2918, 6488, 1015,
     2939, 1593, 2934, 1751, 2895, 2877, 1495, 2110, 2884, 2882,
     2869, 2855, 2838, 2844, 2847,    0, 1618, 1447, 2840, 2834,
     2861, 6488, 1727, 1493, 6488, 6488, 1740, 1604, 1762,    0,
        0, 1495, 2866, 6488, 6488, 2846, 1515, 1494, 2825, 6488,
     2801, 2780, 2776, 2781, 2761, 2764, 2770, 2769, 2761, 1165,
     2755, 2727, 2723, 2707, 2705, 2717, 2696, 1508, 1501, 2710,
     2682, 1770, 1555, 1559, 2707, 2679,    0, 2689, 2698,    0,

     2683, 2710, 6488, 1751, 2677, 2699, 2032, 1772, 1776, 2170,
     6488, 2672, 2670, 6488, 6488, 1581, 2664, 2227, 1633, 2655,
     2637, 2646, 2648, 2677, 6488, 1616, 2639,    0, 1645, 2663,
     2658, 6488, 2652, 1788, 2010, 2617, 2617, 2616, 1799, 2614,
     2603, 2605, 2593, 2591, 2603, 2589, 2020, 1814, 2580, 1818,
     2579, 2573, 2564, 2571, 2569, 2576, 2561, 2559, 2545, 2540,
     2556, 2555, 2532, 2545, 2534, 1823, 2541, 2554, 2552, 2513,
     1748, 2287, 2290, 1160, 1759, 2293, 2301, 2313, 2522, 2555,
     1617, 2511, 6488, 1793, 6488, 1827, 1906, 2507, 2541, 2538,
     2501, 1831, 2317, 2322, 2535, 2489, 1837, 2487, 2485, 2475,

     2475, 2474, 2485, 2471, 2447, 1911, 6488, 1920, 2455, 2455,
     2447, 2445, 2429, 2428, 2420, 2424, 2427, 1538, 2417, 2408,
     2403, 2410, 2384, 2388, 1929, 2394, 2383, 2327, 2333, 1303,
     6488, 2338, 2349, 2358, 2422, 2046, 1908, 6488, 2062, 6488,
     1554, 2050, 1998, 2361, 2392, 6488, 2361, 2411, 2365, 2364,
     2360, 2356, 2351, 2348, 2326, 2322, 2299, 2071, 2307, 2302,
     2289, 2286, 2272, 2263, 2272, 2257, 2263, 2191, 2180, 2068,
     2057, 2052, 2060, 2040, 1918, 2047, 2372, 2378, 2383, 2394,
     2398,    0, 2025, 2078, 2405, 2063, 2006, 2089, 2019, 2011,
     2002, 1987, 1976, 1974, 1970, 1952, 1959,    0, 1872, 1865,

     1792, 1789, 1784, 1776, 1766, 1752, 1752, 1735, 2017, 6488,
        0, 2419, 2423, 2434, 2439, 2443,    0, 1742, 2173, 2463,
     2474, 1720,    0, 1702, 1712, 1695, 1686, 6488, 1673, 1605,
     1605, 1598, 1588, 1586, 1539, 1542, 6488, 2479, 2482, 2449,
     2485, 2494, 1539, 2176, 2505, 2454, 1508, 6488, 1457, 1435,
     1395, 1393, 1385, 1363, 1346, 1354, 1333, 2510, 2521, 2524,
     2544, 2549, 6488, 2179, 2552, 2565, 1324, 1305, 1299, 1243,
     1097,  979, 2569, 2572, 2583, 2592, 2595, 2190, 2608, 2599,
      883,  879,  612, 2620, 2631, 2642, 2654, 2657, 2193, 2663,
     2627,  617, 2668, 2682, 2688, 2693, 2697, 2196, 2719, 2702,

      479, 2724, 2729, 2206, 2753, 2713, 2209, 2759, 2744, 2212,
     2770, 2764, 2775, 2785, 2780, 2790, 2800, 2795, 2810, 2821,
     2814, 2826, 2836, 2831, 2841, 2851, 2846, 2856, 2862, 2872,
     2877, 2880, 2891, 2894, 2897, 2907, 2910, 2913, 2923, 2927,
     2931, 2937, 2941, 2953, 2946, 2963, 2969, 2958, 2974, 2980,
     2986, 2992, 2995, 3008, 3013, 3016, 3026, 3029, 3035, 3041,
     3045, 3051, 3056, 3063, 3067, 3073, 3077, 3081, 3091, 3097,
     3100, 3111, 3114, 3124, 3117, 3129, 3139, 3149, 3155, 3158,
     3168, 3172, 3175, 3185, 3188, 3198, 3194, 3204, 3214, 3208,
     3219, 3231, 3224, 3236, 3242, 3253, 3256, 3270, 3259, 3275,

     3286, 3280, 3291, 3297, 3302, 3308, 3314, 3319, 3326, 3329,
     3341, 3344, 3348, 3358, 3361, 3365, 3375, 3378, 3384, 3389,
     3396, 3399, 3409, 3413, 3416, 3426, 3430, 3433, 3444, 3447,
     3450, 3460, 3464, 3467, 3477, 3481, 3484, 3494, 3499, 3509,
     3505, 3515, 3525, 3535, 3540, 3543, 3553, 3556, 3560, 3566,
     3571, 3574, 3584, 3590, 3594, 3600, 3604, 3608, 3621, 3624,
     3630, 3635, 3640, 3643, 3655, 3658, 3664, 3669, 3676, 3679,
     3690, 3693, 3699, 3704, 3710, 3713, 3724, 3727, 3730, 3740,
     3745, 3748, 3759, 3762, 3768, 3773, 3779, 3789, 3785, 3795,
     3799, 3805, 3809, 3815, 3828, 3831, 3845, 3834, 3855, 3861,

     3850,  404, 3871, 3866, 3877, 3883, 3889, 3894, 3901, 3906,
     3912, 3917, 3926, 3922, 3932, 3938, 3944, 3949, 3952,  262,
     3956, 3961, 3967, 3972, 3977, 3981, 3987, 3993, 3999, 4007,
     4011, 4016, 4022, 4027, 4032, 4036, 4042, 4048, 4054, 4057,
     4062, 4066, 4071, 4077, 4082, 4087, 4091, 4097, 4103, 4112,
     4117, 4121, 4126, 4132, 4137, 4142, 4146, 4152, 4158, 4161,
     4167, 4172, 4176, 4181, 4187, 4192, 4197, 4201, 4207, 4216,
     4222, 4227, 4231, 4236, 4242, 4247, 4252, 4256, 4262, 4265,
     4271, 4277, 4282, 4286, 4291, 4297, 4302, 4307, 4311, 4320,
     4326, 4332, 4337, 4341, 4346, 4352, 6488, 4409, 4428, 4447,

     4466, 4485, 4504, 4523, 4542, 4561, 4580, 4599, 4618, 4637,
     4656, 4675, 4694, 4713, 4732, 4751, 4770,  981, 1085, 1297,
     4789, 4808, 4827, 4846, 4865, 4882, 4899, 4918, 4937, 4956,
     4975, 4992, 5009, 5026, 5042, 1558, 5059, 5078, 5095, 5114,
     5133, 5152, 5171, 5190, 5209, 1621, 2085, 2090, 5228, 2172,
     5247, 5266, 5283, 5300, 2173, 2189, 5319, 5338, 2190, 5357,
     5376, 5395, 5414, 5433, 5452, 5471, 5488, 5505, 5524, 5543,
     5560, 5577, 5594, 5610, 2205, 5627, 5646, 5663, 5682, 5701,
     5720, 5739, 5758, 5777, 2206, 2285, 2293, 2294, 5796, 5815,
     5832, 5849, 5868, 5887, 2331, 5906, 5925, 2342, 5944, 5963,

     5982, 6001, 6020, 6039, 6058, 6075, 6092, 6111, 6130, 6149,
     6168, 6187, 6206, 6225, 6244, 6263, 2355, 6282, 6301, 6320,
     6339, 6358, 6377, 6394, 6411, 2375, 6430, 6449, 6468
    } ;

static yyconst flex_int16_t yy_def[1530] =
    {   0,
     1398, 1398, 1398, 1397, 1397,    5, 1397,    7, 1399, 1399,
     1400, 1400, 1397,   13, 1401, 1401, 1402, 1402, 1403, 1403,
     1397,   21, 1404, 1404,   21,   25, 1397,   27, 1397,   29,
     1405, 1406, 1398, 1398, 1398, 1398, 1407, 1407, 1408, 1408,
     1397,   41,   38,   38, 1409, 1409, 1410, 1410, 1411, 1411,
     1397,   51, 1397,   53,   53,   55, 1412, 1412, 1413, 1413,
       25,   61, 1414, 1414, 1415, 1415, 1416, 1416, 1397,   69,
       69,   69, 1417, 1417, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1418, 1418, 1418, 1397, 1397, 1397, 1397, 1397, 1397,

     1397, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1420, 1420, 1420, 1420,
     1397, 1421, 1421, 1397, 1421, 1397, 1422, 1397, 1421, 1421,
     1421, 1423, 1423, 1423, 1397, 1423, 1423, 1424, 1423, 1423,
     1397, 1397, 1397, 1397, 1397, 1425, 1397, 1397, 1426, 1397,
     1426, 1397, 1397, 1426, 1397, 1427, 1427, 1397, 1427, 1427,
     1428, 1427, 1427, 1429, 1429, 1397, 1429, 1429, 1430, 1429,
     1429, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1432, 1432,
     1433, 1433, 1397, 1433, 1433, 1433, 1397, 1433, 1433, 1434,
     1434, 1397, 1397, 1397, 1397, 1397, 1435, 1397, 1435, 1397,

     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1436, 1397, 1436, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1437, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1438, 1397, 1397, 1438, 1397, 1397, 1438, 1397,
     1397, 1438, 1438, 1438, 1397, 1397, 1397, 1439, 1439, 1397,
     1439, 1397, 1439, 1439, 1439, 1439, 1440, 1440, 1397, 1440,
     1397, 1440, 1440, 1436, 1440, 1436, 1440, 1397, 1397, 1397,
     1438, 1397, 1397, 1397, 1441, 1442, 1397, 1441, 1443, 1441,
     1397, 1441, 1441, 1444, 1397, 1397, 1444, 1397, 1444, 1444,
     1444, 1444, 1445, 1397, 1445, 1445, 1445, 1445, 1445, 1397,

     1397, 1397, 1397, 1397, 1397, 1446, 1397, 1446, 1446, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1447, 1397, 1447, 1397,
     1397, 1448, 1448, 1397, 1397, 1397, 1397, 1397, 1397, 1449,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1449, 1397,
     1397, 1450, 1450, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1451, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1452, 1397, 1397, 1397, 1397, 1453, 1397, 1397, 1397, 1453,
     1397, 1454, 1454, 1397, 1454, 1397, 1397, 1454, 1397, 1454,
     1454, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1455, 1455,

     1455, 1455, 1455, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1457, 1458, 1459, 1459, 1459, 1459,
     1459, 1460, 1461, 1462, 1460, 1460, 1463, 1464, 1465, 1463,
     1397, 1463, 1397, 1466, 1397, 1397, 1467, 1397, 1397, 1467,
     1467, 1468, 1468, 1468, 1468, 1397, 1468, 1469, 1469, 1469,
     1469, 1397, 1469, 1470, 1397, 1470, 1470, 1470, 1470, 1397,
     1397, 1471, 1471, 1472, 1397, 1472, 1472, 1472, 1397, 1397,
     1472, 1397, 1397, 1397, 1473, 1397, 1473, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1474, 1397, 1474, 1397, 1397,
     1397, 1397, 1397, 1475, 1397, 1397, 1475, 1397, 1476, 1397,

     1477, 1397, 1397, 1397, 1477, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1477, 1477, 1397, 1397, 1397,
     1397, 1397, 1397, 1478, 1397, 1478, 1478, 1478, 1479, 1479,
     1397, 1479, 1479, 1397, 1479, 1397, 1397, 1397, 1397, 1477,
     1397, 1397, 1397, 1397, 1397, 1397, 1480, 1481, 1482, 1482,
     1482, 1480, 1397, 1397, 1480, 1483, 1397, 1397, 1483, 1483,
     1483, 1484, 1484, 1484, 1484, 1484, 1485, 1397, 1397, 1485,
     1485, 1486, 1397, 1486, 1487, 1487, 1397, 1397, 1397, 1488,
     1488, 1397, 1397, 1489, 1490, 1397, 1397, 1397, 1397, 1491,
     1491, 1492, 1397, 1397, 1492, 1397, 1397, 1492, 1397, 1397,

     1397, 1397, 1493, 1397, 1494, 1495, 1495, 1495, 1495, 1495,
     1397, 1495, 1495, 1495, 1495, 1495, 1495, 1496, 1496, 1497,
     1497, 1498, 1498, 1498, 1397, 1498, 1498, 1499, 1397, 1397,
     1397, 1500, 1501, 1502, 1501, 1503, 1504, 1503, 1505, 1397,
     1397, 1397, 1397, 1397, 1506, 1507, 1507, 1507, 1508, 1508,
     1508, 1509, 1509, 1509, 1397, 1510, 1510, 1510, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1477, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1477, 1397,
     1397, 1397, 1511, 1511, 1512, 1512, 1397, 1397, 1477, 1397,

     1397, 1397, 1513, 1513, 1514, 1513, 1397, 1397, 1397, 1397,
     1515, 1515, 1516, 1516, 1516, 1517, 1397, 1518, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1492, 1397, 1397, 1493,
     1519, 1397, 1494, 1397, 1495, 1495, 1495, 1397, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1496, 1498, 1498, 1498, 1498,
     1520, 1397, 1397, 1501, 1397, 1397, 1397, 1397, 1506, 1507,
     1508, 1509, 1510, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1477, 1397, 1397,
     1397, 1397, 1477, 1397, 1397, 1397, 1513, 1397, 1397, 1516,

     1517, 1521, 1397, 1397, 1397, 1519, 1522, 1397, 1397, 1397,
     1397, 1495, 1495, 1397, 1397, 1397, 1495, 1397, 1495, 1495,
     1495, 1495, 1495, 1495, 1397, 1397, 1498, 1498, 1498, 1397,
     1397, 1397, 1397, 1397, 1506, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1517, 1397, 1397, 1397,
     1522, 1522, 1522, 1397, 1522, 1397, 1397, 1397, 1495, 1495,
     1397, 1397, 1397, 1397, 1397, 1495, 1495, 1495, 1495, 1397,
     1397, 1397, 1506, 1397, 1397, 1397, 1397, 1397, 1397, 1397,

     1397, 1397, 1397, 1397, 1523, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1517, 1397, 1522, 1522, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1524, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1525, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1523, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1517, 1397, 1522, 1522, 1397, 1397,
     1397, 1526, 1397, 1397, 1397, 1397, 1525, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1527, 1397, 1397,

     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1528, 1522, 1522, 1397, 1397, 1397, 1526, 1397, 1397, 1397,
     1397, 1397, 1529, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1522, 1522, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1522, 1522, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1522, 1522, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1522, 1522, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1522, 1522, 1397, 1397, 1397, 1397, 1397, 1397,

     1397, 1522, 1522, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,

     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,

     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397,    0, 1397, 1397, 1397,

     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,

     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397
    } ;

static yyconst flex_int16_t yy_nxt[6551] =
    {   0,
     1397,   77,  460,   78,   79,   77,  634,   78,   79, 1397,
       77,  461,   78,   79,  392,  392,  392,   80,  393,  393,
      393,   80,  401,  401,  401,   81,   80,  438,  439,   81,
      634,  401,  401,  415,   81,  415,  465,  416,  428,  416,
      409,  392,  429,  484,  407,  393,  408,  410,  411,  418,
      455,  419,  443,  435,  435,  435,  444,  485,  468,  449,
       82,   83,  436,  450,   82,   83,  469,  470,  455,   82,
       83,   84,   85,   86,   87,   88,   84,   84,   89,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   90,   84,
       84,   84,   84,   84,   84,   84,   91,   84,   92,   92,

       84,   84,   84,   84,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   84,   84,   84,
       93,   94,   95,   96,   97,   96,   98,   99,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      100,   96,   96,   96,   96,   96,   96,   96,  101,   96,
      102,  102,   96,   96,   96,   96,  102,  102,  103,  104,
      105,  102,  102,  102,  106,  102,  102,  102,  102,  102,
      102,  107,  102,  102,  102,  108,  102,  102,  102,   96,
       96,   96,  102,  109,  110,  111,  112,  111,  113,  114,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  115,  111,  111,  111,  111,  111,  111,  111,
      116,  111,  117,  117,  111,  111,  111,  111,  117,  117,
      117,  117,  118,  117,  117,  117,  119,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  111,  111,  111,  117,  120,  121,  123,  478,  124,
      125,  465,  126,  465,  495,  496,  127,  123,  479,  124,
      125,  466,  126,  128,  455,  467,  127,  133,  455,   78,
      134,  129,  135,  128,  133,  484,   78,  134,  604,  135,
      489,  129,  455,  136,  455,  490,  455,  605,  492,  485,

      136,  137,  493,  455,  455,  415,  138,  415,  137,  416,
      456,  416,  455,  138,  457,  499,  130,  131,  946,  471,
      500,  455,  455,  458,  503,  392,  130,  131,  504,  526,
      533,  538,  539,  664,  537,  530,  139,  140,  393,  568,
      569,  665,  488,  139,  140,  141,  142,  141,  143,  144,
      141,  145,  141,  141,  141,  146,  141,  141,  141,  141,
      141,  141,  147,  141,  141,  141,  141,  141,  141,  141,
      148,  141,  149,  149,  141,  150,  141,  141,  149,  149,
      149,  149,  151,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  152,  153,  141,  149,  154,  155,  157,  548,   78,
       79,  157,  158,   78,   79,  436,  158,  165,  548,   78,
       79,  460,  465,  159,  549,  392,  166,  159,  233,  532,
      461,  160,  656,  167,  549,  160,  161,  455,  517,  268,
      161,  168,  530,  269,  604,  165,  169,   78,   79,  518,
      582,  583,  270,  605,  166,  455,  270,  173,  241,   78,
      174,  167,   76,  435,  435,  435,  162,  163,  519,  168,
      162,  163,  436,  175,  169,  550,  170,  171,  463,  551,
       76,  176,  521,  173,  241,   78,  174,  548,   76,  695,
      459,  472,  473,  518,  520,  534,  535,  502,  548,  175,

      474,  403,  530,  549,  170,  171,   76,  176,  707,  553,
      672,  552,  519,  553,  549,  440,  177,  178,  554,  476,
      509,  558,  530,  563,  392,  559,  392,  564,  393,  577,
      393,  392,  392,  578,  698,  393,  393,  586,  520,  631,
      631,  393,  177,  178,   76,   77,   76,   78,   79,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   80,   76,   76,   76,   76,   76,   76,   76,   81,
       76,  179,  179,   76,   76,   76,   76,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

       76,   76,   76,  179,  180,   83,  182,  587,  183,  184,
      182,  588,  183,  184,  608,  465,  216,  540,  217,  218,
      392,  593,  185,  609,  393,  594,  185,  596,  541,  657,
      186,  596,  219,  622,  186,  187,  489,  602,  597,  187,
      220,  490,  623,  435,  435,  435,  603,  542,  401,  401,
      401,  642,  436,  401,  401,  401,  455,  401,  401,  643,
      643, 1101,  401,  401,  599,  188,  189,  698,  502,  188,
      189,  190,  190,  543,  455,  221,  222,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,

      441,  721,  721,  190,  191,   76,   77,  192,   78,   79,
       76,   76,   76,   76,   76,   76,  193,  194,   76,  195,
       76,  196,   80,   76,   76,   76,   76,   76,   76,   76,
       81,   76,  197,  197,   76,  198,   76,   76,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,   76,   76,   76,  197,  199,   83,  200,  201,  202,
      203,  204,  200,  205,  206,  200,  200,  207,  200,  200,
      200,  200,  200,  200,  208,  200,  200,  200,  200,  200,
      200,  200,  209,  210,  211,  211,  200,  212,  200,  200,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  200,  200,  200,  211,  213,  214,  224,
      225,  226,  227,  460,   77,  228,   78,   79,   77,  460,
       78,   79,  461,  548,   77,  229,   78,   79,  461,   77,
       80,   78,   79,  230,   80,  637,  637,  478,   81,  549,
       80,  465,   81,  472,  473,   80,  638,  479,   81,  644,
      644,  644,  474,   81,  455,  435,  435,  435,  436,  637,
      637,  652,  499,  249,  436,  250,  251,  500,  231,  232,
      666,  476,  455,   82,   83,  252,  455,   82,   83,  253,

      544,  555,  667,   82,   83,  731,  732,  254,   82,   83,
      234,  541,  235,  236,  455,  536,  249,  471,  250,  251,
      477,  276,  237,  277,  278, 1092,  238,  534,  252,  634,
      542,  548,  253,  271,  239,  240,  635,  279,  839,  240,
      254,  241,  255,  256,  272,  280,  281,  549,  269,  459,
      281,  472,  473,  634,  530,  690,  543,  270,  764,  764,
      764,  270,  294,  273,  277,  295,  455,  241,  659,  242,
      243,  234,  244,  235,  236,  255,  256,  653,  296,  611,
      282,  283,  611,  245,  455,  519,  297,  238,  611,  274,
      472,  473,  484,  484,  402,  239,  240,  402,  601,  474,

      240,  637,  246,  601,  601,  601,  485,  485,  601,  709,
      601,  520,  723,  612,  710,  601,  601,  601,  476,  777,
      724,  298,  299,  613,  698,  637,  731,  732,  247,  778,
      242,  243,  257,  258,  257,  259,  260,  257,  257,  257,
      257,  257,  257,  257,  257,  261,  257,  257,  257,  262,
      257,  257,  257,  257,  257,  257,  257,  263,  257,  264,
      264,  257,  265,  257,  257,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  257,  257,
      257,  264,  266,  267,  276,  460,  277,  278,  404,  698,

      285,  404,  286,  287,  461,  285,  625,  286,  287,  625,
      279,  294,  288,  277,  295,  625,  289,  288,  280,  281,
      465,  289,  698,  281,  290,  725,  632,  296,  455,  290,
      602,  601,  632,  632,  763,  297,  632,  726,  601,  603,
      626, 1083,  604,  632,  632,  632,  455,  752,  698,  756,
      627,  605,  463,  282,  283,  753,  753,  757,  757,  291,
      292,  709,  930,  931,  291,  292,  710,  850,  850,  850,
      298,  299,  300,  301,  300,  302,  303,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  304,
      300,  300,  300,  300,  300,  300,  300,  305,  300,  306,

      306,  300,  307,  300,  300,  306,  306,  306,  308,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  300,  300,
      300,  306,  309,  310,  311,  312,  311,  313,  314,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  315,  311,  311,  311,  311,  311,  311,  311,  316,
      311,  317,  317,  311,  318,  311,  311,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      311,  311,  311,  317,  319,  320,  321,  639,  698,  435,

      435,  435,  639,  639,  639,  930,  931,  639,  436,  639,
      417,  322,  322,  417,  639,  639,  639,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      700,  455,  689,  322,  323,  325, 1082,   78,  326,  325,
      327,   78,  326,  518,  327,  334,  441,   78,  335,  455,
      780,  328,  484,  474,  336,  328,  472,  473, 1081,  329,
      542,  337,  519,  329,  330,  474,  485,  548,  330,  338,
      521,  779,  476,  334,  339,   78,  335,  345,  698,   98,
      346,  518,  336,  549,  476, 1072,  543,  780,  520,  337,

      770,  698,  455,  347,  331,  332,  634,  338,  331,  332,
      519,  348,  339,  762,  340,  341,  349,  754,  698,  488,
      455,  770,  648,  477,  435,  435,  435,  648,  648,  648,
      634, 1071,  648,  436,  648,  555,  520, 1070, 1069,  648,
      648,  648,  340,  341,  342,  342,  350,  351,  770,  826,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  645,  699,  544,  342,  343,  345, 1068,
       98,  346,  758,  758,  758,  541,  541,  366,  827,   78,
      367,  436,  368,  366,  347,   78,  367,  814,  368,  634,

      814,  455,  348,  369,  542,  542,  814,  349,  651,  369,
      788,  370,  839,  601,  651,  651,  371,  370,  651,  455,
      651,  518,  371,  634,  548,  651,  651,  651,  789,  838,
      543,  543,  794,  519,  435,  435,  435,  350,  351,  353,
      549,  354,  355,  436,  356,  839,  372,  373,  357,  358,
      359,  836,  372,  373, 1067,  360,  941,  793,  519,  520,
      669,  837,  542,  361,  362,  669,  669,  669,  541,  759,
      669,  494,  601,  968,  494,  694, 1063,  669,  669,  669,
      694,  694,  694,  881,  520,  694, 1057,  694,  543,  698,
     1056,  542,  694,  694,  694,  808,  809,  810,  363,  364,

      353,  983,  354,  355,  803,  356,  834,  834,  834,  357,
      358,  359,  804,  804,  811,  436,  360,  543,  826,  881,
      825,  712,  882,  825,  361,  362,  712,  712,  712,  825,
     1055,  712, 1054,  712,  567,  884,  715,  567,  712,  712,
      712,  715,  715,  715,  885, 1053,  715,  625,  715,  811,
      625, 1052, 1051,  715,  715,  715,  625,  891,  882,  363,
      364,  374,  375,  376,   78,  377,  376,  374,  374,  374,
      376,  374,  376,  376,  374,  374,  376,  376,  378,  376,
      376,  376,  374,  374,  374,  374,  379,  374,  376,  376,
      374,  374,  374,  374,  376,  376,  376,  376,  376,  376,

      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  374,  374,  374,
      376,  380,  381,  383,  601,  384,  385,  386,  780,  727,
      727,  727, 1050,  788,  727,  386,  601,  629,  793,  387,
      839,  727,  727,  727,  518,  831,  831,  388,  389,  541,
      832, 1397,  389,  810,  810,  810, 1049,  839,  833,  833,
      874,  719, 1397,  519,  435,  435,  435, 1047,  542,  869,
      869,  874,  811,  436,  876,  877,  878, 1043,  878,  878,
      878, 1036,  390,  391,  383, 1035,  384,  385,  386,  520,
      892,  892,  892,  811,  543,  884,  386,  811, 1034,  436,

      387,  897,  897,  897,  885,  858,  859,  811,  388,  389,
      860,  835, 1033,  389,  861,  862,  906,  907,  908,  863,
      850,  850,  850,  864,  865,  925,  907,  908,  811,  937,
     1032, 1031,  811,  943,  943,  943, 1030,  780,  938,  897,
      897,  897,  436,  390,  391,  396,  396,  397,  396,  396,
      396,  396,  398,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  399,  399,  396,  396,  396,  396,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,

      400,  396,  396,  396,  400,  400,  396,  506,  939, 1029,
      937,  506,  940,  906,  907,  908,  507,  508,  509,  938,
     1009,  510,  908,  907,  908,  511,  512,  780,  940, 1010,
      513,  925,  907,  908,  514,  515,  396,  396,  397,  396,
      396,  396,  396,  398,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  399,  399,  396,  396,  396,  396,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  396,  396,  396,  400,  400,  396,  654,  455,

      984,  984,  984,  654,  654,  654, 1027,  839,  654,  436,
      654, 1026,  435,  435,  435,  654,  654,  655,  465, 1009,
      658,  436,  850,  850,  850,  658,  658,  658, 1010,  839,
      658,  839,  658, 1025,  872,  809,  873,  658,  658,  658,
      670,  671,  672,  673,  874,  674, 1024, 1023,  814,  675,
      676,  814,  825,  875,  677,  825,  893,  814,  678,  679,
      696,  825, 1022,  988,  939,  696,  696,  696,  940, 1021,
      696, 1018,  696,  850,  850,  850,  905,  696,  696,  696,
     1019, 1019, 1019, 1011,  940,  530,  548, 1008,  875,  436,
      705,  897,  897,  897, 1007,  705,  705,  705,  572, 1006,

      705,  572,  706,  575, 1005, 1004,  575,  705,  705,  705,
      815,  815,  816,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  404,  404,
      404,  815,  815,  815,  815,  815,  815,  404,  404,  815,
      815,  815,  815,  404,  404,  404,  404,  404,  404,  404,
      404,  817,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  815,  815,  815,  404,
      404,  815,  878,  878,  878, 1044, 1044, 1044, 1064, 1064,
     1064, 1078, 1078, 1078,  436,  580,  402,  436,  580,  402,
      436,  811, 1089, 1089, 1089, 1098, 1098, 1098, 1104, 1104,

     1104,  436,  404,  417,  436,  404,  417,  436, 1107, 1107,
     1107, 1110, 1110, 1110, 1113, 1113, 1113,  436,  494,  567,
      436,  494,  567,  436, 1003, 1002,  811,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  404,  404,  404,  883,  883,
      883,  883,  883,  883,  404,  404,  883,  883,  883,  883,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  883,  883,  883,  404,  404,  883,  928,
      877,  929,  929,  878,  929,  932,  933,  934,  572,  874,

      698,  572,  874,  934,  934,  934,  575,  580,  875,  575,
      580,  875,  780, 1001,  811,  934,  934,  934,  780,  944,
      944,  944,  811,  945,  897,  897,  897,  780,  436,  977,
      933,  978, 1000,  999,  811,  978,  934,  978,  998,  874,
      979,  980,  981,  875,  404,  874,  875,  404,  875,  811,
      997,  981,  981,  981,  875,  417,  958,  811,  417,  811,
      981,  981,  981,  985,  985,  985,  996,  945,  567,  811,
      811,  567,  436,  946, 1012,  980, 1013,  995,  947,  811,
     1013,  981, 1013,  875,  874, 1014, 1015, 1016, 1017,  875,
      874, 1017,  994,  875,  811,  993, 1016, 1016, 1016,  875,

     1016, 1016, 1016,  992,  811,  811,  991, 1020, 1020, 1020,
      990,  945,  989,  948,  811,  811,  436,  946,  988,  811,
      986, 1038, 1015, 1039,  935, 1039, 1016, 1039,  875,  976,
      975,  874,  974,  973,  875,  874, 1040, 1041, 1042,  811,
      875, 1042, 1042, 1042,  875, 1042, 1042, 1042,  972,  971,
      811, 1060, 1061, 1062,  811,  811, 1066, 1066, 1066,  970,
      811,  946,  969,  967,  811, 1045, 1045, 1045,  966,  945,
      811,  965,  964,  963,  436,  875, 1046, 1046, 1046,  875,
      945, 1058, 1041, 1059, 1059, 1042, 1059, 1062, 1062, 1062,
      811,  874,  962,  961,  874,  811, 1062, 1062, 1062,  811,

      875,  960,  959,  875,  958,  811,  811, 1065, 1065, 1065,
      946,  945, 1073, 1061, 1074,  811,  436,  956,  955,  946,
      954,  953,  874, 1074, 1062, 1074, 1075, 1076, 1077,  952,
      946,  875,  951,  874,  950,  875,  949,  948,  875,  942,
      890,  811,  875,  941,  887,  811, 1077, 1077, 1077,  936,
      811, 1077, 1077, 1077, 1079, 1079, 1079,  935,  945,  406,
      927,  946,  719,  436,  719,  811,  875, 1080, 1080, 1080,
      811, 1084, 1076, 1085, 1085, 1077, 1085,  875,  926,  924,
      811,  874,  923,  922,  874, 1086, 1087, 1088,  921,  920,
      875,  919,  918,  875, 1088, 1088, 1088, 1088, 1088, 1088,

      811, 1091, 1091, 1091,  811,  811,  917,  916,  946,  915,
     1090, 1090, 1090,  811,  945,  914,  811,  913,  912,  436,
      911,  946, 1093, 1087, 1094,  875,  910,  909,  875, 1100,
     1100, 1100,  874, 1094, 1088, 1094,  904,  903,  902,  811,
      901,  875,  900,  874, 1095, 1096, 1097,  899,  811,  898,
      896,  811,  875,  895,  894,  946, 1097, 1097, 1097, 1097,
     1097, 1097,  832,  811,  946, 1099, 1099, 1099,  629,  945,
     1102, 1096, 1103,  629,  436,  811,  875,  747,  811,  890,
      874,  889,  888,  946, 1103, 1097, 1103,  875,  887,  875,
     1095, 1096, 1097,  886,  874, 1097, 1097, 1097,  811, 1097,

     1097, 1097,  737,  875, 1106, 1106, 1106,  880,  879,  811,
      811,  807,  870,  811,  811, 1109, 1109, 1109,  811,  946,
      719, 1105, 1105, 1105,  875,  945, 1102, 1096, 1103,  867,
      436, 1103, 1097, 1103,  866,  837,  874,  796,  875,  795,
      791,  874,  790,  857,  811,  875, 1112, 1112, 1112,  811,
      875,  856,  855,  811,  854, 1108, 1108, 1108,  946,  945,
      853, 1111, 1111, 1111,  436,  945, 1115, 1115, 1115,  946,
      436,  852, 1114, 1114, 1114,  946,  945, 1116, 1116, 1116,
      875,  436, 1118, 1118, 1118,  875,  436, 1117, 1117, 1117,
      851,  945, 1119, 1119, 1119,  849,  436, 1121, 1121, 1121,

      946,  436, 1120, 1120, 1120,  848,  945,  847,  846,  946,
      845,  436, 1122, 1122, 1122,  946, 1124, 1124, 1124,  844,
      946,  436,  843, 1123, 1123, 1123,  946,  945, 1125, 1125,
     1125,  842,  436, 1127, 1127, 1127,  946,  436, 1126, 1126,
     1126,  946,  945, 1128, 1128, 1128,  841,  436, 1130, 1130,
     1130,  946,  436, 1129, 1129, 1129,  946,  945, 1131, 1131,
     1131,  840,  436,  766, 1132, 1132, 1132,  436,  945,  465,
      946,  629,  829,  436, 1133, 1133, 1133,  946,  828, 1134,
     1134, 1134, 1135, 1135, 1135,  824,  945,  946,  436,  823,
      822,  436,  946, 1136, 1136, 1136, 1137, 1137, 1137, 1138,

     1138, 1138,  946,  945,  821,  436,  820,  946,  436, 1139,
     1139, 1139, 1140, 1140, 1140, 1141, 1141, 1141,  946,  945,
      819,  436,  818,  813,  436, 1142, 1142, 1142,  946, 1143,
     1143, 1143,  812, 1144, 1144, 1144,  946,  945,  436, 1145,
     1145, 1145,  436, 1146, 1146, 1146,  734,  946, 1148, 1148,
     1148,  807,  436,  946,  805, 1147, 1147, 1147,  729,  945,
     1151, 1151, 1151,  946,  436, 1149, 1149, 1149,  729,  946,
      719, 1150, 1150, 1150,  436,  945, 1152, 1152, 1152,  946,
      436,  719, 1153, 1153, 1153,  436,  945,  946, 1154, 1154,
     1154,  436,  801,  946, 1155, 1155, 1155, 1156, 1156, 1156,

      800,  945,  946,  436,  799,  798,  436,  797,  796,  946,
     1157, 1157, 1157,  795,  946, 1158, 1158, 1158, 1159, 1159,
     1159,  792,  945,  530,  436,  946,  530,  436, 1160, 1160,
     1160, 1161, 1161, 1161,  791,  790,  946, 1162, 1162, 1162,
      436,  945,  946, 1163, 1163, 1163,  436, 1164, 1164, 1164,
      787,  946,  786, 1165, 1165, 1165,  436,  945, 1166, 1166,
     1166,  785,  436,  784,  946, 1167, 1167, 1167,  783, 1168,
     1168, 1168,  946,  945,  436, 1169, 1169, 1169,  436, 1170,
     1170, 1170,  946, 1171, 1171, 1171,  782,  945,  436,  781,
      776,  946,  436, 1172, 1172, 1172,  775,  946,  774, 1173,

     1173, 1173, 1174, 1174, 1174,  773,  945,  946,  436,  772,
      771,  436,  946, 1175, 1175, 1175, 1176, 1176, 1176, 1178,
     1178, 1178,  769,  946,  768,  436, 1177, 1177, 1177,  946,
      945, 1179, 1179, 1179,  767,  436,  766,  946,  729,  663,
      436, 1180, 1180, 1180,  765,  945,  465,  946,  465,  761,
      436, 1181, 1181, 1181,  760,  755,  946, 1182, 1182, 1182,
     1183, 1183, 1183,  755,  945,  629,  436,  946,  629,  436,
     1184, 1184, 1184,  946, 1185, 1185, 1185, 1186, 1186, 1186,
      946,  945,  626,  436,  750,  749,  436, 1187, 1187, 1187,
     1188, 1188, 1188,  748,  747,  946, 1190, 1190, 1190,  436,

     1189, 1189, 1189,  746,  945,  946, 1191, 1191, 1191,  436,
     1193, 1193, 1193,  745,  946,  436, 1192, 1192, 1192,  744,
      945, 1194, 1194, 1194,  946,  436, 1196, 1196, 1196,  743,
      436,  946,  742, 1195, 1195, 1195,  741,  945, 1197, 1197,
     1197,  946,  436,  740, 1198, 1198, 1198,  436,  945,  739,
      946,  738,  737,  436,  946, 1199, 1199, 1199, 1200, 1200,
     1200, 1202, 1202, 1202,  946,  736,  735,  436,  734,  729,
      946,  598, 1201, 1201, 1201,  728,  945, 1203, 1203, 1203,
      946,  436, 1205, 1205, 1205,  672,  436,  946, 1204, 1204,
     1204,  591,  945, 1206, 1206, 1206,  600,  436,  946, 1207,

     1207, 1207,  436,  945, 1208, 1208, 1208,  599,  436,  946,
     1209, 1209, 1209,  722,  719,  946, 1210, 1210, 1210,  436,
      945, 1211, 1211, 1211,  582,  436,  946,  581, 1212, 1212,
     1212, 1213, 1213, 1213,  717,  945,  946,  436,  599,  576,
      436,  574,  946, 1214, 1214, 1214, 1215, 1215, 1215,  571,
     1216, 1216, 1216,  946,  945,  436,  716,  568,  946,  436,
     1217, 1217, 1217, 1218, 1218, 1218,  566, 1219, 1219, 1219,
      946,  945,  436,  714,  713,  946,  436, 1220, 1220, 1220,
     1221, 1221, 1221,  561,  711,  946, 1222, 1222, 1222,  436,
      945, 1223, 1223, 1223,  599,  436,  708,  946, 1224, 1224,

     1224, 1225, 1225, 1225,  946,  945,  704,  436,  703,  702,
      436, 1226, 1226, 1226,  946, 1227, 1227, 1227, 1228, 1228,
     1228,  946,  945,  701,  436,  546,  545,  436, 1229, 1229,
     1229,  946, 1230, 1230, 1230, 1231, 1231, 1231,  697,  945,
      946,  436,  599,  530,  436,  946, 1232, 1232, 1232, 1233,
     1233, 1233, 1234, 1234, 1234,  946,  945,  530,  436,  528,
      693,  436, 1235, 1235, 1235,  946, 1236, 1236, 1236, 1237,
     1237, 1237,  946,  945,  692,  436,  691,  523,  436, 1238,
     1238, 1238,  946, 1239, 1239, 1239, 1240, 1240, 1240,  946,
      945,  522,  436,  516,  688,  436, 1241, 1241, 1241,  687,

      946, 1242, 1242, 1242,  686,  685,  946, 1244, 1244, 1244,
      436, 1243, 1243, 1243,  684,  945,  946, 1245, 1245, 1245,
      436,  683,  682,  946,  681,  680,  436, 1246, 1246, 1246,
      668,  945,  497,  946,  495,  663,  436, 1247, 1247, 1247,
      946,  491, 1248, 1248, 1248, 1249, 1249, 1249,  662,  945,
      946,  436,  661,  482,  436, 1250, 1250, 1250, 1251, 1251,
     1251,  946, 1252, 1252, 1252,  946,  945,  436, 1253, 1253,
     1253,  436,  481, 1254, 1254, 1254, 1255, 1255, 1255,  480,
      945,  946,  436,  481,  660,  436, 1256, 1256, 1256,  469,
      465,  946, 1257, 1257, 1257,  453, 1258, 1258, 1258,  946,

      945,  436, 1259, 1259, 1259,  436, 1260, 1260, 1260,  946,
     1261, 1261, 1261,  650,  945,  436,  946,  649,  447,  436,
      647,  646,  946, 1262, 1262, 1262, 1263, 1263, 1263,  438,
      946,  640, 1264, 1264, 1264,  436,  945, 1265, 1265, 1265,
      946,  436, 1266, 1266, 1266, 1267, 1267, 1267,  432,  945,
      946,  436,  426,  629,  436,  421,  946, 1268, 1268, 1268,
     1269, 1269, 1269,  624,  946,  621, 1270, 1270, 1270,  436,
      945, 1271, 1271, 1271,  619,  436,  414,  946, 1272, 1272,
     1272, 1273, 1273, 1273,  617,  945,  946,  436,  616,  615,
      436,  946, 1274, 1274, 1274, 1275, 1275, 1275,  614,  946,

      610, 1276, 1276, 1276,  436,  945, 1277, 1277, 1277,  607,
      436,  946, 1278, 1278, 1278, 1279, 1279, 1279,  606,  945,
      946,  436,  395,  600,  436,  946, 1280, 1280, 1280, 1281,
     1281, 1281, 1282, 1282, 1282,  946,  945,  599,  436,  598,
      595,  436, 1283, 1283, 1283,  591,  946, 1284, 1284, 1284,
     1285, 1285, 1285,  394,  945,  946,  436,  395,  394,  436,
      946, 1286, 1286, 1286, 1287, 1287, 1287,  395,  394,  946,
     1288, 1288, 1288,  436,  945, 1289, 1289, 1289,  585,  436,
      946, 1290, 1290, 1290,  395,  394,  946, 1292, 1292, 1292,
      436, 1291, 1291, 1291,  581,  945,  946, 1293, 1293, 1293,

      436, 1294, 1294, 1294,  946,  945,  436, 1295, 1295, 1295,
      436, 1296, 1296, 1296,  395,  946,  394, 1297, 1297, 1297,
      436,  945,  395,  394,  946,  576,  436,  574,  573,  946,
     1298, 1298, 1298, 1299, 1299, 1299, 1301, 1301, 1301,  394,
      571,  946,  436,  570,  394,  946,  566, 1300, 1300, 1300,
      565,  945, 1304, 1304, 1304,  946,  436, 1302, 1302, 1302,
      561,  946,  560, 1303, 1303, 1303,  436,  945, 1306, 1306,
     1306,  946,  436, 1305, 1305, 1305,  557,  945,  546, 1307,
     1307, 1307,  436,  945,  946, 1308, 1308, 1308,  436,  545,
      946, 1309, 1309, 1309,  536,  945, 1310, 1310, 1310,  530,

      436,  946,  497, 1311, 1311, 1311,  946,  945, 1312, 1312,
     1312,  531,  436,  530, 1313, 1313, 1313,  946,  945, 1314,
     1314, 1314,  946,  436, 1316, 1316, 1316,  946, 1315, 1315,
     1315,  530,  945,  946, 1317, 1317, 1317,  436,  530,  946,
     1318, 1318, 1318,  528,  527,  946, 1319, 1319, 1319,  525,
      946, 1320, 1320, 1320, 1321, 1321, 1321,  946, 1322, 1322,
     1322,  523,  946, 1323, 1323, 1323,  522,  516,  946, 1324,
     1324, 1324,  505,  946, 1325, 1325, 1325,  502,  946, 1326,
     1326, 1326,  946, 1327, 1327, 1327,  395,  394,  946, 1328,
     1328, 1328,  395,  394,  946, 1329, 1329, 1329,  497,  394,

      946, 1330, 1330, 1330,  491,  946,  487,  483,  946, 1331,
     1331, 1331,  946, 1332, 1332, 1332,  482,  946, 1333, 1333,
     1333,  481,  480,  946, 1334, 1334, 1334,  465,  946, 1335,
     1335, 1335,  465,  946, 1336, 1336, 1336,  946, 1337, 1337,
     1337,  465,  465,  946, 1338, 1338, 1338,  453,  451,  946,
     1339, 1339, 1339,  447,  445,  946, 1340, 1340, 1340, 1341,
     1341, 1341,  394,  946, 1342, 1342, 1342,  946, 1343, 1343,
     1343,  434,  946, 1344, 1344, 1344,  432,  430,  946, 1345,
     1345, 1345,  426,  946, 1346, 1346, 1346,  425,  946, 1347,
     1347, 1347,  946, 1348, 1348, 1348,  424,  421,  946, 1349,

     1349, 1349,  420,  394,  946, 1350, 1350, 1350,  414,  413,
      946,  412,  406,  946, 1351, 1351, 1351,  405,  946, 1352,
     1352, 1352,  946, 1353, 1353, 1353,  394,  946, 1354, 1354,
     1354,  403,  394,  946, 1355, 1355, 1355,  395,  946, 1356,
     1356, 1356,  394,  946, 1357, 1357, 1357,  946, 1358, 1358,
     1358, 1397, 1397,  946, 1359, 1359, 1359, 1397, 1397,  946,
     1360, 1360, 1360, 1361, 1361, 1361, 1397, 1397,  946, 1362,
     1362, 1362, 1397,  946, 1363, 1363, 1363,  946, 1364, 1364,
     1364, 1397,  946, 1365, 1365, 1365, 1397, 1397,  946, 1366,
     1366, 1366, 1397,  946, 1367, 1367, 1367, 1397,  946, 1368,

     1368, 1368,  946, 1369, 1369, 1369, 1397, 1397,  946, 1370,
     1370, 1370, 1397, 1397,  946, 1397, 1397,  946, 1371, 1371,
     1371, 1397, 1397,  946, 1372, 1372, 1372, 1397,  946, 1373,
     1373, 1373,  946, 1374, 1374, 1374, 1397,  946, 1375, 1375,
     1375, 1397, 1397,  946, 1376, 1376, 1376, 1397,  946, 1377,
     1377, 1377, 1397,  946, 1378, 1378, 1378,  946, 1379, 1379,
     1379, 1397, 1397,  946, 1380, 1380, 1380, 1381, 1381, 1381,
     1397, 1397,  946, 1382, 1382, 1382, 1397, 1397,  946, 1383,
     1383, 1383, 1397,  946, 1384, 1384, 1384,  946, 1385, 1385,
     1385, 1397,  946, 1386, 1386, 1386, 1397, 1397,  946, 1387,

     1387, 1387, 1397,  946, 1388, 1388, 1388, 1397,  946, 1389,
     1389, 1389,  946, 1390, 1390, 1390, 1397, 1397,  946, 1397,
     1397,  946, 1391, 1391, 1391, 1397, 1397,  946, 1392, 1392,
     1392, 1397, 1397,  946, 1393, 1393, 1393, 1397,  946, 1394,
     1394, 1394,  946, 1395, 1395, 1395, 1397,  946, 1396, 1396,
     1396, 1397, 1397,  946, 1320, 1320, 1320, 1397,  946, 1397,
     1397, 1397, 1397,  946, 1397, 1397, 1397,  946, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397,  946, 1397, 1397, 1397,
     1397, 1397,  946, 1397, 1397, 1397, 1397, 1397,  946, 1397,
     1397, 1397, 1397,  946, 1397, 1397, 1397,  946, 1397, 1397,

     1397, 1397,  946, 1397, 1397, 1397, 1397, 1397,  946,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,

      164,  164,  164,  164,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  248,

      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  422,
      422,  422, 1397,  422,  422, 1397,  422, 1397,  422,  422,

      422, 1397,  422,  422,  422,  422,  422,  422,  423,  423,
      423, 1397,  423,  423,  423,  423, 1397,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  427,  427,  427,
     1397,  427,  427, 1397,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427, 1397,  427,  431,  431,  431, 1397,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  433,  433,  433, 1397,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  437,  437,  437, 1397, 1397, 1397,
     1397,  437, 1397, 1397, 1397,  437, 1397, 1397,  437,  442,

      442,  442, 1397, 1397,  442, 1397,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442, 1397,  442,  446,  446,
      446, 1397,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  448,  448,  448,
     1397, 1397,  448,  448,  448, 1397,  448,  448,  448,  448,
      448,  448,  448,  448, 1397,  448,  452,  452,  452, 1397,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  454,  454,  454, 1397,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  462, 1397, 1397, 1397, 1397, 1397,

     1397,  462, 1397, 1397, 1397,  462, 1397, 1397,  462,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464, 1397,  464,  475,  475,
     1397, 1397, 1397, 1397, 1397,  475, 1397, 1397, 1397,  475,
     1397, 1397,  475,  475,  486, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397,  486, 1397,  486, 1397, 1397,  486,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  501, 1397,
      501, 1397,  501,  501,  501,  501,  501,  501, 1397,  501,
     1397,  501,  501, 1397,  501,  524,  524,  524, 1397,  524,

      524,  524,  524,  524,  524, 1397,  524,  524,  524,  524,
      524,  524,  524,  524,  529,  529,  529, 1397,  529,  529,
      529,  529,  529,  529, 1397,  529,  529,  529,  529,  529,
     1397,  529,  529,  547,  547,  547, 1397,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547, 1397,  547,
     1397,  547,  548,  548,  548, 1397,  548,  548,  548,  548,
      548,  548,  548,  548, 1397,  548,  548, 1397,  548, 1397,
      548,  549, 1397,  549, 1397,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549, 1397,  549, 1397,  549,
      556, 1397,  556, 1397,  556,  556,  556,  556,  556,  556,

     1397,  556,  556,  556,  556,  556,  556,  556,  556,  562,
     1397,  562, 1397,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  579,  579,
      579, 1397,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  584,  584,  584,
     1397,  584,  584,  584,  584, 1397,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  589,  589,  589, 1397,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  590, 1397, 1397,  590, 1397,
      590, 1397,  590, 1397,  590, 1397,  590, 1397, 1397,  590,

      592,  592,  592, 1397,  592, 1397,  592,  592,  592,  592,
     1397,  592, 1397,  592,  592, 1397,  592, 1397,  592,  618,
      618,  618, 1397,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  620,  620,
      620, 1397,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  422,  422,  422,
     1397,  422,  422, 1397,  422, 1397,  422,  422,  422, 1397,
      422,  422,  422,  422,  422,  422,  628,  628,  628, 1397,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628, 1397,  628,  630,  630,  630, 1397,  630,

      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  427,  427,  427, 1397,  427,  427,
     1397,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427, 1397,  427,  633,  633,  633, 1397,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  636,  636,  636, 1397,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  641,  641,  641, 1397,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      437,  437,  437, 1397, 1397, 1397, 1397,  437, 1397, 1397,

     1397,  437, 1397, 1397,  437,  442,  442,  442, 1397, 1397,
      442, 1397,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442, 1397,  442,  448,  448,  448, 1397, 1397,  448,
      448,  448, 1397,  448,  448,  448,  448,  448,  448,  448,
      448, 1397,  448,  454,  454,  454, 1397,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  462, 1397, 1397, 1397, 1397, 1397, 1397,  462,
     1397, 1397, 1397,  462, 1397, 1397,  462,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464, 1397,  464,  475,  475, 1397, 1397,

     1397, 1397, 1397,  475, 1397, 1397, 1397,  475, 1397, 1397,
      475,  475,  486, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397,  486, 1397,  486, 1397, 1397,  486,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  501, 1397,  501, 1397,
      501,  501,  501,  501,  501,  501, 1397,  501, 1397,  501,
      501, 1397,  501,  524,  524,  524, 1397,  524,  524,  524,
      524,  524,  524, 1397,  524,  524,  524,  524,  524,  524,
      524,  524,  529,  529,  529, 1397,  529,  529,  529,  529,
      529,  529, 1397,  529,  529,  529,  529,  529, 1397,  529,

      529,  547,  547,  547, 1397,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547, 1397,  547, 1397,  547,
      548,  548,  548, 1397,  548,  548,  548,  548,  548,  548,
      548,  548, 1397,  548,  548, 1397,  548, 1397,  548,  549,
     1397,  549, 1397,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549, 1397,  549, 1397,  549,  556, 1397,
      556, 1397,  556,  556,  556,  556,  556,  556, 1397,  556,
      556,  556,  556,  556,  556,  556,  556,  562, 1397,  562,
     1397,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  718,  718,  718, 1397,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718, 1397,  718,  720,  720,  720, 1397,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  590, 1397, 1397,  590, 1397,  590,
     1397,  590, 1397,  590, 1397,  590, 1397, 1397,  590,  592,
      592,  592, 1397,  592, 1397,  592,  592,  592,  592, 1397,
      592, 1397,  592,  592, 1397,  592, 1397,  592,  730,  730,
      730, 1397,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  733,  733,  733,
     1397,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  733,  618,  618,  618, 1397,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  620,  620,  620, 1397,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  751,  751,  751, 1397,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751, 1397,  751,  422,  422,  422, 1397,  422,  422, 1397,
      422, 1397,  422,  422,  422, 1397,  422,  422,  422,  422,
      422,  422,  633,  633,  633, 1397,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,

      633,  634,  634,  634, 1397,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      636,  636,  636, 1397,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  637,
      637,  637, 1397,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  427,  427,
      427, 1397,  427,  427, 1397,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427, 1397,  427,  437,  437,  437,
     1397, 1397, 1397, 1397,  437, 1397, 1397, 1397,  437, 1397,
     1397,  437,  442,  442,  442, 1397, 1397,  442, 1397,  442,

      442,  442,  442,  442,  442,  442,  442,  442,  442, 1397,
      442,  448,  448,  448, 1397, 1397,  448,  448,  448, 1397,
      448,  448,  448,  448,  448,  448,  448,  448, 1397,  448,
      454,  454,  454, 1397,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464, 1397,  464,  524,  524,
      524, 1397,  524,  524,  524,  524,  524,  524, 1397,  524,
      524,  524,  524,  524,  524,  524,  524,  529,  529,  529,
     1397,  529,  529,  529,  529,  529,  529, 1397,  529,  529,

      529,  529,  529, 1397,  529,  529,  549, 1397,  549, 1397,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549, 1397,  549, 1397,  549,  547,  547,  547, 1397,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
     1397,  547, 1397,  547,  556, 1397,  556, 1397,  556,  556,
      556,  556,  556,  556, 1397,  556,  556,  556,  556,  556,
      556,  556,  556,  562, 1397,  562, 1397,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  802,  802,  802, 1397,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802, 1397,

      802,  806,  806,  806, 1397,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      830,  830,  830, 1397,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830, 1397,  830,  868,
      868,  868, 1397,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868, 1397,  868,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  982, 1397, 1397, 1397,

      982, 1397, 1397, 1397, 1397, 1397, 1397, 1397,  982, 1397,
      982,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1397, 1028, 1028, 1397, 1028, 1028, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1397, 1037, 1037, 1397, 1037, 1037, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1397, 1048, 1048, 1397, 1048, 1048,   75, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,

     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397
    } ;

static yyconst flex_int16_t yy_chk[6551] =
    {   0,
        0,    1,  179,    1,    1,    2,  633,    2,    2,    0,
        3,  179,    3,    3,   80,   90,  100,    1,   80,   90,
      100,    2,   92,   92,   92,    1,    3,  150,  150,    2,
      633,   92,   92,  115,    3,  128,  186,  115,  136,  128,
      106,  147,  136,  197,  105,  147,  105,  106,  106,  118,
      172,  118,  159,  149,  149,  149,  159,  197,  186,  167,
        1,    1,  149,  167,    2,    2,  187,  187,  172,    3,
        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    9,  192,    9,
        9,  185,    9,  188,  212,  212,    9,   10,  192,   10,
       10,  185,   10,    9,  173,  185,   10,   11,  174,   11,
       11,    9,   11,   10,   12,  199,   12,   12,  402,   12,
      202,   10,  173,   11,  178,  202,  174,  402,  208,  199,

       12,   11,  208,  175,  176,  219,   11,  229,   12,  219,
      175,  229,  178,   12,  175,  225,    9,    9, 1320,  188,
      225,  175,  176,  176,  238,  253,   10,   10,  238,  253,
      263,  270,  270,  492,  269,  263,   11,   11,  269,  307,
      307,  492,  199,   12,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   15,  275,   15,
       15,   16,   15,   16,   16, 1302,   16,   17,  278,   17,
       17,  180,  466,   15,  275,  262,   17,   16,   43,  262,
      180,   15,  466,   17,  278,   16,   15,  177,  244,   43,
       16,   17,  262,   43,  403,   18,   17,   18,   18,  244,
      349,  349,   43,  403,   18,  177,   43,   19,   43,   19,
       19,   18,   19,  151,  151,  151,   15,   15,  244,   18,
       16,   16,  151,   19,   18,  279,   17,   17,  180,  279,
       19,   19,  245,   20,   43,   20,   20,  280,   20,  532,
      177,  190,  190,  245,  244,  265,  265,  245,  283,   20,

      190,  403,  532,  280,   18,   18,   20,   20,  553,  281,
      553,  280,  245,  281,  283,  151,   19,   19,  281,  190,
      281,  289,  265,  296,  304,  289,  315,  296,  304,  328,
      315,  337,  347,  328, 1101,  337,  347,  360,  245,  424,
      424,  360,   20,   20,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   23,  369,   23,   23,
       24,  369,   24,   24,  407,  467,   31,  271,   31,   31,
      378,  387,   23,  407,  378,  387,   24,  389,  271,  467,
       23,  389,   31,  418,   24,   23,  489,  401,  389,   24,
       31,  489,  418,  154,  154,  154,  401,  271,  399,  399,
      399,  434,  154,  401,  401,  401,  454,  399,  399,  434,
      434, 1092,  401,  401,  503,   23,   23, 1083,  503,   24,
       24,   25,   25,  271,  454,   31,   31,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

      154,  585,  585,   25,   25,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   32,
       32,   32,   32,  460,   33,   32,   33,   33,   34,  462,
       34,   34,  460,  282,   35,   32,   35,   35,  462,   36,
       33,   36,   36,   32,   34,  429,  636,  478,   33,  282,
       35,  471,   34,  191,  191,   36,  429,  478,   35,  435,
      435,  435,  191,   36,  456,  437,  437,  437,  435,  429,
      636,  456,  499,   39,  437,   39,   39,  499,   32,   32,
      493,  191,  456,   33,   33,   39,  459,   34,   34,   39,

      272,  282,  493,   35,   35,  603,  603,   39,   36,   36,
       37,  272,   37,   37,  459,  272,   40,  471,   40,   40,
      191,   45,   37,   45,   45, 1082,   37,  535,   40,  428,
      272,  547,   40,   44,   37,   37,  428,   45, 1081,   37,
       40,   37,   39,   39,   44,   45,   45,  547,   44,  459,
       45,  472,  472,  428,  535,  521,  272,   44,  659,  659,
      659,   44,   49,   44,   49,   49,  457,   37,  472,   37,
       37,   38,   38,   38,   38,   40,   40,  457,   49,  409,
       45,   45,  409,   38,  457,  521,   49,   38,  409,   44,
      475,  475,  484,  486, 1418,   38,   38, 1418,  394,  475,

       38,  638,   38,  394,  394,  394,  484,  486,  394,  557,
      394,  521,  593,  409,  557,  394,  394,  394,  475,  680,
      593,   49,   49,  409, 1072,  638,  730,  730,   38,  680,
       38,   38,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   46,  463,   46,   46, 1419,  539,

       47, 1419,   47,   47,  463,   48,  420,   48,   48,  420,
       46,   50,   47,   50,   50,  420,   47,   48,   46,   46,
      656,   48,  539,   46,   47,  594,  425,   50,  653,   48,
      602,  425,  425,  425,  656,   50,  425,  594,  425,  602,
      420, 1071,  604,  425,  425,  425,  653,  631,  539,  643,
      420,  604,  463,   46,   46,  631,  631,  643,  643,   47,
       47,  709,  874,  874,   48,   48,  709,  780,  780,  780,
       50,   50,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  430, 1070,  441,

      441,  441,  430,  430,  430,  930,  930,  430,  441,  430,
     1420,   55,   55, 1420,  430,  430,  430,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      544,  654,  517,   55,   55,   57, 1069,   57,   57,   58,
       57,   58,   58,  517,   58,   59,  441,   59,   59,  654,
     1068,   57,  488,  660,   59,   58,  477,  477, 1067,   57,
      544,   59,  517,   58,   57,  477,  488,  555,   58,   59,
      518,  681,  660,   60,   59,   60,   60,   63, 1057,   63,
       63,  518,   60,  555,  477, 1056,  544,  681,  517,   60,

      673, 1055,  652,   63,   57,   57,  635,   60,   58,   58,
      518,   63,   60,  652,   59,   59,   63,  635, 1054,  488,
      652,  673,  445,  477,  440,  440,  440,  445,  445,  445,
      635, 1053,  445,  440,  445,  555,  518, 1052, 1051,  445,
      445,  445,   60,   60,   61,   61,   63,   63,  673,  748,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,  440,  540,  541,   61,   61,   64, 1050,
       64,   64,  644,  644,  644,  540,  541,   67,  748,   67,
       67,  644,   67,   68,   64,   68,   68,  737,   68,  754,

      737,  762,   64,   67,  540,  541,  737,   64,  451,   68,
      788,   67, 1049,  451,  451,  451,   67,   68,  451,  762,
      451,  788,   68,  754,  705,  451,  451,  451,  690,  768,
      540,  541,  700,  789,  645,  645,  645,   64,   64,   65,
      705,   65,   65,  645,   65,  768,   67,   67,   65,   65,
       65,  767,   68,   68, 1047,   65,  941,  793,  690,  789,
      505,  767,  700,   65,   65,  505,  505,  505,  793,  645,
      505, 1436,  505,  918, 1436,  527, 1043,  505,  505,  505,
      527,  527,  527,  816,  690,  527, 1036,  527,  700,  918,
     1035,  794,  527,  527,  527,  732,  732,  732,   65,   65,

       66,  941,   66,   66,  721,   66,  758,  758,  758,   66,
       66,   66,  721,  721,  732,  758,   66,  794,  826,  881,
      747,  560,  816,  747,   66,   66,  560,  560,  560,  747,
     1034,  560, 1033,  560, 1446,  819,  565, 1446,  560,  560,
      560,  565,  565,  565,  819, 1032,  565,  829,  565,  732,
      829, 1031, 1030,  565,  565,  565,  829,  826,  881,   66,
       66,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   73,  595,   73,   73,   73, 1029,  595,
      595,  595, 1027,  689,  595,   73,  595,  753,  699,   73,
     1026,  595,  595,  595,  689,  753,  753,   73,   73,  699,
      757,  871,   73,  734,  734,  734, 1025, 1024,  757,  757,
      871,  804,  875,  689,  759,  759,  759, 1022,  699,  804,
      804,  875,  734,  759,  808,  808,  808, 1018,  809,  809,
      809, 1008,   73,   73,   74, 1007,   74,   74,   74,  689,
      834,  834,  834,  808,  699,  884,   74,  809, 1006,  834,

       74,  839,  839,  839,  884,  792,  792,  734,   74,   74,
      792,  759, 1005,   74,  792,  792,  848,  848,  848,  792,
      850,  850,  850,  792,  792,  866,  866,  866,  808,  886,
     1004, 1003,  809,  892,  892,  892, 1002, 1001,  886,  897,
      897,  897,  892,   74,   74,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,  240,  887, 1000,
      937,  240,  887,  906,  906,  906,  240,  240,  240,  937,
      975,  240,  908,  908,  908,  240,  240,  999,  887,  975,
      240,  925,  925,  925,  240,  240,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  458,  458,

      943,  943,  943,  458,  458,  458,  997,  996,  458,  943,
      458,  995,  835,  835,  835,  458,  458,  458,  468, 1009,
      468,  835,  847,  847,  847,  468,  468,  468, 1009,  994,
      468,  993,  468,  992,  807,  807,  807,  468,  468,  468,
      506,  506,  506,  506,  807,  506,  991,  990,  936,  506,
      506,  936,  942,  807,  506,  942,  835,  936,  506,  506,
      533,  942,  989,  987,  939,  533,  533,  533,  939,  986,
      533,  983,  533,  958,  958,  958,  847,  533,  533,  533,
      984,  984,  984,  976,  939,  533,  552,  974,  807,  984,
      552,  988,  988,  988,  973,  552,  552,  552, 1447,  972,

      552, 1447,  552, 1448,  971,  970, 1448,  552,  552,  552,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  810,  810,  810, 1019, 1019, 1019, 1044, 1044,
     1044, 1064, 1064, 1064, 1019, 1450, 1455, 1044, 1450, 1455,
     1064,  810, 1078, 1078, 1078, 1089, 1089, 1089, 1098, 1098,

     1098, 1078, 1456, 1459, 1089, 1456, 1459, 1098, 1104, 1104,
     1104, 1107, 1107, 1107, 1110, 1110, 1110, 1104, 1475, 1485,
     1107, 1475, 1485, 1110,  969,  968,  810,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  872,
      872,  872,  873,  873,  873,  876,  876,  876, 1486,  872,

      967, 1486,  873,  877,  877,  877, 1487, 1488,  872, 1487,
     1488,  873,  966,  965,  876,  878,  878,  878,  964,  893,
      893,  893,  877,  893,  894,  894,  894,  963,  893,  928,
      928,  928,  962,  961,  878,  929,  929,  929,  960,  928,
      932,  932,  932,  872, 1495,  929,  873, 1495,  928,  876,
      959,  933,  933,  933,  929, 1498,  957,  877, 1498,  932,
      934,  934,  934,  944,  944,  944,  956,  944, 1517,  878,
      933, 1517,  944,  893,  977,  977,  977,  955,  894,  934,
      978,  978,  978,  928,  977,  979,  979,  979, 1526,  929,
      978, 1526,  954,  977,  932,  953,  980,  980,  980,  978,

      981,  981,  981,  952,  979,  933,  951,  985,  985,  985,
      950,  985,  949,  948,  934,  980,  985,  944,  947,  981,
      945, 1012, 1012, 1012,  935, 1013, 1013, 1013,  977,  927,
      926, 1012,  924,  923,  978, 1013, 1014, 1014, 1014,  979,
     1012, 1015, 1015, 1015, 1013, 1016, 1016, 1016,  922,  921,
      980, 1040, 1040, 1040,  981, 1014, 1046, 1046, 1046,  920,
     1015,  985,  919,  917, 1016, 1020, 1020, 1020,  916, 1020,
     1040,  915,  914,  913, 1020, 1012, 1021, 1021, 1021, 1013,
     1021, 1038, 1038, 1038, 1039, 1039, 1039, 1041, 1041, 1041,
     1014, 1038,  912,  911, 1039, 1015, 1042, 1042, 1042, 1016,

     1038,  910,  909, 1039,  905, 1040, 1041, 1045, 1045, 1045,
     1046, 1045, 1058, 1058, 1058, 1042, 1045,  904,  903, 1020,
      902,  901, 1058, 1059, 1059, 1059, 1060, 1060, 1060,  900,
     1021, 1058,  899, 1059,  898, 1038,  896,  895, 1039,  891,
      890, 1041, 1059,  889,  888, 1060, 1061, 1061, 1061,  882,
     1042, 1062, 1062, 1062, 1065, 1065, 1065,  880, 1065,  879,
      870, 1045,  869, 1065,  868, 1061, 1058, 1066, 1066, 1066,
     1062, 1073, 1073, 1073, 1074, 1074, 1074, 1059,  867,  865,
     1060, 1073,  864,  863, 1074, 1075, 1075, 1075,  862,  861,
     1073,  860,  859, 1074, 1076, 1076, 1076, 1077, 1077, 1077,

     1061, 1080, 1080, 1080, 1075, 1062,  858,  857, 1065,  856,
     1079, 1079, 1079, 1076, 1079,  855, 1077,  854,  853, 1079,
      852, 1066, 1084, 1084, 1084, 1073,  851,  849, 1074, 1091,
     1091, 1091, 1084, 1085, 1085, 1085,  846,  845,  844, 1075,
      843, 1084,  842, 1085, 1086, 1086, 1086,  841, 1076,  840,
      838, 1077, 1085,  837,  836, 1080, 1087, 1087, 1087, 1088,
     1088, 1088,  833, 1086, 1079, 1090, 1090, 1090,  831, 1090,
     1093, 1093, 1093,  830, 1090, 1087, 1084,  827, 1088,  824,
     1093,  823,  822, 1091, 1094, 1094, 1094, 1085,  821, 1093,
     1095, 1095, 1095,  820, 1094, 1096, 1096, 1096, 1086, 1097,

     1097, 1097,  817, 1094, 1100, 1100, 1100,  813,  812, 1095,
     1087,  806,  805, 1088, 1096, 1106, 1106, 1106, 1097, 1090,
      802, 1099, 1099, 1099, 1093, 1099, 1102, 1102, 1102,  801,
     1099, 1103, 1103, 1103,  799,  798, 1102,  796, 1094,  795,
      791, 1103,  790,  787, 1095, 1102, 1109, 1109, 1109, 1096,
     1103,  786,  785, 1097,  784, 1105, 1105, 1105, 1100, 1105,
      783, 1108, 1108, 1108, 1105, 1108, 1112, 1112, 1112, 1106,
     1108,  782, 1111, 1111, 1111, 1099, 1111, 1113, 1113, 1113,
     1102, 1111, 1115, 1115, 1115, 1103, 1113, 1114, 1114, 1114,
      781, 1114, 1116, 1116, 1116,  779, 1114, 1118, 1118, 1118,

     1109, 1116, 1117, 1117, 1117,  778, 1117,  777,  776, 1105,
      775, 1117, 1119, 1119, 1119, 1108, 1121, 1121, 1121,  774,
     1112, 1119,  773, 1120, 1120, 1120, 1111, 1120, 1122, 1122,
     1122,  772, 1120, 1124, 1124, 1124, 1115, 1122, 1123, 1123,
     1123, 1114, 1123, 1125, 1125, 1125,  771, 1123, 1127, 1127,
     1127, 1118, 1125, 1126, 1126, 1126, 1117, 1126, 1128, 1128,
     1128,  769, 1126,  766, 1129, 1129, 1129, 1128, 1129,  763,
     1121,  751,  750, 1129, 1130, 1130, 1130, 1120,  749, 1131,
     1131, 1131, 1132, 1132, 1132,  745, 1132, 1124, 1131,  744,
      743, 1132, 1123, 1133, 1133, 1133, 1134, 1134, 1134, 1135,

     1135, 1135, 1127, 1135,  742, 1134,  741, 1126, 1135, 1136,
     1136, 1136, 1137, 1137, 1137, 1138, 1138, 1138, 1129, 1138,
      740, 1137,  739,  736, 1138, 1139, 1139, 1139, 1130, 1140,
     1140, 1140,  735, 1141, 1141, 1141, 1132, 1141, 1140, 1142,
     1142, 1142, 1141, 1143, 1143, 1143,  733, 1133, 1145, 1145,
     1145,  731, 1143, 1135,  728, 1144, 1144, 1144,  724, 1144,
     1148, 1148, 1148, 1136, 1144, 1146, 1146, 1146,  722, 1138,
      720, 1147, 1147, 1147, 1146, 1147, 1149, 1149, 1149, 1139,
     1147,  718, 1150, 1150, 1150, 1149, 1150, 1141, 1151, 1151,
     1151, 1150,  716, 1142, 1152, 1152, 1152, 1153, 1153, 1153,

      713, 1153, 1145, 1152,  708,  707, 1153,  703,  702, 1144,
     1154, 1154, 1154,  701, 1148, 1155, 1155, 1155, 1156, 1156,
     1156,  697, 1156,  696, 1155, 1147,  695, 1156, 1157, 1157,
     1157, 1158, 1158, 1158,  692,  691, 1150, 1159, 1159, 1159,
     1158, 1159, 1151, 1160, 1160, 1160, 1159, 1161, 1161, 1161,
      688, 1153,  687, 1162, 1162, 1162, 1161, 1162, 1163, 1163,
     1163,  686, 1162,  685, 1154, 1164, 1164, 1164,  684, 1165,
     1165, 1165, 1156, 1165, 1164, 1166, 1166, 1166, 1165, 1167,
     1167, 1167, 1157, 1168, 1168, 1168,  683, 1168, 1167,  682,
      679, 1159, 1168, 1169, 1169, 1169,  678, 1160,  677, 1170,

     1170, 1170, 1171, 1171, 1171,  676, 1171, 1162, 1170,  675,
      674, 1171, 1163, 1172, 1172, 1172, 1173, 1173, 1173, 1175,
     1175, 1175,  672, 1165,  671, 1173, 1174, 1174, 1174, 1166,
     1174, 1176, 1176, 1176,  670, 1174,  668, 1168,  665,  663,
     1176, 1177, 1177, 1177,  662, 1177,  658, 1169,  657,  649,
     1177, 1178, 1178, 1178,  646,  642, 1171, 1179, 1179, 1179,
     1180, 1180, 1180,  641, 1180,  630, 1179, 1172,  628, 1180,
     1181, 1181, 1181, 1175, 1182, 1182, 1182, 1183, 1183, 1183,
     1174, 1183,  627, 1182,  626,  624, 1183, 1184, 1184, 1184,
     1185, 1185, 1185,  623,  622, 1177, 1187, 1187, 1187, 1185,

     1186, 1186, 1186,  619, 1186, 1178, 1188, 1188, 1188, 1186,
     1190, 1190, 1190,  617, 1180, 1188, 1189, 1189, 1189,  616,
     1189, 1191, 1191, 1191, 1181, 1189, 1193, 1193, 1193,  615,
     1191, 1183,  614, 1192, 1192, 1192,  613, 1192, 1194, 1194,
     1194, 1184, 1192,  612, 1195, 1195, 1195, 1194, 1195,  610,
     1187,  609,  608, 1195, 1186, 1196, 1196, 1196, 1197, 1197,
     1197, 1199, 1199, 1199, 1190,  607,  606, 1197,  605,  599,
     1189,  598, 1198, 1198, 1198,  597, 1198, 1200, 1200, 1200,
     1193, 1198, 1202, 1202, 1202,  596, 1200, 1192, 1201, 1201,
     1201,  591, 1201, 1203, 1203, 1203,  588, 1201, 1195, 1204,

     1204, 1204, 1203, 1204, 1205, 1205, 1205,  587, 1204, 1196,
     1206, 1206, 1206,  586,  584, 1199, 1207, 1207, 1207, 1206,
     1207, 1208, 1208, 1208,  583, 1207, 1198,  581, 1209, 1209,
     1209, 1210, 1210, 1210,  578, 1210, 1202, 1209,  577,  576,
     1210,  574, 1201, 1211, 1211, 1211, 1212, 1212, 1212,  571,
     1213, 1213, 1213, 1204, 1213, 1212,  570,  569, 1205, 1213,
     1214, 1214, 1214, 1215, 1215, 1215,  566, 1216, 1216, 1216,
     1207, 1216, 1215,  564,  563, 1208, 1216, 1217, 1217, 1217,
     1218, 1218, 1218,  561,  559, 1210, 1219, 1219, 1219, 1218,
     1219, 1220, 1220, 1220,  558, 1219,  554, 1211, 1221, 1221,

     1221, 1222, 1222, 1222, 1213, 1222,  551, 1221,  550,  546,
     1222, 1223, 1223, 1223, 1214, 1224, 1224, 1224, 1225, 1225,
     1225, 1216, 1225,  545, 1224,  543,  542, 1225, 1226, 1226,
     1226, 1217, 1227, 1227, 1227, 1228, 1228, 1228,  538, 1228,
     1219, 1227,  537,  530, 1228, 1220, 1229, 1229, 1229, 1230,
     1230, 1230, 1231, 1231, 1231, 1222, 1231,  529, 1230,  528,
      526, 1231, 1232, 1232, 1232, 1223, 1233, 1233, 1233, 1234,
     1234, 1234, 1225, 1234,  523, 1233,  522,  520, 1234, 1235,
     1235, 1235, 1226, 1236, 1236, 1236, 1237, 1237, 1237, 1228,
     1237,  519, 1236,  516,  515, 1237, 1238, 1238, 1238,  514,

     1229, 1239, 1239, 1239,  513,  512, 1231, 1241, 1241, 1241,
     1239, 1240, 1240, 1240,  511, 1240, 1232, 1242, 1242, 1242,
     1240,  510,  509, 1234,  508,  507, 1242, 1243, 1243, 1243,
      504, 1243,  497, 1235,  496,  491, 1243, 1244, 1244, 1244,
     1237,  490, 1245, 1245, 1245, 1246, 1246, 1246,  485, 1246,
     1238, 1245,  483,  482, 1246, 1247, 1247, 1247, 1248, 1248,
     1248, 1241, 1249, 1249, 1249, 1240, 1249, 1248, 1250, 1250,
     1250, 1249,  481, 1251, 1251, 1251, 1252, 1252, 1252,  480,
     1252, 1243, 1251,  479,  476, 1252, 1253, 1253, 1253,  470,
      464, 1244, 1254, 1254, 1254,  453, 1255, 1255, 1255, 1246,

     1255, 1254, 1256, 1256, 1256, 1255, 1257, 1257, 1257, 1247,
     1258, 1258, 1258,  450, 1258, 1257, 1249,  449,  447, 1258,
      444,  443, 1250, 1259, 1259, 1259, 1260, 1260, 1260,  439,
     1252,  433, 1261, 1261, 1261, 1260, 1261, 1262, 1262, 1262,
     1253, 1261, 1263, 1263, 1263, 1264, 1264, 1264,  432, 1264,
     1255, 1263,  426,  423, 1264,  421, 1256, 1265, 1265, 1265,
     1266, 1266, 1266,  419, 1258,  416, 1267, 1267, 1267, 1266,
     1267, 1268, 1268, 1268,  415, 1267,  414, 1259, 1269, 1269,
     1269, 1270, 1270, 1270,  413, 1270, 1261, 1269,  412,  411,
     1270, 1262, 1271, 1271, 1271, 1272, 1272, 1272,  410, 1264,

      408, 1273, 1273, 1273, 1272, 1273, 1274, 1274, 1274,  406,
     1273, 1265, 1275, 1275, 1275, 1276, 1276, 1276,  405, 1276,
     1267, 1275,  395,  393, 1276, 1268, 1277, 1277, 1277, 1278,
     1278, 1278, 1279, 1279, 1279, 1270, 1279,  392, 1278,  390,
      388, 1279, 1280, 1280, 1280,  380, 1271, 1281, 1281, 1281,
     1282, 1282, 1282,  379, 1282, 1273, 1281,  372,  370, 1282,
     1274, 1283, 1283, 1283, 1284, 1284, 1284,  363,  361, 1276,
     1285, 1285, 1285, 1284, 1285, 1286, 1286, 1286,  357, 1285,
     1277, 1287, 1287, 1287,  350,  348, 1279, 1289, 1289, 1289,
     1287, 1288, 1288, 1288,  343, 1288, 1280, 1290, 1290, 1290,

     1288, 1291, 1291, 1291, 1282, 1291, 1290, 1292, 1292, 1292,
     1291, 1293, 1293, 1293,  340, 1283,  338, 1294, 1294, 1294,
     1293, 1294,  331,  329, 1285,  323, 1294,  319,  318, 1286,
     1295, 1295, 1295, 1296, 1296, 1296, 1298, 1298, 1298,  316,
      309, 1289, 1296,  308,  305, 1288,  298, 1297, 1297, 1297,
      297, 1297, 1301, 1301, 1301, 1291, 1297, 1299, 1299, 1299,
      291, 1292,  290, 1300, 1300, 1300, 1299, 1300, 1304, 1304,
     1304, 1294, 1300, 1303, 1303, 1303,  288, 1303,  274, 1305,
     1305, 1305, 1303, 1305, 1295, 1306, 1306, 1306, 1305,  273,
     1298, 1307, 1307, 1307,  268, 1307, 1308, 1308, 1308,  267,

     1307, 1297,  266, 1309, 1309, 1309, 1301, 1309, 1310, 1310,
     1310,  261, 1309,  260, 1311, 1311, 1311, 1300, 1311, 1312,
     1312, 1312, 1304, 1311, 1314, 1314, 1314, 1303, 1313, 1313,
     1313,  258, 1313, 1305, 1315, 1315, 1315, 1313,  257, 1306,
     1316, 1316, 1316,  255,  254, 1307, 1317, 1317, 1317,  252,
     1308, 1318, 1318, 1318, 1319, 1319, 1319, 1309, 1321, 1321,
     1321,  247, 1310, 1322, 1322, 1322,  246,  242, 1311, 1323,
     1323, 1323,  239, 1312, 1324, 1324, 1324,  237, 1314, 1325,
     1325, 1325, 1313, 1326, 1326, 1326,  231,  230, 1315, 1327,
     1327, 1327,  221,  220, 1316, 1328, 1328, 1328,  213,  209,

     1317, 1329, 1329, 1329,  206, 1318,  198,  196, 1319, 1330,
     1330, 1330, 1321, 1331, 1331, 1331,  195, 1322, 1332, 1332,
     1332,  194,  193, 1323, 1333, 1333, 1333,  189, 1324, 1334,
     1334, 1334,  184, 1325, 1335, 1335, 1335, 1326, 1336, 1336,
     1336,  182,  181, 1327, 1337, 1337, 1337,  170,  168, 1328,
     1338, 1338, 1338,  162,  160, 1329, 1339, 1339, 1339, 1340,
     1340, 1340,  148, 1330, 1341, 1341, 1341, 1331, 1342, 1342,
     1342,  146, 1332, 1343, 1343, 1343,  139,  137, 1333, 1344,
     1344, 1344,  130, 1334, 1345, 1345, 1345,  129, 1335, 1346,
     1346, 1346, 1336, 1347, 1347, 1347,  127,  120, 1337, 1348,

     1348, 1348,  119,  116, 1338, 1349, 1349, 1349,  109,  108,
     1339,  107,  104, 1340, 1350, 1350, 1350,  103, 1341, 1351,
     1351, 1351, 1342, 1352, 1352, 1352,  101, 1343, 1353, 1353,
     1353,   94,   91, 1344, 1354, 1354, 1354,   82, 1345, 1355,
     1355, 1355,   81, 1346, 1356, 1356, 1356, 1347, 1357, 1357,
     1357,   75,    0, 1348, 1358, 1358, 1358,    0,    0, 1349,
     1359, 1359, 1359, 1360, 1360, 1360,    0,    0, 1350, 1361,
     1361, 1361,    0, 1351, 1362, 1362, 1362, 1352, 1363, 1363,
     1363,    0, 1353, 1364, 1364, 1364,    0,    0, 1354, 1365,
     1365, 1365,    0, 1355, 1366, 1366, 1366,    0, 1356, 1367,

     1367, 1367, 1357, 1368, 1368, 1368,    0,    0, 1358, 1369,
     1369, 1369,    0,    0, 1359,    0,    0, 1360, 1370, 1370,
     1370,    0,    0, 1361, 1371, 1371, 1371,    0, 1362, 1372,
     1372, 1372, 1363, 1373, 1373, 1373,    0, 1364, 1374, 1374,
     1374,    0,    0, 1365, 1375, 1375, 1375,    0, 1366, 1376,
     1376, 1376,    0, 1367, 1377, 1377, 1377, 1368, 1378, 1378,
     1378,    0,    0, 1369, 1379, 1379, 1379, 1380, 1380, 1380,
        0,    0, 1370, 1381, 1381, 1381,    0,    0, 1371, 1382,
     1382, 1382,    0, 1372, 1383, 1383, 1383, 1373, 1384, 1384,
     1384,    0, 1374, 1385, 1385, 1385,    0,    0, 1375, 1386,

     1386, 1386,    0, 1376, 1387, 1387, 1387,    0, 1377, 1388,
     1388, 1388, 1378, 1389, 1389, 1389,    0,    0, 1379,    0,
        0, 1380, 1390, 1390, 1390,    0,    0, 1381, 1391, 1391,
     1391,    0,    0, 1382, 1392, 1392, 1392,    0, 1383, 1393,
     1393, 1393, 1384, 1394, 1394, 1394,    0, 1385, 1395, 1395,
     1395,    0,    0, 1386, 1396, 1396, 1396,    0, 1387,    0,
        0,    0,    0, 1388,    0,    0,    0, 1389,    0,    0,
        0,    0,    0,    0,    0,    0, 1390,    0,    0,    0,
        0,    0, 1391,    0,    0,    0,    0,    0, 1392,    0,
        0,    0,    0, 1393,    0,    0,    0, 1394,    0,    0,

        0,    0, 1395,    0,    0,    0,    0,    0, 1396, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,

     1402, 1402, 1402, 1402, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
     1405, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1408,

     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413, 1413, 1413,

     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
     1414, 1414, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1421,
     1421, 1421,    0, 1421, 1421,    0, 1421,    0, 1421, 1421,

     1421,    0, 1421, 1421, 1421, 1421, 1421, 1421, 1422, 1422,
     1422,    0, 1422, 1422, 1422, 1422,    0, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1423, 1423, 1423,
        0, 1423, 1423,    0, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1423,    0, 1423, 1424, 1424, 1424,    0,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425,    0, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1426, 1426, 1426,    0,    0,    0,
        0, 1426,    0,    0,    0, 1426,    0,    0, 1426, 1427,

     1427, 1427,    0,    0, 1427,    0, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427,    0, 1427, 1428, 1428,
     1428,    0, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1429, 1429, 1429,
        0,    0, 1429, 1429, 1429,    0, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429,    0, 1429, 1430, 1430, 1430,    0,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431,    0, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1432,    0,    0,    0,    0,    0,

        0, 1432,    0,    0,    0, 1432,    0,    0, 1432, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433,    0, 1433, 1434, 1434,
        0,    0,    0,    0,    0, 1434,    0,    0,    0, 1434,
        0,    0, 1434, 1434, 1435,    0,    0,    0,    0,    0,
        0,    0,    0, 1435,    0, 1435,    0,    0, 1435, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1438,    0,
     1438,    0, 1438, 1438, 1438, 1438, 1438, 1438,    0, 1438,
        0, 1438, 1438,    0, 1438, 1439, 1439, 1439,    0, 1439,

     1439, 1439, 1439, 1439, 1439,    0, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1440, 1440, 1440,    0, 1440, 1440,
     1440, 1440, 1440, 1440,    0, 1440, 1440, 1440, 1440, 1440,
        0, 1440, 1440, 1441, 1441, 1441,    0, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,    0, 1441,
        0, 1441, 1442, 1442, 1442,    0, 1442, 1442, 1442, 1442,
     1442, 1442, 1442, 1442,    0, 1442, 1442,    0, 1442,    0,
     1442, 1443,    0, 1443,    0, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443,    0, 1443,    0, 1443,
     1444,    0, 1444,    0, 1444, 1444, 1444, 1444, 1444, 1444,

        0, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1445,
        0, 1445,    0, 1445, 1445, 1445, 1445, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1449, 1449,
     1449,    0, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1451, 1451, 1451,
        0, 1451, 1451, 1451, 1451,    0, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1452, 1452, 1452,    0,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1453,    0,    0, 1453,    0,
     1453,    0, 1453,    0, 1453,    0, 1453,    0,    0, 1453,

     1454, 1454, 1454,    0, 1454,    0, 1454, 1454, 1454, 1454,
        0, 1454,    0, 1454, 1454,    0, 1454,    0, 1454, 1457,
     1457, 1457,    0, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1458, 1458,
     1458,    0, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1460, 1460, 1460,
        0, 1460, 1460,    0, 1460,    0, 1460, 1460, 1460,    0,
     1460, 1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461,    0,
     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461,    0, 1461, 1462, 1462, 1462,    0, 1462,

     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1463, 1463, 1463,    0, 1463, 1463,
        0, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463,    0, 1463, 1464, 1464, 1464,    0, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1465, 1465, 1465,    0, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1466, 1466, 1466,    0, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1467, 1467, 1467,    0,    0,    0,    0, 1467,    0,    0,

        0, 1467,    0,    0, 1467, 1468, 1468, 1468,    0,    0,
     1468,    0, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468,    0, 1468, 1469, 1469, 1469,    0,    0, 1469,
     1469, 1469,    0, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469,    0, 1469, 1470, 1470, 1470,    0, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1471,    0,    0,    0,    0,    0,    0, 1471,
        0,    0,    0, 1471,    0,    0, 1471, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472,    0, 1472, 1473, 1473,    0,    0,

        0,    0,    0, 1473,    0,    0,    0, 1473,    0,    0,
     1473, 1473, 1474,    0,    0,    0,    0,    0,    0,    0,
        0, 1474,    0, 1474,    0,    0, 1474, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1477,    0, 1477,    0,
     1477, 1477, 1477, 1477, 1477, 1477,    0, 1477,    0, 1477,
     1477,    0, 1477, 1478, 1478, 1478,    0, 1478, 1478, 1478,
     1478, 1478, 1478,    0, 1478, 1478, 1478, 1478, 1478, 1478,
     1478, 1478, 1479, 1479, 1479,    0, 1479, 1479, 1479, 1479,
     1479, 1479,    0, 1479, 1479, 1479, 1479, 1479,    0, 1479,

     1479, 1480, 1480, 1480,    0, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1480, 1480, 1480, 1480,    0, 1480,    0, 1480,
     1481, 1481, 1481,    0, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481,    0, 1481, 1481,    0, 1481,    0, 1481, 1482,
        0, 1482,    0, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482,    0, 1482,    0, 1482, 1483,    0,
     1483,    0, 1483, 1483, 1483, 1483, 1483, 1483,    0, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1484,    0, 1484,
        0, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1489, 1489, 1489,    0,

     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489,    0, 1489, 1490, 1490, 1490,    0, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1491,    0,    0, 1491,    0, 1491,
        0, 1491,    0, 1491,    0, 1491,    0,    0, 1491, 1492,
     1492, 1492,    0, 1492,    0, 1492, 1492, 1492, 1492,    0,
     1492,    0, 1492, 1492,    0, 1492,    0, 1492, 1493, 1493,
     1493,    0, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1494, 1494, 1494,
        0, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494,

     1494, 1494, 1494, 1494, 1494, 1494, 1496, 1496, 1496,    0,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1497, 1497, 1497,    0, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1499, 1499, 1499,    0, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499,    0, 1499, 1500, 1500, 1500,    0, 1500, 1500,    0,
     1500,    0, 1500, 1500, 1500,    0, 1500, 1500, 1500, 1500,
     1500, 1500, 1501, 1501, 1501,    0, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,

     1501, 1502, 1502, 1502,    0, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1503, 1503, 1503,    0, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1504,
     1504, 1504,    0, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505,
     1505,    0, 1505, 1505,    0, 1505, 1505, 1505, 1505, 1505,
     1505, 1505, 1505, 1505, 1505,    0, 1505, 1506, 1506, 1506,
        0,    0,    0,    0, 1506,    0,    0,    0, 1506,    0,
        0, 1506, 1507, 1507, 1507,    0,    0, 1507,    0, 1507,

     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,    0,
     1507, 1508, 1508, 1508,    0,    0, 1508, 1508, 1508,    0,
     1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508,    0, 1508,
     1509, 1509, 1509,    0, 1509, 1509, 1509, 1509, 1509, 1509,
     1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1510, 1510,    0, 1510, 1511, 1511,
     1511,    0, 1511, 1511, 1511, 1511, 1511, 1511,    0, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1512, 1512, 1512,
        0, 1512, 1512, 1512, 1512, 1512, 1512,    0, 1512, 1512,

     1512, 1512, 1512,    0, 1512, 1512, 1513,    0, 1513,    0,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513,
     1513,    0, 1513,    0, 1513, 1514, 1514, 1514,    0, 1514,
     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
        0, 1514,    0, 1514, 1515,    0, 1515,    0, 1515, 1515,
     1515, 1515, 1515, 1515,    0, 1515, 1515, 1515, 1515, 1515,
     1515, 1515, 1515, 1516,    0, 1516,    0, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1518, 1518, 1518,    0, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,    0,

     1518, 1519, 1519, 1519,    0, 1519, 1519, 1519, 1519, 1519,
     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
     1520, 1520, 1520,    0, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520,    0, 1520, 1521,
     1521, 1521,    0, 1521, 1521, 1521, 1521, 1521, 1521, 1521,
     1521, 1521, 1521, 1521, 1521, 1521,    0, 1521, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1524,    0,    0,    0,

     1524,    0,    0,    0,    0,    0,    0,    0, 1524,    0,
     1524, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
     1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527,    0, 1527, 1527,    0, 1527, 1527, 1528,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1528,    0, 1528, 1528,    0, 1528, 1528, 1529, 1529,
     1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529,    0, 1529, 1529,    0, 1529, 1529, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,

     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397
    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2018 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include <QDir>
#include <QFile>
#include <QFileInfo>
#include <QHash>
#include <QRegExp>
#include <QStringList>
#include <QStack>
#include <QVector>

#include <pre.h>

#include <a_define.h>
#include <arguments.h>
#include <constexp.h>
#include <config.h>
#include <condparser.h>
#include <doxy_globals.h>
#include <default_args.h>
#include <entry.h>
#include <message.h>
#include <membername.h>
#include <util.h>

#define YY_NEVER_INTERACTIVE 1

// Toggle for some debugging info
// #define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

struct CondCtx
{

   CondCtx(int line, const QString &id, bool b)
      : lineNr(line), sectionId(id), skip(b) {}

   int lineNr;
   QString sectionId;
   bool skip;
};

struct FileState {
   FileState(int size) : lineNr(1), fileBuf(size),
      oldFileBuf(""), oldFileBufPos(0), bufState(0) {}

   int       lineNr;
   QString   fileBuf;
   QString   oldFileBuf;
   int       oldFileBufPos;
   QString   fileName;
   YY_BUFFER_STATE bufState;
};

/** @brief Singleton which manages the defines available while proprocessing files
 */
class DefineManager
{
   // local class used to hold the defines for a single file
   class DefinesPerFile
   {
    public:
      DefinesPerFile() {
      }

      virtual ~DefinesPerFile() {
      }

      /** Adds a define in the context of a file. Will replace an existing define
       *  with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(QSharedPointer<A_Define> def) {
         QSharedPointer<A_Define> d = m_defines.value(def->m_name);

         if (d != nullptr) {
            // redefine
            m_defines.remove(d->m_name);
         }

         m_defines.insert(def->m_name, def);
      }

      /** Adds an include file for this file
       *  @param fileName The name of the include file
       */
      void addInclude(const QString &fileName) {
         m_includedFiles.insert(fileName);
      }

      void collectDefines(DefineDict &dict, QSet<QString> &includeStack);

    private:
      DefineDict m_defines;
      QSet<QString> m_includedFiles;
   };

 public:
   friend class DefinesPerFile;

   /** Returns a reference to the singleton */
   static DefineManager &instance() {
      if (theInstance == nullptr) {
         theInstance = new DefineManager;
      }
      return *theInstance;
   }

   static void deleteInstance() {
      delete theInstance;
      theInstance = nullptr;
   }

   /** Starts a context in which defines are collected.
    *  Called at the start of a new file that is preprocessed.
    *  @param fileName the name of the file to process.
    */
   void startContext(const QString &fileName) {
      m_contextDefines.clear();
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);
      if (dpf == nullptr) {
         // new file

         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);
      }
   }

   /** Ends the context started with startContext() freeing any
    *  defines collected within in this context.
    */
   void endContext() {
      m_contextDefines.clear();
   }

   /** Add an included file to the current context.
    *  If the file has been pre-processed already, all defines are added to the context.
    *  @param fileName The name of the include file to add to the context.
    */
   void addFileToContext(const QString &fileName) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         // new file

         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);

      } else {
         // existing file

         QSet<QString> includeStack;
         dpf->collectDefines(m_contextDefines, includeStack);
      }
   }

   /** Add a define to the manager object.
    *  @param fileName The file in which the define was found
    *  @param def The Define object to add.
    */
   void addDefine(const QString &fileName, QSharedPointer<A_Define> def) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<A_Define> d = m_contextDefines.value(def->m_name);

      if (d != nullptr) {
         // redefine
         m_contextDefines.remove(d->m_name);
      }

      m_contextDefines.insert(def->m_name, def);

      //
      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);
      }

      dpf->addDefine(def);
   }

   /** Add an include relation to the manager object.
    *  @param fromFileName file name in which the include was found.
    *  @param toFileName file name that is included.
    */
   void addInclude(const QString &fromFileName, const QString &toFileName) {
      if (fromFileName.isEmpty() || toFileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fromFileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fromFileName, dpf);
      }
      dpf->addInclude(toFileName);
   }

   /** Returns a Define object given its name or 0 if the Define does not exist.
   */
   QSharedPointer<A_Define> isDefined(const QString &name) const {
      QSharedPointer<A_Define> d = m_contextDefines.value(name);

      if (d && d->undef) {
         d = QSharedPointer<A_Define>();
      }

      return d;
   }

   /** Returns a reference to the defines found in the current context. */
   const DefineDict &defineContext() const {
      return m_contextDefines;
   }

 private:
   static DefineManager *theInstance;

   /** Helper function to collect all define for a given file */
   void collectDefinesForFile(const QString &fileName, QSharedPointer<DefineDict> dict) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf) {
         QSet<QString> includeStack;
         dpf->collectDefines(*dict, includeStack);
      }
   }

   /** returns the DefinesPerFile object for a given file name. */
   QSharedPointer<DefinesPerFile> find(const QString &fileName) const {
      if (fileName.isEmpty()) {
         return QSharedPointer<DefinesPerFile>();
      }

      return m_fileMap.value(fileName);
   }

   DefineManager() {
   }

   virtual ~DefineManager() {
   }

   QHash<QString, QSharedPointer<DefinesPerFile>> m_fileMap;
   DefineDict m_contextDefines;
};

/** Singleton instance */
DefineManager *DefineManager::theInstance = 0;

/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(DefineDict &dict, QSet<QString> &includeStack)
{
   {
      for (auto di : m_includedFiles) {
         QString incFile = di;

         QSharedPointer<DefinesPerFile> dpf = DefineManager::instance().find(incFile);

         if (dpf && ! includeStack.contains(incFile)) {
            includeStack.insert(incFile);
            dpf->collectDefines(dict, includeStack);
         }
      }
   }

   {
      for (const auto &def : m_defines)  {
         QSharedPointer<A_Define> d = dict.value(def->m_name);

         if (d != nullptr) {
            // redefine
            dict.remove(d->m_name);
         }

         dict.insert(def->m_name, def);
      }
   }
}

static QStringList              g_pathList;
static QString                  g_yyFileName;
static QSharedPointer<FileDef>  g_yyFileDef;
static QSharedPointer<FileDef>  g_inputFileDef;

static QSharedPointer<QHash<QString, int>> g_argDict;
static QStack<QSharedPointer<FileState>>   g_includeStack;
static QStack<QSharedPointer<CondCtx>>     g_condStack;
static QSharedPointer<DefineDict>          g_expandedDict;

static int          g_yyLineNr   = 1;
static int          g_yyMLines   = 1;
static int          g_yyColNr    = 1;
static int          g_ifcount    = 0;
static int          g_defArgs    = -1;

static QString      g_defName;
static QString      g_defText;
static QString      g_defLitText;
static QString      g_defArgsStr;
static QString      g_defExtraSpacing;
static bool         g_defVarArgs;
static int          g_lastCContext;
static int          g_lastCPPContext;
static QStack<int>  g_levelGuard;
static QString      g_inputBuf;
static int          g_inputBufPos;
static QString      g_outputBuf;
static int          g_roundCount;
static bool         g_quoteArg;

static int          g_findDefArgContext;
static bool         g_expectGuard;
static QString      g_guardName;
static QString      g_lastGuardName;
static QString      g_incName;
static QString      g_guardExpr;
static int          g_curlyCount;
static bool         g_nospaces;          // add extra spaces during macro expansion

static bool         g_macroExpansion;    // from the configuration
static bool         g_expandOnlyPredef;  // from the configuration
static int          g_commentCount;
static bool         g_insideComment;
static bool         g_isImported;
static QString      g_blockName;
static int          g_condCtx;
static bool         g_skip;

static bool         g_insideCS;          // C# has simpler preprocessor
static bool         g_isSource;

static bool         g_lexInit   = false;
static int          g_fenceSize = 0;
static bool         g_ccomment;

static void setFileName(const QString &name)
{
   bool ambig;
   QFileInfo fi(name);

   g_yyFileName = fi.absoluteFilePath();
   g_yyFileDef  = findFileDef(&Doxy_Globals::inputNameDict, g_yyFileName, ambig);

   if (g_yyFileDef == nullptr) {
      // if this is not an input file check if it is an include file
      g_yyFileDef = findFileDef(&Doxy_Globals::includeNameDict, g_yyFileName, ambig);
   }

   if (g_yyFileDef && g_yyFileDef->isReference()) {
      g_yyFileDef = QSharedPointer<FileDef>();
   }

   g_insideCS = getLanguageFromFileName(g_yyFileName) == SrcLangExt_CSharp;
   g_isSource = determineSection(g_yyFileName);
}

static void incrLevel()
{
   g_levelGuard.push(0);
}

static void decrLevel()
{
   if (g_levelGuard.size() > 0) {
      g_levelGuard.pop();

   } else {
      warn(g_yyFileName, g_yyLineNr, "More #endif's than #if's found\n");

   }
}

static bool otherCaseDone()
{
   if (g_levelGuard.size() == 0) {
      warn(g_yyFileName, g_yyLineNr, "Found an #else without a preceding #if\n");
      return true;

   } else {
      return g_levelGuard.top();

   }
}

static void setCaseDone(bool value)
{
   g_levelGuard.top() = value;
}

static QSet<QString> g_allIncludes;

static QSharedPointer<FileState> checkAndOpenFile(const QString &fileName, bool &alreadyIncluded)
{
   alreadyIncluded = false;
   QSharedPointer<FileState> fs;

   QFileInfo fi(fileName);

   if (fi.exists() && fi.isFile()) {
      static const QStringList exclPatterns = Config::getList("exclude-patterns");

      if (patternMatch(fi, exclPatterns)) {
         return QSharedPointer<FileState>();
      }

      QString absName = fi.absoluteFilePath();

      // global guard
      if (g_curlyCount == 0) {
         // not #include inside { ... }

         if (g_allIncludes.contains(absName)) {
            alreadyIncluded = true;
            return QSharedPointer<FileState>();
         }

         g_allIncludes.insert(absName);
      }

      // check include stack for absName
      QStack<QSharedPointer<FileState>> tmpStack;

      while (! g_includeStack.isEmpty()) {
         fs = g_includeStack.pop();

         if (fs->fileName == absName) {
            alreadyIncluded = true;
         }

         tmpStack.push(fs);
      }

      while (! tmpStack.isEmpty()) {
         fs = tmpStack.pop();

         g_includeStack.push(fs);
      }

      if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }

      fs = QMakeShared<FileState>(fi.size() + 4096);
      alreadyIncluded = false;

      if (! readInputFile(absName, fs->fileBuf)) {
         // error
         fs = QSharedPointer<FileState>();

      } else {
         fs->oldFileBuf    = g_inputBuf;
         fs->oldFileBufPos = g_inputBufPos;
      }
   }

   return fs;
}

static QSharedPointer<FileState> findFile(const QString &fileName, bool localInclude, bool &alreadyIncluded)
{
   if (QDir::isAbsolutePath(fileName)) {
      QSharedPointer<FileState> fs = checkAndOpenFile(fileName, alreadyIncluded);

      if (fs) {
         setFileName(fileName);
         g_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   if (localInclude && ! g_yyFileName.isEmpty()) {
      QFileInfo fi(g_yyFileName);

      if (fi.exists()) {
         QString absName = fi.absolutePath() + "/" + fileName;
         QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

         if (fs) {
            setFileName(absName);
            g_yyLineNr = 1;
            return fs;

         } else if (alreadyIncluded) {
            return QSharedPointer<FileState>();
         }
      }
   }

   if (g_pathList.isEmpty()) {
      return QSharedPointer<FileState>();
   }

   for (auto &s : g_pathList) {
      QString absName = s + "/" + fileName;

      QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

      if (fs) {
         setFileName(absName);
         g_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   return QSharedPointer<FileState>();
}

static QString extractTrailingComment(const QString &s)
{
   if (s.isEmpty()) {
      return "";
   }

   int i = s.length() - 1;

   while (i >= 0) {
      QChar c = s[i];

      switch (c.unicode()) {
         case '/': {
            i--;

            if (i >= 0 && s[i] == '*') {
               // end of a comment block
               i--;

               while (i > 0 && !(s[i - 1] == '/' && s[i] == '*')) {
                  i--;
               }

               if (i == 0) {
                  i++;
               }

               // only /*!< or /**< are treated as a comment for the macro name     */
               // otherwise the comment is treated as part of the macro definition

               return ((s[i + 1] == '*' || s[i + 1] == '!') && s[i + 2] == '<') ? s.mid(i - 1) : "";

            } else {
               return "";
            }
         }

         break;

         // whitespace or line-continuation
         case ' ':
         case '\t':
         case '\r':
         case '\n':
         case '\\':
            break;

         default:
            return "";
      }

      i--;
   }

   return "";
}

static int getNextChar(const QString &expr, QString *rest, uint &pos);
static int getCurrentChar(const QString &expr, QString *rest, uint pos);
static void unputChar(const QString &expr, QString *rest, uint &pos, char c);
static void expandExpression(QString &expr, QString *rest, int pos);

static QString stringize(const QString &s)
{
   QString result;
   QChar c;
   QChar pc;

   uint i = 0;
   bool inString = false;
   bool inChar   = false;

   while (i < s.length()) {

      if (! inString && ! inChar) {
         while (i < s.length() && ! inString && ! inChar) {
            c = s.at(i++);

            if (c == '"') {
               result += "\\\"";
               inString = true;
            } else if (c == '\'') {
               result += c;
               inChar = true;
            } else {
               result += c;
            }
         }

      } else if (inChar) {
         while (i < s.length() && inChar) {
            c = s.at(i++);

            if (c == '\'') {
               result += '\'';
               inChar = false;
            } else if (c == '\\') {
               result += "\\\\";
            } else {
               result += c;
            }
         }

      } else {
         pc = 0;

         while (i < s.length() && inString) {
            QChar c2 = s.at(i++);

            if (c2 == '"') {
               result += "\\\"";
               inString = pc == '\\';

            } else if (c2 == '\\') {
               result += "\\\\";

            } else {
               result += c2;
            }

            pc = c2;
         }
      }
   }

   return result;
}

/*! Execute all ## operators in expr.
 * If the macro name before or after the operator contains a no-rescan
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QString &expr)
{
   QRegExp r("[ \\t\\n]*##[ \\t\\n]*");
   int l;
   int n;
   int i = 0;

   if (expr.isEmpty()) {
      return;
   }

   while ((n = r.indexIn(expr, i)) != -1) {
      l = r.matchedLength();

      if (n + l + 1 < (int)expr.length() && expr.at(n + l) == '@' && expr.at(n + l + 1) == '-') {
         // remove no-rescan marker after ID
         l += 2;
      }

      // remove the ## operator and the surrounding whitespace
      expr  = expr.left(n) + expr.right(expr.length() - n - l);
      int k = n - 1;

      while (k >= 0 && isId(expr.at(k))) {
         k--;
      }

      if (k > 0 && expr.at(k) == '-' && expr.at(k - 1) == '@') {
         // remove no-rescan marker before ID
         expr = expr.left(k - 1) + expr.right(expr.length() - k - 1);
         n -= 2;
      }

      i = n;
   }
}

static void yyunput (int c,char *buf_ptr);
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QString &expr, QString *rest, uint &pos, char term, QString &arg)
{
   int cc;

   while ((cc = getNextChar(expr, rest, pos)) != EOF && cc != 0) {
      if (cc == '\\') {
         arg += (char)cc, cc = getNextChar(expr, rest, pos);
      } else if (cc == term) {
         return;
      }
      arg += (char)cc;
   }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr.
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the
 * length of the (unexpanded) argument list is stored in \a len.
 */
static bool replaceFunctionMacro(const QString &expr, QString *rest, int pos, int &len, QSharedPointer<const A_Define> def, QString &result)
{
   uint j = pos;
   len    = 0;

   result.clear();
   int cc;

   while ((cc = getCurrentChar(expr, rest, j)) != EOF && isspace(cc)) {
      len++;
      getNextChar(expr, rest, j);
   }

   if (cc != '(') {
      unputChar(expr, rest, j, ' ');
      return false;
   }

   // consume the `(' character
   getNextChar(expr, rest, j);

   // list of arguments
   QHash<QString, QString> argTable;

   QString arg;
   int argCount = 0;
   bool done    = false;

   // PHASE 1: read the macro arguments
   if (def->nargs == 0) {
      while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
         char c = (char)cc;

         if (c == ')') {
            break;
         }
      }

   } else {
      while (! done && (argCount < def->nargs || def->varArgs) &&
             ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0)) {

         char c = (char)cc;

         if (c == '(') {
            // argument is a function => search for matching )
            int level = 1;
            arg += c;

            //char term='\0';

            while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               char c = (char)cc;

               if (c == '\'' || c == '\"') {
                  // skip ('s and )'s inside strings
                  arg += c;
                  addTillEndOfString(expr, rest, j, c, arg);
               }

               if (c == ')') {
                  level--;
                  arg += c;
                  if (level == 0) {
                     break;
                  }

               } else if (c == '(') {
                  level++;
                  arg += c;

               } else {
                  arg += c;
               }
            }

         } else if (c == ')' || c == ',') {
            // last or next argument found

            if (c == ',' && argCount == def->nargs - 1 && def->varArgs) {
               arg = arg.trimmed();
               arg += ',';

            } else {

               QString argKey;
               argKey = QString("@%1").arg(argCount++);    // key name
               arg    = arg.trimmed();

               // add argument to the lookup table
               argTable.insert(argKey, arg);
               arg.clear();

               if (c == ')') {
                  // end of the argument list
                  done = true;
               }
            }

         } else if (c == '\"') {
            // append literal strings

            arg += c;
            bool found = false;

            while (!found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '"';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;
                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }
               c = (char)cc;
               arg += c;
            }

         } else if (c == '\'') {
            // append literal characters
            arg += c;
            bool found = false;

            while (!found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '\'';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;
                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }
               c = (char)cc;
               arg += c;
            }
         } else { // append other characters
            arg += c;
         }
      }
   }

   // PHASE 2: apply the macro function
   if (argCount == def->nargs || // same number of arguments
         (argCount >= def->nargs - 1 && def->varArgs)) {

         // variadic macro with at least as many
         // params as the non-variadic part (see bug731985)

      uint k = 0;

      // substitution of all formal arguments
      QString resExpr;
      const QString d = def->m_definition.trimmed();

      bool inString = false;

      while (k < d.length()) {
         if (d.at(k) == '@') {
            // maybe a marker, otherwise an escaped @

            if (d.at(k + 1) == '@') {
               // escaped @ => copy it (is unescaped later)

               k += 2;
               resExpr += "@@"; // we unescape these later

            } else if (d.at(k + 1) == '-') {
               // no-rescan marker
               k += 2;
               resExpr += "@-";

            } else {
               // argument marker, read the argument number
               QString key = "@";

               bool hash = false;
               int len2  = k - 1;

               // search for ## backward
               if (len2 >= 0 && d.at(len2) == '\"') {
                  len2--;
               }

               while (len2 >= 0 && d.at(len2) == ' ') {
                  len2--;
               }

               if (len2 > 0 && d.at(len2) == '#' && d.at(len2 - 1) == '#') {
                  hash = true;
               }

               k++;

               // scan the number
               while (k < d.length() && d.at(k) >= '0' && d.at(k) <= '9') {
                  key += d.at(k++);
               }

               if (! hash) {
                  // search for ## forward
                  len2 = k;

                  if (len2 < d.length() && d.at(len2) == '\"') {
                     len2++;
                  }

                  while (len2 < d.length() && d.at(len2) == ' ') {
                     len2++;
                  }

                  if (len2 < d.length() - 1 && d.at(len2) == '#' && d.at(len2 + 1) == '#') {
                     hash = true;
                  }
               }

               if (key.length() > 1 && argTable.contains(key)) {
                  QString substArg = argTable.value(key);

                  // only if no ## operator is before or after the argument marker, then do macro expansion
                  if (! hash) {
                     expandExpression(substArg, 0, 0);
                  }

                  if (inString) {
                     // if the marker is inside a string (because a # was put
                     // before the macro name), escape " and \ characters
                     resExpr += stringize(substArg);

                  } else {
                     if (hash && substArg.isEmpty()) {
                        // empty argument will be remove later on
                        resExpr += "@E";

                     } else if (g_nospaces) {
                        resExpr += substArg;

                     } else {
                        resExpr += " " + substArg + " ";
                     }
                  }
               }
            }

         } else {
            // no marker, just copy

            if (! inString && d.at(k) == '\"') {
               inString = true; // entering a literal string

            } else if (inString && d.at(k) == '\"' && (d.at(k - 1) != '\\' || d.at(k - 2) == '\\')) {
               inString = false; // leaving a literal string
            }
            resExpr += d.at(k++);
         }
      }

      len    = j - pos;
      result = resExpr;

      return true;
   }

   return false;
}

/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QString &expr, int p, int *l)
{
   int n;

   while (p < expr.length()) {
      QChar c = expr.at(p++);

      if (c.isNumber()) {
         // skip number
         while (p < expr.length() && isId(expr.at(p))) {
            p++;
         }

      } else if (c.isLetter() || c == '_') {
         // read id
         n = p - 1;

         while (p < expr.length() && isId(expr.at(p))) {
            p++;
         }

         *l = p - n;
         return n;

      } else if (c == '"') {
         // skip string

         QChar ppc = 0;
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);
         }

         while (p < expr.length() && (c != '"' || (pc == '\\' && ppc != '\\')))
            // continue as long as no " is found, but ignoring \", but not \\"
         {
            ppc = pc;
            pc = c;
            c = expr.at(p);
            p++;
         }

         if (p < expr.length()) {
            ++p;   // skip closing quote
         }

      } else if (c == '/') { // skip C Comment
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);

            if (c == '*') { // Start of C comment
               p++;

               while (p < expr.length() && !(pc == '*' && c == '/')) {
                  pc = c;
                  c = expr.at(p++);
               }
            }
         }

      }
   }

   return -1;
}

/*! preforms recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 *  If \a expandAll is \c true then all macros in the expression are
 *  expanded, otherwise only the first is expanded.
 */
static void expandExpression(QString &expr, QString *rest, int pos)
{
   QString macroName;
   QString expMacro;

   bool definedTest = false;
   int i = pos;
   int l;
   int p;
   int len;

   while ((p = getNextId(expr, i, &l)) != -1) {
      // search for an macro name

      bool replaced = false;
      macroName = expr.mid(p, l);

      if (p < 2 || ! (expr.at(p - 2) == '@' && expr.at(p - 1) == '-')) {
         // no-rescan marker?

         if (! g_expandedDict->contains(macroName)) {

            // expand macro
            QSharedPointer<A_Define> def = DefineManager::instance().isDefined(macroName);

            if (definedTest) {
               // macro name was found after defined

               if (def) {
                  expMacro = " 1 ";
               } else {
                  expMacro = " 0 ";
               }

               replaced = true;
               len = l;
               definedTest = false;

            } else if (def && def->nargs == -1) {
               // simple macro
               // substitute the definition of the macro

               if (g_nospaces) {
                  expMacro = def->m_definition.trimmed();
               } else {
                  expMacro = " " + def->m_definition.trimmed() + " ";
               }

               replaced = true;
               len = l;

            } else if (def && def->nargs >= 0) {
               // function macro
               replaced = replaceFunctionMacro(expr, rest, p + l, len, def, expMacro);
               len += l;

            } else if (macroName == "defined") {
               definedTest = true;

            }

            if (replaced) {
               // expand the macro and rescan the expression

               //printf("replacing `%s'->`%s'\n",expr.mid(p,len).data(),expMacro.data());
               QString resultExpr = expMacro;
               QString restExpr   = expr.right(expr.length() - len - p);

               processConcatOperators(resultExpr);

               if (def && !def->nonRecursive) {
                  g_expandedDict->insert(macroName, def);
                  expandExpression(resultExpr, &restExpr, 0);
                  g_expandedDict->remove(macroName);
               }

               expr = expr.left(p) + resultExpr + restExpr;
               i    = p;

            } else {
               // move to the next macro name
               i = p + l;
            }

         } else { // move to the next macro name
            expr = expr.left(p) + "@-" + expr.right(expr.length() - p);
            i = p + l + 2;

         }

      } else { // no re-scan marker found, skip the macro name
         i = p + l;
      }
   }
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
QString removeIdsAndMarkers(const QString &s)
{
   const QChar *p = s.constData();
   const QChar *ptr = p;
   QChar c;

   bool inNum = false;
   QString result;

   if (p) {

      while ((c = *p) != 0) {
         // replace @@ with @ and remove @E

         if (c == '@') {

            if (*(p + 1) == '@') {
               result += c;

            } else if (*(p + 1) == 'E') {
               // skip
            }

            p += 2;

         } else if (c.isNumber()) {
            // number

            result += c;
            p++;
            inNum = true;

         } else if (c == 'd' && ! inNum) {
            // identifier starting with a `d'

            if (s.mid(p - ptr, 8) == "defined " || s.mid(p - ptr, 8) == "defined(") {
               // defined keyword, skip defined
               p += 7;

            } else {
               result += "0L";
               p++;

               while ((c = *p) != 0 && isId(c)) {
                  p++;
               }
            }

         } else if ((c.isLetter() || c == '_') && ! inNum) {
            // replace identifier with 0L
            result += "0L";
            p++;

            while ((c = *p) != 0 && isId(c)) {
               p++;
            }

            if (*p == '(') { // undefined function macro
               p++;
               int count = 1;

               while ((c = *p++) != 0 ) {
                  if (c == '(') {
                     count++;

                  } else if (c == ')') {
                     count--;
                     if (count == 0) {
                        break;
                     }

                  } else if (c == '/') {
                     QChar pc = c;
                     c = *++p;

                     if (c == '*') { // start of C comment
                        while (*p != 0 && ! (pc == '*' && c == '/')) {
                           // search end of comment
                           pc = c;
                           c = *++p;
                        }
                        p++;
                     }
                  }
               }
            }

         } else if (c == '/') {
            // skip C comments

            QChar pc = c;
            c = *++p;

            if (c == '*') {
               // start of C comment

               while (*p != 0 && ! (pc == '*' && c == '/')) {
                  // search end of comment
                  pc = c;
                  c = *++p;
               }
               p++;

            } else { // not comment but division
               result += pc;
               goto nextChar;
            }

         } else {

         nextChar:
            result += c;
            QChar lc = c.toLower();

            if (! isId(lc) && lc != '.' /*&& lc!='-' && lc!='+'*/) {
               inNum = false;
            }
            p++;
         }
      }
   }

   return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption:
 *   \a s only contains pairs of @@'s
 */
QString removeMarkers(const QString &s)
{
   const QChar *p = s.constData();
   QChar c;

   QString result;

   while ((c = *p) != 0) {
      switch (c.unicode()) {
         case '@': { // replace @@ with @
            if (*(p + 1) == '@') {
               result += c;
            }
            p += 2;
         }
         break;

         case '/': { // skip C comments
            result  += c;
            QChar pc = c;
            c = *++p;

            if (c == '*') { // start of C comment

               while (*p != 0  && !(pc == '*' && c == '/')) { // search end of comment
                  if (*p == '@' && *(p + 1) == '@') {
                     result += c;
                     p++;

                  } else {
                     result += c;
                  }

                  pc = c;
                  c  = *++p;
               }

               if (*p != 0) {
                  result += c;
                  p++;
               }
            }
         }
         break;

         case '"': { // skip string literals
            result += c;
            QChar pc = c;
            c = *++p;

            while (*p != 0 && (c != '"' || pc == '\\')) { // no end quote
               result += c;
               c = *++p;
            }
            if (*p != 0) {
               result += c;
               p++;
            }
         }
         break;

         case '\'': { // skip char literals
            result += c;
            QChar pc = c;
            c = *++p;

            while (*p != 0 && (c != '\'' || pc == '\\')) {
               // no end quote
               result += c;
               c = *++p;
            }

            if (*p != 0) {
               result += c;
               p++;
            }
         }
         break;

         default: {
            result += c;
            p++;
         }
         break;
      }
   }

   return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */
bool computeExpression(const QString &expr)
{
   QString e = expr;

   expandExpression(e, 0, 0);
   e = removeIdsAndMarkers(e);

   if (e.isEmpty()) {
      return false;
   }

   bool retval = parseconstexp(g_yyFileName, g_yyLineNr, e);

   return retval;
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

QString expandMacro(const QString &name)
{
   QString n = name;

   expandExpression(n, 0, 0);
   n = removeMarkers(n);

   return n;
}

QSharedPointer<A_Define> newDefine()
{
   QSharedPointer<A_Define> def = QMakeShared<A_Define>();

   def->m_name       = g_defName;
   def->m_definition = g_defText.trimmed();
   def->nargs        = g_defArgs;
   def->m_fileName   = g_yyFileName;
   def->fileDef      = g_yyFileDef;
   def->lineNr       = g_yyLineNr - g_yyMLines;
   def->columnNr     = g_yyColNr;
   def->varArgs      = g_defVarArgs;

   if (! def->m_name.isEmpty() && Doxy_Globals::expandAsDefinedDict.contains(def->m_name)) {
      def->isPredefined = true;
   }

   return def;
}

void addDefine()
{
   if (g_skip) {
      return;   // do not add this define as it is inside a
   }

   // conditional section (cond command) that is disabled
   if (! Doxy_Globals::gatherDefines) {
      return;
   }

   QSharedPointer<MemberDef> md = QMakeShared<MemberDef>(g_yyFileName, g_yyLineNr - g_yyMLines, g_yyColNr,
               "#define", g_defName, g_defArgsStr, "", Public, Normal, false, Member,
               MemberType_Define, ArgumentList(), ArgumentList());

   if (! g_defArgsStr.isEmpty()) {
      ArgumentList argList;

      argList = stringToArgumentList(g_defArgsStr);
      md->setArgumentList(argList);
   }

   int l = g_defLitText.indexOf('\n');

   if (l > 0 && g_defLitText.left(l).trimmed() == "\\") {
      // strip first line if it only contains a slash
      g_defLitText = g_defLitText.right(g_defLitText.length() - l - 1);

   } else if (l > 0) {
      // align the items on the first line with the items on the second line
      int k = l + 1;

      const QChar *p = g_defLitText.data() + k;
      QChar c;

      while ((c = *p++) != 0 && (c == ' ' || c == '\t')) {
         k++;
      }

      g_defLitText = g_defLitText.mid(l + 1, k - l - 1) + g_defLitText.trimmed();
   }
   md->setInitializer(g_defLitText.trimmed());

   md->setFileDef(g_inputFileDef);
   md->setDefinition("#define " + g_defName);

   QSharedPointer<MemberName> mn = Doxy_Globals::functionNameSDict.find(g_defName);

   if (! mn) {
      mn = QMakeShared<MemberName>(g_defName);
      Doxy_Globals::functionNameSDict.insert(g_defName, mn);
   }

   mn->append(md);

   if (g_yyFileDef) {
      g_yyFileDef->insertMember(md);
   }
}

static inline void outputChar(QChar c)
{
   if (g_includeStack.isEmpty() || g_curlyCount > 0) {
      g_outputBuf += c;
   }
}

static inline void outputArray(const QString &a, int len)
{
   if (g_includeStack.isEmpty() || g_curlyCount > 0) {
      g_outputBuf += a.mid(0, len);
   }
}

static void readIncludeFile(const QString &inc)
{
   static bool searchIncludes = Config::getBool("search-includes");
   uint i = 0;

   // find the start of the include file name
   while (i < inc.length() && (inc.at(i) == ' ' || inc.at(i) == '"' || inc.at(i) == '<')) {
      i++;
   }
   uint s = i;

   // was it a local include?
   bool localInclude = s > 0 && inc.at(s - 1) == '"';

   // find the end of the include file name
   while (i < inc.length() && inc.at(i) != '"' && inc.at(i) != '>') {
      i++;
   }

   if (s < inc.length() && i > s) {
      // valid include file name found

      // extract include path+name
      QString incFileName = inc.mid(s, i - s).trimmed();

      QString dosExt = incFileName.right(4);
      if (dosExt == ".exe" || dosExt == ".dll" || dosExt == ".tlb") {
         // skip imported binary files (e.g. M$ type libraries)
         return;
      }

      QString oldFileName = g_yyFileName;

      QSharedPointer<FileDef> oldFileDef = g_yyFileDef;
      int oldLineNr = g_yyLineNr;

      // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
      QString absIncFileName = incFileName;
      {
         QFileInfo fi(g_yyFileName);

         if (fi.exists()) {
            QString absName = fi.absolutePath() + "/" + incFileName;

            QFileInfo fi2(absName);
            if (fi2.exists()) {
               absIncFileName = fi2.absoluteFilePath();

            } else if (searchIncludes) {
               const QStringList includePath = Config::getList("include-path");

               for (auto s : includePath) {

                  QFileInfo fi(s);

                  if (fi.exists() && fi.isDir()) {
                     QString absName = fi.absoluteFilePath() + "/" + incFileName;

                     QFileInfo fi2(absName);
                     if (fi2.exists()) {
                        absIncFileName = fi2.absoluteFilePath();
                        break;
                     }

                  }

               }
            }

         }
      }

      DefineManager::instance().addInclude(g_yyFileName, absIncFileName);
      DefineManager::instance().addFileToContext(absIncFileName);

      // findFile will overwrite g_yyFileDef if found
      QSharedPointer<FileState> fs;
      bool alreadyIncluded = false;

      if ((fs = findFile(incFileName, localInclude, alreadyIncluded))) {
         // see if the include file can be found

         if (oldFileDef) {
            // add include dependency to the file in which the #include was found
            bool ambig;

            // change to absolute name
            QSharedPointer<FileDef> incFd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            QSharedPointer<FileDef> temp;
            if (ambig) {
               temp = QSharedPointer<FileDef>();
            } else {
               temp = incFd;
            }

            oldFileDef->addIncludeDependency(temp, incFileName, localInclude, g_isImported, false);

            // add included by dependency
            if (g_yyFileDef) {
               g_yyFileDef->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, g_isImported);
            }

         } else if (g_inputFileDef) {
            g_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, g_isImported, true);

         }

         fs->bufState = YY_CURRENT_BUFFER;
         fs->lineNr   = oldLineNr;
         fs->fileName = oldFileName;

         // push the state on the stack
         g_includeStack.push(fs);

         // set the scanner to the include file

         // Deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# 1 \"%1\" 1\n").arg(QString(g_yyFileName));
         outputArray(lineStr, lineStr.length());

         DBG_CTX((stderr, "Switching to include file %s\n", csPrintable(incFileName)));
         g_expectGuard = true;
         g_inputBuf    = fs->fileBuf;
         g_inputBufPos = 0;

         preYY_switch_to_buffer(preYY_create_buffer(0, YY_BUF_SIZE));

      } else {

         if (oldFileDef) {
            bool ambig;

            // change to absolute name for bug 641336
            QSharedPointer<FileDef> fd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            // add include dependency to the file in which the #include was found
            oldFileDef->addIncludeDependency(ambig ? QSharedPointer<FileDef>() : fd, incFileName, localInclude, g_isImported, false);

            // add included by dependency
            if (fd) {
               fd->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, g_isImported);
            }

         } else if (g_inputFileDef) {
            g_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, g_isImported, true);
         }

         if (Debug::isFlagSet(Debug::Preprocessor)) {
            if (alreadyIncluded) {
               Debug::print(Debug::Preprocessor, 0, "#include %s: already included, skipping...\n", csPrintable(incFileName));
            } else {
               Debug::print(Debug::Preprocessor, 0, "#include %s: not found, skipping...\n", csPrintable(incFileName));
            }
         }

         if (g_curlyCount > 0 && !alreadyIncluded) { // failed to find #include inside { ... }
            warn(g_yyFileName, g_yyLineNr, "include file %s was not found, check the value of INCLUDE_PATH", csPrintable(incFileName));
         }
      }
   }
}

static void startCondSection(const QString &sectId)
{
   CondParser prs;

   bool expResult = prs.parse(g_yyFileName, g_yyLineNr, sectId);
   g_condStack.push( QMakeShared<CondCtx>(g_yyLineNr, sectId, g_skip) );

   if (! expResult) {
      g_skip = true;
   }
}

static void endCondSection()
{
   if (g_condStack.isEmpty()) {
      g_skip = false;

   } else {
      QSharedPointer<CondCtx> ctx = g_condStack.pop();
      g_skip = ctx->skip;
   }
}

static void forceEndCondSection()
{
   while (! g_condStack.isEmpty()) {
      g_condStack.pop();
   }

   g_skip = false;
}

static QString escapeAt(const QString &text)
{
   QString result;

   for (auto c : text) {
      if (c == '@') {
         result += "@@";

      } else {
         result += c;
      }
   }

   return result;
}

static char resolveTrigraph(char c)
{
   switch (c) {
      case '=':
         return '#';

      case '/':
         return '\\';

      case '\'':
         return '^';

      case '(':
         return '[';

      case ')':
         return ']';

      case '!':
         return '|';

      case '<':
         return '{';

      case '>':
         return '}';

      case '-':
         return '~';
   }

   return '?';
}

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size)   result=yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int c = 0;

   while (g_inputBuf[g_inputBufPos] != 0) {

      QString tmp1    = g_inputBuf.at(g_inputBufPos);
      QByteArray tmp2 = tmp1.toUtf8();

      if (c + tmp2.length() >= max_size)  {
         // buffer is full
         break;
      }

      c += tmp2.length();

      for (auto letters : tmp2) {
         *buf = letters;
          buf++;
      }

      g_inputBufPos++;
   }

   return c;
}

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define CopyStringFtn 8
#define Include 9
#define IncludeID 10
#define EndImport 11
#define DefName 12
#define DefineArg 13
#define DefineText 14
#define SkipCPPBlock 15
#define Ifdef 16
#define Ifndef 17
#define SkipCComment 18
#define ArgCopyCComment 19
#define CopyCComment 20
#define SkipVerbatim 21
#define SkipCPPComment 22
#define RemoveCComment 23
#define RemoveCPPComment 24
#define Guard 25
#define DefinedExpr1 26
#define DefinedExpr2 27
#define SkipDoubleQuote 28
#define SkipSingleQuote 29
#define UndefName 30
#define IgnoreLine 31
#define FindDefineArgs 32
#define ReadString 33
#define CondLineC 34
#define CondLineCpp 35
#define SkipCond 36

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

int preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( preYYtext, preYYleng, 1, preYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1398 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6488 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP

	YY_BREAK
case 2:
YY_RULE_SETUP

	YY_BREAK
case 3:
YY_RULE_SETUP

	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // Trigraph
      unput(resolveTrigraph(preYYtext[2]));
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      BEGIN(Command);
      g_yyColNr  += preYYleng;
      g_yyMLines = 0;
   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
      BEGIN(CopyLine);
   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
      // constructors?
      int i;

      for (i = preYYleng - 1; i >= 0; i--) {
         unput(preYYtext[i]);
      }

      BEGIN(CopyLine);
   }
	YY_BREAK
case 8:
/* rule 8 can match eol */
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{

      // function list macro with one (...) argument, e.g. for K_GLOBAL_STATIC_WITH_ARGS
      // function like macro

      static bool skipFuncMacros = Config::getBool("skip-function-macros");

      QString name = QString::fromUtf8(preYYtext);
      name = name.left(name.indexOf('(')).trimmed();

      QSharedPointer<A_Define> def;

      if (skipFuncMacros && name != "Q_PROPERTY" && ! ( (g_includeStack.isEmpty() || g_curlyCount > 0) && g_macroExpansion &&
                  (def = DefineManager::instance().isDefined(name)) && (! g_expandOnlyPredef || def->isPredefined)) ) {

         outputChar('\n');
         g_yyLineNr++;

      } else {
         // do not skip

         for (int i = preYYleng - 1; i >= 0; i--) {
            unput(preYYtext[i]);
         }

         BEGIN(CopyLine);
      }
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_yyLineNr += text.count('\n');
      outputArray(text, text.length());
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (g_includeStack.isEmpty())  {
         g_curlyCount++;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (g_includeStack.isEmpty() && g_curlyCount > 0)  {
         g_curlyCount--;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyString );
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      if (getLanguageFromFileName(g_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);

      BEGIN( CopyStringFtn );
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_expectGuard = false;
      QSharedPointer<A_Define> def;

      if ((g_includeStack.isEmpty() || g_curlyCount > 0) && g_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                  (! g_expandOnlyPredef || def->isPredefined)) {

         // fount it
         g_roundCount = 0;
         g_defArgsStr = text;

         if (def->nargs == -1) {
            // no function macro

            QString result = def->isPredefined ? def->m_definition : expandMacro(g_defArgsStr);
            outputArray(result, result.length());

         } else {
            // zero or more arguments

            g_findDefArgContext = CopyLine;
            BEGIN(FindDefineArgs);

         }

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((g_includeStack.isEmpty() || g_curlyCount > 0) && g_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                   def->nargs == -1 && (! g_expandOnlyPredef || def->isPredefined)) {

            QString result = def->isPredefined ? def->m_definition : expandMacro(text);
            outputArray(result, result.length());

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 26:
/* rule 26 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      //  strip line continuation characters
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      g_yyLineNr++;
      g_yyColNr = 1;
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      g_defArgsStr += '(';
      g_roundCount++;
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      g_defArgsStr += ')';
      g_roundCount--;

      if (g_roundCount == 0) {
         QString result = expandMacro(g_defArgsStr);

         if (g_findDefArgContext == CopyLine) {
            outputArray(result, result.length());
            BEGIN(g_findDefArgContext);

         } else {
            readIncludeFile(result);
            g_nospaces = false;
            BEGIN(Start);
         }
      }
   }
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("       {
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
   }
  */
case 31:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
    }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
      BEGIN(ArgCopyCComment);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text[0];
      BEGIN(ReadString);
   }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{
      g_defArgsStr += ' ';
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      g_defArgsStr += "@@";
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text[0];
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      g_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      g_defArgsStr += QString::fromUtf8(preYYtext);
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
{
      g_defArgsStr += ' ';
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      g_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text[0];
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      g_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      g_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text[0];
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_isImported = text[1] == 'm';

      if (g_macroExpansion) {
         BEGIN(IncludeID);
      }
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_isImported = text[1] == 'm';
      g_incName = text[text.length() - 1];
      BEGIN(Include);
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      g_yyColNr += preYYleng;
      BEGIN(DefName);
   }
	YY_BREAK
case 48:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr.resize(0);
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 49:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr.resize(0);
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 50:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr = "! ";
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 51:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr = "! ";
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 52:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr.resize(0);
      BEGIN(Guard);
   }
	YY_BREAK
case 53:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         g_guardExpr.resize(0);
         BEGIN(Guard);

      } else {
         g_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      if (otherCaseDone()) {
         g_ifcount = 0;
         BEGIN(SkipCPPBlock);

      } else {
         setCaseDone(true);
      }
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
{
      BEGIN(UndefName);
   }
	YY_BREAK
case 56:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         g_guardExpr.resize(0);
         BEGIN(Guard);
      }
   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      decrLevel();
   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      g_yyLineNr++;
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      g_expectGuard = false;
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(IgnoreLine);
   }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
   }
	YY_BREAK
case 62:
YY_RULE_SETUP

	YY_BREAK
case 63:
YY_RULE_SETUP
{
      g_yyColNr += preYYleng;
   }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((def = DefineManager::instance().isDefined(text)) && ! def->nonRecursive) {
         def->undef = true;
      }
      BEGIN(Start);
   }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_guardExpr += ' ';
      g_yyLineNr++;
   }
	YY_BREAK
case 66:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 67:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 68:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_guardExpr += text;
   }
	YY_BREAK
case 69:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_guardExpr += text[0];
   }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{
      unput(*preYYtext);

      bool guard = computeExpression(g_guardExpr);
      setCaseDone(guard);

      if (guard) {
         BEGIN(Start);

      } else {
         g_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 72:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || g_guardName == text) {
         g_guardExpr+=" 1L ";
      } else {
         g_guardExpr+=" 0L ";
      }

      g_lastGuardName = text;
      BEGIN(Guard);
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || g_guardName == text){
         g_guardExpr+=" 1L ";
      } else {
         g_guardExpr+=" 0L ";
      }

      g_lastGuardName = text;
   }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{
      // should not happen, handle anyway

      g_yyLineNr++;
      g_ifcount = 0;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      BEGIN(Guard);
   }
	YY_BREAK
case 76:
YY_RULE_SETUP

	YY_BREAK
case 77:
YY_RULE_SETUP
{
      BEGIN(SkipCommand);
   }
	YY_BREAK
case 78:
/* rule 78 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 80:
YY_RULE_SETUP

	YY_BREAK
case 81:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_ifcount++;
   }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
      // printf("Else! g_ifcount=%d otherCaseDone=%d\n",g_ifcount,otherCaseDone());

      if (g_ifcount == 0 && ! otherCaseDone()) {
         setCaseDone(true);
         BEGIN(Start);
      }
   }
	YY_BREAK
case 83:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (g_ifcount == 0)  {

         if (! otherCaseDone()) {
            g_guardExpr.resize(0);
            g_lastGuardName.resize(0);
            BEGIN(Guard);

         } else {
            BEGIN(SkipCPPBlock);
         }
      }
   }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
      g_expectGuard = false;
      decrLevel();

      if (--g_ifcount < 0) {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(SkipLine);
   }
	YY_BREAK
case 87:
YY_RULE_SETUP

	YY_BREAK
case 88:
YY_RULE_SETUP

	YY_BREAK
case 89:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      BEGIN(SkipString);
   }
	YY_BREAK
case 91:
YY_RULE_SETUP

	YY_BREAK
case 92:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
   }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
      g_lastCPPContext = YY_START;
      BEGIN(RemoveCPPComment);
   }
	YY_BREAK
case 94:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
   }
	YY_BREAK
case 95:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      g_lastCContext=YY_START;
      BEGIN(RemoveCComment);
   }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 101:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_nospaces   = true;
      g_roundCount = 0;
      g_defArgsStr = text;
      g_findDefArgContext = IncludeID;
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_nospaces = true;
      readIncludeFile(expandMacro(text));
      BEGIN(Start);
   }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_incName += text;
      readIncludeFile(g_incName);

      if (g_isImported) {
         BEGIN(EndImport);
      } else {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(Start);
   }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
      // define with argument

      g_argDict = QMakeShared<QHash<QString, int>>();

      g_defArgs = 0;
      g_defArgsStr.resize(0);
      g_defText.resize(0);
      g_defLitText.resize(0);

      g_defName    = QString::fromUtf8(preYYtext);
      g_defVarArgs = false;
      g_defExtraSpacing.resize(0);
      BEGIN(DefineArg);
   }
	YY_BREAK
case 108:
/* rule 108 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // special case: define with 1 -> can be "guard"

      g_argDict = QSharedPointer<QHash<QString, int>>();

      g_defArgs = -1;
      g_defArgsStr.resize(0);

      g_defName = QString::fromUtf8(preYYtext);
      g_defName = g_defName.left(g_defName.length() - 1).trimmed();
      g_defVarArgs = false;

      if (g_curlyCount > 0 || g_defName != g_lastGuardName || ! g_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + g_defName;
         outputArray(tmp, tmp.length());

         g_quoteArg      = false;
         g_insideComment = false;
         g_lastGuardName.resize(0);
         g_defText    = "1";
         g_defLitText = "1";
         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         g_defText.resize(0);
         g_defLitText.resize(0);
         BEGIN(Start);
      }

      g_expectGuard = false;
   }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{
      // empty define
      QString text = QString::fromUtf8(preYYtext);

      g_argDict = QSharedPointer<QHash<QString, int>>();

      g_defArgs = -1;
      g_defName = text;

      g_defArgsStr.resize(0);
      g_defText.resize(0);
      g_defLitText.resize(0);
      g_defVarArgs = false;

      if (g_curlyCount > 0 || g_defName != g_lastGuardName || ! g_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + g_defName;
         outputArray(tmp, tmp.length());

         g_quoteArg      = false;
         g_insideComment = false;

         if (g_insideCS) {
            g_defText="1"; // for C#, use "1" as define text
         }

         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         g_guardName = text;
         g_lastGuardName.resize(0);
         BEGIN(Start);
      }

      g_expectGuard = false;
   }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
      // define with content
      QString text = QString::fromUtf8(preYYtext);

      g_argDict = QSharedPointer<QHash<QString, int>>();

      g_defArgs = -1;
      g_defArgsStr.resize(0);

      g_defText.resize(0);
      g_defLitText.resize(0);
      g_defName    = text;
      g_defVarArgs = false;

      QString tmp = "#define " + g_defName + g_defArgsStr;
      outputArray(tmp, tmp.length());

      g_quoteArg      = false;
      g_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{
      g_defExtraSpacing += "\n";
      g_yyLineNr++;
   }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
   }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
   }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;

      QString tmp = "#define " + g_defName + g_defArgsStr + g_defExtraSpacing;
      outputArray(tmp, tmp.length());

      g_quoteArg      = false;
      g_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
      // Variadic macro
      g_defVarArgs = true;
      g_defArgsStr +=  QString::fromUtf8(preYYtext);

      g_argDict->insert("__VA_ARGS__", g_defArgs);
      g_defArgs++;
   }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;

      g_defVarArgs = text.endsWith("...");

      if (g_defVarArgs)  {
         // strip ellipsis
         text = text.left(text.length() - 3);
      }

      text = text.trimmed();

      g_argDict->insert(text, g_defArgs);
      g_defArgs++;
   }
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"  {
      g_defText+=preYYtext;
      g_defLitText+=preYYtext;
      g_insideComment=true;
   }

<DefineText>"* /"          {
      g_defText+=preYYtext;
      g_defLitText+=preYYtext;
      g_insideComment=false;
   }
  */
case 117:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
       QString text = QString::fromUtf8(preYYtext);

      g_defText   += text;
      g_defLitText+= text;
      g_lastCContext = YY_START;
      g_commentCount = 1;
      BEGIN(CopyCComment);
   }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      g_lastCPPContext  = YY_START;
      g_defLitText     += ' ';
      BEGIN(SkipCPPComment);
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (text[0] == '/') {
         outputChar('/');
      }

      outputChar('*');
      outputChar('/');

      if (--g_commentCount <= 0) {

         if (g_lastCContext == Start) {
            // small hack to make sure that ^... rule will
            // match when going to Start... Example: "/*...*/ some stuff..."

            YY_CURRENT_BUFFER->yy_at_bol = 1;
         }

         BEGIN(g_lastCContext);
      }
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');

      // g_commentCount++;
   }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         g_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         g_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());
      g_yyLineNr += text.count('\n');
   }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());

      g_yyLineNr += text.count('\n');
      g_fenceSize = 0;

      if (text[1] == 'f') {
         g_blockName = "f";

      } else {
         QString bn = text.mid(1);
         int i = bn.indexOf('{');

         // for \code{.c}
         if (i != -1) {
            bn = bn.left(i);
         }

         g_blockName = bn.trimmed();
      }
      BEGIN(SkipVerbatim);
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      // escaped @cond
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
      // conditional section
      g_ccomment = true;
      g_condCtx  = YY_START;
      BEGIN(CondLineCpp);
   }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
      // conditional section
      g_ccomment = false;
      g_condCtx  = YY_START;
      BEGIN(CondLineC);
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      startCondSection(text);

      if (g_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/", 2);
            g_ccomment = true;

         } else {
            g_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(g_condCtx);

      }
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      // non-guard character
      unput(*preYYtext);
      startCondSection(" ");

      if (g_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/",2);
            g_ccomment = true;

         } else {
            g_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(g_condCtx);
      }
   }
	YY_BREAK
case 132:
/* rule 132 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // no guard
      if (YY_START == SkipCComment) {
         g_ccomment=true;
         // end C comment
         outputArray("*/",2);

      } else {
         g_ccomment = false;
      }

      g_condCtx = YY_START;
      startCondSection(" ");
      BEGIN(SkipCond);
   }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
      g_ccomment = false;
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      g_ccomment = true;
   }
	YY_BREAK
case 138:
/* rule 138 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! g_skip) {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 139:
/* rule 139 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      bool oldSkip = g_skip;
      endCondSection();

      if (oldSkip && ! g_skip) {
         if (g_ccomment) {
            outputArray("/** ",4);

            // */ (editor syntax fix)
         }

         BEGIN(g_condCtx);
      }
   }
	YY_BREAK
case 140:
/* rule 140 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      bool oldSkip = g_skip;
      endCondSection();

      if (oldSkip && ! g_skip)  {
         BEGIN(g_condCtx);
      }
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      /* end of verbatim block */

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (text[1] == 'f' && g_blockName == "f") {
         BEGIN(SkipCComment);

      } else if (text.mid(4) == g_blockName) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (g_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (g_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
      outputChar(*preYYtext);
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defLitText += text;
      g_defText    += escapeAt(text);
   }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defLitText += text;

      outputChar('\n');
      g_defText += " ";
      g_yyLineNr++;
      g_yyMLines++;
   }
	YY_BREAK
case 150:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defLitText += text;
      g_defText    += text;
      BEGIN(g_lastCContext);
   }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_yyLineNr++;
      outputChar('\n');
      g_defLitText += text;
      g_defText+=' ';
   }
	YY_BREAK
case 152:
YY_RULE_SETUP
{
      // see bug 594021 for a usecase for this rule
      if (g_lastCContext == SkipCPPBlock) {
         BEGIN(SkipCommand);

      } else {
         REJECT;
      }
   }
	YY_BREAK
case 153:
YY_RULE_SETUP
{
      BEGIN(g_lastCContext);
   }
	YY_BREAK
case 154:
YY_RULE_SETUP

	YY_BREAK
case 155:
YY_RULE_SETUP

	YY_BREAK
case 156:
YY_RULE_SETUP

	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 158:
YY_RULE_SETUP

	YY_BREAK
case 159:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
{
      unput(*preYYtext);
      BEGIN(g_lastCPPContext);
   }
	YY_BREAK
case 161:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');
   }
	YY_BREAK
case 162:
YY_RULE_SETUP
{
      outputChar('/');
      outputChar('/');
   }
	YY_BREAK
case 163:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 164:
YY_RULE_SETUP
{
      outputChar(*preYYtext);
   }
	YY_BREAK
case 165:
YY_RULE_SETUP

	YY_BREAK
case 166:
YY_RULE_SETUP

	YY_BREAK
case 167:
YY_RULE_SETUP

	YY_BREAK
case 168:
YY_RULE_SETUP

	YY_BREAK
case 169:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      g_quoteArg   = true;
      g_defLitText += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 170:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defLitText += text;

      if (g_quoteArg) {
         g_defText+="\"";
      }

      if (g_defArgs > 0) {
         auto iter = g_argDict->find(text);

         if (iter != g_argDict->end()) {
            int n = iter.value();

            g_defText += '@';

            QString numStr = QString("%1").arg(n);
            g_defText += numStr;

         } else {
            g_defText += text;

         }

      } else {
         g_defText += text;
      }

      if (g_quoteArg) {
         g_defText += "\"";
      }

      g_quoteArg = false;
   }
	YY_BREAK
case 171:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defLitText += text;
      g_defText    += text;
   }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defLitText += text;
      outputChar('\n');
      g_defText += ' ';
      g_yyLineNr++;
      g_yyMLines++;
   }
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QString comment = extractTrailingComment(g_defLitText);
      g_defLitText += text;

      if (! comment.isEmpty()) {
         outputArray(comment, comment.length());
         g_defLitText = g_defLitText.left(g_defLitText.length() - comment.length() - 1);
      }

      outputChar('\n');

      QSharedPointer<A_Define> def;

      if (g_includeStack.isEmpty() || g_curlyCount > 0) {
         addDefine();
      }

      def = DefineManager::instance().isDefined(g_defName);

      if (def == nullptr)  {
         // new define

         QSharedPointer<A_Define> nd = newDefine();
         DefineManager::instance().addDefine(g_yyFileName, nd);

      } else if (def) {
         // name already exists

         if (def->undef) {
            // undefined name
            def->undef        = false;
            def->m_name       = g_defName;
            def->m_definition = g_defText.trimmed();
            def->nargs        = g_defArgs;
            def->m_fileName   = g_yyFileName;
            def->lineNr       = g_yyLineNr - g_yyMLines;
            def->columnNr     = g_yyColNr;
         }
      }

      g_argDict = QSharedPointer<QHash<QString, int>>();

      g_yyLineNr++;
      g_yyColNr = 1;
      g_lastGuardName.resize(0);
      BEGIN(Start);
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defText    += ' ';
      g_defLitText += text;
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defText    += "##";
      g_defLitText += text;
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defText     += "@@";
      g_defLitText  += text;
   }
	YY_BREAK
case 177:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;

      if (! g_insideComment) {
         BEGIN(SkipDoubleQuote);
      }
   }
	YY_BREAK
case 178:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;

      if (! g_insideComment) {
         BEGIN(SkipSingleQuote);
      }
   }
	YY_BREAK
case 179:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text;
      g_defLitText += text;
   }
	YY_BREAK
case 180:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text;
      g_defLitText += text;
   }
	YY_BREAK
case 181:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 182:
YY_RULE_SETUP
{
     QString text = QString::fromUtf8(preYYtext);

      g_defText    += text;
      g_defLitText += text;
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 184:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
   }
	YY_BREAK
case 185:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
   }
	YY_BREAK
case 186:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
   }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(CopyStringFtn):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
{
      DBG_CTX((stderr, "End of include file\n"));

      if (g_includeStack.isEmpty()) {
         DBG_CTX((stderr, "Terminating scanner\n"));
         yyterminate();

      } else {
         QSharedPointer<FileState> fs = g_includeStack.pop();

         YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
         preYY_switch_to_buffer(fs->bufState );
         preYY_delete_buffer(oldBuf );

         g_yyLineNr    = fs->lineNr;
         g_inputBuf    = fs->oldFileBuf;
         g_inputBufPos = fs->oldFileBufPos;
         setFileName(fs->fileName);

         DBG_CTX((stderr, "######## FileName %s\n", csPrintable(g_yyFileName)));

         // deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# %1 \"%2\" 2").arg(g_yyLineNr).arg(QString(g_yyFileName));
         outputArray(lineStr, lineStr.length());
      }
   }
	YY_BREAK
case 187:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
case 188:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      if (YY_START == SkipVerbatim || YY_START == SkipCond) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         g_lastCContext = YY_START;
         g_commentCount = 1;

         if (preYYleng == 3) {
            g_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 189:
YY_RULE_SETUP
{
      if (YY_START == SkipVerbatim || YY_START == SkipCond) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         g_lastCPPContext = YY_START;

         if (preYYleng == 3) {
            g_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCPPComment);
      }
   }
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
   }
	YY_BREAK
case 191:
YY_RULE_SETUP
{
      // utf-8 code point
      QString text  = QString::fromUtf8(preYYtext);
      g_expectGuard = false;

      for (QChar c : text) {
         outputChar(c);
      }
   }
	YY_BREAK
case 192:
YY_RULE_SETUP
{
      // catch all
      QString text  = QString::fromUtf8(preYYtext);
      g_expectGuard = false;

      for (QChar c : text) {
         outputChar(c);
      }
   }
	YY_BREAK
case 193:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 62);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1398 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 62;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1398 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1397);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
int preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static int getNextChar(const QString &expr, QString *rest, uint &pos)
{
   if (pos < expr.length()) {
      return expr.at(pos++).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc  = rest->at(0).unicode();
      *rest   = rest->right(rest->length() - 1);
      return cc;

   } else {
      int cc = yyinput();

      return cc;
   }
}

static int getCurrentChar(const QString &expr, QString *rest, uint pos)
{
   if (pos < expr.length()) {
      return expr.at(pos).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc = rest->at(0).unicode();
      return cc;

   } else {
      int cc = yyinput();

      returnCharToStream(cc);
      return cc;
   }
}

static void unputChar(const QString &expr, QString *rest, uint &pos, char c)
{
   if (pos < expr.length()) {
      pos++;

   } else if (rest) {
      char cs[2];
      cs[0] = c;
      cs[1] = '\0';
      rest->prepend(cs);

   } else {

      returnCharToStream(c);
   }
}

void addSearchDir(const QString &dir)
{
   QFileInfo fi(dir);

   if (fi.isDir()) {
      g_pathList.append(fi.absoluteFilePath());
   }
}

void initPreprocessor()
{
   addSearchDir(".");
   g_expandedDict = QMakeShared<DefineDict>();
}

void removePreProcessor()
{
   g_expandedDict = QSharedPointer<DefineDict>();
   g_pathList.clear();

   DefineManager::deleteInstance();
}

QString preprocessFile(const QString &fileName, const QString &input)
{
   printlex(preYY_flex_debug, true, __FILE__, csPrintable(fileName) );

   g_macroExpansion   = Config::getBool("macro-expansion");
   g_expandOnlyPredef = Config::getBool("expand-only-predefined");

   g_skip        = false;
   g_curlyCount  = 0;
   g_nospaces    = false;
   g_inputBufPos = 0;

   g_inputBuf    = input;
   g_outputBuf   = "";

   g_includeStack.clear();
   g_expandedDict->clear();
   g_condStack.clear();

   uint orgOffset = 0;

   setFileName(fileName);

   g_inputFileDef = g_yyFileDef;
   DefineManager::instance().startContext(g_yyFileName);

   static bool firstTime = true;

   if (firstTime)  {
      // add predefined macros
      static QStringList const preDefinedMacros = Config::getList("predefined-macros");

      for (const auto &definedMacro : preDefinedMacros) {

         int posEquals = definedMacro.indexOf('=');
         int posOpen   = definedMacro.indexOf('(');
         int posClose  = definedMacro.indexOf(')');

         bool nonRecursive = posEquals > 0 && definedMacro.at(posEquals - 1) == ':';

         if (posOpen == 0) {
            // no define name
            continue;
         }

         if (posOpen < posEquals && posClose < posEquals && posOpen != -1  &&
                  posClose != -1  &&  posOpen < posClose) {

            // predefined function macro definition

            // regexp matching an id
            QRegExp reId("[a-z_A-Z\x80-\xFF][a-z_A-Z0-9\x80-\xFF]*");
            QHash<QString, int> argDict;

            int index = posOpen + 1;
            int pos;
            int len;
            int count = 0;

            // gather the formal arguments in a dictionary
            while (index < posClose && (pos = reId.indexIn(definedMacro, index))) {
               len = reId.matchedLength();

               if (len > 0) {
                  argDict.insert(definedMacro.mid(pos, len), count++);
                  index = pos + len;

               } else {
                  index++;
               }
            }

            // strip definition part
            QString tmp = definedMacro.right(definedMacro.length() - posEquals - 1);
            QString definition;

            index = 0;

            // substitute all occurrences of formal arguments with their corresponding markers
            while ((pos = reId.indexIn(tmp, index)) != -1) {
               len = reId.matchedLength();

               if (pos > index) {
                  definition += tmp.mid(index, pos - index);
               }

               auto iter = argDict.find(tmp.mid(pos, len));

               if (iter != argDict.end()) {
                  int argIndex = iter.value();

                  QString marker = QString(" @%1 ").arg(argIndex);
                  definition += marker;

               } else {
                  definition += tmp.mid(pos, len);
               }

               index = pos + len;
            }

            if (index < tmp.length()) {
               definition += tmp.mid(index, tmp.length() - index);
            }

            // add define definition to the dictionary of defines for this file
            QString dname = definedMacro.left(posOpen);

            if (! dname.isEmpty()) {
               QSharedPointer<A_Define> def = QMakeShared<A_Define>();

               def->m_name       = dname;
               def->m_definition = definition;
               def->nargs        = count;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = g_yyFileDef;
               def->m_fileName   = fileName;

               DefineManager::instance().addDefine(g_yyFileName, def);
            }

         } else if ((posOpen == -1 || posOpen > posEquals)   &&
                    (posClose == -1 || posClose > posEquals) &&
                    ! definedMacro.isEmpty() && definedMacro.length() > posEquals)  {

            // predefined non-function macro definition
            QSharedPointer<A_Define> def = QMakeShared<A_Define>();

            if (posEquals == -1) {
               // simple define without argument
               def->m_name = definedMacro;
               def->m_definition = "1"; // substitute occurrences by 1 (true)

            } else {
               // simple define with argument
               int ine = posEquals - (nonRecursive ? 1 : 0);
               def->m_name = definedMacro.left(ine);
               def->m_definition = definedMacro.right(definedMacro.length() - posEquals - 1);
            }

            if (! def->m_name.isEmpty()) {
               def->nargs = -1;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = g_yyFileDef;
               def->m_fileName   = fileName;
               DefineManager::instance().addDefine(g_yyFileName, def);
            }
         }
      }
   }

   g_yyLineNr = 1;
   g_yyColNr  = 1;
   g_ifcount  = 0;

   g_levelGuard.clear();

   BEGIN( Start );

   g_expectGuard = determineSection(fileName) == Entry::HEADER_SEC;
   g_guardName.resize(0);
   g_lastGuardName.resize(0);
   g_guardExpr = "";

   preYYlex();

   g_lexInit = true;

   while (! g_condStack.isEmpty()) {
      QSharedPointer<CondCtx> ctx = g_condStack.pop();
      QString sectionInfo = " ";

      if (ctx->sectionId != " ") {
         sectionInfo = QString(" with label %1 ").arg(QString(ctx->sectionId));
      }

      warn(fileName, ctx->lineNr, "Conditional section %s does not have "
           "a corresponding \\endcond command within this file.", csPrintable(sectionInfo));
   }

   // make sure we do not extend a \cond with missing \endcond over multiple files
   forceEndCondSection();

   DefineManager::instance().endContext();
   printlex(preYY_flex_debug, false, __FILE__, csPrintable(fileName));

   return g_outputBuf;
}

void preFreeScanner()
{
   if (g_lexInit) {
      preYYlex_destroy();
   }
}

