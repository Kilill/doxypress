/************************************************************************
*
* Copyright (c) 2014-2022 Barbara Geller & Ansel Sermersheim
* Copyright (c) 1997-2014 Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,int len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 214
#define YY_END_OF_BUFFER 215
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1848] =
    {   0,
      195,  195,  215,  213,  214,    1,  213,  214,  211,  214,
        3,  213,  214,  213,  214,  213,  214,  213,  214,    2,
      213,  214,    6,  213,  214,    1,    6,  213,  214,    6,
      213,  214,    6,  211,  214,    3,    6,  213,  214,    5,
      213,  214,    6,  213,  214,    6,  213,  214,    6,  213,
      214,    6,  213,  214,    6,  213,  214,    2,    6,  213,
      214,   73,  213,  214,    1,   73,  213,  214,   68,  211,
      214,    3,   73,  213,  214,   73,  213,  214,   73,  213,
      214,   70,   73,  213,  214,   70,   73,  213,  214,   70,
       73,  213,  214,   70,   73,  213,  214,   70,   73,  213,

      214,   70,   73,  213,  214,   70,   73,  213,  214,   70,
       73,  213,  214,    2,   73,  213,  214,  108,  213,  214,
        1,  108,  213,  214,  106,  211,  214,    3,  108,  213,
      214,  108,  213,  214,  108,  213,  214,  107,  108,  213,
      214,  107,  108,  213,  214,  107,  108,  213,  214,  107,
      108,  213,  214,    2,  108,  213,  214,  109,  112,  213,
      214,    1,  109,  112,  213,  214,  117,  211,  214,    3,
      109,  112,  213,  214,  111,  112,  213,  214,  112,  213,
      214,  112,  213,  214,  109,  112,  213,  214,  109,  112,
      213,  214,    2,  109,  112,  213,  214,  118,  121,  213,

      214,    1,  118,  121,  213,  214,    3,  118,  121,  213,
      214,  120,  121,  213,  214,  118,  121,  213,  214,  118,
      121,  213,  214,  121,  213,  214,  118,  121,  213,  214,
        2,  118,  121,  213,  214,   34,  213,  214,    1,   34,
      213,  214,   35,  211,  214,    3,   34,  213,  214,   18,
       34,  213,  214,   19,   34,  213,  214,   34,  213,  214,
       34,  213,  214,   34,  213,  214,   31,   34,  213,  214,
    16414,   31,   34,  213,  214,16414,   31,   34,  213,  214,
    16414,   31,   34,  213,  214,16414,   31,   34,  213,  214,
    16414,   34,  213,  214,   12,   34,  213,  214,   13,   34,

      213,  214,   31,   34,  213,  214,16414,    2,   34,  213,
      214,   20,  213,  214,    1,   20,  213,  214,   23,  213,
      214,   20,  213,  214,   20,  213,  214,  213,  214,   20,
      213,  214,    2,   20,  213,  214,   21,  213,  214,    1,
       21,  213,  214,   21,  213,  214,   21,  213,  214,   21,
      213,  214,    2,   21,  213,  214,   24,  213,  214,    1,
       24,  213,  214,   26,  213,  214,   24,  213,  214,   24,
      213,  214,  213,  214,   24,  213,  214,    2,   24,  213,
      214,   28,   29,  213,  214,    1,   28,   29,  213,  214,
       28,  211,  214,    3,   28,   29,  213,  214,   29,  213,

      214,   28,   29,  213,  214,   28,   29,  213,  214,   28,
       29,  213,  214,    2,   28,   29,  213,  214,  213,  214,
        1,  213,  214,    3,  213,  214,  213,  214,  213,  214,
      213,  214,    2,  213,  214,  123,  213,  214,  123,  213,
      214,  127,  213,  214,    1,  127,  213,  214,  125,  211,
      214,    3,  127,  213,  214,  127,  213,  214,  127,  213,
      214,  127,  213,  214,  127,  213,  214,    2,  127,  213,
      214, 8323,  213,  214,16512,16514,16515, 8323,  213,  214,
    16512,16514,16515,  213,  214,  134,  213,  214,  135,  213,
      214,  133,  213,  214,  213,  214,  137,  213,  214,  213,

      214,  137,  213,  214,  207,  213,  214,    1,  207,  213,
      214,  195,  207,  213,  214,  194,  211,  214,    3,  207,
      213,  214,  198,  207,  213,  214,  190,  207,  213,  214,
      199,  207,  213,  214,  207,  213,  214,  207,  213,  214,
      197,  207,  213,  214,  191,  207,  213,  214,  207,  213,
      214,  191,  207,  213,  214,    2,  207,  213,  214,  101,
      213,  214,    1,  101,  213,  214,  100,  211,  214,    3,
      101,  213,  214,  101,  213,  214,  101,  213,  214,  101,
      213,  214,    2,  101,  213,  214,   99,  101,  213,  214,
        1,   99,  101,  213,  214,   99,  101,  213,  214,   99,

      100,  211,  214,    3,   99,  101,  213,  214,   98,  101,
      213,  214,   99,  101,  213,  214,   99,  101,  213,  214,
       99,  101,  213,  214,    2,   99,  101,  213,  214,  166,
      168,  213,  214,    1,  168,  213,  214,  167,  211,  214,
        3,  166,  168,  213,  214,  168,  213,  214,  168,  213,
      214,  166,  168,  213,  214,  168,  213,  214,  168,  213,
      214,  166,  168,  213,  214,    2,  166,  168,  213,  214,
      166,  168,  213,  214,  168,  213,  214,  168,  213,  214,
      168,  213,  214,   45,   48,  213,  214,    1,   45,   48,
      213,  214,   47,  211,  214,    3,   45,   48,  213,  214,

       48,  213,  214,   45,   48,  213,  214,   45,   48,  213,
      214,   45,   48,  213,  214,    2,   45,   48,  213,  214,
      169,  192,  213,  214,    1,  169,  192,  213,  214,  172,
      211,  214,    3,  169,  192,  213,  214,  192,  213,  214,
      169,  192,  213,  214,  169,  192,  213,  214,  191,  192,
      213,  214,  192,  213,  214,  191,  192,  213,  214,    2,
      169,  192,  213,  214,  168,  213,  214,  168,  213,  214,
      168,  213,  214,  166,  168,  213,  214,  168,  213,  214,
      168,  213,  214,  168,  213,  214,  180,  184,  185,  213,
      214,    1,  180,  185,  213,  214,  181,  211,  214,    3,

      180,  184,  185,  213,  214,  184,  185,  213,  214,  180,
      184,  185,  213,  214,  185,  213,  214,  180,  184,  185,
      213,  214,    2,  180,  184,  185,  213,  214,  177,  179,
      213,  214,    1,  179,  213,  214,  178,  211,  214,    3,
      177,  179,  213,  214,  179,  213,  214,  177,  179,  213,
      214,  177,  179,  213,  214,  177,  179,  213,  214,    2,
      177,  179,  213,  214,  188,  189,  213,  214,    1,  189,
      213,  214,    3,  188,  189,  213,  214,  188,  189,  213,
      214,  188,  189,  213,  214,  188,  189,  213,  214,    2,
      188,  189,  213,  214,   90,  213,  214,    1,   90,  213,

      214,   91,  211,  214,    3,   90,  213,  214,   90,  213,
      214,   90,  213,  214,   89,   90,  213,  214,   88,   90,
      213,  214,   88,   90,  213,  214,   88,   90,  213,  214,
       88,   90,  213,  214,   88,   90,  213,  214,   88,   90,
      213,  214,   88,   90,  213,  214,   88,   90,  213,  214,
       88,   90,  213,  214,   88,   90,  213,  214,   90,  213,
      214,   88,   90,  213,  214,    2,   90,  213,  214,   97,
      213,  214,    1,   97,  213,  214,   95,  211,  214,    3,
       97,  213,  214,   97,  213,  214,   97,  213,  214,   93,
       97,  213,  214,   97,  213,  214,   93,   97,  213,  214,

        2,   97,  213,  214,   96,   97,  213,  214,   94,   97,
      213,  214,   94,   97,  213,  214,  205,  213,  214,    1,
      205,  213,  214,    3,  205,  213,  214,  202,  205,  213,
      214,  205,  213,  214,  205,  213,  214,  205,  213,  214,
      205,  213,  214,    2,  205,  213,  214,  206,  213,  214,
        1,  206,  213,  214,    3,  206,  213,  214,  204,  206,
      213,  214,  206,  213,  214,  206,  213,  214,  206,  213,
      214,  206,  213,  214,    2,  206,  213,  214,   74,  213,
      214,   74,  213,  214,   72,  213,  214,    1,   72,  213,
      214,    3,   72,  213,  214,   72,  213,  214,   72,  213,

      214,   72,  213,  214,   72,  213,  214,    2,   72,  213,
      214,   44,  213,  214,    1,   44,  213,  214,   42,  211,
      214,    3,   44,  213,  214,   40,   44,  213,  214,   41,
       44,  213,  214,   36,   44,  213,  214,   37,   44,  213,
      214,   44,  213,  214,   44,  213,  214,   43,   44,  213,
      214,   44,  213,  214,    2,   44,  213,  214,   54,  213,
      214,    1,   54,  213,  214,    3,   54,  213,  214,   49,
       54,  213,  214,   50,   54,  213,  214,   54,  213,  214,
       54,  213,  214,   54,  213,  214,   54,  213,  214,    2,
       54,  213,  214,  152,  213,  214,    1,  152,  213,  214,

      151,  152,  213,  214,    3,  152,  213,  214,  152,  213,
      214,  152,  213,  214,  151,  152,  213,  214,    2,  152,
      213,  214,  155,  156,  213,  214,    1,  155,  156,  213,
      214,  154,  211,  214,    3,  155,  156,  213,  214,  155,
      213,  214,  155,  213,  214,  155,  156,  213,  214,  155,
      213,  214,  155,  156,  213,  214,    2,  155,  156,  213,
      214,  209,  210,  212,    6,    6,    5,    6,    6,  212,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,  212,  116,  209,  114,  210,  107,  107,  107,  107,
      107,  212,  109,  109,  109,  212,  118,  115,  118,  209,

      113,  118,  210,  118,  119,  118,  212,   17, 8222,   31,
    16414,   31,16414,   31,16414,   31,16414,   33,   32,   33,
       31,  212,16414,   20,   20,  209,   20,  210,   20,   22,
       20,  212,   21,   21,  209,   21,  210,   21,   21,  212,
       24,   24,  209,   24,  210,   24,   25,   24,  212,   28,
       27,   28,  209,   28,  210,   28,   28,  212,  124,  209,
      210,  212,  122,  123,  123,  212,  125,  209,  210,  126,
      212, 8323, 8322, 8320, 8323,16512,16514,16515, 8323,  212,
    16512,16514,16515,  135,  134,  135,  133,  137,  137,  132,
      137,  212,  195,  196,  138,  209,  139,  210,  191,  193,

      191,  212,   99,   99,   98,  166,  140,  142,  209,  141,
      210,  166,  166,  212,  166,   45,   46,   45,  210,   45,
       45,  212,  169,  171,  169,  210,  169,  170,  169,  165,
      165,  209,  166,  180,  184,  180,  184,  182,  184,  209,
      183,  184,  210,  180,  184,  180,  184,  212,  177,  174,
      176,  209,  175,  177,  210,  177,  177,  212,  188,  186,
      188,  209,  187,  188,  210,  188,  188,  212,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   75,   88,
      212,   93,   92,   93,  212,   94,   94,  212,  201,  209,
      200,  210,  203,   74,   74,  212,   71,   39,  209,   51,

      209,   51,  210,   53,   52,   53,  151,  151,  212,  156,
      209,  210,  156,  156,  212,  209,  210,    4,   70,   70,
       70,   70,   70,   62,   70,   70,   70,   70,   70,   70,
      116,  116,  209,  114,  114,  210,  107,  107,  107,  102,
      107,  107,  110,    4,  109,  115,  118,  115,  115,  118,
      209,  113,  118,  113,  113,  118,  210,    4,  118,   16,
       16,   31,16414,   11,   20,  209,   20,  210,    4,   20,
       21,  209,   21,  210,    4,   21,   24,  209,   24,  210,
        4,   24,   27,   28,  209,   28,  210,    4,   28,  209,
      210,    4,    4,  124,  209,  210,    4,  136,  196,  138,

      138,  209,  139,  139,  210,  141,  210,    4,  166,  166,
      145,  144,   45,  210,    4,   45,  169,  210,    4,  169,
      162,  166,  164,  163,  184,  209,  184,  210,    4,  180,
      184,    4,  184,  173,  177,  210,    4,  177,  188,  209,
      188,  210,    4,  188,   88,   88,   88,   88,   88,   88,
       83,   88,   88,  201,  209,  200,  210,   38,   39,  209,
      158,  158,  209,  157,  157,  210,    4,  156,  208,16391,
    16391,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,  116,  208,  107,  103,  107,  107,  107,  110,
      115,  118,  208,   15,   14,   15,   31,16414,   20,  208,

       21,  208,   24,  208,   27,   28,  208,  208,  208,  129,
      137,  141,  143,  166,  145,  144,  166,  164,  163,  184,
      208,  188,  208,   82,   88,   88,   88,   88,   88,   80,
       88,   88,   86,   38,16391,    9, 8199,   70,   70,   63,
       66,   64,   64,   70,   70,   70,   70,   70,   70,   70,
       70,  104,  107,  105,  107,  107,   14,   31,16414,   27,
      147,   88,   88,   88,   88,   88,   88,   78,   78, 8199,
        9,   70,   70,   70,   67,   59,   58,   70,   70,   70,
       70,   65,  107,   31,16414,   27,  146,  150,  153,  149,
       88,   85,   87,   88,   79,   79,   88,    8,    9,   57,

       61,   60,16439,   56,   70,   27,  148,  162,   84,   88,
       81,    9, 8247,   27,  162,   77,   76,    9, 8247,   10,
       27,  161,  160,    9,   10,   10,   27,  159,    9,   69,
       27,  162,  162,  162,    9,   27,  162,    9,   27,  162,
        9,   27,   27,  162,   27,   27,   27
    } ;

static yyconst flex_int16_t yy_accept[1420] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        6,    9,   11,   14,   16,   18,   20,   23,   26,   30,
       33,   36,   40,   43,   46,   49,   52,   55,   58,   62,

       65,   69,   72,   76,   79,   82,   86,   90,   94,   98,
      102,  106,  110,  114,  118,  121,  125,  128,  132,  135,
      138,  142,  146,  150,  154,  158,  162,  167,  170,  175,
      179,  182,  185,  189,  193,  198,  202,  207,  212,  216,
      220,  224,  227,  231,  236,  239,  243,  246,  250,  254,
      258,  261,  264,  267,  272,  277,  282,  287,  292,  295,
      299,  303,  308,  312,  315,  319,  322,  325,  328,  330,
      333,  337,  340,  344,  347,  350,  353,  357,  360,  364,
      367,  370,  373,  375,  378,  382,  386,  391,  394,  399,
      402,  406,  410,  414,  419,  421,  424,  427,  429,  431,

      433,  436,  439,  442,  445,  449,  452,  456,  459,  462,
      465,  468,  472,  478,  484,  486,  489,  492,  495,  497,
      500,  502,  505,  508,  512,  516,  519,  523,  527,  531,
      535,  538,  541,  545,  549,  552,  556,  560,  563,  567,
      570,  574,  577,  580,  583,  587,  591,  596,  600,  604,
      609,  613,  617,  621,  625,  630,  634,  638,  641,  646,
      649,  652,  656,  659,  662,  666,  671,  675,  678,  681,
      684,  688,  693,  696,  701,  704,  708,  712,  716,  721,
      725,  730,  733,  738,  741,  745,  749,  753,  756,  760,
      765,  768,  771,  774,  778,  781,  784,  787,  792,  797,

      800,  806,  810,  815,  818,  823,  829,  833,  837,  840,
      845,  848,  852,  856,  860,  865,  869,  873,  878,  882,
      886,  890,  895,  898,  902,  905,  909,  912,  915,  919,
      923,  927,  931,  935,  939,  943,  947,  951,  955,  959,
      962,  966,  970,  973,  977,  980,  984,  987,  990,  994,
      997, 1001, 1005, 1009, 1013, 1017, 1020, 1024, 1028, 1032,
     1035, 1038, 1041, 1044, 1048, 1051, 1055, 1059, 1063, 1066,
     1069, 1072, 1075, 1079, 1082, 1085, 1088, 1092, 1096, 1099,
     1102, 1105, 1108, 1112, 1115, 1119, 1122, 1126, 1130, 1134,
     1138, 1142, 1145, 1148, 1152, 1155, 1159, 1162, 1166, 1170,

     1174, 1178, 1181, 1184, 1187, 1190, 1194, 1197, 1201, 1205,
     1209, 1212, 1215, 1219, 1223, 1227, 1232, 1235, 1240, 1243,
     1246, 1250, 1253, 1257, 1262, 1263, 1264, 1264, 1265, 1266,
     1267, 1268, 1269, 1270, 1270, 1270, 1271, 1272, 1273, 1274,
     1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1285, 1287,
     1288, 1289, 1290, 1291, 1293, 1294, 1294, 1294, 1295, 1297,
     1298, 1301, 1304, 1305, 1306, 1308, 1308, 1308, 1309, 1309,
     1310, 1312, 1314, 1316, 1316, 1318, 1319, 1320, 1321, 1324,
     1325, 1327, 1329, 1330, 1331, 1333, 1334, 1336, 1338, 1339,
     1341, 1342, 1344, 1346, 1347, 1348, 1350, 1351, 1351, 1352,

     1354, 1356, 1357, 1359, 1359, 1360, 1361, 1362, 1362, 1363,
     1363, 1364, 1365, 1367, 1367, 1368, 1369, 1370, 1370, 1371,
     1371, 1372, 1373, 1374, 1375, 1379, 1379, 1384, 1384, 1385,
     1386, 1387, 1388, 1388, 1389, 1389, 1390, 1391, 1393, 1394,
     1394, 1395, 1397, 1399, 1400, 1401, 1401, 1403, 1404, 1405,
     1406, 1407, 1408, 1410, 1412, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1415, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1417, 1418, 1420, 1421, 1423, 1424,
     1424, 1425, 1427, 1428, 1429, 1430, 1431, 1433, 1433, 1433,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1436, 1437, 1438,

     1441, 1444, 1446, 1446, 1446, 1449, 1450, 1451, 1453, 1456,
     1457, 1459, 1460, 1463, 1466, 1467, 1469, 1470, 1471, 1472,
     1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1480, 1482,
     1483, 1484, 1486, 1487, 1489, 1491, 1493, 1494, 1495, 1497,
     1498, 1498, 1498, 1498, 1500, 1502, 1504, 1505, 1506, 1507,
     1508, 1510, 1511, 1512, 1513, 1514, 1514, 1514, 1516, 1517,
     1518, 1519, 1519, 1519, 1519, 1519, 1520, 1521, 1522, 1523,
     1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1534,
     1535, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1543, 1544,
     1544, 1544, 1546, 1548, 1549, 1552, 1554, 1555, 1558, 1560,

     1561, 1561, 1562, 1562, 1562, 1564, 1564, 1565, 1567, 1569,
     1571, 1573, 1575, 1577, 1579, 1581, 1583, 1583, 1584, 1586,
     1588, 1590, 1591, 1592, 1593, 1595, 1596, 1597, 1598, 1598,
     1598, 1599, 1599, 1600, 1601, 1603, 1604, 1606, 1608, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1611,
     1611, 1612, 1613, 1615, 1617, 1619, 1621, 1621, 1622, 1623,
     1623, 1624, 1625, 1627, 1629, 1632, 1634, 1634, 1634, 1634,
     1635, 1637, 1639, 1641, 1643, 1645, 1646, 1647, 1648, 1649,
     1650, 1651, 1652, 1653, 1654, 1656, 1658, 1658, 1659, 1659,

     1659, 1661, 1662, 1664, 1665, 1667, 1669, 1669, 1670, 1670,
     1670, 1671, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
     1679, 1680, 1681, 1682, 1683, 1685, 1686, 1688, 1689, 1690,
     1690, 1691, 1691, 1694, 1695, 1697, 1697, 1697, 1699, 1699,
     1701, 1703, 1705, 1705, 1706, 1708, 1709, 1710, 1711, 1712,
     1713, 1713, 1713, 1713, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1715, 1715, 1716, 1717, 1717, 1718, 1718, 1719,
     1720, 1722, 1722, 1722, 1724, 1725, 1726, 1727, 1728, 1729,
     1730, 1731, 1732, 1733, 1734, 1734, 1735, 1735, 1735, 1735,

     1736, 1736, 1737, 1737, 1738, 1739, 1740, 1742, 1743, 1744,
     1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1753,
     1754, 1756, 1757, 1757, 1757, 1758, 1758, 1758, 1760, 1760,
     1760, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1762, 1762, 1762, 1762,
     1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
     1762, 1762, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
     1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1771,
     1771, 1772, 1772, 1773, 1774, 1774, 1774, 1775, 1776, 1777,
     1778, 1779, 1780, 1781, 1782, 1783, 1783, 1784, 1784, 1786,

     1786, 1786, 1787, 1787, 1787, 1787, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1789, 1790, 1790, 1790, 1790,
     1790, 1790, 1790, 1790, 1790, 1790, 1790, 1790, 1790, 1790,
     1790, 1790, 1790, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
     1797, 1797, 1798, 1798, 1798, 1798, 1798, 1798, 1799, 1799,
     1800, 1800, 1801, 1801, 1802, 1803, 1804, 1805, 1806, 1806,
     1806, 1806, 1806, 1806, 1806, 1806, 1807, 1807, 1808, 1808,
     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808,
     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1809,
     1809, 1809, 1809, 1809, 1809, 1809, 1810, 1811, 1811, 1812,

     1812, 1812, 1812, 1812, 1813, 1813, 1814, 1814, 1814, 1814,
     1814, 1814, 1814, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1817, 1818, 1818, 1818, 1818, 1818, 1819, 1819, 1820, 1820,
     1820, 1820, 1821, 1821, 1821, 1822, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1822, 1822, 1823, 1823, 1823, 1823, 1823,
     1823, 1823, 1823, 1823, 1823, 1823, 1824, 1824, 1824, 1824,
     1825, 1825, 1825, 1825, 1825, 1826, 1827, 1827, 1827, 1828,
     1828, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829,

     1829, 1829, 1829, 1829, 1829, 1829, 1829, 1830, 1830, 1831,
     1831, 1831, 1831, 1831, 1832, 1832, 1832, 1832, 1832, 1832,
     1832, 1833, 1834, 1834, 1835, 1835, 1835, 1835, 1836, 1836,
     1836, 1836, 1836, 1836, 1837, 1837, 1837, 1837, 1838, 1838,
     1838, 1838, 1838, 1839, 1839, 1839, 1839, 1839, 1839, 1840,
     1840, 1840, 1841, 1841, 1841, 1841, 1842, 1842, 1842, 1842,
     1842, 1842, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
     1844, 1845, 1845, 1845, 1845, 1845, 1846, 1846, 1846, 1846,
     1846, 1847, 1847, 1847, 1847, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,

     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,

     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,    1,   15,   16,   17,   18,   19,   20,   19,
       19,   19,   19,   19,   19,   21,   22,   23,    1,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   38,   51,   52,   38,
       53,   54,   55,    1,   56,   57,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   38,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   38,   79,
       80,   38,   81,   10,   82,   83,    1,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85
    } ;

static yyconst flex_int32_t yy_meta[87] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,   10,   11,   12,    1,    8,   13,   14,   15,   15,
       15,   15,    1,   16,    1,    1,    1,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,    1,   19,    1,   18,   20,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
        1,    1,   20,   18,   18,    1
    } ;

static yyconst flex_int16_t yy_base[1615] =
    {   0,
        0,    4,    8,   94,  180,    0,  266,    0,  351,  359,
      369,  377,  463,    0,  548,  552,  556,  560,  586,  590,
      580,  646,  651,  677,  763,    0,  848,  852,  938,    0,
     1024,    0, 1110,    0,  625, 1195, 1200, 1205, 1210, 1215,
     1245, 1330, 1234, 1239, 1416,    0, 1260, 1501, 1311, 1505,
     1265, 1512, 1516, 1520, 1606,    0, 1692,    0, 1778,    0,
     1863, 1867, 1871, 1875, 1961,    0, 2046, 2050, 2054, 2081,
     2110, 2143, 2229, 2315,    0,    0, 2173, 2188, 4339, 8138,
     8138, 8138, 8138,    1, 4310, 4251, 8138, 8138, 8138, 2401,
     8138, 8138, 8138,    2, 4300,    3,    0, 4242, 8138, 8138,

     8138, 8138, 8138,    3, 4297,    0,    0,    0,    0,    2,
        0,    3, 4238, 8138, 8138, 8138, 8138, 8138,   10, 4287,
        0,    7,    0, 4229, 8138,    0,    0, 8138,    0, 8138,
     4257,   11, 4282, 4217,    0,    0,    0,    0, 8138,   34,
     4273,    0, 4214,    0, 8138, 8138, 8138, 8138, 8138, 4242,
       36, 4261, 4280,   52,  568,  386,  396,  611,   33, 8138,
     8138,  606, 8138,    0,    0, 8138,   62, 4258,    0, 4199,
        0,    0,    0,   64, 4248, 4190,    0,    0,    0, 8138,
       65, 4245,    0, 4186,    0,    0,    0,    0,    0, 4255,
      354, 4234, 4175,    0,    4,   25,   32,  395,  385,  368,

      381,   11,  565, 4253, 4245, 8138, 4244,  379,   57,   55,
      350, 4242,  402,  658,   78, 4241, 4233, 4232, 4216,   50,
     4227,  583, 8138, 8138,  357, 8138, 8138, 8138, 4215, 8138,
      401, 4195, 8138,    0,  412, 4136, 8138, 8138, 8138, 8138,
     8138,  404, 4191, 4126, 8138, 8138, 8138,  377, 8138, 8138,
     8138,  406, 4182, 4123, 8138,    0, 8138, 8138,    0, 4187,
      411, 4170, 2460, 8138, 4112,    0,  617, 1279, 4137, 4109,
        0,    0, 8138,    0, 4166,  412, 4156, 4097,    0, 4125,
     4117, 8138, 4116, 4150,  585,  542,    0,  684, 4082, 4104,
     4139,  421,  653,  677, 1309, 4098, 4070,  425,    0, 8138,

      431,  424,  681,  665,  610,  439,    0, 8138, 8138,    0,
     4127,  432, 4117, 4058,    0,    0, 8138,    0,  433, 4113,
     4048,    0, 8138, 8138, 8138, 8138,  607, 4104, 8138,  584,
      539,  592,  635,    0,  663,  658,  656,  659,  664,  454,
     4045, 8138, 8138, 8138, 8138, 8138,  695, 4100,    0, 4115,
     4034, 8138, 8138,    0, 4032, 8138, 8138, 8138, 8138,  700,
     4087,    0, 4022, 8138, 8138, 8138, 8138, 8138,  706, 4078,
        0, 4019, 8138,    0, 4017, 8138, 8138, 8138,  708, 4066,
      735, 4008, 8138, 8138, 8138, 8138, 8138, 8138, 4036, 8138,
     8138,  727, 4061, 8138, 3996, 8138, 8138, 8138, 8138, 8138,

     8138,  729, 4052,  744, 3993, 8138, 8138, 8138,    0, 8138,
      732, 4048, 3983, 8138,    0,    0, 8138,    0, 8138,  737,
     4039,  827, 3980,    0, 4048, 4036,  872, 3969, 8138, 2539,
     8138,  668,    0, 1222,  855, 1242,    0,  699,  817,  825,
      831,  862,  815,  833,  847,  850, 3967, 4035, 4023,    0,
     1209,  854, 1534, 3956,    0, 4027,  739,  901, 3952,    0,
     1217, 1222, 1343, 8138, 3944, 4016,  890, 8138,  917, 8138,
     1306, 2075, 1367, 4013, 2098, 8138, 8138, 4019, 2115,    0,
     4001, 3996, 1377, 8138, 3928,    0, 3996, 3984, 1538, 3917,
        0, 3985, 3979, 1894, 8138, 3905,    0, 3981, 3979, 3970,

     3958, 1920, 3891,  892, 8138, 1368, 1334, 2254, 1296, 1218,
     8138, 1223, 1875, 3969, 8138,  353,  618, 2281, 8138, 3967,
     1256, 1301, 8138, 8138, 1549, 3959, 2059,  741, 3959, 3957,
     3955, 3947, 3932,  913, 3930, 1291, 8138, 1510,  445, 3937,
     3934,  575,  422,    0, 8138, 3932, 3850, 8138,  753, 8138,
        0, 8138,  855, 3914, 2338, 2595,  860,  865, 1311, 1315,
      866, 1318, 1329, 1345, 1345, 3840, 2102, 2127, 3866, 3832,
     2050, 3853, 3826,    0, 8138, 3889, 2365, 3821, 3843, 3842,
     8138,  606, 2626, 8138, 1197, 8138, 3880, 1466, 2040, 2162,
     2166, 3835, 3801, 2072, 3826, 3792,  859,    0,    0, 3856,

     3851, 2659, 1868, 1498, 2058,    0, 1203, 3852, 3845, 2491,
     3773,    0, 3841, 3835, 2675, 3768,    0, 1499, 1494, 1504,
     1514, 1517, 1517, 3847, 1519, 1525, 8138, 3834, 3753,    0,
     8138, 3750,    0, 3746, 3811, 3805, 8138,    0, 3738, 8138,
     3816, 3808, 1379, 3803, 3802, 3796, 8138, 8138, 3805,    0,
     3715,    0, 1202, 1271, 2691, 1833, 1530, 3714, 3764, 8138,
     8138, 1361, 1396, 1571, 3766, 1844, 1847, 1874, 1881, 1885,
     8138, 2036, 2064, 1845, 1856, 2062, 2091,    0, 3753,    0,
        0, 2100, 2119, 2120, 8138, 2127, 2142, 3747, 8138, 3734,
     1569,    0, 1528,    0, 1885, 2084,    0, 2104,    0, 8138,

     3722, 3715, 2193, 2259, 2707, 3702, 8138, 3678,    0,    0,
     3655,    0,    0, 3625,    0,    0, 3630, 3623, 3605,    0,
        0, 1897, 1378, 1928, 8138, 1563, 3618, 3609, 1407, 2134,
     8138, 3590, 3598, 8138, 3546, 8138, 8138, 3522,    0, 1884,
     2140, 2156, 2215, 2159, 2188, 2192, 2172, 2189, 2200, 2266,
     2297, 2243, 2240, 2242, 2261, 2298, 2279, 2297, 2664, 2310,
     3482, 3399,    0,    0, 3427, 3415, 2314, 8138, 2665, 2637,
     3391, 3352, 3386,    0, 1932,    0, 2309, 2316, 1334, 8138,
        0,    0, 3342,    0,    0, 3344, 2695, 2646, 2318, 2659,
     2153, 8138, 2663, 3336, 3302, 8138, 3287, 8138, 3245, 2368,

     3216, 8138, 3204, 8138, 8138,    0, 2334, 8138, 1499, 3202,
     2723, 3190, 2726, 2456, 2453, 2202, 2807, 2456, 2464, 2475,
     2459, 2599, 2613, 2596,    0, 2702, 2730, 2729, 2765, 3156,
     8138, 2732, 2164, 8138, 8138, 2739, 2752, 2781, 3124,    0,
        0,    0, 3113, 3097,    0, 2063, 3096, 8138, 8138, 3069,
     2712, 2714, 2728, 8138, 2654, 2689, 2728, 2738, 2729, 2738,
     2743, 2765, 2770, 1937, 2805, 2798, 2806, 2798, 2799, 2813,
     2803,  703,    9, 3004, 2971, 2863, 1944, 2219, 2987, 2919,
        0, 2805, 2816,    0, 8138, 2808, 2805, 2812, 2811, 2821,
     8138, 2823, 2527, 8138, 2979, 8138, 2768, 2826, 2943, 2893,

     2897, 2907, 2922, 8138, 2826, 2830, 8138, 8138, 2868, 2873,
     3003, 2170, 2881, 2843, 2885, 2889, 2930, 8138, 2918, 2937,
     2945, 2947, 2911, 2897, 8138, 2873, 2957, 2982, 2870, 2852,
     2838, 2896, 2903, 2908, 2972, 2908, 2912, 2921, 2920, 2922,
     2936, 2927, 3029, 3032, 2930, 3035, 2954, 2979, 2972, 2999,
     3000, 3014, 3003, 3003, 3004, 3000, 3020, 3024, 3007, 3026,
     3021, 3060, 3034, 2834, 2799, 3034, 3076, 3026, 3088, 8138,
     2791, 2770, 2750, 3034, 2287, 3098, 3103, 1575, 2381, 3109,
     3114, 3119, 3035, 2736, 3091, 3064, 3127, 8138, 2523, 8138,
     2631, 3122, 3076, 2710, 2650, 3081, 3128, 3144, 3147, 2635,

     2626, 2529, 3157, 2521, 3092, 3161, 3098, 3100, 3094, 3111,
     3113, 3129, 3126, 2431, 3171, 8138, 3188, 3127, 3135, 3136,
     3137, 3142, 3145, 3138, 3148, 3140, 3163, 3148, 3149, 3157,
     3168, 3158, 3167, 3215, 2509, 8138, 8138, 3180, 3225, 8138,
     2495, 2491, 3239, 3167, 3242, 3245, 2285, 8138, 3248, 3256,
     3259, 2396, 3263, 2837, 8138, 3233, 8138, 3267, 3230, 3274,
     3280, 3290,    0, 2380, 2375, 2367, 2278, 2356, 3183, 3230,
     3234, 3235, 3241, 3247, 3240, 3249, 2266, 3307, 3251, 3235,
     3259, 3261, 3253, 3255, 3276, 3256, 3281, 3289, 8138, 3281,
     3289, 3281, 3282, 3298, 3287, 8138, 2864, 3341, 8138, 3300,

     3351, 3362, 3365, 3368, 3373,    0, 3292, 3377, 3390, 2340,
     2323, 2327, 2294, 2213, 3395, 3320, 3318, 3343, 3342, 3334,
     3338, 3326, 3349, 3360,    0, 3353, 3366, 3404, 3412, 3369,
     3416, 8138, 3370, 3379, 3372, 3382, 3383, 3397, 3386, 2969,
     8138,    0, 3454, 3457, 3460, 3468, 3471,    0, 3406, 3481,
     3485, 3495, 2265, 2232, 2225, 3397,    0, 3426, 3439, 3498,
     3505, 3446, 3508, 3453, 8138, 3513, 3444, 3516, 3461, 3463,
     3471, 3482, 3485, 3478, 3487, 8138, 3543, 3554, 3540, 3557,
     3565, 3503, 3525, 3578, 3568, 8138, 2213, 2161, 2155, 3509,
     8138, 3588, 3522, 3591, 3535, 3594, 3539, 3544, 3544, 3535,

     3537, 3563, 3552, 3605, 3637, 3622, 3648, 3651, 8138, 3654,
     3658, 2137, 2099, 2083, 3565, 3664, 3559, 3573, 3567, 3580,
     8138, 8138, 3595, 8138, 3672, 3675, 3678, 3686, 3689, 3701,
     3712, 2072, 2067, 2050, 3620, 3717, 3655, 8138, 3647, 3731,
     3734, 3737, 3745, 3758, 3761, 3771, 1897, 1890, 1884, 3781,
     3662, 8138, 3784, 3787, 3790, 3798, 3801, 3824, 3828, 1580,
     1568, 1399, 3671, 3838, 3841, 3844, 3855, 1388, 1291, 1261,
     8138, 3869, 3873,  923,  921,  864, 3883, 3886,  711,  544,
      454, 3896, 3899,  398, 8138, 3909, 3913, 3923, 3926, 3936,
     3939, 3949, 3952, 3962, 3965, 3975, 3978, 3988, 3991, 4001,

     4004, 4014, 4017, 4027, 4030, 4040, 4043, 4053, 4056, 4066,
     4069, 4079, 4082, 4092, 4095, 4105, 4108, 4118, 4121, 4131,
     4134, 4144, 4147, 4157, 4160, 4170, 4173, 4183, 4186, 4196,
     4199, 4209, 4212, 4222, 4225, 4235, 4238, 4248, 4251, 4261,
     4264, 4274, 4277, 4287, 4290, 4300, 4303, 4313, 4316, 4326,
     4329, 4339, 4342, 4352, 4355, 4365, 4368, 4378, 4381, 4391,
     4394, 4404, 4407, 4417, 4420, 4430, 4433, 4443, 4446, 4456,
     4459, 4469, 4472, 4482, 4485, 4495, 4498, 4508, 4511, 4521,
     4524, 4534, 4537, 4547, 4550, 4560, 4563, 4573, 4576, 4586,
     4589, 4599, 4602, 4612, 4615, 4625, 4628, 4638, 4641, 4651,

     4654, 4664, 4667, 4677, 4680, 4690, 4693, 4703, 4706,  347,
     4716, 4722, 4728, 4734, 4740, 4746, 4752, 8138, 4759, 4779,
     4799, 4819, 4839, 4859, 4879, 4899, 4919, 4939, 4959, 4979,
     4999, 5019, 5039, 5059, 5079, 5099, 5119, 5139, 5159, 5179,
     5199, 1240, 2674, 2765, 2776, 5219, 5239, 5259, 5279, 5299,
     5317, 5335, 5355, 5375, 5395, 5415, 5435, 5455, 5475, 5495,
     5513, 5531, 5549, 5566, 2964, 5584, 5604, 5622, 5642, 5662,
     5682, 5702, 5722, 5742, 2974, 2981, 3206, 5762, 3323, 5782,
     5802, 5820, 5838, 3412, 3421, 3427, 5858, 5878, 3429, 5898,
     5918, 5938, 5958, 5978, 5998, 6018, 6036, 6054, 6074, 6094,

     6114, 6134, 6154, 6174, 6192, 6210, 6228, 6245, 3516, 6263,
     6283, 6301, 6321, 6341, 6361, 6381, 6401, 6421, 3616, 3669,
     3692, 3693, 6441, 6461, 6479, 6497, 6517, 6537, 3713, 6557,
     6577, 3728, 6597, 6617, 6637, 6657, 6677, 6697, 6717, 6735,
     6753, 6773, 6793, 6813, 6833, 6853, 6873, 6893, 6913, 6931,
     6951, 6971, 6991, 7011, 7031, 3793, 7051, 7071, 7091, 7111,
     7131, 3737, 7151, 7169, 7187, 7207, 7225, 7243, 7263, 7283,
     7303, 7323, 7343, 7363, 7383, 7403, 7421, 7441, 3754, 7461,
     7481, 7501, 7521, 7541, 7561, 7581, 7599, 7617, 7637, 7657,
     7677, 3762, 7697, 7717, 7737, 7757, 7777, 7797, 7817, 7837,

     7857, 7877, 7897, 7917, 7937, 7957, 7977, 7997, 8017, 8037,
     8057, 8077, 8097, 8117
    } ;

static yyconst flex_int16_t yy_def[1615] =
    {   0,
     1419, 1419, 1419, 1418, 1418,    5, 1418,    7, 1420, 1420,
     1421, 1421, 1418,   13, 1422, 1422, 1423, 1423, 1424, 1424,
     1425, 1425, 1426, 1426, 1418,   25, 1427, 1427, 1418,   29,
     1418,   31, 1418,   33, 1428, 1429, 1419, 1419, 1419, 1419,
     1430, 1430, 1431, 1431, 1418,   45, 1430, 1430, 1432, 1432,
     1433, 1433, 1434, 1434, 1418,   55, 1418,   57, 1418,   59,
     1435, 1435, 1436, 1436, 1418,   65, 1437, 1437, 1438, 1438,
     1439, 1439, 1440, 1440,   74,   74, 1441, 1441, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1442, 1443, 1443, 1418, 1418,

     1418, 1418, 1418, 1418, 1418, 1444, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1445, 1445, 1445, 1445, 1418, 1446, 1446, 1418, 1446, 1418,
     1447, 1418, 1446, 1446, 1446, 1448, 1448, 1448, 1418, 1448,
     1448, 1449, 1448, 1448, 1418, 1418, 1418, 1418, 1418, 1450,
     1418, 1418, 1418, 1451, 1451, 1451, 1451, 1451, 1452, 1418,
     1418, 1451, 1418, 1453, 1453, 1418, 1453, 1453, 1454, 1453,
     1453, 1455, 1455, 1455, 1455, 1455, 1455, 1456, 1456, 1418,
     1456, 1456, 1457, 1456, 1456, 1458, 1458, 1458, 1458, 1459,
     1458, 1458, 1458, 1458, 1460, 1460, 1460, 1460, 1460, 1460,

     1460, 1461, 1461, 1462, 1462, 1418, 1462, 1462, 1462, 1418,
     1462, 1462, 1463, 1463, 1418, 1418, 1418, 1418, 1418, 1464,
     1418, 1464, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1465, 1418, 1465, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1466, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1467, 1418, 1418, 1467, 1418,
     1418, 1467, 1418, 1418, 1467, 1467, 1467, 1418, 1418, 1418,
     1468, 1468, 1418, 1468, 1418, 1468, 1468, 1468, 1468, 1469,
     1469, 1418, 1469, 1418, 1469, 1469, 1465, 1469, 1465, 1469,
     1418, 1418, 1418, 1467, 1418, 1418, 1418, 1470, 1471, 1418,

     1470, 1472, 1470, 1418, 1470, 1470, 1473, 1418, 1418, 1473,
     1418, 1473, 1473, 1473, 1473, 1474, 1418, 1474, 1474, 1474,
     1474, 1474, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1418,
     1475, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1476, 1418,
     1476, 1418, 1418, 1477, 1477, 1418, 1418, 1418, 1418, 1418,
     1418, 1478, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1478, 1418, 1418, 1479, 1479, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1480, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,

     1418, 1418, 1418, 1481, 1418, 1418, 1418, 1418, 1482, 1418,
     1418, 1418, 1482, 1418, 1483, 1483, 1418, 1483, 1418, 1418,
     1483, 1418, 1483, 1483, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1484, 1485, 1484, 1485, 1485, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1486, 1486, 1487, 1488, 1489,
     1489, 1489, 1489, 1489, 1490, 1491, 1492, 1490, 1490, 1493,
     1494, 1495, 1493, 1418, 1493, 1418, 1496, 1418, 1418, 1418,
     1497, 1497, 1497, 1498, 1497, 1418, 1418, 1418, 1497, 1499,
     1499, 1499, 1499, 1418, 1499, 1500, 1500, 1500, 1500, 1500,
     1501, 1501, 1501, 1501, 1418, 1501, 1502, 1503, 1503, 1502,

     1502, 1502, 1502, 1504, 1418, 1504, 1504, 1504, 1504, 1418,
     1418, 1505, 1505, 1506, 1418, 1506, 1506, 1506, 1418, 1418,
     1506, 1418, 1418, 1418, 1507, 1418, 1507, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1508, 1418, 1508, 1418, 1418,
     1418, 1418, 1418, 1509, 1418, 1418, 1509, 1418, 1510, 1418,
     1511, 1418, 1418, 1418, 1511, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1511, 1511, 1418, 1418, 1418,
     1418, 1418, 1418, 1512, 1418, 1512, 1512, 1512, 1513, 1513,
     1418, 1513, 1513, 1418, 1513, 1418, 1418, 1418, 1418, 1511,
     1418, 1418, 1418, 1418, 1418, 1418, 1514, 1515, 1516, 1516,

     1516, 1514, 1418, 1418, 1514, 1517, 1418, 1418, 1517, 1517,
     1517, 1518, 1518, 1518, 1518, 1518, 1519, 1519, 1519, 1519,
     1519, 1519, 1519, 1519, 1519, 1519, 1418, 1418, 1519, 1520,
     1418, 1520, 1521, 1521, 1418, 1418, 1418, 1522, 1522, 1418,
     1418, 1523, 1524, 1418, 1418, 1418, 1418, 1418, 1418, 1525,
     1525, 1526, 1418, 1418, 1526, 1418, 1418, 1526, 1418, 1418,
     1418, 1418, 1527, 1418, 1528, 1529, 1529, 1529, 1529, 1529,
     1418, 1529, 1529, 1529, 1529, 1529, 1529, 1530, 1530, 1531,
     1531, 1532, 1532, 1532, 1418, 1532, 1532, 1533, 1418, 1418,
     1418, 1534, 1535, 1536, 1535, 1537, 1538, 1537, 1539, 1418,

     1418, 1418, 1418, 1418, 1540, 1541, 1418, 1542, 1542, 1542,
     1543, 1543, 1543, 1544, 1544, 1544, 1545, 1545, 1546, 1546,
     1546, 1547, 1547, 1547, 1418, 1548, 1548, 1548, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1549, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1549, 1418,
     1418, 1418, 1550, 1550, 1551, 1551, 1418, 1418, 1549, 1418,
     1418, 1418, 1552, 1552, 1553, 1552, 1418, 1418, 1418, 1418,
     1554, 1554, 1555, 1555, 1555, 1556, 1556, 1556, 1556, 1556,
     1556, 1418, 1556, 1556, 1418, 1418, 1557, 1418, 1418, 1418,

     1418, 1418, 1418, 1418, 1418, 1558, 1418, 1418, 1559, 1560,
     1418, 1561, 1418, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1563, 1564, 1564, 1564, 1564, 1565,
     1418, 1418, 1566, 1418, 1418, 1418, 1418, 1567, 1568, 1569,
     1570, 1571, 1572, 1572, 1573, 1574, 1575, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1576, 1418, 1418, 1418, 1418, 1576, 1418, 1418, 1418,
     1577, 1418, 1418, 1578, 1418, 1579, 1579, 1579, 1579, 1579,
     1418, 1579, 1579, 1418, 1580, 1418, 1418, 1418, 1560, 1581,

     1418, 1418, 1418, 1418, 1562, 1562, 1418, 1418, 1418, 1562,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1418, 1418, 1564,
     1564, 1564, 1418, 1418, 1418, 1418, 1418, 1567, 1582, 1583,
     1583, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1579, 1579, 1579, 1579, 1579, 1579, 1418, 1418,
     1418, 1418, 1418, 1418, 1581, 1581, 1581, 1418, 1581, 1418,
     1418, 1418, 1562, 1562, 1418, 1418, 1562, 1418, 1418, 1418,
     1562, 1562, 1562, 1562, 1418, 1418, 1564, 1418, 1567, 1584,

     1585, 1585, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1586, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1579, 1418, 1418, 1579, 1418, 1418,
     1418, 1579, 1418, 1418, 1581, 1581, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1587, 1418, 1562, 1418, 1418,
     1418, 1418, 1588, 1589, 1590, 1590, 1591, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1586, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1579, 1418, 1418, 1418,

     1581, 1581, 1418, 1418, 1418, 1592, 1418, 1418, 1418, 1588,
     1593, 1594, 1594, 1591, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1595, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1596, 1581, 1581, 1418, 1418, 1418, 1592, 1418, 1418,
     1418, 1418, 1597, 1598, 1598, 1418, 1599, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1581, 1581, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1600, 1601, 1601, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,

     1418, 1418, 1418, 1581, 1581, 1418, 1418, 1418, 1418, 1418,
     1418, 1602, 1603, 1603, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1581, 1581, 1418, 1418, 1418, 1418,
     1418, 1604, 1605, 1605, 1418, 1418, 1418, 1418, 1418, 1581,
     1581, 1418, 1418, 1418, 1418, 1418, 1606, 1607, 1607, 1418,
     1418, 1418, 1581, 1581, 1418, 1418, 1418, 1418, 1418, 1608,
     1609, 1609, 1418, 1581, 1581, 1418, 1418, 1610, 1611, 1611,
     1418, 1418, 1418, 1612, 1613, 1613, 1418, 1418, 1614, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,

     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,

     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418,    0, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,

     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,

     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418
    } ;

static yyconst flex_int16_t yy_nxt[8225] =
    {   0,
     1418,   81, 1418,   82,   83,   81, 1418,   82,   83,   81,
      505,   82,   83,  510,  425,  425,  425,   84,  426,  426,
      426,   84,  511,  448,  448,   84,   85,  449,  449,  505,
       85,  505,  439,  453,   85,  442,  477,  478,  505,  440,
      438,  441,  443,  444,  446,  445,  451,  461,  452,  425,
      505,  462,  534,  426,  469,  469,  469,  505,  519,  520,
      515,  439,  453,  470,  442,  569,  535,  440,  438,  441,
      443,  444,  446,  445,  451,  481,  452,  487,  492,  482,
      528,  488,  493,  518,   86,   87,  435,  435,   86,   87,
      529,  570,   86,   87,   88,   89,   90,   91,   92,   88,

       88,   93,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   94,   88,   88,   88,   88,   88,   88,   88,   88,
       95,   88,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   88,   88,   88,   96,
       88,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   88,   88,   88,   97,   98,   99,
      100,  101,  100,  102,  103,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  104,  100,  100,

      100,  100,  100,  100,  100,  100,  105,  100,  106,  106,
      107,  108,  109,  106,  106,  106,  110,  106,  106,  106,
      106,  106,  106,  111,  106,  106,  106,  106,  112,  106,
      106,  106,  100,  100,  100,  106,  100,  106,  106,  107,
      108,  109,  106,  106,  106,  110,  106,  106,  106,  106,
      106,  111,  106,  106,  106,  106,  112,  106,  106,  106,
      100,  100,  100,  106,  113,  114,  115,  116,  115,  117,
      118,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  119,  115,  115,  115,  115,  115,  115,
      115,  115,  120,  115,  121,  121,  121,  121,  122,  121,

      121,  121,  123,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  115,  115,
      115,  121,  115,  121,  121,  121,  121,  122,  121,  121,
      121,  123,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  115,  115,  115,  121,
      124,  125,  127,  515,  128,  129,  515,  130,  470,  539,
      127,  131,  128,  129,  540,  130,  726,  500,  132,  131,
      137,  501,   82,  138,  505,  139,  132,  133,  137,  549,
       82,  138,  515,  139,  550,  133,  140,  505,  469,  469,
      469,  505,  516,  505,  140,  141,  517,  470,  469,  469,

      469,  505,  474,  141,  522,  523,  505,  470,  506,  707,
      505,  508,  507,  524,  542,  545,  546,  448,  543,  448,
      505,  449,  142,  449,  553,  425,  598,  736,  554,  576,
      142,  473,  598,  521,  587,  134,  135,  600,  426,  737,
      598,  601,  599,  134,  135,  608,  613,  539,  599,  609,
      614,  509,  540,  143,  144,  526,  599,  627,  628,  473,
     1285,  143,  144,  145,  146,  145,  147,  148,  145,  149,
      145,  145,  145,  150,  145,  145,  145,  145,  145,  145,
      151,  145,  145,  145,  145,  145,  145,  145,  145,  152,
      153,  154,  154,  154,  154,  155,  154,  154,  154,  154,

      154,  154,  156,  154,  154,  154,  154,  154,  157,  154,
      154,  158,  154,  154,  154,  145,  159,  145,  154,  145,
      154,  154,  154,  154,  155,  154,  154,  154,  154,  154,
      156,  154,  154,  154,  154,  154,  157,  154,  154,  158,
      154,  154,  154,  160,  161,  145,  154,  162,  163,  165,
     1285,   82,   83,  165,  166,   82,   83,  173,  166,   82,
       83,  173,  166,   82,   83,  167,  166,  510,  583,  167,
      469,  469,  469,  174,  168,  619,  511,  174,  168,  470,
      734,  187,  175,  188,  189,  534,  175,  179,  735,   82,
       83,  179,  190,   82,   83,  580,  180,  191,  425,  535,

      180,  169,  582,  181,  619,  169,  192,  181,  469,  469,
      469,  598,  182,  469,  469,  469,  182,  470,  472,  567,
      425,  515,  470,  765,  426,  618,  239,  599,  240,  241,
      568,  475,  170,  171,  620,  727,  170,  171,  580,  183,
      176,  177,  242,  183,  176,  177,  472,  187,  513,  188,
      189,  243,  196,  618,   82,  197,  473,   80,  190,  580,
      522,  523,  620,  191,  193,  194,  538,  621,  198,  524,
      184,  185,  192,  569,  184,  185,   80,  199,  196,  590,
       82,  197,  598,   80,  473,  588,  589,  584,  585,  479,
      591,  622,  603,  605,  198,  604,  621,  559,  599,  570,

      623,  624,   80,  199,  625,  872,  626,  602,  425,  244,
      245,  526,  426,  635,  588,  589,  568,  636,  603,  425,
      622,  425,  707,  426,  604,  426,  559,  666,  623,  624,
      193,  194,  625,  592,  626,  200,  201,  580,  640,  641,
      644,  527,  645,  528,  426,  425,  646,  648,  649,  426,
      653,  435,  435,  529,  654,  549,  666,  691,  691,  593,
      550,  200,  201,   80,   81,   80,   82,   83,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       84,   80,   80,   80,   80,   80,   80,   80,   80,   85,
       80,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,   80,   80,   80,  202,   80,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,   80,   80,   80,  202,  203,   87,  205,
      667,  206,  207,  205,  656,  206,  207,  664,  674,  657,
      598,  668,  670,  675,  671,  208,  665,  671,  659,  208,
     1281,  669,  552,  671,  209,  676,  599,  661,  209,  667,
      656,  677,  661,  661,  661,  684,  674,  661,  657,  661,
      668,  670,  675,  672,  754,  661,  661,  661,  505,  669,

      702,  210,  750,  673,  676,  210,  692,  751,  703,  703,
      677,  661,  692,  692,  684,  534,  692,  505,  661,  704,
      704,  704,  672,  754,  692,  692,  692, 1281,  470,  535,
      750,  673,  211,  212,  707,  751,  211,  212,   80,   81,
       80,   82,   83,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   84,   80,   80,   80,   80,
       80,   80,   80,   80,   85,   80,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
       80,   80,   80,  213,   80,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,   80,   80,
       80,  213,  214,   87,   80,   81,  215,   82,   83,   80,
       80,   80,   80,   80,   80,  216,  217,   80,  218,   80,
      219,   84,   80,   80,   80,   80,   80,   80,   80,   80,
       85,   80,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,   80,  221,   80,  220,
       80,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,  220,  220,  220,   80,   80,   80,  220,  222,   87,
      223,  224,  225,  226,  227,  223,  228,  229,  223,  223,
      230,  223,  223,  223,  223,  223,  223,  231,  223,  223,
      223,  223,  223,  223,  223,  223,  232,  233,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  223,  235,  223,  234,  223,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      223,  223,  223,  234,  236,  237,  247,  248,  249,  250,

      584,   81,  251,   82,   83,  779,   81,  802,   82,   83,
      780,   81,  252,   82,   83,  803,   81,   84,   82,   83,
      510,  253,   84,  694,  662,  510,   85,   84,  697,  511,
      695,   85,   84,  663,  511,  272,   85,  273,  274,  698,
      272,   85,  273,  274,  664,  682,  257,  275,  258,  259,
      580,  276,  275,  665,  434,  683,  276,  434,  260,  515,
      277,  257,  261,  258,  259,  277,  308, 1276,  309,  310,
      694,  262,  263,  291,  682,  697,  804,  292,  311,  254,
      255,  571,  312,  683,   86,   87,  262,  293,  805,   86,
       87,  313,  568,  534,   86,   87,  552, 1276,  263,   86,

       87,  264,  505,  522,  523,  435,  435,  535,  469,  469,
      469,  594,  299,  293,  300,  301,  264,  470,  278,  279,
      729,  505,  591,  278,  279,  436,  586,  264,  302,  265,
      266,  257,  267,  258,  259,  569,  779,  303,  304,  521,
      505,  780,  264,  268,  265,  266,  755,  261,  699,  314,
      315,  723,  752,  699,  699,  699,  262,  263,  699,  505,
      699,  570,  753,  662,  304,  592,  699,  699,  699,  469,
      469,  469,  663,  474,  505,  755,  756,  757,  470,  509,
      752,  722,  710,  263,  505,  758,  269,  710,  710,  710,
      753,  593,  710,  505,  710,  305,  306,  800,  800,  707,

      710,  710,  710,  505,  756, 1270,  757,  810,  811,  848,
      848,  848,  270,  758,  265,  266,  280,  281,  280,  282,
      283,  280,  280,  280,  280,  280,  280,  280,  280,  284,
      280,  280,  280,  285,  280,  280,  280,  280,  280,  280,
      280,  280,  286,  280,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  280,  288,
      280,  287,  280,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  280,  280,  280,  287,

      289,  290,  257,  294,  258,  259,  299,  767,  300,  301,
      810,  811,  534,  308,  295,  309,  310,  317,  292,  300,
      318,  317,  302,  300,  318,  311,  535,  262,  293,  312,
      786,  303,  304,  319,  694,  767,  685,  319,  313,  685,
      778,  787,  320,  713,  788,  685,  320,  789,  713,  713,
      713,  522,  523,  713,  293,  713,  790,  296,  304,  786,
      524,  713,  713,  713,  791,  686,  515,  793,  778,  787,
      794,  807,  788,  664, 1270,  687,  789, 1047, 1048,  831,
      847,  694,  665,  297,  790,  265,  266,  832,  832,  305,
      306,  707,  791,  538,  686,  793,  314,  315,  794,  807,

      321,  322,  526,  687,  321,  322,  323,  324,  323,  325,
      326,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  327,  323,  323,  323,  323,  323,  323,
      323,  323,  328,  329,  330,  331,  332,  333,  334,  335,
      334,  334,  334,  334,  334,  334,  334,  336,  337,  334,
      334,  334,  334,  338,  334,  334,  339,  334,  323,  340,
      323,  334,  323,  330,  331,  332,  333,  334,  335,  334,
      334,  334,  334,  334,  334,  336,  337,  334,  334,  334,
      334,  338,  334,  334,  339,  334,  323,  323,  323,  334,
      341,  342,  343,  344,  343,  345,  346,  343,  343,  343,

      343,  343,  343,  343,  343,  343,  343,  343,  343,  347,
      343,  343,  343,  343,  343,  343,  343,  343,  348,  343,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  343,  350,  343,  349,  343,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  343,  343,  343,  349,  351,  352,  343,  344,
      343,  345,  346,  343,  343,  343,  343,  343,  343,  343,
      353,  343,  343,  343,  343,  347,  343,  343,  343,  343,

      343,  343,  343,  343,  348,  343,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      343,  350,  343,  354,  343,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  343,  343,
      343,  354,  355,  352,  357,  742,   82,  358,  357,  359,
       82,  358,  366,  359,   82,  367,  366,  510,   82,  367,
      360,  368,  814,  815,  360,  368,  511,  821,  369,  361,
     1262,  694,  369,  361,  742,  822, 1262,  370,  777,  716,

      742,  370,  833,  505,  661,  716,  716,  816,  707,  716,
      814,  716,  815,  817,  846,  821,  362,  716,  716,  716,
      362,  818,  505,  822,  371,  721,  851,  777,  371,  742,
      721,  721,  661,  598,  505,  721,  816,  721,  694,  946,
      946,  946,  817,  721,  721,  721,  877,  363,  364,  599,
      818,  363,  364,  505,  851,  372,  373,  591,  513,  372,
      373,   80,   81,   80,   82,   83,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   84,   80,
       80,   80,   80,   80,   80,   80,   80,   85,   80,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,   80,   80,   80,  374,   80,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,   80,   80,   80,  374,  375,   87,  377,  768,  102,
      378,  377,  760,  102,  378,  385, 1249,  386,  387,  598,
      388,  522,  523,  379,  389,  390,  391,  379,  819,  505,
      524,  392,  380, 1249,  770,  599,  380,  469,  469,  469,
      393,  394,  385,  707,  386,  387,  470,  388,  505, 1234,
      697,  389,  390,  391,  768,  820,  823,  819,  392,  381,

      469,  469,  469,  381,  759, 1234,  569,  393,  394,  470,
      697,  398,  526,   82,  399,  568,  400,  469,  469,  469,
      401,  768,  705,  824,  820,  823,  470,  402,  592,  571,
      382,  383,  570,  826,  382,  383,  403,  697,  395,  396,
      568,  605,  527,  473,  398,  524,   82,  399,  707,  400,
      705,  827,  824,  401,  593,  891,  828,  697,  569,  829,
      402, 1214,  826,  404,  769,  395,  396, 1214,  594,  403,
      694,  473,  989,  686,  416,  591,  417,  418,  419,  591,
      827,  990,  852,  569,  570,  828,  419,  526,  829,  416,
      420,  417,  418,  419,  405,  406,  404,  853,  479,  421,

      422,  419,  686,  835,  907,  420,  855,  907,  892,  570,
      852,  836,  836,  907,  421,  422,  856,  694,  592,  858,
      857,  859,  592,  854,  707,  853,  422,  405,  406,  407,
      408, 1189,   82,  410,  855,  407,  407,  407, 1189,  407,
      860,  422,  407,  407,  593,  856,  411,  858,  593,  857,
      859,  407,  407,  407,  407,  412,  407,  423,  424,  724,
      505,  837,  837,  837,  724,  724,  724,  854,  860,  724,
      470,  724,  423,  424,  865,  592,  707,  724,  724,  725,
      866,  407,  407,  407,  515,  407,  728, 1047, 1048,  867,
     1418,  728,  728,  728, 1115,  854,  728,  861,  728,  978,

     1155,  593,  868,  865,  728,  728,  728,  862,  866,  407,
      407,  407,  873,  413,  414,  407,  408,  867,   82,  410,
     1418,  407,  407,  407,  870,  407,  861,  863,  407,  407,
      868,  869,  411, 1155,  707,  862,  871,  407,  407,  407,
      407,  412,  407,  739,  864,  876, 1152, 1078,  739,  739,
      739,  882,  870,  739,  889,  661,  863,  883, 1068, 1115,
      869,  739,  739,  739,  871,  898,  569,  407,  407,  407,
      764,  407,  864, 1113,  876,  764,  764,  764,  896,  882,
      764, 1113,  764,  889, 1418,  883,  897,  897,  764,  764,
      764,  707,  570,  978,  898,  407,  407,  407, 1052,  413,

      414,  429,  429,  430,  429,  429,  429,  429,  431,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  429,  429,  429,  432,  429,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  429,  429,  429,  433,  433,  429,  556,  905,  911,
      557,  558,  559, 1099,  906,  560,  782,  912, 1040,  561,

      562,  782,  782,  782,  914,  563,  782,  913,  782,  564,
      565, 1096, 1078,  556,  782,  782,  782,  905,  911,  557,
      558,  559,  906, 1068,  560,  989,  912,  561,  562,  969,
      970,  971,  914,  563,  990, 1066,  913,  564,  565,  429,
      429,  430,  429,  429,  429,  429,  431,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  429,  429,  429,  432,  429,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  429,
      429,  429,  433,  433,  429,  740,  741,  742,  743,  917,
      744,  766, 1066, 1054,  745,  746,  766,  766,  766,  878,
      747,  766, 1055,  766,  748,  749,  707,  915, 1418,  766,
      766,  766,  995,  916,  740,  741,  742,  743,  917,  744,
      598, 1418,  745,  746,  775, 1418,  872,  877,  747,  775,
      775,  775,  748,  749,  775,  915,  776,  568,  591,  580,
      785,  916,  775,  775,  775,  785,  785,  785,  435,  888,
      785,  435,  785,  592,  937,  893,  661, 1418,  785,  785,

      785,  806,  806,  806,  918,  890,  806,  918,  661,  469,
      469,  469, 1059,  918,  806,  806,  806,  888,  470,  593,
      569,  592,  937,  886,  893,  901,  902,  903,  903,  903,
      903, 1418,  919,  890, 1418, 1418,  938,  887, 1052,  838,
     1418, 1418,  689,  932,  934,  904,  570,  593,  904,  925,
      924,  924,  886,  933,  927,  927,  927,  926,  926,  936,
      798,  935,  921,  470,  938,  887,  920, 1418,  838,  939,
     1418,  940,  932,  934,  941,  943, 1418,  942,  798,  437,
      798,  933,  437,  469,  469,  469,  973,  973,  936,  935,
      450,  921,  470,  450,  970,  920,  944,  939,  922,  945,

      940, 1037,  941,  904,  943,  942,  904,  908,  908,  909,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  944,  928,  922,  945,  908,
      908,  908,  908,  908,  908,  947, 1036,  948,  949, 1054,
      950,  951,  952,  910, 1002,  953,  933,  962, 1055,  963,
      964,  965,  966,  967,  928,  968,  974,  983, 1002,  908,
      908,  908,  984,  908,  947,  948, 1140,  949,  950,  951,
      985,  952,  910,  953,  933, 1141,  962,  963,  964,  965,
      966,  707,  967,  925,  968,  974,  983,  908,  908,  908,
      992,  984,  908,  954,  955,  976,  902,  977,  956,  980,

      981,  982,  957,  958,  986,  978,  987,  689,  959,  982,
      982,  982,  960,  961,  991,  979,  993,  994,  992,  904,
      919,  689,  954,  955,  982,  982,  982,  956, 1003,  904,
      957,  958,  995,  986, 1004,  987,  959, 1005, 1007, 1418,
      960,  961, 1418,  991,  904,  993,  994, 1418, 1418,  685,
     1418, 1008,  685, 1009,  996,  900, 1418, 1003,  685,  998,
      998,  998, 1010, 1004, 1011, 1012, 1005, 1007,  470, 1013,
      997, 1140, 1018,  979, 1006, 1006, 1006,  904,  544, 1008,
     1141,  544, 1009,  996,  469,  469,  469,  904,  617,  798,
     1010,  617, 1011,  470, 1012,  630, 1019, 1013,  630,  997,

     1018,  880,  904,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988, 1020, 1021,  999, 1019,  988,  988,  988,  988,  988,
      988,  946,  946,  946, 1015, 1016, 1017,  946,  946,  946,
     1022, 1023, 1024,  879, 1025, 1026, 1027, 1028, 1029, 1020,
     1021,  999, 1030,  875, 1031,  988,  988,  988, 1032,  988,
      874, 1033, 1034, 1016, 1017, 1035, 1038,  439, 1022, 1023,
     1042, 1024, 1025, 1026, 1027, 1028, 1044, 1029, 1039, 1040,
     1041, 1030, 1031,  988,  988,  988,  850, 1032,  988, 1033,
     1043,  970,  971,  985, 1035, 1038,  439, 1053, 1042,  515,

     1045,  981, 1046,  931, 1044, 1046,  982, 1046, 1058, 1014,
      978, 1049, 1050, 1051, 1060,  978, 1051, 1051, 1051,  931,
      979, 1051, 1051, 1051, 1056,  979, 1053,  986, 1057,  907,
      918,  904,  907,  918, 1069,  707,  904, 1058,  907,  918,
     1070,  904, 1071, 1060, 1072, 1057, 1061, 1061, 1061, 1062,
     1062, 1062, 1073, 1063, 1074,  470,  986, 1075,  470, 1006,
     1006, 1006, 1069, 1006, 1006, 1006,  689, 1076, 1070, 1079,
     1071, 1087, 1072, 1015, 1016, 1017, 1080, 1081,  979, 1082,
     1073, 1083, 1074,  979, 1084, 1085, 1075, 1086, 1090,  904,
     1017, 1016, 1017, 1088,  904, 1076, 1091, 1079, 1092,  904,

     1087, 1093,  813, 1094, 1080, 1081, 1095, 1082, 1100, 1083,
     1089, 1097, 1084, 1085,  900, 1086, 1090, 1034, 1016, 1017,
      633,  808, 1088,  633, 1091, 1116, 1092, 1098, 1040, 1041,
     1093, 1094, 1059,  808, 1095, 1056, 1100, 1067, 1089, 1057,
     1097, 1043,  970,  971, 1101, 1050, 1102, 1102, 1051, 1102,
     1103, 1104, 1105, 1116,  978,  798, 1057,  978, 1105, 1105,
     1105, 1105, 1105, 1105,  979,  907, 1125,  979,  907, 1056,
      904, 1117, 1107, 1057,  907, 1118,  918, 1119,  904,  918,
     1120,  904, 1108, 1108, 1108,  918, 1121, 1122, 1123, 1124,
     1057,  470, 1109, 1109, 1109, 1125, 1063,  798, 1126, 1117,

     1107,  470, 1127, 1118, 1128, 1119, 1129, 1131, 1120,  946,
      946,  946, 1130, 1132, 1121, 1122, 1123, 1124, 1133,  808,
     1134, 1135,  979, 1136, 1137,  979, 1126, 1138,  904, 1139,
     1127, 1142, 1128, 1149, 1129, 1131,  904,  638,  894,  904,
      638, 1130, 1132, 1098, 1040, 1041,  885, 1133, 1134, 1157,
     1135, 1136, 1137, 1143, 1104, 1144, 1138, 1139, 1156,  884,
     1142, 1149, 1162,  978, 1144, 1105, 1144, 1145, 1146, 1147,
     1147, 1147, 1147,  979,  978, 1147, 1147, 1147, 1157, 1150,
     1150, 1150, 1158, 1159,  979, 1160, 1156,  904,  470, 1161,
      904, 1162, 1151, 1151, 1151,  904, 1063, 1006, 1006, 1006,

     1163,  470, 1164,  881, 1166, 1167,  946,  946,  946, 1168,
     1158, 1159, 1169, 1160,  946,  946,  946, 1161,  946,  946,
      946, 1170, 1171, 1172, 1173, 1174,  434, 1175, 1163,  434,
     1164,  979, 1166, 1167,  880,  435, 1182, 1168,  435, 1190,
     1169,  437,  979,  450,  437,  904,  450,  879,  904, 1170,
     1171, 1172, 1173,  904, 1174, 1175, 1177, 1146, 1178, 1178,
     1147, 1178, 1179, 1180, 1181, 1182,  978, 1190,  580,  978,
     1181, 1181, 1181, 1181, 1181, 1181,  979, 1192, 1193,  979,
      580,  875,  904, 1183, 1183, 1183, 1194, 1184, 1184, 1184,
      904, 1063,  470,  904, 1195, 1196,  470, 1185, 1185, 1185,

     1006, 1006, 1006, 1197, 1198, 1192, 1193, 1006, 1006, 1006,
     1006, 1006, 1006, 1199, 1194,  946,  946,  946,  946,  946,
      946, 1200, 1195, 1196, 1201, 1202, 1203, 1210, 1210, 1210,
      544, 1197, 1198,  544,  979, 1209,  470,  979,  874,  850,
      904, 1199, 1206, 1207, 1208, 1204, 1180, 1205,  904, 1200,
     1215,  904, 1201, 1202, 1203,  978, 1205, 1181, 1205, 1208,
     1208, 1208,  904,  808, 1209,  979,  978, 1208, 1208, 1208,
     1185, 1185, 1185, 1216, 1217, 1186,  979, 1218, 1215,  904,
     1211, 1211, 1211, 1219, 1063, 1220, 1221,  904, 1222,  470,
     1006, 1006, 1006, 1006, 1006, 1006,  946,  946,  946, 1223,

      733, 1216, 1217, 1224, 1235, 1218,  849, 1225, 1207, 1226,
     1236, 1219,  515, 1220, 1221, 1237, 1222,  978, 1238, 1239,
      904,  515,  845,  979, 1227, 1228, 1229,  979, 1223,  844,
      617, 1224, 1235,  617,  979,  768,  844,  904, 1236, 1226,
     1208, 1226,  842, 1237,  904,  904, 1238, 1239, 1186,  978,
     1229, 1229, 1229, 1229, 1229, 1229, 1230, 1230, 1230,  979,
     1231, 1231, 1231,  768, 1063,  470, 1006, 1006, 1006,  470,
      904, 1250,  841,  904, 1240, 1228, 1241, 1241, 1229, 1241,
     1242, 1243, 1244,  630,  978,  979,  630,  978, 1244, 1244,
     1244, 1244, 1244, 1244,  979,  840, 1251,  979, 1252, 1250,

      904, 1263,  904, 1245, 1245, 1245,  633,  638,  904,  633,
      638,  904,  470,  707, 1246, 1246, 1246,  979, 1063,  946,
      946,  946, 1271,  470, 1251,  834, 1252,  437,  904, 1263,
      437,  904,  834, 1253, 1243, 1254, 1254, 1244, 1254, 1255,
     1256, 1257,  450,  978,  689,  450,  978, 1257, 1257, 1257,
     1271,  437,  979,  979,  437,  979,  979,  689,  904,  904,
     1257, 1257, 1257, 1258, 1258, 1258,  904,  904,  617,  904,
      825,  617,  470, 1259, 1259, 1259, 1148, 1063,  813, 1148,
      904,  808,  470, 1006, 1006, 1006, 1264, 1256, 1265, 1265,
     1257, 1265, 1255, 1256, 1257,  617,  978,  658,  651,  978,

     1257, 1257, 1257, 1257, 1257, 1257,  979,  617,  648,  979,
      617,  979,  904,  660,  979,  659,  801,  904,  798,  640,
      904,  639,  796,  904,  795,  904, 1266, 1266, 1266,  634,
     1267, 1267, 1267,  632, 1063,  470,  629,  627,  904,  470,
     1264, 1256, 1265, 1265, 1257, 1265, 1272, 1272, 1272,  792,
      978,  616,  784,  978,  783,  470,  611, 1273, 1273, 1273,
      979, 1063,  781,  979,  979,  659,  470,  979,  774,  773,
      904, 1277, 1277, 1277,  772, 1278, 1278, 1278,  904, 1063,
      470,  904,  771,  596,  470, 1282, 1282, 1282, 1283, 1283,
     1283,  595, 1063,  659,  470,  580,  580,  470, 1286, 1286,

     1286, 1287, 1287, 1287,  578, 1063,  763,  470,  762,  761,
      470, 1288, 1288, 1288,  573, 1289, 1289, 1289,  979, 1063,
      470,  979,  572,  566,  470, 1290, 1290, 1290, 1291, 1291,
     1291,  738, 1063,  547,  470,  545,  733,  470, 1292, 1292,
     1292, 1293, 1293, 1293,  541, 1063,  732,  470,  731,  532,
      470, 1294, 1294, 1294, 1295, 1295, 1295,  531, 1063,  530,
      470,  531,  730,  470, 1296, 1296, 1296, 1297, 1297, 1297,
      519, 1063,  515,  470,  503,  720,  470, 1298, 1298, 1298,
     1299, 1299, 1299,  719, 1063,  718,  470,  718,  496,  470,
     1300, 1300, 1300, 1301, 1301, 1301,  715, 1063,  714,  470,

      490,  712,  470, 1302, 1302, 1302, 1303, 1303, 1303,  711,
     1063,  485,  470,  709,  708,  470, 1304, 1304, 1304, 1305,
     1305, 1305,  477, 1063,  707,  470,  700,  465,  470, 1306,
     1306, 1306, 1307, 1307, 1307,  459, 1063,  689,  470,  454,
      681,  470, 1308, 1308, 1308, 1309, 1309, 1309,  679, 1063,
      447,  470,  428,  660,  470, 1310, 1310, 1310, 1311, 1311,
     1311,  659, 1063,  658,  470,  655,  651,  470, 1312, 1312,
     1312, 1313, 1313, 1313,  427, 1063,  428,  470,  427,  428,
      470, 1314, 1314, 1314, 1315, 1315, 1315,  427, 1063,  643,
      470,  428,  427,  470, 1316, 1316, 1316, 1317, 1317, 1317,

      639, 1063,  428,  470,  427,  428,  470, 1318, 1318, 1318,
     1319, 1319, 1319,  427, 1063,  634,  470,  632,  631,  470,
     1320, 1320, 1320, 1321, 1321, 1321,  427, 1063,  629,  470,
      427,  616,  470, 1322, 1322, 1322, 1323, 1323, 1323,  615,
     1063,  611,  470,  610,  607,  470, 1324, 1324, 1324, 1325,
     1325, 1325,  596, 1063,  595,  470,  586,  580,  470, 1326,
     1326, 1326, 1327, 1327, 1327,  547, 1063,  581,  470,  580,
      580,  470, 1328, 1328, 1328, 1329, 1329, 1329,  580, 1063,
      578,  470,  577,  575,  470, 1330, 1330, 1330, 1331, 1331,
     1331,  573, 1063,  572,  470,  566,  555,  470, 1332, 1332,

     1332, 1333, 1333, 1333,  552, 1063,  428,  470,  427,  428,
      470, 1334, 1334, 1334, 1335, 1335, 1335,  427, 1063,  547,
      470,  427,  541,  470, 1336, 1336, 1336, 1337, 1337, 1337,
      537, 1063,  533,  470,  532,  531,  470, 1338, 1338, 1338,
     1339, 1339, 1339,  530, 1063,  515,  470,  515,  515,  470,
     1340, 1340, 1340, 1341, 1341, 1341,  515, 1063,  503,  470,
      502,  499,  470, 1342, 1342, 1342, 1343, 1343, 1343,  496,
     1063,  494,  470,  490,  489,  470, 1344, 1344, 1344, 1345,
     1345, 1345,  485, 1063,  483,  470,  468,  427,  470, 1346,
     1346, 1346, 1347, 1347, 1347,  467, 1063,  465,  470,  463,

      459,  470, 1348, 1348, 1348, 1349, 1349, 1349,  458, 1063,
      457,  470,  454,  427,  470, 1350, 1350, 1350, 1351, 1351,
     1351,  447, 1063,  427,  470,  436,  427,  470, 1352, 1352,
     1352, 1353, 1353, 1353,  428, 1063,  427,  470, 1418, 1418,
      470, 1354, 1354, 1354, 1355, 1355, 1355, 1418, 1063, 1418,
      470, 1418, 1418,  470, 1356, 1356, 1356, 1357, 1357, 1357,
     1418, 1063, 1418,  470, 1418, 1418,  470, 1358, 1358, 1358,
     1359, 1359, 1359, 1418, 1063, 1418,  470, 1418, 1418,  470,
     1360, 1360, 1360, 1361, 1361, 1361, 1418, 1063, 1418,  470,
     1418, 1418,  470, 1362, 1362, 1362, 1363, 1363, 1363, 1418,

     1063, 1418,  470, 1418, 1418,  470, 1364, 1364, 1364, 1365,
     1365, 1365, 1418, 1063, 1418,  470, 1418, 1418,  470, 1366,
     1366, 1366, 1367, 1367, 1367, 1418, 1063, 1418,  470, 1418,
     1418,  470, 1368, 1368, 1368, 1369, 1369, 1369, 1418, 1063,
     1418,  470, 1418, 1418,  470, 1370, 1370, 1370, 1371, 1371,
     1371, 1418, 1063, 1418,  470, 1418, 1418,  470, 1372, 1372,
     1372, 1373, 1373, 1373, 1418, 1063, 1418,  470, 1418, 1418,
      470, 1374, 1374, 1374, 1375, 1375, 1375, 1418, 1063, 1418,
      470, 1418, 1418,  470, 1376, 1376, 1376, 1377, 1377, 1377,
     1418, 1063, 1418,  470, 1418, 1418,  470, 1378, 1378, 1378,

     1379, 1379, 1379, 1418, 1063, 1418,  470, 1418, 1418,  470,
     1380, 1380, 1380, 1381, 1381, 1381, 1418, 1063, 1418,  470,
     1418, 1418,  470, 1382, 1382, 1382, 1383, 1383, 1383, 1418,
     1063, 1418,  470, 1418, 1418,  470, 1384, 1384, 1384, 1385,
     1385, 1385, 1418, 1063, 1418,  470, 1418, 1418,  470, 1386,
     1386, 1386, 1387, 1387, 1387, 1418, 1063, 1418,  470, 1418,
     1418,  470, 1388, 1388, 1388, 1389, 1389, 1389, 1418, 1063,
     1418,  470, 1418, 1418,  470, 1390, 1390, 1390, 1391, 1391,
     1391, 1418, 1063, 1418,  470, 1418, 1418,  470, 1392, 1392,
     1392, 1393, 1393, 1393, 1418, 1063, 1418,  470, 1418, 1418,

      470, 1394, 1394, 1394, 1395, 1395, 1395, 1418, 1063, 1418,
      470, 1418, 1418,  470, 1396, 1396, 1396, 1397, 1397, 1397,
     1418, 1063, 1418,  470, 1418, 1418,  470, 1398, 1398, 1398,
     1399, 1399, 1399, 1418, 1063, 1418,  470, 1418, 1418,  470,
     1400, 1400, 1400, 1401, 1401, 1401, 1418, 1063, 1418,  470,
     1418, 1418,  470, 1402, 1402, 1402, 1403, 1403, 1403, 1418,
     1063, 1418,  470, 1418, 1418,  470, 1404, 1404, 1404, 1405,
     1405, 1405, 1418, 1063, 1418,  470, 1418, 1418,  470, 1406,
     1406, 1406, 1407, 1407, 1407, 1418, 1063, 1418,  470, 1418,
     1418,  470, 1408, 1408, 1408, 1409, 1409, 1409, 1418, 1063,

     1418,  470, 1418, 1418,  470, 1410, 1410, 1410, 1411, 1411,
     1411, 1418, 1063, 1418,  470, 1418, 1418,  470, 1412, 1412,
     1412, 1418, 1063, 1418, 1413, 1413, 1413,  470, 1063, 1418,
     1414, 1414, 1414,  470, 1063, 1418, 1415, 1415, 1415,  470,
     1063, 1418, 1416, 1416, 1416,  470, 1063, 1418, 1417, 1417,
     1417,  470, 1063, 1418, 1417, 1417, 1417,  470, 1063,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  271,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  415,

      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  455,
      455,  455, 1418,  455,  455, 1418,  455, 1418,  455,  455,
      455,  455, 1418,  455,  455,  455,  455,  455,  455,  456,
      456,  456, 1418,  456,  456,  456,  456, 1418,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  460,
      460,  460, 1418,  460,  460, 1418,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460, 1418,  460,  464,
      464,  464, 1418,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  466,

      466,  466, 1418,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  471,
      471,  471, 1418, 1418, 1418, 1418,  471, 1418, 1418, 1418,
     1418,  471, 1418, 1418,  471,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  480,  480,  480, 1418, 1418,
      480, 1418,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480, 1418,  480,  484,  484,  484, 1418,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  486,  486,  486, 1418, 1418,

      486, 1418,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  491,  491,  491, 1418, 1418,
      491,  491,  491, 1418,  491,  491,  491,  491,  491,  491,
      491,  491,  491, 1418,  491,  495,  495,  495, 1418,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497, 1418,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  498,  498, 1418,  498,  498,
      498,  498,  498,  498, 1418, 1418,  498,  498,  498,  498,
      498,  498,  498, 1418,  498,  504,  504,  504, 1418,  504,

      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  512, 1418, 1418, 1418, 1418,
     1418, 1418,  512, 1418, 1418, 1418, 1418,  512, 1418, 1418,
      512,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514, 1418,
      514,  525,  525, 1418, 1418, 1418, 1418, 1418,  525, 1418,
     1418, 1418, 1418,  525, 1418, 1418,  525,  525,  536, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,  536, 1418,
      536, 1418, 1418,  536,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,

      548,  548,  548,  548,  551, 1418,  551, 1418,  551,  551,
      551,  551,  551,  551,  551, 1418,  551, 1418,  551,  551,
     1418,  551,  574,  574,  574, 1418,  574,  574,  574,  574,
      574,  574,  574, 1418,  574,  574,  574,  574,  574,  574,
      574,  574,  579,  579,  579, 1418,  579,  579,  579,  579,
      579,  579,  579, 1418,  579,  579,  579,  579,  579, 1418,
      579,  579,  597,  597,  597, 1418,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597, 1418,  597,
     1418,  597,  598,  598,  598, 1418,  598,  598,  598,  598,
      598,  598,  598,  598,  598, 1418,  598,  598, 1418,  598,

     1418,  598,  599, 1418,  599, 1418,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599, 1418,  599,
     1418,  599,  606, 1418,  606, 1418,  606,  606,  606,  606,
      606,  606,  606, 1418,  606,  606,  606,  606,  606,  606,
      606,  606,  612, 1418,  612, 1418,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  637,  637,  637, 1418,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  642,  642,  642, 1418,  642,  642,  642,  642,
     1418,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  650, 1418, 1418,  650, 1418,  650, 1418,  650,
      650, 1418,  650, 1418,  650, 1418, 1418,  650,  652,  652,
      652, 1418,  652, 1418,  652,  652,  652,  652,  652, 1418,
      652, 1418,  652,  652, 1418,  652, 1418,  652,  678,  678,
      678, 1418,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  680,  680,
      680, 1418,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  455,  455,

      455, 1418,  455,  455, 1418,  455, 1418,  455,  455,  455,
      455, 1418,  455,  455,  455,  455,  455,  455,  688,  688,
      688, 1418,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688, 1418,  688,  690,  690,
      690, 1418,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  460,  460,
      460, 1418,  460,  460, 1418,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460, 1418,  460,  693,  693,
      693, 1418,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  696,  696,

      696, 1418,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  701,  701,
      701, 1418,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  471,  471,
      471, 1418, 1418, 1418, 1418,  471, 1418, 1418, 1418, 1418,
      471, 1418, 1418,  471,  706,  706, 1418,  706,  706,  706,
      706,  706,  706,  706, 1418,  706,  706,  706,  706,  706,
      706,  706, 1418,  706,  480,  480,  480, 1418, 1418,  480,
     1418,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480, 1418,  480,  486,  486,  486, 1418, 1418,  486,

     1418,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  491,  491,  491, 1418, 1418,  491,
      491,  491, 1418,  491,  491,  491,  491,  491,  491,  491,
      491,  491, 1418,  491,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497, 1418,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  717,  717, 1418,  717,  717,  717,
      717,  717,  717, 1418, 1418,  717,  717,  717,  717,  717,
      717,  717, 1418,  717,  504,  504,  504, 1418,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  512, 1418, 1418, 1418, 1418, 1418,

     1418,  512, 1418, 1418, 1418, 1418,  512, 1418, 1418,  512,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514, 1418,  514,
      525,  525, 1418, 1418, 1418, 1418, 1418,  525, 1418, 1418,
     1418, 1418,  525, 1418, 1418,  525,  525,  536, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418,  536, 1418,  536,
     1418, 1418,  536,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  551, 1418,  551, 1418,  551,  551,  551,
      551,  551,  551,  551, 1418,  551, 1418,  551,  551, 1418,

      551,  574,  574,  574, 1418,  574,  574,  574,  574,  574,
      574,  574, 1418,  574,  574,  574,  574,  574,  574,  574,
      574,  579,  579,  579, 1418,  579,  579,  579,  579,  579,
      579,  579, 1418,  579,  579,  579,  579,  579, 1418,  579,
      579,  597,  597,  597, 1418,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597, 1418,  597, 1418,
      597,  598,  598,  598, 1418,  598,  598,  598,  598,  598,
      598,  598,  598,  598, 1418,  598,  598, 1418,  598, 1418,
      598,  599, 1418,  599, 1418,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599, 1418,  599, 1418,

      599,  606, 1418,  606, 1418,  606,  606,  606,  606,  606,
      606,  606, 1418,  606,  606,  606,  606,  606,  606,  606,
      606,  612, 1418,  612, 1418,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  797,  797,  797, 1418,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797, 1418,
      797,  799,  799,  799, 1418,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  650, 1418, 1418,  650, 1418,  650, 1418,  650,  650,
     1418,  650, 1418,  650, 1418, 1418,  650,  652,  652,  652,

     1418,  652, 1418,  652,  652,  652,  652,  652, 1418,  652,
     1418,  652,  652, 1418,  652, 1418,  652,  809,  809,  809,
     1418,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  812,  812,  812,
     1418,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  678,  678,  678,
     1418,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  680,  680,  680,
     1418,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  830,  830,  830,

     1418,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830, 1418,  830,  455,  455,  455,
     1418,  455,  455, 1418,  455, 1418,  455,  455,  455,  455,
     1418,  455,  455,  455,  455,  455,  455,  693,  693,  693,
     1418,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  694,  694,  694,
     1418,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  696,  696,  696,
     1418,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  697,  697,  697,

     1418,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  460,  460,  460,
     1418,  460,  460, 1418,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460, 1418,  460,  471,  471,  471,
     1418, 1418, 1418, 1418,  471, 1418, 1418, 1418, 1418,  471,
     1418, 1418,  471,  839,  839, 1418,  839,  839,  839,  839,
      839,  839,  839, 1418,  839,  839,  839,  839,  839,  839,
      839, 1418,  839,  480,  480,  480, 1418, 1418,  480, 1418,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480, 1418,  480,  486,  486,  486, 1418, 1418,  486, 1418,

      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  491,  491,  491, 1418, 1418,  491,  491,
      491, 1418,  491,  491,  491,  491,  491,  491,  491,  491,
      491, 1418,  491,  843,  843, 1418,  843,  843,  843,  843,
      843,  843, 1418, 1418,  843,  843,  843,  843,  843,  843,
      843, 1418,  843,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497, 1418,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  504,  504,  504, 1418,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514, 1418,  514,  551, 1418,  551, 1418,  551,  551,  551,
      551,  551,  551,  551, 1418,  551, 1418,  551,  551, 1418,
      551,  574,  574,  574, 1418,  574,  574,  574,  574,  574,
      574,  574, 1418,  574,  574,  574,  574,  574,  574,  574,
      574,  579,  579,  579, 1418,  579,  579,  579,  579,  579,
      579,  579, 1418,  579,  579,  579,  579,  579, 1418,  579,
      579,  599, 1418,  599, 1418,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599, 1418,  599, 1418,
      599,  597,  597,  597, 1418,  597,  597,  597,  597,  597,

      597,  597,  597,  597,  597,  597,  597, 1418,  597, 1418,
      597,  606, 1418,  606, 1418,  606,  606,  606,  606,  606,
      606,  606, 1418,  606,  606,  606,  606,  606,  606,  606,
      606,  612, 1418,  612, 1418,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  895,  895,  895, 1418,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895, 1418,
      895,  652,  652,  652, 1418,  652, 1418,  652,  652,  652,
      652,  652, 1418,  652, 1418,  652,  652, 1418,  652, 1418,
      652,  809,  809,  809, 1418,  809,  809,  809,  809,  809,

      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  899,  899,  899, 1418,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  812,  812,  812, 1418,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  678,  678,  678, 1418,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  450, 1418, 1418,  450, 1418, 1418, 1418,  450, 1418,
     1418, 1418, 1418,  450, 1418, 1418,  450,  923,  923,  923,
     1418,  923,  923,  923,  923,  923,  923,  923,  923,  923,

      923,  923,  923,  923,  923, 1418,  923,  693,  693,  693,
     1418,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  471,  471,  471,
     1418, 1418, 1418, 1418,  471, 1418, 1418, 1418, 1418,  471,
     1418, 1418,  471,  929,  929, 1418,  929,  929,  929,  929,
      929,  929,  929, 1418,  929,  929,  929,  929,  929,  929,
      929, 1418,  929,  480,  480,  480, 1418, 1418,  480, 1418,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480, 1418,  480,  486,  486,  486, 1418, 1418,  486, 1418,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,

      486,  486,  486,  491,  491,  491, 1418, 1418,  491,  491,
      491, 1418,  491,  491,  491,  491,  491,  491,  491,  491,
      491, 1418,  491,  930,  930, 1418,  930,  930,  930,  930,
      930,  930, 1418, 1418,  930,  930,  930,  930,  930,  930,
      930, 1418,  930,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497, 1418,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  504,  504,  504, 1418,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514, 1418,  514,  551, 1418,  551, 1418,  551,  551,  551,
      551,  551,  551,  551,  551,  551, 1418,  551,  551, 1418,
      551,  599, 1418,  599, 1418,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599, 1418,  599, 1418,
      599,  612, 1418,  612, 1418,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  972,  972,  972, 1418,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972, 1418,
      972,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,

      975, 1000, 1000, 1418, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1418, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1418,
     1000, 1001, 1001, 1418, 1001, 1001, 1001, 1001, 1001, 1001,
     1418, 1418, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1418,
     1001, 1064, 1064, 1418, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1418, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1418,
     1064, 1065, 1065, 1418, 1065, 1065, 1065, 1065, 1065, 1065,
     1418, 1418, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1418,
     1065, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,

     1077, 1106, 1418, 1418, 1418, 1106, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1106, 1418, 1106, 1110, 1110, 1110,
     1110, 1110, 1110, 1418, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1111, 1111, 1418,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1418, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1418, 1111, 1112, 1112, 1418,
     1112, 1112, 1112, 1112, 1112, 1112, 1418, 1418, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1418, 1112, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1153, 1153, 1418,

     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1418, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1418, 1153, 1154, 1154, 1418,
     1154, 1154, 1154, 1154, 1154, 1154, 1418, 1418, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1418, 1154, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1418, 1165, 1165, 1418, 1165, 1165, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1418, 1176, 1176, 1418, 1176, 1176, 1187, 1187, 1418,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1418, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1418, 1187, 1188, 1188, 1418,

     1188, 1188, 1188, 1188, 1188, 1188, 1418, 1418, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1418, 1188, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1418, 1191, 1191, 1418, 1191, 1191, 1212, 1212, 1418,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1418, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1418, 1212, 1213, 1213, 1418,
     1213, 1213, 1213, 1213, 1213, 1213, 1418, 1418, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1418, 1213, 1232, 1232, 1418,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1418, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1418, 1232, 1233, 1233, 1418,

     1233, 1233, 1233, 1233, 1233, 1233, 1418, 1418, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1418, 1233, 1247, 1247, 1418,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1418, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1418, 1247, 1248, 1248, 1418,
     1248, 1248, 1248, 1248, 1248, 1248, 1418, 1418, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1418, 1248, 1260, 1260, 1418,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1418, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1418, 1260, 1261, 1261, 1418,
     1261, 1261, 1261, 1261, 1261, 1261, 1418, 1418, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1418, 1261, 1268, 1268, 1418,

     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1418, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1418, 1268, 1269, 1269, 1418,
     1269, 1269, 1269, 1269, 1269, 1269, 1418, 1418, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1418, 1269, 1274, 1274, 1418,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1418, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1418, 1274, 1275, 1275, 1418,
     1275, 1275, 1275, 1275, 1275, 1275, 1418, 1418, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1418, 1275, 1279, 1279, 1418,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1418, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1418, 1279, 1280, 1280, 1418,

     1280, 1280, 1280, 1280, 1280, 1280, 1418, 1418, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1418, 1280, 1284, 1284, 1418,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1418, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1418, 1284,   79, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,

     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418
    } ;

static yyconst flex_int16_t yy_chk[8225] =
    {   0,
        0,    1,    0,    1,    1,    2,    0,    2,    2,    3,
      195,    3,    3,  202,   84,   94,  104,    1,   84,   94,
      104,    2,  202,  119,  132,    3,    1,  119,  132,  195,
        2,  196,  108,  123,    3,  110,  159,  159,  197,  109,
      107,  109,  110,  110,  112,  111,  122,  140,  122,  151,
      196,  140,  220,  151,  154,  154,  154,  197,  210,  210,
      209,  108,  123,  154,  110,  873,  220,  109,  107,  109,
      110,  110,  112,  111,  122,  167,  122,  174,  181,  167,
      215,  174,  181,  209,    1,    1,   96,   96,    2,    2,
      215,  873,    3,    3,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    9,  211,    9,    9,  516,    9, 1410,  225,
       10,    9,   10,   10,  225,   10,  516,  191,    9,   10,
       11,  191,   11,   11,  200,   11,   10,    9,   12,  248,
       12,   12,  208,   12,  248,   10,   11,  201,  156,  156,
      156,  199,  208,  200,   12,   11,  208,  156,  157,  157,

      157,  198,  157,   12,  213,  213,  201,  157,  198, 1284,
      199,  199,  198,  213,  231,  235,  235,  242,  231,  252,
      198,  242,   11,  252,  261,  276,  298,  543,  261,  276,
       12,  156,  301,  211,  292,    9,    9,  302,  292,  543,
      306,  302,  298,   10,   10,  312,  319,  539,  301,  312,
      319,  200,  539,   11,   11,  213,  306,  340,  340,  156,
     1281,   12,   12,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   15,
     1280,   15,   15,   16,   15,   16,   16,   17,   16,   17,
       17,   18,   17,   18,   18,   15,   18,  203,  286,   16,
      155,  155,  155,   17,   15,  331,  203,   18,   16,  155,
      542,   21,   17,   21,   21,  222,   18,   19,  542,   19,
       19,   20,   21,   20,   20,  286,   19,   21,  285,  222,

       20,   15,  285,   19,  331,   16,   21,   20,  162,  162,
      162,  305,   19,  158,  158,  158,   20,  162,  155,  267,
      327,  517,  158,  582,  327,  330,   35,  305,   35,   35,
      267,  158,   15,   15,  332,  517,   16,   16,  285,   19,
       17,   17,   35,   20,   18,   18,  155,   22,  203,   22,
       22,   35,   23,  330,   23,   23,  158,   23,   22,  582,
      214,  214,  332,   22,   21,   21,  222,  333,   23,  214,
       19,   19,   22,  267,   20,   20,   23,   23,   24,  294,
       24,   24,  303,   24,  158,  293,  293,  288,  288,  162,
      294,  335,  304,  305,   24,  304,  333,  304,  303,  267,

      336,  337,   24,   24,  338,  872,  339,  303,  347,   35,
       35,  214,  347,  360,  293,  293,  872,  360,  304,  369,
      335,  379, 1279,  369,  304,  379,  304,  438,  336,  337,
       22,   22,  338,  294,  339,   23,   23,  288,  381,  381,
      392,  214,  402,  528,  392,  411,  402,  404,  404,  411,
      420,  432,  432,  528,  420,  549,  438,  457,  457,  294,
      549,   24,   24,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   27,
      439,   27,   27,   28,  422,   28,   28,  435,  443,  422,
      597,  440,  441,  444,  442,   27,  435,  442,  553,   28,
     1276,  440,  553,  442,   27,  445,  597,  427,   28,  439,
      422,  446,  427,  427,  427,  452,  443,  427,  422,  427,
      440,  441,  444,  442,  561,  427,  427,  427,  504,  440,

      467,   27,  557,  442,  445,   28,  458,  558,  467,  467,
      446,  458,  458,  458,  452,  534,  458,  504,  458,  469,
      469,  469,  442,  561,  458,  458,  458, 1275,  469,  534,
      557,  442,   27,   27, 1274,  558,   28,   28,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   36,   36,   36,   36,

      585,   37,   36,   37,   37,  607,   38,  653,   38,   38,
      607,   39,   36,   39,   39,  653,   40,   37,   40,   40,
      510,   36,   38,  461,  434,  512,   37,   39,  462,  510,
      461,   38,   40,  434,  512,   43,   39,   43,   43,  462,
       44,   40,   44,   44,  436,  451,   41,   43,   41,   41,
      585,   43,   44,  436, 1442,  451,   44, 1442,   41,  521,
       43,   47,   41,   47,   47,   44,   51, 1270,   51,   51,
      461,   41,   41,   47,  451,  462,  654,   47,   51,   36,
       36,  268,   51,  451,   37,   37,   47,   47,  654,   38,
       38,   51,  268,  536,   39,   39,  268, 1269,   41,   40,

       40,   41,  509,  522,  522,  434,  434,  536,  471,  471,
      471,  295,   49,   47,   49,   49,   47,  471,   43,   43,
      522,  509,  295,   44,   44,  436,  295,   41,   49,   41,
       41,   42,   42,   42,   42,  268,  779,   49,   49,  521,
      507,  779,   47,   42,   47,   47,  562,   42,  463,   51,
       51,  507,  559,  463,  463,  463,   42,   42,  463,  507,
      463,  268,  560,  662,   49,  295,  463,  463,  463,  473,
      473,  473,  662,  473,  506,  562,  563,  564,  473,  509,
      559,  506,  483,   42,  723,  565,   42,  483,  483,  483,
      560,  295,  483,  506,  483,   49,   49,  643,  643, 1268,

      483,  483,  483,  723,  563, 1262,  564,  663,  663,  729,
      729,  729,   42,  565,   42,   42,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   48,   48,   48,   48,   50,  588,   50,   50,
      809,  809,  538,   52,   48,   52,   52,   53,   48,   53,
       53,   54,   50,   54,   54,   52,  538,   48,   48,   52,
      618,   50,   50,   53,  693,  588,  453,   54,   52,  453,
      604,  619,   53,  489,  620,  453,   54,  621,  489,  489,
      489,  525,  525,  489,   48,  489,  622,   48,   50,  618,
      525,  489,  489,  489,  623,  453,  726,  625,  604,  619,
      626,  657,  620,  664, 1261,  453,  621,  978,  978,  691,
      726,  693,  664,   48,  622,   48,   48,  691,  691,   50,
       50, 1260,  623,  538,  453,  625,   52,   52,  626,  657,

       53,   53,  525,  453,   54,   54,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   61,  656,   61,   61,   62,   61,
       62,   62,   63,   62,   63,   63,   64,  513,   64,   64,
       61,   63,  666,  667,   62,   64,  513,  674,   63,   61,
     1249,  695,   64,   62,  656,  675, 1248,   63,  603,  494,

      603,   64,  695,  722,  494,  494,  494,  668, 1247,  494,
      666,  494,  667,  669,  722,  674,   61,  494,  494,  494,
       62,  670,  722,  675,   63,  502,  740,  603,   64,  603,
      502,  502,  502,  775,  724,  502,  668,  502,  695,  864,
      864,  864,  669,  502,  502,  502,  877,   61,   61,  775,
      670,   62,   62,  724,  740,   63,   63,  877,  513,   64,
       64,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   67,  589,   67,
       67,   68,  571,   68,   68,   69, 1234,   69,   69,  605,
       69,  527,  527,   67,   69,   69,   69,   68,  672,  846,
      527,   69,   67, 1233,  594,  605,   68,  472,  472,  472,
       69,   69,   70, 1232,   70,   70,  472,   70,  846, 1214,
      696,   70,   70,   70,  589,  673,  676,  672,   70,   67,

      475,  475,  475,   68,  567, 1213,  571,   70,   70,  475,
      698,   71,  527,   71,   71,  567,   71,  479,  479,  479,
       71,  589,  472,  677,  673,  676,  479,   71,  594,  568,
       67,   67,  571,  682,   68,   68,   71,  696,   69,   69,
      568,  605,  527,  475,   72,  730,   72,   72, 1212,   72,
      472,  683,  677,   72,  594,  791,  684,  698,  567,  686,
       72, 1189,  682,   71,  590,   70,   70, 1188,  591,   72,
      833,  475,  912,  687,   77,  590,   77,   77,   77,  591,
      683,  912,  741,  568,  567,  684,   77,  730,  686,   78,
       77,   78,   78,   78,   71,   71,   72,  742,  479,   77,

       77,   78,  687,  703,  816,   78,  744,  816,  791,  568,
      741,  703,  703,  816,   78,   78,  745,  833,  590,  747,
      746,  748,  591,  743, 1187,  742,   77,   72,   72,   73,
       73, 1155,   73,   73,  744,   73,   73,   73, 1154,   73,
      749,   78,   73,   73,  590,  745,   73,  747,  591,  746,
      748,   73,   73,   73,   73,   73,   73,   77,   77,  508,
      508,  704,  704,  704,  508,  508,  508,  743,  749,  508,
      704,  508,   78,   78,  752,  878, 1153,  508,  508,  508,
      753,   73,   73,   73,  518,   73,  518, 1047, 1047,  754,
      975,  518,  518,  518, 1114,  743,  518,  750,  518,  975,

     1113,  878,  755,  752,  518,  518,  518,  750,  753,   73,
       73,   73,  760,   73,   73,   74,   74,  754,   74,   74,
      789,   74,   74,   74,  757,   74,  750,  751,   74,   74,
      755,  756,   74, 1112, 1111,  750,  758,   74,   74,   74,
       74,   74,   74,  555,  751,  767, 1110, 1077,  555,  555,
      555,  777,  757,  555,  789,  555,  751,  778, 1068, 1067,
      756,  555,  555,  555,  758,  807,  760,   74,   74,   74,
      577,   74,  751, 1066,  767,  577,  577,  577,  800,  777,
      577, 1065,  577,  789,  979,  778,  800,  800,  577,  577,
      577, 1064,  760,  979,  807,   74,   74,   74, 1052,   74,

       74,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,  263,  814,  818,
      263,  263,  263, 1042,  815,  263,  610,  819, 1041,  263,

      263,  610,  610,  610,  821,  263,  610,  820,  610,  263,
      263, 1035, 1014,  263,  610,  610,  610,  814,  818,  263,
      263,  263,  815, 1004,  263,  989,  819,  263,  263,  893,
      893,  893,  821,  263,  989, 1002,  820,  263,  263,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,

      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  556,  556,  556,  556,  824,
      556,  583, 1001,  991,  556,  556,  583,  583,  583,  770,
      556,  583,  991,  583,  556,  556, 1000,  822,  788,  583,
      583,  583,  995,  823,  556,  556,  556,  556,  824,  556,
      602,  790,  556,  556,  602,  793,  759,  769,  556,  602,
      602,  602,  556,  556,  602,  822,  602,  759,  769,  583,
      615,  823,  602,  602,  602,  615,  615,  615, 1443,  788,
      615, 1443,  615,  770,  855,  793,  655,  787,  615,  615,

      615,  655,  655,  655,  826,  790,  655,  826,  655,  705,
      705,  705,  994,  826,  655,  655,  655,  788,  705,  770,
      759,  769,  855,  787,  793,  811,  811,  811,  813,  813,
      813,  828,  827,  790,  828,  827,  856,  787,  984,  705,
      828,  827,  832,  851,  852,  811,  759,  769,  813,  836,
      832,  832,  787,  851,  837,  837,  837,  836,  836,  853,
      973,  852,  828,  837,  856,  787,  827,  829,  705,  857,
      829,  858,  851,  852,  859,  861,  829,  860,  897, 1444,
      972,  851, 1444,  838,  838,  838,  897,  897,  853,  852,
     1445,  828,  838, 1445,  971,  827,  862,  857,  829,  863,

      858,  965,  859,  811,  861,  860,  813,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  862,  838,  829,  863,  817,
      817,  817,  817,  817,  817,  865,  964,  866,  867, 1054,
      868,  869,  870,  817,  931,  871,  882,  883, 1054,  886,
      887,  888,  889,  890,  838,  892,  898,  905,  930,  817,
      817,  817,  906,  817,  865,  866, 1097,  867,  868,  869,
      909,  870,  817,  871,  882, 1097,  883,  886,  887,  888,
      889,  929,  890,  926,  892,  898,  905,  817,  817,  817,
      914,  906,  817,  876,  876,  900,  900,  900,  876,  901,

      901,  901,  876,  876,  909,  900,  910,  924,  876,  902,
      902,  902,  876,  876,  913,  900,  915,  916,  914,  901,
      919,  923,  876,  876,  903,  903,  903,  876,  932,  902,
      876,  876,  917,  909,  933,  910,  876,  934,  936,  920,
      876,  876,  920,  913,  903,  915,  916,  921,  920,  922,
      921,  937,  922,  938,  919,  899,  921,  932,  922,  927,
      927,  927,  939,  933,  940,  941,  934,  936,  927,  942,
      920, 1140,  945,  900,  935,  935,  935,  901, 1465,  937,
     1140, 1465,  938,  919,  928,  928,  928,  902, 1475,  895,
      939, 1475,  940,  928,  941, 1476,  947,  942, 1476,  920,

      945,  880,  903,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  911,  911,  911,
      911,  948,  949,  928,  947,  911,  911,  911,  911,  911,
      911,  943,  943,  943,  944,  944,  944,  946,  946,  946,
      950,  951,  952,  879,  953,  954,  955,  956,  957,  948,
      949,  928,  958,  875,  959,  911,  911,  911,  960,  911,
      874,  961,  962,  962,  962,  963,  966,  983,  950,  951,
      968,  952,  953,  954,  955,  956,  974,  957,  967,  967,
      967,  958,  959,  911,  911,  911,  850,  960,  911,  961,
      969,  969,  969,  985,  963,  966,  983,  986,  968,  847,

      976,  976,  976,  844,  974,  977,  977,  977,  993,  943,
      976,  980,  980,  980,  996,  977,  981,  981,  981,  843,
      976,  982,  982,  982,  992,  977,  986,  985,  992,  987,
      997,  980,  987,  997, 1005,  839,  981,  993,  987,  997,
     1007,  982, 1008,  996, 1009,  992,  998,  998,  998,  999,
      999,  999, 1010,  999, 1011,  998,  985, 1012,  999, 1003,
     1003, 1003, 1005, 1006, 1006, 1006,  830, 1013, 1007, 1018,
     1008, 1026, 1009, 1015, 1015, 1015, 1019, 1020,  976, 1021,
     1010, 1022, 1011,  977, 1023, 1024, 1012, 1025, 1028,  980,
     1017, 1017, 1017, 1027,  981, 1013, 1029, 1018, 1030,  982,

     1026, 1031,  812, 1032, 1019, 1020, 1033, 1021, 1044, 1022,
     1027, 1038, 1023, 1024,  810, 1025, 1028, 1034, 1034, 1034,
     1477,  803, 1027, 1477, 1029, 1069, 1030, 1039, 1039, 1039,
     1031, 1032, 1059,  801, 1033, 1056, 1044, 1003, 1027, 1056,
     1038, 1043, 1043, 1043, 1045, 1045, 1045, 1046, 1046, 1046,
     1049, 1049, 1049, 1069, 1045,  799, 1056, 1046, 1050, 1050,
     1050, 1051, 1051, 1051, 1045, 1053, 1080, 1046, 1053, 1058,
     1049, 1070, 1059, 1058, 1053, 1071, 1060, 1072, 1050, 1060,
     1073, 1051, 1061, 1061, 1061, 1060, 1074, 1075, 1076, 1079,
     1058, 1061, 1062, 1062, 1062, 1080, 1062,  797, 1081, 1070,

     1059, 1062, 1082, 1071, 1083, 1072, 1084, 1086, 1073, 1078,
     1078, 1078, 1085, 1087, 1074, 1075, 1076, 1079, 1088,  795,
     1090, 1091, 1045, 1092, 1093, 1046, 1081, 1094, 1049, 1095,
     1082, 1100, 1083, 1107, 1084, 1086, 1050, 1479,  794, 1051,
     1479, 1085, 1087, 1098, 1098, 1098,  786, 1088, 1090, 1117,
     1091, 1092, 1093, 1101, 1101, 1101, 1094, 1095, 1116,  783,
     1100, 1107, 1122, 1101, 1102, 1102, 1102, 1103, 1103, 1103,
     1104, 1104, 1104, 1101, 1102, 1105, 1105, 1105, 1117, 1108,
     1108, 1108, 1118, 1119, 1102, 1120, 1116, 1103, 1108, 1121,
     1104, 1122, 1109, 1109, 1109, 1105, 1109, 1115, 1115, 1115,

     1123, 1109, 1124,  773, 1126, 1127, 1128, 1128, 1128, 1130,
     1118, 1119, 1133, 1120, 1129, 1129, 1129, 1121, 1131, 1131,
     1131, 1134, 1135, 1136, 1137, 1138, 1484, 1139, 1123, 1484,
     1124, 1101, 1126, 1127,  772, 1485, 1149, 1130, 1485, 1156,
     1133, 1486, 1102, 1489, 1486, 1103, 1489,  771, 1104, 1134,
     1135, 1136, 1137, 1105, 1138, 1139, 1143, 1143, 1143, 1144,
     1144, 1144, 1145, 1145, 1145, 1149, 1143, 1156,  766, 1144,
     1146, 1146, 1146, 1147, 1147, 1147, 1143, 1158, 1159, 1144,
      765,  762, 1145, 1150, 1150, 1150, 1162, 1151, 1151, 1151,
     1146, 1151, 1150, 1147, 1164, 1167, 1151, 1152, 1152, 1152,

     1160, 1160, 1160, 1169, 1170, 1158, 1159, 1161, 1161, 1161,
     1163, 1163, 1163, 1171, 1162, 1166, 1166, 1166, 1168, 1168,
     1168, 1172, 1164, 1167, 1173, 1174, 1175, 1183, 1183, 1183,
     1509, 1169, 1170, 1509, 1143, 1182, 1183, 1144,  761,  738,
     1145, 1171, 1179, 1179, 1179, 1177, 1177, 1177, 1146, 1172,
     1190, 1147, 1173, 1174, 1175, 1177, 1178, 1178, 1178, 1180,
     1180, 1180, 1179,  735, 1182, 1177, 1178, 1181, 1181, 1181,
     1185, 1185, 1185, 1193, 1195, 1152, 1178, 1197, 1190, 1180,
     1184, 1184, 1184, 1198, 1184, 1199, 1200, 1181, 1201, 1184,
     1192, 1192, 1192, 1194, 1194, 1194, 1196, 1196, 1196, 1202,

      733, 1193, 1195, 1203, 1215, 1197,  732, 1204, 1204, 1204,
     1217, 1198,  728, 1199, 1200, 1218, 1201, 1204, 1219, 1220,
     1179,  727,  719, 1177, 1206, 1206, 1206, 1204, 1202,  718,
     1519, 1203, 1215, 1519, 1178, 1223,  717, 1180, 1217, 1205,
     1205, 1205,  714, 1218, 1206, 1181, 1219, 1220, 1185, 1205,
     1207, 1207, 1207, 1208, 1208, 1208, 1210, 1210, 1210, 1205,
     1211, 1211, 1211, 1223, 1211, 1210, 1216, 1216, 1216, 1211,
     1207, 1235,  711, 1208, 1225, 1225, 1225, 1226, 1226, 1226,
     1227, 1227, 1227, 1520, 1225, 1204, 1520, 1226, 1228, 1228,
     1228, 1229, 1229, 1229, 1225,  708, 1237, 1226, 1239, 1235,

     1227, 1251, 1206, 1230, 1230, 1230, 1521, 1522, 1228, 1521,
     1522, 1229, 1230,  706, 1231, 1231, 1231, 1205, 1231, 1236,
     1236, 1236, 1263, 1231, 1237,  702, 1239, 1529, 1207, 1251,
     1529, 1208,  701, 1240, 1240, 1240, 1241, 1241, 1241, 1242,
     1242, 1242, 1532, 1240,  690, 1532, 1241, 1243, 1243, 1243,
     1263, 1562, 1225, 1240, 1562, 1226, 1241,  688, 1227, 1242,
     1244, 1244, 1244, 1245, 1245, 1245, 1228, 1243, 1579, 1229,
      679, 1579, 1245, 1246, 1246, 1246, 1592, 1246,  665, 1592,
     1244,  659, 1246, 1250, 1250, 1250, 1253, 1253, 1253, 1254,
     1254, 1254, 1255, 1255, 1255, 1556, 1253,  658,  651, 1254,

     1256, 1256, 1256, 1257, 1257, 1257, 1253, 1556,  649, 1254,
     1556, 1240, 1255,  646, 1241,  645,  644, 1242,  642,  641,
     1256,  639,  636, 1257,  635, 1243, 1258, 1258, 1258,  634,
     1259, 1259, 1259,  632, 1259, 1258,  629,  628, 1244, 1259,
     1264, 1264, 1264, 1265, 1265, 1265, 1266, 1266, 1266,  624,
     1264,  616,  614, 1265,  613, 1266,  611, 1267, 1267, 1267,
     1264, 1267,  609, 1265, 1253,  608, 1267, 1254,  601,  600,
     1255, 1272, 1272, 1272,  596, 1273, 1273, 1273, 1256, 1273,
     1272, 1257,  595,  593, 1273, 1277, 1277, 1277, 1278, 1278,
     1278,  592, 1278,  587, 1277,  580,  579, 1278, 1282, 1282,

     1282, 1283, 1283, 1283,  578, 1283,  576, 1282,  573,  572,
     1283, 1286, 1286, 1286,  570, 1287, 1287, 1287, 1264, 1287,
     1286, 1265,  569,  566, 1287, 1288, 1288, 1288, 1289, 1289,
     1289,  554, 1289,  547, 1288,  546,  541, 1289, 1290, 1290,
     1290, 1291, 1291, 1291,  540, 1291,  535, 1290,  533,  532,
     1291, 1292, 1292, 1292, 1293, 1293, 1293,  531, 1293,  530,
     1292,  529,  526, 1293, 1294, 1294, 1294, 1295, 1295, 1295,
      520, 1295,  514, 1294,  503,  501, 1295, 1296, 1296, 1296,
     1297, 1297, 1297,  500, 1297,  499, 1296,  498,  496, 1297,
     1298, 1298, 1298, 1299, 1299, 1299,  493, 1299,  492, 1298,

      490,  488, 1299, 1300, 1300, 1300, 1301, 1301, 1301,  487,
     1301,  485, 1300,  482,  481, 1301, 1302, 1302, 1302, 1303,
     1303, 1303,  478, 1303,  474, 1302,  466,  465, 1303, 1304,
     1304, 1304, 1305, 1305, 1305,  459, 1305,  456, 1304,  454,
      449, 1305, 1306, 1306, 1306, 1307, 1307, 1307,  448, 1307,
      447, 1306,  428,  426, 1307, 1308, 1308, 1308, 1309, 1309,
     1309,  425, 1309,  423, 1308,  421,  413, 1309, 1310, 1310,
     1310, 1311, 1311, 1311,  412, 1311,  405, 1310,  403,  395,
     1311, 1312, 1312, 1312, 1313, 1313, 1313,  393, 1313,  389,
     1312,  382,  380, 1313, 1314, 1314, 1314, 1315, 1315, 1315,

      375, 1315,  372, 1314,  370,  363, 1315, 1316, 1316, 1316,
     1317, 1317, 1317,  361, 1317,  355, 1316,  351,  350, 1317,
     1318, 1318, 1318, 1319, 1319, 1319,  348, 1319,  341, 1318,
      328,  321, 1319, 1320, 1320, 1320, 1321, 1321, 1321,  320,
     1321,  314, 1320,  313,  311, 1321, 1322, 1322, 1322, 1323,
     1323, 1323,  297, 1323,  296, 1322,  291,  290, 1323, 1324,
     1324, 1324, 1325, 1325, 1325,  289, 1325,  284, 1324,  283,
      281, 1325, 1326, 1326, 1326, 1327, 1327, 1327,  280, 1327,
      278, 1326,  277,  275, 1327, 1328, 1328, 1328, 1329, 1329,
     1329,  270, 1329,  269, 1328,  265,  262, 1329, 1330, 1330,

     1330, 1331, 1331, 1331,  260, 1331,  254, 1330,  253,  244,
     1331, 1332, 1332, 1332, 1333, 1333, 1333,  243, 1333,  236,
     1332,  232,  229, 1333, 1334, 1334, 1334, 1335, 1335, 1335,
      221, 1335,  219, 1334,  218,  217, 1335, 1336, 1336, 1336,
     1337, 1337, 1337,  216, 1337,  212, 1336,  207,  205, 1337,
     1338, 1338, 1338, 1339, 1339, 1339,  204, 1339,  193, 1338,
      192,  190, 1339, 1340, 1340, 1340, 1341, 1341, 1341,  184,
     1341,  182, 1340,  176,  175, 1341, 1342, 1342, 1342, 1343,
     1343, 1343,  170, 1343,  168, 1342,  153,  152, 1343, 1344,
     1344, 1344, 1345, 1345, 1345,  150, 1345,  143, 1344,  141,

      134, 1345, 1346, 1346, 1346, 1347, 1347, 1347,  133, 1347,
      131, 1346,  124,  120, 1347, 1348, 1348, 1348, 1349, 1349,
     1349,  113, 1349,  105, 1348,   98,   95, 1349, 1350, 1350,
     1350, 1351, 1351, 1351,   86, 1351,   85, 1350,   79,    0,
     1351, 1352, 1352, 1352, 1353, 1353, 1353,    0, 1353,    0,
     1352,    0,    0, 1353, 1354, 1354, 1354, 1355, 1355, 1355,
        0, 1355,    0, 1354,    0,    0, 1355, 1356, 1356, 1356,
     1357, 1357, 1357,    0, 1357,    0, 1356,    0,    0, 1357,
     1358, 1358, 1358, 1359, 1359, 1359,    0, 1359,    0, 1358,
        0,    0, 1359, 1360, 1360, 1360, 1361, 1361, 1361,    0,

     1361,    0, 1360,    0,    0, 1361, 1362, 1362, 1362, 1363,
     1363, 1363,    0, 1363,    0, 1362,    0,    0, 1363, 1364,
     1364, 1364, 1365, 1365, 1365,    0, 1365,    0, 1364,    0,
        0, 1365, 1366, 1366, 1366, 1367, 1367, 1367,    0, 1367,
        0, 1366,    0,    0, 1367, 1368, 1368, 1368, 1369, 1369,
     1369,    0, 1369,    0, 1368,    0,    0, 1369, 1370, 1370,
     1370, 1371, 1371, 1371,    0, 1371,    0, 1370,    0,    0,
     1371, 1372, 1372, 1372, 1373, 1373, 1373,    0, 1373,    0,
     1372,    0,    0, 1373, 1374, 1374, 1374, 1375, 1375, 1375,
        0, 1375,    0, 1374,    0,    0, 1375, 1376, 1376, 1376,

     1377, 1377, 1377,    0, 1377,    0, 1376,    0,    0, 1377,
     1378, 1378, 1378, 1379, 1379, 1379,    0, 1379,    0, 1378,
        0,    0, 1379, 1380, 1380, 1380, 1381, 1381, 1381,    0,
     1381,    0, 1380,    0,    0, 1381, 1382, 1382, 1382, 1383,
     1383, 1383,    0, 1383,    0, 1382,    0,    0, 1383, 1384,
     1384, 1384, 1385, 1385, 1385,    0, 1385,    0, 1384,    0,
        0, 1385, 1386, 1386, 1386, 1387, 1387, 1387,    0, 1387,
        0, 1386,    0,    0, 1387, 1388, 1388, 1388, 1389, 1389,
     1389,    0, 1389,    0, 1388,    0,    0, 1389, 1390, 1390,
     1390, 1391, 1391, 1391,    0, 1391,    0, 1390,    0,    0,

     1391, 1392, 1392, 1392, 1393, 1393, 1393,    0, 1393,    0,
     1392,    0,    0, 1393, 1394, 1394, 1394, 1395, 1395, 1395,
        0, 1395,    0, 1394,    0,    0, 1395, 1396, 1396, 1396,
     1397, 1397, 1397,    0, 1397,    0, 1396,    0,    0, 1397,
     1398, 1398, 1398, 1399, 1399, 1399,    0, 1399,    0, 1398,
        0,    0, 1399, 1400, 1400, 1400, 1401, 1401, 1401,    0,
     1401,    0, 1400,    0,    0, 1401, 1402, 1402, 1402, 1403,
     1403, 1403,    0, 1403,    0, 1402,    0,    0, 1403, 1404,
     1404, 1404, 1405, 1405, 1405,    0, 1405,    0, 1404,    0,
        0, 1405, 1406, 1406, 1406, 1407, 1407, 1407,    0, 1407,

        0, 1406,    0,    0, 1407, 1408, 1408, 1408, 1409, 1409,
     1409,    0, 1409,    0, 1408,    0,    0, 1409, 1411, 1411,
     1411,    0, 1411,    0, 1412, 1412, 1412, 1411, 1412,    0,
     1413, 1413, 1413, 1412, 1413,    0, 1414, 1414, 1414, 1413,
     1414,    0, 1415, 1415, 1415, 1414, 1415,    0, 1416, 1416,
     1416, 1415, 1416,    0, 1417, 1417, 1417, 1416, 1417, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1421,

     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1423,
     1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1426,

     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1431,

     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1446,
     1446, 1446,    0, 1446, 1446,    0, 1446,    0, 1446, 1446,
     1446, 1446,    0, 1446, 1446, 1446, 1446, 1446, 1446, 1447,
     1447, 1447,    0, 1447, 1447, 1447, 1447,    0, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1448,
     1448, 1448,    0, 1448, 1448,    0, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448,    0, 1448, 1449,
     1449, 1449,    0, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1450,

     1450, 1450,    0, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1451,
     1451, 1451,    0,    0,    0,    0, 1451,    0,    0,    0,
        0, 1451,    0,    0, 1451, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1453, 1453, 1453,    0,    0,
     1453,    0, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453,    0, 1453, 1454, 1454, 1454,    0, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455,    0,    0,

     1455,    0, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1456, 1456, 1456,    0,    0,
     1456, 1456, 1456,    0, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456,    0, 1456, 1457, 1457, 1457,    0, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458,    0, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1459, 1459,    0, 1459, 1459,
     1459, 1459, 1459, 1459,    0,    0, 1459, 1459, 1459, 1459,
     1459, 1459, 1459,    0, 1459, 1460, 1460, 1460,    0, 1460,

     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1461,    0,    0,    0,    0,
        0,    0, 1461,    0,    0,    0,    0, 1461,    0,    0,
     1461, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,    0,
     1462, 1463, 1463,    0,    0,    0,    0,    0, 1463,    0,
        0,    0,    0, 1463,    0,    0, 1463, 1463, 1464,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1464,    0,
     1464,    0,    0, 1464, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,

     1466, 1466, 1466, 1466, 1467,    0, 1467,    0, 1467, 1467,
     1467, 1467, 1467, 1467, 1467,    0, 1467,    0, 1467, 1467,
        0, 1467, 1468, 1468, 1468,    0, 1468, 1468, 1468, 1468,
     1468, 1468, 1468,    0, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1469, 1469, 1469,    0, 1469, 1469, 1469, 1469,
     1469, 1469, 1469,    0, 1469, 1469, 1469, 1469, 1469,    0,
     1469, 1469, 1470, 1470, 1470,    0, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,    0, 1470,
        0, 1470, 1471, 1471, 1471,    0, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471,    0, 1471, 1471,    0, 1471,

        0, 1471, 1472,    0, 1472,    0, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,    0, 1472,
        0, 1472, 1473,    0, 1473,    0, 1473, 1473, 1473, 1473,
     1473, 1473, 1473,    0, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1474,    0, 1474,    0, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1478, 1478, 1478,    0, 1478, 1478, 1478, 1478,
     1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
     1478, 1478, 1480, 1480, 1480,    0, 1480, 1480, 1480, 1480,
        0, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,

     1480, 1480, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1482,    0,    0, 1482,    0, 1482,    0, 1482,
     1482,    0, 1482,    0, 1482,    0,    0, 1482, 1483, 1483,
     1483,    0, 1483,    0, 1483, 1483, 1483, 1483, 1483,    0,
     1483,    0, 1483, 1483,    0, 1483,    0, 1483, 1487, 1487,
     1487,    0, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1488, 1488,
     1488,    0, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1490, 1490,

     1490,    0, 1490, 1490,    0, 1490,    0, 1490, 1490, 1490,
     1490,    0, 1490, 1490, 1490, 1490, 1490, 1490, 1491, 1491,
     1491,    0, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491,    0, 1491, 1492, 1492,
     1492,    0, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1493, 1493,
     1493,    0, 1493, 1493,    0, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493,    0, 1493, 1494, 1494,
     1494,    0, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1495, 1495,

     1495,    0, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1496, 1496,
     1496,    0, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1497, 1497,
     1497,    0,    0,    0,    0, 1497,    0,    0,    0,    0,
     1497,    0,    0, 1497, 1498, 1498,    0, 1498, 1498, 1498,
     1498, 1498, 1498, 1498,    0, 1498, 1498, 1498, 1498, 1498,
     1498, 1498,    0, 1498, 1499, 1499, 1499,    0,    0, 1499,
        0, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499,    0, 1499, 1500, 1500, 1500,    0,    0, 1500,

        0, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1501, 1501, 1501,    0,    0, 1501,
     1501, 1501,    0, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501,    0, 1501, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502,    0, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1503, 1503,    0, 1503, 1503, 1503,
     1503, 1503, 1503,    0,    0, 1503, 1503, 1503, 1503, 1503,
     1503, 1503,    0, 1503, 1504, 1504, 1504,    0, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1505,    0,    0,    0,    0,    0,

        0, 1505,    0,    0,    0,    0, 1505,    0,    0, 1505,
     1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506,
     1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506,    0, 1506,
     1507, 1507,    0,    0,    0,    0,    0, 1507,    0,    0,
        0,    0, 1507,    0,    0, 1507, 1507, 1508,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1508,    0, 1508,
        0,    0, 1508, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1511,    0, 1511,    0, 1511, 1511, 1511,
     1511, 1511, 1511, 1511,    0, 1511,    0, 1511, 1511,    0,

     1511, 1512, 1512, 1512,    0, 1512, 1512, 1512, 1512, 1512,
     1512, 1512,    0, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1513, 1513, 1513,    0, 1513, 1513, 1513, 1513, 1513,
     1513, 1513,    0, 1513, 1513, 1513, 1513, 1513,    0, 1513,
     1513, 1514, 1514, 1514,    0, 1514, 1514, 1514, 1514, 1514,
     1514, 1514, 1514, 1514, 1514, 1514, 1514,    0, 1514,    0,
     1514, 1515, 1515, 1515,    0, 1515, 1515, 1515, 1515, 1515,
     1515, 1515, 1515, 1515,    0, 1515, 1515,    0, 1515,    0,
     1515, 1516,    0, 1516,    0, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1516,    0, 1516,    0,

     1516, 1517,    0, 1517,    0, 1517, 1517, 1517, 1517, 1517,
     1517, 1517,    0, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1518,    0, 1518,    0, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
     1518, 1523, 1523, 1523,    0, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,    0,
     1523, 1524, 1524, 1524,    0, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
     1524, 1525,    0,    0, 1525,    0, 1525,    0, 1525, 1525,
        0, 1525,    0, 1525,    0,    0, 1525, 1526, 1526, 1526,

        0, 1526,    0, 1526, 1526, 1526, 1526, 1526,    0, 1526,
        0, 1526, 1526,    0, 1526,    0, 1526, 1527, 1527, 1527,
        0, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1528, 1528, 1528,
        0, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1530, 1530, 1530,
        0, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
     1530, 1530, 1530, 1530, 1530, 1530, 1530, 1531, 1531, 1531,
        0, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531,
     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1533, 1533, 1533,

        0, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533,    0, 1533, 1534, 1534, 1534,
        0, 1534, 1534,    0, 1534,    0, 1534, 1534, 1534, 1534,
        0, 1534, 1534, 1534, 1534, 1534, 1534, 1535, 1535, 1535,
        0, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1536, 1536, 1536,
        0, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536,
     1536, 1536, 1536, 1536, 1536, 1536, 1536, 1537, 1537, 1537,
        0, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538,

        0, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1539, 1539, 1539,
        0, 1539, 1539,    0, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539,    0, 1539, 1540, 1540, 1540,
        0,    0,    0,    0, 1540,    0,    0,    0,    0, 1540,
        0,    0, 1540, 1541, 1541,    0, 1541, 1541, 1541, 1541,
     1541, 1541, 1541,    0, 1541, 1541, 1541, 1541, 1541, 1541,
     1541,    0, 1541, 1542, 1542, 1542,    0,    0, 1542,    0,
     1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542,
     1542,    0, 1542, 1543, 1543, 1543,    0,    0, 1543,    0,

     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1544, 1544, 1544,    0,    0, 1544, 1544,
     1544,    0, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544,    0, 1544, 1545, 1545,    0, 1545, 1545, 1545, 1545,
     1545, 1545,    0,    0, 1545, 1545, 1545, 1545, 1545, 1545,
     1545,    0, 1545, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546,    0, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1547, 1547, 1547,    0, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1548, 1548, 1548, 1548, 1548, 1548, 1548,

     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548,    0, 1548, 1549,    0, 1549,    0, 1549, 1549, 1549,
     1549, 1549, 1549, 1549,    0, 1549,    0, 1549, 1549,    0,
     1549, 1550, 1550, 1550,    0, 1550, 1550, 1550, 1550, 1550,
     1550, 1550,    0, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
     1550, 1551, 1551, 1551,    0, 1551, 1551, 1551, 1551, 1551,
     1551, 1551,    0, 1551, 1551, 1551, 1551, 1551,    0, 1551,
     1551, 1552,    0, 1552,    0, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552,    0, 1552,    0,
     1552, 1553, 1553, 1553,    0, 1553, 1553, 1553, 1553, 1553,

     1553, 1553, 1553, 1553, 1553, 1553, 1553,    0, 1553,    0,
     1553, 1554,    0, 1554,    0, 1554, 1554, 1554, 1554, 1554,
     1554, 1554,    0, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1555,    0, 1555,    0, 1555, 1555, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555,
     1555, 1557, 1557, 1557,    0, 1557, 1557, 1557, 1557, 1557,
     1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,    0,
     1557, 1558, 1558, 1558,    0, 1558,    0, 1558, 1558, 1558,
     1558, 1558,    0, 1558,    0, 1558, 1558,    0, 1558,    0,
     1558, 1559, 1559, 1559,    0, 1559, 1559, 1559, 1559, 1559,

     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1560, 1560, 1560,    0, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1561, 1561, 1561,    0, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1563, 1563, 1563,    0, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1564,    0,    0, 1564,    0,    0,    0, 1564,    0,
        0,    0,    0, 1564,    0,    0, 1564, 1565, 1565, 1565,
        0, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,

     1565, 1565, 1565, 1565, 1565,    0, 1565, 1566, 1566, 1566,
        0, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1567, 1567, 1567,
        0,    0,    0,    0, 1567,    0,    0,    0,    0, 1567,
        0,    0, 1567, 1568, 1568,    0, 1568, 1568, 1568, 1568,
     1568, 1568, 1568,    0, 1568, 1568, 1568, 1568, 1568, 1568,
     1568,    0, 1568, 1569, 1569, 1569,    0,    0, 1569,    0,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569,    0, 1569, 1570, 1570, 1570,    0,    0, 1570,    0,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,

     1570, 1570, 1570, 1571, 1571, 1571,    0,    0, 1571, 1571,
     1571,    0, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571,    0, 1571, 1572, 1572,    0, 1572, 1572, 1572, 1572,
     1572, 1572,    0,    0, 1572, 1572, 1572, 1572, 1572, 1572,
     1572,    0, 1572, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
     1573, 1573, 1573,    0, 1573, 1573, 1573, 1573, 1573, 1573,
     1573, 1573, 1573, 1574, 1574, 1574,    0, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575,    0, 1575, 1576,    0, 1576,    0, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576,    0, 1576, 1576,    0,
     1576, 1577,    0, 1577,    0, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577,    0, 1577,    0,
     1577, 1578,    0, 1578,    0, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1580, 1580, 1580,    0, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,    0,
     1580, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,

     1581, 1582, 1582,    0, 1582, 1582, 1582, 1582, 1582, 1582,
     1582,    0, 1582, 1582, 1582, 1582, 1582, 1582, 1582,    0,
     1582, 1583, 1583,    0, 1583, 1583, 1583, 1583, 1583, 1583,
        0,    0, 1583, 1583, 1583, 1583, 1583, 1583, 1583,    0,
     1583, 1584, 1584,    0, 1584, 1584, 1584, 1584, 1584, 1584,
     1584,    0, 1584, 1584, 1584, 1584, 1584, 1584, 1584,    0,
     1584, 1585, 1585,    0, 1585, 1585, 1585, 1585, 1585, 1585,
        0,    0, 1585, 1585, 1585, 1585, 1585, 1585, 1585,    0,
     1585, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,

     1586, 1587,    0,    0,    0, 1587,    0,    0,    0,    0,
        0,    0,    0,    0, 1587,    0, 1587, 1588, 1588, 1588,
     1588, 1588, 1588,    0, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1589, 1589,    0,
     1589, 1589, 1589, 1589, 1589, 1589, 1589,    0, 1589, 1589,
     1589, 1589, 1589, 1589, 1589,    0, 1589, 1590, 1590,    0,
     1590, 1590, 1590, 1590, 1590, 1590,    0,    0, 1590, 1590,
     1590, 1590, 1590, 1590, 1590,    0, 1590, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1593, 1593,    0,

     1593, 1593, 1593, 1593, 1593, 1593, 1593,    0, 1593, 1593,
     1593, 1593, 1593, 1593, 1593,    0, 1593, 1594, 1594,    0,
     1594, 1594, 1594, 1594, 1594, 1594,    0,    0, 1594, 1594,
     1594, 1594, 1594, 1594, 1594,    0, 1594, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595,    0, 1595, 1595,    0, 1595, 1595, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596,    0, 1596, 1596,    0, 1596, 1596, 1597, 1597,    0,
     1597, 1597, 1597, 1597, 1597, 1597, 1597,    0, 1597, 1597,
     1597, 1597, 1597, 1597, 1597,    0, 1597, 1598, 1598,    0,

     1598, 1598, 1598, 1598, 1598, 1598,    0,    0, 1598, 1598,
     1598, 1598, 1598, 1598, 1598,    0, 1598, 1599, 1599, 1599,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1599,    0, 1599, 1599,    0, 1599, 1599, 1600, 1600,    0,
     1600, 1600, 1600, 1600, 1600, 1600, 1600,    0, 1600, 1600,
     1600, 1600, 1600, 1600, 1600,    0, 1600, 1601, 1601,    0,
     1601, 1601, 1601, 1601, 1601, 1601,    0,    0, 1601, 1601,
     1601, 1601, 1601, 1601, 1601,    0, 1601, 1602, 1602,    0,
     1602, 1602, 1602, 1602, 1602, 1602, 1602,    0, 1602, 1602,
     1602, 1602, 1602, 1602, 1602,    0, 1602, 1603, 1603,    0,

     1603, 1603, 1603, 1603, 1603, 1603,    0,    0, 1603, 1603,
     1603, 1603, 1603, 1603, 1603,    0, 1603, 1604, 1604,    0,
     1604, 1604, 1604, 1604, 1604, 1604, 1604,    0, 1604, 1604,
     1604, 1604, 1604, 1604, 1604,    0, 1604, 1605, 1605,    0,
     1605, 1605, 1605, 1605, 1605, 1605,    0,    0, 1605, 1605,
     1605, 1605, 1605, 1605, 1605,    0, 1605, 1606, 1606,    0,
     1606, 1606, 1606, 1606, 1606, 1606, 1606,    0, 1606, 1606,
     1606, 1606, 1606, 1606, 1606,    0, 1606, 1607, 1607,    0,
     1607, 1607, 1607, 1607, 1607, 1607,    0,    0, 1607, 1607,
     1607, 1607, 1607, 1607, 1607,    0, 1607, 1608, 1608,    0,

     1608, 1608, 1608, 1608, 1608, 1608, 1608,    0, 1608, 1608,
     1608, 1608, 1608, 1608, 1608,    0, 1608, 1609, 1609,    0,
     1609, 1609, 1609, 1609, 1609, 1609,    0,    0, 1609, 1609,
     1609, 1609, 1609, 1609, 1609,    0, 1609, 1610, 1610,    0,
     1610, 1610, 1610, 1610, 1610, 1610, 1610,    0, 1610, 1610,
     1610, 1610, 1610, 1610, 1610,    0, 1610, 1611, 1611,    0,
     1611, 1611, 1611, 1611, 1611, 1611,    0,    0, 1611, 1611,
     1611, 1611, 1611, 1611, 1611,    0, 1611, 1612, 1612,    0,
     1612, 1612, 1612, 1612, 1612, 1612, 1612,    0, 1612, 1612,
     1612, 1612, 1612, 1612, 1612,    0, 1612, 1613, 1613,    0,

     1613, 1613, 1613, 1613, 1613, 1613,    0,    0, 1613, 1613,
     1613, 1613, 1613, 1613, 1613,    0, 1613, 1614, 1614,    0,
     1614, 1614, 1614, 1614, 1614, 1614, 1614,    0, 1614, 1614,
     1614, 1614, 1614, 1614, 1614,    0, 1614, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,

     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418
    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
/*************************************************************************
 *
 * Copyright (c) 2014-2022 Barbara Geller & Ansel Sermersheim
 * Copyright (c) 1997-2014 Dimitri van Heesch
 *
*************************************************************************/

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include <QDir>
#include <QFile>
#include <QFileInfo>
#include <QHash>
#include <QRegularExpression>
#include <QStringList>
#include <QStack>
#include <QVector>

#include <pre.h>

#include <a_define.h>
#include <arguments.h>
#include <constexp.h>
#include <config.h>
#include <condparser.h>
#include <doxy_globals.h>
#include <default_args.h>
#include <entry.h>
#include <message.h>
#include <membername.h>
#include <util.h>

// Toggle for some debugging info
// #define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

struct CondCtx
{
   CondCtx(int line, const QString &id, bool b)
      : lineNr(line), sectionId(id), skip(b)
   {
   }

   int lineNr;
   QString sectionId;
   bool skip;
};

struct FileState {
   FileState(int size) : lineNr(1), curlyCount(0), fileBuf(size),
      oldFileBuf(""), oldFileBufPos(0), bufState(0) {}

   int       lineNr;
   int       curlyCount;

   QString   fileBuf;
   QString   oldFileBuf;
   int       oldFileBufPos;
   QString   fileName;
   YY_BUFFER_STATE bufState;
};

/** @brief Singleton which manages the defines available while preprocessing files
 */
class DefineManager
{
   // local class used to hold the defines for a single file
   class DefinesPerFile
   {
    public:
      DefinesPerFile() {
      }

      virtual ~DefinesPerFile() {
      }

      /** Adds a define in the context of a file. Will replace an existing define
       *  with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(QSharedPointer<A_Define> def) {
         QSharedPointer<A_Define> d = m_defines.value(def->m_name);

         if (d != nullptr) {
            // redefine
            m_defines.remove(d->m_name);
         }

         m_defines.insert(def->m_name, def);
      }

      /** Adds an include file for this file
       *  @param fileName The name of the include file
       */
      void addInclude(const QString &fileName) {
         m_includedFiles.insert(fileName);
      }

      void collectDefines(DefineDict &dict, QSet<QString> &includeStack);

    private:
      DefineDict m_defines;
      QSet<QString> m_includedFiles;
   };

 public:
   friend class DefinesPerFile;

   /** Returns a reference to the singleton */
   static DefineManager &instance() {
      if (theInstance == nullptr) {
         theInstance = new DefineManager;
      }
      return *theInstance;
   }

   static void deleteInstance() {
      delete theInstance;
      theInstance = nullptr;
   }

   /** Starts a context in which defines are collected.
    *  Called at the start of a new file that is preprocessed.
    *  @param fileName the name of the file to process.
    */
   void startContext(const QString &fileName) {
      m_contextDefines.clear();
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         // new file

         m_fileMap.insert(fileName, QMakeShared<DefinesPerFile>());
      }
   }

   /** Ends the context started with startContext() freeing any
    *  defines collected within in this context.
    */
   void endContext() {
      m_contextDefines.clear();
   }

   /** Add an included file to the current context.
    *  If the file has been pre-processed already, all defines are added to the context.
    *  @param fileName The name of the include file to add to the context.
    */
   void addFileToContext(const QString &fileName) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         // new file

         m_fileMap.insert(fileName, QMakeShared<DefinesPerFile>());

      } else {
         // existing file

         QSet<QString> includeStack;
         dpf->collectDefines(m_contextDefines, includeStack);
      }
   }

   /** Add a define to the manager object.
    *  @param fileName The file in which the define was found
    *  @param def The Define object to add.
    */
   void addDefine(const QString &fileName, QSharedPointer<A_Define> def) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<A_Define> d = m_contextDefines.value(def->m_name);

      if (d != nullptr) {
         // redefine
         m_contextDefines.remove(d->m_name);
      }

      m_contextDefines.insert(def->m_name, def);

      //
      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);
      }

      dpf->addDefine(std::move(def));
   }

   /** Add an include relation to the manager object.
    *  @param fromFileName file name in which the include was found.
    *  @param toFileName file name that is included.
    */
   void addInclude(const QString &fromFileName, const QString &toFileName) {
      if (fromFileName.isEmpty() || toFileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fromFileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fromFileName, dpf);
      }

      dpf->addInclude(toFileName);
   }

   /** Returns a Define object given its name or 0 if the Define does not exist.
   */
   QSharedPointer<A_Define> isDefined(const QString &name) const {
      QSharedPointer<A_Define> d = m_contextDefines.value(name);

      if (d && d->undef) {
         d = QSharedPointer<A_Define>();
      }

      return d;
   }

   /** Returns a reference to the defines found in the current context. */
   const DefineDict &defineContext() const {
      return m_contextDefines;
   }

 private:
   static DefineManager *theInstance;

   /** Helper function to collect all define for a given file */
   void collectDefinesForFile(const QString &fileName, QSharedPointer<DefineDict> dict) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf) {
         QSet<QString> includeStack;
         dpf->collectDefines(*dict, includeStack);
      }
   }

   /** returns the DefinesPerFile object for a given file name. */
   QSharedPointer<DefinesPerFile> find(const QString &fileName) const {
      if (fileName.isEmpty()) {
         return QSharedPointer<DefinesPerFile>();
      }

      return m_fileMap.value(fileName);
   }

   DefineManager() {
   }

   virtual ~DefineManager() {
   }

   QHash<QString, QSharedPointer<DefinesPerFile>> m_fileMap;
   DefineDict m_contextDefines;
};

/** Singleton instance */
DefineManager *DefineManager::theInstance = 0;

/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(DefineDict &dict, QSet<QString> &includeStack)
{
   {
      for (auto di : m_includedFiles) {
         QString incFile = di;

         QSharedPointer<DefinesPerFile> dpf = DefineManager::instance().find(incFile);

         if (dpf && ! includeStack.contains(incFile)) {
            includeStack.insert(incFile);
            dpf->collectDefines(dict, includeStack);
         }
      }
   }

   {
      for (const auto &def : m_defines)  {
         QSharedPointer<A_Define> d = dict.value(def->m_name);

         if (d != nullptr) {
            // redefine
            dict.remove(d->m_name);
         }

         dict.insert(def->m_name, def);
      }
   }
}

static QStringList              s_pathList;
static QString                  s_yyFileName;
static QSharedPointer<FileDef>  s_yyFileDef;
static QSharedPointer<FileDef>  s_inputFileDef;

static QSharedPointer<QHash<QString, int>> s_argDict;
static QStack<QSharedPointer<FileState>>   s_includeStack;
static QStack<QSharedPointer<CondCtx>>     s_condStack;
static QSharedPointer<DefineDict>          s_expandedDict;

static int          s_yyLineNr   = 1;
static int          s_yyMLines   = 1;
static int          s_yyColNr    = 1;
static int          s_ifcount    = 0;
static int          s_defArgs    = -1;

static QString      s_defName;
static QString      s_defText;
static QString      s_defLitText;
static QString      s_defArgsStr;
static QString      s_defExtraSpacing;
static bool         s_defVarArgs;

static int          s_lastCContext;
static int          s_lastCPPContext;
static QStack<int>  s_levelGuard;

static QString      s_outputString;
static QString      s_inputString;
static int          s_inputPosition;

static int          s_roundCount;
static bool         s_quoteArg;

static int          s_findDefArgContext;
static bool         s_expectGuard;
static QString      s_guardName;
static QString      s_lastGuardName;
static QString      s_incName;
static QString      s_guardExpr;
static int          s_curlyCount;
static bool         s_nospaces;          // add extra spaces during macro expansion

static bool         s_macroExpansion;    // from the configuration
static bool         s_expandOnlyPredef;  // from the configuration
static int          s_commentCount;
static bool         s_insideComment;
static bool         s_isImported;
static QString      s_blockName;
static int          s_condCtx;
static bool         s_skip;

static bool         s_insideCS;          // C# has simpler preprocessor
static bool         s_insideFortran;
static bool         s_isSource;

static bool         s_lexInit   = false;
static int          s_fenceSize = 0;
static bool         s_ccomment;

QString             s_delimiter;

static QSet<QString> s_allIncludes;
static QSet<QString> s_expansionDict;

#define MAX_EXPANSION_DEPTH 50

static void setFileName(const QString &name)
{
   bool ambig;
   QFileInfo fi(name);

   s_yyFileName = fi.absoluteFilePath();
   s_yyFileDef  = findFileDef(&Doxy_Globals::inputNameDict, s_yyFileName, ambig);

   if (s_yyFileDef == nullptr) {
      // if this is not an input file check if it is an include file
      s_yyFileDef = findFileDef(&Doxy_Globals::includeNameDict, s_yyFileName, ambig);
   }

   if (s_yyFileDef && s_yyFileDef->isReference()) {
      s_yyFileDef = QSharedPointer<FileDef>();
   }

   s_insideCS      = getLanguageFromFileName(s_yyFileName) == SrcLangExt_CSharp;
   s_insideFortran = getLanguageFromFileName(s_yyFileName) == SrcLangExt_Fortran;

   s_isSource = determineSection(s_yyFileName);
}

static void incrLevel()
{
   s_levelGuard.push(0);
}

static void decrLevel()
{
   if (s_levelGuard.size() > 0) {
      s_levelGuard.pop();

   } else {
      warn(s_yyFileName, s_yyLineNr, "More #endif's than #if's found\n");

   }
}

static bool otherCaseDone()
{
   if (s_levelGuard.size() == 0) {
      warn(s_yyFileName, s_yyLineNr, "Found an #else without a preceding #if\n");
      return true;

   } else {
      return s_levelGuard.top();

   }
}

static void setCaseDone(bool value)
{
   s_levelGuard.top() = value;
}

static QSharedPointer<FileState> checkAndOpenFile(const QString &fileName, bool &alreadyIncluded)
{
   alreadyIncluded = false;
   QSharedPointer<FileState> fs;

   QFileInfo fi(fileName);

   if (fi.exists() && fi.isFile()) {
      static const QStringList exclPatterns = Config::getList("exclude-patterns");

      if (patternMatch(fi, exclPatterns)) {
         return QSharedPointer<FileState>();
      }

      QString absName = fi.absoluteFilePath();

      // global guard
      if (s_curlyCount == 0) {
         // not #include inside { ... }

         if (s_allIncludes.contains(absName)) {
            alreadyIncluded = true;
            return QSharedPointer<FileState>();
         }

         s_allIncludes.insert(absName);
      }

      // check include stack for absName
      QStack<QSharedPointer<FileState>> tmpStack;

      while (! s_includeStack.isEmpty()) {
         fs = s_includeStack.pop();

         if (fs->fileName == absName) {
            alreadyIncluded = true;
         }

         tmpStack.push(fs);
      }

      while (! tmpStack.isEmpty()) {
         fs = tmpStack.pop();

         s_includeStack.push(fs);
      }

      if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }

      fs = QMakeShared<FileState>(fi.size() + 4096);
      alreadyIncluded = false;

      if (! readInputFile(absName, fs->fileBuf)) {
         // error
         fs = QSharedPointer<FileState>();

      } else {
         fs->oldFileBuf    = s_inputString;
         fs->oldFileBufPos = s_inputPosition;
      }
   }

   return fs;
}

static QSharedPointer<FileState> findFile(const QString &fileName, bool localInclude, bool &alreadyIncluded)
{
   if (QDir::isAbsolutePath(fileName)) {
      QSharedPointer<FileState> fs = checkAndOpenFile(fileName, alreadyIncluded);

      if (fs) {
         setFileName(fileName);
         s_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   if (localInclude && ! s_yyFileName.isEmpty()) {
      QFileInfo fi(s_yyFileName);

      if (fi.exists()) {
         QString absName = fi.absolutePath() + "/" + fileName;
         QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

         if (fs) {
            setFileName(absName);
            s_yyLineNr = 1;
            return fs;

         } else if (alreadyIncluded) {
            return QSharedPointer<FileState>();
         }
      }
   }

   if (s_pathList.isEmpty()) {
      return QSharedPointer<FileState>();
   }

   for (auto &s : s_pathList) {
      QString absName = s + "/" + fileName;

      QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

      if (fs) {
         setFileName(absName);
         s_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   return QSharedPointer<FileState>();
}

static QString extractTrailingComment(const QString &s)
{
   if (s.isEmpty()) {
      return QString("");
   }

   int i = s.length() - 1;

   while (i >= 0) {
      QChar c = s[i];

      switch (c.unicode()) {
         case '/': {
            --i;

            if (i >= 0 && s[i] == '*') {
               // end of a comment block
               --i;

               while (i > 0 && !(s[i - 1] == '/' && s[i] == '*')) {
                  i--;
               }

               if (i == 0) {
                  ++i;
               }

               // only /*!< or /**< are treated as a comment for the macro name     */
               // otherwise the comment is treated as part of the macro definition

               return ((s[i + 1] == '*' || s[i + 1] == '!') && s[i + 2] == '<') ? s.mid(i - 1) : "";

            } else {
               return QString();
            }
         }

         break;

         // whitespace or line-continuation
         case ' ':
         case '\t':
         case '\r':
         case '\n':
         case '\\':
            break;

         default:
            return QString("");
      }

      --i;
   }

   return QString("");
}

static int getNextChar(const QString &expr, QString *rest, uint &pos);
static int getCurrentChar(const QString &expr, QString *rest, uint pos);
static void unputChar(const QString &expr, QString *rest, uint &pos, char c);
static bool expandExpression(QString &expr, QString *rest, int pos, int level);

static QString stringize(const QString &s)
{
   QString result;
   QChar c;
   QChar pc;

   uint i = 0;
   bool inString = false;
   bool inChar   = false;

   while (i < s.length()) {

      if (! inString && ! inChar) {
         while (i < s.length() && ! inString && ! inChar) {
            c = s.at(i++);

            if (c == '"') {
               result += "\\\"";
               inString = true;

            } else if (c == '\'') {
               result += c;
               inChar = true;

            } else {
               result += c;
            }
         }

      } else if (inChar) {
         while (i < s.length() && inChar) {
            c = s.at(i++);

            if (c == '\'') {
               result += '\'';
               inChar = false;

            } else if (c == '\\') {
               result += "\\\\";
            } else {
               result += c;
            }
         }

      } else {
         pc = 0;

         while (i < s.length() && inString) {
            QChar c2 = s.at(i++);

            if (c2 == '"') {
               result += "\\\"";
               inString = pc == '\\';

            } else if (c2 == '\\') {
               result += "\\\\";

            } else {
               result += c2;
            }

            pc = c2;
         }
      }
   }

   return result;
}

static void processConcatOperators(QString &str)
{
   if (str.isEmpty()) {
      return;
   }

   static QRegularExpression regExp("[ \t\r\n]*##[ \t\r\n]*");
   QRegularExpressionMatch match = regExp.match(str);

   int matchLen;
   int pos;

   while (match.hasMatch()) {

      pos      = match.capturedStart() - str.constBegin();
      matchLen = match.capturedLength();

      if (pos + matchLen + 1 < str.length() && str.at(pos + matchLen) == '@' && str.at(pos + matchLen + 1) == '-') {
         // remove no-rescan marker after ID
         matchLen += 2;
      }

      // remove the ## operator and the surrounding whitespace
      str   = str.left(pos) + str.right(str.length() - pos - matchLen);
      int k = pos - 1;

      while (k >= 0 && isId(str.at(k))) {
         --k;
      }

      if (k > 0 && str.at(k) == '-' && str.at(k - 1) == '@') {
         // remove no-rescan marker before ID
         str  = str.left(k - 1) + str.right(str.length() - k - 1);
         pos -= 2;
      }

      match = regExp.match(str, str.constBegin() + pos);
   }
}

static void yyunput (int c,char *buf_ptr);
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QString &expr, QString *rest, uint &pos, char term, QString &arg)
{
   int cc;

   while ((cc = getNextChar(expr, rest, pos)) != EOF && cc != 0) {
      if (cc == '\\') {
         arg += (char)cc, cc = getNextChar(expr, rest, pos);
      } else if (cc == term) {
         return;
      }
      arg += (char)cc;
   }
}

/*! replaces the function macro def whose argument list starts at pos in expression \a expr.
 * Notice that this routine may scan beyond the expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the
 * length of the (unexpanded) argument list is stored in \a len.
 */
static bool replaceFunctionMacro(const QString &expr, QString *rest, int pos, int &len,
                  QSharedPointer<const A_Define> def, QString &result, int level)
{
   uint j = pos;
   len    = 0;

   result.clear();
   int cc;

   while ((cc = getCurrentChar(expr, rest, j)) != EOF && isspace(cc)) {
      ++len;
      getNextChar(expr, rest, j);
   }

   if (cc != '(') {
      unputChar(expr, rest, j, cc);
      return false;
   }

   // consume the `(' character
   getNextChar(expr, rest, j);

   // list of arguments
   QHash<QString, QString> argTable;

   QString arg;
   int argCount = 0;
   bool done    = false;

   // PHASE 1: read the macro arguments
   if (def->nargs == 0) {
      while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
         char c = (char)cc;

         if (c == ')') {
            break;
         }
      }

   } else {
      while (! done && (argCount < def->nargs || def->varArgs) &&
             ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0)) {

         char c = (char)cc;

         if (c == '(') {
            // argument is a function => search for matching )
            int level = 1;
            arg += c;

            //char term='\0';

            while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               char c = (char)cc;

               if (c == '\'' || c == '\"') {
                  // skip ('s and )'s inside strings
                  arg += c;
                  addTillEndOfString(expr, rest, j, c, arg);
               }

               if (c == ')') {
                  --level;
                  arg += c;

                  if (level == 0) {
                     break;
                  }

               } else if (c == '(') {
                  ++level;
                  arg += c;

               } else {
                  arg += c;
               }
            }

         } else if (c == ')' || c == ',') {
            // last or next argument found

            if (c == ',' && argCount == def->nargs - 1 && def->varArgs) {
               arg = arg.trimmed();
               arg += ',';

            } else {

               QString argKey;
               argKey = QString("@%1").formatArg(argCount++);    // key name
               arg    = arg.trimmed();

               // add argument to the lookup table
               argTable.insert(argKey, arg);
               arg.clear();

               if (c == ')') {
                  // end of the argument list
                  done = true;
               }
            }

         } else if (c == '\"') {
            // append literal strings

            arg += c;
            bool found = false;

            while (!found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '"';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;
                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }
               c = (char)cc;
               arg += c;
            }

         } else if (c == '\'') {
            // append literal characters
            arg += c;
            bool found = false;

            while (! found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '\'';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;

                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }

               c = (char)cc;
               arg += c;
            }

         } else if (c == '/') {
            // possible start of a comment

            char prevChar = '\0';
            arg += c;

            cc = getCurrentChar(expr, rest, j);

            if (cc == '*') {
               // we have a comment

               while ((cc = getNextChar(expr,rest,j)) != EOF && cc != 0) {
                  c    = (char)cc;
                  arg += c;

                  if (c == '/' && prevChar == '*')  {
                     // found an end of comment
                     break;
                  }

                  prevChar = c;
               }
            }

         } else {
            // append other characters
            arg += c;
         }
      }
   }

   // PHASE 2: apply the macro function
   if (argCount == def->nargs || // same number of arguments
         (argCount >= def->nargs - 1 && def->varArgs)) {

         // variadic macro with at least as many
         // params as the non-variadic part (see bug731985)

      uint k = 0;

      // substitution of all formal arguments
      QString resExpr;
      const QString d = def->m_definition.trimmed();

      bool inString = false;

      while (k < d.length()) {
         if (d.at(k) == '@') {
            // maybe a marker, otherwise an escaped @

            if (d.at(k + 1) == '@') {
               // escaped @ => copy it (is unescaped later)

               k += 2;
               resExpr += "@@"; // we unescape these later

            } else if (d.at(k + 1) == '-') {
               // no-rescan marker
               k += 2;
               resExpr += "@-";

            } else {
               // argument marker, read the argument number
               QString key = "@";

               bool hash = false;
               int len2  = k - 1;

               // search for ## backward
               if (len2 >= 0 && d.at(len2) == '\"') {
                  --len2;
               }

               while (len2 >= 0 && d.at(len2) == ' ') {
                  --len2;
               }

               if (len2 > 0 && d.at(len2) == '#' && d.at(len2 - 1) == '#') {
                  hash = true;
               }

               ++k;

               // scan the number
               while (k < d.length() && d.at(k) >= '0' && d.at(k) <= '9') {
                  key += d.at(k++);
               }

               if (! hash) {
                  // search for ## forward
                  len2 = k;

                  if (len2 < d.length() && d.at(len2) == '\"') {
                     ++len2;
                  }

                  while (len2 < d.length() && d.at(len2) == ' ') {
                     ++len2;
                  }

                  if (len2 < d.length() - 1 && d.at(len2) == '#' && d.at(len2 + 1) == '#') {
                     hash = true;
                  }
               }

               if (key.length() > 1 && argTable.contains(key)) {
                  QString substArg = argTable.value(key);

                  // only if no ## operator is before or after the argument marker, then do macro expansion
                  if (! hash) {
                     expandExpression(substArg, nullptr, 0, level + 1);
                  }

                  if (inString) {
                     // if the marker is inside a string (because a # was put
                     // before the macro name), escape " and \ characters
                     resExpr += stringize(substArg);

                  } else {
                     if (hash && substArg.isEmpty()) {
                        // empty argument will be remove later on
                        resExpr += "@E";

                     } else if (s_nospaces) {
                        resExpr += substArg;

                     } else {
                        resExpr += " " + substArg + " ";
                     }
                  }
               }
            }

         } else {
            // no marker, just copy

            if (! inString && d.at(k) == '\"') {
               inString = true; // entering a literal string

            } else if (inString && d.at(k) == '\"' && (d.at(k - 1) != '\\' || d.at(k - 2) == '\\')) {
               inString = false; // leaving a literal string
            }
            resExpr += d.at(k++);
         }
      }

      len    = j - pos;
      result = resExpr;

      return true;
   }

   return false;
}

/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QString &expr, int p, int *l)
{
   int n;

   while (p < expr.length()) {
      QChar c = expr.at(p++);

      if (c.isNumber()) {
         // skip number
         while (p < expr.length() && isId(expr.at(p))) {
            ++p;
         }

      } else if (c.isLetter() || c == '_') {
         // read id
         n = p - 1;

         while (p < expr.length() && isId(expr.at(p))) {
            ++p;
         }

         *l = p - n;
         return n;

      } else if (c == '"') {
         // skip string

         QChar ppc = 0;
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);
         }

         while (p < expr.length() && (c != '"' || (pc == '\\' && ppc != '\\')))
            // continue as long as no " is found, but ignoring \", but not \\"
         {
            ppc = pc;
            pc = c;
            c = expr.at(p);
            ++p;
         }

         if (p < expr.length()) {
            ++p;   // skip closing quote
         }

      } else if (c == '/') { // skip C Comment
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);

            if (c == '*') { // Start of C comment
               ++p;

               while (p < expr.length() && !(pc == '*' && c == '/')) {
                  pc = c;
                  c = expr.at(p++);
               }
            }
         }

      }
   }

   return -1;
}

/*! preforms recursive macro expansion on the string expr starting at position pos.
 *  May read additional characters from the input while re-scanning
 *  If expandAll is true then all macros in the expression are expanded, otherwise only the first is expanded
 */
static bool expandExpression(QString &expr, QString *rest, int pos, int level)
{

   if (expr.isEmpty()) {
     return true;
   }

   if (s_expansionDict.contains(expr) && level > MAX_EXPANSION_DEPTH) {
      // check for too deep recursive expansions
      return false;

   } else {
      s_expansionDict.insert(expr);
   }

   QString macroName;
   QString expMacro;

   bool definedTest = false;
   int i = pos;
   int tmpLen;
   int p;
   int len;

   int startPos     = pos;
   int samePosCount = 0;

   while ((p = getNextId(expr, i, &tmpLen)) != -1) {
      // search for an macro name

      bool replaced = false;
      macroName = expr.mid(p, tmpLen);

      if (p < 2 || ! (expr.at(p - 2) == '@' && expr.at(p - 1) == '-')) {
         // no-rescan marker?

         if (! s_expandedDict->contains(macroName)) {

            // expand macro
            QSharedPointer<A_Define> def = DefineManager::instance().isDefined(macroName);

            if (macroName == "defined") {
               definedTest = true;

            } else if (definedTest) {
               // macro name was found after defined

               if (def) {
                  expMacro = " 1 ";
               } else {
                  expMacro = " 0 ";
               }

               replaced    = true;
               len         = tmpLen;
               definedTest = false;

            } else if (def && def->nargs == -1) {
               // simple macro
               // substitute the definition of the macro

               if (s_nospaces) {
                  expMacro = def->m_definition.trimmed();
               } else {
                  expMacro = " " + def->m_definition.trimmed() + " ";
               }

               replaced = true;
               len = tmpLen;

            } else if (def && def->nargs >= 0) {
               // function macro
               replaced = replaceFunctionMacro(expr, rest, p + tmpLen, len, def, expMacro, level);
               len += tmpLen;
            }

            if (replaced) {
               // expand the macro and rescan the expression

               QString resultExpr = expMacro;
               QString restExpr   = expr.right(expr.length() - len - p);

               processConcatOperators(resultExpr);

               bool isExpanded = false;

               if (def && ! def->nonRecursive) {
                  s_expandedDict->insert(macroName, def);
                  isExpanded = expandExpression(resultExpr, &restExpr, 0, level + 1);
                  s_expandedDict->remove(macroName);
               } else if (def && def->nonRecursive) {
                  isExpanded = true;

               }
               if (isExpanded) {
                  expr = expr.left(p) + resultExpr + restExpr;
                  i    = p;

                } else {
                   expr = expr.left(p) + "@-" + expr.right(expr.length()-p);
                   i    = p + tmpLen + 2;
                }

            } else {
               // move to the next macro name
               i = p + tmpLen;
            }

         } else {
            // move to the next macro name
            expr = expr.left(p) + "@-" + expr.right(expr.length() - p);
            i = p + tmpLen + 2;

         }

         // check for too many inplace expansions without making progress
         if (i == startPos) {
           ++samePosCount;

         } else {
           startPos     = i;
           samePosCount = 0;
         }

         if (samePosCount > MAX_EXPANSION_DEPTH) {
           break;
         }

      } else {
         // no re-scan marker found, skip the macro name
         i = p + tmpLen;
      }
   }
  return true;
}

//  inputStr should point to the start of a string or character literal.
// the routine will return a pointer to just after the end of the literal
// the character making up the literal will be added to \a result.

QString::const_iterator processUntilMatch(QString::const_iterator iter_start, QString::const_iterator iter_end,
                  QString &result)
{
   if (iter_start == iter_end) {
      return iter_start;
   }

   // capture start character
   QChar term = *iter_start;

   if (term != '\'' && term != '"') {
      // not a valid literal
      return iter_start;
   }

   QChar ch = term;

   // output start character
   result += ch;
   ++iter_start;

   while (iter_start != iter_end) {
      ch = *iter_start;

      if (ch == term) {
         // found end marker of the literal, output end character and stop

         result += ch;
         ++iter_start;
         break;

      } else if (ch == '\\')  {
         // escaped character, process next character
         // as well without checking for end marker

         result += ch;
         ++iter_start;

         if (iter_start == iter_end) {
            // unexpected end of string after escape character
            break;
         }

         ch = *iter_start;
      }

      result += ch;
      ++iter_start;
   }

   return iter_start;
}

/*! replaces all occurrences of @@@@ in s by @@
 *  and removes all occurrences of @@E
 *  All identifiers found are replaced by 0L
 */
QString removeIdsAndMarkers(const QString &s)
{
   QString::const_iterator iter     = s.constBegin();
   QString::const_iterator iter_end = s.constEnd();

   QString result;

   bool inNum = false;

   while (iter != iter_end) {
      QChar c = *iter;

      // replace @@ with @ and remove @E
      if (c == '@') {

         if (*(iter + 1) == '@') {
            result += c;

         } else if (*(iter + 1) == 'E') {
            // skip
         }

         iter += 2;

      } else if (c.isNumber()) {
         // number

         result += c;
         inNum = true;

         ++iter;

      } else if (c == '\'') {
         iter = processUntilMatch(iter, iter_end, result);

      } else if (c == 'd' && ! inNum) {
         // identifier starting with a `d'

         QStringView tmp = QStringView(iter, iter_end);

         if (tmp.startsWith("defined ") || tmp.startsWith("defined(")) {
            // defined keyword, skip defined
            iter += 7;

         } else {
            result += "0L";
            ++iter;

            while (iter != iter_end) {
               c = *iter;

               if (isId(c)) {
                  ++iter;

               } else {
                  break;
               }
            }
         }

      } else if ((c.isLetter() || c == '_') && ! inNum) {
         // replace identifier with 0L
         result += "0L";
         ++iter;

         while (iter != iter_end) {
            c = *iter;

            if (isId(c)) {
               ++iter;

            } else {
               break;
            }
         }

         while (iter != iter_end) {
            c = *iter;

            if (c.isSpace()) {
               ++iter;

            } else {
               break;
            }
         }

         if (*iter == '(') {
            // undefined function macro
            ++iter;

            int count = 1;

            while (iter != iter_end) {
               c = *iter;
               ++iter;

               if (c == '(') {
                  ++count;

               } else if (c == ')') {
                  --count;

                  if (count == 0) {
                     break;
                  }

               } else if (c == '/') {
                  QChar pc = c;

                  ++iter;
                  c = *iter;

                  if (c == '*') {
                     // start of C comment

                     while (iter != iter_end && ! (pc == '*' && c == '/')) {
                        // search end of comment
                        pc = c;

                        ++iter;
                        c = *iter;
                     }

                     ++iter;
                  }
               }
            }
         }

      } else if (c == '/') {
         // skip C comments
         QChar pc = c;

         ++iter;
         c = *iter;

         if (c == '*') {
            // start of C comment

            while (iter != iter_end && ! (pc == '*' && c == '/')) {
               // search end of comment
               pc = c;

               ++iter;
               c = *iter;
            }

            ++iter;

         } else {
            // not comment but division
            result += pc;
            result += c;

            QChar lc = c.toLower()[0];

            if (! isId(lc) && lc != '.') {
               inNum = false;
            }

            ++iter;
         }

      } else {
         result += c;
         QChar lc = c.toLower()[0];

         if (! isId(lc) && lc != '.') {
            inNum = false;
         }

         ++iter;
      }
   }

   return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption:
 *   \a s only contains pairs of @@'s
 */
QString removeMarkers(const QString &s)
{
   QString::const_iterator iter     = s.constBegin();
   QString::const_iterator iter_end = s.constEnd();
   QString result;

   while (iter != iter_end) {
      QChar c = *iter;

      switch (c.unicode()) {

         case '@': {
            // replace @@ with @

            if (iter + 1 != iter_end && iter[1] ==  '@') {
               result += c;
               ++iter;
            }

            ++iter;
         }
         break;

         case '/': {
            // skip C comments
            result  += c;

            QChar pc = c;
            ++iter;

            if (iter != s.constEnd()) {
               c = *iter;
            }

            if (c == '*') {
               // start of C comment

               while (iter != iter_end  && ! (pc == '*' && c == '/')) {
                  // search end of comment

                  if (*iter == '@' &&  (iter + 1 != iter_end && iter[1] == '@')) {
                     result += c;
                     ++iter;

                  } else {
                     result += c;
                  }

                  pc = c;
                  ++iter;

                  if (iter != iter_end) {
                     c = *iter;
                  }
               }

               if (iter != iter_end) {
                  result += c;
                  ++iter;
               }
            }
         }
         break;

         case '"':
         case '\'':
            // skip string literals and char literals

            iter = processUntilMatch(iter, iter_end, result);
            break;

         default: {
            result += c;
            ++iter;
         }
         break;
      }
   }

   return result;
}

/*! compute the value of the expression in string expr.
 *  If needed the function may read additional characters from the input.
 */
bool computeExpression(const QString &expr)
{
   QString e = expr;

   s_expansionDict.clear();
   expandExpression(e, nullptr, 0, 0);

   e = removeIdsAndMarkers(e);

   if (e.isEmpty()) {
      return false;
   }

   bool retval = parseconstexp(s_yyFileName, s_yyLineNr, e);

   return retval;
}

/*! expands the macro definition in name
 *  If needed the function may read additional characters from the input
 */

QString expandMacro(const QString &name)
{
   QString n = name;

   s_expansionDict.clear();
   expandExpression(n, nullptr, 0, 0);

   n = removeMarkers(n);

   return n;
}

QSharedPointer<A_Define> newDefine()
{
   QSharedPointer<A_Define> def = QMakeShared<A_Define>();

   def->m_name       = s_defName;
   def->m_definition = s_defText.trimmed();
   def->nargs        = s_defArgs;
   def->m_fileName   = s_yyFileName;
   def->fileDef      = s_yyFileDef;
   def->lineNr       = s_yyLineNr - s_yyMLines;
   def->columnNr     = s_yyColNr;
   def->varArgs      = s_defVarArgs;

   if (! def->m_name.isEmpty() && Doxy_Globals::expandAsDefinedDict.contains(def->m_name)) {
      def->isPredefined = true;
   }

   return def;
}

static void addDefine()
{
   if (s_skip) {
      // do not add this define as it is inside a
      // conditional section (cond command) that is disabled

      return;
   }

   QSharedPointer<MemberDef> md = QMakeShared<MemberDef>(s_yyFileName, s_yyLineNr - s_yyMLines, s_yyColNr,
               "#define", s_defName, s_defArgsStr, "", Protection::Public, Specifier::Normal, false,
               Relationship::Member, MemberDefType::Define, ArgumentList(), ArgumentList());

   if (! s_defArgsStr.isEmpty()) {
      ArgumentList argList;

      argList = stringToArgumentList(s_defArgsStr);
      md->setArgumentList(argList);
   }

   int len = s_defLitText.indexOf('\n');

   if (len > 0 && s_defLitText.left(len).trimmed() == "\\") {
      // strip first line if it only contains a slash
      s_defLitText = s_defLitText.right(s_defLitText.length() - len - 1);

   } else if (len > 0) {
      // align the items on the first line with the items on the second line
      int k = len + 1;

      QString::const_iterator iter = s_defLitText.constBegin() + k;

      while (iter !=  s_defLitText.constEnd())  {
         QChar c = *iter;
         ++iter;

         if (c == ' ' || c == '\t') {
            ++k;

         } else {
            break;

         }
      }

      s_defLitText = s_defLitText.mid(len + 1, k - len - 1) + s_defLitText.trimmed();
   }

   md->setInitializer(s_defLitText.trimmed());
   md->setFileDef(s_inputFileDef);
   md->setDefinition("#define " + s_defName);

   QSharedPointer<MemberName> mn = Doxy_Globals::functionNameSDict.find(s_defName);

   if (! mn) {
      mn = QMakeShared<MemberName>(s_defName);
      Doxy_Globals::functionNameSDict.insert(s_defName, mn);
   }

   mn->append(md);

   if (s_yyFileDef) {
      s_yyFileDef->insertMember(md);
   }
}

static inline void outputChar(QChar c)
{
   if (s_includeStack.isEmpty() || s_curlyCount > 0) {
      s_outputString += c;
   }
}

static inline void outputArray(const QString &a, int len)
{
   if (s_includeStack.isEmpty() || s_curlyCount > 0) {
      s_outputString += a.mid(0, len);
   }
}

static void readIncludeFile(const QString &inc)
{
   static bool searchIncludes = Config::getBool("search-includes");
   uint i = 0;

   // find the start of the include file name
   while (i < inc.length() && (inc.at(i) == ' ' || inc.at(i) == '"' || inc.at(i) == '<')) {
      ++i;
   }
   uint s = i;

   // was it a local include?
   bool localInclude = s > 0 && inc.at(s - 1) == '"';

   // find the end of the include file name
   while (i < inc.length() && inc.at(i) != '"' && inc.at(i) != '>') {
      ++i;
   }

   if (s < inc.length() && i > s) {
      // valid include file name found

      // extract include path+name
      QString incFileName = inc.mid(s, i - s).trimmed();
      QString dosExt      = incFileName.right(4);

      if (dosExt == ".exe" || dosExt == ".dll" || dosExt == ".tlb") {
         // skip imported binary files (e.g. M$ type libraries)
         return;
      }

      QString oldFileName = s_yyFileName;

      QSharedPointer<FileDef> oldFileDef = s_yyFileDef;
      int oldLineNr = s_yyLineNr;

      // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
      QString absIncFileName = incFileName;
      {
         QFileInfo fi(s_yyFileName);

         if (fi.exists()) {
            QString absName = fi.absolutePath() + "/" + incFileName;

            QFileInfo fi2(absName);
            if (fi2.exists()) {
               absIncFileName = fi2.absoluteFilePath();

            } else if (searchIncludes) {
               const QStringList includePath = Config::getList("include-path");

               for (auto s : includePath) {

                  QFileInfo fi(s);

                  if (fi.exists() && fi.isDir()) {
                     QString absName = fi.absoluteFilePath() + "/" + incFileName;

                     QFileInfo fi2(absName);
                     if (fi2.exists()) {
                        absIncFileName = fi2.absoluteFilePath();
                        break;
                     }

                  }

               }
            }

         }
      }

      DefineManager::instance().addInclude(s_yyFileName, absIncFileName);
      DefineManager::instance().addFileToContext(absIncFileName);

      // findFile will overwrite s_yyFileDef if found
      QSharedPointer<FileState> fs;
      bool alreadyIncluded = false;

      if ((fs = findFile(incFileName, localInclude, alreadyIncluded))) {
         // see if the include file can be found

         if (oldFileDef) {
            // add include dependency to the file in which the #include was found
            bool ambig;

            // change to absolute name
            QSharedPointer<FileDef> incFd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            QSharedPointer<FileDef> temp;
            if (ambig) {
               temp = QSharedPointer<FileDef>();
            } else {
               temp = incFd;
            }

            oldFileDef->addIncludeDependency(temp, incFileName, localInclude, s_isImported, false);

            // add included by dependency
            if (s_yyFileDef) {
               s_yyFileDef->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, s_isImported);
            }

         } else if (s_inputFileDef) {
            s_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, s_isImported, true);

         }

         fs->bufState   = YY_CURRENT_BUFFER;
         fs->lineNr     = oldLineNr;
         fs->fileName   = oldFileName;
         fs->curlyCount = s_curlyCount;

         s_curlyCount   = 0;

         // push the state on the stack
         s_includeStack.push(fs);

         // set the scanner to the include file

         // Deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# 1 \"%1\" 1\n").formatArg(QString(s_yyFileName));
         outputArray(lineStr, lineStr.length());

         DBG_CTX((stderr, "Switching to include file %s\n", csPrintable(incFileName)));
         s_expectGuard = true;
         s_inputString    = fs->fileBuf;
         s_inputPosition = 0;

         preYY_switch_to_buffer(preYY_create_buffer(0, YY_BUF_SIZE));

      } else {

         if (oldFileDef) {
            bool ambig;

            // change to absolute name for bug 641336
            QSharedPointer<FileDef> fd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            // add include dependency to the file in which the #include was found
            oldFileDef->addIncludeDependency(ambig ? QSharedPointer<FileDef>() : fd, incFileName, localInclude, s_isImported, false);

            // add included by dependency
            if (fd) {
               fd->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, s_isImported);
            }

         } else if (s_inputFileDef) {
            s_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, s_isImported, true);
         }

         if (Debug::isFlagSet(Debug::Preprocessor)) {
            if (alreadyIncluded) {
               Debug::print(Debug::Preprocessor, 0, "#include %s: already included, skipping...\n", csPrintable(incFileName));
            } else {
               Debug::print(Debug::Preprocessor, 0, "#include %s: not found, skipping...\n", csPrintable(incFileName));
            }
         }

         if (s_curlyCount > 0 && !alreadyIncluded) { // failed to find #include inside { ... }
            warn(s_yyFileName, s_yyLineNr, "include file %s was not found, check the value of INCLUDE_PATH", csPrintable(incFileName));
         }
      }
   }
}

static void startCondSection(const QString &sectId)
{
   CondParser prs;

   bool expResult = prs.parse(s_yyFileName, s_yyLineNr, sectId);
   s_condStack.push( QMakeShared<CondCtx>(s_yyLineNr, sectId, s_skip) );

   if (! expResult) {
      s_skip = true;
   }
}

static void endCondSection()
{
   if (s_condStack.isEmpty()) {
      s_skip = false;

   } else {
      QSharedPointer<CondCtx> ctx = s_condStack.pop();
      s_skip = ctx->skip;
   }
}

static void forceEndCondSection()
{
   while (! s_condStack.isEmpty()) {
      s_condStack.pop();
   }

   s_skip = false;
}

static QString escapeAt(const QString &text)
{
   QString result;

   for (auto c : text) {
      if (c == '@') {
         result += "@@";

      } else {
         result += c;
      }
   }

   return result;
}

static char resolveTrigraph(char c)
{
   switch (c) {
      case '=':
         return '#';

      case '/':
         return '\\';

      case '\'':
         return '^';

      case '(':
         return '[';

      case ')':
         return ']';

      case '!':
         return '|';

      case '<':
         return '{';

      case '>':
         return '}';

      case '-':
         return '~';
   }

   return '?';
}

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size)   result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

#define YY_NO_UNISTD_H 1

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define CopyStringCs 8
#define CopyStringFtn 9
#define CopyRawString 10
#define Include 11
#define IncludeID 12
#define EndImport 13
#define DefName 14
#define DefineArg 15
#define DefineText 16
#define SkipCPPBlock 17
#define Ifdef 18
#define Ifndef 19
#define SkipCComment 20
#define ArgCopyCComment 21
#define CopyCComment 22
#define SkipVerbatim 23
#define SkipCPPComment 24
#define RemoveCComment 25
#define RemoveCPPComment 26
#define Guard 27
#define DefinedExpr1 28
#define DefinedExpr2 29
#define SkipDoubleQuote 30
#define SkipSingleQuote 31
#define UndefName 32
#define IgnoreLine 33
#define FindDefineArgs 34
#define ReadString 35
#define CondLineC 36
#define CondLineCpp 37
#define SkipCond 38

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

int preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( preYYtext, preYYleng, 1, preYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1419 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1418 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP

	YY_BREAK
case 2:
YY_RULE_SETUP

	YY_BREAK
case 3:
YY_RULE_SETUP

	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // Trigraph
      unput(resolveTrigraph(preYYtext[2]));
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      BEGIN(Command);
      s_yyColNr  += preYYleng;
      s_yyMLines = 0;
   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
      BEGIN(CopyLine);
   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
      // constructors?
      int i;

      for (i = preYYleng - 1; i >= 0; i--) {
         unput(preYYtext[i]);
      }

      BEGIN(CopyLine);
   }
	YY_BREAK
case 8:
/* rule 8 can match eol */
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{

      // function list macro with one (...) argument, e.g. for K_GLOBAL_STATIC_WITH_ARGS
      // function like macro

      static bool skipFuncMacros = Config::getBool("skip-function-macros");

      QString name = QString::fromUtf8(preYYtext);
      name = name.left(name.indexOf('(')).trimmed();

      QSharedPointer<A_Define> def;

      if (skipFuncMacros && ! s_insideFortran && name != "Q_PROPERTY" && ! ( (s_includeStack.isEmpty() || s_curlyCount > 0) && s_macroExpansion &&
                  (def = DefineManager::instance().isDefined(name)) && (! s_expandOnlyPredef || def->isPredefined)) ) {

         outputChar('\n');
         ++s_yyLineNr;

      } else {
         // do not skip

         for (int i = preYYleng - 1; i >= 0; i--) {
            unput(preYYtext[i]);
         }

         BEGIN(CopyLine);
      }
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_yyLineNr += text.count('\n');
      outputArray(text, text.length());
   }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_delimiter = text.mid(2);
      s_delimiter.chop(1);

      outputArray(text, text.length());
      BEGIN(CopyRawString);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (s_includeStack.isEmpty())  {
         ++s_curlyCount;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (s_includeStack.isEmpty() && s_curlyCount > 0)  {
         --s_curlyCount;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_CSharp) {
         REJECT;
      }

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      BEGIN( CopyStringCs );
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyString );
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);

      BEGIN( CopyStringFtn );
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      QString tmp = text.mid(1);
      tmp.chop(1);

      if (tmp == s_delimiter) {
         BEGIN( CopyLine );
      }
   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_expectGuard = false;
      QSharedPointer<A_Define> def;

      if ((s_includeStack.isEmpty() || s_curlyCount > 0) && s_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                  (! s_expandOnlyPredef || def->isPredefined)) {

         // found it
         s_roundCount = 0;
         s_defArgsStr = text;

         if (def->nargs == -1) {
            // no function macro

            QString result = def->isPredefined ? def->m_definition : expandMacro(s_defArgsStr);
            outputArray(result, result.length());

         } else {
            // zero or more arguments

            s_findDefArgContext = CopyLine;
            BEGIN(FindDefineArgs);

         }

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((s_includeStack.isEmpty() || s_curlyCount > 0) && s_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                   def->nargs == -1 && (! s_expandOnlyPredef || def->isPredefined)) {

            QString result = def->isPredefined ? def->m_definition : expandMacro(text);
            outputArray(result, result.length());

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      //  strip line continuation characters
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
   }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      ++s_yyLineNr;
      s_yyColNr = 1;
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      s_defArgsStr += '(';
      ++s_roundCount;
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      s_defArgsStr += ')';
      --s_roundCount;

      if (s_roundCount == 0) {
         QString result = expandMacro(s_defArgsStr);

         if (s_findDefArgContext == CopyLine) {
            outputArray(result, result.length());
            BEGIN(s_findDefArgContext);

         } else {
            readIncludeFile(result);
            s_nospaces = false;
            BEGIN(Start);
         }
      }
   }
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("       {
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
   }
  */
case 38:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
    }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
      BEGIN(ArgCopyCComment);
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
      BEGIN(ReadString);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      s_defArgsStr += text[0];
      BEGIN(ReadString);
   }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{
      s_defArgsStr += ' ';
      ++s_yyLineNr;
      outputChar('\n');
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      s_defArgsStr += "@@";
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
{
      s_defArgsStr += ' ';
      ++s_yyLineNr;
      outputChar('\n');
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      s_defArgsStr += text[0];
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 51:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // continue line
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_isImported = text[1] == 'm';

      if (s_macroExpansion) {
         BEGIN(IncludeID);
      }
   }
	YY_BREAK
case 56:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_isImported = text[1] == 'm';
      s_incName = text[text.length() - 1];
      BEGIN(Include);
   }
	YY_BREAK
case 57:
YY_RULE_SETUP
{
      s_yyColNr += preYYleng;
      BEGIN(DefName);
   }
	YY_BREAK
case 58:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr.resize(0);
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 59:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr.resize(0);
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 60:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr = "! ";
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 61:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr = "! ";
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 62:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr.resize(0);
      BEGIN(Guard);
   }
	YY_BREAK
case 63:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         s_guardExpr.resize(0);
         BEGIN(Guard);

      } else {
         s_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      if (otherCaseDone()) {
         s_ifcount = 0;
         BEGIN(SkipCPPBlock);

      } else {
         setCaseDone(true);
      }
   }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
      BEGIN(UndefName);
   }
	YY_BREAK
case 66:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         s_guardExpr.resize(0);
         BEGIN(Guard);
      }
   }
	YY_BREAK
case 67:
/* rule 67 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      decrLevel();
   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      ++s_yyLineNr;
   }
	YY_BREAK
case 69:
YY_RULE_SETUP
{
      s_expectGuard = false;
   }
	YY_BREAK
case 70:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(IgnoreLine);
   }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      ++s_yyLineNr;
   }
	YY_BREAK
case 72:
YY_RULE_SETUP

	YY_BREAK
case 73:
YY_RULE_SETUP
{
      s_yyColNr += preYYleng;
   }
	YY_BREAK
case 74:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((def = DefineManager::instance().isDefined(text)) && ! def->nonRecursive) {
         def->undef = true;
      }
      BEGIN(Start);
   }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_guardExpr += ' ';
      ++s_yyLineNr;
   }
	YY_BREAK
case 76:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 77:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 78:
/* rule 78 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      s_guardExpr += "1L";
   }
	YY_BREAK
case 79:
/* rule 79 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      s_guardExpr += "0L";
   }
	YY_BREAK
case 80:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      s_guardExpr += '!';
   }
	YY_BREAK
case 81:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      s_guardExpr += "!=";
   }
	YY_BREAK
case 82:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      s_guardExpr += "&&";
   }
	YY_BREAK
case 83:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      s_guardExpr+="||";
   }
	YY_BREAK
case 84:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      s_guardExpr += "&";
   }
	YY_BREAK
case 85:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      s_guardExpr += "|";
   }
	YY_BREAK
case 86:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      s_guardExpr += "^";
   }
	YY_BREAK
case 87:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      s_guardExpr += "~";
   }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
      s_guardExpr += "@@";
   }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_guardExpr += text[0];
   }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      unput('\n');

      bool guard = computeExpression(s_guardExpr);
      setCaseDone(guard);

      if (guard) {
         BEGIN(Start);

      } else {
         s_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{
      ++s_yyLineNr;
      outputChar('\n');
   }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || s_guardName == text) {
         s_guardExpr+=" 1L ";
      } else {
         s_guardExpr+=" 0L ";
      }

      s_lastGuardName = text;
      BEGIN(Guard);
   }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || s_guardName == text){
         s_guardExpr+=" 1L ";
      } else {
         s_guardExpr+=" 0L ";
      }

      s_lastGuardName = text;
   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{
      // should not happen, handle anyway

      ++s_yyLineNr;
      s_ifcount = 0;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
      BEGIN(Guard);
   }
	YY_BREAK
case 97:
YY_RULE_SETUP

	YY_BREAK
case 98:
YY_RULE_SETUP
{
      BEGIN(SkipCommand);
   }
	YY_BREAK
case 99:
/* rule 99 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{
      ++s_yyLineNr;
      outputChar('\n');
   }
	YY_BREAK
case 101:
YY_RULE_SETUP

	YY_BREAK
case 102:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      ++s_ifcount;
   }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
      if (s_ifcount == 0 && ! otherCaseDone()) {
         setCaseDone(true);
         BEGIN(Start);
      }
   }
	YY_BREAK
case 104:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (s_ifcount == 0)  {

         if (! otherCaseDone()) {
            s_guardExpr.resize(0);
            s_lastGuardName.resize(0);
            BEGIN(Guard);

         } else {
            BEGIN(SkipCPPBlock);
         }
      }
   }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
      s_expectGuard = false;
      decrLevel();

      if (--s_ifcount < 0) {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      ++s_yyLineNr;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(SkipLine);
   }
	YY_BREAK
case 108:
YY_RULE_SETUP

	YY_BREAK
case 109:
YY_RULE_SETUP

	YY_BREAK
case 110:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
      BEGIN(SkipString);
   }
	YY_BREAK
case 112:
YY_RULE_SETUP

	YY_BREAK
case 113:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
   }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
      s_lastCPPContext = YY_START;
      BEGIN(RemoveCPPComment);
   }
	YY_BREAK
case 115:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
   }
	YY_BREAK
case 116:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      s_lastCContext=YY_START;
      BEGIN(RemoveCComment);
   }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      ++s_yyLineNr;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 122:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_nospaces   = true;
      s_roundCount = 0;
      s_defArgsStr = text;
      s_findDefArgContext = IncludeID;
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_nospaces = true;
      readIncludeFile(expandMacro(text));
      BEGIN(Start);
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_incName += text;
      readIncludeFile(s_incName);

      if (s_isImported) {
         BEGIN(EndImport);
      } else {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 125:
/* rule 125 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(Start);
   }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      ++s_yyLineNr;
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{
      // define with argument

      s_argDict = QMakeShared<QHash<QString, int>>();

      s_defArgs = 0;
      s_defArgsStr.resize(0);
      s_defText.resize(0);
      s_defLitText.resize(0);

      s_defName    = QString::fromUtf8(preYYtext);
      s_defVarArgs = false;
      s_defExtraSpacing.resize(0);
      BEGIN(DefineArg);
   }
	YY_BREAK
case 129:
/* rule 129 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // special case: define with 1 -> can be "guard"

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_defArgs = -1;
      s_defArgsStr.resize(0);

      s_defName = QString::fromUtf8(preYYtext);
      s_defName = s_defName.left(s_defName.length() - 1).trimmed();
      s_defVarArgs = false;

      if (s_curlyCount > 0 || s_defName != s_lastGuardName || ! s_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + s_defName;
         outputArray(tmp, tmp.length());

         s_quoteArg      = false;
         s_insideComment = false;
         s_lastGuardName.resize(0);
         s_defText    = "1";
         s_defLitText = "1";
         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         s_defText.resize(0);
         s_defLitText.resize(0);
         BEGIN(Start);
      }

      s_expectGuard = false;
   }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
{
      // empty define
      QString text = QString::fromUtf8(preYYtext);

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_defArgs = -1;
      s_defName = text;

      s_defArgsStr.resize(0);
      s_defText.resize(0);
      s_defLitText.resize(0);
      s_defVarArgs = false;

      if (s_curlyCount > 0 || s_defName != s_lastGuardName || ! s_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + s_defName;
         outputArray(tmp, tmp.length());

         s_quoteArg      = false;
         s_insideComment = false;

         if (s_insideCS) {
            s_defText="1"; // for C#, use "1" as define text
         }

         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         s_guardName = text;
         s_lastGuardName.resize(0);
         BEGIN(Start);
      }

      s_expectGuard = false;
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      // define with content
      QString text = QString::fromUtf8(preYYtext);

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_defArgs = -1;
      s_defArgsStr.resize(0);

      s_defText.resize(0);
      s_defLitText.resize(0);
      s_defName    = text;
      s_defVarArgs = false;

      QString tmp = "#define " + s_defName + s_defArgsStr;
      outputArray(tmp, tmp.length());

      s_quoteArg      = false;
      s_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{
      s_defExtraSpacing += "\n";
      ++s_yyLineNr;
   }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
   }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;

      QString tmp = "#define " + s_defName + s_defArgsStr + s_defExtraSpacing;
      outputArray(tmp, tmp.length());

      s_quoteArg      = false;
      s_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
      // Variadic macro
      s_defVarArgs = true;
      s_defArgsStr +=  QString::fromUtf8(preYYtext);

      s_argDict->insert("__VA_ARGS__", s_defArgs);
      ++s_defArgs;
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;

      s_defVarArgs = text.endsWith("...");

      if (s_defVarArgs)  {
         // strip ellipsis
         text = text.left(text.length() - 3);
      }

      text = text.trimmed();

      s_argDict->insert(text, s_defArgs);
      ++s_defArgs;
   }
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"  {
      s_defText+=preYYtext;
      s_defLitText+=preYYtext;
      s_insideComment=true;
   }

<DefineText>"* /"          {
      s_defText+=preYYtext;
      s_defLitText+=preYYtext;
      s_insideComment=false;
   }
  */
case 138:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
       QString text = QString::fromUtf8(preYYtext);

      s_defText   += text;
      s_defLitText+= text;
      s_lastCContext = YY_START;
      s_commentCount = 1;
      BEGIN(CopyCComment);
   }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      s_lastCPPContext  = YY_START;
      s_defLitText     += ' ';
      BEGIN(SkipCPPComment);
   }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (text[0] == '/') {
         outputChar('/');
      }

      outputChar('*');
      outputChar('/');

      if (--s_commentCount <= 0) {

         if (s_lastCContext == Start) {
            // small hack to make sure that ^... rule will
            // match when going to Start... Example: "/*...*/ some stuff..."

            YY_CURRENT_BUFFER->yy_at_bol = 1;
         }

         BEGIN(s_lastCContext);
      }
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');

      // ++s_commentCount;
   }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());
      s_yyLineNr += text.count('\n');
   }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());

      s_yyLineNr += text.count('\n');
      s_fenceSize = 0;

      if (text[1] == 'f') {
         s_blockName = "f";

      } else {
         QString bn = text.mid(1);
         int i = bn.indexOf('{');

         // for \code{.c}
         if (i != -1) {
            bn = bn.left(i);
         }

         s_blockName = bn.trimmed();
      }
      BEGIN(SkipVerbatim);
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      // escaped @cond
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      // conditional section
      s_ccomment = true;
      s_condCtx  = YY_START;
      BEGIN(CondLineCpp);
   }
	YY_BREAK
case 150:
YY_RULE_SETUP
{
      // conditional section
      s_ccomment = false;
      s_condCtx  = YY_START;
      BEGIN(CondLineC);
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      startCondSection(text);

      if (s_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/", 2);
            s_ccomment = true;

         } else {
            s_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(s_condCtx);

      }
   }
	YY_BREAK
case 152:
YY_RULE_SETUP
{
      // non-guard character
      unput(*preYYtext);
      startCondSection(" ");

      if (s_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/",2);
            s_ccomment = true;

         } else {
            s_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(s_condCtx);
      }
   }
	YY_BREAK
case 153:
/* rule 153 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // no guard
      if (YY_START == SkipCComment) {
         s_ccomment=true;
         // end C comment
         outputArray("*/",2);

      } else {
         s_ccomment = false;
      }

      s_condCtx = YY_START;
      startCondSection(" ");
      BEGIN(SkipCond);
   }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
{
      ++s_yyLineNr;
      outputChar('\n');
   }
	YY_BREAK
case 155:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 156:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 157:
YY_RULE_SETUP
{
      s_ccomment = false;
   }
	YY_BREAK
case 158:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      s_ccomment = true;
   }
	YY_BREAK
case 159:
/* rule 159 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! s_skip) {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 160:
/* rule 160 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      bool oldSkip = s_skip;
      endCondSection();

      if (oldSkip && ! s_skip) {
         if (s_ccomment) {
            outputArray("/** ",4);

            // */ (editor syntax fix)
         }

         BEGIN(s_condCtx);
      }
   }
	YY_BREAK
case 161:
/* rule 161 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      bool oldSkip = s_skip;
      endCondSection();

      if (oldSkip && ! s_skip)  {
         BEGIN(s_condCtx);
      }
   }
	YY_BREAK
case 162:
YY_RULE_SETUP
{
      /* end of verbatim block */

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (text[1] == 'f' && s_blockName == "f") {
         BEGIN(SkipCComment);

      } else if (text.mid(4) == s_blockName) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 163:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (s_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 164:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (s_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 165:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 166:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
{
      ++s_yyLineNr;
      outputChar('\n');
   }
	YY_BREAK
case 168:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 169:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      s_defText    += escapeAt(text);
   }
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defLitText += text;

      s_defText += " ";
      ++s_yyLineNr;
      ++s_yyMLines;
   }
	YY_BREAK
case 171:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      s_defText    += text;
      BEGIN(s_lastCContext);
   }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      ++s_yyLineNr;

      s_defLitText += text;
      s_defText    += ' ';

      outputChar('\n');
   }
	YY_BREAK
case 173:
YY_RULE_SETUP
{
      // see bug 594021 for a usecase for this rule
      if (s_lastCContext == SkipCPPBlock) {
         BEGIN(SkipCommand);

      } else {
         REJECT;
      }
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
{
      BEGIN(s_lastCContext);
   }
	YY_BREAK
case 175:
YY_RULE_SETUP

	YY_BREAK
case 176:
YY_RULE_SETUP

	YY_BREAK
case 177:
YY_RULE_SETUP

	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      ++s_yyLineNr;
      outputChar('\n');
   }
	YY_BREAK
case 179:
YY_RULE_SETUP

	YY_BREAK
case 180:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
{
      unput(*preYYtext);
      BEGIN(s_lastCPPContext);
   }
	YY_BREAK
case 182:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      outputChar('/');
      outputChar('/');
   }
	YY_BREAK
case 184:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 185:
YY_RULE_SETUP
{
      outputChar(*preYYtext);
   }
	YY_BREAK
case 186:
YY_RULE_SETUP

	YY_BREAK
case 187:
YY_RULE_SETUP

	YY_BREAK
case 188:
YY_RULE_SETUP

	YY_BREAK
case 189:
YY_RULE_SETUP

	YY_BREAK
case 190:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      s_quoteArg   = true;
      s_defLitText += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 191:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defLitText += text;

      if (s_quoteArg) {
         s_defText+="\"";
      }

      if (s_defArgs > 0) {
         auto iter = s_argDict->find(text);

         if (iter != s_argDict->end()) {
            int n = iter.value();

            s_defText += '@';

            QString numStr = QString("%1").formatArg(n);
            s_defText += numStr;

         } else {
            s_defText += text;

         }

      } else {
         s_defText += text;
      }

      if (s_quoteArg) {
         s_defText += "\"";
      }

      s_quoteArg = false;
   }
	YY_BREAK
case 192:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      s_defText    += text;
   }
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      outputChar('\n');
      s_defText += ' ';
      ++s_yyLineNr;
      ++s_yyMLines;
   }
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QString comment = extractTrailingComment(s_defLitText);
      s_defLitText += text;

      if (! comment.isEmpty()) {
         outputArray(comment, comment.length());
         s_defLitText = s_defLitText.left(s_defLitText.length() - comment.length() - 1);
      }

      outputChar('\n');

      QSharedPointer<A_Define> def;

      if (s_includeStack.isEmpty() || s_curlyCount > 0) {
         addDefine();
      }

      def = DefineManager::instance().isDefined(s_defName);

      if (def == nullptr)  {
         // new define

         QSharedPointer<A_Define> nd = newDefine();
         DefineManager::instance().addDefine(s_yyFileName, nd);

      } else if (def) {
         // name already exists

         if (def->undef) {
            // undefined name
            def->undef        = false;
            def->m_name       = s_defName;
            def->m_definition = s_defText.trimmed();
            def->nargs        = s_defArgs;
            def->m_fileName   = s_yyFileName;
            def->lineNr       = s_yyLineNr - s_yyMLines;
            def->columnNr     = s_yyColNr;
         }
      }

      s_argDict = QSharedPointer<QHash<QString, int>>();

      ++s_yyLineNr;
      s_yyColNr = 1;
      s_lastGuardName.resize(0);
      BEGIN(Start);
   }
	YY_BREAK
case 195:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defText    += ' ';
      s_defLitText += text;
   }
	YY_BREAK
case 196:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defText    += "##";
      s_defLitText += text;
   }
	YY_BREAK
case 197:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defText     += "@@";
      s_defLitText  += text;
   }
	YY_BREAK
case 198:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;

      if (! s_insideComment) {
         BEGIN(SkipDoubleQuote);
      }
   }
	YY_BREAK
case 199:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;

      if (! s_insideComment) {
         BEGIN(SkipSingleQuote);
      }
   }
	YY_BREAK
case 200:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text;
      s_defLitText += text;
   }
	YY_BREAK
case 201:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text;
      s_defLitText += text;
   }
	YY_BREAK
case 202:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 203:
YY_RULE_SETUP
{
     QString text = QString::fromUtf8(preYYtext);

      s_defText    += text;
      s_defLitText += text;
   }
	YY_BREAK
case 204:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 205:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
   }
	YY_BREAK
case 206:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
   }
	YY_BREAK
case 207:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
   }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(CopyStringCs):
case YY_STATE_EOF(CopyStringFtn):
case YY_STATE_EOF(CopyRawString):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
{
      DBG_CTX((stderr, "End of include file\n"));

      if (s_includeStack.isEmpty()) {
         DBG_CTX((stderr, "Terminating scanner\n"));
         yyterminate();

      } else {
         QSharedPointer<FileState> fs = s_includeStack.pop();

         YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
         preYY_switch_to_buffer(fs->bufState );
         preYY_delete_buffer(oldBuf );

         s_yyLineNr      = fs->lineNr;
         s_inputString   = fs->oldFileBuf;
         s_inputPosition = fs->oldFileBufPos;
         s_curlyCount    = fs->curlyCount;
         setFileName(fs->fileName);

         DBG_CTX((stderr, "######## FileName %s\n", csPrintable(s_yyFileName)));

         // deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# %1 \"%2\" 2").formatArg(s_yyLineNr).formatArg(QString(s_yyFileName));
         outputArray(lineStr, lineStr.length());
      }
   }
	YY_BREAK
case 208:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
case 209:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      if (YY_START == SkipVerbatim || YY_START == SkipCond) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_lastCContext = YY_START;
         s_commentCount = 1;

         if (preYYleng == 3) {
            s_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 210:
YY_RULE_SETUP
{
      if (YY_START == SkipVerbatim || YY_START == SkipCond || getLanguageFromFileName(s_yyFileName) == SrcLangExt_Fortran) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_lastCPPContext = YY_START;

         if (preYYleng == 3) {
            s_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCPPComment);
      }
   }
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      ++s_yyLineNr;
   }
	YY_BREAK
case 212:
YY_RULE_SETUP
{
      // utf-8 code point
      QString text  = QString::fromUtf8(preYYtext);
      s_expectGuard = false;

      for (QChar c : text) {
         outputChar(c);
      }
   }
	YY_BREAK
case 213:
YY_RULE_SETUP
{
      // catch all
      QString text  = QString::fromUtf8(preYYtext);
      s_expectGuard = false;

      for (QChar c : text) {
         outputChar(c);
      }
   }
	YY_BREAK
case 214:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 86);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1419 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 86;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1419 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1418);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
int preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static int getNextChar(const QString &expr, QString *rest, uint &pos)
{
   if (pos < expr.length()) {
      return expr.at(pos++).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc  = rest->at(0).unicode();
      *rest   = rest->right(rest->length() - 1);
      return cc;

   } else {
      int cc = yyinput();

      return cc;
   }
}

static int getCurrentChar(const QString &expr, QString *rest, uint pos)
{
   if (pos < expr.length()) {
      return expr.at(pos).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc = rest->at(0).unicode();
      return cc;

   } else {
      int cc = yyinput();

      returnCharToStream(cc);
      return cc;
   }
}

static void unputChar(const QString &expr, QString *rest, uint &pos, char c)
{
   if (pos < expr.length()) {
      ++pos;

   } else if (rest) {
      char cs[2];
      cs[0] = c;
      cs[1] = '\0';
      rest->prepend(cs);

   } else {

      returnCharToStream(c);
   }
}

void addSearchDir(const QString &dir)
{
   QFileInfo fi(dir);

   if (fi.isDir()) {
      s_pathList.append(fi.absoluteFilePath());
   }
}

void initPreprocessor()
{
   addSearchDir(".");
   s_expandedDict = QMakeShared<DefineDict>();
}

void removePreProcessor()
{
   s_expandedDict = QSharedPointer<DefineDict>();
   s_pathList.clear();

   DefineManager::deleteInstance();
}

QString preprocessFile(const QString &fileName, const QString &input)
{
   printlex(preYY_flex_debug, true, __FILE__, fileName);

   s_macroExpansion   = Config::getBool("macro-expansion");
   s_expandOnlyPredef = Config::getBool("expand-only-predefined");

   s_skip        = false;
   s_curlyCount  = 0;
   s_nospaces    = false;

   s_inputPosition  = 0;
   s_inputString    = input;
   s_outputString   = "";

   s_includeStack.clear();
   s_expandedDict->clear();
   s_condStack.clear();

   setFileName(fileName);

   s_inputFileDef = s_yyFileDef;
   DefineManager::instance().startContext(s_yyFileName);

   static bool firstTime = true;

   if (firstTime)  {
      // add predefined macros
      static QStringList const preDefinedMacros = Config::getList("predefined-macros");

      for (const auto &definedMacro : preDefinedMacros) {

         int posEquals = definedMacro.indexOf('=');
         int posOpen   = definedMacro.indexOf('(');
         int posClose  = definedMacro.indexOf(')');

         bool nonRecursive = posEquals > 0 && definedMacro.at(posEquals - 1) == ':';

         if (posOpen == 0) {
            // no define name
            continue;
         }

         if (posOpen < posEquals && posClose < posEquals && posOpen != -1  &&
                  posClose != -1  &&  posOpen < posClose) {

            // predefined function macro definition

            // regexp matching an id
            static QRegularExpression regExp_id("[a-z_A-Z\x80-\xFF][a-z_A-Z0-9\x80-\xFF]*");
            QHash<QString, int> argDict;

            QString args    = definedMacro.mid(posOpen + 1, posClose - posOpen - 1);
            bool hasVarArgs = args.contains("...");

            int index = posOpen + 1;
            int count = 0;
            int len;

            QRegularExpressionMatch match = regExp_id.match(definedMacro, definedMacro.constBegin() + index);

            // gather the formal arguments in a dictionary
            while (index < posClose) {

               if (match.hasMatch()) {
                  len = match.capturedLength();

                  if (len > 0) {
                     argDict.insert(match.captured(), count);
                     index = match.capturedEnd() - definedMacro.begin();

                     ++count;

                  } else {
                     ++index;
                  }

               } else {
                  break;
               }

               match = regExp_id.match(definedMacro, definedMacro.constBegin() + index);
            }

            if (hasVarArgs) {
              // add the variable argument if present
              argDict.insert("__VA_ARGS__", count);
              ++count;
            }

            // strip definition part
            QString tmp = definedMacro.right(definedMacro.length() - posEquals - 1);
            QString definition;

            index = 0;
            match = regExp_id.match(tmp);

            // substitute all occurrences of formal arguments with their corresponding markers
            while (match.hasMatch()) {

               int p = match.capturedStart() - tmp.constBegin();
               len   = match.capturedLength();

               definition += tmp.mid(index, p - index);

               auto iter = argDict.find(match.captured());

               if (iter != argDict.end()) {
                  int argIndex = iter.value();

                  QString marker = QString(" @%1 ").formatArg(argIndex);
                  definition += marker;

               } else {
                  definition += match.captured();
               }

               index = p + len;
               match = regExp_id.match(tmp, match.capturedEnd());
            }

            if (index < tmp.length()) {
               definition += tmp.mid(index, tmp.length() - index);
            }

            // add define definition to the dictionary of defines for this file
            QString dname = definedMacro.left(posOpen);

            if (! dname.isEmpty()) {
               QSharedPointer<A_Define> def = QMakeShared<A_Define>();

               def->m_name       = dname;
               def->m_definition = definition;
               def->nargs        = count;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = s_yyFileDef;
               def->m_fileName   = fileName;

               DefineManager::instance().addDefine(s_yyFileName, def);
            }

         } else if ((posOpen == -1 || posOpen > posEquals)   &&
                    (posClose == -1 || posClose > posEquals) &&
                    ! definedMacro.isEmpty() && definedMacro.length() > posEquals)  {

            // predefined non-function macro definition
            QSharedPointer<A_Define> def = QMakeShared<A_Define>();

            if (posEquals == -1) {
               // simple define without argument
               def->m_name = definedMacro;
               def->m_definition = "1"; // substitute occurrences by 1 (true)

            } else {
               // simple define with argument
               int ine = posEquals - (nonRecursive ? 1 : 0);
               def->m_name = definedMacro.left(ine);
               def->m_definition = definedMacro.right(definedMacro.length() - posEquals - 1);
            }

            if (! def->m_name.isEmpty()) {
               def->nargs = -1;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = s_yyFileDef;
               def->m_fileName   = fileName;
               DefineManager::instance().addDefine(s_yyFileName, def);
            }
         }
      }
   }

   s_yyLineNr = 1;
   s_yyColNr  = 1;
   s_ifcount  = 0;

   s_levelGuard.clear();

   BEGIN( Start );

   s_expectGuard = determineSection(fileName) == Entry::HEADER_SEC;
   s_guardName.resize(0);
   s_lastGuardName.resize(0);
   s_guardExpr = "";

   preYYlex();

   s_lexInit = true;

   while (! s_condStack.isEmpty()) {
      QSharedPointer<CondCtx> ctx = s_condStack.pop();
      QString sectionInfo = " ";

      if (ctx->sectionId != " ") {
         sectionInfo = QString(" with label '%1' ").formatArg(QString(ctx->sectionId));
      }

      warn(fileName, ctx->lineNr, "Conditional section %s does not have "
           "a corresponding \\endcond command within this file.", csPrintable(sectionInfo));
   }

   // make sure we do not extend a \cond with missing \endcond over multiple files
   forceEndCondSection();

   DefineManager::instance().endContext();
   printlex(preYY_flex_debug, false, __FILE__, fileName);

   return s_outputString;
}

void preFreeScanner()
{
   if (s_lexInit) {
      preYYlex_destroy();
   }
}

