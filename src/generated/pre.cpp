/************************************************************************
*
* Copyright (C) 2014-2020 Barbara Geller & Ansel Sermersheim
* Copyright (C) 1997-2014 by Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,int len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 197
#define YY_END_OF_BUFFER 198
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1629] =
    {   0,
      178,  178,  198,  196,  197,    1,  196,  197,  194,  197,
        3,  196,  197,  196,  197,  196,  197,  196,  197,    2,
      196,  197,    6,  196,  197,    1,    6,  196,  197,    6,
      196,  197,    6,  194,  197,    3,    6,  196,  197,    5,
      196,  197,    6,  196,  197,    6,  196,  197,    6,  196,
      197,    6,  196,  197,    6,  196,  197,    2,    6,  196,
      197,   66,  196,  197,    1,   66,  196,  197,   61,  194,
      197,    3,   66,  196,  197,   66,  196,  197,   66,  196,
      197,   63,   66,  196,  197,   63,   66,  196,  197,   63,
       66,  196,  197,   63,   66,  196,  197,   63,   66,  196,

      197,   63,   66,  196,  197,   63,   66,  196,  197,   63,
       66,  196,  197,    2,   66,  196,  197,   91,  196,  197,
        1,   91,  196,  197,   89,  194,  197,    3,   91,  196,
      197,   91,  196,  197,   91,  196,  197,   90,   91,  196,
      197,   90,   91,  196,  197,   90,   91,  196,  197,   90,
       91,  196,  197,    2,   91,  196,  197,   92,   95,  196,
      197,    1,   92,   95,  196,  197,  100,  194,  197,    3,
       92,   95,  196,  197,   94,   95,  196,  197,   95,  196,
      197,   95,  196,  197,   92,   95,  196,  197,   92,   95,
      196,  197,    2,   92,   95,  196,  197,  101,  104,  196,

      197,    1,  101,  104,  196,  197,    3,  101,  104,  196,
      197,  103,  104,  196,  197,  101,  104,  196,  197,  101,
      104,  196,  197,  104,  196,  197,  101,  104,  196,  197,
        2,  101,  104,  196,  197,   27,  196,  197,    1,   27,
      196,  197,   28,  194,  197,    3,   27,  196,  197,   16,
       27,  196,  197,   17,   27,  196,  197,   27,  196,  197,
       27,  196,  197,   25,   27,  196,  197,16408,   27,  196,
      197,   25,   27,  196,  197,16408,   11,   27,  196,  197,
       12,   27,  196,  197,   25,   27,  196,  197,16408,    2,
       27,  196,  197,   18,  196,  197,    1,   18,  196,  197,

       20,  196,  197,   18,  196,  197,   18,  196,  197,  196,
      197,   18,  196,  197,    2,   18,  196,  197,   21,  196,
      197,    1,   21,  196,  197,   23,  196,  197,   21,  196,
      197,   21,  196,  197,  196,  197,   21,  196,  197,    2,
       21,  196,  197,  196,  197,    1,  196,  197,    3,  196,
      197,  196,  197,  196,  197,  196,  197,    2,  196,  197,
      106,  196,  197,  106,  196,  197,  110,  196,  197,    1,
      110,  196,  197,  108,  194,  197,    3,  110,  196,  197,
      110,  196,  197,  110,  196,  197,  110,  196,  197,  110,
      196,  197,    2,  110,  196,  197, 8306,  196,  197,16495,

    16497,16498, 8306,  196,  197,16495,16497,16498,  196,  197,
      117,  196,  197,  118,  196,  197,  116,  196,  197,  196,
      197,  120,  196,  197,  196,  197,  120,  196,  197,  190,
      196,  197,    1,  190,  196,  197,  178,  190,  196,  197,
      177,  194,  197,    3,  190,  196,  197,  181,  190,  196,
      197,  173,  190,  196,  197,  182,  190,  196,  197,  190,
      196,  197,  190,  196,  197,  180,  190,  196,  197,  174,
      190,  196,  197,  190,  196,  197,  174,  190,  196,  197,
        2,  190,  196,  197,   84,  196,  197,    1,   84,  196,
      197,   83,  194,  197,    3,   84,  196,  197,   84,  196,

      197,   84,  196,  197,   84,  196,  197,    2,   84,  196,
      197,   82,   84,  196,  197,    1,   82,   84,  196,  197,
       82,   84,  196,  197,   82,   83,  194,  197,    3,   82,
       84,  196,  197,   81,   84,  196,  197,   82,   84,  196,
      197,   82,   84,  196,  197,   82,   84,  196,  197,    2,
       82,   84,  196,  197,  149,  151,  196,  197,    1,  151,
      196,  197,  150,  194,  197,    3,  149,  151,  196,  197,
      151,  196,  197,  151,  196,  197,  149,  151,  196,  197,
      151,  196,  197,  151,  196,  197,  149,  151,  196,  197,
        2,  149,  151,  196,  197,  149,  151,  196,  197,  151,

      196,  197,  151,  196,  197,  151,  196,  197,   38,   41,
      196,  197,    1,   38,   41,  196,  197,   40,  194,  197,
        3,   38,   41,  196,  197,   41,  196,  197,   38,   41,
      196,  197,   38,   41,  196,  197,   38,   41,  196,  197,
        2,   38,   41,  196,  197,  152,  175,  196,  197,    1,
      152,  175,  196,  197,  155,  194,  197,    3,  152,  175,
      196,  197,  175,  196,  197,  152,  175,  196,  197,  152,
      175,  196,  197,  174,  175,  196,  197,  175,  196,  197,
      174,  175,  196,  197,    2,  152,  175,  196,  197,  151,
      196,  197,  151,  196,  197,  151,  196,  197,  149,  151,

      196,  197,  151,  196,  197,  151,  196,  197,  151,  196,
      197,  163,  167,  168,  196,  197,    1,  163,  168,  196,
      197,  164,  194,  197,    3,  163,  167,  168,  196,  197,
      167,  168,  196,  197,  163,  167,  168,  196,  197,  168,
      196,  197,  163,  167,  168,  196,  197,    2,  163,  167,
      168,  196,  197,  160,  162,  196,  197,    1,  162,  196,
      197,  161,  194,  197,    3,  160,  162,  196,  197,  162,
      196,  197,  160,  162,  196,  197,  160,  162,  196,  197,
      160,  162,  196,  197,    2,  160,  162,  196,  197,  171,
      172,  196,  197,    1,  172,  196,  197,    3,  171,  172,

      196,  197,  171,  172,  196,  197,  171,  172,  196,  197,
      171,  172,  196,  197,    2,  171,  172,  196,  197,   73,
      196,  197,    1,   73,  196,  197,   74,  194,  197,    3,
       73,  196,  197,   73,  196,  197,   73,  196,  197,   72,
       73,  196,  197,   71,   73,  196,  197,   73,  196,  197,
       71,   73,  196,  197,   71,   73,  196,  197,    2,   73,
      196,  197,   80,  196,  197,    1,   80,  196,  197,   78,
      194,  197,    3,   80,  196,  197,   80,  196,  197,   80,
      196,  197,   76,   80,  196,  197,   80,  196,  197,   76,
       80,  196,  197,    2,   80,  196,  197,   79,   80,  196,

      197,   77,   80,  196,  197,   77,   80,  196,  197,  188,
      196,  197,    1,  188,  196,  197,    3,  188,  196,  197,
      185,  188,  196,  197,  188,  196,  197,  188,  196,  197,
      188,  196,  197,  188,  196,  197,    2,  188,  196,  197,
      189,  196,  197,    1,  189,  196,  197,    3,  189,  196,
      197,  187,  189,  196,  197,  189,  196,  197,  189,  196,
      197,  189,  196,  197,  189,  196,  197,    2,  189,  196,
      197,   67,  196,  197,   67,  196,  197,   65,  196,  197,
        1,   65,  196,  197,    3,   65,  196,  197,   65,  196,
      197,   65,  196,  197,   65,  196,  197,   65,  196,  197,

        2,   65,  196,  197,   37,  196,  197,    1,   37,  196,
      197,   35,  194,  197,    3,   37,  196,  197,   33,   37,
      196,  197,   34,   37,  196,  197,   29,   37,  196,  197,
       30,   37,  196,  197,   37,  196,  197,   37,  196,  197,
       36,   37,  196,  197,   37,  196,  197,    2,   37,  196,
      197,   47,  196,  197,    1,   47,  196,  197,    3,   47,
      196,  197,   42,   47,  196,  197,   43,   47,  196,  197,
       47,  196,  197,   47,  196,  197,   47,  196,  197,   47,
      196,  197,    2,   47,  196,  197,  135,  196,  197,    1,
      135,  196,  197,  134,  135,  196,  197,    3,  135,  196,

      197,  135,  196,  197,  135,  196,  197,  134,  135,  196,
      197,    2,  135,  196,  197,  138,  139,  196,  197,    1,
      138,  139,  196,  197,  137,  194,  197,    3,  138,  139,
      196,  197,  138,  196,  197,  138,  196,  197,  138,  139,
      196,  197,  138,  196,  197,  138,  139,  196,  197,    2,
      138,  139,  196,  197,  192,  193,  195,    6,    6,    5,
        6,    6,  195,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,  195,   99,  192,   97,  193,   90,
       90,   90,   90,   90,  195,   92,   92,   92,  195,  101,
       98,  101,  192,   96,  101,  193,  101,  102,  101,  195,

     8216,   25,16408,   26,   25,16408,   25,  195,16408,   18,
       18,  192,   18,  193,   18,   19,   18,  195,   21,   21,
      192,   21,  193,   21,   22,   21,  195,  107,  192,  193,
      195,  105,  106,  106,  195,  108,  192,  193,  109,  195,
     8306, 8305, 8303, 8306,16495,16497,16498, 8306,  195,16495,
    16497,16498,  118,  117,  118,  116,  120,  120,  115,  120,
      195,  178,  179,  121,  192,  122,  193,  174,  176,  174,
      195,   82,   82,   81,  149,  123,  125,  192,  124,  193,
      149,  149,  195,  149,   38,   39,   38,  193,   38,   38,
      195,  152,  154,  152,  193,  152,  153,  152,  148,  148,

      192,  149,  163,  167,  163,  167,  165,  167,  192,  166,
      167,  193,  163,  167,  163,  167,  195,  160,  157,  159,
      192,  158,  160,  193,  160,  160,  195,  171,  169,  171,
      192,  170,  171,  193,  171,  171,  195,   71,   68,   71,
       71,  195,   76,   75,   76,  195,   77,   77,  195,  184,
      192,  183,  193,  186,   67,   67,  195,   64,   32,  192,
       44,  192,   44,  193,   46,   45,   46,  134,  134,  195,
      139,  192,  193,  139,  139,  195,  192,  193,    4,   63,
       63,   63,   63,   63,   55,   63,   63,   63,   63,   63,
       63,   99,   99,  192,   97,   97,  193,   90,   90,   90,

       85,   90,   90,   93,    4,   92,   98,  101,   98,   98,
      101,  192,   96,  101,   96,   96,  101,  193,    4,  101,
       15,   15,   25,16408,   18,  192,   18,  193,    4,   18,
       21,  192,   21,  193,    4,   21,  192,  193,    4,    4,
      107,  192,  193,    4,  119,  179,  121,  121,  192,  122,
      122,  193,  124,  193,    4,  149,  149,  128,  127,   38,
      193,    4,   38,  152,  193,    4,  152,  145,  149,  147,
      146,  167,  192,  167,  193,    4,  163,  167,    4,  167,
      156,  160,  193,    4,  160,  171,  192,  171,  193,    4,
      171,   71,  183,  193,   31,   32,  192,  141,  141,  192,

      140,  140,  193,    4,  139,  191,16391,16391,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   99,
      191,   90,   86,   90,   90,   90,   93,   98,  101,  191,
       14,   13,   14,   25,16408,   18,  191,   21,  191,  191,
      191,  112,  120,  124,  126,  149,  128,  127,  149,  147,
      146,  167,  191,  171,  191,   71,   31,16391,    9, 8199,
       63,   63,   56,   59,   57,   57,   63,   63,   63,   63,
       63,   63,   63,   63,   87,   90,   88,   90,   90,   13,
       25,16408,  130,   71, 8199,    9,   63,   63,   60,   52,
       51,   63,   63,   63,   63,   58,   25,16408,  129,  133,

      136,  132,   71,    8,    9,   50,   54,   53,16432,   49,
       10,  131,   71,    9, 8240,   70,   69,    9, 8240,  144,
      143,    9,  142,    9,   62,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_accept[1403] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    6,    9,   11,   14,
       16,   18,   20,   23,   26,   30,   33,   36,   40,   43,
       46,   49,   52,   55,   58,   62,   65,   69,   72,   76,

       79,   82,   86,   90,   94,   98,  102,  106,  110,  114,
      118,  121,  125,  128,  132,  135,  138,  142,  146,  150,
      154,  158,  162,  167,  170,  175,  179,  182,  185,  189,
      193,  198,  202,  207,  212,  216,  220,  224,  227,  231,
      236,  239,  243,  246,  250,  254,  258,  261,  264,  269,
      272,  277,  281,  285,  290,  294,  297,  301,  304,  307,
      310,  312,  315,  319,  322,  326,  329,  332,  335,  337,
      340,  344,  346,  349,  352,  354,  356,  358,  361,  364,
      367,  370,  374,  377,  381,  384,  387,  390,  393,  397,
      403,  409,  411,  414,  417,  420,  422,  425,  427,  430,

      433,  437,  441,  444,  448,  452,  456,  460,  463,  466,
      470,  474,  477,  481,  485,  488,  492,  495,  499,  502,
      505,  508,  512,  516,  521,  525,  529,  534,  538,  542,
      546,  550,  555,  559,  563,  566,  571,  574,  577,  581,
      584,  587,  591,  596,  600,  603,  606,  609,  613,  618,
      621,  626,  629,  633,  637,  641,  646,  650,  655,  658,
      663,  666,  670,  674,  678,  681,  685,  690,  693,  696,
      699,  703,  706,  709,  712,  717,  722,  725,  731,  735,
      740,  743,  748,  754,  758,  762,  765,  770,  773,  777,
      781,  785,  790,  794,  798,  803,  807,  811,  815,  820,

      823,  827,  830,  834,  837,  840,  844,  848,  851,  855,
      859,  863,  866,  870,  873,  877,  880,  883,  887,  890,
      894,  898,  902,  906,  910,  913,  917,  921,  925,  928,
      931,  934,  937,  941,  944,  948,  952,  956,  959,  962,
      965,  968,  972,  975,  978,  981,  985,  989,  992,  995,
      998, 1001, 1005, 1008, 1012, 1015, 1019, 1023, 1027, 1031,
     1035, 1038, 1041, 1045, 1048, 1052, 1055, 1059, 1063, 1067,
     1071, 1074, 1077, 1080, 1083, 1087, 1090, 1094, 1098, 1102,
     1105, 1108, 1112, 1116, 1120, 1125, 1128, 1133, 1136, 1139,
     1143, 1146, 1150, 1155, 1156, 1157, 1157, 1158, 1159, 1160,

     1161, 1162, 1163, 1163, 1163, 1164, 1165, 1166, 1167, 1168,
     1169, 1170, 1171, 1172, 1173, 1174, 1176, 1178, 1180, 1181,
     1182, 1183, 1184, 1186, 1187, 1187, 1187, 1188, 1190, 1191,
     1194, 1197, 1198, 1199, 1201, 1201, 1201, 1201, 1202, 1204,
     1205, 1205, 1207, 1210, 1211, 1213, 1215, 1216, 1217, 1219,
     1220, 1222, 1224, 1225, 1226, 1228, 1228, 1229, 1230, 1231,
     1231, 1232, 1232, 1233, 1234, 1236, 1236, 1237, 1238, 1239,
     1239, 1240, 1240, 1241, 1242, 1243, 1244, 1248, 1248, 1253,
     1253, 1254, 1255, 1256, 1257, 1257, 1258, 1258, 1259, 1260,
     1262, 1263, 1263, 1264, 1266, 1268, 1269, 1270, 1270, 1272,

     1273, 1274, 1275, 1276, 1277, 1279, 1281, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1284, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1286, 1287, 1289, 1290,
     1292, 1293, 1293, 1294, 1296, 1297, 1298, 1299, 1300, 1302,
     1302, 1302, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1305,
     1306, 1307, 1310, 1313, 1315, 1315, 1315, 1318, 1319, 1320,
     1322, 1325, 1326, 1328, 1329, 1332, 1335, 1336, 1338, 1339,
     1340, 1340, 1341, 1343, 1344, 1345, 1347, 1348, 1350, 1352,
     1354, 1355, 1356, 1358, 1359, 1359, 1359, 1359, 1361, 1363,
     1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375,

     1375, 1375, 1377, 1378, 1379, 1380, 1380, 1380, 1380, 1380,
     1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
     1391, 1392, 1393, 1395, 1396, 1398, 1399, 1400, 1401, 1402,
     1403, 1404, 1404, 1405, 1405, 1405, 1407, 1409, 1410, 1413,
     1415, 1416, 1419, 1421, 1422, 1422, 1423, 1423, 1423, 1425,
     1427, 1429, 1431, 1433, 1435, 1437, 1438, 1439, 1440, 1442,
     1443, 1444, 1445, 1445, 1445, 1446, 1446, 1447, 1448, 1450,
     1451, 1453, 1455, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1458, 1458, 1459, 1460, 1462, 1464, 1466,

     1468, 1468, 1469, 1470, 1470, 1471, 1472, 1474, 1476, 1479,
     1481, 1481, 1481, 1481, 1482, 1484, 1486, 1488, 1490, 1492,
     1493, 1495, 1495, 1496, 1496, 1496, 1498, 1499, 1501, 1502,
     1504, 1506, 1506, 1507, 1507, 1507, 1508, 1508, 1509, 1510,
     1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520,
     1522, 1523, 1525, 1526, 1527, 1527, 1528, 1528, 1531, 1532,
     1534, 1534, 1534, 1536, 1538, 1540, 1541, 1542, 1543, 1544,
     1545, 1545, 1545, 1545, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1547, 1547, 1548, 1549, 1549, 1550, 1550, 1551,

     1552, 1554, 1554, 1554, 1556, 1557, 1557, 1558, 1558, 1558,
     1558, 1559, 1559, 1560, 1560, 1561, 1562, 1563, 1565, 1566,
     1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576,
     1576, 1577, 1579, 1580, 1580, 1580, 1581, 1581, 1581, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1586,
     1586, 1587, 1587, 1588, 1589, 1589, 1589, 1590, 1591, 1592,
     1593, 1594, 1595, 1596, 1597, 1597, 1597, 1599, 1599, 1599,

     1599, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1601, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1603,
     1604, 1604, 1604, 1604, 1604, 1605, 1605, 1606, 1606, 1607,
     1607, 1608, 1609, 1610, 1611, 1611, 1611, 1611, 1611, 1611,
     1612, 1612, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1614,
     1614, 1614, 1614, 1614, 1615, 1615, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,

     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1617, 1618, 1618, 1618, 1618, 1618, 1619,
     1619, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1620, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
     1621, 1622, 1622, 1622, 1622, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1625, 1625, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,    1,   15,   16,   17,   18,   19,   20,   19,
       19,   19,   19,   19,   19,   21,   21,   22,    1,   23,
       24,   25,   26,   27,   28,   28,   29,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       30,   31,   32,    1,   28,   33,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   43,   50,   51,   52,   53,   54,   43,   55,
       56,   43,   57,   10,   58,   59,    1,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,   10,    8,   11,    1,    8,   12,   13,   14,   14,
       14,    1,   15,    1,    1,    1,   16,   17,   17,    1,
       18,    1,   19,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,    1,    1,   19,   17,
       17,    1
    } ;

static yyconst flex_int16_t yy_base[1534] =
    {   0,
        0,    4,    9,   71,  133,    0,  195,    0,  256,  266,
      276,  283,  345,    0,  406,  410,  416,  444,  456,  482,
      544,    0,  605,  609,  644,    0,  705,    0,  767,    0,
      615,  828,  833,  837,  843,  848,  909,  970,  882,  915,
     1032,    0,  426,  931,  920, 1093, 1099, 1104,  961, 1110,
     1172,    0, 1234,    0, 1284,    0, 1344, 1348, 1354, 1382,
     1417,    0, 1386, 1477, 1538, 1599, 1660, 1721, 1783,    0,
        0,    0, 1844, 1905, 4051, 6533, 6533, 6533, 6533,    1,
     4020, 3981, 6533, 6533, 6533, 1967, 6533, 6533, 6533,    2,
     4014,    4,    0, 3978, 6533, 6533, 6533, 6533, 6533,    3,

     4007,    0, 3979, 3975,    0,    2, 3962, 3960, 3936, 6533,
     6533, 6533, 6533, 6533,   20, 3965,    0,    5, 3944, 3918,
     6533,    0,    0, 6533,    0, 6533, 3946,   22, 3944, 3906,
        0,    0,    0,    0, 6533,   25, 3938,    0, 3897,    0,
     6533, 6533, 6533, 6533, 6533, 3921,   28, 3925,   51,   24,
      461, 6533, 6533,  641, 6533,    0,    0, 6533,   39, 3923,
        0, 3888,    0,    0,    0, 6533,   46, 3920,    0, 3881,
        0,   44,  268,  272,  297,  298,  431,  288,    0,  419,
     3932, 3931, 6533, 3929,  258,   33,   63,  260, 3920,  489,
      861,  256, 3916, 3914, 3913, 3897,   41, 3905,  283, 6533,

     6533,  288, 6533, 6533, 6533, 3894, 6533,  285, 3868, 6533,
        0,  261, 3833, 6533, 6533, 6533, 6533, 6533,  292, 3865,
     3829, 6533, 6533, 6533,  313, 6533, 6533, 6533,  294, 3862,
     3822, 6533,    0, 6533, 6533,    0, 3862,  311, 3846, 2003,
     6533, 3811,    0,  436,  480, 3834, 3790,    0,    0, 6533,
        0, 3817,  312, 3807, 3764,    0, 3792, 3788, 6533, 3781,
     3789,  412,  305,    0,  492, 3746, 3771, 3777,  321,  294,
      615,  898, 3760, 3728,  407,    0, 6533,  417,  462,  486,
      483,  842,  497,    0, 6533, 6533,    0, 3767,  508, 3757,
     3710,    0,    0, 6533,    0,  510, 3739, 3703,    0, 6533,

     6533, 6533, 6533,  511, 3736, 6533,    0,  336, 3722, 3698,
     6533, 6533, 6533, 6533, 6533,  513, 3727,    0, 3744, 3687,
     6533, 6533,    0, 3684, 6533, 6533, 6533, 6533,  516, 3717,
        0, 3672, 6533, 6533, 6533, 6533, 6533,  518, 3705,    0,
     3669, 6533,    0, 3666, 6533, 6533, 6533,  519, 3698,  447,
     3655, 6533, 6533, 6533, 6533, 6533, 6533, 3674, 6533, 6533,
      524, 3672, 6533, 3629, 6533, 6533, 6533, 6533, 6533, 6533,
      594, 3662,  498, 3622, 6533, 6533, 6533,    0, 6533,  607,
     3647, 3606, 6533,    0,    0, 6533,    0, 6533,  608, 3636,
      601, 3600,    0, 3645, 3638,  993, 3595, 6533, 2058, 6533,

      630,    0,  635,  286,  831,    0, 3609, 3602,  403, 3591,
      977, 3578, 3589, 3590, 3583, 3550, 3587, 3582,    0,  573,
     3558, 1104, 3533,    0, 3573,  521, 1121, 3522,    0,  923,
      849, 1292, 6533, 3506, 3550,  623,  657, 6533,  867, 6533,
     3552, 1422, 1297,    0, 3541, 3535, 1417, 6533, 3492,    0,
     3526, 3521, 1474, 6533, 3477,  650, 6533,  868,  960, 2115,
      890,  837, 6533,  865, 1093, 3530, 6533,  419,  612, 2137,
     6533, 3528,  858,  949, 6533, 6533,  988, 3520, 1364,  875,
     3510, 3503, 3497, 3489, 3473,  990, 3459,  991, 6533, 1360,
      873, 3466, 3465,  328,  942,    0, 6533, 3456, 3395, 6533,

      953, 6533,    0, 6533,  889, 3436, 1494, 2127, 3404, 3402,
     3398, 3392, 3408, 3407, 3382, 3387, 3378, 3358, 1340, 1378,
     3374, 3343, 1338, 3364, 3337,    0, 6533, 3376, 1509, 3333,
     3349, 3348, 6533,  634, 2177, 6533,  854, 6533, 3363, 3316,
      874, 1521, 1527, 3329, 3299, 1416, 3318, 3290,  937,    0,
        0, 3334, 3323, 2207,  473, 3281, 1376,    0, 1007, 3313,
     3306, 1560, 3254,    0, 3295, 3286, 1616, 3239,    0, 6533,
     3290, 3254, 3231,    0, 6533, 3230,    0, 3228, 3272, 3260,
     6533,    0, 3217, 6533, 3268, 3259,  683, 3254, 3253, 3243,
     6533, 6533, 3250,    0, 3180,    0, 1006,  980, 1631, 3195,

     3185, 3162, 3195, 6533, 6533, 1018, 1013, 1123, 3199, 3159,
     3160, 3161, 3152, 3146, 6533, 3140, 3140, 3120, 3122, 3125,
     3113,    0, 3132,    0,    0, 3104, 3097, 3091, 6533, 3094,
     3091, 3106, 6533, 3104, 1129,    0,    0,    0, 1400, 1092,
        0, 1131,    0, 6533, 3103, 3097, 1139, 1543, 1558, 3089,
        0,    0, 3074,    0,    0, 1145,  988, 1122, 6533, 1138,
     3086, 3075, 1164, 1090, 6533, 3053, 3065, 6533, 3047, 6533,
     6533, 3037,    0, 3002, 2997, 2988, 1474, 2979, 2995, 2994,
     2974, 2987, 2967, 1385, 1346, 2974, 2963, 2956, 2955, 2961,
     2941, 2939, 1554, 1493, 2941, 2904,    0,    0, 2923, 2922,

     2914, 6533, 1555, 1520, 2916, 2885, 2920,    0, 1491,    0,
     2882, 2881, 1303, 6533,    0,    0, 2904,    0,    0, 2862,
     6533, 2885, 6533, 2884, 1517, 2875, 6533, 2874, 6533, 6533,
        0, 2853, 6533, 1015, 2875, 1616, 2870, 1647, 2844, 2833,
     1586, 2232, 2840, 2833, 2829, 2807, 2800, 2805, 2811,    0,
     1612, 1361, 2809, 2808, 2824, 6533, 1571, 1407, 6533, 6533,
     1655, 1590, 1677,    0,    0, 1335, 2830, 6533, 6533, 2812,
     1447, 1477, 2786, 6533, 2772, 2764, 2767, 2774, 2757, 2761,
     2753, 2749, 2750, 1604, 2747, 2736, 2734, 2723, 2720, 2724,
     2710, 1436, 1098, 2716, 2689, 1647, 1488, 1455, 2713, 2685,

        0, 2690, 2699,    0, 2683, 2717, 6533, 1657, 2689, 2711,
     1702, 1691, 1707, 1713, 6533, 2685, 2676, 6533, 6533, 1574,
     2674, 2294, 1633, 2672, 2653, 2660, 2662, 2688, 6533, 1628,
     2650,    0, 1697, 2673, 2668, 6533, 2666, 1733, 1848, 2638,
     2629, 2630, 1654, 2625, 2615, 2620, 2606, 2600, 2607, 2593,
     1851, 1737, 2591, 1746, 2590, 2585, 2575, 2582, 2575, 2587,
     2569, 2556, 2555, 2545, 2556, 2555, 2532, 2544, 2535, 1750,
     2532, 2558, 2540, 2486, 1659, 1860, 1863, 1398, 1686, 1876,
     1896, 1899, 2492, 2521, 1643, 2482, 6533, 1731, 6533, 1753,
     1754, 2481, 2509, 2507, 2465, 1763, 1884, 1889, 2496, 2450,

     1768, 2447, 2442, 2434, 2437, 2424, 2432, 2407, 2394, 1775,
     6533, 1909, 2403, 2402, 2400, 2398, 2395, 2394, 2384, 2389,
     2387, 1523, 2370, 2363, 2363, 2369, 2353, 2352, 1921, 2355,
     2344, 2154, 2354, 1716, 6533, 2357, 2360, 2365, 2383, 1757,
     1866, 6533, 1854, 6533,  487, 1931, 1935, 2368, 2337, 6533,
     2170, 2224, 2174, 2174, 2167, 2158, 2152, 2147, 2139, 2139,
     2122, 1924, 2135, 2138, 2129, 2109, 2096, 2091, 2100, 2080,
     2097, 2095, 2084, 2018, 1994, 1985, 1996, 1915, 1871, 1893,
     2380, 2385, 2391, 2396, 2401,    0, 1875, 1945, 2423, 1909,
     1857, 1955, 1853, 1853, 1841, 1837, 1816, 1803, 1805, 1725,

     1728,    0, 1718, 1717, 1712, 1698, 1696, 1676, 1667, 1661,
     1664, 1640, 1932, 6533,    0, 2416, 2428, 2440, 2452, 2456,
        0, 1643, 2033, 2460, 2472, 1605,    0, 1592, 1590, 1577,
     1558, 6533, 1541, 1533, 1527, 1519, 1499, 1471, 1459, 1456,
     6533, 2478, 2483, 2489, 2498, 2503, 1451, 2120, 2511, 2141,
     1429, 6533, 1365, 1351, 1345, 1338, 1322, 1305, 1291, 1272,
     1251, 2523, 2528, 2534, 2539, 2544, 6533, 2166, 2560, 2465,
     1254, 1108, 1095, 1044,  957,  913, 2549, 2570, 2554, 2583,
     2590, 2182, 2595, 2574,  872,  879,  801, 2610, 2615, 2621,
     2631, 2641, 2200, 2652, 2605,  623, 2670, 2677, 2646, 2682,

     2690, 2212, 2703, 2666,  581, 2713, 2716, 2728, 2738, 2697,
     2752, 2762, 2748, 2772, 2775, 2758, 2785, 2789, 2795, 2799,
     2805, 2817, 2821, 2824, 2834, 2837, 2851, 2840, 2856, 2866,
     2861, 2872, 2882, 2895, 2898, 2902, 2908, 2912, 2922, 2916,
     2928, 2938, 2932, 2943, 2957, 2953, 2963, 2973, 2967, 2978,
     2989, 2983, 2994, 3000, 3012, 3015, 3029, 3018, 3039, 3049,
     3034, 3055, 3059, 3044, 3069, 3073, 3079, 3084, 3090, 3095,
     3100, 3106, 3116, 3119, 3122, 3134, 3137, 3141, 3151, 3154,
     3157, 3167, 3171, 3177, 3182, 3189, 3192, 3202, 3206, 3216,
     3212, 3226, 3238, 3222, 3232, 3248, 3243, 3253, 3259, 3271,

     3277, 3280, 3293, 3298, 3308, 3303, 3314, 3318, 3328, 3331,
     3335, 3341, 3349, 3352, 3363, 3366, 3369, 3379, 3383, 3396,
     3386, 3401, 3407, 3412, 3418, 3428, 3424, 3434, 3444, 3454,
     3458, 3468, 3462, 3474, 3484, 3479, 3490, 3500, 3494, 3505,
     3511, 3517, 3523, 3526, 3539, 3542, 3555, 3545, 3560, 3566,
     3572, 3576, 3582, 3587, 3594, 3604, 3600, 3610, 3614, 3627,
     3630, 3633, 3643, 3646, 3660, 3649, 3665, 3671, 3676, 3682,
     3692, 3688, 3698, 3704, 3709, 3715, 3718, 3731, 3734, 3747,
     3737, 3752, 3764, 3769, 3774, 3777, 3787, 3793, 3796, 3806,
     3810, 3813, 3824, 3827, 3833, 3838, 3843, 3847, 3853, 3857,

     3861, 3871, 3874, 3880, 3893,  404, 3896, 3902, 3908, 3918,
     3922, 3927, 3935, 3940, 3951, 3957, 3964, 3969, 3977, 3982,
     3985, 3990, 3995,  262, 3998, 4001, 4006, 4012, 4015, 4019,
     4024, 4027, 4032, 4040, 4045, 4056, 4061, 4070, 4074, 4082,
     4087, 4090, 4095, 4100, 4103, 4106, 4111, 4116, 4119, 4125,
     4129, 4132, 4137, 4145, 4150, 4161, 4166, 4174, 4180, 4187,
     4192, 4195, 4200, 4205, 4208, 4211, 4216, 4221, 4224, 4229,
     4235, 4238, 4242, 4250, 4255, 4266, 4271, 4279, 4284, 4293,
     4297, 4300, 4305, 4310, 4313, 4316, 4321, 4326, 4329, 4334,
     4339, 4342, 4348, 4355, 4360, 4371, 4376, 4384, 4389, 4397,

     6533, 4454, 4473, 4492, 4511, 4530, 4549, 4568, 4587, 4606,
     4625, 4644, 4663, 4682, 4701, 4720, 4739, 4758, 4777, 4796,
     4815, 1616, 1716, 1928, 4834, 4853, 4872, 4891, 4910, 4927,
     4944, 4963, 4982, 5001, 5020, 5037, 5054, 5071, 5087, 1937,
     5104, 5123, 5140, 5159, 5178, 5197, 5216, 5235, 5254, 1938,
     1947, 1948, 5273, 2018, 5292, 5311, 5328, 5345, 2029, 2033,
     5364, 5383, 2037, 5402, 5421, 5440, 5459, 5478, 5497, 5516,
     5533, 5550, 5569, 5588, 5605, 5622, 5639, 5655, 2038, 5672,
     5691, 5708, 5727, 5746, 5765, 5784, 5803, 5822, 2120, 2137,
     2182, 2193, 5841, 5860, 5877, 5894, 5913, 5932, 2212, 5951,

     5970, 2360, 5989, 6008, 6027, 6046, 6065, 6084, 6103, 6120,
     6137, 6156, 6175, 6194, 6213, 6232, 6251, 6270, 6289, 6308,
     2364, 6327, 6346, 6365, 6384, 6403, 6422, 6439, 6456, 2395,
     6475, 6494, 6513
    } ;

static yyconst flex_int16_t yy_def[1534] =
    {   0,
     1402, 1402, 1402, 1401, 1401,    5, 1401,    7, 1403, 1403,
     1404, 1404, 1401,   13, 1405, 1405, 1406, 1406, 1407, 1407,
     1401,   21, 1408, 1408,   21,   25, 1401,   27, 1401,   29,
     1409, 1410, 1402, 1402, 1402, 1402, 1411, 1411, 1412, 1412,
     1401,   41,   38,   38, 1413, 1413, 1414, 1414, 1415, 1415,
     1401,   51, 1401,   53,   53,   55, 1416, 1416, 1417, 1417,
       25,   61, 1418, 1418, 1419, 1419, 1420, 1420, 1401,   69,
       69,   69, 1421, 1421, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1422, 1422, 1422, 1401, 1401, 1401, 1401, 1401, 1401,

     1401, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1424, 1424, 1424, 1424,
     1401, 1425, 1425, 1401, 1425, 1401, 1426, 1401, 1425, 1425,
     1425, 1427, 1427, 1427, 1401, 1427, 1427, 1428, 1427, 1427,
     1401, 1401, 1401, 1401, 1401, 1429, 1401, 1401, 1430, 1401,
     1430, 1401, 1401, 1430, 1401, 1431, 1431, 1401, 1431, 1431,
     1432, 1431, 1431, 1433, 1433, 1401, 1433, 1433, 1434, 1433,
     1433, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1436, 1436,
     1437, 1437, 1401, 1437, 1437, 1437, 1401, 1437, 1437, 1438,
     1438, 1401, 1401, 1401, 1401, 1401, 1439, 1401, 1439, 1401,

     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1440, 1401, 1440, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1441, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1442, 1401, 1401, 1442, 1401, 1401, 1442, 1401,
     1401, 1442, 1442, 1442, 1401, 1401, 1401, 1443, 1443, 1401,
     1443, 1401, 1443, 1443, 1443, 1443, 1444, 1444, 1401, 1444,
     1401, 1444, 1444, 1440, 1444, 1440, 1444, 1401, 1401, 1401,
     1442, 1401, 1401, 1401, 1445, 1446, 1401, 1445, 1447, 1445,
     1401, 1445, 1445, 1448, 1401, 1401, 1448, 1401, 1448, 1448,
     1448, 1448, 1449, 1401, 1449, 1449, 1449, 1449, 1449, 1401,

     1401, 1401, 1401, 1401, 1401, 1401, 1450, 1401, 1450, 1450,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1451, 1401, 1451,
     1401, 1401, 1452, 1452, 1401, 1401, 1401, 1401, 1401, 1401,
     1453, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1453,
     1401, 1401, 1454, 1454, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1455, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1456, 1401, 1401, 1401, 1401, 1457, 1401, 1401,
     1401, 1457, 1401, 1458, 1458, 1401, 1458, 1401, 1401, 1458,
     1401, 1458, 1458, 1401, 1401, 1401, 1401, 1401, 1401, 1401,

     1459, 1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1461, 1462, 1463, 1463,
     1463, 1463, 1463, 1464, 1465, 1466, 1464, 1464, 1467, 1468,
     1469, 1467, 1401, 1467, 1401, 1470, 1401, 1401, 1471, 1401,
     1401, 1471, 1471, 1472, 1472, 1472, 1472, 1401, 1472, 1473,
     1473, 1473, 1473, 1401, 1473, 1474, 1401, 1474, 1474, 1474,
     1474, 1401, 1401, 1475, 1475, 1476, 1401, 1476, 1476, 1476,
     1401, 1401, 1476, 1401, 1401, 1401, 1477, 1401, 1477, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1478, 1401, 1478,
     1401, 1401, 1401, 1401, 1401, 1479, 1401, 1401, 1479, 1401,

     1480, 1401, 1481, 1401, 1401, 1401, 1481, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1481, 1481, 1401,
     1401, 1401, 1401, 1401, 1401, 1482, 1401, 1482, 1482, 1482,
     1483, 1483, 1401, 1483, 1483, 1401, 1483, 1401, 1401, 1401,
     1401, 1481, 1401, 1401, 1401, 1401, 1401, 1401, 1484, 1485,
     1486, 1486, 1486, 1484, 1401, 1401, 1484, 1487, 1401, 1401,
     1487, 1487, 1487, 1488, 1488, 1488, 1488, 1488, 1489, 1401,
     1401, 1489, 1489, 1490, 1401, 1490, 1491, 1491, 1401, 1401,
     1401, 1492, 1492, 1401, 1401, 1493, 1494, 1401, 1401, 1401,
     1401, 1401, 1401, 1495, 1495, 1496, 1401, 1401, 1496, 1401,

     1401, 1496, 1401, 1401, 1401, 1401, 1497, 1401, 1498, 1499,
     1499, 1499, 1499, 1499, 1401, 1499, 1499, 1499, 1499, 1499,
     1499, 1500, 1500, 1501, 1501, 1502, 1502, 1502, 1401, 1502,
     1502, 1503, 1401, 1401, 1401, 1504, 1505, 1506, 1505, 1507,
     1508, 1507, 1509, 1401, 1401, 1401, 1401, 1401, 1510, 1511,
     1511, 1511, 1512, 1512, 1512, 1513, 1513, 1513, 1401, 1514,
     1514, 1514, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1481, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1481, 1401, 1401, 1401, 1515, 1515, 1516, 1516,

     1401, 1401, 1481, 1401, 1401, 1401, 1517, 1517, 1518, 1517,
     1401, 1401, 1401, 1401, 1519, 1519, 1520, 1520, 1520, 1521,
     1401, 1522, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1496, 1401, 1401, 1497, 1523, 1401, 1498, 1401, 1499, 1499,
     1499, 1401, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1500,
     1502, 1502, 1502, 1502, 1524, 1401, 1401, 1505, 1401, 1401,
     1401, 1401, 1510, 1511, 1512, 1513, 1514, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1481, 1401, 1401, 1401, 1401, 1481, 1401, 1401, 1401,

     1517, 1401, 1401, 1520, 1521, 1525, 1401, 1401, 1401, 1523,
     1526, 1401, 1401, 1401, 1401, 1499, 1499, 1401, 1401, 1401,
     1499, 1401, 1499, 1499, 1499, 1499, 1499, 1499, 1401, 1401,
     1502, 1502, 1502, 1401, 1401, 1401, 1401, 1401, 1510, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1521, 1401, 1401, 1401, 1526, 1526, 1526, 1401, 1526, 1401,
     1401, 1401, 1499, 1499, 1401, 1401, 1401, 1401, 1401, 1499,
     1499, 1499, 1499, 1401, 1401, 1401, 1510, 1401, 1401, 1401,

     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1527, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1521,
     1401, 1526, 1526, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1528, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1529, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1527, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1521, 1401,
     1526, 1526, 1401, 1401, 1401, 1530, 1401, 1401, 1401, 1401,
     1529, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,

     1401, 1531, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1532, 1526, 1526, 1401, 1401, 1401,
     1530, 1401, 1401, 1401, 1401, 1401, 1533, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1526, 1526, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1526, 1526, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1526, 1526, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1526, 1526, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1526, 1526, 1401, 1401,

     1401, 1401, 1401, 1401, 1401, 1526, 1526, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,

     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,

     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,

        0, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,

     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401
    } ;

static yyconst flex_int16_t yy_nxt[6596] =
    {   0,
     1401,   77,  462,   78,   79,   77,  638,   78,   79, 1401,
       77,  463,   78,   79,  394,  394,  394,   80,  395,  395,
      395,   80,  403,  403,  403,   81,   80,  440,  441,   81,
      638,  403,  403,  417,   81,  417,  467,  418,  430,  418,
      411,  394,  431,  486,  409,  395,  410,  412,  413,  420,
      457,  421,  445,  437,  437,  437,  446,  487,  470,  451,
       82,   83,  438,  452,   82,   83,  471,  472,  457,   82,
       83,   84,   85,   86,   87,   88,   84,   84,   89,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   90,   84,
       84,   84,   84,   84,   84,   84,   91,   84,   92,   92,

       84,   84,   84,   84,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   84,   84,   84,
       93,   94,   95,   96,   97,   96,   98,   99,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      100,   96,   96,   96,   96,   96,   96,   96,  101,   96,
      102,  102,   96,   96,   96,   96,  102,  102,  103,  104,
      105,  102,  102,  102,  106,  102,  102,  102,  102,  102,
      102,  107,  102,  102,  102,  108,  102,  102,  102,   96,
       96,   96,  102,  109,  110,  111,  112,  111,  113,  114,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  115,  111,  111,  111,  111,  111,  111,  111,
      116,  111,  117,  117,  111,  111,  111,  111,  117,  117,
      117,  117,  118,  117,  117,  117,  119,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  111,  111,  111,  117,  120,  121,  123,  480,  124,
      125,  467,  126,  467,  497,  498,  127,  123,  481,  124,
      125,  468,  126,  128,  457,  469,  127,  133,  457,   78,
      134,  129,  135,  128,  133,  486,   78,  134,  608,  135,
      491,  129,  457,  136,  457,  492,  457,  609,  494,  487,

      136,  137,  495,  457,  457,  417,  138,  417,  137,  418,
      458,  418,  457,  138,  459,  501,  130,  131,  950,  473,
      502,  457,  457,  460,  505,  394,  130,  131,  506,  528,
      535,  540,  541,  668,  539,  532,  139,  140,  395,  570,
      571,  669,  490,  139,  140,  141,  142,  141,  143,  144,
      141,  145,  141,  141,  141,  146,  141,  141,  141,  141,
      141,  141,  147,  141,  141,  141,  141,  141,  141,  141,
      148,  141,  149,  149,  141,  150,  141,  141,  149,  149,
      149,  149,  151,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  152,  153,  141,  149,  154,  155,  157,  550,   78,
       79,  157,  158,   78,   79,  438,  158,  165,  550,   78,
       79,  462,  467,  159,  551,  394,  166,  159,  233,  534,
      463,  160,  660,  167,  551,  160,  161,  457,  519,  268,
      161,  168,  532,  269,  612,  165,  169,   78,   79,  520,
      584,  585,  270,  613,  166,  457,  270,  173,  241,   78,
      174,  167,   76,  437,  437,  437,  162,  163,  521,  168,
      162,  163,  438,  175,  169,  552,  170,  171,  465,  553,
       76,  176,  523,  173,  241,   78,  174,  550,   76,  945,
      461,  474,  475,  520,  522,  536,  537,  504,  550,  175,

      476,  592,  593,  551,  170,  171,   76,  176,  711,  555,
      676,  554,  521,  555,  551,  442,  177,  178,  556,  478,
      511,  560,  532,  565,  394,  561,  394,  566,  395,  579,
      395,  394,  394,  580,  987,  395,  395,  588,  522,  635,
      635,  395,  177,  178,   76,   77,   76,   78,   79,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   80,   76,   76,   76,   76,   76,   76,   76,   81,
       76,  179,  179,   76,   76,   76,   76,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

       76,   76,   76,  179,  180,   83,  182,  589,  183,  184,
      182,  590,  183,  184,  626,  467,  216,  542,  217,  218,
      394,  597,  185,  627,  395,  598,  185,  600,  543,  661,
      186,  600,  219,  646,  186,  187,  702,  606,  601,  187,
      220,  647,  647,  437,  437,  437,  607,  544,  403,  403,
      403,  699,  438,  403,  403,  403,  457,  403,  403,  648,
      648,  648,  403,  403,  532,  188,  189, 1105,  438,  188,
      189,  190,  190,  545,  457,  221,  222,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,

      443,  725,  725,  190,  191,   76,   77,  192,   78,   79,
       76,   76,   76,   76,   76,   76,  193,  194,   76,  195,
       76,  196,   80,   76,   76,   76,   76,   76,   76,   76,
       81,   76,  197,  197,   76,  198,   76,   76,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,   76,   76,   76,  197,  199,   83,  200,  201,  202,
      203,  204,  200,  205,  206,  200,  200,  207,  200,  200,
      200,  200,  200,  200,  208,  200,  200,  200,  200,  200,
      200,  200,  209,  210,  211,  211,  200,  212,  200,  200,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  200,  200,  200,  211,  213,  214,  224,
      225,  226,  227,  608,   77,  228,   78,   79,   77,  462,
       78,   79,  609,  550,   77,  229,   78,   79,  463,   77,
       80,   78,   79,  230,   80,  641,  702,  536,   81,  551,
       80,  467,   81,  474,  475,   80,  642,  462,   81,  437,
      437,  437,  476,   81,  457,  491,  463,  480,  438,  641,
      492,  656,  702,  249,  532,  250,  251,  481,  231,  232,
      405,  478,  457,   82,   83,  252,  457,   82,   83,  253,

      546,  557,  603,   82,   83,  702,  504,  254,   82,   83,
      234,  543,  235,  236,  457,  538,  249,  473,  250,  251,
      479,  276,  237,  277,  278, 1096,  238,  843,  252,  638,
      544,  702,  253,  271,  239,  240,  639,  279,  550,  240,
      254,  241,  255,  256,  272,  280,  281,  670,  269,  461,
      281,  474,  475,  638,  551,  501,  545,  270,  702,  671,
      502,  270,  294,  273,  277,  295,  457,  241,  663,  242,
      243,  234,  244,  235,  236,  255,  256,  657,  296,  615,
      282,  283,  615,  245,  457,  729,  297,  238,  615,  274,
      474,  475,  486,  486,  457,  239,  240,  730,  605,  476,

      240, 1087,  246,  605,  605,  605,  487,  487,  605,  713,
      605,  727,  457,  616,  714,  605,  605,  605,  478,  728,
      606,  298,  299,  617,  735,  736,  735,  736,  247,  607,
      242,  243,  257,  258,  257,  259,  260,  257,  257,  257,
      257,  257,  257,  257,  257,  261,  257,  257,  257,  262,
      257,  257,  257,  257,  257,  257,  257,  263,  257,  264,
      264,  257,  265,  257,  257,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  257,  257,
      257,  264,  266,  267,  276,  462,  277,  278,  641,  702,

      285,  476,  286,  287,  463,  285,  629,  286,  287,  629,
      279,  294,  288,  277,  295,  629,  289,  288,  280,  281,
      478,  289,  641,  281,  290,  608,  636,  296,  457,  290,
      521,  605,  636,  636,  609,  297,  636,  641,  605,  756,
      630,  467, 1086,  636,  636,  636,  457,  757,  757,  760,
      631,  457,  465,  282,  283,  767,  522,  761,  761,  291,
      292,  641,  766,  784,  291,  292,  768,  768,  768,  457,
      298,  299,  300,  301,  300,  302,  303,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  304,
      300,  300,  300,  300,  300,  300,  300,  305,  306,  307,

      307,  300,  308,  300,  300,  307,  307,  307,  309,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  300,  300,
      300,  307,  310,  311,  312,  313,  312,  314,  315,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  316,  312,  312,  312,  312,  312,  312,  312,  317,
      312,  318,  318,  312,  319,  312,  312,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      312,  312,  312,  318,  320,  321,  322,  643, 1085,  437,

      437,  437,  643,  643,  643,  713,  702,  643,  438,  643,
      714,  323,  323, 1076,  643,  643,  643,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      694,  457,  693,  323,  324,  326,  702,   78,  327,  326,
      328,   78,  327,  520,  328,  335,  443,   78,  336,  457,
      702,  329,  486,  830,  337,  329,  474,  475, 1075,  330,
      521,  338,  521,  330,  331,  476,  487,  550,  331,  339,
      523,  783, 1074,  335,  340,   78,  336,  346, 1073,   98,
      347,  520,  337,  551,  478, 1072,  522,  784,  522,  338,

      934,  935,  831,  348,  332,  333,  638,  339,  332,  333,
      521,  349,  340,  638,  341,  342,  350,  758,  704,  490,
      843,  781,  652,  479,  437,  437,  437,  652,  652,  652,
      638,  782,  652,  438,  652,  557,  522,  638,  792,  652,
      652,  652,  341,  342,  343,  343,  351,  352,  544,  520,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  649,  545, 1071,  343,  344,  346,  655,
       98,  347,  774,  840,  605,  655,  655,  544, 1067,  655,
      797,  655,  550,  841,  348,  793,  655,  655,  655,  673,

     1061,  543,  349,  774,  673,  673,  673,  350,  551,  673,
     1060,  605,  842,  545,  698, 1059,  673,  673,  673,  698,
      698,  698,  798,  703,  698,  521,  698,  807,  843,  546,
      774,  698,  698,  698,  543,  808,  808,  351,  352,  354,
      543,  355,  356, 1058,  357,  762,  762,  762,  358,  359,
      360,  522,  544,  544,  438,  361,  792,  797,  972,  544,
      437,  437,  437,  362,  363,  716, 1057,  520,  543,  438,
      716,  716,  716, 1056,  702,  716,  885,  716,  545,  545,
     1055,  633,  716,  716,  716,  545,  521,  544,  818,  835,
      835,  818,  838,  838,  838,  763,  784,  818,  364,  365,

      354,  438,  355,  356, 1054,  357,  854,  854,  854,  358,
      359,  360,  522,  545,  829,  886,  361,  829,  812,  813,
      814,  719,  843,  829,  362,  363,  719,  719,  719,  404,
      830,  719,  404,  719, 1053,  888,  605,  815,  719,  719,
      719,  731,  731,  731,  889,  885,  731,  843,  605,  814,
      814,  814, 1051,  731,  731,  731,  901,  901,  901,  364,
      365,  367, 1401,   78,  368,  836,  369,  723,  815,  895,
      370,  878,  815,  837,  837,  873,  873,  371, 1047,  437,
      437,  437,  862,  863,  886,  372, 1040,  864,  438, 1401,
      373,  865,  866,  880,  881,  882,  867, 1039,  878,  629,

      868,  869,  629,  815,  876,  813,  877, 1038,  629,  882,
      882,  882,  815, 1037,  878,  882,  882,  882,  934,  935,
      374,  375,  367,  879,   78,  368,  839,  369,  815,  406,
     1036,  370,  406,  888,  815,  896,  896,  896,  371,  910,
      911,  912,  889, 1035,  438, 1034,  372,  815,  854,  854,
      854,  373,  929,  911,  912,  941,  943,  784,  879,  818,
      944, 1033,  818,  815,  942,  947,  947,  947,  818,  815,
      901,  901,  901,  784,  438, 1031,  944,  910,  911,  912,
      843,  374,  375,  376,  377,  378,   78,  379,  378,  376,
      376,  376,  378,  376,  378,  378,  376,  376,  378,  378,

      380,  378,  378,  378,  376,  376,  376,  376,  381,  376,
      378,  378,  376,  376,  376,  376,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  376,
      376,  376,  378,  382,  383,  385, 1030,  386,  387,  388,
      437,  437,  437,  854,  854,  854,  943,  388,  843,  438,
      944,  389,  932,  881,  933,  933,  882,  933,  941,  390,
      391,  843,  878, 1013,  391,  878,  944,  942,  936,  937,
      938,  879, 1014, 1029,  879, 1028,  948,  948,  948, 1027,
      949,  901,  901,  901,  897,  438, 1026,  815,  938,  938,

      938,  938,  938,  938,  392,  393,  385,  909,  386,  387,
      388,  912,  911,  912,  992, 1025,  879,  815,  388,  879,
      815, 1022,  389,  929,  911,  912,  854,  854,  854, 1015,
      390,  391,  815,  829, 1013,  391,  829,  988,  988,  988,
      950,  419,  829, 1014,  419,  951,  438, 1023, 1023, 1023,
      496,  569,  815,  496,  569,  815,  438,  901,  901,  901,
      574,  577, 1012,  574,  577,  392,  393,  398,  398,  399,
      398,  398,  398,  398,  400,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  401,  401,  398,  398,  398,  398,

      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  398,  398,  398,  402,  402,  398,  508,
     1011,  582, 1010,  508,  582, 1048, 1048, 1048,  509,  510,
      511, 1009,  404,  512,  438,  404,  406,  513,  514,  406,
      419,  496,  515,  419,  496, 1008,  516,  517,  398,  398,
      399,  398,  398,  398,  398,  400,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  401,  401,  398,  398,  398,
      398,  402,  402,  402,  402,  402,  402,  402,  402,  402,

      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  398,  398,  398,  402,  402,  398,
      658,  457, 1068, 1068, 1068,  658,  658,  658, 1007, 1006,
      658,  438,  658,  569,  702,  784,  569,  658,  658,  659,
      467, 1005,  662, 1070, 1070, 1070,  784,  662,  662,  662,
      574,  784,  662,  574,  662, 1004,  981,  937,  982,  662,
      662,  662,  674,  675,  676,  677,  878,  678, 1082, 1082,
     1082,  679,  680, 1003, 1002,  879,  681,  438, 1001,  962,
      682,  683,  700, 1000, 1093, 1093, 1093,  700,  700,  700,
      999,  998,  700,  438,  700,  577,  997,  950,  577,  700,

      700,  700, 1102, 1102, 1102,  996,  582,  532,  550,  582,
      879,  438,  709,  995, 1108, 1108, 1108,  709,  709,  709,
      994,  993,  709,  438,  710,  406,  952,  992,  406,  709,
      709,  709,  819,  819,  820,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      406,  406,  406,  819,  819,  819,  819,  819,  819,  406,
      406,  819,  819,  819,  819,  406,  406,  406,  406,  406,
      406,  406,  406,  821,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  819,  819,
      819,  406,  406,  819,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  406,  406,  406,  887,  887,  887,  887,  887,
      887,  406,  406,  887,  887,  887,  887,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      887,  887,  887,  406,  406,  887,  982,  938,  982,  983,
      984,  985,  985,  985,  985,  990,  878,  985,  985,  985,
      989,  989,  989,  419,  949,  879,  419,  569,  815,  438,
      569,  815, 1016,  984, 1017,  939,  815, 1017,  985, 1017,
      980,  979,  878, 1018, 1019, 1020,  978,  878, 1020, 1020,

     1020,  879,  977, 1020, 1020, 1020,  879,  976, 1021,  975,
      879, 1021,  815,  815,  974,  973,  815,  815, 1042, 1019,
     1043,  815,  815,  971,  950, 1024, 1024, 1024,  878,  949,
     1043, 1020, 1043,  970,  438,  969,  879,  879,  968,  967,
      878,  879, 1044, 1045, 1046,  966,  965,  815,  964,  879,
      963,  962,  815,  960, 1046, 1046, 1046,  815, 1046, 1046,
     1046,  815, 1049, 1049, 1049,  959,  949, 1084, 1084, 1084,
      958,  438,  879,  815, 1050, 1050, 1050,  815,  949,  950,
     1062, 1045, 1063,  957,  879, 1063, 1046, 1063,  956,  955,
      878, 1064, 1065, 1066,  954,  878,  815,  953,  952,  879,

     1066, 1066, 1066,  946,  879, 1066, 1066, 1066,  815,  894,
      815,  945,  815, 1069, 1069, 1069,  950,  949,  891,  815,
      940,  950,  438,  939,  815, 1077, 1065, 1078,  950,  408,
     1078, 1066, 1078,  931,  879,  878, 1079, 1080, 1081,  879,
      878, 1081, 1081, 1081,  879,  815, 1081, 1081, 1081,  879,
      723, 1088, 1080, 1089,  815,  815, 1090, 1091, 1092,  815,
      815,  878, 1083, 1083, 1083,  815,  949,  950,  723,  930,
      879,  438, 1089, 1081, 1089,  815, 1095, 1095, 1095,  879,
      928,  927,  878,  926,  879, 1092, 1092, 1092,  925,  924,
      815,  879, 1092, 1092, 1092,  815,  923, 1094, 1094, 1094,

      815,  949,  922,  921,  815,  879,  438, 1104, 1104, 1104,
      815,  815, 1097, 1091, 1098,  920,  950, 1098, 1092, 1098,
      919,  918,  878, 1099, 1100, 1101,  879,  878,  917,  916,
      950,  879,  915, 1101, 1101, 1101,  879,  914,  913,  815,
      908,  907,  815, 1101, 1101, 1101,  815,  906, 1099, 1100,
     1101,  950,  815,  905, 1103, 1103, 1103,  904,  949,  903,
      902,  950,  815,  438,  900,  899,  879,  815, 1110, 1110,
     1110,  879, 1106, 1100, 1107,  898,  836,  815,  633, 1107,
     1101, 1107,  878,  633, 1101, 1101, 1101,  815,  751,  878,
      894,  879, 1101, 1101, 1101,  893,  892,  815,  879, 1113,

     1113, 1113,  815,  815,  891, 1109, 1109, 1109,  950,  949,
      890,  815,  741,  884,  438, 1106, 1100, 1107, 1107, 1101,
     1107,  883,  950,  811,  874,  878,  879,  723,  878,  871,
     1111, 1111, 1111,  879,  879,  870,  841,  879,  815,  438,
     1112, 1112, 1112,  800,  949,  799,  815,  795,  794,  438,
     1116, 1116, 1116,  950, 1114, 1114, 1114,  861,  860,  950,
     1119, 1119, 1119,  438, 1115, 1115, 1115,  859,  949,  879,
      858,  857,  879,  438, 1117, 1117, 1117, 1118, 1118, 1118,
      856,  949,  855,  438,  853,  852,  438, 1120, 1120, 1120,
      851, 1121, 1121, 1121,  950,  949,  438, 1122, 1122, 1122,

      438, 1123, 1123, 1123,  950,  850,  849, 1124, 1124, 1124,
      438,  949,  848,  847,  950,  846,  438,  845,  950, 1125,
     1125, 1125,  844, 1126, 1126, 1126, 1127, 1127, 1127,  770,
      949,  950,  438,  467,  633,  438, 1128, 1128, 1128, 1129,
     1129, 1129, 1131, 1131, 1131,  950,  833,  832,  438,  828,
      827,  950,  826, 1130, 1130, 1130,  825,  949, 1132, 1132,
     1132,  950,  438, 1134, 1134, 1134,  824,  438, 1133, 1133,
     1133,  823,  949,  950, 1135, 1135, 1135,  438,  822,  817,
      950,  816,  738,  438, 1136, 1136, 1136,  811,  949,  809,
      950,  733,  733,  438,  723,  723,  950, 1137, 1137, 1137,

     1138, 1138, 1138,  805, 1139, 1139, 1139,  950,  949,  438,
     1140, 1140, 1140,  438, 1141, 1141, 1141,  950, 1143, 1143,
     1143,  804,  950,  438, 1142, 1142, 1142,  803,  949,  802,
     1144, 1144, 1144,  438, 1146, 1146, 1146,  801,  950,  438,
     1145, 1145, 1145,  800,  949, 1147, 1147, 1147,  799,  438,
      796,  950,  532,  532,  438, 1149, 1149, 1149,  950, 1148,
     1148, 1148,  795,  949,  950, 1150, 1150, 1150,  438, 1152,
     1152, 1152,  950,  794,  438, 1151, 1151, 1151,  950,  949,
     1153, 1153, 1153,  791,  438, 1155, 1155, 1155,  950,  438,
      790, 1154, 1154, 1154,  950,  949, 1156, 1156, 1156,  789,

      438,  788, 1157, 1157, 1157,  438,  949,  787,  786,  950,
      785,  438,  780,  950, 1158, 1158, 1158, 1159, 1159, 1159,
     1161, 1161, 1161,  950,  779,  778,  438,  777,  776,  950,
      775, 1160, 1160, 1160,  773,  949, 1164, 1164, 1164,  950,
      438, 1162, 1162, 1162,  772,  950, 1167, 1167, 1167,  771,
      438, 1163, 1163, 1163,  770,  949,  950, 1165, 1165, 1165,
      438, 1166, 1166, 1166,  733,  949,  438,  667,  950,  769,
      438, 1168, 1168, 1168,  950, 1169, 1169, 1169,  467,  949,
      438, 1170, 1170, 1170,  438,  950, 1171, 1171, 1171,  467,
      950,  765, 1172, 1172, 1172,  438,  949, 1173, 1173, 1173,

      950,  438, 1174, 1174, 1174,  950,  764,  759, 1175, 1175,
     1175,  438,  949,  759,  633,  950,  633,  438, 1176, 1176,
     1176, 1177, 1177, 1177, 1178, 1178, 1178,  630,  949,  950,
      438,  754,  753,  438,  752,  950, 1179, 1179, 1179, 1180,
     1180, 1180,  751, 1181, 1181, 1181,  950,  949,  438,  750,
      749,  950,  438, 1182, 1182, 1182, 1183, 1183, 1183, 1184,
     1184, 1184,  950,  949,  748,  438,  747,  746,  438, 1185,
     1185, 1185,  950, 1186, 1186, 1186,  745,  744,  950, 1187,
     1187, 1187,  438,  949, 1188, 1188, 1188,  743,  438,  742,
      950, 1189, 1189, 1189, 1190, 1190, 1190,  950,  949,  741,

      438,  740,  739,  438, 1191, 1191, 1191,  950, 1192, 1192,
     1192,  738,  733,  950, 1194, 1194, 1194,  438, 1193, 1193,
     1193,  602,  949,  950, 1197, 1197, 1197,  438, 1195, 1195,
     1195,  732,  676,  950, 1198, 1198, 1198,  438,  950,  595,
     1196, 1196, 1196,  438,  949, 1200, 1200, 1200,  950,  438,
     1199, 1199, 1199,  592,  949, 1201, 1201, 1201,  950,  438,
      604, 1202, 1202, 1202,  438,  949,  603,  726,  950,  723,
      438,  584,  950, 1203, 1203, 1203,  583,  721,  950, 1204,
     1204, 1204, 1205, 1205, 1205,  603,  949,  578,  438,  576,
      573,  438,  720,  570,  950, 1206, 1206, 1206,  568,  950,

     1207, 1207, 1207,  718,  950, 1209, 1209, 1209,  717,  438,
     1208, 1208, 1208,  563,  949,  950, 1210, 1210, 1210,  438,
     1211, 1211, 1211,  715,  949,  438,  603,  950,  712,  438,
     1212, 1212, 1212, 1213, 1213, 1213,  950, 1214, 1214, 1214,
      708,  949,  438, 1215, 1215, 1215,  438,  707,  706,  950,
      705, 1216, 1216, 1216, 1217, 1217, 1217,  548,  949,  950,
      438,  547,  701,  438,  950, 1218, 1218, 1218, 1219, 1219,
     1219, 1220, 1220, 1220,  950,  949,  603,  438,  532,  532,
      438, 1221, 1221, 1221,  950, 1222, 1222, 1222, 1224, 1224,
     1224,  950,  530,  697,  438,  696,  695,  950, 1223, 1223,

     1223,  525,  949, 1225, 1225, 1225,  524,  438,  950, 1226,
     1226, 1226,  438,  949, 1227, 1227, 1227,  518,  438,  950,
     1228, 1228, 1228,  692,  691,  950, 1230, 1230, 1230,  438,
     1229, 1229, 1229,  690,  949,  950, 1231, 1231, 1231,  438,
      689,  688,  950,  687,  686,  438, 1232, 1232, 1232,  685,
      949,  684,  950,  672,  499,  438, 1233, 1233, 1233,  497,
     1234, 1234, 1234,  950, 1236, 1236, 1236,  667,  950,  438,
     1235, 1235, 1235,  493,  949,  666, 1237, 1237, 1237,  438,
      950, 1239, 1239, 1239,  950,  438, 1238, 1238, 1238,  665,
      949,  484, 1240, 1240, 1240,  438, 1242, 1242, 1242,  483,

      950,  438, 1241, 1241, 1241,  482,  949, 1243, 1243, 1243,
      950,  438,  483, 1244, 1244, 1244,  438,  949,  950, 1245,
     1245, 1245,  438,  664,  950, 1246, 1246, 1246, 1247, 1247,
     1247,  471,  949,  467,  438,  950,  455,  438,  654,  653,
      950, 1248, 1248, 1248, 1249, 1249, 1249, 1251, 1251, 1251,
      950,  449,  651,  438,  650,  440,  950, 1250, 1250, 1250,
      644,  949, 1252, 1252, 1252,  434,  438,  950, 1253, 1253,
     1253,  438,  949,  950, 1254, 1254, 1254,  438, 1255, 1255,
     1255,  428,  950,  633, 1256, 1256, 1256,  438,  949, 1257,
     1257, 1257,  423,  438,  628,  950, 1258, 1258, 1258,  625,

      623,  950, 1260, 1260, 1260,  438, 1259, 1259, 1259,  416,
      949,  950, 1261, 1261, 1261,  438, 1262, 1262, 1262,  621,
      949,  438,  950,  620,  619,  438,  618,  614,  950, 1263,
     1263, 1263, 1264, 1264, 1264, 1265, 1265, 1265,  950,  949,
      611,  438,  610,  950,  438, 1266, 1266, 1266, 1267, 1267,
     1267, 1269, 1269, 1269,  397,  604,  950,  438,  603,  602,
      950,  599, 1268, 1268, 1268,  595,  949, 1270, 1270, 1270,
      950,  438,  396, 1271, 1271, 1271,  438,  949, 1272, 1272,
     1272,  397,  438,  950, 1273, 1273, 1273,  396,  397,  950,
     1275, 1275, 1275,  438, 1274, 1274, 1274,  396,  949,  950,

     1276, 1276, 1276,  438,  587,  950, 1277, 1277, 1277,  438,
      949, 1278, 1278, 1278,  397,  438,  950, 1279, 1279, 1279,
     1280, 1280, 1280,  396,  949,  583,  438,  950,  397,  438,
      396,  397,  950, 1281, 1281, 1281, 1282, 1282, 1282, 1284,
     1284, 1284,  396,  578,  950,  438,  576,  575,  950, 1283,
     1283, 1283,  396,  949, 1285, 1285, 1285,  573,  438,  572,
      950,  396,  568,  438,  567,  950, 1286, 1286, 1286,  563,
      949, 1287, 1287, 1287,  950,  438, 1288, 1288, 1288, 1289,
     1289, 1289,  562,  949,  559,  438,  548,  950,  438, 1290,
     1290, 1290,  547,  950,  538, 1291, 1291, 1291, 1292, 1292,

     1292,  532,  949,  950,  438,  499,  533,  438, 1293, 1293,
     1293,  532, 1294, 1294, 1294, 1295, 1295, 1295,  532,  949,
      950,  438,  532,  530,  438,  950, 1296, 1296, 1296, 1297,
     1297, 1297,  529,  950,  527, 1298, 1298, 1298,  438,  949,
     1299, 1299, 1299,  950,  438, 1300, 1300, 1300,  525, 1301,
     1301, 1301,  950,  949,  438, 1302, 1302, 1302,  438, 1303,
     1303, 1303,  950, 1304, 1304, 1304,  524,  949,  438,  950,
      518,  507,  438, 1305, 1305, 1305, 1306, 1306, 1306,  504,
      950,  397, 1307, 1307, 1307,  438,  949,  396,  397,  950,
      396,  438,  499,  396,  950, 1308, 1308, 1308, 1309, 1309,

     1309,  493,  949,  950, 1310, 1310, 1310,  438,  489,  950,
     1311, 1311, 1311,  485,  949,  484,  483,  950,  482,  438,
     1312, 1312, 1312,  467, 1313, 1313, 1313,  950,  949, 1314,
     1314, 1314,  467,  438,  467,  467,  950, 1315, 1315, 1315,
      455,  949, 1316, 1316, 1316,  453,  438,  449,  447,  950,
      396,  436,  950, 1317, 1317, 1317,  434,  949,  950, 1318,
     1318, 1318,  438,  432,  950,  428, 1319, 1319, 1319,  427,
      949, 1320, 1320, 1320,  950,  438,  426,  423,  950, 1321,
     1321, 1321,  422,  950, 1322, 1322, 1322, 1323, 1323, 1323,
      396,  950, 1324, 1324, 1324,  416,  950, 1325, 1325, 1325,

     1326, 1326, 1326, 1327, 1327, 1327,  415,  950, 1328, 1328,
     1328,  414,  408,  950, 1329, 1329, 1329, 1330, 1330, 1330,
      950, 1331, 1331, 1331,  407,  950, 1332, 1332, 1332, 1333,
     1333, 1333,  396,  950, 1334, 1334, 1334,  405,  950,  396,
      397,  950, 1335, 1335, 1335,  396,  950, 1336, 1336, 1336,
     1401,  950, 1401, 1401,  950, 1401, 1401,  950, 1337, 1337,
     1337, 1401,  950, 1338, 1338, 1338, 1401, 1401,  950, 1401,
     1401,  950, 1339, 1339, 1339,  950, 1340, 1340, 1340, 1401,
      950, 1401, 1401,  950, 1341, 1341, 1341, 1401,  950, 1342,
     1342, 1342, 1343, 1343, 1343, 1401,  950, 1344, 1344, 1344,

     1401,  950, 1345, 1345, 1345, 1346, 1346, 1346, 1347, 1347,
     1347, 1401,  950, 1348, 1348, 1348, 1401,  950, 1349, 1349,
     1349, 1350, 1350, 1350, 1401, 1401,  950, 1351, 1351, 1351,
      950, 1352, 1352, 1352, 1353, 1353, 1353, 1401,  950, 1354,
     1354, 1354, 1401,  950, 1401, 1401,  950, 1355, 1355, 1355,
     1401,  950, 1356, 1356, 1356, 1401,  950, 1401, 1401,  950,
     1401, 1401,  950, 1357, 1357, 1357, 1401,  950, 1358, 1358,
     1358, 1401,  950, 1401, 1401,  950, 1359, 1359, 1359, 1401,
     1401,  950, 1360, 1360, 1360,  950, 1401, 1401,  950, 1361,
     1361, 1361, 1401,  950, 1362, 1362, 1362, 1363, 1363, 1363,

     1401,  950, 1364, 1364, 1364, 1401,  950, 1365, 1365, 1365,
     1366, 1366, 1366, 1367, 1367, 1367, 1401,  950, 1368, 1368,
     1368, 1401,  950, 1369, 1369, 1369, 1370, 1370, 1370, 1401,
      950, 1371, 1371, 1371, 1401, 1401,  950, 1372, 1372, 1372,
     1373, 1373, 1373,  950, 1374, 1374, 1374, 1401,  950, 1401,
     1401,  950, 1375, 1375, 1375, 1401,  950, 1376, 1376, 1376,
     1401,  950, 1401, 1401,  950, 1401, 1401,  950, 1377, 1377,
     1377, 1401,  950, 1378, 1378, 1378, 1401,  950, 1401, 1401,
      950, 1379, 1379, 1379, 1401,  950, 1380, 1380, 1380, 1401,
     1401,  950, 1401, 1401,  950, 1381, 1381, 1381,  950, 1382,

     1382, 1382, 1383, 1383, 1383, 1401,  950, 1384, 1384, 1384,
     1401,  950, 1385, 1385, 1385, 1386, 1386, 1386, 1387, 1387,
     1387, 1401,  950, 1388, 1388, 1388, 1401,  950, 1389, 1389,
     1389, 1390, 1390, 1390, 1401,  950, 1391, 1391, 1391, 1401,
      950, 1392, 1392, 1392, 1393, 1393, 1393, 1401, 1401,  950,
     1394, 1394, 1394,  950, 1401, 1401,  950, 1395, 1395, 1395,
     1401,  950, 1396, 1396, 1396, 1401,  950, 1401, 1401,  950,
     1401, 1401,  950, 1397, 1397, 1397, 1401,  950, 1398, 1398,
     1398, 1401,  950, 1401, 1401,  950, 1399, 1399, 1399, 1401,
      950, 1400, 1400, 1400, 1401,  950, 1401, 1401,  950, 1324,

     1324, 1324, 1401, 1401,  950, 1401, 1401, 1401, 1401, 1401,
     1401,  950, 1401, 1401, 1401, 1401,  950, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401,  950, 1401, 1401,
     1401, 1401,  950, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
      950, 1401, 1401, 1401, 1401,  950, 1401, 1401, 1401, 1401,
     1401, 1401, 1401,  950,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,

      284,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  366,  366,  366,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  424,  424,  424, 1401,  424,  424,
     1401,  424, 1401,  424,  424,  424, 1401,  424,  424,  424,
      424,  424,  424,  425,  425,  425, 1401,  425,  425,  425,
      425, 1401,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  429,  429,  429, 1401,  429,  429, 1401,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429, 1401,
      429,  433,  433,  433, 1401,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      435,  435,  435, 1401,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  439,
      439,  439, 1401, 1401, 1401, 1401,  439, 1401, 1401, 1401,
      439, 1401, 1401,  439,  444,  444,  444, 1401, 1401,  444,
     1401,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444, 1401,  444,  448,  448,  448, 1401,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  450,  450,  450, 1401, 1401,  450,  450,  450,
     1401,  450,  450,  450,  450,  450,  450,  450,  450, 1401,

      450,  454,  454,  454, 1401,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      456,  456,  456, 1401,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  464,
     1401, 1401, 1401, 1401, 1401, 1401,  464, 1401, 1401, 1401,
      464, 1401, 1401,  464,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466, 1401,  466,  477,  477, 1401, 1401, 1401, 1401, 1401,
      477, 1401, 1401, 1401,  477, 1401, 1401,  477,  477,  488,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,  488, 1401,

      488, 1401, 1401,  488,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  503, 1401,  503, 1401,  503,  503,  503,
      503,  503,  503, 1401,  503, 1401,  503,  503, 1401,  503,
      526,  526,  526, 1401,  526,  526,  526,  526,  526,  526,
     1401,  526,  526,  526,  526,  526,  526,  526,  526,  531,
      531,  531, 1401,  531,  531,  531,  531,  531,  531, 1401,
      531,  531,  531,  531,  531, 1401,  531,  531,  549,  549,
      549, 1401,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549, 1401,  549, 1401,  549,  550,  550,  550,

     1401,  550,  550,  550,  550,  550,  550,  550,  550, 1401,
      550,  550, 1401,  550, 1401,  550,  551, 1401,  551, 1401,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551, 1401,  551, 1401,  551,  558, 1401,  558, 1401,  558,
      558,  558,  558,  558,  558, 1401,  558,  558,  558,  558,
      558,  558,  558,  558,  564, 1401,  564, 1401,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  581,  581,  581, 1401,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  586,  586,  586, 1401,  586,  586,  586,  586,

     1401,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      594, 1401, 1401,  594, 1401,  594, 1401,  594, 1401,  594,
     1401,  594, 1401, 1401,  594,  596,  596,  596, 1401,  596,
     1401,  596,  596,  596,  596, 1401,  596, 1401,  596,  596,
     1401,  596, 1401,  596,  622,  622,  622, 1401,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  624,  624,  624, 1401,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,

      624,  624,  424,  424,  424, 1401,  424,  424, 1401,  424,
     1401,  424,  424,  424, 1401,  424,  424,  424,  424,  424,
      424,  632,  632,  632, 1401,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632, 1401,  632,
      634,  634,  634, 1401,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  429,
      429,  429, 1401,  429,  429, 1401,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429, 1401,  429,  637,  637,
      637, 1401,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  640,  640,  640,

     1401,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  645,  645,  645, 1401,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  439,  439,  439, 1401, 1401,
     1401, 1401,  439, 1401, 1401, 1401,  439, 1401, 1401,  439,
      444,  444,  444, 1401, 1401,  444, 1401,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444, 1401,  444,  450,
      450,  450, 1401, 1401,  450,  450,  450, 1401,  450,  450,
      450,  450,  450,  450,  450,  450, 1401,  450,  456,  456,
      456, 1401,  456,  456,  456,  456,  456,  456,  456,  456,

      456,  456,  456,  456,  456,  456,  456,  464, 1401, 1401,
     1401, 1401, 1401, 1401,  464, 1401, 1401, 1401,  464, 1401,
     1401,  464,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466, 1401,
      466,  477,  477, 1401, 1401, 1401, 1401, 1401,  477, 1401,
     1401, 1401,  477, 1401, 1401,  477,  477,  488, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401,  488, 1401,  488, 1401,
     1401,  488,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  503, 1401,  503, 1401,  503,  503,  503,  503,  503,

      503, 1401,  503, 1401,  503,  503, 1401,  503,  526,  526,
      526, 1401,  526,  526,  526,  526,  526,  526, 1401,  526,
      526,  526,  526,  526,  526,  526,  526,  531,  531,  531,
     1401,  531,  531,  531,  531,  531,  531, 1401,  531,  531,
      531,  531,  531, 1401,  531,  531,  549,  549,  549, 1401,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549, 1401,  549, 1401,  549,  550,  550,  550, 1401,  550,
      550,  550,  550,  550,  550,  550,  550, 1401,  550,  550,
     1401,  550, 1401,  550,  551, 1401,  551, 1401,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551, 1401,

      551, 1401,  551,  558, 1401,  558, 1401,  558,  558,  558,
      558,  558,  558, 1401,  558,  558,  558,  558,  558,  558,
      558,  558,  564, 1401,  564, 1401,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  722,  722,  722, 1401,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722, 1401,  722,
      724,  724,  724, 1401,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  594,
     1401, 1401,  594, 1401,  594, 1401,  594, 1401,  594, 1401,
      594, 1401, 1401,  594,  596,  596,  596, 1401,  596, 1401,

      596,  596,  596,  596, 1401,  596, 1401,  596,  596, 1401,
      596, 1401,  596,  734,  734,  734, 1401,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  737,  737,  737, 1401,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  622,  622,  622, 1401,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      624,  624,  624, 1401,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  755,
      755,  755, 1401,  755,  755,  755,  755,  755,  755,  755,

      755,  755,  755,  755,  755,  755, 1401,  755,  424,  424,
      424, 1401,  424,  424, 1401,  424, 1401,  424,  424,  424,
     1401,  424,  424,  424,  424,  424,  424,  637,  637,  637,
     1401,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  638,  638,  638, 1401,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  640,  640,  640, 1401,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  641,  641,  641, 1401,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,

      641,  641,  641,  429,  429,  429, 1401,  429,  429, 1401,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
     1401,  429,  439,  439,  439, 1401, 1401, 1401, 1401,  439,
     1401, 1401, 1401,  439, 1401, 1401,  439,  444,  444,  444,
     1401, 1401,  444, 1401,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444, 1401,  444,  450,  450,  450, 1401,
     1401,  450,  450,  450, 1401,  450,  450,  450,  450,  450,
      450,  450,  450, 1401,  450,  456,  456,  456, 1401,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  466,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466, 1401,  466,  526,  526,  526, 1401,  526,  526,  526,
      526,  526,  526, 1401,  526,  526,  526,  526,  526,  526,
      526,  526,  531,  531,  531, 1401,  531,  531,  531,  531,
      531,  531, 1401,  531,  531,  531,  531,  531, 1401,  531,
      531,  551, 1401,  551, 1401,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551, 1401,  551, 1401,  551,
      549,  549,  549, 1401,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549, 1401,  549, 1401,  549,  558,
     1401,  558, 1401,  558,  558,  558,  558,  558,  558, 1401,

      558,  558,  558,  558,  558,  558,  558,  558,  564, 1401,
      564, 1401,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  806,  806,  806,
     1401,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806, 1401,  806,  810,  810,  810, 1401,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  834,  834,  834, 1401,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834, 1401,  834,  872,  872,  872, 1401,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,

      872, 1401,  872,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  986, 1401, 1401, 1401,  986, 1401, 1401, 1401, 1401,
     1401, 1401, 1401,  986, 1401,  986,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1401, 1032,
     1032, 1401, 1032, 1032, 1041, 1041, 1041, 1041, 1041, 1041,

     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1401, 1041, 1041,
     1401, 1041, 1041, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1401, 1052, 1052, 1401,
     1052, 1052,   75, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401

    } ;

static yyconst flex_int16_t yy_chk[6596] =
    {   0,
        0,    1,  179,    1,    1,    2,  637,    2,    2,    0,
        3,  179,    3,    3,   80,   90,  100,    1,   80,   90,
      100,    2,   92,   92,   92,    1,    3,  150,  150,    2,
      637,   92,   92,  115,    3,  128,  186,  115,  136,  128,
      106,  147,  136,  197,  105,  147,  105,  106,  106,  118,
      172,  118,  159,  149,  149,  149,  159,  197,  186,  167,
        1,    1,  149,  167,    2,    2,  187,  187,  172,    3,
        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    9,  192,    9,
        9,  185,    9,  188,  212,  212,    9,   10,  192,   10,
       10,  185,   10,    9,  173,  185,   10,   11,  174,   11,
       11,    9,   11,   10,   12,  199,   12,   12,  404,   12,
      202,   10,  173,   11,  178,  202,  174,  404,  208,  199,

       12,   11,  208,  175,  176,  219,   11,  229,   12,  219,
      175,  229,  178,   12,  175,  225,    9,    9, 1324,  188,
      225,  175,  176,  176,  238,  253,   10,   10,  238,  253,
      263,  270,  270,  494,  269,  263,   11,   11,  269,  308,
      308,  494,  199,   12,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   15,  275,   15,
       15,   16,   15,   16,   16, 1306,   16,   17,  278,   17,
       17,  180,  468,   15,  275,  262,   17,   16,   43,  262,
      180,   15,  468,   17,  278,   16,   15,  177,  244,   43,
       16,   17,  262,   43,  409,   18,   17,   18,   18,  244,
      350,  350,   43,  409,   18,  177,   43,   19,   43,   19,
       19,   18,   19,  151,  151,  151,   15,   15,  244,   18,
       16,   16,  151,   19,   18,  279,   17,   17,  180,  279,
       19,   19,  245,   20,   43,   20,   20,  280,   20,  945,
      177,  190,  190,  245,  244,  265,  265,  245,  283,   20,

      190,  373,  373,  280,   18,   18,   20,   20,  555,  281,
      555,  280,  245,  281,  283,  151,   19,   19,  281,  190,
      281,  289,  265,  296,  304,  289,  316,  296,  304,  329,
      316,  338,  348,  329,  945,  338,  348,  361,  245,  426,
      426,  361,   20,   20,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   23,  371,   23,   23,
       24,  371,   24,   24,  420,  469,   31,  271,   31,   31,
      380,  389,   23,  420,  380,  389,   24,  391,  271,  469,
       23,  391,   31,  436,   24,   23, 1105,  403,  391,   24,
       31,  436,  436,  154,  154,  154,  403,  271,  401,  401,
      401,  534,  154,  403,  403,  403,  456,  401,  401,  437,
      437,  437,  403,  403,  534,   23,   23, 1096,  437,   24,
       24,   25,   25,  271,  456,   31,   31,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

      154,  587,  587,   25,   25,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   32,
       32,   32,   32,  405,   33,   32,   33,   33,   34,  462,
       34,   34,  405,  282,   35,   32,   35,   35,  462,   36,
       33,   36,   36,   32,   34,  431, 1087,  537,   33,  282,
       35,  473,   34,  191,  191,   36,  431,  464,   35,  439,
      439,  439,  191,   36,  458,  491,  464,  480,  439,  431,
      491,  458,  541,   39,  537,   39,   39,  480,   32,   32,
      405,  191,  458,   33,   33,   39,  461,   34,   34,   39,

      272,  282,  505,   35,   35,  541,  505,   39,   36,   36,
       37,  272,   37,   37,  461,  272,   40,  473,   40,   40,
      191,   45,   37,   45,   45, 1086,   37, 1085,   40,  430,
      272,  541,   40,   44,   37,   37,  430,   45,  549,   37,
       40,   37,   39,   39,   44,   45,   45,  495,   44,  461,
       45,  474,  474,  430,  549,  501,  272,   44, 1076,  495,
      501,   44,   49,   44,   49,   49,  459,   37,  474,   37,
       37,   38,   38,   38,   38,   40,   40,  459,   49,  411,
       45,   45,  411,   38,  459,  598,   49,   38,  411,   44,
      477,  477,  486,  488,  657,   38,   38,  598,  396,  477,

       38, 1075,   38,  396,  396,  396,  486,  488,  396,  559,
      396,  597,  657,  411,  559,  396,  396,  396,  477,  597,
      606,   49,   49,  411,  607,  607,  734,  734,   38,  606,
       38,   38,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   46,  465,   46,   46,  640, 1074,

       47,  664,   47,   47,  465,   48,  422,   48,   48,  422,
       46,   50,   47,   50,   50,  422,   47,   48,   46,   46,
      664,   48,  640,   46,   47,  608,  427,   50,  658,   48,
      793,  427,  427,  427,  608,   50,  427,  642,  427,  635,
      422,  660, 1073,  427,  427,  427,  658,  635,  635,  647,
      422,  656,  465,   46,   46,  660,  793,  647,  647,   47,
       47,  642,  656, 1072,   48,   48,  663,  663,  663,  656,
       50,   50,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  432, 1071,  443,

      443,  443,  432,  432,  432,  713, 1061,  432,  443,  432,
      713,   55,   55, 1060,  432,  432,  432,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      523,  766,  519,   55,   55,   57, 1059,   57,   57,   58,
       57,   58,   58,  519,   58,   59,  443,   59,   59,  766,
     1058,   57,  490,  752,   59,   58,  479,  479, 1057,   57,
      523,   59,  519,   58,   57,  479,  490,  557,   58,   59,
      520,  685, 1056,   60,   59,   60,   60,   63, 1055,   63,
       63,  520,   60,  557,  479, 1054,  523,  685,  519,   60,

      878,  878,  752,   63,   57,   57,  639,   60,   58,   58,
      520,   63,   60,  758,   59,   59,   63,  639,  546,  490,
     1053,  684,  447,  479,  442,  442,  442,  447,  447,  447,
      639,  684,  447,  442,  447,  557,  520,  758,  792,  447,
      447,  447,   60,   60,   61,   61,   63,   63,  546,  792,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,  442,  546, 1051,   61,   61,   64,  453,
       64,   64,  677,  771,  453,  453,  453,  798, 1047,  453,
      797,  453,  709,  771,   64,  694,  453,  453,  453,  507,

     1040,  797,   64,  677,  507,  507,  507,   64,  709,  507,
     1039,  507,  772,  798,  529, 1038,  507,  507,  507,  529,
      529,  529,  704,  542,  529,  694,  529,  725,  772,  543,
      677,  529,  529,  529,  542,  725,  725,   64,   64,   65,
      543,   65,   65, 1037,   65,  648,  648,  648,   65,   65,
       65,  694,  704,  542,  648,   65,  693,  703,  922,  543,
      649,  649,  649,   65,   65,  562, 1036,  693,  703,  649,
      562,  562,  562, 1035,  922,  562,  820,  562,  704,  542,
     1034,  757,  562,  562,  562,  543,  693,  703,  741,  757,
      757,  741,  762,  762,  762,  649, 1033,  741,   65,   65,

       66,  762,   66,   66, 1031,   66,  784,  784,  784,   66,
       66,   66,  693,  703,  751,  820,   66,  751,  736,  736,
      736,  567, 1030,  751,   66,   66,  567,  567,  567, 1422,
      830,  567, 1422,  567, 1029,  823,  599,  736,  567,  567,
      567,  599,  599,  599,  823,  885,  599, 1028,  599,  738,
      738,  738, 1026,  599,  599,  599,  843,  843,  843,   66,
       66,   67,  875,   67,   67,  761,   67,  808,  738,  830,
       67,  875,  736,  761,  761,  808,  808,   67, 1022,  763,
      763,  763,  796,  796,  885,   67, 1012,  796,  763,  879,
       67,  796,  796,  812,  812,  812,  796, 1011,  879,  833,

      796,  796,  833,  738,  811,  811,  811, 1010,  833,  813,
      813,  813,  812, 1009,  811,  814,  814,  814,  934,  934,
       67,   67,   68,  811,   68,   68,  763,   68,  813, 1423,
     1008,   68, 1423,  888,  814,  838,  838,  838,   68,  852,
      852,  852,  888, 1007,  838, 1006,   68,  812,  854,  854,
      854,   68,  870,  870,  870,  890,  891, 1005,  811,  940,
      891, 1004,  940,  813,  890,  896,  896,  896,  940,  814,
      901,  901,  901, 1003,  896, 1001,  891,  910,  910,  910,
     1000,   68,   68,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   73,  999,   73,   73,   73,
      839,  839,  839,  851,  851,  851,  943,   73,  998,  839,
      943,   73,  876,  876,  876,  877,  877,  877,  941,   73,
       73,  997,  876,  979,   73,  877,  943,  941,  880,  880,
      880,  876,  979,  996,  877,  995,  897,  897,  897,  994,
      897,  898,  898,  898,  839,  897,  993,  880,  881,  881,

      881,  882,  882,  882,   73,   73,   74,  851,   74,   74,
       74,  912,  912,  912,  991,  990,  876,  881,   74,  877,
      882,  987,   74,  929,  929,  929,  962,  962,  962,  980,
       74,   74,  880,  946, 1013,   74,  946,  947,  947,  947,
      897, 1424,  946, 1013, 1424,  898,  947,  988,  988,  988,
     1440, 1450,  881, 1440, 1450,  882,  988,  992,  992,  992,
     1451, 1452,  978, 1451, 1452,   74,   74,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,  240,
      977, 1454,  976,  240, 1454, 1023, 1023, 1023,  240,  240,
      240,  975, 1459,  240, 1023, 1459, 1460,  240,  240, 1460,
     1463, 1479,  240, 1463, 1479,  974,  240,  240,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,

      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      460,  460, 1048, 1048, 1048,  460,  460,  460,  973,  972,
      460, 1048,  460, 1489,  971,  970, 1489,  460,  460,  460,
      470,  969,  470, 1050, 1050, 1050,  968,  470,  470,  470,
     1490,  967,  470, 1490,  470,  966,  932,  932,  932,  470,
      470,  470,  508,  508,  508,  508,  932,  508, 1068, 1068,
     1068,  508,  508,  965,  964,  932,  508, 1068,  963,  961,
      508,  508,  535,  960, 1082, 1082, 1082,  535,  535,  535,
      959,  958,  535, 1082,  535, 1491,  957, 1050, 1491,  535,

      535,  535, 1093, 1093, 1093,  956, 1492,  535,  554, 1492,
      932, 1093,  554,  955, 1102, 1102, 1102,  554,  554,  554,
      954,  953,  554, 1102,  554, 1499,  952,  951, 1499,  554,
      554,  554,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  822,  822,  822,  822,  822,  822,

      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  933,  933,  933,  936,
      936,  936,  937,  937,  937,  949,  933,  938,  938,  938,
      948,  948,  948, 1502,  948,  933, 1502, 1521,  936,  948,
     1521,  937,  981,  981,  981,  939,  938,  982,  982,  982,
      931,  930,  981,  983,  983,  983,  928,  982,  984,  984,

      984,  981,  927,  985,  985,  985,  982,  926, 1530,  925,
      933, 1530,  983,  936,  924,  923,  937,  984, 1016, 1016,
     1016,  938,  985,  921,  948,  989,  989,  989, 1016,  989,
     1017, 1017, 1017,  920,  989,  919,  981, 1016,  918,  917,
     1017,  982, 1018, 1018, 1018,  916,  915,  983,  914, 1017,
      913,  909,  984,  908, 1019, 1019, 1019,  985, 1020, 1020,
     1020, 1018, 1024, 1024, 1024,  907, 1024, 1070, 1070, 1070,
      906, 1024, 1016, 1019, 1025, 1025, 1025, 1020, 1025,  989,
     1042, 1042, 1042,  905, 1017, 1043, 1043, 1043,  904,  903,
     1042, 1044, 1044, 1044,  902, 1043, 1018,  900,  899, 1042,

     1045, 1045, 1045,  895, 1043, 1046, 1046, 1046, 1019,  894,
     1044,  893, 1020, 1049, 1049, 1049, 1024, 1049,  892, 1045,
      886, 1070, 1049,  884, 1046, 1062, 1062, 1062, 1025,  883,
     1063, 1063, 1063,  874, 1042, 1062, 1064, 1064, 1064, 1043,
     1063, 1065, 1065, 1065, 1062, 1044, 1066, 1066, 1066, 1063,
      873, 1077, 1077, 1077, 1045, 1064, 1079, 1079, 1079, 1046,
     1065, 1077, 1069, 1069, 1069, 1066, 1069, 1049,  872,  871,
     1077, 1069, 1078, 1078, 1078, 1079, 1084, 1084, 1084, 1062,
      869,  868, 1078,  867, 1063, 1080, 1080, 1080,  866,  865,
     1064, 1078, 1081, 1081, 1081, 1065,  864, 1083, 1083, 1083,

     1066, 1083,  863,  862, 1080, 1077, 1083, 1095, 1095, 1095,
     1079, 1081, 1088, 1088, 1088,  861, 1069, 1089, 1089, 1089,
      860,  859, 1088, 1090, 1090, 1090, 1078, 1089,  858,  857,
     1084, 1088,  856, 1091, 1091, 1091, 1089,  855,  853, 1080,
      850,  849, 1090, 1092, 1092, 1092, 1081,  848, 1099, 1099,
     1099, 1083, 1091,  847, 1094, 1094, 1094,  846, 1094,  845,
      844, 1095, 1092, 1094,  842,  841, 1088, 1099, 1104, 1104,
     1104, 1089, 1097, 1097, 1097,  840,  837, 1090,  835, 1098,
     1098, 1098, 1097,  834, 1100, 1100, 1100, 1091,  831, 1098,
      828, 1097, 1101, 1101, 1101,  827,  826, 1092, 1098, 1110,

     1110, 1110, 1099, 1100,  825, 1103, 1103, 1103, 1094, 1103,
      824, 1101,  821,  817, 1103, 1106, 1106, 1106, 1107, 1107,
     1107,  816, 1104,  810,  809, 1106, 1097,  806, 1107,  805,
     1108, 1108, 1108, 1098, 1106,  803,  802, 1107, 1100, 1108,
     1109, 1109, 1109,  800, 1109,  799, 1101,  795,  794, 1109,
     1113, 1113, 1113, 1110, 1111, 1111, 1111,  791,  790, 1103,
     1116, 1116, 1116, 1111, 1112, 1112, 1112,  789, 1112, 1106,
      788,  787, 1107, 1112, 1114, 1114, 1114, 1115, 1115, 1115,
      786, 1115,  785, 1114,  783,  782, 1115, 1117, 1117, 1117,
      781, 1118, 1118, 1118, 1109, 1118, 1117, 1119, 1119, 1119,

     1118, 1120, 1120, 1120, 1113,  780,  779, 1121, 1121, 1121,
     1120, 1121,  778,  777, 1116,  776, 1121,  775, 1112, 1122,
     1122, 1122,  773, 1123, 1123, 1123, 1124, 1124, 1124,  770,
     1124, 1115, 1123,  767,  755, 1124, 1125, 1125, 1125, 1126,
     1126, 1126, 1128, 1128, 1128, 1118,  754,  753, 1126,  749,
      748, 1119,  747, 1127, 1127, 1127,  746, 1127, 1129, 1129,
     1129, 1121, 1127, 1131, 1131, 1131,  745, 1129, 1130, 1130,
     1130,  744, 1130, 1122, 1132, 1132, 1132, 1130,  743,  740,
     1124,  739,  737, 1132, 1133, 1133, 1133,  735, 1133,  732,
     1125,  728,  726, 1133,  724,  722, 1128, 1134, 1134, 1134,

     1135, 1135, 1135,  720, 1136, 1136, 1136, 1127, 1136, 1135,
     1137, 1137, 1137, 1136, 1138, 1138, 1138, 1131, 1140, 1140,
     1140,  717, 1130, 1138, 1139, 1139, 1139,  712, 1139,  711,
     1141, 1141, 1141, 1139, 1143, 1143, 1143,  707, 1133, 1141,
     1142, 1142, 1142,  706, 1142, 1144, 1144, 1144,  705, 1142,
      701, 1134,  700,  699, 1144, 1146, 1146, 1146, 1136, 1145,
     1145, 1145,  696, 1145, 1137, 1147, 1147, 1147, 1145, 1149,
     1149, 1149, 1140,  695, 1147, 1148, 1148, 1148, 1139, 1148,
     1150, 1150, 1150,  692, 1148, 1152, 1152, 1152, 1143, 1150,
      691, 1151, 1151, 1151, 1142, 1151, 1153, 1153, 1153,  690,

     1151,  689, 1154, 1154, 1154, 1153, 1154,  688,  687, 1146,
      686, 1154,  683, 1145, 1155, 1155, 1155, 1156, 1156, 1156,
     1158, 1158, 1158, 1149,  682,  681, 1156,  680,  679, 1148,
      678, 1157, 1157, 1157,  676, 1157, 1161, 1161, 1161, 1152,
     1157, 1159, 1159, 1159,  675, 1151, 1164, 1164, 1164,  674,
     1159, 1160, 1160, 1160,  672, 1160, 1154, 1162, 1162, 1162,
     1160, 1163, 1163, 1163,  669, 1163, 1162,  667, 1155,  666,
     1163, 1165, 1165, 1165, 1158, 1166, 1166, 1166,  662, 1166,
     1165, 1167, 1167, 1167, 1166, 1157, 1168, 1168, 1168,  661,
     1161,  653, 1169, 1169, 1169, 1168, 1169, 1170, 1170, 1170,

     1164, 1169, 1171, 1171, 1171, 1160,  650,  646, 1172, 1172,
     1172, 1171, 1172,  645,  634, 1163,  632, 1172, 1173, 1173,
     1173, 1174, 1174, 1174, 1175, 1175, 1175,  631, 1175, 1166,
     1174,  630,  628, 1175,  627, 1167, 1176, 1176, 1176, 1177,
     1177, 1177,  626, 1178, 1178, 1178, 1169, 1178, 1177,  623,
      621, 1170, 1178, 1179, 1179, 1179, 1180, 1180, 1180, 1181,
     1181, 1181, 1172, 1181,  620, 1180,  619,  618, 1181, 1182,
     1182, 1182, 1173, 1183, 1183, 1183,  617,  616, 1175, 1184,
     1184, 1184, 1183, 1184, 1185, 1185, 1185,  614, 1184,  613,
     1176, 1186, 1186, 1186, 1187, 1187, 1187, 1178, 1187,  612,

     1186,  611,  610, 1187, 1188, 1188, 1188, 1179, 1189, 1189,
     1189,  609,  603, 1181, 1191, 1191, 1191, 1189, 1190, 1190,
     1190,  602, 1190, 1182, 1194, 1194, 1194, 1190, 1192, 1192,
     1192,  601,  600, 1184, 1195, 1195, 1195, 1192, 1185,  595,
     1193, 1193, 1193, 1195, 1193, 1197, 1197, 1197, 1187, 1193,
     1196, 1196, 1196,  593, 1196, 1198, 1198, 1198, 1188, 1196,
      590, 1199, 1199, 1199, 1198, 1199,  589,  588, 1191,  586,
     1199,  585, 1190, 1200, 1200, 1200,  583,  580, 1194, 1201,
     1201, 1201, 1202, 1202, 1202,  579, 1202,  578, 1201,  576,
      573, 1202,  572,  571, 1193, 1203, 1203, 1203,  568, 1197,

     1204, 1204, 1204,  566, 1196, 1206, 1206, 1206,  565, 1204,
     1205, 1205, 1205,  563, 1205, 1199, 1207, 1207, 1207, 1205,
     1208, 1208, 1208,  561, 1208, 1207,  560, 1200,  556, 1208,
     1209, 1209, 1209, 1210, 1210, 1210, 1202, 1211, 1211, 1211,
      553, 1211, 1210, 1212, 1212, 1212, 1211,  552,  548, 1203,
      547, 1213, 1213, 1213, 1214, 1214, 1214,  545, 1214, 1206,
     1213,  544,  540, 1214, 1205, 1215, 1215, 1215, 1216, 1216,
     1216, 1217, 1217, 1217, 1208, 1217,  539, 1216,  532,  531,
     1217, 1218, 1218, 1218, 1209, 1219, 1219, 1219, 1221, 1221,
     1221, 1211,  530,  528, 1219,  525,  524, 1212, 1220, 1220,

     1220,  522, 1220, 1222, 1222, 1222,  521, 1220, 1214, 1223,
     1223, 1223, 1222, 1223, 1224, 1224, 1224,  518, 1223, 1215,
     1225, 1225, 1225,  517,  516, 1217, 1227, 1227, 1227, 1225,
     1226, 1226, 1226,  515, 1226, 1218, 1228, 1228, 1228, 1226,
      514,  513, 1221,  512,  511, 1228, 1229, 1229, 1229,  510,
     1229,  509, 1220,  506,  499, 1229, 1230, 1230, 1230,  498,
     1231, 1231, 1231, 1223, 1233, 1233, 1233,  493, 1224, 1231,
     1232, 1232, 1232,  492, 1232,  487, 1234, 1234, 1234, 1232,
     1227, 1236, 1236, 1236, 1226, 1234, 1235, 1235, 1235,  485,
     1235,  484, 1237, 1237, 1237, 1235, 1239, 1239, 1239,  483,

     1229, 1237, 1238, 1238, 1238,  482, 1238, 1240, 1240, 1240,
     1230, 1238,  481, 1241, 1241, 1241, 1240, 1241, 1233, 1242,
     1242, 1242, 1241,  478, 1232, 1243, 1243, 1243, 1244, 1244,
     1244,  472, 1244,  466, 1243, 1236,  455, 1244,  452,  451,
     1235, 1245, 1245, 1245, 1246, 1246, 1246, 1248, 1248, 1248,
     1239,  449,  446, 1246,  445,  441, 1238, 1247, 1247, 1247,
      435, 1247, 1249, 1249, 1249,  434, 1247, 1241, 1250, 1250,
     1250, 1249, 1250, 1242, 1251, 1251, 1251, 1250, 1252, 1252,
     1252,  428, 1244,  425, 1253, 1253, 1253, 1252, 1253, 1254,
     1254, 1254,  423, 1253,  421, 1245, 1255, 1255, 1255,  418,

      417, 1248, 1257, 1257, 1257, 1255, 1256, 1256, 1256,  416,
     1256, 1247, 1258, 1258, 1258, 1256, 1259, 1259, 1259,  415,
     1259, 1258, 1250,  414,  413, 1259,  412,  410, 1251, 1260,
     1260, 1260, 1261, 1261, 1261, 1262, 1262, 1262, 1253, 1262,
      408, 1261,  407, 1254, 1262, 1263, 1263, 1263, 1264, 1264,
     1264, 1266, 1266, 1266,  397,  395, 1257, 1264,  394,  392,
     1256,  390, 1265, 1265, 1265,  382, 1265, 1267, 1267, 1267,
     1259, 1265,  381, 1268, 1268, 1268, 1267, 1268, 1269, 1269,
     1269,  374, 1268, 1260, 1270, 1270, 1270,  372,  364, 1262,
     1272, 1272, 1272, 1270, 1271, 1271, 1271,  362, 1271, 1263,

     1273, 1273, 1273, 1271,  358, 1266, 1274, 1274, 1274, 1273,
     1274, 1275, 1275, 1275,  351, 1274, 1265, 1276, 1276, 1276,
     1277, 1277, 1277,  349, 1277,  344, 1276, 1268,  341, 1277,
      339,  332, 1269, 1278, 1278, 1278, 1279, 1279, 1279, 1281,
     1281, 1281,  330,  324, 1272, 1279,  320,  319, 1271, 1280,
     1280, 1280,  317, 1280, 1282, 1282, 1282,  310, 1280,  309,
     1274,  305,  298, 1282,  297, 1275, 1283, 1283, 1283,  291,
     1283, 1284, 1284, 1284, 1277, 1283, 1285, 1285, 1285, 1286,
     1286, 1286,  290, 1286,  288, 1285,  274, 1278, 1286, 1287,
     1287, 1287,  273, 1281,  268, 1288, 1288, 1288, 1289, 1289,

     1289,  267, 1289, 1280, 1288,  266,  261, 1289, 1290, 1290,
     1290,  260, 1291, 1291, 1291, 1292, 1292, 1292,  258, 1292,
     1283, 1291,  257,  255, 1292, 1284, 1293, 1293, 1293, 1294,
     1294, 1294,  254, 1286,  252, 1295, 1295, 1295, 1294, 1295,
     1296, 1296, 1296, 1287, 1295, 1297, 1297, 1297,  247, 1298,
     1298, 1298, 1289, 1298, 1297, 1299, 1299, 1299, 1298, 1300,
     1300, 1300, 1290, 1301, 1301, 1301,  246, 1301, 1300, 1292,
      242,  239, 1301, 1302, 1302, 1302, 1303, 1303, 1303,  237,
     1293,  231, 1304, 1304, 1304, 1303, 1304,  230,  221, 1295,
      220, 1304,  213,  209, 1296, 1305, 1305, 1305, 1307, 1307,

     1307,  206, 1307, 1298, 1308, 1308, 1308, 1307,  198, 1299,
     1309, 1309, 1309,  196, 1309,  195,  194, 1301,  193, 1309,
     1310, 1310, 1310,  189, 1311, 1311, 1311, 1302, 1311, 1312,
     1312, 1312,  184, 1311,  182,  181, 1304, 1313, 1313, 1313,
      170, 1313, 1314, 1314, 1314,  168, 1313,  162,  160, 1305,
      148,  146, 1307, 1315, 1315, 1315,  139, 1315, 1308, 1316,
     1316, 1316, 1315,  137, 1309,  130, 1317, 1317, 1317,  129,
     1317, 1318, 1318, 1318, 1310, 1317,  127,  120, 1311, 1319,
     1319, 1319,  119, 1312, 1320, 1320, 1320, 1321, 1321, 1321,
      116, 1313, 1322, 1322, 1322,  109, 1314, 1323, 1323, 1323,

     1325, 1325, 1325, 1326, 1326, 1326,  108, 1315, 1327, 1327,
     1327,  107,  104, 1316, 1328, 1328, 1328, 1329, 1329, 1329,
     1317, 1330, 1330, 1330,  103, 1318, 1331, 1331, 1331, 1332,
     1332, 1332,  101, 1319, 1333, 1333, 1333,   94, 1320,   91,
       82, 1321, 1334, 1334, 1334,   81, 1322, 1335, 1335, 1335,
       75, 1323,    0,    0, 1325,    0,    0, 1326, 1336, 1336,
     1336,    0, 1327, 1337, 1337, 1337,    0,    0, 1328,    0,
        0, 1329, 1338, 1338, 1338, 1330, 1339, 1339, 1339,    0,
     1331,    0,    0, 1332, 1340, 1340, 1340,    0, 1333, 1341,
     1341, 1341, 1342, 1342, 1342,    0, 1334, 1343, 1343, 1343,

        0, 1335, 1344, 1344, 1344, 1345, 1345, 1345, 1346, 1346,
     1346,    0, 1336, 1347, 1347, 1347,    0, 1337, 1348, 1348,
     1348, 1349, 1349, 1349,    0,    0, 1338, 1350, 1350, 1350,
     1339, 1351, 1351, 1351, 1352, 1352, 1352,    0, 1340, 1353,
     1353, 1353,    0, 1341,    0,    0, 1342, 1354, 1354, 1354,
        0, 1343, 1355, 1355, 1355,    0, 1344,    0,    0, 1345,
        0,    0, 1346, 1356, 1356, 1356,    0, 1347, 1357, 1357,
     1357,    0, 1348,    0,    0, 1349, 1358, 1358, 1358,    0,
        0, 1350, 1359, 1359, 1359, 1351,    0,    0, 1352, 1360,
     1360, 1360,    0, 1353, 1361, 1361, 1361, 1362, 1362, 1362,

        0, 1354, 1363, 1363, 1363,    0, 1355, 1364, 1364, 1364,
     1365, 1365, 1365, 1366, 1366, 1366,    0, 1356, 1367, 1367,
     1367,    0, 1357, 1368, 1368, 1368, 1369, 1369, 1369,    0,
     1358, 1370, 1370, 1370,    0,    0, 1359, 1371, 1371, 1371,
     1372, 1372, 1372, 1360, 1373, 1373, 1373,    0, 1361,    0,
        0, 1362, 1374, 1374, 1374,    0, 1363, 1375, 1375, 1375,
        0, 1364,    0,    0, 1365,    0,    0, 1366, 1376, 1376,
     1376,    0, 1367, 1377, 1377, 1377,    0, 1368,    0,    0,
     1369, 1378, 1378, 1378,    0, 1370, 1379, 1379, 1379,    0,
        0, 1371,    0,    0, 1372, 1380, 1380, 1380, 1373, 1381,

     1381, 1381, 1382, 1382, 1382,    0, 1374, 1383, 1383, 1383,
        0, 1375, 1384, 1384, 1384, 1385, 1385, 1385, 1386, 1386,
     1386,    0, 1376, 1387, 1387, 1387,    0, 1377, 1388, 1388,
     1388, 1389, 1389, 1389,    0, 1378, 1390, 1390, 1390,    0,
     1379, 1391, 1391, 1391, 1392, 1392, 1392,    0,    0, 1380,
     1393, 1393, 1393, 1381,    0,    0, 1382, 1394, 1394, 1394,
        0, 1383, 1395, 1395, 1395,    0, 1384,    0,    0, 1385,
        0,    0, 1386, 1396, 1396, 1396,    0, 1387, 1397, 1397,
     1397,    0, 1388,    0,    0, 1389, 1398, 1398, 1398,    0,
     1390, 1399, 1399, 1399,    0, 1391,    0,    0, 1392, 1400,

     1400, 1400,    0,    0, 1393,    0,    0,    0,    0,    0,
        0, 1394,    0,    0,    0,    0, 1395,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1396,    0,    0,
        0,    0, 1397,    0,    0,    0,    0,    0,    0,    0,
     1398,    0,    0,    0,    0, 1399,    0,    0,    0,    0,
        0,    0,    0, 1400, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,

     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,

     1414, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1420, 1420, 1420, 1420,

     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1425, 1425, 1425,    0, 1425, 1425,
        0, 1425,    0, 1425, 1425, 1425,    0, 1425, 1425, 1425,
     1425, 1425, 1425, 1426, 1426, 1426,    0, 1426, 1426, 1426,
     1426,    0, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1427, 1427, 1427,    0, 1427, 1427,    0, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,    0,
     1427, 1428, 1428, 1428,    0, 1428, 1428, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1429, 1429, 1429,    0, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1430,
     1430, 1430,    0,    0,    0,    0, 1430,    0,    0,    0,
     1430,    0,    0, 1430, 1431, 1431, 1431,    0,    0, 1431,
        0, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431,    0, 1431, 1432, 1432, 1432,    0, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1433, 1433, 1433,    0,    0, 1433, 1433, 1433,
        0, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,    0,

     1433, 1434, 1434, 1434,    0, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1435, 1435, 1435,    0, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1436,
        0,    0,    0,    0,    0,    0, 1436,    0,    0,    0,
     1436,    0,    0, 1436, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437,    0, 1437, 1438, 1438,    0,    0,    0,    0,    0,
     1438,    0,    0,    0, 1438,    0,    0, 1438, 1438, 1439,
        0,    0,    0,    0,    0,    0,    0,    0, 1439,    0,

     1439,    0,    0, 1439, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1442,    0, 1442,    0, 1442, 1442, 1442,
     1442, 1442, 1442,    0, 1442,    0, 1442, 1442,    0, 1442,
     1443, 1443, 1443,    0, 1443, 1443, 1443, 1443, 1443, 1443,
        0, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1444,
     1444, 1444,    0, 1444, 1444, 1444, 1444, 1444, 1444,    0,
     1444, 1444, 1444, 1444, 1444,    0, 1444, 1444, 1445, 1445,
     1445,    0, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445,
     1445, 1445, 1445,    0, 1445,    0, 1445, 1446, 1446, 1446,

        0, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,    0,
     1446, 1446,    0, 1446,    0, 1446, 1447,    0, 1447,    0,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447,    0, 1447,    0, 1447, 1448,    0, 1448,    0, 1448,
     1448, 1448, 1448, 1448, 1448,    0, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1449,    0, 1449,    0, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1453, 1453, 1453,    0, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1455, 1455, 1455,    0, 1455, 1455, 1455, 1455,

        0, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1457,    0,    0, 1457,    0, 1457,    0, 1457,    0, 1457,
        0, 1457,    0,    0, 1457, 1458, 1458, 1458,    0, 1458,
        0, 1458, 1458, 1458, 1458,    0, 1458,    0, 1458, 1458,
        0, 1458,    0, 1458, 1461, 1461, 1461,    0, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1462, 1462, 1462,    0, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,

     1462, 1462, 1464, 1464, 1464,    0, 1464, 1464,    0, 1464,
        0, 1464, 1464, 1464,    0, 1464, 1464, 1464, 1464, 1464,
     1464, 1465, 1465, 1465,    0, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,    0, 1465,
     1466, 1466, 1466,    0, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1467,
     1467, 1467,    0, 1467, 1467,    0, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1467,    0, 1467, 1468, 1468,
     1468,    0, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1469, 1469, 1469,

        0, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1469, 1470, 1470, 1470,    0,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471,    0,    0,
        0,    0, 1471,    0,    0,    0, 1471,    0,    0, 1471,
     1472, 1472, 1472,    0,    0, 1472,    0, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472,    0, 1472, 1473,
     1473, 1473,    0,    0, 1473, 1473, 1473,    0, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473,    0, 1473, 1474, 1474,
     1474,    0, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,

     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1475,    0,    0,
        0,    0,    0,    0, 1475,    0,    0,    0, 1475,    0,
        0, 1475, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,    0,
     1476, 1477, 1477,    0,    0,    0,    0,    0, 1477,    0,
        0,    0, 1477,    0,    0, 1477, 1477, 1478,    0,    0,
        0,    0,    0,    0,    0,    0, 1478,    0, 1478,    0,
        0, 1478, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1481,    0, 1481,    0, 1481, 1481, 1481, 1481, 1481,

     1481,    0, 1481,    0, 1481, 1481,    0, 1481, 1482, 1482,
     1482,    0, 1482, 1482, 1482, 1482, 1482, 1482,    0, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1483, 1483, 1483,
        0, 1483, 1483, 1483, 1483, 1483, 1483,    0, 1483, 1483,
     1483, 1483, 1483,    0, 1483, 1483, 1484, 1484, 1484,    0,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484,    0, 1484,    0, 1484, 1485, 1485, 1485,    0, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485,    0, 1485, 1485,
        0, 1485,    0, 1485, 1486,    0, 1486,    0, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486,    0,

     1486,    0, 1486, 1487,    0, 1487,    0, 1487, 1487, 1487,
     1487, 1487, 1487,    0, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1488,    0, 1488,    0, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1493, 1493, 1493,    0, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,    0, 1493,
     1494, 1494, 1494,    0, 1494, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1495,
        0,    0, 1495,    0, 1495,    0, 1495,    0, 1495,    0,
     1495,    0,    0, 1495, 1496, 1496, 1496,    0, 1496,    0,

     1496, 1496, 1496, 1496,    0, 1496,    0, 1496, 1496,    0,
     1496,    0, 1496, 1497, 1497, 1497,    0, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1498, 1498, 1498,    0, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1500, 1500, 1500,    0, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1501, 1501, 1501,    0, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1503,
     1503, 1503,    0, 1503, 1503, 1503, 1503, 1503, 1503, 1503,

     1503, 1503, 1503, 1503, 1503, 1503,    0, 1503, 1504, 1504,
     1504,    0, 1504, 1504,    0, 1504,    0, 1504, 1504, 1504,
        0, 1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505,
        0, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1505, 1505, 1505, 1505, 1505, 1506, 1506, 1506,    0,
     1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506,
     1506, 1506, 1506, 1506, 1506, 1507, 1507, 1507,    0, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1508, 1508, 1508,    0, 1508, 1508,
     1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508,

     1508, 1508, 1508, 1509, 1509, 1509,    0, 1509, 1509,    0,
     1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509,
        0, 1509, 1510, 1510, 1510,    0,    0,    0,    0, 1510,
        0,    0,    0, 1510,    0,    0, 1510, 1511, 1511, 1511,
        0,    0, 1511,    0, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511,    0, 1511, 1512, 1512, 1512,    0,
        0, 1512, 1512, 1512,    0, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512,    0, 1512, 1513, 1513, 1513,    0, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513,
     1513, 1513, 1513, 1513, 1514, 1514, 1514, 1514, 1514, 1514,

     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
     1514,    0, 1514, 1515, 1515, 1515,    0, 1515, 1515, 1515,
     1515, 1515, 1515,    0, 1515, 1515, 1515, 1515, 1515, 1515,
     1515, 1515, 1516, 1516, 1516,    0, 1516, 1516, 1516, 1516,
     1516, 1516,    0, 1516, 1516, 1516, 1516, 1516,    0, 1516,
     1516, 1517,    0, 1517,    0, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517,    0, 1517,    0, 1517,
     1518, 1518, 1518,    0, 1518, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518,    0, 1518,    0, 1518, 1519,
        0, 1519,    0, 1519, 1519, 1519, 1519, 1519, 1519,    0,

     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1520,    0,
     1520,    0, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1522, 1522, 1522,
        0, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522,    0, 1522, 1523, 1523, 1523,    0,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1524, 1524, 1524,    0, 1524,
     1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
     1524, 1524,    0, 1524, 1525, 1525, 1525,    0, 1525, 1525,
     1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,

     1525,    0, 1525, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1528,    0,    0,    0, 1528,    0,    0,    0,    0,
        0,    0,    0, 1528,    0, 1528, 1529, 1529, 1529, 1529,
     1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 1529, 1529, 1529, 1531, 1531, 1531, 1531, 1531,
     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531,    0, 1531,
     1531,    0, 1531, 1531, 1532, 1532, 1532, 1532, 1532, 1532,

     1532, 1532, 1532, 1532, 1532, 1532, 1532,    0, 1532, 1532,
        0, 1532, 1532, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533,    0, 1533, 1533,    0,
     1533, 1533, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401

    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2020 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 *
*************************************************************************/

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include <QDir>
#include <QFile>
#include <QFileInfo>
#include <QHash>
#include <QRegularExpression>
#include <QStringList>
#include <QStack>
#include <QVector>

#include <pre.h>

#include <a_define.h>
#include <arguments.h>
#include <constexp.h>
#include <config.h>
#include <condparser.h>
#include <doxy_globals.h>
#include <default_args.h>
#include <entry.h>
#include <message.h>
#include <membername.h>
#include <util.h>

#define YY_NEVER_INTERACTIVE 1

// Toggle for some debugging info
// #define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

struct CondCtx
{

   CondCtx(int line, const QString &id, bool b)
      : lineNr(line), sectionId(id), skip(b) {}

   int lineNr;
   QString sectionId;
   bool skip;
};

struct FileState {
   FileState(int size) : lineNr(1), curlyCount(0), fileBuf(size),
      oldFileBuf(""), oldFileBufPos(0), bufState(0) {}

   int       lineNr;
   int       curlyCount;

   QString   fileBuf;
   QString   oldFileBuf;
   int       oldFileBufPos;
   QString   fileName;
   YY_BUFFER_STATE bufState;
};

/** @brief Singleton which manages the defines available while proprocessing files
 */
class DefineManager
{
   // local class used to hold the defines for a single file
   class DefinesPerFile
   {
    public:
      DefinesPerFile() {
      }

      virtual ~DefinesPerFile() {
      }

      /** Adds a define in the context of a file. Will replace an existing define
       *  with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(QSharedPointer<A_Define> def) {
         QSharedPointer<A_Define> d = m_defines.value(def->m_name);

         if (d != nullptr) {
            // redefine
            m_defines.remove(d->m_name);
         }

         m_defines.insert(def->m_name, def);
      }

      /** Adds an include file for this file
       *  @param fileName The name of the include file
       */
      void addInclude(const QString &fileName) {
         m_includedFiles.insert(fileName);
      }

      void collectDefines(DefineDict &dict, QSet<QString> &includeStack);

    private:
      DefineDict m_defines;
      QSet<QString> m_includedFiles;
   };

 public:
   friend class DefinesPerFile;

   /** Returns a reference to the singleton */
   static DefineManager &instance() {
      if (theInstance == nullptr) {
         theInstance = new DefineManager;
      }
      return *theInstance;
   }

   static void deleteInstance() {
      delete theInstance;
      theInstance = nullptr;
   }

   /** Starts a context in which defines are collected.
    *  Called at the start of a new file that is preprocessed.
    *  @param fileName the name of the file to process.
    */
   void startContext(const QString &fileName) {
      m_contextDefines.clear();
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);
      if (dpf == nullptr) {
         // new file

         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);
      }
   }

   /** Ends the context started with startContext() freeing any
    *  defines collected within in this context.
    */
   void endContext() {
      m_contextDefines.clear();
   }

   /** Add an included file to the current context.
    *  If the file has been pre-processed already, all defines are added to the context.
    *  @param fileName The name of the include file to add to the context.
    */
   void addFileToContext(const QString &fileName) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         // new file

         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);

      } else {
         // existing file

         QSet<QString> includeStack;
         dpf->collectDefines(m_contextDefines, includeStack);
      }
   }

   /** Add a define to the manager object.
    *  @param fileName The file in which the define was found
    *  @param def The Define object to add.
    */
   void addDefine(const QString &fileName, QSharedPointer<A_Define> def) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<A_Define> d = m_contextDefines.value(def->m_name);

      if (d != nullptr) {
         // redefine
         m_contextDefines.remove(d->m_name);
      }

      m_contextDefines.insert(def->m_name, def);

      //
      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);
      }

      dpf->addDefine(def);
   }

   /** Add an include relation to the manager object.
    *  @param fromFileName file name in which the include was found.
    *  @param toFileName file name that is included.
    */
   void addInclude(const QString &fromFileName, const QString &toFileName) {
      if (fromFileName.isEmpty() || toFileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fromFileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fromFileName, dpf);
      }
      dpf->addInclude(toFileName);
   }

   /** Returns a Define object given its name or 0 if the Define does not exist.
   */
   QSharedPointer<A_Define> isDefined(const QString &name) const {
      QSharedPointer<A_Define> d = m_contextDefines.value(name);

      if (d && d->undef) {
         d = QSharedPointer<A_Define>();
      }

      return d;
   }

   /** Returns a reference to the defines found in the current context. */
   const DefineDict &defineContext() const {
      return m_contextDefines;
   }

 private:
   static DefineManager *theInstance;

   /** Helper function to collect all define for a given file */
   void collectDefinesForFile(const QString &fileName, QSharedPointer<DefineDict> dict) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf) {
         QSet<QString> includeStack;
         dpf->collectDefines(*dict, includeStack);
      }
   }

   /** returns the DefinesPerFile object for a given file name. */
   QSharedPointer<DefinesPerFile> find(const QString &fileName) const {
      if (fileName.isEmpty()) {
         return QSharedPointer<DefinesPerFile>();
      }

      return m_fileMap.value(fileName);
   }

   DefineManager() {
   }

   virtual ~DefineManager() {
   }

   QHash<QString, QSharedPointer<DefinesPerFile>> m_fileMap;
   DefineDict m_contextDefines;
};

/** Singleton instance */
DefineManager *DefineManager::theInstance = 0;

/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(DefineDict &dict, QSet<QString> &includeStack)
{
   {
      for (auto di : m_includedFiles) {
         QString incFile = di;

         QSharedPointer<DefinesPerFile> dpf = DefineManager::instance().find(incFile);

         if (dpf && ! includeStack.contains(incFile)) {
            includeStack.insert(incFile);
            dpf->collectDefines(dict, includeStack);
         }
      }
   }

   {
      for (const auto &def : m_defines)  {
         QSharedPointer<A_Define> d = dict.value(def->m_name);

         if (d != nullptr) {
            // redefine
            dict.remove(d->m_name);
         }

         dict.insert(def->m_name, def);
      }
   }
}

static QStringList              s_pathList;
static QString                  s_yyFileName;
static QSharedPointer<FileDef>  s_yyFileDef;
static QSharedPointer<FileDef>  s_inputFileDef;

static QSharedPointer<QHash<QString, int>> s_argDict;
static QStack<QSharedPointer<FileState>>   s_includeStack;
static QStack<QSharedPointer<CondCtx>>     s_condStack;
static QSharedPointer<DefineDict>          s_expandedDict;

static int          s_yyLineNr   = 1;
static int          s_yyMLines   = 1;
static int          s_yyColNr    = 1;
static int          s_ifcount    = 0;
static int          s_defArgs    = -1;

static QString      s_defName;
static QString      s_defText;
static QString      s_defLitText;
static QString      s_defArgsStr;
static QString      s_defExtraSpacing;
static bool         s_defVarArgs;

static int          s_lastCContext;
static int          s_lastCPPContext;
static QStack<int>  s_levelGuard;

static QString      s_outputString;
static QString      s_inputString;
static int          s_inputPosition;

static int          s_roundCount;
static bool         s_quoteArg;

static int          s_findDefArgContext;
static bool         s_expectGuard;
static QString      s_guardName;
static QString      s_lastGuardName;
static QString      s_incName;
static QString      s_guardExpr;
static int          s_curlyCount;
static bool         s_nospaces;          // add extra spaces during macro expansion

static bool         s_macroExpansion;    // from the configuration
static bool         s_expandOnlyPredef;  // from the configuration
static int          s_commentCount;
static bool         s_insideComment;
static bool         s_isImported;
static QString      s_blockName;
static int          s_condCtx;
static bool         s_skip;

static bool         s_insideCS;          // C# has simpler preprocessor
static bool         s_isSource;

static bool         s_lexInit   = false;
static int          s_fenceSize = 0;
static bool         s_ccomment;

static QSet<QString> s_allIncludes;
static QSet<QString> s_expansionDict;

#define MAX_EXPANSION_DEPTH 50

static void setFileName(const QString &name)
{
   bool ambig;
   QFileInfo fi(name);

   s_yyFileName = fi.absoluteFilePath();
   s_yyFileDef  = findFileDef(&Doxy_Globals::inputNameDict, s_yyFileName, ambig);

   if (s_yyFileDef == nullptr) {
      // if this is not an input file check if it is an include file
      s_yyFileDef = findFileDef(&Doxy_Globals::includeNameDict, s_yyFileName, ambig);
   }

   if (s_yyFileDef && s_yyFileDef->isReference()) {
      s_yyFileDef = QSharedPointer<FileDef>();
   }

   s_insideCS = getLanguageFromFileName(s_yyFileName) == SrcLangExt_CSharp;
   s_isSource = determineSection(s_yyFileName);
}

static void incrLevel()
{
   s_levelGuard.push(0);
}

static void decrLevel()
{
   if (s_levelGuard.size() > 0) {
      s_levelGuard.pop();

   } else {
      warn(s_yyFileName, s_yyLineNr, "More #endif's than #if's found\n");

   }
}

static bool otherCaseDone()
{
   if (s_levelGuard.size() == 0) {
      warn(s_yyFileName, s_yyLineNr, "Found an #else without a preceding #if\n");
      return true;

   } else {
      return s_levelGuard.top();

   }
}

static void setCaseDone(bool value)
{
   s_levelGuard.top() = value;
}

static QSharedPointer<FileState> checkAndOpenFile(const QString &fileName, bool &alreadyIncluded)
{
   alreadyIncluded = false;
   QSharedPointer<FileState> fs;

   QFileInfo fi(fileName);

   if (fi.exists() && fi.isFile()) {
      static const QStringList exclPatterns = Config::getList("exclude-patterns");

      if (patternMatch(fi, exclPatterns)) {
         return QSharedPointer<FileState>();
      }

      QString absName = fi.absoluteFilePath();

      // global guard
      if (s_curlyCount == 0) {
         // not #include inside { ... }

         if (s_allIncludes.contains(absName)) {
            alreadyIncluded = true;
            return QSharedPointer<FileState>();
         }

         s_allIncludes.insert(absName);
      }

      // check include stack for absName
      QStack<QSharedPointer<FileState>> tmpStack;

      while (! s_includeStack.isEmpty()) {
         fs = s_includeStack.pop();

         if (fs->fileName == absName) {
            alreadyIncluded = true;
         }

         tmpStack.push(fs);
      }

      while (! tmpStack.isEmpty()) {
         fs = tmpStack.pop();

         s_includeStack.push(fs);
      }

      if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }

      fs = QMakeShared<FileState>(fi.size() + 4096);
      alreadyIncluded = false;

      if (! readInputFile(absName, fs->fileBuf)) {
         // error
         fs = QSharedPointer<FileState>();

      } else {
         fs->oldFileBuf    = s_inputString;
         fs->oldFileBufPos = s_inputPosition;
      }
   }

   return fs;
}

static QSharedPointer<FileState> findFile(const QString &fileName, bool localInclude, bool &alreadyIncluded)
{
   if (QDir::isAbsolutePath(fileName)) {
      QSharedPointer<FileState> fs = checkAndOpenFile(fileName, alreadyIncluded);

      if (fs) {
         setFileName(fileName);
         s_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   if (localInclude && ! s_yyFileName.isEmpty()) {
      QFileInfo fi(s_yyFileName);

      if (fi.exists()) {
         QString absName = fi.absolutePath() + "/" + fileName;
         QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

         if (fs) {
            setFileName(absName);
            s_yyLineNr = 1;
            return fs;

         } else if (alreadyIncluded) {
            return QSharedPointer<FileState>();
         }
      }
   }

   if (s_pathList.isEmpty()) {
      return QSharedPointer<FileState>();
   }

   for (auto &s : s_pathList) {
      QString absName = s + "/" + fileName;

      QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

      if (fs) {
         setFileName(absName);
         s_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   return QSharedPointer<FileState>();
}

static QString extractTrailingComment(const QString &s)
{
   if (s.isEmpty()) {
      return QString("");
   }

   int i = s.length() - 1;

   while (i >= 0) {
      QChar c = s[i];

      switch (c.unicode()) {
         case '/': {
            i--;

            if (i >= 0 && s[i] == '*') {
               // end of a comment block
               i--;

               while (i > 0 && !(s[i - 1] == '/' && s[i] == '*')) {
                  i--;
               }

               if (i == 0) {
                  i++;
               }

               // only /*!< or /**< are treated as a comment for the macro name     */
               // otherwise the comment is treated as part of the macro definition

               return ((s[i + 1] == '*' || s[i + 1] == '!') && s[i + 2] == '<') ? s.mid(i - 1) : "";

            } else {
               return QString("");
            }
         }

         break;

         // whitespace or line-continuation
         case ' ':
         case '\t':
         case '\r':
         case '\n':
         case '\\':
            break;

         default:
            return QString("");
      }

      i--;
   }

   return QString("");
}

static int getNextChar(const QString &expr, QString *rest, uint &pos);
static int getCurrentChar(const QString &expr, QString *rest, uint pos);
static void unputChar(const QString &expr, QString *rest, uint &pos, char c);
static bool expandExpression(QString &expr, QString *rest, int pos, int level);

static QString stringize(const QString &s)
{
   QString result;
   QChar c;
   QChar pc;

   uint i = 0;
   bool inString = false;
   bool inChar   = false;

   while (i < s.length()) {

      if (! inString && ! inChar) {
         while (i < s.length() && ! inString && ! inChar) {
            c = s.at(i++);

            if (c == '"') {
               result += "\\\"";
               inString = true;
            } else if (c == '\'') {
               result += c;
               inChar = true;
            } else {
               result += c;
            }
         }

      } else if (inChar) {
         while (i < s.length() && inChar) {
            c = s.at(i++);

            if (c == '\'') {
               result += '\'';
               inChar = false;
            } else if (c == '\\') {
               result += "\\\\";
            } else {
               result += c;
            }
         }

      } else {
         pc = 0;

         while (i < s.length() && inString) {
            QChar c2 = s.at(i++);

            if (c2 == '"') {
               result += "\\\"";
               inString = pc == '\\';

            } else if (c2 == '\\') {
               result += "\\\\";

            } else {
               result += c2;
            }

            pc = c2;
         }
      }
   }

   return result;
}

static void processConcatOperators(QString &str)
{
   if (str.isEmpty()) {
      return;
   }

   static QRegularExpression regExp("[ \t\r\n]*##[ \t\r\n]*");
   QRegularExpressionMatch match = regExp.match(str);

   int matchLen;
   int pos;

   while (match.hasMatch()) {

      pos      = match.capturedStart() - str.constBegin();
      matchLen = match.capturedLength();

      if (pos + matchLen + 1 < str.length() && str.at(pos + matchLen) == '@' && str.at(pos + matchLen + 1) == '-') {
         // remove no-rescan marker after ID
         matchLen += 2;
      }

      // remove the ## operator and the surrounding whitespace
      str   = str.left(pos) + str.right(str.length() - pos - matchLen);
      int k = pos - 1;

      while (k >= 0 && isId(str.at(k))) {
         --k;
      }

      if (k > 0 && str.at(k) == '-' && str.at(k - 1) == '@') {
         // remove no-rescan marker before ID
         str  = str.left(k - 1) + str.right(str.length() - k - 1);
         pos -= 2;
      }

      match = regExp.match(str, str.constBegin() + pos);
   }
}

static void yyunput (int c,char *buf_ptr);
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QString &expr, QString *rest, uint &pos, char term, QString &arg)
{
   int cc;

   while ((cc = getNextChar(expr, rest, pos)) != EOF && cc != 0) {
      if (cc == '\\') {
         arg += (char)cc, cc = getNextChar(expr, rest, pos);
      } else if (cc == term) {
         return;
      }
      arg += (char)cc;
   }
}

/*! replaces the function macro def whose argument list starts at pos in expression \a expr.
 * Notice that this routine may scan beyond the expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the
 * length of the (unexpanded) argument list is stored in \a len.
 */
static bool replaceFunctionMacro(const QString &expr, QString *rest, int pos, int &len,
                  QSharedPointer<const A_Define> def, QString &result, int level)
{
   uint j = pos;
   len    = 0;

   result.clear();
   int cc;

   while ((cc = getCurrentChar(expr, rest, j)) != EOF && isspace(cc)) {
      len++;
      getNextChar(expr, rest, j);
   }

   if (cc != '(') {
      unputChar(expr, rest, j, cc);
      return false;
   }

   // consume the `(' character
   getNextChar(expr, rest, j);

   // list of arguments
   QHash<QString, QString> argTable;

   QString arg;
   int argCount = 0;
   bool done    = false;

   // PHASE 1: read the macro arguments
   if (def->nargs == 0) {
      while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
         char c = (char)cc;

         if (c == ')') {
            break;
         }
      }

   } else {
      while (! done && (argCount < def->nargs || def->varArgs) &&
             ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0)) {

         char c = (char)cc;

         if (c == '(') {
            // argument is a function => search for matching )
            int level = 1;
            arg += c;

            //char term='\0';

            while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               char c = (char)cc;

               if (c == '\'' || c == '\"') {
                  // skip ('s and )'s inside strings
                  arg += c;
                  addTillEndOfString(expr, rest, j, c, arg);
               }

               if (c == ')') {
                  level--;
                  arg += c;
                  if (level == 0) {
                     break;
                  }

               } else if (c == '(') {
                  level++;
                  arg += c;

               } else {
                  arg += c;
               }
            }

         } else if (c == ')' || c == ',') {
            // last or next argument found

            if (c == ',' && argCount == def->nargs - 1 && def->varArgs) {
               arg = arg.trimmed();
               arg += ',';

            } else {

               QString argKey;
               argKey = QString("@%1").formatArg(argCount++);    // key name
               arg    = arg.trimmed();

               // add argument to the lookup table
               argTable.insert(argKey, arg);
               arg.clear();

               if (c == ')') {
                  // end of the argument list
                  done = true;
               }
            }

         } else if (c == '\"') {
            // append literal strings

            arg += c;
            bool found = false;

            while (!found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '"';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;
                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }
               c = (char)cc;
               arg += c;
            }

         } else if (c == '\'') {
            // append literal characters
            arg += c;
            bool found = false;

            while (! found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '\'';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;

                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }

               c = (char)cc;
               arg += c;
            }

         } else if (c == '/') {
            // possible start of a comment

            char prevChar = '\0';
            arg += c;

            cc = getCurrentChar(expr, rest, j);

            if (cc == '*') {
               // we have a comment

               while ((cc = getNextChar(expr,rest,j)) != EOF && cc != 0) {
                  c    = (char)cc;
                  arg += c;

                  if (c == '/' && prevChar == '*')  {
                     // found an end of comment
                     break;
                  }

                  prevChar = c;
               }
            }

         } else {
            // append other characters
            arg += c;
         }
      }
   }

   // PHASE 2: apply the macro function
   if (argCount == def->nargs || // same number of arguments
         (argCount >= def->nargs - 1 && def->varArgs)) {

         // variadic macro with at least as many
         // params as the non-variadic part (see bug731985)

      uint k = 0;

      // substitution of all formal arguments
      QString resExpr;
      const QString d = def->m_definition.trimmed();

      bool inString = false;

      while (k < d.length()) {
         if (d.at(k) == '@') {
            // maybe a marker, otherwise an escaped @

            if (d.at(k + 1) == '@') {
               // escaped @ => copy it (is unescaped later)

               k += 2;
               resExpr += "@@"; // we unescape these later

            } else if (d.at(k + 1) == '-') {
               // no-rescan marker
               k += 2;
               resExpr += "@-";

            } else {
               // argument marker, read the argument number
               QString key = "@";

               bool hash = false;
               int len2  = k - 1;

               // search for ## backward
               if (len2 >= 0 && d.at(len2) == '\"') {
                  len2--;
               }

               while (len2 >= 0 && d.at(len2) == ' ') {
                  len2--;
               }

               if (len2 > 0 && d.at(len2) == '#' && d.at(len2 - 1) == '#') {
                  hash = true;
               }

               k++;

               // scan the number
               while (k < d.length() && d.at(k) >= '0' && d.at(k) <= '9') {
                  key += d.at(k++);
               }

               if (! hash) {
                  // search for ## forward
                  len2 = k;

                  if (len2 < d.length() && d.at(len2) == '\"') {
                     len2++;
                  }

                  while (len2 < d.length() && d.at(len2) == ' ') {
                     len2++;
                  }

                  if (len2 < d.length() - 1 && d.at(len2) == '#' && d.at(len2 + 1) == '#') {
                     hash = true;
                  }
               }

               if (key.length() > 1 && argTable.contains(key)) {
                  QString substArg = argTable.value(key);

                  // only if no ## operator is before or after the argument marker, then do macro expansion
                  if (! hash) {
                     expandExpression(substArg, nullptr, 0, level + 1);
                  }

                  if (inString) {
                     // if the marker is inside a string (because a # was put
                     // before the macro name), escape " and \ characters
                     resExpr += stringize(substArg);

                  } else {
                     if (hash && substArg.isEmpty()) {
                        // empty argument will be remove later on
                        resExpr += "@E";

                     } else if (s_nospaces) {
                        resExpr += substArg;

                     } else {
                        resExpr += " " + substArg + " ";
                     }
                  }
               }
            }

         } else {
            // no marker, just copy

            if (! inString && d.at(k) == '\"') {
               inString = true; // entering a literal string

            } else if (inString && d.at(k) == '\"' && (d.at(k - 1) != '\\' || d.at(k - 2) == '\\')) {
               inString = false; // leaving a literal string
            }
            resExpr += d.at(k++);
         }
      }

      len    = j - pos;
      result = resExpr;

      return true;
   }

   return false;
}

/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QString &expr, int p, int *l)
{
   int n;

   while (p < expr.length()) {
      QChar c = expr.at(p++);

      if (c.isNumber()) {
         // skip number
         while (p < expr.length() && isId(expr.at(p))) {
            p++;
         }

      } else if (c.isLetter() || c == '_') {
         // read id
         n = p - 1;

         while (p < expr.length() && isId(expr.at(p))) {
            p++;
         }

         *l = p - n;
         return n;

      } else if (c == '"') {
         // skip string

         QChar ppc = 0;
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);
         }

         while (p < expr.length() && (c != '"' || (pc == '\\' && ppc != '\\')))
            // continue as long as no " is found, but ignoring \", but not \\"
         {
            ppc = pc;
            pc = c;
            c = expr.at(p);
            p++;
         }

         if (p < expr.length()) {
            ++p;   // skip closing quote
         }

      } else if (c == '/') { // skip C Comment
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);

            if (c == '*') { // Start of C comment
               p++;

               while (p < expr.length() && !(pc == '*' && c == '/')) {
                  pc = c;
                  c = expr.at(p++);
               }
            }
         }

      }
   }

   return -1;
}

/*! preforms recursive macro expansion on the string expr starting at position pos.
 *  May read additional characters from the input while re-scanning
 *  If expandAll is true then all macros in the expression are expanded, otherwise only the first is expanded
 */
static bool expandExpression(QString &expr, QString *rest, int pos, int level)
{
   if (expr.isEmpty()) {
     return true;
   }

   if (s_expansionDict.contains(expr) && level > MAX_EXPANSION_DEPTH) {
      // check for too deep recursive expansions
      return false;

   } else {
      s_expansionDict.insert(expr);
   }

   QString macroName;
   QString expMacro;

   bool definedTest = false;
   int i = pos;
   int tmpLen;
   int p;
   int len;

   int startPos     = pos;
   int samePosCount = 0;

   while ((p = getNextId(expr, i, &tmpLen)) != -1) {
      // search for an macro name

      bool replaced = false;
      macroName = expr.mid(p, tmpLen);

      if (p < 2 || ! (expr.at(p - 2) == '@' && expr.at(p - 1) == '-')) {
         // no-rescan marker?

         if (! s_expandedDict->contains(macroName)) {

            // expand macro
            QSharedPointer<A_Define> def = DefineManager::instance().isDefined(macroName);

            if (macroName == "defined") {
               definedTest = true;

            } else if (definedTest) {
               // macro name was found after defined

               if (def) {
                  expMacro = " 1 ";
               } else {
                  expMacro = " 0 ";
               }

               replaced    = true;
               len         = tmpLen;
               definedTest = false;

            } else if (def && def->nargs == -1) {
               // simple macro
               // substitute the definition of the macro

               if (s_nospaces) {
                  expMacro = def->m_definition.trimmed();
               } else {
                  expMacro = " " + def->m_definition.trimmed() + " ";
               }

               replaced = true;
               len = tmpLen;

            } else if (def && def->nargs >= 0) {
               // function macro
               replaced = replaceFunctionMacro(expr, rest, p + tmpLen, len, def, expMacro, level);
               len += tmpLen;
            }

            if (replaced) {
               // expand the macro and rescan the expression

               QString resultExpr = expMacro;
               QString restExpr   = expr.right(expr.length() - len - p);

               processConcatOperators(resultExpr);

               bool isExpanded = false;

               if (def && ! def->nonRecursive) {
                  s_expandedDict->insert(macroName, def);
                  isExpanded = expandExpression(resultExpr, &restExpr, 0, level + 1);
                  s_expandedDict->remove(macroName);
               }
               if (isExpanded) {
                  expr = expr.left(p) + resultExpr + restExpr;
                  i    = p;

                } else {
                   expr = expr.left(p) + "@-" + expr.right(expr.length()-p);
                   i    = p + tmpLen + 2;
                }

            } else {
               // move to the next macro name
               i = p + tmpLen;
            }

         } else {
            // move to the next macro name
            expr = expr.left(p) + "@-" + expr.right(expr.length() - p);
            i = p + tmpLen + 2;

         }

         // check for too many inplace expansions without making progress
         if (i == startPos) {
           samePosCount++;

         } else {
           startPos     = i;
           samePosCount = 0;
         }

         if (samePosCount > MAX_EXPANSION_DEPTH) {
           break;
         }

      } else {
         // no re-scan marker found, skip the macro name
         i = p + tmpLen;
      }
   }
  return true;
}

//  inputStr should point to the start of a string or character literal.
// the routine will return a pointer to just after the end of the literal
// the character making up the literal will be added to \a result.

QString::const_iterator processUntilMatch(QString::const_iterator iter_start, QString::const_iterator iter_end,
                  QString &result)
{
   if (iter_start == iter_end) {
      return iter_start;
   }

   // capture start character
   QChar term = *iter_start;

   if (term != '\'' && term != '"') {
      // not a valid literal
      return iter_start;
   }

   QChar ch = term;

   // output start character
   result += ch;
   ++iter_start;

   while (iter_start != iter_end) {
      ch = *iter_start;

      if (ch == term) {
         // found end marker of the literal, output end character and stop

         result += ch;
         ++iter_start;
         break;

      } else if (ch == '\\')  {
         // escaped character, process next character
         // as well without checking for end marker

         result += ch;
         ++iter_start;

         if (iter_start == iter_end) {
            // unexpected end of string after escape character
            break;
         }

         ch = *iter_start;
      }

      result += ch;
      ++iter_start;
   }

   return iter_start;
}

/*! replaces all occurrences of @@@@ in s by @@
 *  and removes all occurrences of @@E
 *  All identifiers found are replaced by 0L
 */
QString removeIdsAndMarkers(const QString &s)
{
   QString::const_iterator iter     = s.constBegin();
   QString::const_iterator iter_end = s.constEnd();

   QString result;

   bool inNum = false;

   while (iter != iter_end) {
      QChar c = *iter;

      // replace @@ with @ and remove @E
      if (c == '@') {

         if (*(iter + 1) == '@') {
            result += c;

         } else if (*(iter + 1) == 'E') {
            // skip
         }

         iter += 2;

      } else if (c.isNumber()) {
         // number

         result += c;
         inNum = true;

         ++iter;

      } else if (c == '\'') {
         iter = processUntilMatch(iter, iter_end, result);

      } else if (c == 'd' && ! inNum) {
         // identifier starting with a `d'

         QStringView tmp = QStringView(iter, iter_end);

         if (tmp.startsWith("defined ") || tmp.startsWith("defined(")) {
            // defined keyword, skip defined
            iter += 7;

         } else {
            result += "0L";
            ++iter;

            while (iter != iter_end) {
               c = *iter;

               if (isId(c)) {
                  ++iter;

               } else {
                  break;
               }
            }
         }

      } else if ((c.isLetter() || c == '_') && ! inNum) {
         // replace identifier with 0L
         result += "0L";
         ++iter;

         while (iter != iter_end) {
            c = *iter;

            if (isId(c)) {
               ++iter;

            } else {
               break;
            }
         }

         while (iter != iter_end) {
            c = *iter;

            if (c.isSpace()) {
               ++iter;

            } else {
               break;
            }
         }

         if (*iter == '(') {
            // undefined function macro
            ++iter;

            int count = 1;

            while (iter != iter_end) {
               c = *iter;
               ++iter;

               if (c == '(') {
                  count++;

               } else if (c == ')') {
                  count--;

                  if (count == 0) {
                     break;
                  }

               } else if (c == '/') {
                  QChar pc = c;

                  ++iter;
                  c = *iter;

                  if (c == '*') {
                     // start of C comment

                     while (iter != iter_end && ! (pc == '*' && c == '/')) {
                        // search end of comment
                        pc = c;

                        ++iter;
                        c = *iter;
                     }

                     ++iter;
                  }
               }
            }
         }

      } else if (c == '/') {
         // skip C comments
         QChar pc = c;

         ++iter;
         c = *iter;

         if (c == '*') {
            // start of C comment

            while (iter != iter_end && ! (pc == '*' && c == '/')) {
               // search end of comment
               pc = c;

               ++iter;
               c = *iter;
            }

            ++iter;

         } else {
            // not comment but division
            result += pc;
            result += c;

            QChar lc = c.toLower()[0];

            if (! isId(lc) && lc != '.') {
               inNum = false;
            }

            ++iter;
         }

      } else {
         result += c;
         QChar lc = c.toLower()[0];

         if (! isId(lc) && lc != '.') {
            inNum = false;
         }

         ++iter;
      }
   }

   return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption:
 *   \a s only contains pairs of @@'s
 */
QString removeMarkers(const QString &s)
{
   QString::const_iterator iter     = s.constBegin();
   QString::const_iterator iter_end = s.constEnd();
   QString result;

   while (iter != iter_end) {
      QChar c = *iter;

      switch (c.unicode()) {

         case '@': {
            // replace @@ with @

            if (iter + 1 != iter_end && iter[1] ==  '@') {
               result += c;
               ++iter;
            }

            ++iter;
         }
         break;

         case '/': {
            // skip C comments
            result  += c;

            QChar pc = c;
            ++iter;

            if (iter != s.constEnd()) {
               c = *iter;
            }

            if (c == '*') {
               // start of C comment

               while (iter != iter_end  && ! (pc == '*' && c == '/')) {
                  // search end of comment

                  if (*iter == '@' &&  (iter + 1 != iter_end && iter[1] == '@')) {
                     result += c;
                     ++iter;

                  } else {
                     result += c;
                  }

                  pc = c;
                  ++iter;

                  if (iter != iter_end) {
                     c = *iter;
                  }
               }

               if (iter != iter_end) {
                  result += c;
                  ++iter;
               }
            }
         }
         break;

         case '"':
         case '\'':
            // skip string literals and char literals

            iter = processUntilMatch(iter, iter_end, result);
            break;

         default: {
            result += c;
            ++iter;
         }
         break;
      }
   }

   return result;
}

/*! compute the value of the expression in string expr.
 *  If needed the function may read additional characters from the input.
 */
bool computeExpression(const QString &expr)
{
   QString e = expr;

   s_expansionDict.clear();
   expandExpression(e, nullptr, 0, 0);

   e = removeIdsAndMarkers(e);

   if (e.isEmpty()) {
      return false;
   }

   bool retval = parseconstexp(s_yyFileName, s_yyLineNr, e);

   return retval;
}

/*! expands the macro definition in name
 *  If needed the function may read additional characters from the input
 */

QString expandMacro(const QString &name)
{
   QString n = name;

   s_expansionDict.clear();
   expandExpression(n, nullptr, 0, 0);

   n = removeMarkers(n);

   return n;
}

QSharedPointer<A_Define> newDefine()
{
   QSharedPointer<A_Define> def = QMakeShared<A_Define>();

   def->m_name       = s_defName;
   def->m_definition = s_defText.trimmed();
   def->nargs        = s_defArgs;
   def->m_fileName   = s_yyFileName;
   def->fileDef      = s_yyFileDef;
   def->lineNr       = s_yyLineNr - s_yyMLines;
   def->columnNr     = s_yyColNr;
   def->varArgs      = s_defVarArgs;

   if (! def->m_name.isEmpty() && Doxy_Globals::expandAsDefinedDict.contains(def->m_name)) {
      def->isPredefined = true;
   }

   return def;
}

void addDefine()
{
   if (s_skip) {
      return;   // do not add this define as it is inside a
   }

   // conditional section (cond command) that is disabled
   if (! Doxy_Globals::gatherDefines) {
      return;
   }

   QSharedPointer<MemberDef> md = QMakeShared<MemberDef>(s_yyFileName, s_yyLineNr - s_yyMLines, s_yyColNr,
               "#define", s_defName, s_defArgsStr, "", Public, Normal, false, Member,
               MemberType_Define, ArgumentList(), ArgumentList());

   if (! s_defArgsStr.isEmpty()) {
      ArgumentList argList;

      argList = stringToArgumentList(s_defArgsStr);
      md->setArgumentList(argList);
   }

   int len = s_defLitText.indexOf('\n');

   if (len > 0 && s_defLitText.left(len).trimmed() == "\\") {
      // strip first line if it only contains a slash
      s_defLitText = s_defLitText.right(s_defLitText.length() - len - 1);

   } else if (len > 0) {
      // align the items on the first line with the items on the second line
      int k = len + 1;

      QString::const_iterator iter = s_defLitText.constBegin() + k;

//    while ((c = *p++) != 0 && (c == ' ' || c == '\t')) {

      while (iter !=  s_defLitText.constEnd())  {
         QChar c = *iter;
         ++iter;

         if (c == ' ' || c == '\t') {
            ++k;

         } else {
            break;

         }
      }

      s_defLitText = s_defLitText.mid(len + 1, k - len - 1) + s_defLitText.trimmed();
   }
   md->setInitializer(s_defLitText.trimmed());

   md->setFileDef(s_inputFileDef);
   md->setDefinition("#define " + s_defName);

   QSharedPointer<MemberName> mn = Doxy_Globals::functionNameSDict.find(s_defName);

   if (! mn) {
      mn = QMakeShared<MemberName>(s_defName);
      Doxy_Globals::functionNameSDict.insert(s_defName, mn);
   }

   mn->append(md);

   if (s_yyFileDef) {
      s_yyFileDef->insertMember(md);
   }
}

static inline void outputChar(QChar c)
{
   if (s_includeStack.isEmpty() || s_curlyCount > 0) {
      s_outputString += c;
   }
}

static inline void outputArray(const QString &a, int len)
{
   if (s_includeStack.isEmpty() || s_curlyCount > 0) {
      s_outputString += a.mid(0, len);
   }
}

static void readIncludeFile(const QString &inc)
{
   static bool searchIncludes = Config::getBool("search-includes");
   uint i = 0;

   // find the start of the include file name
   while (i < inc.length() && (inc.at(i) == ' ' || inc.at(i) == '"' || inc.at(i) == '<')) {
      i++;
   }
   uint s = i;

   // was it a local include?
   bool localInclude = s > 0 && inc.at(s - 1) == '"';

   // find the end of the include file name
   while (i < inc.length() && inc.at(i) != '"' && inc.at(i) != '>') {
      i++;
   }

   if (s < inc.length() && i > s) {
      // valid include file name found

      // extract include path+name
      QString incFileName = inc.mid(s, i - s).trimmed();
      QString dosExt      = incFileName.right(4);

      if (dosExt == ".exe" || dosExt == ".dll" || dosExt == ".tlb") {
         // skip imported binary files (e.g. M$ type libraries)
         return;
      }

      QString oldFileName = s_yyFileName;

      QSharedPointer<FileDef> oldFileDef = s_yyFileDef;
      int oldLineNr = s_yyLineNr;

      // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
      QString absIncFileName = incFileName;
      {
         QFileInfo fi(s_yyFileName);

         if (fi.exists()) {
            QString absName = fi.absolutePath() + "/" + incFileName;

            QFileInfo fi2(absName);
            if (fi2.exists()) {
               absIncFileName = fi2.absoluteFilePath();

            } else if (searchIncludes) {
               const QStringList includePath = Config::getList("include-path");

               for (auto s : includePath) {

                  QFileInfo fi(s);

                  if (fi.exists() && fi.isDir()) {
                     QString absName = fi.absoluteFilePath() + "/" + incFileName;

                     QFileInfo fi2(absName);
                     if (fi2.exists()) {
                        absIncFileName = fi2.absoluteFilePath();
                        break;
                     }

                  }

               }
            }

         }
      }

      DefineManager::instance().addInclude(s_yyFileName, absIncFileName);
      DefineManager::instance().addFileToContext(absIncFileName);

      // findFile will overwrite s_yyFileDef if found
      QSharedPointer<FileState> fs;
      bool alreadyIncluded = false;

      if ((fs = findFile(incFileName, localInclude, alreadyIncluded))) {
         // see if the include file can be found

         if (oldFileDef) {
            // add include dependency to the file in which the #include was found
            bool ambig;

            // change to absolute name
            QSharedPointer<FileDef> incFd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            QSharedPointer<FileDef> temp;
            if (ambig) {
               temp = QSharedPointer<FileDef>();
            } else {
               temp = incFd;
            }

            oldFileDef->addIncludeDependency(temp, incFileName, localInclude, s_isImported, false);

            // add included by dependency
            if (s_yyFileDef) {
               s_yyFileDef->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, s_isImported);
            }

         } else if (s_inputFileDef) {
            s_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, s_isImported, true);

         }

         fs->bufState   = YY_CURRENT_BUFFER;
         fs->lineNr     = oldLineNr;
         fs->fileName   = oldFileName;
         fs->curlyCount = s_curlyCount;

         s_curlyCount   = 0;

         // push the state on the stack
         s_includeStack.push(fs);

         // set the scanner to the include file

         // Deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# 1 \"%1\" 1\n").formatArg(QString(s_yyFileName));
         outputArray(lineStr, lineStr.length());

         DBG_CTX((stderr, "Switching to include file %s\n", csPrintable(incFileName)));
         s_expectGuard = true;
         s_inputString    = fs->fileBuf;
         s_inputPosition = 0;

         preYY_switch_to_buffer(preYY_create_buffer(0, YY_BUF_SIZE));

      } else {

         if (oldFileDef) {
            bool ambig;

            // change to absolute name for bug 641336
            QSharedPointer<FileDef> fd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            // add include dependency to the file in which the #include was found
            oldFileDef->addIncludeDependency(ambig ? QSharedPointer<FileDef>() : fd, incFileName, localInclude, s_isImported, false);

            // add included by dependency
            if (fd) {
               fd->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, s_isImported);
            }

         } else if (s_inputFileDef) {
            s_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, s_isImported, true);
         }

         if (Debug::isFlagSet(Debug::Preprocessor)) {
            if (alreadyIncluded) {
               Debug::print(Debug::Preprocessor, 0, "#include %s: already included, skipping...\n", csPrintable(incFileName));
            } else {
               Debug::print(Debug::Preprocessor, 0, "#include %s: not found, skipping...\n", csPrintable(incFileName));
            }
         }

         if (s_curlyCount > 0 && !alreadyIncluded) { // failed to find #include inside { ... }
            warn(s_yyFileName, s_yyLineNr, "include file %s was not found, check the value of INCLUDE_PATH", csPrintable(incFileName));
         }
      }
   }
}

static void startCondSection(const QString &sectId)
{
   CondParser prs;

   bool expResult = prs.parse(s_yyFileName, s_yyLineNr, sectId);
   s_condStack.push( QMakeShared<CondCtx>(s_yyLineNr, sectId, s_skip) );

   if (! expResult) {
      s_skip = true;
   }
}

static void endCondSection()
{
   if (s_condStack.isEmpty()) {
      s_skip = false;

   } else {
      QSharedPointer<CondCtx> ctx = s_condStack.pop();
      s_skip = ctx->skip;
   }
}

static void forceEndCondSection()
{
   while (! s_condStack.isEmpty()) {
      s_condStack.pop();
   }

   s_skip = false;
}

static QString escapeAt(const QString &text)
{
   QString result;

   for (auto c : text) {
      if (c == '@') {
         result += "@@";

      } else {
         result += c;
      }
   }

   return result;
}

static char resolveTrigraph(char c)
{
   switch (c) {
      case '=':
         return '#';

      case '/':
         return '\\';

      case '\'':
         return '^';

      case '(':
         return '[';

      case ')':
         return ']';

      case '!':
         return '|';

      case '<':
         return '{';

      case '>':
         return '}';

      case '-':
         return '~';
   }

   return '?';
}

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size)   result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define CopyStringFtn 8
#define Include 9
#define IncludeID 10
#define EndImport 11
#define DefName 12
#define DefineArg 13
#define DefineText 14
#define SkipCPPBlock 15
#define Ifdef 16
#define Ifndef 17
#define SkipCComment 18
#define ArgCopyCComment 19
#define CopyCComment 20
#define SkipVerbatim 21
#define SkipCPPComment 22
#define RemoveCComment 23
#define RemoveCPPComment 24
#define Guard 25
#define DefinedExpr1 26
#define DefinedExpr2 27
#define SkipDoubleQuote 28
#define SkipSingleQuote 29
#define UndefName 30
#define IgnoreLine 31
#define FindDefineArgs 32
#define ReadString 33
#define CondLineC 34
#define CondLineCpp 35
#define SkipCond 36

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

int preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( preYYtext, preYYleng, 1, preYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1402 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6533 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP

	YY_BREAK
case 2:
YY_RULE_SETUP

	YY_BREAK
case 3:
YY_RULE_SETUP

	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // Trigraph
      unput(resolveTrigraph(preYYtext[2]));
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      BEGIN(Command);
      s_yyColNr  += preYYleng;
      s_yyMLines = 0;
   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
      BEGIN(CopyLine);
   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
      // constructors?
      int i;

      for (i = preYYleng - 1; i >= 0; i--) {
         unput(preYYtext[i]);
      }

      BEGIN(CopyLine);
   }
	YY_BREAK
case 8:
/* rule 8 can match eol */
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{

      // function list macro with one (...) argument, e.g. for K_GLOBAL_STATIC_WITH_ARGS
      // function like macro

      static bool skipFuncMacros = Config::getBool("skip-function-macros");

      QString name = QString::fromUtf8(preYYtext);
      name = name.left(name.indexOf('(')).trimmed();

      QSharedPointer<A_Define> def;

      if (skipFuncMacros && name != "Q_PROPERTY" && ! ( (s_includeStack.isEmpty() || s_curlyCount > 0) && s_macroExpansion &&
                  (def = DefineManager::instance().isDefined(name)) && (! s_expandOnlyPredef || def->isPredefined)) ) {

         outputChar('\n');
         s_yyLineNr++;

      } else {
         // do not skip

         for (int i = preYYleng - 1; i >= 0; i--) {
            unput(preYYtext[i]);
         }

         BEGIN(CopyLine);
      }
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_yyLineNr += text.count('\n');
      outputArray(text, text.length());
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (s_includeStack.isEmpty())  {
         s_curlyCount++;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (s_includeStack.isEmpty() && s_curlyCount > 0)  {
         s_curlyCount--;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyString );
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);

      BEGIN( CopyStringFtn );
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_expectGuard = false;
      QSharedPointer<A_Define> def;

      if ((s_includeStack.isEmpty() || s_curlyCount > 0) && s_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                  (! s_expandOnlyPredef || def->isPredefined)) {

         // fount it
         s_roundCount = 0;
         s_defArgsStr = text;

         if (def->nargs == -1) {
            // no function macro

            QString result = def->isPredefined ? def->m_definition : expandMacro(s_defArgsStr);
            outputArray(result, result.length());

         } else {
            // zero or more arguments

            s_findDefArgContext = CopyLine;
            BEGIN(FindDefineArgs);

         }

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((s_includeStack.isEmpty() || s_curlyCount > 0) && s_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                   def->nargs == -1 && (! s_expandOnlyPredef || def->isPredefined)) {

            QString result = def->isPredefined ? def->m_definition : expandMacro(text);
            outputArray(result, result.length());

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 26:
/* rule 26 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      //  strip line continuation characters
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      s_yyLineNr++;
      s_yyColNr = 1;
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      s_defArgsStr += '(';
      s_roundCount++;
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      s_defArgsStr += ')';
      s_roundCount--;

      if (s_roundCount == 0) {
         QString result = expandMacro(s_defArgsStr);

         if (s_findDefArgContext == CopyLine) {
            outputArray(result, result.length());
            BEGIN(s_findDefArgContext);

         } else {
            readIncludeFile(result);
            s_nospaces = false;
            BEGIN(Start);
         }
      }
   }
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("       {
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
   }
  */
case 31:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
    }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
      BEGIN(ArgCopyCComment);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
      BEGIN(ReadString);
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      s_defArgsStr += text[0];
      BEGIN(ReadString);
   }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
      s_defArgsStr += ' ';
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      s_defArgsStr += "@@";
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{
      s_defArgsStr += ' ';
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      s_defArgsStr += text[0];
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // continue line
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_isImported = text[1] == 'm';

      if (s_macroExpansion) {
         BEGIN(IncludeID);
      }
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_isImported = text[1] == 'm';
      s_incName = text[text.length() - 1];
      BEGIN(Include);
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      s_yyColNr += preYYleng;
      BEGIN(DefName);
   }
	YY_BREAK
case 51:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr.resize(0);
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 52:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr.resize(0);
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 53:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr = "! ";
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 54:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr = "! ";
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 55:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr.resize(0);
      BEGIN(Guard);
   }
	YY_BREAK
case 56:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         s_guardExpr.resize(0);
         BEGIN(Guard);

      } else {
         s_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      if (otherCaseDone()) {
         s_ifcount = 0;
         BEGIN(SkipCPPBlock);

      } else {
         setCaseDone(true);
      }
   }
	YY_BREAK
case 58:
YY_RULE_SETUP
{
      BEGIN(UndefName);
   }
	YY_BREAK
case 59:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         s_guardExpr.resize(0);
         BEGIN(Guard);
      }
   }
	YY_BREAK
case 60:
/* rule 60 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      decrLevel();
   }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      s_yyLineNr++;
   }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
      s_expectGuard = false;
   }
	YY_BREAK
case 63:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(IgnoreLine);
   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
   }
	YY_BREAK
case 65:
YY_RULE_SETUP

	YY_BREAK
case 66:
YY_RULE_SETUP
{
      s_yyColNr += preYYleng;
   }
	YY_BREAK
case 67:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((def = DefineManager::instance().isDefined(text)) && ! def->nonRecursive) {
         def->undef = true;
      }
      BEGIN(Start);
   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_guardExpr += ' ';
      ++s_yyLineNr;
   }
	YY_BREAK
case 69:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 70:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 71:
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 72:
YY_RULE_SETUP
{
      s_guardExpr += "@@";
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_guardExpr += text[0];
   }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{
      unput(*preYYtext);

      bool guard = computeExpression(s_guardExpr);
      setCaseDone(guard);

      if (guard) {
         BEGIN(Start);

      } else {
         s_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 76:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || s_guardName == text) {
         s_guardExpr+=" 1L ";
      } else {
         s_guardExpr+=" 0L ";
      }

      s_lastGuardName = text;
      BEGIN(Guard);
   }
	YY_BREAK
case 77:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || s_guardName == text){
         s_guardExpr+=" 1L ";
      } else {
         s_guardExpr+=" 0L ";
      }

      s_lastGuardName = text;
   }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{
      // should not happen, handle anyway

      s_yyLineNr++;
      s_ifcount = 0;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 79:
YY_RULE_SETUP
{
      BEGIN(Guard);
   }
	YY_BREAK
case 80:
YY_RULE_SETUP

	YY_BREAK
case 81:
YY_RULE_SETUP
{
      BEGIN(SkipCommand);
   }
	YY_BREAK
case 82:
/* rule 82 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 84:
YY_RULE_SETUP

	YY_BREAK
case 85:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_ifcount++;
   }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
      if (s_ifcount == 0 && ! otherCaseDone()) {
         setCaseDone(true);
         BEGIN(Start);
      }
   }
	YY_BREAK
case 87:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (s_ifcount == 0)  {

         if (! otherCaseDone()) {
            s_guardExpr.resize(0);
            s_lastGuardName.resize(0);
            BEGIN(Guard);

         } else {
            BEGIN(SkipCPPBlock);
         }
      }
   }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      s_expectGuard = false;
      decrLevel();

      if (--s_ifcount < 0) {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(SkipLine);
   }
	YY_BREAK
case 91:
YY_RULE_SETUP

	YY_BREAK
case 92:
YY_RULE_SETUP

	YY_BREAK
case 93:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
      BEGIN(SkipString);
   }
	YY_BREAK
case 95:
YY_RULE_SETUP

	YY_BREAK
case 96:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
   }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
      s_lastCPPContext = YY_START;
      BEGIN(RemoveCPPComment);
   }
	YY_BREAK
case 98:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
   }
	YY_BREAK
case 99:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      s_lastCContext=YY_START;
      BEGIN(RemoveCComment);
   }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 105:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_nospaces   = true;
      s_roundCount = 0;
      s_defArgsStr = text;
      s_findDefArgContext = IncludeID;
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_nospaces = true;
      readIncludeFile(expandMacro(text));
      BEGIN(Start);
   }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_incName += text;
      readIncludeFile(s_incName);

      if (s_isImported) {
         BEGIN(EndImport);
      } else {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 108:
/* rule 108 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(Start);
   }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
   }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{
      // define with argument

      s_argDict = QMakeShared<QHash<QString, int>>();

      s_defArgs = 0;
      s_defArgsStr.resize(0);
      s_defText.resize(0);
      s_defLitText.resize(0);

      s_defName    = QString::fromUtf8(preYYtext);
      s_defVarArgs = false;
      s_defExtraSpacing.resize(0);
      BEGIN(DefineArg);
   }
	YY_BREAK
case 112:
/* rule 112 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // special case: define with 1 -> can be "guard"

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_defArgs = -1;
      s_defArgsStr.resize(0);

      s_defName = QString::fromUtf8(preYYtext);
      s_defName = s_defName.left(s_defName.length() - 1).trimmed();
      s_defVarArgs = false;

      if (s_curlyCount > 0 || s_defName != s_lastGuardName || ! s_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + s_defName;
         outputArray(tmp, tmp.length());

         s_quoteArg      = false;
         s_insideComment = false;
         s_lastGuardName.resize(0);
         s_defText    = "1";
         s_defLitText = "1";
         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         s_defText.resize(0);
         s_defLitText.resize(0);
         BEGIN(Start);
      }

      s_expectGuard = false;
   }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{
      // empty define
      QString text = QString::fromUtf8(preYYtext);

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_defArgs = -1;
      s_defName = text;

      s_defArgsStr.resize(0);
      s_defText.resize(0);
      s_defLitText.resize(0);
      s_defVarArgs = false;

      if (s_curlyCount > 0 || s_defName != s_lastGuardName || ! s_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + s_defName;
         outputArray(tmp, tmp.length());

         s_quoteArg      = false;
         s_insideComment = false;

         if (s_insideCS) {
            s_defText="1"; // for C#, use "1" as define text
         }

         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         s_guardName = text;
         s_lastGuardName.resize(0);
         BEGIN(Start);
      }

      s_expectGuard = false;
   }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
      // define with content
      QString text = QString::fromUtf8(preYYtext);

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_defArgs = -1;
      s_defArgsStr.resize(0);

      s_defText.resize(0);
      s_defLitText.resize(0);
      s_defName    = text;
      s_defVarArgs = false;

      QString tmp = "#define " + s_defName + s_defArgsStr;
      outputArray(tmp, tmp.length());

      s_quoteArg      = false;
      s_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{
      s_defExtraSpacing += "\n";
      s_yyLineNr++;
   }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
   }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
   }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;

      QString tmp = "#define " + s_defName + s_defArgsStr + s_defExtraSpacing;
      outputArray(tmp, tmp.length());

      s_quoteArg      = false;
      s_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
      // Variadic macro
      s_defVarArgs = true;
      s_defArgsStr +=  QString::fromUtf8(preYYtext);

      s_argDict->insert("__VA_ARGS__", s_defArgs);
      s_defArgs++;
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;

      s_defVarArgs = text.endsWith("...");

      if (s_defVarArgs)  {
         // strip ellipsis
         text = text.left(text.length() - 3);
      }

      text = text.trimmed();

      s_argDict->insert(text, s_defArgs);
      s_defArgs++;
   }
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"  {
      s_defText+=preYYtext;
      s_defLitText+=preYYtext;
      s_insideComment=true;
   }

<DefineText>"* /"          {
      s_defText+=preYYtext;
      s_defLitText+=preYYtext;
      s_insideComment=false;
   }
  */
case 121:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
       QString text = QString::fromUtf8(preYYtext);

      s_defText   += text;
      s_defLitText+= text;
      s_lastCContext = YY_START;
      s_commentCount = 1;
      BEGIN(CopyCComment);
   }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      s_lastCPPContext  = YY_START;
      s_defLitText     += ' ';
      BEGIN(SkipCPPComment);
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (text[0] == '/') {
         outputChar('/');
      }

      outputChar('*');
      outputChar('/');

      if (--s_commentCount <= 0) {

         if (s_lastCContext == Start) {
            // small hack to make sure that ^... rule will
            // match when going to Start... Example: "/*...*/ some stuff..."

            YY_CURRENT_BUFFER->yy_at_bol = 1;
         }

         BEGIN(s_lastCContext);
      }
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');

      // s_commentCount++;
   }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());
      s_yyLineNr += text.count('\n');
   }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());

      s_yyLineNr += text.count('\n');
      s_fenceSize = 0;

      if (text[1] == 'f') {
         s_blockName = "f";

      } else {
         QString bn = text.mid(1);
         int i = bn.indexOf('{');

         // for \code{.c}
         if (i != -1) {
            bn = bn.left(i);
         }

         s_blockName = bn.trimmed();
      }
      BEGIN(SkipVerbatim);
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      // escaped @cond
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
      // conditional section
      s_ccomment = true;
      s_condCtx  = YY_START;
      BEGIN(CondLineCpp);
   }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
      // conditional section
      s_ccomment = false;
      s_condCtx  = YY_START;
      BEGIN(CondLineC);
   }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      startCondSection(text);

      if (s_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/", 2);
            s_ccomment = true;

         } else {
            s_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(s_condCtx);

      }
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
      // non-guard character
      unput(*preYYtext);
      startCondSection(" ");

      if (s_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/",2);
            s_ccomment = true;

         } else {
            s_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(s_condCtx);
      }
   }
	YY_BREAK
case 136:
/* rule 136 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // no guard
      if (YY_START == SkipCComment) {
         s_ccomment=true;
         // end C comment
         outputArray("*/",2);

      } else {
         s_ccomment = false;
      }

      s_condCtx = YY_START;
      startCondSection(" ");
      BEGIN(SkipCond);
   }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
      s_ccomment = false;
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      s_ccomment = true;
   }
	YY_BREAK
case 142:
/* rule 142 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! s_skip) {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 143:
/* rule 143 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      bool oldSkip = s_skip;
      endCondSection();

      if (oldSkip && ! s_skip) {
         if (s_ccomment) {
            outputArray("/** ",4);

            // */ (editor syntax fix)
         }

         BEGIN(s_condCtx);
      }
   }
	YY_BREAK
case 144:
/* rule 144 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      bool oldSkip = s_skip;
      endCondSection();

      if (oldSkip && ! s_skip)  {
         BEGIN(s_condCtx);
      }
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
      /* end of verbatim block */

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (text[1] == 'f' && s_blockName == "f") {
         BEGIN(SkipCComment);

      } else if (text.mid(4) == s_blockName) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 146:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (s_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (s_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
{
      outputChar(*preYYtext);
   }
	YY_BREAK
case 152:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      s_defText    += escapeAt(text);
   }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defLitText += text;

      s_defText += " ";
      s_yyLineNr++;
      s_yyMLines++;
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      s_defText    += text;
      BEGIN(s_lastCContext);
   }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_yyLineNr++;

      s_defLitText += text;
      s_defText+=' ';
   }
	YY_BREAK
case 156:
YY_RULE_SETUP
{
      // see bug 594021 for a usecase for this rule
      if (s_lastCContext == SkipCPPBlock) {
         BEGIN(SkipCommand);

      } else {
         REJECT;
      }
   }
	YY_BREAK
case 157:
YY_RULE_SETUP
{
      BEGIN(s_lastCContext);
   }
	YY_BREAK
case 158:
YY_RULE_SETUP

	YY_BREAK
case 159:
YY_RULE_SETUP

	YY_BREAK
case 160:
YY_RULE_SETUP

	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 162:
YY_RULE_SETUP

	YY_BREAK
case 163:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
{
      unput(*preYYtext);
      BEGIN(s_lastCPPContext);
   }
	YY_BREAK
case 165:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');
   }
	YY_BREAK
case 166:
YY_RULE_SETUP
{
      outputChar('/');
      outputChar('/');
   }
	YY_BREAK
case 167:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 168:
YY_RULE_SETUP
{
      outputChar(*preYYtext);
   }
	YY_BREAK
case 169:
YY_RULE_SETUP

	YY_BREAK
case 170:
YY_RULE_SETUP

	YY_BREAK
case 171:
YY_RULE_SETUP

	YY_BREAK
case 172:
YY_RULE_SETUP

	YY_BREAK
case 173:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      s_quoteArg   = true;
      s_defLitText += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defLitText += text;

      if (s_quoteArg) {
         s_defText+="\"";
      }

      if (s_defArgs > 0) {
         auto iter = s_argDict->find(text);

         if (iter != s_argDict->end()) {
            int n = iter.value();

            s_defText += '@';

            QString numStr = QString("%1").formatArg(n);
            s_defText += numStr;

         } else {
            s_defText += text;

         }

      } else {
         s_defText += text;
      }

      if (s_quoteArg) {
         s_defText += "\"";
      }

      s_quoteArg = false;
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      s_defText    += text;
   }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      outputChar('\n');
      s_defText += ' ';
      s_yyLineNr++;
      s_yyMLines++;
   }
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QString comment = extractTrailingComment(s_defLitText);
      s_defLitText += text;

      if (! comment.isEmpty()) {
         outputArray(comment, comment.length());
         s_defLitText = s_defLitText.left(s_defLitText.length() - comment.length() - 1);
      }

      outputChar('\n');

      QSharedPointer<A_Define> def;

      if (s_includeStack.isEmpty() || s_curlyCount > 0) {
         addDefine();
      }

      def = DefineManager::instance().isDefined(s_defName);

      if (def == nullptr)  {
         // new define

         QSharedPointer<A_Define> nd = newDefine();
         DefineManager::instance().addDefine(s_yyFileName, nd);

      } else if (def) {
         // name already exists

         if (def->undef) {
            // undefined name
            def->undef        = false;
            def->m_name       = s_defName;
            def->m_definition = s_defText.trimmed();
            def->nargs        = s_defArgs;
            def->m_fileName   = s_yyFileName;
            def->lineNr       = s_yyLineNr - s_yyMLines;
            def->columnNr     = s_yyColNr;
         }
      }

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_yyLineNr++;
      s_yyColNr = 1;
      s_lastGuardName.resize(0);
      BEGIN(Start);
   }
	YY_BREAK
case 178:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defText    += ' ';
      s_defLitText += text;
   }
	YY_BREAK
case 179:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defText    += "##";
      s_defLitText += text;
   }
	YY_BREAK
case 180:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defText     += "@@";
      s_defLitText  += text;
   }
	YY_BREAK
case 181:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;

      if (! s_insideComment) {
         BEGIN(SkipDoubleQuote);
      }
   }
	YY_BREAK
case 182:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;

      if (! s_insideComment) {
         BEGIN(SkipSingleQuote);
      }
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text;
      s_defLitText += text;
   }
	YY_BREAK
case 184:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text;
      s_defLitText += text;
   }
	YY_BREAK
case 185:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 186:
YY_RULE_SETUP
{
     QString text = QString::fromUtf8(preYYtext);

      s_defText    += text;
      s_defLitText += text;
   }
	YY_BREAK
case 187:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
   }
	YY_BREAK
case 189:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
   }
	YY_BREAK
case 190:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
   }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(CopyStringFtn):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
{
      DBG_CTX((stderr, "End of include file\n"));

      if (s_includeStack.isEmpty()) {
         DBG_CTX((stderr, "Terminating scanner\n"));
         yyterminate();

      } else {
         QSharedPointer<FileState> fs = s_includeStack.pop();

         YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
         preYY_switch_to_buffer(fs->bufState );
         preYY_delete_buffer(oldBuf );

         s_yyLineNr      = fs->lineNr;
         s_inputString   = fs->oldFileBuf;
         s_inputPosition = fs->oldFileBufPos;
         s_curlyCount    = fs->curlyCount;
         setFileName(fs->fileName);

         DBG_CTX((stderr, "######## FileName %s\n", csPrintable(s_yyFileName)));

         // deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# %1 \"%2\" 2").formatArg(s_yyLineNr).formatArg(QString(s_yyFileName));
         outputArray(lineStr, lineStr.length());
      }
   }
	YY_BREAK
case 191:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
case 192:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      if (YY_START == SkipVerbatim || YY_START == SkipCond) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_lastCContext = YY_START;
         s_commentCount = 1;

         if (preYYleng == 3) {
            s_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 193:
YY_RULE_SETUP
{
      if (YY_START == SkipVerbatim || YY_START == SkipCond || getLanguageFromFileName(s_yyFileName) == SrcLangExt_Fortran) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_lastCPPContext = YY_START;

         if (preYYleng == 3) {
            s_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCPPComment);
      }
   }
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
   }
	YY_BREAK
case 195:
YY_RULE_SETUP
{
      // utf-8 code point
      QString text  = QString::fromUtf8(preYYtext);
      s_expectGuard = false;

      for (QChar c : text) {
         outputChar(c);
      }
   }
	YY_BREAK
case 196:
YY_RULE_SETUP
{
      // catch all
      QString text  = QString::fromUtf8(preYYtext);
      s_expectGuard = false;

      for (QChar c : text) {
         outputChar(c);
      }
   }
	YY_BREAK
case 197:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 62);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1402 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 62;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1402 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1401);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
int preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static int getNextChar(const QString &expr, QString *rest, uint &pos)
{
   if (pos < expr.length()) {
      return expr.at(pos++).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc  = rest->at(0).unicode();
      *rest   = rest->right(rest->length() - 1);
      return cc;

   } else {
      int cc = yyinput();

      return cc;
   }
}

static int getCurrentChar(const QString &expr, QString *rest, uint pos)
{
   if (pos < expr.length()) {
      return expr.at(pos).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc = rest->at(0).unicode();
      return cc;

   } else {
      int cc = yyinput();

      returnCharToStream(cc);
      return cc;
   }
}

static void unputChar(const QString &expr, QString *rest, uint &pos, char c)
{
   if (pos < expr.length()) {
      pos++;

   } else if (rest) {
      char cs[2];
      cs[0] = c;
      cs[1] = '\0';
      rest->prepend(cs);

   } else {

      returnCharToStream(c);
   }
}

void addSearchDir(const QString &dir)
{
   QFileInfo fi(dir);

   if (fi.isDir()) {
      s_pathList.append(fi.absoluteFilePath());
   }
}

void initPreprocessor()
{
   addSearchDir(".");
   s_expandedDict = QMakeShared<DefineDict>();
}

void removePreProcessor()
{
   s_expandedDict = QSharedPointer<DefineDict>();
   s_pathList.clear();

   DefineManager::deleteInstance();
}

QString preprocessFile(const QString &fileName, const QString &input)
{
   printlex(preYY_flex_debug, true, __FILE__, fileName);

   s_macroExpansion   = Config::getBool("macro-expansion");
   s_expandOnlyPredef = Config::getBool("expand-only-predefined");

   s_skip        = false;
   s_curlyCount  = 0;
   s_nospaces    = false;

   s_inputPosition  = 0;
   s_inputString    = input;
   s_outputString   = "";

   s_includeStack.clear();
   s_expandedDict->clear();
   s_condStack.clear();

   uint orgOffset = 0;

   setFileName(fileName);

   s_inputFileDef = s_yyFileDef;
   DefineManager::instance().startContext(s_yyFileName);

   static bool firstTime = true;

   if (firstTime)  {
      // add predefined macros
      static QStringList const preDefinedMacros = Config::getList("predefined-macros");

      for (const auto &definedMacro : preDefinedMacros) {

         int posEquals = definedMacro.indexOf('=');
         int posOpen   = definedMacro.indexOf('(');
         int posClose  = definedMacro.indexOf(')');

         bool nonRecursive = posEquals > 0 && definedMacro.at(posEquals - 1) == ':';

         if (posOpen == 0) {
            // no define name
            continue;
         }

         if (posOpen < posEquals && posClose < posEquals && posOpen != -1  &&
                  posClose != -1  &&  posOpen < posClose) {

            // predefined function macro definition

            // regexp matching an id
            static QRegularExpression regExp_id("[a-z_A-Z\x80-\xFF][a-z_A-Z0-9\x80-\xFF]*");
            QHash<QString, int> argDict;

            int index = posOpen + 1;
            int count = 0;
            int len;

            QRegularExpressionMatch match = regExp_id.match(definedMacro, definedMacro.constBegin() + index);

            // gather the formal arguments in a dictionary
            while (index < posClose) {

               if (match.hasMatch()) {
                  len = match.capturedLength();

                  if (len > 0) {
                     argDict.insert(match.captured(), count);
                     index = match.capturedEnd() - definedMacro.begin();

                     ++count;

                  } else {
                     ++index;
                  }

               } else {
                  break;
               }

               match = regExp_id.match(definedMacro, definedMacro.constBegin() + index);
            }

            // strip definition part
            QString tmp = definedMacro.right(definedMacro.length() - posEquals - 1);
            QString definition;

            index = 0;
            match = regExp_id.match(tmp);

            // substitute all occurrences of formal arguments with their corresponding markers
            while (match.hasMatch()) {

               int p = match.capturedStart() - tmp.constBegin();
               len   = match.capturedLength();

               definition += tmp.mid(index, p - index);

               auto iter = argDict.find(match.captured());

               if (iter != argDict.end()) {
                  int argIndex = iter.value();

                  QString marker = QString(" @%1 ").formatArg(argIndex);
                  definition += marker;

               } else {
                  definition += match.captured();
               }

               index = p + len;
               match = regExp_id.match(tmp, match.capturedEnd());
            }

            if (index < tmp.length()) {
               definition += tmp.mid(index, tmp.length() - index);
            }

            // add define definition to the dictionary of defines for this file
            QString dname = definedMacro.left(posOpen);

            if (! dname.isEmpty()) {
               QSharedPointer<A_Define> def = QMakeShared<A_Define>();

               def->m_name       = dname;
               def->m_definition = definition;
               def->nargs        = count;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = s_yyFileDef;
               def->m_fileName   = fileName;

               DefineManager::instance().addDefine(s_yyFileName, def);
            }

         } else if ((posOpen == -1 || posOpen > posEquals)   &&
                    (posClose == -1 || posClose > posEquals) &&
                    ! definedMacro.isEmpty() && definedMacro.length() > posEquals)  {

            // predefined non-function macro definition
            QSharedPointer<A_Define> def = QMakeShared<A_Define>();

            if (posEquals == -1) {
               // simple define without argument
               def->m_name = definedMacro;
               def->m_definition = "1"; // substitute occurrences by 1 (true)

            } else {
               // simple define with argument
               int ine = posEquals - (nonRecursive ? 1 : 0);
               def->m_name = definedMacro.left(ine);
               def->m_definition = definedMacro.right(definedMacro.length() - posEquals - 1);
            }

            if (! def->m_name.isEmpty()) {
               def->nargs = -1;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = s_yyFileDef;
               def->m_fileName   = fileName;
               DefineManager::instance().addDefine(s_yyFileName, def);
            }
         }
      }
   }

   s_yyLineNr = 1;
   s_yyColNr  = 1;
   s_ifcount  = 0;

   s_levelGuard.clear();

   BEGIN( Start );

   s_expectGuard = determineSection(fileName) == Entry::HEADER_SEC;
   s_guardName.resize(0);
   s_lastGuardName.resize(0);
   s_guardExpr = "";

   preYYlex();

   s_lexInit = true;

   while (! s_condStack.isEmpty()) {
      QSharedPointer<CondCtx> ctx = s_condStack.pop();
      QString sectionInfo = " ";

      if (ctx->sectionId != " ") {
         sectionInfo = QString(" with label '%1' ").formatArg(QString(ctx->sectionId));
      }

      warn(fileName, ctx->lineNr, "Conditional section %s does not have "
           "a corresponding \\endcond command within this file.", csPrintable(sectionInfo));
   }

   // make sure we do not extend a \cond with missing \endcond over multiple files
   forceEndCondSection();

   DefineManager::instance().endContext();
   printlex(preYY_flex_debug, false, __FILE__, fileName);

   return s_outputString;
}

void preFreeScanner()
{
   if (s_lexInit) {
      preYYlex_destroy();
   }
}

