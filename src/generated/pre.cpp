/************************************************************************
*
* Copyright (C) 2014-2019 Barbara Geller & Ansel Sermersheim
* Copyright (C) 1997-2014 by Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,int len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 195
#define YY_END_OF_BUFFER 196
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1623] =
    {   0,
      176,  176,  196,  194,  195,    1,  194,  195,  192,  195,
        3,  194,  195,  194,  195,  194,  195,  194,  195,    2,
      194,  195,    6,  194,  195,    1,    6,  194,  195,    6,
      194,  195,    6,  192,  195,    3,    6,  194,  195,    5,
      194,  195,    6,  194,  195,    6,  194,  195,    6,  194,
      195,    6,  194,  195,    6,  194,  195,    2,    6,  194,
      195,   65,  194,  195,    1,   65,  194,  195,   60,  192,
      195,    3,   65,  194,  195,   65,  194,  195,   65,  194,
      195,   62,   65,  194,  195,   62,   65,  194,  195,   62,
       65,  194,  195,   62,   65,  194,  195,   62,   65,  194,

      195,   62,   65,  194,  195,   62,   65,  194,  195,   62,
       65,  194,  195,    2,   65,  194,  195,   89,  194,  195,
        1,   89,  194,  195,   87,  192,  195,    3,   89,  194,
      195,   89,  194,  195,   89,  194,  195,   88,   89,  194,
      195,   88,   89,  194,  195,   88,   89,  194,  195,   88,
       89,  194,  195,    2,   89,  194,  195,   90,   93,  194,
      195,    1,   90,   93,  194,  195,   98,  192,  195,    3,
       90,   93,  194,  195,   92,   93,  194,  195,   93,  194,
      195,   93,  194,  195,   90,   93,  194,  195,   90,   93,
      194,  195,    2,   90,   93,  194,  195,   99,  102,  194,

      195,    1,   99,  102,  194,  195,    3,   99,  102,  194,
      195,  101,  102,  194,  195,   99,  102,  194,  195,   99,
      102,  194,  195,  102,  194,  195,   99,  102,  194,  195,
        2,   99,  102,  194,  195,   27,  194,  195,    1,   27,
      194,  195,   28,  192,  195,    3,   27,  194,  195,   16,
       27,  194,  195,   17,   27,  194,  195,   27,  194,  195,
       27,  194,  195,   25,   27,  194,  195,16408,   27,  194,
      195,   25,   27,  194,  195,16408,   11,   27,  194,  195,
       12,   27,  194,  195,   25,   27,  194,  195,16408,    2,
       27,  194,  195,   18,  194,  195,    1,   18,  194,  195,

       20,  194,  195,   18,  194,  195,   18,  194,  195,  194,
      195,   18,  194,  195,    2,   18,  194,  195,   21,  194,
      195,    1,   21,  194,  195,   23,  194,  195,   21,  194,
      195,   21,  194,  195,  194,  195,   21,  194,  195,    2,
       21,  194,  195,  194,  195,    1,  194,  195,    3,  194,
      195,  194,  195,  194,  195,  194,  195,    2,  194,  195,
      104,  194,  195,  104,  194,  195,  108,  194,  195,    1,
      108,  194,  195,  106,  192,  195,    3,  108,  194,  195,
      108,  194,  195,  108,  194,  195,  108,  194,  195,  108,
      194,  195,    2,  108,  194,  195, 8304,  194,  195,16493,

    16495,16496, 8304,  194,  195,16493,16495,16496,  194,  195,
      115,  194,  195,  116,  194,  195,  114,  194,  195,  194,
      195,  118,  194,  195,  194,  195,  118,  194,  195,  188,
      194,  195,    1,  188,  194,  195,  176,  188,  194,  195,
      175,  192,  195,    3,  188,  194,  195,  179,  188,  194,
      195,  171,  188,  194,  195,  180,  188,  194,  195,  188,
      194,  195,  188,  194,  195,  178,  188,  194,  195,  172,
      188,  194,  195,  188,  194,  195,  172,  188,  194,  195,
        2,  188,  194,  195,   82,  194,  195,    1,   82,  194,
      195,   81,  192,  195,    3,   82,  194,  195,   82,  194,

      195,   82,  194,  195,   82,  194,  195,    2,   82,  194,
      195,   80,   82,  194,  195,    1,   80,   82,  194,  195,
       80,   82,  194,  195,   80,   81,  192,  195,    3,   80,
       82,  194,  195,   79,   82,  194,  195,   80,   82,  194,
      195,   80,   82,  194,  195,   80,   82,  194,  195,    2,
       80,   82,  194,  195,  147,  149,  194,  195,    1,  149,
      194,  195,  148,  192,  195,    3,  147,  149,  194,  195,
      149,  194,  195,  149,  194,  195,  147,  149,  194,  195,
      149,  194,  195,  149,  194,  195,  147,  149,  194,  195,
        2,  147,  149,  194,  195,  147,  149,  194,  195,  149,

      194,  195,  149,  194,  195,  149,  194,  195,   38,   41,
      194,  195,    1,   38,   41,  194,  195,   40,  192,  195,
        3,   38,   41,  194,  195,   41,  194,  195,   38,   41,
      194,  195,   38,   41,  194,  195,   38,   41,  194,  195,
        2,   38,   41,  194,  195,  150,  173,  194,  195,    1,
      150,  173,  194,  195,  153,  192,  195,    3,  150,  173,
      194,  195,  173,  194,  195,  150,  173,  194,  195,  150,
      173,  194,  195,  172,  173,  194,  195,  173,  194,  195,
      172,  173,  194,  195,    2,  150,  173,  194,  195,  149,
      194,  195,  149,  194,  195,  149,  194,  195,  147,  149,

      194,  195,  149,  194,  195,  149,  194,  195,  149,  194,
      195,  161,  165,  166,  194,  195,    1,  161,  166,  194,
      195,  162,  192,  195,    3,  161,  165,  166,  194,  195,
      165,  166,  194,  195,  161,  165,  166,  194,  195,  166,
      194,  195,  161,  165,  166,  194,  195,    2,  161,  165,
      166,  194,  195,  158,  160,  194,  195,    1,  160,  194,
      195,  159,  192,  195,    3,  158,  160,  194,  195,  160,
      194,  195,  158,  160,  194,  195,  158,  160,  194,  195,
      158,  160,  194,  195,    2,  158,  160,  194,  195,  169,
      170,  194,  195,    1,  170,  194,  195,    3,  169,  170,

      194,  195,  169,  170,  194,  195,  169,  170,  194,  195,
      169,  170,  194,  195,    2,  169,  170,  194,  195,   71,
      194,  195,    1,   71,  194,  195,   72,  192,  195,    3,
       71,  194,  195,   71,  194,  195,   71,  194,  195,   70,
       71,  194,  195,   71,  194,  195,   70,   71,  194,  195,
       70,   71,  194,  195,    2,   71,  194,  195,   78,  194,
      195,    1,   78,  194,  195,   76,  192,  195,    3,   78,
      194,  195,   78,  194,  195,   78,  194,  195,   74,   78,
      194,  195,   78,  194,  195,   74,   78,  194,  195,    2,
       78,  194,  195,   77,   78,  194,  195,   75,   78,  194,

      195,   75,   78,  194,  195,  186,  194,  195,    1,  186,
      194,  195,    3,  186,  194,  195,  183,  186,  194,  195,
      186,  194,  195,  186,  194,  195,  186,  194,  195,  186,
      194,  195,    2,  186,  194,  195,  187,  194,  195,    1,
      187,  194,  195,    3,  187,  194,  195,  185,  187,  194,
      195,  187,  194,  195,  187,  194,  195,  187,  194,  195,
      187,  194,  195,    2,  187,  194,  195,   66,  194,  195,
       66,  194,  195,   64,  194,  195,    1,   64,  194,  195,
        3,   64,  194,  195,   64,  194,  195,   64,  194,  195,
       64,  194,  195,   64,  194,  195,    2,   64,  194,  195,

       37,  194,  195,    1,   37,  194,  195,   35,  192,  195,
        3,   37,  194,  195,   33,   37,  194,  195,   34,   37,
      194,  195,   29,   37,  194,  195,   30,   37,  194,  195,
       37,  194,  195,   37,  194,  195,   36,   37,  194,  195,
       37,  194,  195,    2,   37,  194,  195,   46,  194,  195,
        1,   46,  194,  195,    3,   46,  194,  195,   42,   46,
      194,  195,   43,   46,  194,  195,   46,  194,  195,   46,
      194,  195,   46,  194,  195,   46,  194,  195,    2,   46,
      194,  195,  133,  194,  195,    1,  133,  194,  195,  132,
      133,  194,  195,    3,  133,  194,  195,  133,  194,  195,

      133,  194,  195,  132,  133,  194,  195,    2,  133,  194,
      195,  136,  137,  194,  195,    1,  136,  137,  194,  195,
      135,  192,  195,    3,  136,  137,  194,  195,  136,  194,
      195,  136,  194,  195,  136,  137,  194,  195,  136,  194,
      195,  136,  137,  194,  195,    2,  136,  137,  194,  195,
      190,  191,  193,    6,    6,    5,    6,    6,  193,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
      193,   97,  190,   95,  191,   88,   88,   88,   88,   88,
      193,   90,   90,   90,  193,   99,   96,   99,  190,   94,
       99,  191,   99,  100,   99,  193, 8216,   25,16408,   26,

       25,16408,   25,  193,16408,   18,   18,  190,   18,  191,
       18,   19,   18,  193,   21,   21,  190,   21,  191,   21,
       22,   21,  193,  105,  190,  191,  193,  103,  104,  104,
      193,  106,  190,  191,  107,  193, 8304, 8303, 8301, 8304,
    16493,16495,16496, 8304,  193,16493,16495,16496,  116,  115,
      116,  114,  118,  118,  113,  118,  193,  176,  177,  119,
      190,  120,  191,  172,  174,  172,  193,   80,   80,   79,
      147,  121,  123,  190,  122,  191,  147,  147,  193,  147,
       38,   39,   38,  191,   38,   38,  193,  150,  152,  150,
      191,  150,  151,  150,  146,  146,  190,  147,  161,  165,

      161,  165,  163,  165,  190,  164,  165,  191,  161,  165,
      161,  165,  193,  158,  155,  157,  190,  156,  158,  191,
      158,  158,  193,  169,  167,  169,  190,  168,  169,  191,
      169,  169,  193,   70,   67,   70,   70,  193,   74,   73,
       74,  193,   75,   75,  193,  182,  190,  181,  191,  184,
       66,   66,  193,   63,   32,  190,   44,  190,   44,  191,
       45,  132,  132,  193,  137,  190,  191,  137,  137,  193,
      190,  191,    4,   62,   62,   62,   62,   62,   54,   62,
       62,   62,   62,   62,   62,   97,   97,  190,   95,   95,
      191,   88,   88,   88,   83,   88,   88,   91,    4,   90,

       96,   99,   96,   96,   99,  190,   94,   99,   94,   94,
       99,  191,    4,   99,   15,   15,   25,16408,   18,  190,
       18,  191,    4,   18,   21,  190,   21,  191,    4,   21,
      190,  191,    4,    4,  105,  190,  191,    4,  117,  177,
      119,  119,  190,  120,  120,  191,  122,  191,    4,  147,
      147,  126,  125,   38,  191,    4,   38,  150,  191,    4,
      150,  143,  147,  145,  144,  165,  190,  165,  191,    4,
      161,  165,    4,  165,  154,  158,  191,    4,  158,  169,
      190,  169,  191,    4,  169,   70,  181,  191,   31,   32,
      190,  139,  139,  190,  138,  138,  191,    4,  137,  189,

    16391,16391,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   97,  189,   88,   84,   88,   88,   88,
       91,   96,   99,  189,   14,   13,   14,   25,16408,   18,
      189,   21,  189,  189,  189,  110,  118,  122,  124,  147,
      126,  125,  147,  145,  144,  165,  189,  169,  189,   70,
       31,16391,    9, 8199,   62,   62,   55,   58,   56,   56,
       62,   62,   62,   62,   62,   62,   62,   62,   85,   88,
       86,   88,   88,   13,   25,16408,  128,   70, 8199,    9,
       62,   62,   59,   51,   50,   62,   62,   62,   62,   57,
       25,16408,  127,  131,  134,  130,   70,    8,    9,   49,

       53,   52,16431,   48,   10,  129,   70,    9, 8239,   69,
       68,    9, 8239,  142,  141,    9,  140,    9,   61,    9,
        9,    9
    } ;

static yyconst flex_int16_t yy_accept[1400] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    6,    9,   11,   14,
       16,   18,   20,   23,   26,   30,   33,   36,   40,   43,
       46,   49,   52,   55,   58,   62,   65,   69,   72,   76,

       79,   82,   86,   90,   94,   98,  102,  106,  110,  114,
      118,  121,  125,  128,  132,  135,  138,  142,  146,  150,
      154,  158,  162,  167,  170,  175,  179,  182,  185,  189,
      193,  198,  202,  207,  212,  216,  220,  224,  227,  231,
      236,  239,  243,  246,  250,  254,  258,  261,  264,  269,
      272,  277,  281,  285,  290,  294,  297,  301,  304,  307,
      310,  312,  315,  319,  322,  326,  329,  332,  335,  337,
      340,  344,  346,  349,  352,  354,  356,  358,  361,  364,
      367,  370,  374,  377,  381,  384,  387,  390,  393,  397,
      403,  409,  411,  414,  417,  420,  422,  425,  427,  430,

      433,  437,  441,  444,  448,  452,  456,  460,  463,  466,
      470,  474,  477,  481,  485,  488,  492,  495,  499,  502,
      505,  508,  512,  516,  521,  525,  529,  534,  538,  542,
      546,  550,  555,  559,  563,  566,  571,  574,  577,  581,
      584,  587,  591,  596,  600,  603,  606,  609,  613,  618,
      621,  626,  629,  633,  637,  641,  646,  650,  655,  658,
      663,  666,  670,  674,  678,  681,  685,  690,  693,  696,
      699,  703,  706,  709,  712,  717,  722,  725,  731,  735,
      740,  743,  748,  754,  758,  762,  765,  770,  773,  777,
      781,  785,  790,  794,  798,  803,  807,  811,  815,  820,

      823,  827,  830,  834,  837,  840,  844,  847,  851,  855,
      859,  862,  866,  869,  873,  876,  879,  883,  886,  890,
      894,  898,  902,  906,  909,  913,  917,  921,  924,  927,
      930,  933,  937,  940,  944,  948,  952,  955,  958,  961,
      964,  968,  971,  974,  977,  981,  985,  988,  991,  994,
      997, 1001, 1004, 1008, 1011, 1015, 1019, 1023, 1027, 1031,
     1034, 1037, 1041, 1044, 1048, 1051, 1055, 1059, 1063, 1067,
     1070, 1073, 1076, 1079, 1083, 1086, 1090, 1094, 1098, 1101,
     1104, 1108, 1112, 1116, 1121, 1124, 1129, 1132, 1135, 1139,
     1142, 1146, 1151, 1152, 1153, 1153, 1154, 1155, 1156, 1157,

     1158, 1159, 1159, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
     1166, 1167, 1168, 1169, 1170, 1172, 1174, 1176, 1177, 1178,
     1179, 1180, 1182, 1183, 1183, 1183, 1184, 1186, 1187, 1190,
     1193, 1194, 1195, 1197, 1197, 1197, 1197, 1198, 1200, 1201,
     1201, 1203, 1206, 1207, 1209, 1211, 1212, 1213, 1215, 1216,
     1218, 1220, 1221, 1222, 1224, 1224, 1225, 1226, 1227, 1227,
     1228, 1228, 1229, 1230, 1232, 1232, 1233, 1234, 1235, 1235,
     1236, 1236, 1237, 1238, 1239, 1240, 1244, 1244, 1249, 1249,
     1250, 1251, 1252, 1253, 1253, 1254, 1254, 1255, 1256, 1258,
     1259, 1259, 1260, 1262, 1264, 1265, 1266, 1266, 1268, 1269,

     1270, 1271, 1272, 1273, 1275, 1277, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1280, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1282, 1283, 1285, 1286, 1288,
     1289, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1298, 1298,
     1298, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1301, 1302,
     1303, 1306, 1309, 1311, 1311, 1311, 1314, 1315, 1316, 1318,
     1321, 1322, 1324, 1325, 1328, 1331, 1332, 1334, 1335, 1336,
     1336, 1337, 1339, 1340, 1341, 1343, 1344, 1346, 1348, 1350,
     1351, 1352, 1354, 1355, 1355, 1355, 1355, 1357, 1359, 1361,
     1362, 1363, 1365, 1366, 1367, 1368, 1369, 1369, 1369, 1371,

     1372, 1373, 1374, 1374, 1374, 1374, 1374, 1375, 1376, 1377,
     1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
     1389, 1390, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1398,
     1399, 1399, 1399, 1401, 1403, 1404, 1407, 1409, 1410, 1413,
     1415, 1416, 1416, 1417, 1417, 1417, 1419, 1421, 1423, 1425,
     1427, 1429, 1431, 1432, 1433, 1434, 1436, 1437, 1438, 1439,
     1439, 1439, 1440, 1440, 1441, 1442, 1444, 1445, 1447, 1449,
     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1452, 1452, 1453, 1454, 1456, 1458, 1460, 1462, 1462, 1463,

     1464, 1464, 1465, 1466, 1468, 1470, 1473, 1475, 1475, 1475,
     1475, 1476, 1478, 1480, 1482, 1484, 1486, 1487, 1489, 1489,
     1490, 1490, 1490, 1492, 1493, 1495, 1496, 1498, 1500, 1500,
     1501, 1501, 1501, 1502, 1502, 1503, 1504, 1505, 1506, 1507,
     1508, 1509, 1510, 1511, 1512, 1513, 1514, 1516, 1517, 1519,
     1520, 1521, 1521, 1522, 1522, 1525, 1526, 1528, 1528, 1528,
     1530, 1532, 1534, 1535, 1536, 1537, 1538, 1539, 1539, 1539,
     1539, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1541,
     1541, 1542, 1543, 1543, 1544, 1544, 1545, 1546, 1548, 1548,

     1548, 1550, 1551, 1551, 1552, 1552, 1552, 1552, 1553, 1553,
     1554, 1554, 1555, 1556, 1557, 1559, 1560, 1561, 1562, 1563,
     1564, 1565, 1566, 1567, 1568, 1569, 1570, 1570, 1571, 1573,
     1574, 1574, 1574, 1575, 1575, 1575, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1580, 1580, 1581, 1581,
     1582, 1583, 1583, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
     1590, 1591, 1591, 1591, 1593, 1593, 1593, 1593, 1594, 1594,

     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1595, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1597, 1598, 1598, 1598,
     1598, 1598, 1599, 1599, 1600, 1600, 1601, 1601, 1602, 1603,
     1604, 1605, 1605, 1605, 1605, 1605, 1605, 1606, 1606, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1608, 1608, 1608, 1608,
     1608, 1609, 1609, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,

     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1611, 1612, 1612, 1612, 1612, 1612, 1613, 1613, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1615,
     1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1616, 1616,
     1616, 1616, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1619, 1619, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1621, 1621, 1621,
     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1622, 1622,
     1622, 1622, 1622, 1622, 1622, 1622, 1622, 1623, 1623, 1623,

     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,

     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,

     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,    1,   15,   16,   17,   18,   19,   20,   19,
       19,   19,   19,   19,   19,   21,   21,   22,    1,   23,
       24,   25,   26,   27,   28,   28,   29,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       30,   31,   32,    1,   28,   33,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   43,   50,   51,   52,   53,   54,   43,   55,
       56,   43,   57,   10,   58,   59,    1,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,   10,    8,   11,    1,    8,   12,   13,   14,   14,
       14,    1,   15,    1,    1,    1,   16,   17,   17,    1,
       18,    1,   19,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,    1,    1,   19,   17,
       17,    1
    } ;

static yyconst flex_int16_t yy_base[1531] =
    {   0,
        0,    4,    9,   71,  133,    0,  195,    0,  256,  266,
      276,  283,  345,    0,  406,  410,  416,  444,  456,  482,
      544,    0,  605,  609,  644,    0,  705,    0,  767,    0,
      615,  828,  833,  837,  843,  848,  909,  970,  882,  915,
     1032,    0,  426,  931,  920, 1093, 1099, 1104,  961, 1110,
     1172,    0, 1234,    0, 1284,    0, 1344, 1348, 1354, 1382,
     1417,    0, 1386, 1477, 1538, 1599, 1660, 1721, 1783,    0,
        0,    0, 1844, 1905, 4040, 6533, 6533, 6533, 6533,    1,
     4012, 3973, 6533, 6533, 6533, 1967, 6533, 6533, 6533,    2,
     3999,    4,    0, 3953, 6533, 6533, 6533, 6533, 6533,    3,

     3986,    0, 3961, 3958,    0,    2, 3941, 3936, 3918, 6533,
     6533, 6533, 6533, 6533,   20, 3951,    0,    5, 3931, 3906,
     6533,    0,    0, 6533,    0, 6533, 3933,   22, 3931, 3892,
        0,    0,    0,    0, 6533,   25, 3925,    0, 3889,    0,
     6533, 6533, 6533, 6533, 6533, 3917,   28, 3920,   51,   24,
      461, 6533, 6533,  641, 6533,    0,    0, 6533,   39, 3915,
        0, 3876,    0,    0,    0, 6533,   46, 3909,    0, 3873,
        0,   44,  268,  272,  297,  298,  431,  288,    0,  419,
     3920, 3915, 6533, 3913,  258,   33,   63,  260, 3912,  489,
      861,  256, 3911, 3906, 3899, 3877,   41, 3889,  283, 6533,

     6533,  288, 6533, 6533, 6533, 3883, 6533,  285, 3863, 6533,
        0,  261, 3828, 6533, 6533, 6533, 6533, 6533,  292, 3856,
     3820, 6533, 6533, 6533,  313, 6533, 6533, 6533,  294, 3846,
     3811, 6533,    0, 6533, 6533,    0, 3849,  311, 3823, 2003,
     6533, 3775,    0,  436,  480, 3800, 3765,    0,    0, 6533,
        0, 3805,  312, 3793, 3752,    0, 3776, 3775, 6533, 3771,
     3777,  412,  305,    0,  492, 3733, 3756, 3767,  321,  294,
      615,  898, 3750, 3711,  407,    0, 6533,  417,  462,  486,
      483,  842,  497,    0, 6533, 6533,    0, 3747,  508, 3737,
     3702,    0,    0, 6533,    0,  510, 3734, 3698,    0, 6533,

     6533, 6533, 6533,  511, 3727,    0,  336, 3710, 3687, 6533,
     6533, 6533, 6533, 6533,  513, 3718,    0, 3739, 3672, 6533,
     6533,    0, 3671, 6533, 6533, 6533, 6533,  516, 3703,    0,
     3666, 6533, 6533, 6533, 6533, 6533,  518, 3698,    0, 3655,
     6533,    0, 3645, 6533, 6533, 6533,  519, 3672,  447, 3629,
     6533, 6533, 6533, 6533, 6533, 6533, 3657, 6533, 6533,  524,
     3656, 6533, 3613, 6533, 6533, 6533, 6533, 6533, 6533,  594,
     3640,    0, 3602, 6533, 6533, 6533,    0, 6533,  607, 3634,
     3599, 6533,    0,    0, 6533,    0, 6533,  608, 3630,  601,
     3595,    0, 3629, 3623,  993, 3568, 6533, 2058, 6533,  630,

        0,  635,  286,  442,    0, 3593, 3586,  573, 3587,  977,
     3571, 3574, 3567, 3563, 3535, 3579, 3566,    0,  592, 3545,
     1104, 3506,    0, 3550,  521, 1121, 3496,    0,  923,  849,
     1292, 6533, 3495, 3542,  641,  867, 6533,  873, 6533, 3548,
     1422, 1297,    0, 3526, 3521, 1417, 6533, 3477,    0, 3520,
     3514, 1474, 6533, 3464,  650, 6533,  868,  960, 2115,  890,
      831, 6533,  837, 1093, 3509, 6533,  419,  612, 2137, 6533,
     3502,  858,  949, 6533, 6533,  988, 3496, 1364,  855, 3489,
     3487, 3473, 3471, 3451,  990, 3443,  991, 6533, 1360,  634,
     3447, 3451,  328,  885,    0, 6533, 3448, 3390, 6533,  880,

     6533,    0, 6533,  651, 3427, 1494, 2127, 3396, 3394, 3394,
     3382, 3391, 3390, 3366, 3369, 3356, 3337, 1340, 1378, 3363,
     3335,  953, 3360, 3321,    0, 6533, 3361, 1509, 3317, 3332,
     3331, 6533,  472, 2177, 6533,  924, 6533, 3344, 3304, 1091,
     1521, 1527, 3316, 3289, 1338, 3308, 3270,  930,    0,    0,
     3313, 3306, 2207,  473, 3266, 1376,    0, 1007, 3295, 3286,
     1560, 3239,    0, 3280, 3275, 1616, 3231,    0, 6533, 3286,
     3249, 3226,    0, 6533, 3218,    0, 3217, 3258, 3252, 6533,
        0, 3208, 6533, 3263, 3250,  683, 3240, 3226, 3215, 6533,
        0, 3172,    0, 1007, 1120, 1631, 3184, 3166, 3152, 3185,

     6533, 6533, 1128,  894, 1140, 3189, 3156, 3148, 3149, 3140,
     3135, 6533, 3130, 3130, 3117, 3106, 3110, 3105,    0, 3117,
        0,    0, 3094, 3094, 3086, 6533, 3079, 3078, 3103, 6533,
     3097, 1137,    0,    0,    0, 1400,  850,    0,  995,    0,
     6533, 3096, 3081, 1139, 1543, 1558, 3072,    0,    0, 3061,
        0,    0, 1396, 1122, 1335, 6533, 1117, 3066, 3064,  956,
     1352, 6533, 3048, 3052, 6533, 3032, 6533, 6533, 3027,    0,
     2987, 2983, 2982, 1392, 2976, 2992, 2991, 2961, 2973, 2963,
      983, 1346, 2971, 2956, 2948, 2944, 2945, 2924, 2918, 1554,
     1493, 2921, 2894,    0,    0, 2920, 2918, 2907, 6533, 1555,

     1520, 2905, 2871, 2910,    0, 1473,    0, 2874, 2857, 1159,
     6533,    0,    0, 2878,    0,    0, 2853, 6533, 2882, 6533,
     2881, 1482, 2872, 6533, 2870, 6533, 6533,    0, 2846, 6533,
     1015, 2869, 1616, 2867, 1647, 2841, 2825, 1525, 2232, 2828,
     2818, 2815, 2801, 2797, 2802, 2808,    0, 1586, 1447, 2796,
     2795, 2819, 6533, 1571, 1574, 6533, 6533, 1596, 1590, 1677,
        0,    0, 1469, 2819, 6533, 6533, 2800, 1467, 1477, 2779,
     6533, 2768, 2761, 2760, 2767, 2741, 2741, 2747, 2746, 2746,
     1165, 2736, 2726, 2730, 2711, 2710, 2714, 2700, 1594, 1450,
     2713, 2685, 1638, 1621, 1598, 2704, 2677,    0, 2683, 2691,

        0, 2678, 2713, 6533, 1657, 2686, 2701, 1692, 1696, 1707,
     1712, 6533, 2676, 2673, 6533, 6533, 1533, 2666, 2294, 1606,
     2658, 2644, 2654, 2655, 2681, 6533, 1630, 2640,    0, 1730,
     2666, 2665, 6533, 2655, 1751, 1848, 2627, 2624, 2625, 1703,
     2622, 2609, 2610, 2594, 2593, 2604, 2590, 1851, 1740, 2585,
     1754, 2582, 2581, 2567, 2574, 2569, 2570, 2556, 2549, 2542,
     2537, 2550, 2548, 2529, 2532, 2523, 1757, 2513, 2523, 2519,
     2476, 1632, 1860, 1863, 1160, 1681, 1876, 1896, 1899, 2483,
     2516, 1645, 2473, 6533, 1728, 6533, 1734, 1854, 2472, 2501,
     2496, 2459, 1762, 1884, 1889, 2492, 2442, 1767, 2441, 2436,

     2416, 2419, 2407, 2418, 2404, 2391, 1772, 6533, 1775, 2399,
     2399, 2393, 2391, 2391, 2389, 2372, 2371, 2378, 1594, 2366,
     2358, 2362, 2369, 2353, 2352, 1909, 2355, 2344, 2154, 2354,
     1303, 6533, 2357, 2360, 2365, 2383, 1866, 1738, 6533, 1919,
     6533, 1436, 1922, 1935, 2368, 2352, 6533, 2320, 2374, 2326,
     2319, 2182, 2180, 2182, 2181, 2170, 2176, 2156, 1940, 2166,
     2170, 2161, 2150, 2136, 2135, 2142, 2124, 2141, 2140, 2129,
     2118, 2104, 2099, 2107, 2088, 1871, 2098, 2380, 2385, 2391,
     2396, 2401,    0, 2083, 1945, 2423, 2122, 1998, 1955, 1998,
     1996, 1986, 1916, 1881, 1879, 1887, 1860, 1849,    0, 1834,

     1841, 1838, 1811, 1799, 1726, 1726, 1721, 1696, 1677, 1912,
     6533,    0, 2416, 2428, 2440, 2452, 2456,    0, 1684, 2033,
     2460, 2472, 1671,    0, 1657, 1664, 1657, 1655, 6533, 1642,
     1642, 1623, 1611, 1613, 1608, 1571, 1522, 6533, 2478, 2483,
     2489, 2498, 2503, 1521, 2120, 2511, 2141, 1497, 6533, 1460,
     1466, 1444, 1393, 1385, 1363, 1346, 1354, 1333, 2523, 2528,
     2534, 2539, 2544, 6533, 2166, 2560, 2465, 1324, 1305, 1299,
     1243, 1097,  979, 2549, 2570, 2554, 2583, 2590, 2182, 2595,
     2574,  883,  879,  612, 2610, 2615, 2621, 2631, 2641, 2200,
     2652, 2605,  617, 2670, 2677, 2646, 2682, 2690, 2212, 2703,

     2666,  479, 2713, 2716, 2728, 2738, 2697, 2752, 2762, 2748,
     2772, 2775, 2758, 2785, 2789, 2795, 2799, 2805, 2817, 2821,
     2824, 2834, 2837, 2851, 2840, 2856, 2866, 2861, 2872, 2882,
     2895, 2898, 2902, 2908, 2912, 2922, 2916, 2928, 2938, 2932,
     2943, 2957, 2953, 2963, 2973, 2967, 2978, 2989, 2983, 2994,
     3000, 3012, 3015, 3029, 3018, 3039, 3049, 3034, 3055, 3059,
     3044, 3069, 3073, 3079, 3084, 3090, 3095, 3100, 3106, 3116,
     3119, 3122, 3134, 3137, 3141, 3151, 3154, 3157, 3167, 3171,
     3177, 3182, 3189, 3192, 3202, 3206, 3216, 3212, 3226, 3238,
     3222, 3232, 3248, 3243, 3253, 3259, 3271, 3277, 3280, 3293,

     3298, 3308, 3303, 3314, 3318, 3328, 3331, 3335, 3341, 3349,
     3352, 3363, 3366, 3369, 3379, 3383, 3396, 3386, 3401, 3407,
     3412, 3418, 3428, 3424, 3434, 3444, 3454, 3458, 3468, 3462,
     3474, 3484, 3479, 3490, 3500, 3494, 3505, 3511, 3517, 3523,
     3526, 3539, 3542, 3555, 3545, 3560, 3566, 3572, 3576, 3582,
     3587, 3594, 3604, 3600, 3610, 3614, 3627, 3630, 3633, 3643,
     3646, 3660, 3649, 3665, 3671, 3676, 3682, 3692, 3688, 3698,
     3704, 3709, 3715, 3718, 3731, 3734, 3747, 3737, 3752, 3764,
     3769, 3774, 3777, 3787, 3793, 3796, 3806, 3810, 3813, 3824,
     3827, 3833, 3838, 3843, 3847, 3853, 3857, 3861, 3871, 3874,

     3880, 3893,  404, 3896, 3902, 3908, 3918, 3922, 3927, 3935,
     3940, 3951, 3957, 3964, 3969, 3977, 3982, 3985, 3990, 3995,
      262, 3998, 4001, 4006, 4012, 4015, 4019, 4024, 4027, 4032,
     4040, 4045, 4056, 4061, 4070, 4074, 4082, 4087, 4090, 4095,
     4100, 4103, 4106, 4111, 4116, 4119, 4125, 4129, 4132, 4137,
     4145, 4150, 4161, 4166, 4174, 4180, 4187, 4192, 4195, 4200,
     4205, 4208, 4211, 4216, 4221, 4224, 4229, 4235, 4238, 4242,
     4250, 4255, 4266, 4271, 4279, 4284, 4293, 4297, 4300, 4305,
     4310, 4313, 4316, 4321, 4326, 4329, 4334, 4339, 4342, 4348,
     4355, 4360, 4371, 4376, 4384, 4389, 4397, 6533, 4454, 4473,

     4492, 4511, 4530, 4549, 4568, 4587, 4606, 4625, 4644, 4663,
     4682, 4701, 4720, 4739, 4758, 4777, 4796, 4815,  981, 1085,
     1297, 4834, 4853, 4872, 4891, 4910, 4927, 4944, 4963, 4982,
     5001, 5020, 5037, 5054, 5071, 5087, 1560, 5104, 5123, 5140,
     5159, 5178, 5197, 5216, 5235, 5254, 1649, 1721, 1734, 5273,
     1913, 5292, 5311, 5328, 5345, 1937, 1938, 5364, 5383, 1947,
     5402, 5421, 5440, 5459, 5478, 5497, 5516, 5533, 5550, 5569,
     5588, 5605, 5622, 5639, 5655, 1948, 5672, 5691, 5708, 5727,
     5746, 5765, 5784, 5803, 5822, 2018, 2029, 2033, 2037, 5841,
     5860, 5877, 5894, 5913, 5932, 2038, 5951, 5970, 2120, 5989,

     6008, 6027, 6046, 6065, 6084, 6103, 6120, 6137, 6156, 6175,
     6194, 6213, 6232, 6251, 6270, 6289, 6308, 2137, 6327, 6346,
     6365, 6384, 6403, 6422, 6439, 6456, 2182, 6475, 6494, 6513
    } ;

static yyconst flex_int16_t yy_def[1531] =
    {   0,
     1399, 1399, 1399, 1398, 1398,    5, 1398,    7, 1400, 1400,
     1401, 1401, 1398,   13, 1402, 1402, 1403, 1403, 1404, 1404,
     1398,   21, 1405, 1405,   21,   25, 1398,   27, 1398,   29,
     1406, 1407, 1399, 1399, 1399, 1399, 1408, 1408, 1409, 1409,
     1398,   41,   38,   38, 1410, 1410, 1411, 1411, 1412, 1412,
     1398,   51, 1398,   53,   53,   55, 1413, 1413, 1414, 1414,
       25,   61, 1415, 1415, 1416, 1416, 1417, 1417, 1398,   69,
       69,   69, 1418, 1418, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1419, 1419, 1419, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1421, 1421, 1421, 1421,
     1398, 1422, 1422, 1398, 1422, 1398, 1423, 1398, 1422, 1422,
     1422, 1424, 1424, 1424, 1398, 1424, 1424, 1425, 1424, 1424,
     1398, 1398, 1398, 1398, 1398, 1426, 1398, 1398, 1427, 1398,
     1427, 1398, 1398, 1427, 1398, 1428, 1428, 1398, 1428, 1428,
     1429, 1428, 1428, 1430, 1430, 1398, 1430, 1430, 1431, 1430,
     1430, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1433, 1433,
     1434, 1434, 1398, 1434, 1434, 1434, 1398, 1434, 1434, 1435,
     1435, 1398, 1398, 1398, 1398, 1398, 1436, 1398, 1436, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1437, 1398, 1437, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1438, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1439, 1398, 1398, 1439, 1398, 1398, 1439, 1398,
     1398, 1439, 1439, 1439, 1398, 1398, 1398, 1440, 1440, 1398,
     1440, 1398, 1440, 1440, 1440, 1440, 1441, 1441, 1398, 1441,
     1398, 1441, 1441, 1437, 1441, 1437, 1441, 1398, 1398, 1398,
     1439, 1398, 1398, 1398, 1442, 1443, 1398, 1442, 1444, 1442,
     1398, 1442, 1442, 1445, 1398, 1398, 1445, 1398, 1445, 1445,
     1445, 1445, 1446, 1398, 1446, 1446, 1446, 1446, 1446, 1398,

     1398, 1398, 1398, 1398, 1398, 1447, 1398, 1447, 1447, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1448, 1398, 1448, 1398,
     1398, 1449, 1449, 1398, 1398, 1398, 1398, 1398, 1398, 1450,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1450, 1398,
     1398, 1451, 1451, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1452, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1453, 1398, 1398, 1398, 1398, 1454, 1398, 1398, 1398,
     1454, 1398, 1455, 1455, 1398, 1455, 1398, 1398, 1455, 1398,
     1455, 1455, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1456,

     1456, 1456, 1456, 1456, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1458, 1459, 1460, 1460, 1460,
     1460, 1460, 1461, 1462, 1463, 1461, 1461, 1464, 1465, 1466,
     1464, 1398, 1464, 1398, 1467, 1398, 1398, 1468, 1398, 1398,
     1468, 1468, 1469, 1469, 1469, 1469, 1398, 1469, 1470, 1470,
     1470, 1470, 1398, 1470, 1471, 1398, 1471, 1471, 1471, 1471,
     1398, 1398, 1472, 1472, 1473, 1398, 1473, 1473, 1473, 1398,
     1398, 1473, 1398, 1398, 1398, 1474, 1398, 1474, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1475, 1398, 1475, 1398,
     1398, 1398, 1398, 1398, 1476, 1398, 1398, 1476, 1398, 1477,

     1398, 1478, 1398, 1398, 1398, 1478, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1478, 1478, 1398, 1398,
     1398, 1398, 1398, 1398, 1479, 1398, 1479, 1479, 1479, 1480,
     1480, 1398, 1480, 1480, 1398, 1480, 1398, 1398, 1398, 1398,
     1478, 1398, 1398, 1398, 1398, 1398, 1398, 1481, 1482, 1483,
     1483, 1483, 1481, 1398, 1398, 1481, 1484, 1398, 1398, 1484,
     1484, 1484, 1485, 1485, 1485, 1485, 1485, 1486, 1398, 1398,
     1486, 1486, 1487, 1398, 1487, 1488, 1488, 1398, 1398, 1398,
     1489, 1489, 1398, 1398, 1490, 1491, 1398, 1398, 1398, 1398,
     1492, 1492, 1493, 1398, 1398, 1493, 1398, 1398, 1493, 1398,

     1398, 1398, 1398, 1494, 1398, 1495, 1496, 1496, 1496, 1496,
     1496, 1398, 1496, 1496, 1496, 1496, 1496, 1496, 1497, 1497,
     1498, 1498, 1499, 1499, 1499, 1398, 1499, 1499, 1500, 1398,
     1398, 1398, 1501, 1502, 1503, 1502, 1504, 1505, 1504, 1506,
     1398, 1398, 1398, 1398, 1398, 1507, 1508, 1508, 1508, 1509,
     1509, 1509, 1510, 1510, 1510, 1398, 1511, 1511, 1511, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1478,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1478,
     1398, 1398, 1398, 1512, 1512, 1513, 1513, 1398, 1398, 1478,

     1398, 1398, 1398, 1514, 1514, 1515, 1514, 1398, 1398, 1398,
     1398, 1516, 1516, 1517, 1517, 1517, 1518, 1398, 1519, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1493, 1398, 1398,
     1494, 1520, 1398, 1495, 1398, 1496, 1496, 1496, 1398, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1497, 1499, 1499, 1499,
     1499, 1521, 1398, 1398, 1502, 1398, 1398, 1398, 1398, 1507,
     1508, 1509, 1510, 1511, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1478, 1398,
     1398, 1398, 1398, 1478, 1398, 1398, 1398, 1514, 1398, 1398,

     1517, 1518, 1522, 1398, 1398, 1398, 1520, 1523, 1398, 1398,
     1398, 1398, 1496, 1496, 1398, 1398, 1398, 1496, 1398, 1496,
     1496, 1496, 1496, 1496, 1496, 1398, 1398, 1499, 1499, 1499,
     1398, 1398, 1398, 1398, 1398, 1507, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1518, 1398, 1398,
     1398, 1523, 1523, 1523, 1398, 1523, 1398, 1398, 1398, 1496,
     1496, 1398, 1398, 1398, 1398, 1398, 1496, 1496, 1496, 1496,
     1398, 1398, 1398, 1507, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1524, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1518, 1398, 1523, 1523,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1525,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1526, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1524, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1518, 1398, 1523, 1523, 1398,
     1398, 1398, 1527, 1398, 1398, 1398, 1398, 1526, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1528, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1529, 1523, 1523, 1398, 1398, 1398, 1527, 1398, 1398,
     1398, 1398, 1398, 1530, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1523, 1523,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1523, 1523,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1523, 1523, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1523, 1523, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1523, 1523, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1523, 1523, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398,    0, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398
    } ;

static yyconst flex_int16_t yy_nxt[6596] =
    {   0,
     1398,   77,  461,   78,   79,   77,  635,   78,   79, 1398,
       77,  462,   78,   79,  393,  393,  393,   80,  394,  394,
      394,   80,  402,  402,  402,   81,   80,  439,  440,   81,
      635,  402,  402,  416,   81,  416,  466,  417,  429,  417,
      410,  393,  430,  485,  408,  394,  409,  411,  412,  419,
      456,  420,  444,  436,  436,  436,  445,  486,  469,  450,
       82,   83,  437,  451,   82,   83,  470,  471,  456,   82,
       83,   84,   85,   86,   87,   88,   84,   84,   89,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   90,   84,
       84,   84,   84,   84,   84,   84,   91,   84,   92,   92,

       84,   84,   84,   84,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   84,   84,   84,
       93,   94,   95,   96,   97,   96,   98,   99,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      100,   96,   96,   96,   96,   96,   96,   96,  101,   96,
      102,  102,   96,   96,   96,   96,  102,  102,  103,  104,
      105,  102,  102,  102,  106,  102,  102,  102,  102,  102,
      102,  107,  102,  102,  102,  108,  102,  102,  102,   96,
       96,   96,  102,  109,  110,  111,  112,  111,  113,  114,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  115,  111,  111,  111,  111,  111,  111,  111,
      116,  111,  117,  117,  111,  111,  111,  111,  117,  117,
      117,  117,  118,  117,  117,  117,  119,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  111,  111,  111,  117,  120,  121,  123,  479,  124,
      125,  466,  126,  466,  496,  497,  127,  123,  480,  124,
      125,  467,  126,  128,  456,  468,  127,  133,  456,   78,
      134,  129,  135,  128,  133,  485,   78,  134,  605,  135,
      490,  129,  456,  136,  456,  491,  456,  606,  493,  486,

      136,  137,  494,  456,  456,  416,  138,  416,  137,  417,
      457,  417,  456,  138,  458,  500,  130,  131,  947,  472,
      501,  456,  456,  459,  504,  393,  130,  131,  505,  527,
      534,  539,  540,  665,  538,  531,  139,  140,  394,  569,
      570,  666,  489,  139,  140,  141,  142,  141,  143,  144,
      141,  145,  141,  141,  141,  146,  141,  141,  141,  141,
      141,  141,  147,  141,  141,  141,  141,  141,  141,  141,
      148,  141,  149,  149,  141,  150,  141,  141,  149,  149,
      149,  149,  151,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  152,  153,  141,  149,  154,  155,  157,  549,   78,
       79,  157,  158,   78,   79,  437,  158,  165,  549,   78,
       79,  461,  466,  159,  550,  393,  166,  159,  233,  533,
      462,  160,  657,  167,  550,  160,  161,  456,  518,  268,
      161,  168,  531,  269,  605,  165,  169,   78,   79,  519,
      583,  584,  270,  606,  166,  456,  270,  173,  241,   78,
      174,  167,   76,  436,  436,  436,  162,  163,  520,  168,
      162,  163,  437,  175,  169,  551,  170,  171,  464,  552,
       76,  176,  522,  173,  241,   78,  174,  549,   76,  696,
      460,  473,  474,  519,  521,  535,  536,  503,  549,  175,

      475,  404,  531,  550,  170,  171,   76,  176,  708,  554,
      673,  553,  520,  554,  550,  441,  177,  178,  555,  477,
      510,  559,  531,  564,  393,  560,  393,  565,  394,  578,
      394,  393,  393,  579,  699,  394,  394,  587,  521,  632,
      632,  394,  177,  178,   76,   77,   76,   78,   79,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   80,   76,   76,   76,   76,   76,   76,   76,   81,
       76,  179,  179,   76,   76,   76,   76,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

       76,   76,   76,  179,  180,   83,  182,  588,  183,  184,
      182,  589,  183,  184,  609,  466,  216,  541,  217,  218,
      393,  594,  185,  610,  394,  595,  185,  597,  542,  658,
      186,  597,  219,  623,  186,  187,  490,  603,  598,  187,
      220,  491,  624,  436,  436,  436,  604,  543,  402,  402,
      402,  643,  437,  402,  402,  402,  456,  402,  402,  644,
      644, 1102,  402,  402,  600,  188,  189,  699,  503,  188,
      189,  190,  190,  544,  456,  221,  222,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,

      442,  722,  722,  190,  191,   76,   77,  192,   78,   79,
       76,   76,   76,   76,   76,   76,  193,  194,   76,  195,
       76,  196,   80,   76,   76,   76,   76,   76,   76,   76,
       81,   76,  197,  197,   76,  198,   76,   76,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,   76,   76,   76,  197,  199,   83,  200,  201,  202,
      203,  204,  200,  205,  206,  200,  200,  207,  200,  200,
      200,  200,  200,  200,  208,  200,  200,  200,  200,  200,
      200,  200,  209,  210,  211,  211,  200,  212,  200,  200,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  200,  200,  200,  211,  213,  214,  224,
      225,  226,  227,  461,   77,  228,   78,   79,   77,  461,
       78,   79,  462,  549,   77,  229,   78,   79,  462,   77,
       80,   78,   79,  230,   80,  638,  638,  479,   81,  550,
       80,  466,   81,  473,  474,   80,  639,  480,   81,  645,
      645,  645,  475,   81,  456,  436,  436,  436,  437,  638,
      638,  653,  500,  249,  437,  250,  251,  501,  231,  232,
      667,  477,  456,   82,   83,  252,  456,   82,   83,  253,

      545,  556,  668,   82,   83,  732,  733,  254,   82,   83,
      234,  542,  235,  236,  456,  537,  249,  472,  250,  251,
      478,  276,  237,  277,  278, 1093,  238,  535,  252,  635,
      543,  549,  253,  271,  239,  240,  636,  279,  840,  240,
      254,  241,  255,  256,  272,  280,  281,  550,  269,  460,
      281,  473,  474,  635,  531,  691,  544,  270,  765,  765,
      765,  270,  294,  273,  277,  295,  456,  241,  660,  242,
      243,  234,  244,  235,  236,  255,  256,  654,  296,  612,
      282,  283,  612,  245,  456,  520,  297,  238,  612,  274,
      473,  474,  485,  485,  403,  239,  240,  403,  602,  475,

      240,  638,  246,  602,  602,  602,  486,  486,  602,  710,
      602,  521,  724,  613,  711,  602,  602,  602,  477,  778,
      725,  298,  299,  614,  699,  638,  732,  733,  247,  779,
      242,  243,  257,  258,  257,  259,  260,  257,  257,  257,
      257,  257,  257,  257,  257,  261,  257,  257,  257,  262,
      257,  257,  257,  257,  257,  257,  257,  263,  257,  264,
      264,  257,  265,  257,  257,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  257,  257,
      257,  264,  266,  267,  276,  461,  277,  278,  405,  699,

      285,  405,  286,  287,  462,  285,  626,  286,  287,  626,
      279,  294,  288,  277,  295,  626,  289,  288,  280,  281,
      466,  289,  699,  281,  290,  726,  633,  296,  456,  290,
      603,  602,  633,  633,  764,  297,  633,  727,  602,  604,
      627, 1084,  605,  633,  633,  633,  456,  753,  699,  757,
      628,  606,  464,  282,  283,  754,  754,  758,  758,  291,
      292,  710,  931,  932,  291,  292,  711,  851,  851,  851,
      298,  299,  300,  301,  300,  302,  303,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  304,
      300,  300,  300,  300,  300,  300,  300,  305,  300,  306,

      306,  300,  307,  300,  300,  306,  306,  306,  308,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  300,  300,
      300,  306,  309,  310,  311,  312,  311,  313,  314,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  315,  311,  311,  311,  311,  311,  311,  311,  316,
      311,  317,  317,  311,  318,  311,  311,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      311,  311,  311,  317,  319,  320,  321,  640,  699,  436,

      436,  436,  640,  640,  640,  931,  932,  640,  437,  640,
      418,  322,  322,  418,  640,  640,  640,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      701,  456,  690,  322,  323,  325, 1083,   78,  326,  325,
      327,   78,  326,  519,  327,  334,  442,   78,  335,  456,
      781,  328,  485,  475,  336,  328,  473,  474, 1082,  329,
      543,  337,  520,  329,  330,  475,  486,  549,  330,  338,
      522,  780,  477,  334,  339,   78,  335,  345,  699,   98,
      346,  519,  336,  550,  477, 1073,  544,  781,  521,  337,

      771,  699,  456,  347,  331,  332,  635,  338,  331,  332,
      520,  348,  339,  763,  340,  341,  349,  755,  699,  489,
      456,  771,  649,  478,  436,  436,  436,  649,  649,  649,
      635, 1072,  649,  437,  649,  556,  521, 1071,  942,  649,
      649,  649,  340,  341,  342,  342,  350,  351,  771,  827,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  646,  549,  456,  342,  343,  345,  652,
       98,  346,  520,  984,  602,  652,  652, 1070,  828,  652,
      550,  652,  804,  456,  347,  790,  652,  652,  652,  670,

      805,  805,  348,  837,  670,  670,  670,  349,  521,  670,
     1069,  602,  839,  838,  695,  840,  670,  670,  670,  695,
      695,  695,  795,  700,  695,  520,  695,  815,  840,  545,
      815,  695,  695,  695,  542,  882,  815,  350,  351,  353,
      542,  354,  355, 1068,  356,  759,  759,  759,  357,  358,
      359,  521,  543,  543,  437,  360,  789,  794, 1064,  543,
      436,  436,  436,  361,  362,  713, 1058,  519,  542,  437,
      713,  713,  713,  495,  883,  713,  495,  713,  544,  544,
      635,  630,  713,  713,  713,  544,  520,  543,  826,  832,
      832,  826,  835,  835,  835,  760,  789,  826,  363,  364,

      353,  437,  354,  355,  635,  356,  833,  519,  885,  357,
      358,  359,  521,  544,  834,  834,  360,  886,  809,  810,
      811,  716, 1057,  794,  361,  362,  716,  716,  716,  969,
      543,  716,  827,  716,  542, 1398,  602,  812,  716,  716,
      716,  728,  728,  728,  875,  699,  728,  882,  602,  811,
      811,  811, 1056,  728,  728,  728,  544, 1055, 1054,  363,
      364,  366,  568,   78,  367,  568,  368,  720,  812, 1053,
      369,  892,  812,  859,  860,  870,  870,  370,  861,  436,
      436,  436,  862,  863, 1398,  371,  883,  864,  437, 1052,
      372,  865,  866,  875,  873,  810,  874,  781,  877,  878,

      879, 1051,  840,  812,  875,  898,  898,  898, 1050,  879,
      879,  879,  840,  876,  879,  879,  879,  812, 1048, 1044,
      373,  374,  366, 1037,   78,  367,  836,  368,  812, 1036,
      885,  369,  626,  812,  573,  626,  938,  573,  370,  886,
      938,  626,  907,  908,  909,  939,  371,  576,  876,  939,
      576,  372,  812,  893,  893,  893,  851,  851,  851,  926,
      908,  909,  437,  812,  944,  944,  944, 1035,  812,  898,
      898,  898, 1034,  437,  907,  908,  909,  909,  908,  909,
     1033,  373,  374,  375,  376,  377,   78,  378,  377,  375,
      375,  375,  377,  375,  377,  377,  375,  375,  377,  377,

      379,  377,  377,  377,  375,  375,  375,  375,  380,  375,
      377,  377,  375,  375,  375,  375,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  375,
      375,  375,  377,  381,  382,  384, 1032,  385,  386,  387,
      436,  436,  436,  851,  851,  851,  940,  387, 1031,  437,
      941,  388,  929,  878,  930,  930,  879,  930,  815,  389,
      390,  815,  875, 1010,  390,  875,  941,  815,  933,  934,
      935,  876, 1011,  781,  876, 1030,  945,  945,  945,  781,
      946,  898,  898,  898,  894,  437, 1028,  812,  935,  935,

      935,  935,  935,  935,  391,  392,  384,  906,  385,  386,
      387,  926,  908,  909, 1010,  840,  876,  812,  387,  876,
      812,  940,  388, 1011,  826,  941,  581,  826, 1027,  581,
      389,  390,  812,  826,  840,  390,  840,  985,  985,  985,
      947,  941,  851,  851,  851,  948,  437, 1020, 1020, 1020,
      403,  405,  812,  403,  405,  812,  437,  898,  898,  898,
      418,  495, 1026,  418,  495,  391,  392,  397,  397,  398,
      397,  397,  397,  397,  399,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  400,  400,  397,  397,  397,  397,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  397,  397,  397,  401,  401,  397,  507,
     1025,  568, 1024,  507,  568, 1045, 1045, 1045,  508,  509,
      510, 1023,  573,  511,  437,  573,  576,  512,  513,  576,
      581,  405,  514,  581,  405,  989,  515,  516,  397,  397,
      398,  397,  397,  397,  397,  399,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  400,  400,  397,  397,  397,
      397,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  397,  397,  397,  401,  401,  397,
      655,  456, 1065, 1065, 1065,  655,  655,  655, 1022, 1019,
      655,  437,  655,  418, 1012, 1009,  418,  655,  655,  656,
      466, 1008,  659, 1067, 1067, 1067, 1007,  659,  659,  659,
      568, 1006,  659,  568,  659, 1005,  978,  934,  979,  659,
      659,  659,  671,  672,  673,  674,  875,  675, 1079, 1079,
     1079,  676,  677, 1004, 1003,  876,  678,  437,  699,  781,
      679,  680,  697, 1002, 1090, 1090, 1090,  697,  697,  697,
      781,  781,  697,  437,  697, 1018, 1001,  947, 1018,  697,

      697,  697, 1099, 1099, 1099, 1000,  999,  531,  549,  998,
      876,  437,  706,  959, 1105, 1105, 1105,  706,  706,  706,
      997,  996,  706,  437,  707,  995,  994,  993,  992,  706,
      706,  706,  816,  816,  817,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      405,  405,  405,  816,  816,  816,  816,  816,  816,  405,
      405,  816,  816,  816,  816,  405,  405,  405,  405,  405,
      405,  405,  405,  818,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  816,  816,
      816,  405,  405,  816,  884,  884,  884,  884,  884,  884,

      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  405,  405,  405,  884,  884,  884,  884,  884,
      884,  405,  405,  884,  884,  884,  884,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      884,  884,  884,  405,  405,  884,  979,  935,  979,  980,
      981,  982,  982,  982,  982,  991,  875,  982,  982,  982,
      986,  986,  986,  990,  946,  876,  949,  989,  812,  437,
      987,  812, 1013,  981, 1014,  936,  812, 1014,  982, 1014,
      977,  976,  875, 1015, 1016, 1017,  975,  875, 1017, 1017,

     1017,  876,  974, 1017, 1017, 1017,  876,  973,  972,  971,
      876,  970,  812,  812,  968,  967,  812,  812, 1039, 1016,
     1040,  812,  812,  966,  947, 1021, 1021, 1021,  875,  946,
     1040, 1017, 1040,  965,  437,  964,  876,  876,  963,  962,
      875,  876, 1041, 1042, 1043,  961,  960,  812,  959,  876,
      957,  956,  812,  955, 1043, 1043, 1043,  812, 1043, 1043,
     1043,  812, 1046, 1046, 1046,  954,  946, 1081, 1081, 1081,
      953,  437,  876,  812, 1047, 1047, 1047,  812,  946,  947,
     1059, 1042, 1060,  952,  876, 1060, 1043, 1060,  951,  950,
      875, 1061, 1062, 1063,  949,  875,  812,  943,  891,  876,

     1063, 1063, 1063,  942,  876, 1063, 1063, 1063,  812,  888,
      812,  937,  812, 1066, 1066, 1066,  947,  946,  936,  812,
      407,  947,  437,  928,  812, 1074, 1062, 1075,  947,  720,
     1075, 1063, 1075,  720,  876,  875, 1076, 1077, 1078,  876,
      875, 1078, 1078, 1078,  876,  812, 1078, 1078, 1078,  876,
      927, 1085, 1077, 1086,  812,  812, 1087, 1088, 1089,  812,
      812,  875, 1080, 1080, 1080,  812,  946,  947,  925,  924,
      876,  437, 1086, 1078, 1086,  812, 1092, 1092, 1092,  876,
      923,  922,  875,  921,  876, 1089, 1089, 1089,  920,  919,
      812,  876, 1089, 1089, 1089,  812,  918, 1091, 1091, 1091,

      812,  946,  917,  916,  812,  876,  437, 1101, 1101, 1101,
      812,  812, 1094, 1088, 1095,  915,  947, 1095, 1089, 1095,
      914,  913,  875, 1096, 1097, 1098,  876,  875,  912,  911,
      947,  876,  910, 1098, 1098, 1098,  876,  905,  904,  812,
      903,  902,  812, 1098, 1098, 1098,  812,  901, 1096, 1097,
     1098,  947,  812,  900, 1100, 1100, 1100,  899,  946,  897,
      896,  947,  812,  437,  895,  833,  876,  812, 1107, 1107,
     1107,  876, 1103, 1097, 1104,  630,  630,  812,  748, 1104,
     1098, 1104,  875,  891, 1098, 1098, 1098,  812,  890,  875,
      889,  876, 1098, 1098, 1098,  888,  887,  812,  876, 1110,

     1110, 1110,  812,  812,  738, 1106, 1106, 1106,  947,  946,
      881,  812,  880,  808,  437, 1103, 1097, 1104, 1104, 1098,
     1104,  871,  947,  720,  868,  875,  876,  867,  875,  838,
     1108, 1108, 1108,  876,  876,  797,  796,  876,  812,  437,
     1109, 1109, 1109,  792,  946,  791,  812,  858,  857,  437,
     1113, 1113, 1113,  947, 1111, 1111, 1111,  856,  855,  947,
     1116, 1116, 1116,  437, 1112, 1112, 1112,  854,  946,  876,
      853,  852,  876,  437, 1114, 1114, 1114, 1115, 1115, 1115,
      850,  946,  849,  437,  848,  847,  437, 1117, 1117, 1117,
      846, 1118, 1118, 1118,  947,  946,  437, 1119, 1119, 1119,

      437, 1120, 1120, 1120,  947,  845,  844, 1121, 1121, 1121,
      437,  946,  843,  842,  947,  841,  437,  767,  947, 1122,
     1122, 1122,  466, 1123, 1123, 1123, 1124, 1124, 1124,  630,
      946,  947,  437,  830,  829,  437, 1125, 1125, 1125, 1126,
     1126, 1126, 1128, 1128, 1128,  947,  825,  824,  437,  823,
      822,  947,  821, 1127, 1127, 1127,  820,  946, 1129, 1129,
     1129,  947,  437, 1131, 1131, 1131,  819,  437, 1130, 1130,
     1130,  814,  946,  947, 1132, 1132, 1132,  437,  813,  735,
      947,  808,  806,  437, 1133, 1133, 1133,  730,  946,  730,
      947,  720,  720,  437,  802,  801,  947, 1134, 1134, 1134,

     1135, 1135, 1135,  800, 1136, 1136, 1136,  947,  946,  437,
     1137, 1137, 1137,  437, 1138, 1138, 1138,  947, 1140, 1140,
     1140,  799,  947,  437, 1139, 1139, 1139,  798,  946,  797,
     1141, 1141, 1141,  437, 1143, 1143, 1143,  796,  947,  437,
     1142, 1142, 1142,  793,  946, 1144, 1144, 1144,  531,  437,
      531,  947,  792,  791,  437, 1146, 1146, 1146,  947, 1145,
     1145, 1145,  788,  946,  947, 1147, 1147, 1147,  437, 1149,
     1149, 1149,  947,  787,  437, 1148, 1148, 1148,  947,  946,
     1150, 1150, 1150,  786,  437, 1152, 1152, 1152,  947,  437,
      785, 1151, 1151, 1151,  947,  946, 1153, 1153, 1153,  784,

      437,  783, 1154, 1154, 1154,  437,  946,  782,  777,  947,
      776,  437,  775,  947, 1155, 1155, 1155, 1156, 1156, 1156,
     1158, 1158, 1158,  947,  774,  773,  437,  772,  770,  947,
      769, 1157, 1157, 1157,  768,  946, 1161, 1161, 1161,  947,
      437, 1159, 1159, 1159,  767,  947, 1164, 1164, 1164,  730,
      437, 1160, 1160, 1160,  664,  946,  947, 1162, 1162, 1162,
      437, 1163, 1163, 1163,  766,  946,  437,  466,  947,  466,
      437, 1165, 1165, 1165,  947, 1166, 1166, 1166,  762,  946,
      437, 1167, 1167, 1167,  437,  947, 1168, 1168, 1168,  761,
      947,  756, 1169, 1169, 1169,  437,  946, 1170, 1170, 1170,

      947,  437, 1171, 1171, 1171,  947,  756,  630, 1172, 1172,
     1172,  437,  946,  630,  627,  947,  751,  437, 1173, 1173,
     1173, 1174, 1174, 1174, 1175, 1175, 1175,  750,  946,  947,
      437,  749,  748,  437,  747,  947, 1176, 1176, 1176, 1177,
     1177, 1177,  746, 1178, 1178, 1178,  947,  946,  437,  745,
      744,  947,  437, 1179, 1179, 1179, 1180, 1180, 1180, 1181,
     1181, 1181,  947,  946,  743,  437,  742,  741,  437, 1182,
     1182, 1182,  947, 1183, 1183, 1183,  740,  739,  947, 1184,
     1184, 1184,  437,  946, 1185, 1185, 1185,  738,  437,  737,
      947, 1186, 1186, 1186, 1187, 1187, 1187,  947,  946,  736,

      437,  735,  730,  437, 1188, 1188, 1188,  947, 1189, 1189,
     1189,  599,  729,  947, 1191, 1191, 1191,  437, 1190, 1190,
     1190,  673,  946,  947, 1194, 1194, 1194,  437, 1192, 1192,
     1192,  592,  601,  947, 1195, 1195, 1195,  437,  947,  600,
     1193, 1193, 1193,  437,  946, 1197, 1197, 1197,  947,  437,
     1196, 1196, 1196,  723,  946, 1198, 1198, 1198,  947,  437,
      720, 1199, 1199, 1199,  437,  946,  583,  582,  947,  718,
      437,  600,  947, 1200, 1200, 1200,  577,  575,  947, 1201,
     1201, 1201, 1202, 1202, 1202,  572,  946,  717,  437,  569,
      567,  437,  715,  714,  947, 1203, 1203, 1203,  562,  947,

     1204, 1204, 1204,  712,  947, 1206, 1206, 1206,  600,  437,
     1205, 1205, 1205,  709,  946,  947, 1207, 1207, 1207,  437,
     1208, 1208, 1208,  705,  946,  437,  704,  947,  703,  437,
     1209, 1209, 1209, 1210, 1210, 1210,  947, 1211, 1211, 1211,
      702,  946,  437, 1212, 1212, 1212,  437,  547,  546,  947,
      698, 1213, 1213, 1213, 1214, 1214, 1214,  600,  946,  947,
      437,  531,  531,  437,  947, 1215, 1215, 1215, 1216, 1216,
     1216, 1217, 1217, 1217,  947,  946,  529,  437,  694,  693,
      437, 1218, 1218, 1218,  947, 1219, 1219, 1219, 1221, 1221,
     1221,  947,  692,  524,  437,  523,  517,  947, 1220, 1220,

     1220,  689,  946, 1222, 1222, 1222,  688,  437,  947, 1223,
     1223, 1223,  437,  946, 1224, 1224, 1224,  687,  437,  947,
     1225, 1225, 1225,  686,  685,  947, 1227, 1227, 1227,  437,
     1226, 1226, 1226,  684,  946,  947, 1228, 1228, 1228,  437,
      683,  682,  947,  681,  669,  437, 1229, 1229, 1229,  498,
      946,  496,  947,  664,  492,  437, 1230, 1230, 1230,  663,
     1231, 1231, 1231,  947, 1233, 1233, 1233,  662,  947,  437,
     1232, 1232, 1232,  483,  946,  482, 1234, 1234, 1234,  437,
      947, 1236, 1236, 1236,  947,  437, 1235, 1235, 1235,  481,
      946,  482, 1237, 1237, 1237,  437, 1239, 1239, 1239,  661,

      947,  437, 1238, 1238, 1238,  470,  946, 1240, 1240, 1240,
      947,  437,  466, 1241, 1241, 1241,  437,  946,  947, 1242,
     1242, 1242,  437,  454,  947, 1243, 1243, 1243, 1244, 1244,
     1244,  651,  946,  650,  437,  947,  448,  437,  648,  647,
      947, 1245, 1245, 1245, 1246, 1246, 1246, 1248, 1248, 1248,
      947,  439,  641,  437,  433,  427,  947, 1247, 1247, 1247,
      630,  946, 1249, 1249, 1249,  422,  437,  947, 1250, 1250,
     1250,  437,  946,  947, 1251, 1251, 1251,  437, 1252, 1252,
     1252,  625,  947,  622, 1253, 1253, 1253,  437,  946, 1254,
     1254, 1254,  620,  437,  415,  947, 1255, 1255, 1255,  618,

      617,  947, 1257, 1257, 1257,  437, 1256, 1256, 1256,  616,
      946,  947, 1258, 1258, 1258,  437, 1259, 1259, 1259,  615,
      946,  437,  947,  611,  608,  437,  607,  396,  947, 1260,
     1260, 1260, 1261, 1261, 1261, 1262, 1262, 1262,  947,  946,
      601,  437,  600,  947,  437, 1263, 1263, 1263, 1264, 1264,
     1264, 1266, 1266, 1266,  599,  596,  947,  437,  592,  395,
      947,  396, 1265, 1265, 1265,  395,  946, 1267, 1267, 1267,
      947,  437,  396, 1268, 1268, 1268,  437,  946, 1269, 1269,
     1269,  395,  437,  947, 1270, 1270, 1270,  586,  396,  947,
     1272, 1272, 1272,  437, 1271, 1271, 1271,  395,  946,  947,

     1273, 1273, 1273,  437,  582,  947, 1274, 1274, 1274,  437,
      946, 1275, 1275, 1275,  396,  437,  947, 1276, 1276, 1276,
     1277, 1277, 1277,  395,  946,  396,  437,  947,  395,  437,
      577,  575,  947, 1278, 1278, 1278, 1279, 1279, 1279, 1281,
     1281, 1281,  574,  395,  947,  437,  572,  571,  947, 1280,
     1280, 1280,  395,  946, 1282, 1282, 1282,  567,  437,  566,
      947,  562,  561,  437,  558,  947, 1283, 1283, 1283,  547,
      946, 1284, 1284, 1284,  947,  437, 1285, 1285, 1285, 1286,
     1286, 1286,  546,  946,  537,  437,  531,  947,  437, 1287,
     1287, 1287,  498,  947,  532, 1288, 1288, 1288, 1289, 1289,

     1289,  531,  946,  947,  437,  531,  531,  437, 1290, 1290,
     1290,  529, 1291, 1291, 1291, 1292, 1292, 1292,  528,  946,
      947,  437,  526,  524,  437,  947, 1293, 1293, 1293, 1294,
     1294, 1294,  523,  947,  517, 1295, 1295, 1295,  437,  946,
     1296, 1296, 1296,  947,  437, 1297, 1297, 1297,  506, 1298,
     1298, 1298,  947,  946,  437, 1299, 1299, 1299,  437, 1300,
     1300, 1300,  947, 1301, 1301, 1301,  503,  946,  437,  947,
      396,  395,  437, 1302, 1302, 1302, 1303, 1303, 1303,  396,
      947,  395, 1304, 1304, 1304,  437,  946,  498,  395,  947,
      492,  437,  488,  484,  947, 1305, 1305, 1305, 1306, 1306,

     1306,  483,  946,  947, 1307, 1307, 1307,  437,  482,  947,
     1308, 1308, 1308,  481,  946,  466,  466,  947,  466,  437,
     1309, 1309, 1309,  466, 1310, 1310, 1310,  947,  946, 1311,
     1311, 1311,  454,  437,  452,  448,  947, 1312, 1312, 1312,
      446,  946, 1313, 1313, 1313,  395,  437,  435,  433,  947,
      431,  427,  947, 1314, 1314, 1314,  426,  946,  947, 1315,
     1315, 1315,  437,  425,  947,  422, 1316, 1316, 1316,  421,
      946, 1317, 1317, 1317,  947,  437,  395,  415,  947, 1318,
     1318, 1318,  414,  947, 1319, 1319, 1319, 1320, 1320, 1320,
      413,  947, 1321, 1321, 1321,  407,  947, 1322, 1322, 1322,

     1323, 1323, 1323, 1324, 1324, 1324,  406,  947, 1325, 1325,
     1325,  395,  404,  947, 1326, 1326, 1326, 1327, 1327, 1327,
      947, 1328, 1328, 1328,  395,  947, 1329, 1329, 1329, 1330,
     1330, 1330,  396,  947, 1331, 1331, 1331,  395,  947, 1398,
     1398,  947, 1332, 1332, 1332, 1398,  947, 1333, 1333, 1333,
     1398,  947, 1398, 1398,  947, 1398, 1398,  947, 1334, 1334,
     1334, 1398,  947, 1335, 1335, 1335, 1398, 1398,  947, 1398,
     1398,  947, 1336, 1336, 1336,  947, 1337, 1337, 1337, 1398,
      947, 1398, 1398,  947, 1338, 1338, 1338, 1398,  947, 1339,
     1339, 1339, 1340, 1340, 1340, 1398,  947, 1341, 1341, 1341,

     1398,  947, 1342, 1342, 1342, 1343, 1343, 1343, 1344, 1344,
     1344, 1398,  947, 1345, 1345, 1345, 1398,  947, 1346, 1346,
     1346, 1347, 1347, 1347, 1398, 1398,  947, 1348, 1348, 1348,
      947, 1349, 1349, 1349, 1350, 1350, 1350, 1398,  947, 1351,
     1351, 1351, 1398,  947, 1398, 1398,  947, 1352, 1352, 1352,
     1398,  947, 1353, 1353, 1353, 1398,  947, 1398, 1398,  947,
     1398, 1398,  947, 1354, 1354, 1354, 1398,  947, 1355, 1355,
     1355, 1398,  947, 1398, 1398,  947, 1356, 1356, 1356, 1398,
     1398,  947, 1357, 1357, 1357,  947, 1398, 1398,  947, 1358,
     1358, 1358, 1398,  947, 1359, 1359, 1359, 1360, 1360, 1360,

     1398,  947, 1361, 1361, 1361, 1398,  947, 1362, 1362, 1362,
     1363, 1363, 1363, 1364, 1364, 1364, 1398,  947, 1365, 1365,
     1365, 1398,  947, 1366, 1366, 1366, 1367, 1367, 1367, 1398,
      947, 1368, 1368, 1368, 1398, 1398,  947, 1369, 1369, 1369,
     1370, 1370, 1370,  947, 1371, 1371, 1371, 1398,  947, 1398,
     1398,  947, 1372, 1372, 1372, 1398,  947, 1373, 1373, 1373,
     1398,  947, 1398, 1398,  947, 1398, 1398,  947, 1374, 1374,
     1374, 1398,  947, 1375, 1375, 1375, 1398,  947, 1398, 1398,
      947, 1376, 1376, 1376, 1398,  947, 1377, 1377, 1377, 1398,
     1398,  947, 1398, 1398,  947, 1378, 1378, 1378,  947, 1379,

     1379, 1379, 1380, 1380, 1380, 1398,  947, 1381, 1381, 1381,
     1398,  947, 1382, 1382, 1382, 1383, 1383, 1383, 1384, 1384,
     1384, 1398,  947, 1385, 1385, 1385, 1398,  947, 1386, 1386,
     1386, 1387, 1387, 1387, 1398,  947, 1388, 1388, 1388, 1398,
      947, 1389, 1389, 1389, 1390, 1390, 1390, 1398, 1398,  947,
     1391, 1391, 1391,  947, 1398, 1398,  947, 1392, 1392, 1392,
     1398,  947, 1393, 1393, 1393, 1398,  947, 1398, 1398,  947,
     1398, 1398,  947, 1394, 1394, 1394, 1398,  947, 1395, 1395,
     1395, 1398,  947, 1398, 1398,  947, 1396, 1396, 1396, 1398,
      947, 1397, 1397, 1397, 1398,  947, 1398, 1398,  947, 1321,

     1321, 1321, 1398, 1398,  947, 1398, 1398, 1398, 1398, 1398,
     1398,  947, 1398, 1398, 1398, 1398,  947, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398,  947, 1398, 1398,
     1398, 1398,  947, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
      947, 1398, 1398, 1398, 1398,  947, 1398, 1398, 1398, 1398,
     1398, 1398, 1398,  947,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,

      284,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  423,  423,  423, 1398,  423,  423,
     1398,  423, 1398,  423,  423,  423, 1398,  423,  423,  423,
      423,  423,  423,  424,  424,  424, 1398,  424,  424,  424,
      424, 1398,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  428,  428,  428, 1398,  428,  428, 1398,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428, 1398,
      428,  432,  432,  432, 1398,  432,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      434,  434,  434, 1398,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  438,
      438,  438, 1398, 1398, 1398, 1398,  438, 1398, 1398, 1398,
      438, 1398, 1398,  438,  443,  443,  443, 1398, 1398,  443,
     1398,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443, 1398,  443,  447,  447,  447, 1398,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  449,  449,  449, 1398, 1398,  449,  449,  449,
     1398,  449,  449,  449,  449,  449,  449,  449,  449, 1398,

      449,  453,  453,  453, 1398,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      455,  455,  455, 1398,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  463,
     1398, 1398, 1398, 1398, 1398, 1398,  463, 1398, 1398, 1398,
      463, 1398, 1398,  463,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465, 1398,  465,  476,  476, 1398, 1398, 1398, 1398, 1398,
      476, 1398, 1398, 1398,  476, 1398, 1398,  476,  476,  487,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,  487, 1398,

      487, 1398, 1398,  487,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  502, 1398,  502, 1398,  502,  502,  502,
      502,  502,  502, 1398,  502, 1398,  502,  502, 1398,  502,
      525,  525,  525, 1398,  525,  525,  525,  525,  525,  525,
     1398,  525,  525,  525,  525,  525,  525,  525,  525,  530,
      530,  530, 1398,  530,  530,  530,  530,  530,  530, 1398,
      530,  530,  530,  530,  530, 1398,  530,  530,  548,  548,
      548, 1398,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548, 1398,  548, 1398,  548,  549,  549,  549,

     1398,  549,  549,  549,  549,  549,  549,  549,  549, 1398,
      549,  549, 1398,  549, 1398,  549,  550, 1398,  550, 1398,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550, 1398,  550, 1398,  550,  557, 1398,  557, 1398,  557,
      557,  557,  557,  557,  557, 1398,  557,  557,  557,  557,
      557,  557,  557,  557,  563, 1398,  563, 1398,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  580,  580,  580, 1398,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  585,  585,  585, 1398,  585,  585,  585,  585,

     1398,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  590,  590,  590, 1398,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      591, 1398, 1398,  591, 1398,  591, 1398,  591, 1398,  591,
     1398,  591, 1398, 1398,  591,  593,  593,  593, 1398,  593,
     1398,  593,  593,  593,  593, 1398,  593, 1398,  593,  593,
     1398,  593, 1398,  593,  619,  619,  619, 1398,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  621,  621,  621, 1398,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,

      621,  621,  423,  423,  423, 1398,  423,  423, 1398,  423,
     1398,  423,  423,  423, 1398,  423,  423,  423,  423,  423,
      423,  629,  629,  629, 1398,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629, 1398,  629,
      631,  631,  631, 1398,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  428,
      428,  428, 1398,  428,  428, 1398,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428, 1398,  428,  634,  634,
      634, 1398,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  637,  637,  637,

     1398,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  642,  642,  642, 1398,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  438,  438,  438, 1398, 1398,
     1398, 1398,  438, 1398, 1398, 1398,  438, 1398, 1398,  438,
      443,  443,  443, 1398, 1398,  443, 1398,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443, 1398,  443,  449,
      449,  449, 1398, 1398,  449,  449,  449, 1398,  449,  449,
      449,  449,  449,  449,  449,  449, 1398,  449,  455,  455,
      455, 1398,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  463, 1398, 1398,
     1398, 1398, 1398, 1398,  463, 1398, 1398, 1398,  463, 1398,
     1398,  463,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465, 1398,
      465,  476,  476, 1398, 1398, 1398, 1398, 1398,  476, 1398,
     1398, 1398,  476, 1398, 1398,  476,  476,  487, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398,  487, 1398,  487, 1398,
     1398,  487,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  502, 1398,  502, 1398,  502,  502,  502,  502,  502,

      502, 1398,  502, 1398,  502,  502, 1398,  502,  525,  525,
      525, 1398,  525,  525,  525,  525,  525,  525, 1398,  525,
      525,  525,  525,  525,  525,  525,  525,  530,  530,  530,
     1398,  530,  530,  530,  530,  530,  530, 1398,  530,  530,
      530,  530,  530, 1398,  530,  530,  548,  548,  548, 1398,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548, 1398,  548, 1398,  548,  549,  549,  549, 1398,  549,
      549,  549,  549,  549,  549,  549,  549, 1398,  549,  549,
     1398,  549, 1398,  549,  550, 1398,  550, 1398,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550, 1398,

      550, 1398,  550,  557, 1398,  557, 1398,  557,  557,  557,
      557,  557,  557, 1398,  557,  557,  557,  557,  557,  557,
      557,  557,  563, 1398,  563, 1398,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  719,  719,  719, 1398,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719, 1398,  719,
      721,  721,  721, 1398,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  591,
     1398, 1398,  591, 1398,  591, 1398,  591, 1398,  591, 1398,
      591, 1398, 1398,  591,  593,  593,  593, 1398,  593, 1398,

      593,  593,  593,  593, 1398,  593, 1398,  593,  593, 1398,
      593, 1398,  593,  731,  731,  731, 1398,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  734,  734,  734, 1398,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  619,  619,  619, 1398,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      621,  621,  621, 1398,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  752,
      752,  752, 1398,  752,  752,  752,  752,  752,  752,  752,

      752,  752,  752,  752,  752,  752, 1398,  752,  423,  423,
      423, 1398,  423,  423, 1398,  423, 1398,  423,  423,  423,
     1398,  423,  423,  423,  423,  423,  423,  634,  634,  634,
     1398,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  635,  635,  635, 1398,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  637,  637,  637, 1398,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  638,  638,  638, 1398,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,

      638,  638,  638,  428,  428,  428, 1398,  428,  428, 1398,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
     1398,  428,  438,  438,  438, 1398, 1398, 1398, 1398,  438,
     1398, 1398, 1398,  438, 1398, 1398,  438,  443,  443,  443,
     1398, 1398,  443, 1398,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443, 1398,  443,  449,  449,  449, 1398,
     1398,  449,  449,  449, 1398,  449,  449,  449,  449,  449,
      449,  449,  449, 1398,  449,  455,  455,  455, 1398,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  465,  465,  465,  465,  465,  465,

      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465, 1398,  465,  525,  525,  525, 1398,  525,  525,  525,
      525,  525,  525, 1398,  525,  525,  525,  525,  525,  525,
      525,  525,  530,  530,  530, 1398,  530,  530,  530,  530,
      530,  530, 1398,  530,  530,  530,  530,  530, 1398,  530,
      530,  550, 1398,  550, 1398,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550, 1398,  550, 1398,  550,
      548,  548,  548, 1398,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548, 1398,  548, 1398,  548,  557,
     1398,  557, 1398,  557,  557,  557,  557,  557,  557, 1398,

      557,  557,  557,  557,  557,  557,  557,  557,  563, 1398,
      563, 1398,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  803,  803,  803,
     1398,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803, 1398,  803,  807,  807,  807, 1398,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  831,  831,  831, 1398,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831, 1398,  831,  869,  869,  869, 1398,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,

      869, 1398,  869,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  983, 1398, 1398, 1398,  983, 1398, 1398, 1398, 1398,
     1398, 1398, 1398,  983, 1398,  983,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1398, 1029,
     1029, 1398, 1029, 1029, 1038, 1038, 1038, 1038, 1038, 1038,

     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1398, 1038, 1038,
     1398, 1038, 1038, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1398, 1049, 1049, 1398,
     1049, 1049,   75, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398

    } ;

static yyconst flex_int16_t yy_chk[6596] =
    {   0,
        0,    1,  179,    1,    1,    2,  634,    2,    2,    0,
        3,  179,    3,    3,   80,   90,  100,    1,   80,   90,
      100,    2,   92,   92,   92,    1,    3,  150,  150,    2,
      634,   92,   92,  115,    3,  128,  186,  115,  136,  128,
      106,  147,  136,  197,  105,  147,  105,  106,  106,  118,
      172,  118,  159,  149,  149,  149,  159,  197,  186,  167,
        1,    1,  149,  167,    2,    2,  187,  187,  172,    3,
        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    9,  192,    9,
        9,  185,    9,  188,  212,  212,    9,   10,  192,   10,
       10,  185,   10,    9,  173,  185,   10,   11,  174,   11,
       11,    9,   11,   10,   12,  199,   12,   12,  403,   12,
      202,   10,  173,   11,  178,  202,  174,  403,  208,  199,

       12,   11,  208,  175,  176,  219,   11,  229,   12,  219,
      175,  229,  178,   12,  175,  225,    9,    9, 1321,  188,
      225,  175,  176,  176,  238,  253,   10,   10,  238,  253,
      263,  270,  270,  493,  269,  263,   11,   11,  269,  307,
      307,  493,  199,   12,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   15,  275,   15,
       15,   16,   15,   16,   16, 1303,   16,   17,  278,   17,
       17,  180,  467,   15,  275,  262,   17,   16,   43,  262,
      180,   15,  467,   17,  278,   16,   15,  177,  244,   43,
       16,   17,  262,   43,  404,   18,   17,   18,   18,  244,
      349,  349,   43,  404,   18,  177,   43,   19,   43,   19,
       19,   18,   19,  151,  151,  151,   15,   15,  244,   18,
       16,   16,  151,   19,   18,  279,   17,   17,  180,  279,
       19,   19,  245,   20,   43,   20,   20,  280,   20,  533,
      177,  190,  190,  245,  244,  265,  265,  245,  283,   20,

      190,  404,  533,  280,   18,   18,   20,   20,  554,  281,
      554,  280,  245,  281,  283,  151,   19,   19,  281,  190,
      281,  289,  265,  296,  304,  289,  315,  296,  304,  328,
      315,  337,  347,  328, 1102,  337,  347,  360,  245,  425,
      425,  360,   20,   20,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   23,  370,   23,   23,
       24,  370,   24,   24,  408,  468,   31,  271,   31,   31,
      379,  388,   23,  408,  379,  388,   24,  390,  271,  468,
       23,  390,   31,  419,   24,   23,  490,  402,  390,   24,
       31,  490,  419,  154,  154,  154,  402,  271,  400,  400,
      400,  435,  154,  402,  402,  402,  455,  400,  400,  435,
      435, 1093,  402,  402,  504,   23,   23, 1084,  504,   24,
       24,   25,   25,  271,  455,   31,   31,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

      154,  586,  586,   25,   25,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   32,
       32,   32,   32,  461,   33,   32,   33,   33,   34,  463,
       34,   34,  461,  282,   35,   32,   35,   35,  463,   36,
       33,   36,   36,   32,   34,  430,  637,  479,   33,  282,
       35,  472,   34,  191,  191,   36,  430,  479,   35,  436,
      436,  436,  191,   36,  457,  438,  438,  438,  436,  430,
      637,  457,  500,   39,  438,   39,   39,  500,   32,   32,
      494,  191,  457,   33,   33,   39,  460,   34,   34,   39,

      272,  282,  494,   35,   35,  604,  604,   39,   36,   36,
       37,  272,   37,   37,  460,  272,   40,  472,   40,   40,
      191,   45,   37,   45,   45, 1083,   37,  536,   40,  429,
      272,  548,   40,   44,   37,   37,  429,   45, 1082,   37,
       40,   37,   39,   39,   44,   45,   45,  548,   44,  460,
       45,  473,  473,  429,  536,  522,  272,   44,  660,  660,
      660,   44,   49,   44,   49,   49,  458,   37,  473,   37,
       37,   38,   38,   38,   38,   40,   40,  458,   49,  410,
       45,   45,  410,   38,  458,  522,   49,   38,  410,   44,
      476,  476,  485,  487, 1419,   38,   38, 1419,  395,  476,

       38,  639,   38,  395,  395,  395,  485,  487,  395,  558,
      395,  522,  594,  410,  558,  395,  395,  395,  476,  681,
      594,   49,   49,  410, 1073,  639,  731,  731,   38,  681,
       38,   38,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   46,  464,   46,   46, 1420,  540,

       47, 1420,   47,   47,  464,   48,  421,   48,   48,  421,
       46,   50,   47,   50,   50,  421,   47,   48,   46,   46,
      657,   48,  540,   46,   47,  595,  426,   50,  654,   48,
      603,  426,  426,  426,  657,   50,  426,  595,  426,  603,
      421, 1072,  605,  426,  426,  426,  654,  632,  540,  644,
      421,  605,  464,   46,   46,  632,  632,  644,  644,   47,
       47,  710,  875,  875,   48,   48,  710,  781,  781,  781,
       50,   50,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  431, 1071,  442,

      442,  442,  431,  431,  431,  931,  931,  431,  442,  431,
     1421,   55,   55, 1421,  431,  431,  431,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      545,  655,  518,   55,   55,   57, 1070,   57,   57,   58,
       57,   58,   58,  518,   58,   59,  442,   59,   59,  655,
     1069,   57,  489,  661,   59,   58,  478,  478, 1068,   57,
      545,   59,  518,   58,   57,  478,  489,  556,   58,   59,
      519,  682,  661,   60,   59,   60,   60,   63, 1058,   63,
       63,  519,   60,  556,  478, 1057,  545,  682,  518,   60,

      674, 1056,  653,   63,   57,   57,  636,   60,   58,   58,
      519,   63,   60,  653,   59,   59,   63,  636, 1055,  489,
      653,  674,  446,  478,  441,  441,  441,  446,  446,  446,
      636, 1054,  446,  441,  446,  556,  519, 1053,  942,  446,
      446,  446,   60,   60,   61,   61,   63,   63,  674,  749,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,  441,  706,  763,   61,   61,   64,  452,
       64,   64,  790,  942,  452,  452,  452, 1052,  749,  452,
      706,  452,  722,  763,   64,  691,  452,  452,  452,  506,

      722,  722,   64,  768,  506,  506,  506,   64,  790,  506,
     1051,  506,  769,  768,  528, 1050,  506,  506,  506,  528,
      528,  528,  701,  541,  528,  691,  528,  738,  769,  542,
      738,  528,  528,  528,  541,  817,  738,   64,   64,   65,
      542,   65,   65, 1048,   65,  645,  645,  645,   65,   65,
       65,  691,  701,  541,  645,   65,  690,  700, 1044,  542,
      646,  646,  646,   65,   65,  561, 1037,  690,  700,  646,
      561,  561,  561, 1437,  817,  561, 1437,  561,  701,  541,
      755,  754,  561,  561,  561,  542,  690,  700,  748,  754,
      754,  748,  759,  759,  759,  646,  789,  748,   65,   65,

       66,  759,   66,   66,  755,   66,  758,  789,  820,   66,
       66,   66,  690,  700,  758,  758,   66,  820,  733,  733,
      733,  566, 1036,  794,   66,   66,  566,  566,  566,  919,
      795,  566,  827,  566,  794,  872,  596,  733,  566,  566,
      566,  596,  596,  596,  872,  919,  596,  882,  596,  735,
      735,  735, 1035,  596,  596,  596,  795, 1034, 1033,   66,
       66,   67, 1447,   67,   67, 1447,   67,  805,  735, 1032,
       67,  827,  733,  793,  793,  805,  805,   67,  793,  760,
      760,  760,  793,  793,  876,   67,  882,  793,  760, 1031,
       67,  793,  793,  876,  808,  808,  808, 1030,  809,  809,

      809, 1028, 1027,  735,  808,  840,  840,  840, 1026,  810,
      810,  810, 1025,  808,  811,  811,  811,  809, 1023, 1019,
       67,   67,   68, 1009,   68,   68,  760,   68,  810, 1008,
      885,   68,  830,  811, 1448,  830,  887, 1448,   68,  885,
      938,  830,  849,  849,  849,  887,   68, 1449,  808,  938,
     1449,   68,  809,  835,  835,  835,  851,  851,  851,  867,
      867,  867,  835,  810,  893,  893,  893, 1007,  811,  898,
      898,  898, 1006,  893,  907,  907,  907,  909,  909,  909,
     1005,   68,   68,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   73, 1004,   73,   73,   73,
      836,  836,  836,  848,  848,  848,  888,   73, 1003,  836,
      888,   73,  873,  873,  873,  874,  874,  874,  937,   73,
       73,  937,  873,  976,   73,  874,  888,  937,  877,  877,
      877,  873,  976, 1002,  874, 1001,  894,  894,  894, 1000,
      894,  895,  895,  895,  836,  894,  998,  877,  878,  878,

      878,  879,  879,  879,   73,   73,   74,  848,   74,   74,
       74,  926,  926,  926, 1010,  997,  873,  878,   74,  874,
      879,  940,   74, 1010,  943,  940, 1451,  943,  996, 1451,
       74,   74,  877,  943,  995,   74,  994,  944,  944,  944,
      894,  940,  959,  959,  959,  895,  944,  985,  985,  985,
     1456, 1457,  878, 1456, 1457,  879,  985,  989,  989,  989,
     1460, 1476,  993, 1460, 1476,   74,   74,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,  240,
      992, 1486,  991,  240, 1486, 1020, 1020, 1020,  240,  240,
      240,  990, 1487,  240, 1020, 1487, 1488,  240,  240, 1488,
     1489, 1496,  240, 1489, 1496,  988,  240,  240,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,

      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      459,  459, 1045, 1045, 1045,  459,  459,  459,  987,  984,
      459, 1045,  459, 1499,  977,  975, 1499,  459,  459,  459,
      469,  974,  469, 1047, 1047, 1047,  973,  469,  469,  469,
     1518,  972,  469, 1518,  469,  971,  929,  929,  929,  469,
      469,  469,  507,  507,  507,  507,  929,  507, 1065, 1065,
     1065,  507,  507,  970,  969,  929,  507, 1065,  968,  967,
      507,  507,  534,  966, 1079, 1079, 1079,  534,  534,  534,
      965,  964,  534, 1079,  534, 1527,  963, 1047, 1527,  534,

      534,  534, 1090, 1090, 1090,  962,  961,  534,  553,  960,
      929, 1090,  553,  958, 1099, 1099, 1099,  553,  553,  553,
      957,  956,  553, 1099,  553,  955,  954,  953,  952,  553,
      553,  553,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  819,  819,  819,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  930,  930,  930,  933,
      933,  933,  934,  934,  934,  951,  930,  935,  935,  935,
      945,  945,  945,  950,  945,  930,  949,  948,  933,  945,
      946,  934,  978,  978,  978,  936,  935,  979,  979,  979,
      928,  927,  978,  980,  980,  980,  925,  979,  981,  981,

      981,  978,  924,  982,  982,  982,  979,  923,  922,  921,
      930,  920,  980,  933,  918,  917,  934,  981, 1013, 1013,
     1013,  935,  982,  916,  945,  986,  986,  986, 1013,  986,
     1014, 1014, 1014,  915,  986,  914,  978, 1013,  913,  912,
     1014,  979, 1015, 1015, 1015,  911,  910,  980,  906, 1014,
      905,  904,  981,  903, 1016, 1016, 1016,  982, 1017, 1017,
     1017, 1015, 1021, 1021, 1021,  902, 1021, 1067, 1067, 1067,
      901, 1021, 1013, 1016, 1022, 1022, 1022, 1017, 1022,  986,
     1039, 1039, 1039,  900, 1014, 1040, 1040, 1040,  899,  897,
     1039, 1041, 1041, 1041,  896, 1040, 1015,  892,  891, 1039,

     1042, 1042, 1042,  890, 1040, 1043, 1043, 1043, 1016,  889,
     1041,  883, 1017, 1046, 1046, 1046, 1021, 1046,  881, 1042,
      880, 1067, 1046,  871, 1043, 1059, 1059, 1059, 1022,  870,
     1060, 1060, 1060,  869, 1039, 1059, 1061, 1061, 1061, 1040,
     1060, 1062, 1062, 1062, 1059, 1041, 1063, 1063, 1063, 1060,
      868, 1074, 1074, 1074, 1042, 1061, 1076, 1076, 1076, 1043,
     1062, 1074, 1066, 1066, 1066, 1063, 1066, 1046,  866,  865,
     1074, 1066, 1075, 1075, 1075, 1076, 1081, 1081, 1081, 1059,
      864,  863, 1075,  862, 1060, 1077, 1077, 1077,  861,  860,
     1061, 1075, 1078, 1078, 1078, 1062,  859, 1080, 1080, 1080,

     1063, 1080,  858,  857, 1077, 1074, 1080, 1092, 1092, 1092,
     1076, 1078, 1085, 1085, 1085,  856, 1066, 1086, 1086, 1086,
      855,  854, 1085, 1087, 1087, 1087, 1075, 1086,  853,  852,
     1081, 1085,  850, 1088, 1088, 1088, 1086,  847,  846, 1077,
      845,  844, 1087, 1089, 1089, 1089, 1078,  843, 1096, 1096,
     1096, 1080, 1088,  842, 1091, 1091, 1091,  841, 1091,  839,
      838, 1092, 1089, 1091,  837,  834, 1085, 1096, 1101, 1101,
     1101, 1086, 1094, 1094, 1094,  832,  831, 1087,  828, 1095,
     1095, 1095, 1094,  825, 1097, 1097, 1097, 1088,  824, 1095,
      823, 1094, 1098, 1098, 1098,  822,  821, 1089, 1095, 1107,

     1107, 1107, 1096, 1097,  818, 1100, 1100, 1100, 1091, 1100,
      814, 1098,  813,  807, 1100, 1103, 1103, 1103, 1104, 1104,
     1104,  806, 1101,  803,  802, 1103, 1094,  800, 1104,  799,
     1105, 1105, 1105, 1095, 1103,  797,  796, 1104, 1097, 1105,
     1106, 1106, 1106,  792, 1106,  791, 1098,  788,  787, 1106,
     1110, 1110, 1110, 1107, 1108, 1108, 1108,  786,  785, 1100,
     1113, 1113, 1113, 1108, 1109, 1109, 1109,  784, 1109, 1103,
      783,  782, 1104, 1109, 1111, 1111, 1111, 1112, 1112, 1112,
      780, 1112,  779, 1111,  778,  777, 1112, 1114, 1114, 1114,
      776, 1115, 1115, 1115, 1106, 1115, 1114, 1116, 1116, 1116,

     1115, 1117, 1117, 1117, 1110,  775,  774, 1118, 1118, 1118,
     1117, 1118,  773,  772, 1113,  770, 1118,  767, 1109, 1119,
     1119, 1119,  764, 1120, 1120, 1120, 1121, 1121, 1121,  752,
     1121, 1112, 1120,  751,  750, 1121, 1122, 1122, 1122, 1123,
     1123, 1123, 1125, 1125, 1125, 1115,  746,  745, 1123,  744,
      743, 1116,  742, 1124, 1124, 1124,  741, 1124, 1126, 1126,
     1126, 1118, 1124, 1128, 1128, 1128,  740, 1126, 1127, 1127,
     1127,  737, 1127, 1119, 1129, 1129, 1129, 1127,  736,  734,
     1121,  732,  729, 1129, 1130, 1130, 1130,  725, 1130,  723,
     1122,  721,  719, 1130,  717,  714, 1125, 1131, 1131, 1131,

     1132, 1132, 1132,  709, 1133, 1133, 1133, 1124, 1133, 1132,
     1134, 1134, 1134, 1133, 1135, 1135, 1135, 1128, 1137, 1137,
     1137,  708, 1127, 1135, 1136, 1136, 1136,  704, 1136,  703,
     1138, 1138, 1138, 1136, 1140, 1140, 1140,  702, 1130, 1138,
     1139, 1139, 1139,  698, 1139, 1141, 1141, 1141,  697, 1139,
      696, 1131,  693,  692, 1141, 1143, 1143, 1143, 1133, 1142,
     1142, 1142,  689, 1142, 1134, 1144, 1144, 1144, 1142, 1146,
     1146, 1146, 1137,  688, 1144, 1145, 1145, 1145, 1136, 1145,
     1147, 1147, 1147,  687, 1145, 1149, 1149, 1149, 1140, 1147,
      686, 1148, 1148, 1148, 1139, 1148, 1150, 1150, 1150,  685,

     1148,  684, 1151, 1151, 1151, 1150, 1151,  683,  680, 1143,
      679, 1151,  678, 1142, 1152, 1152, 1152, 1153, 1153, 1153,
     1155, 1155, 1155, 1146,  677,  676, 1153,  675,  673, 1145,
      672, 1154, 1154, 1154,  671, 1154, 1158, 1158, 1158, 1149,
     1154, 1156, 1156, 1156,  669, 1148, 1161, 1161, 1161,  666,
     1156, 1157, 1157, 1157,  664, 1157, 1151, 1159, 1159, 1159,
     1157, 1160, 1160, 1160,  663, 1160, 1159,  659, 1152,  658,
     1160, 1162, 1162, 1162, 1155, 1163, 1163, 1163,  650, 1163,
     1162, 1164, 1164, 1164, 1163, 1154, 1165, 1165, 1165,  647,
     1158,  643, 1166, 1166, 1166, 1165, 1166, 1167, 1167, 1167,

     1161, 1166, 1168, 1168, 1168, 1157,  642,  631, 1169, 1169,
     1169, 1168, 1169,  629,  628, 1160,  627, 1169, 1170, 1170,
     1170, 1171, 1171, 1171, 1172, 1172, 1172,  625, 1172, 1163,
     1171,  624,  623, 1172,  620, 1164, 1173, 1173, 1173, 1174,
     1174, 1174,  618, 1175, 1175, 1175, 1166, 1175, 1174,  617,
      616, 1167, 1175, 1176, 1176, 1176, 1177, 1177, 1177, 1178,
     1178, 1178, 1169, 1178,  615, 1177,  614,  613, 1178, 1179,
     1179, 1179, 1170, 1180, 1180, 1180,  611,  610, 1172, 1181,
     1181, 1181, 1180, 1181, 1182, 1182, 1182,  609, 1181,  608,
     1173, 1183, 1183, 1183, 1184, 1184, 1184, 1175, 1184,  607,

     1183,  606,  600, 1184, 1185, 1185, 1185, 1176, 1186, 1186,
     1186,  599,  598, 1178, 1188, 1188, 1188, 1186, 1187, 1187,
     1187,  597, 1187, 1179, 1191, 1191, 1191, 1187, 1189, 1189,
     1189,  592,  589, 1181, 1192, 1192, 1192, 1189, 1182,  588,
     1190, 1190, 1190, 1192, 1190, 1194, 1194, 1194, 1184, 1190,
     1193, 1193, 1193,  587, 1193, 1195, 1195, 1195, 1185, 1193,
      585, 1196, 1196, 1196, 1195, 1196,  584,  582, 1188,  579,
     1196,  578, 1187, 1197, 1197, 1197,  577,  575, 1191, 1198,
     1198, 1198, 1199, 1199, 1199,  572, 1199,  571, 1198,  570,
      567, 1199,  565,  564, 1190, 1200, 1200, 1200,  562, 1194,

     1201, 1201, 1201,  560, 1193, 1203, 1203, 1203,  559, 1201,
     1202, 1202, 1202,  555, 1202, 1196, 1204, 1204, 1204, 1202,
     1205, 1205, 1205,  552, 1205, 1204,  551, 1197,  547, 1205,
     1206, 1206, 1206, 1207, 1207, 1207, 1199, 1208, 1208, 1208,
      546, 1208, 1207, 1209, 1209, 1209, 1208,  544,  543, 1200,
      539, 1210, 1210, 1210, 1211, 1211, 1211,  538, 1211, 1203,
     1210,  531,  530, 1211, 1202, 1212, 1212, 1212, 1213, 1213,
     1213, 1214, 1214, 1214, 1205, 1214,  529, 1213,  527,  524,
     1214, 1215, 1215, 1215, 1206, 1216, 1216, 1216, 1218, 1218,
     1218, 1208,  523,  521, 1216,  520,  517, 1209, 1217, 1217,

     1217,  516, 1217, 1219, 1219, 1219,  515, 1217, 1211, 1220,
     1220, 1220, 1219, 1220, 1221, 1221, 1221,  514, 1220, 1212,
     1222, 1222, 1222,  513,  512, 1214, 1224, 1224, 1224, 1222,
     1223, 1223, 1223,  511, 1223, 1215, 1225, 1225, 1225, 1223,
      510,  509, 1218,  508,  505, 1225, 1226, 1226, 1226,  498,
     1226,  497, 1217,  492,  491, 1226, 1227, 1227, 1227,  486,
     1228, 1228, 1228, 1220, 1230, 1230, 1230,  484, 1221, 1228,
     1229, 1229, 1229,  483, 1229,  482, 1231, 1231, 1231, 1229,
     1224, 1233, 1233, 1233, 1223, 1231, 1232, 1232, 1232,  481,
     1232,  480, 1234, 1234, 1234, 1232, 1236, 1236, 1236,  477,

     1226, 1234, 1235, 1235, 1235,  471, 1235, 1237, 1237, 1237,
     1227, 1235,  465, 1238, 1238, 1238, 1237, 1238, 1230, 1239,
     1239, 1239, 1238,  454, 1229, 1240, 1240, 1240, 1241, 1241,
     1241,  451, 1241,  450, 1240, 1233,  448, 1241,  445,  444,
     1232, 1242, 1242, 1242, 1243, 1243, 1243, 1245, 1245, 1245,
     1236,  440,  434, 1243,  433,  427, 1235, 1244, 1244, 1244,
      424, 1244, 1246, 1246, 1246,  422, 1244, 1238, 1247, 1247,
     1247, 1246, 1247, 1239, 1248, 1248, 1248, 1247, 1249, 1249,
     1249,  420, 1241,  417, 1250, 1250, 1250, 1249, 1250, 1251,
     1251, 1251,  416, 1250,  415, 1242, 1252, 1252, 1252,  414,

      413, 1245, 1254, 1254, 1254, 1252, 1253, 1253, 1253,  412,
     1253, 1244, 1255, 1255, 1255, 1253, 1256, 1256, 1256,  411,
     1256, 1255, 1247,  409,  407, 1256,  406,  396, 1248, 1257,
     1257, 1257, 1258, 1258, 1258, 1259, 1259, 1259, 1250, 1259,
      394, 1258,  393, 1251, 1259, 1260, 1260, 1260, 1261, 1261,
     1261, 1263, 1263, 1263,  391,  389, 1254, 1261,  381,  380,
     1253,  373, 1262, 1262, 1262,  371, 1262, 1264, 1264, 1264,
     1256, 1262,  363, 1265, 1265, 1265, 1264, 1265, 1266, 1266,
     1266,  361, 1265, 1257, 1267, 1267, 1267,  357,  350, 1259,
     1269, 1269, 1269, 1267, 1268, 1268, 1268,  348, 1268, 1260,

     1270, 1270, 1270, 1268,  343, 1263, 1271, 1271, 1271, 1270,
     1271, 1272, 1272, 1272,  340, 1271, 1262, 1273, 1273, 1273,
     1274, 1274, 1274,  338, 1274,  331, 1273, 1265,  329, 1274,
      323,  319, 1266, 1275, 1275, 1275, 1276, 1276, 1276, 1278,
     1278, 1278,  318,  316, 1269, 1276,  309,  308, 1268, 1277,
     1277, 1277,  305, 1277, 1279, 1279, 1279,  298, 1277,  297,
     1271,  291,  290, 1279,  288, 1272, 1280, 1280, 1280,  274,
     1280, 1281, 1281, 1281, 1274, 1280, 1282, 1282, 1282, 1283,
     1283, 1283,  273, 1283,  268, 1282,  267, 1275, 1283, 1284,
     1284, 1284,  266, 1278,  261, 1285, 1285, 1285, 1286, 1286,

     1286,  260, 1286, 1277, 1285,  258,  257, 1286, 1287, 1287,
     1287,  255, 1288, 1288, 1288, 1289, 1289, 1289,  254, 1289,
     1280, 1288,  252,  247, 1289, 1281, 1290, 1290, 1290, 1291,
     1291, 1291,  246, 1283,  242, 1292, 1292, 1292, 1291, 1292,
     1293, 1293, 1293, 1284, 1292, 1294, 1294, 1294,  239, 1295,
     1295, 1295, 1286, 1295, 1294, 1296, 1296, 1296, 1295, 1297,
     1297, 1297, 1287, 1298, 1298, 1298,  237, 1298, 1297, 1289,
      231,  230, 1298, 1299, 1299, 1299, 1300, 1300, 1300,  221,
     1290,  220, 1301, 1301, 1301, 1300, 1301,  213,  209, 1292,
      206, 1301,  198,  196, 1293, 1302, 1302, 1302, 1304, 1304,

     1304,  195, 1304, 1295, 1305, 1305, 1305, 1304,  194, 1296,
     1306, 1306, 1306,  193, 1306,  189,  184, 1298,  182, 1306,
     1307, 1307, 1307,  181, 1308, 1308, 1308, 1299, 1308, 1309,
     1309, 1309,  170, 1308,  168,  162, 1301, 1310, 1310, 1310,
      160, 1310, 1311, 1311, 1311,  148, 1310,  146,  139, 1302,
      137,  130, 1304, 1312, 1312, 1312,  129, 1312, 1305, 1313,
     1313, 1313, 1312,  127, 1306,  120, 1314, 1314, 1314,  119,
     1314, 1315, 1315, 1315, 1307, 1314,  116,  109, 1308, 1316,
     1316, 1316,  108, 1309, 1317, 1317, 1317, 1318, 1318, 1318,
      107, 1310, 1319, 1319, 1319,  104, 1311, 1320, 1320, 1320,

     1322, 1322, 1322, 1323, 1323, 1323,  103, 1312, 1324, 1324,
     1324,  101,   94, 1313, 1325, 1325, 1325, 1326, 1326, 1326,
     1314, 1327, 1327, 1327,   91, 1315, 1328, 1328, 1328, 1329,
     1329, 1329,   82, 1316, 1330, 1330, 1330,   81, 1317,   75,
        0, 1318, 1331, 1331, 1331,    0, 1319, 1332, 1332, 1332,
        0, 1320,    0,    0, 1322,    0,    0, 1323, 1333, 1333,
     1333,    0, 1324, 1334, 1334, 1334,    0,    0, 1325,    0,
        0, 1326, 1335, 1335, 1335, 1327, 1336, 1336, 1336,    0,
     1328,    0,    0, 1329, 1337, 1337, 1337,    0, 1330, 1338,
     1338, 1338, 1339, 1339, 1339,    0, 1331, 1340, 1340, 1340,

        0, 1332, 1341, 1341, 1341, 1342, 1342, 1342, 1343, 1343,
     1343,    0, 1333, 1344, 1344, 1344,    0, 1334, 1345, 1345,
     1345, 1346, 1346, 1346,    0,    0, 1335, 1347, 1347, 1347,
     1336, 1348, 1348, 1348, 1349, 1349, 1349,    0, 1337, 1350,
     1350, 1350,    0, 1338,    0,    0, 1339, 1351, 1351, 1351,
        0, 1340, 1352, 1352, 1352,    0, 1341,    0,    0, 1342,
        0,    0, 1343, 1353, 1353, 1353,    0, 1344, 1354, 1354,
     1354,    0, 1345,    0,    0, 1346, 1355, 1355, 1355,    0,
        0, 1347, 1356, 1356, 1356, 1348,    0,    0, 1349, 1357,
     1357, 1357,    0, 1350, 1358, 1358, 1358, 1359, 1359, 1359,

        0, 1351, 1360, 1360, 1360,    0, 1352, 1361, 1361, 1361,
     1362, 1362, 1362, 1363, 1363, 1363,    0, 1353, 1364, 1364,
     1364,    0, 1354, 1365, 1365, 1365, 1366, 1366, 1366,    0,
     1355, 1367, 1367, 1367,    0,    0, 1356, 1368, 1368, 1368,
     1369, 1369, 1369, 1357, 1370, 1370, 1370,    0, 1358,    0,
        0, 1359, 1371, 1371, 1371,    0, 1360, 1372, 1372, 1372,
        0, 1361,    0,    0, 1362,    0,    0, 1363, 1373, 1373,
     1373,    0, 1364, 1374, 1374, 1374,    0, 1365,    0,    0,
     1366, 1375, 1375, 1375,    0, 1367, 1376, 1376, 1376,    0,
        0, 1368,    0,    0, 1369, 1377, 1377, 1377, 1370, 1378,

     1378, 1378, 1379, 1379, 1379,    0, 1371, 1380, 1380, 1380,
        0, 1372, 1381, 1381, 1381, 1382, 1382, 1382, 1383, 1383,
     1383,    0, 1373, 1384, 1384, 1384,    0, 1374, 1385, 1385,
     1385, 1386, 1386, 1386,    0, 1375, 1387, 1387, 1387,    0,
     1376, 1388, 1388, 1388, 1389, 1389, 1389,    0,    0, 1377,
     1390, 1390, 1390, 1378,    0,    0, 1379, 1391, 1391, 1391,
        0, 1380, 1392, 1392, 1392,    0, 1381,    0,    0, 1382,
        0,    0, 1383, 1393, 1393, 1393,    0, 1384, 1394, 1394,
     1394,    0, 1385,    0,    0, 1386, 1395, 1395, 1395,    0,
     1387, 1396, 1396, 1396,    0, 1388,    0,    0, 1389, 1397,

     1397, 1397,    0,    0, 1390,    0,    0,    0,    0,    0,
        0, 1391,    0,    0,    0,    0, 1392,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1393,    0,    0,
        0,    0, 1394,    0,    0,    0,    0,    0,    0,    0,
     1395,    0,    0,    0,    0, 1396,    0,    0,    0,    0,
        0,    0,    0, 1397, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,

     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,

     1406, 1406, 1406, 1406, 1406, 1406, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,

     1411, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1414,
     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1417, 1417, 1417, 1417,

     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1422, 1422, 1422,    0, 1422, 1422,
        0, 1422,    0, 1422, 1422, 1422,    0, 1422, 1422, 1422,
     1422, 1422, 1422, 1423, 1423, 1423,    0, 1423, 1423, 1423,
     1423,    0, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1424, 1424, 1424,    0, 1424, 1424,    0, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,    0,
     1424, 1425, 1425, 1425,    0, 1425, 1425, 1425, 1425, 1425,

     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1426, 1426, 1426,    0, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1427,
     1427, 1427,    0,    0,    0,    0, 1427,    0,    0,    0,
     1427,    0,    0, 1427, 1428, 1428, 1428,    0,    0, 1428,
        0, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428,    0, 1428, 1429, 1429, 1429,    0, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1430, 1430, 1430,    0,    0, 1430, 1430, 1430,
        0, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,    0,

     1430, 1431, 1431, 1431,    0, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1432, 1432, 1432,    0, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1433,
        0,    0,    0,    0,    0,    0, 1433,    0,    0,    0,
     1433,    0,    0, 1433, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434,    0, 1434, 1435, 1435,    0,    0,    0,    0,    0,
     1435,    0,    0,    0, 1435,    0,    0, 1435, 1435, 1436,
        0,    0,    0,    0,    0,    0,    0,    0, 1436,    0,

     1436,    0,    0, 1436, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1439,    0, 1439,    0, 1439, 1439, 1439,
     1439, 1439, 1439,    0, 1439,    0, 1439, 1439,    0, 1439,
     1440, 1440, 1440,    0, 1440, 1440, 1440, 1440, 1440, 1440,
        0, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1441,
     1441, 1441,    0, 1441, 1441, 1441, 1441, 1441, 1441,    0,
     1441, 1441, 1441, 1441, 1441,    0, 1441, 1441, 1442, 1442,
     1442,    0, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
     1442, 1442, 1442,    0, 1442,    0, 1442, 1443, 1443, 1443,

        0, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,    0,
     1443, 1443,    0, 1443,    0, 1443, 1444,    0, 1444,    0,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
     1444,    0, 1444,    0, 1444, 1445,    0, 1445,    0, 1445,
     1445, 1445, 1445, 1445, 1445,    0, 1445, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1446,    0, 1446,    0, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1450, 1450, 1450,    0, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1452, 1452, 1452,    0, 1452, 1452, 1452, 1452,

        0, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1453, 1453, 1453,    0, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1454,    0,    0, 1454,    0, 1454,    0, 1454,    0, 1454,
        0, 1454,    0,    0, 1454, 1455, 1455, 1455,    0, 1455,
        0, 1455, 1455, 1455, 1455,    0, 1455,    0, 1455, 1455,
        0, 1455,    0, 1455, 1458, 1458, 1458,    0, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1459, 1459, 1459,    0, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,

     1459, 1459, 1461, 1461, 1461,    0, 1461, 1461,    0, 1461,
        0, 1461, 1461, 1461,    0, 1461, 1461, 1461, 1461, 1461,
     1461, 1462, 1462, 1462,    0, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,    0, 1462,
     1463, 1463, 1463,    0, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1464,
     1464, 1464,    0, 1464, 1464,    0, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464,    0, 1464, 1465, 1465,
     1465,    0, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1466, 1466, 1466,

        0, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1467, 1467, 1467,    0,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1468, 1468, 1468,    0,    0,
        0,    0, 1468,    0,    0,    0, 1468,    0,    0, 1468,
     1469, 1469, 1469,    0,    0, 1469,    0, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1469, 1469,    0, 1469, 1470,
     1470, 1470,    0,    0, 1470, 1470, 1470,    0, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470,    0, 1470, 1471, 1471,
     1471,    0, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,

     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1472,    0,    0,
        0,    0,    0,    0, 1472,    0,    0,    0, 1472,    0,
        0, 1472, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,    0,
     1473, 1474, 1474,    0,    0,    0,    0,    0, 1474,    0,
        0,    0, 1474,    0,    0, 1474, 1474, 1475,    0,    0,
        0,    0,    0,    0,    0,    0, 1475,    0, 1475,    0,
        0, 1475, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1477, 1478,    0, 1478,    0, 1478, 1478, 1478, 1478, 1478,

     1478,    0, 1478,    0, 1478, 1478,    0, 1478, 1479, 1479,
     1479,    0, 1479, 1479, 1479, 1479, 1479, 1479,    0, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1480, 1480, 1480,
        0, 1480, 1480, 1480, 1480, 1480, 1480,    0, 1480, 1480,
     1480, 1480, 1480,    0, 1480, 1480, 1481, 1481, 1481,    0,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481,    0, 1481,    0, 1481, 1482, 1482, 1482,    0, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482,    0, 1482, 1482,
        0, 1482,    0, 1482, 1483,    0, 1483,    0, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,    0,

     1483,    0, 1483, 1484,    0, 1484,    0, 1484, 1484, 1484,
     1484, 1484, 1484,    0, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1485,    0, 1485,    0, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1490, 1490, 1490,    0, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,    0, 1490,
     1491, 1491, 1491,    0, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1492,
        0,    0, 1492,    0, 1492,    0, 1492,    0, 1492,    0,
     1492,    0,    0, 1492, 1493, 1493, 1493,    0, 1493,    0,

     1493, 1493, 1493, 1493,    0, 1493,    0, 1493, 1493,    0,
     1493,    0, 1493, 1494, 1494, 1494,    0, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1495, 1495, 1495,    0, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1497, 1497, 1497,    0, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1498, 1498, 1498,    0, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1500,
     1500, 1500,    0, 1500, 1500, 1500, 1500, 1500, 1500, 1500,

     1500, 1500, 1500, 1500, 1500, 1500,    0, 1500, 1501, 1501,
     1501,    0, 1501, 1501,    0, 1501,    0, 1501, 1501, 1501,
        0, 1501, 1501, 1501, 1501, 1501, 1501, 1502, 1502, 1502,
        0, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1503, 1503, 1503,    0,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1504, 1504, 1504,    0, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1505, 1505, 1505,    0, 1505, 1505,
     1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,

     1505, 1505, 1505, 1506, 1506, 1506,    0, 1506, 1506,    0,
     1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506,
        0, 1506, 1507, 1507, 1507,    0,    0,    0,    0, 1507,
        0,    0,    0, 1507,    0,    0, 1507, 1508, 1508, 1508,
        0,    0, 1508,    0, 1508, 1508, 1508, 1508, 1508, 1508,
     1508, 1508, 1508, 1508,    0, 1508, 1509, 1509, 1509,    0,
        0, 1509, 1509, 1509,    0, 1509, 1509, 1509, 1509, 1509,
     1509, 1509, 1509,    0, 1509, 1510, 1510, 1510,    0, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1511, 1511, 1511, 1511, 1511, 1511,

     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511,    0, 1511, 1512, 1512, 1512,    0, 1512, 1512, 1512,
     1512, 1512, 1512,    0, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1513, 1513, 1513,    0, 1513, 1513, 1513, 1513,
     1513, 1513,    0, 1513, 1513, 1513, 1513, 1513,    0, 1513,
     1513, 1514,    0, 1514,    0, 1514, 1514, 1514, 1514, 1514,
     1514, 1514, 1514, 1514, 1514, 1514,    0, 1514,    0, 1514,
     1515, 1515, 1515,    0, 1515, 1515, 1515, 1515, 1515, 1515,
     1515, 1515, 1515, 1515, 1515,    0, 1515,    0, 1515, 1516,
        0, 1516,    0, 1516, 1516, 1516, 1516, 1516, 1516,    0,

     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1517,    0,
     1517,    0, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1519, 1519, 1519,
        0, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
     1519, 1519, 1519, 1519,    0, 1519, 1520, 1520, 1520,    0,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1521, 1521, 1521,    0, 1521,
     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521,
     1521, 1521,    0, 1521, 1522, 1522, 1522,    0, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,

     1522,    0, 1522, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
     1524, 1525,    0,    0,    0, 1525,    0,    0,    0,    0,
        0,    0,    0, 1525,    0, 1525, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,    0, 1528,
     1528,    0, 1528, 1528, 1529, 1529, 1529, 1529, 1529, 1529,

     1529, 1529, 1529, 1529, 1529, 1529, 1529,    0, 1529, 1529,
        0, 1529, 1529, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
     1530, 1530, 1530, 1530, 1530, 1530,    0, 1530, 1530,    0,
     1530, 1530, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398

    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2019 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 *
*************************************************************************/

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include <QDir>
#include <QFile>
#include <QFileInfo>
#include <QHash>
#include <QRegularExpression>
#include <QStringList>
#include <QStack>
#include <QVector>

#include <pre.h>

#include <a_define.h>
#include <arguments.h>
#include <constexp.h>
#include <config.h>
#include <condparser.h>
#include <doxy_globals.h>
#include <default_args.h>
#include <entry.h>
#include <message.h>
#include <membername.h>
#include <util.h>

#define YY_NEVER_INTERACTIVE 1

// Toggle for some debugging info
// #define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

struct CondCtx
{

   CondCtx(int line, const QString &id, bool b)
      : lineNr(line), sectionId(id), skip(b) {}

   int lineNr;
   QString sectionId;
   bool skip;
};

struct FileState {
   FileState(int size) : lineNr(1), fileBuf(size),
      oldFileBuf(""), oldFileBufPos(0), bufState(0) {}

   int       lineNr;
   QString   fileBuf;
   QString   oldFileBuf;
   int       oldFileBufPos;
   QString   fileName;
   YY_BUFFER_STATE bufState;
};

/** @brief Singleton which manages the defines available while proprocessing files
 */
class DefineManager
{
   // local class used to hold the defines for a single file
   class DefinesPerFile
   {
    public:
      DefinesPerFile() {
      }

      virtual ~DefinesPerFile() {
      }

      /** Adds a define in the context of a file. Will replace an existing define
       *  with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(QSharedPointer<A_Define> def) {
         QSharedPointer<A_Define> d = m_defines.value(def->m_name);

         if (d != nullptr) {
            // redefine
            m_defines.remove(d->m_name);
         }

         m_defines.insert(def->m_name, def);
      }

      /** Adds an include file for this file
       *  @param fileName The name of the include file
       */
      void addInclude(const QString &fileName) {
         m_includedFiles.insert(fileName);
      }

      void collectDefines(DefineDict &dict, QSet<QString> &includeStack);

    private:
      DefineDict m_defines;
      QSet<QString> m_includedFiles;
   };

 public:
   friend class DefinesPerFile;

   /** Returns a reference to the singleton */
   static DefineManager &instance() {
      if (theInstance == nullptr) {
         theInstance = new DefineManager;
      }
      return *theInstance;
   }

   static void deleteInstance() {
      delete theInstance;
      theInstance = nullptr;
   }

   /** Starts a context in which defines are collected.
    *  Called at the start of a new file that is preprocessed.
    *  @param fileName the name of the file to process.
    */
   void startContext(const QString &fileName) {
      m_contextDefines.clear();
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);
      if (dpf == nullptr) {
         // new file

         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);
      }
   }

   /** Ends the context started with startContext() freeing any
    *  defines collected within in this context.
    */
   void endContext() {
      m_contextDefines.clear();
   }

   /** Add an included file to the current context.
    *  If the file has been pre-processed already, all defines are added to the context.
    *  @param fileName The name of the include file to add to the context.
    */
   void addFileToContext(const QString &fileName) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         // new file

         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);

      } else {
         // existing file

         QSet<QString> includeStack;
         dpf->collectDefines(m_contextDefines, includeStack);
      }
   }

   /** Add a define to the manager object.
    *  @param fileName The file in which the define was found
    *  @param def The Define object to add.
    */
   void addDefine(const QString &fileName, QSharedPointer<A_Define> def) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<A_Define> d = m_contextDefines.value(def->m_name);

      if (d != nullptr) {
         // redefine
         m_contextDefines.remove(d->m_name);
      }

      m_contextDefines.insert(def->m_name, def);

      //
      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);
      }

      dpf->addDefine(def);
   }

   /** Add an include relation to the manager object.
    *  @param fromFileName file name in which the include was found.
    *  @param toFileName file name that is included.
    */
   void addInclude(const QString &fromFileName, const QString &toFileName) {
      if (fromFileName.isEmpty() || toFileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fromFileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fromFileName, dpf);
      }
      dpf->addInclude(toFileName);
   }

   /** Returns a Define object given its name or 0 if the Define does not exist.
   */
   QSharedPointer<A_Define> isDefined(const QString &name) const {
      QSharedPointer<A_Define> d = m_contextDefines.value(name);

      if (d && d->undef) {
         d = QSharedPointer<A_Define>();
      }

      return d;
   }

   /** Returns a reference to the defines found in the current context. */
   const DefineDict &defineContext() const {
      return m_contextDefines;
   }

 private:
   static DefineManager *theInstance;

   /** Helper function to collect all define for a given file */
   void collectDefinesForFile(const QString &fileName, QSharedPointer<DefineDict> dict) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf) {
         QSet<QString> includeStack;
         dpf->collectDefines(*dict, includeStack);
      }
   }

   /** returns the DefinesPerFile object for a given file name. */
   QSharedPointer<DefinesPerFile> find(const QString &fileName) const {
      if (fileName.isEmpty()) {
         return QSharedPointer<DefinesPerFile>();
      }

      return m_fileMap.value(fileName);
   }

   DefineManager() {
   }

   virtual ~DefineManager() {
   }

   QHash<QString, QSharedPointer<DefinesPerFile>> m_fileMap;
   DefineDict m_contextDefines;
};

/** Singleton instance */
DefineManager *DefineManager::theInstance = 0;

/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(DefineDict &dict, QSet<QString> &includeStack)
{
   {
      for (auto di : m_includedFiles) {
         QString incFile = di;

         QSharedPointer<DefinesPerFile> dpf = DefineManager::instance().find(incFile);

         if (dpf && ! includeStack.contains(incFile)) {
            includeStack.insert(incFile);
            dpf->collectDefines(dict, includeStack);
         }
      }
   }

   {
      for (const auto &def : m_defines)  {
         QSharedPointer<A_Define> d = dict.value(def->m_name);

         if (d != nullptr) {
            // redefine
            dict.remove(d->m_name);
         }

         dict.insert(def->m_name, def);
      }
   }
}

static QStringList              s_pathList;
static QString                  s_yyFileName;
static QSharedPointer<FileDef>  s_yyFileDef;
static QSharedPointer<FileDef>  s_inputFileDef;

static QSharedPointer<QHash<QString, int>> s_argDict;
static QStack<QSharedPointer<FileState>>   s_includeStack;
static QStack<QSharedPointer<CondCtx>>     s_condStack;
static QSharedPointer<DefineDict>          s_expandedDict;

static int          s_yyLineNr   = 1;
static int          s_yyMLines   = 1;
static int          s_yyColNr    = 1;
static int          s_ifcount    = 0;
static int          s_defArgs    = -1;

static QString      s_defName;
static QString      s_defText;
static QString      s_defLitText;
static QString      s_defArgsStr;
static QString      s_defExtraSpacing;
static bool         s_defVarArgs;
static int          s_lastCContext;
static int          s_lastCPPContext;
static QStack<int>  s_levelGuard;

static QString      s_outputString;
static QString      s_inputString;
static int          s_inputPosition;

static int          s_roundCount;
static bool         s_quoteArg;

static int          s_findDefArgContext;
static bool         s_expectGuard;
static QString      s_guardName;
static QString      s_lastGuardName;
static QString      s_incName;
static QString      s_guardExpr;
static int          s_curlyCount;
static bool         s_nospaces;          // add extra spaces during macro expansion

static bool         s_macroExpansion;    // from the configuration
static bool         s_expandOnlyPredef;  // from the configuration
static int          s_commentCount;
static bool         s_insideComment;
static bool         s_isImported;
static QString      s_blockName;
static int          s_condCtx;
static bool         s_skip;

static bool         s_insideCS;          // C# has simpler preprocessor
static bool         s_isSource;

static bool         s_lexInit   = false;
static int          s_fenceSize = 0;
static bool         s_ccomment;

static void setFileName(const QString &name)
{
   bool ambig;
   QFileInfo fi(name);

   s_yyFileName = fi.absoluteFilePath();
   s_yyFileDef  = findFileDef(&Doxy_Globals::inputNameDict, s_yyFileName, ambig);

   if (s_yyFileDef == nullptr) {
      // if this is not an input file check if it is an include file
      s_yyFileDef = findFileDef(&Doxy_Globals::includeNameDict, s_yyFileName, ambig);
   }

   if (s_yyFileDef && s_yyFileDef->isReference()) {
      s_yyFileDef = QSharedPointer<FileDef>();
   }

   s_insideCS = getLanguageFromFileName(s_yyFileName) == SrcLangExt_CSharp;
   s_isSource = determineSection(s_yyFileName);
}

static void incrLevel()
{
   s_levelGuard.push(0);
}

static void decrLevel()
{
   if (s_levelGuard.size() > 0) {
      s_levelGuard.pop();

   } else {
      warn(s_yyFileName, s_yyLineNr, "More #endif's than #if's found\n");

   }
}

static bool otherCaseDone()
{
   if (s_levelGuard.size() == 0) {
      warn(s_yyFileName, s_yyLineNr, "Found an #else without a preceding #if\n");
      return true;

   } else {
      return s_levelGuard.top();

   }
}

static void setCaseDone(bool value)
{
   s_levelGuard.top() = value;
}

static QSet<QString> s_allIncludes;

static QSharedPointer<FileState> checkAndOpenFile(const QString &fileName, bool &alreadyIncluded)
{
   alreadyIncluded = false;
   QSharedPointer<FileState> fs;

   QFileInfo fi(fileName);

   if (fi.exists() && fi.isFile()) {
      static const QStringList exclPatterns = Config::getList("exclude-patterns");

      if (patternMatch(fi, exclPatterns)) {
         return QSharedPointer<FileState>();
      }

      QString absName = fi.absoluteFilePath();

      // global guard
      if (s_curlyCount == 0) {
         // not #include inside { ... }

         if (s_allIncludes.contains(absName)) {
            alreadyIncluded = true;
            return QSharedPointer<FileState>();
         }

         s_allIncludes.insert(absName);
      }

      // check include stack for absName
      QStack<QSharedPointer<FileState>> tmpStack;

      while (! s_includeStack.isEmpty()) {
         fs = s_includeStack.pop();

         if (fs->fileName == absName) {
            alreadyIncluded = true;
         }

         tmpStack.push(fs);
      }

      while (! tmpStack.isEmpty()) {
         fs = tmpStack.pop();

         s_includeStack.push(fs);
      }

      if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }

      fs = QMakeShared<FileState>(fi.size() + 4096);
      alreadyIncluded = false;

      if (! readInputFile(absName, fs->fileBuf)) {
         // error
         fs = QSharedPointer<FileState>();

      } else {
         fs->oldFileBuf    = s_inputString;
         fs->oldFileBufPos = s_inputPosition;
      }
   }

   return fs;
}

static QSharedPointer<FileState> findFile(const QString &fileName, bool localInclude, bool &alreadyIncluded)
{
   if (QDir::isAbsolutePath(fileName)) {
      QSharedPointer<FileState> fs = checkAndOpenFile(fileName, alreadyIncluded);

      if (fs) {
         setFileName(fileName);
         s_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   if (localInclude && ! s_yyFileName.isEmpty()) {
      QFileInfo fi(s_yyFileName);

      if (fi.exists()) {
         QString absName = fi.absolutePath() + "/" + fileName;
         QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

         if (fs) {
            setFileName(absName);
            s_yyLineNr = 1;
            return fs;

         } else if (alreadyIncluded) {
            return QSharedPointer<FileState>();
         }
      }
   }

   if (s_pathList.isEmpty()) {
      return QSharedPointer<FileState>();
   }

   for (auto &s : s_pathList) {
      QString absName = s + "/" + fileName;

      QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

      if (fs) {
         setFileName(absName);
         s_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   return QSharedPointer<FileState>();
}

static QString extractTrailingComment(const QString &s)
{
   if (s.isEmpty()) {
      return QString("");
   }

   int i = s.length() - 1;

   while (i >= 0) {
      QChar c = s[i];

      switch (c.unicode()) {
         case '/': {
            i--;

            if (i >= 0 && s[i] == '*') {
               // end of a comment block
               i--;

               while (i > 0 && !(s[i - 1] == '/' && s[i] == '*')) {
                  i--;
               }

               if (i == 0) {
                  i++;
               }

               // only /*!< or /**< are treated as a comment for the macro name     */
               // otherwise the comment is treated as part of the macro definition

               return ((s[i + 1] == '*' || s[i + 1] == '!') && s[i + 2] == '<') ? s.mid(i - 1) : "";

            } else {
               return QString("");
            }
         }

         break;

         // whitespace or line-continuation
         case ' ':
         case '\t':
         case '\r':
         case '\n':
         case '\\':
            break;

         default:
            return QString("");
      }

      i--;
   }

   return QString("");
}

static int getNextChar(const QString &expr, QString *rest, uint &pos);
static int getCurrentChar(const QString &expr, QString *rest, uint pos);
static void unputChar(const QString &expr, QString *rest, uint &pos, char c);
static void expandExpression(QString &expr, QString *rest, int pos);

static QString stringize(const QString &s)
{
   QString result;
   QChar c;
   QChar pc;

   uint i = 0;
   bool inString = false;
   bool inChar   = false;

   while (i < s.length()) {

      if (! inString && ! inChar) {
         while (i < s.length() && ! inString && ! inChar) {
            c = s.at(i++);

            if (c == '"') {
               result += "\\\"";
               inString = true;
            } else if (c == '\'') {
               result += c;
               inChar = true;
            } else {
               result += c;
            }
         }

      } else if (inChar) {
         while (i < s.length() && inChar) {
            c = s.at(i++);

            if (c == '\'') {
               result += '\'';
               inChar = false;
            } else if (c == '\\') {
               result += "\\\\";
            } else {
               result += c;
            }
         }

      } else {
         pc = 0;

         while (i < s.length() && inString) {
            QChar c2 = s.at(i++);

            if (c2 == '"') {
               result += "\\\"";
               inString = pc == '\\';

            } else if (c2 == '\\') {
               result += "\\\\";

            } else {
               result += c2;
            }

            pc = c2;
         }
      }
   }

   return result;
}

static void processConcatOperators(QString &str)
{
   if (str.isEmpty()) {
      return;
   }

   static QRegularExpression regExp("[ \t\r\n]*##[ \t\r\n]*");
   QRegularExpressionMatch match = regExp.match(str);

   int matchLen;
   int pos;

   while (match.hasMatch()) {

      pos      = match.capturedStart() - str.constBegin();
      matchLen = match.capturedLength();

      if (pos + matchLen + 1 < str.length() && str.at(pos + matchLen) == '@' && str.at(pos + matchLen + 1) == '-') {
         // remove no-rescan marker after ID
         matchLen += 2;
      }

      // remove the ## operator and the surrounding whitespace
      str   = str.left(pos) + str.right(str.length() - pos - matchLen);
      int k = pos - 1;

      while (k >= 0 && isId(str.at(k))) {
         --k;
      }

      if (k > 0 && str.at(k) == '-' && str.at(k - 1) == '@') {
         // remove no-rescan marker before ID
         str  = str.left(k - 1) + str.right(str.length() - k - 1);
         pos -= 2;
      }

      match = regExp.match(str, str.constBegin() + pos);
   }
}

static void yyunput (int c,char *buf_ptr);
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QString &expr, QString *rest, uint &pos, char term, QString &arg)
{
   int cc;

   while ((cc = getNextChar(expr, rest, pos)) != EOF && cc != 0) {
      if (cc == '\\') {
         arg += (char)cc, cc = getNextChar(expr, rest, pos);
      } else if (cc == term) {
         return;
      }
      arg += (char)cc;
   }
}

/*! replaces the function macro def whose argument list starts at pos in expression \a expr.
 * Notice that this routine may scan beyond the expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the
 * length of the (unexpanded) argument list is stored in \a len.
 */
static bool replaceFunctionMacro(const QString &expr, QString *rest, int pos, int &len,
                  QSharedPointer<const A_Define> def, QString &result)
{
   uint j = pos;
   len    = 0;

   result.clear();
   int cc;

   while ((cc = getCurrentChar(expr, rest, j)) != EOF && isspace(cc)) {
      len++;
      getNextChar(expr, rest, j);
   }

   if (cc != '(') {
      unputChar(expr, rest, j, ' ');
      return false;
   }

   // consume the `(' character
   getNextChar(expr, rest, j);

   // list of arguments
   QHash<QString, QString> argTable;

   QString arg;
   int argCount = 0;
   bool done    = false;

   // PHASE 1: read the macro arguments
   if (def->nargs == 0) {
      while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
         char c = (char)cc;

         if (c == ')') {
            break;
         }
      }

   } else {
      while (! done && (argCount < def->nargs || def->varArgs) &&
             ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0)) {

         char c = (char)cc;

         if (c == '(') {
            // argument is a function => search for matching )
            int level = 1;
            arg += c;

            //char term='\0';

            while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               char c = (char)cc;

               if (c == '\'' || c == '\"') {
                  // skip ('s and )'s inside strings
                  arg += c;
                  addTillEndOfString(expr, rest, j, c, arg);
               }

               if (c == ')') {
                  level--;
                  arg += c;
                  if (level == 0) {
                     break;
                  }

               } else if (c == '(') {
                  level++;
                  arg += c;

               } else {
                  arg += c;
               }
            }

         } else if (c == ')' || c == ',') {
            // last or next argument found

            if (c == ',' && argCount == def->nargs - 1 && def->varArgs) {
               arg = arg.trimmed();
               arg += ',';

            } else {

               QString argKey;
               argKey = QString("@%1").formatArg(argCount++);    // key name
               arg    = arg.trimmed();

               // add argument to the lookup table
               argTable.insert(argKey, arg);
               arg.clear();

               if (c == ')') {
                  // end of the argument list
                  done = true;
               }
            }

         } else if (c == '\"') {
            // append literal strings

            arg += c;
            bool found = false;

            while (!found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '"';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;
                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }
               c = (char)cc;
               arg += c;
            }

         } else if (c == '\'') {
            // append literal characters
            arg += c;
            bool found = false;

            while (!found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '\'';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;
                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }
               c = (char)cc;
               arg += c;
            }
         } else { // append other characters
            arg += c;
         }
      }
   }

   // PHASE 2: apply the macro function
   if (argCount == def->nargs || // same number of arguments
         (argCount >= def->nargs - 1 && def->varArgs)) {

         // variadic macro with at least as many
         // params as the non-variadic part (see bug731985)

      uint k = 0;

      // substitution of all formal arguments
      QString resExpr;
      const QString d = def->m_definition.trimmed();

      bool inString = false;

      while (k < d.length()) {
         if (d.at(k) == '@') {
            // maybe a marker, otherwise an escaped @

            if (d.at(k + 1) == '@') {
               // escaped @ => copy it (is unescaped later)

               k += 2;
               resExpr += "@@"; // we unescape these later

            } else if (d.at(k + 1) == '-') {
               // no-rescan marker
               k += 2;
               resExpr += "@-";

            } else {
               // argument marker, read the argument number
               QString key = "@";

               bool hash = false;
               int len2  = k - 1;

               // search for ## backward
               if (len2 >= 0 && d.at(len2) == '\"') {
                  len2--;
               }

               while (len2 >= 0 && d.at(len2) == ' ') {
                  len2--;
               }

               if (len2 > 0 && d.at(len2) == '#' && d.at(len2 - 1) == '#') {
                  hash = true;
               }

               k++;

               // scan the number
               while (k < d.length() && d.at(k) >= '0' && d.at(k) <= '9') {
                  key += d.at(k++);
               }

               if (! hash) {
                  // search for ## forward
                  len2 = k;

                  if (len2 < d.length() && d.at(len2) == '\"') {
                     len2++;
                  }

                  while (len2 < d.length() && d.at(len2) == ' ') {
                     len2++;
                  }

                  if (len2 < d.length() - 1 && d.at(len2) == '#' && d.at(len2 + 1) == '#') {
                     hash = true;
                  }
               }

               if (key.length() > 1 && argTable.contains(key)) {
                  QString substArg = argTable.value(key);

                  // only if no ## operator is before or after the argument marker, then do macro expansion
                  if (! hash) {
                     expandExpression(substArg, nullptr, 0);
                  }

                  if (inString) {
                     // if the marker is inside a string (because a # was put
                     // before the macro name), escape " and \ characters
                     resExpr += stringize(substArg);

                  } else {
                     if (hash && substArg.isEmpty()) {
                        // empty argument will be remove later on
                        resExpr += "@E";

                     } else if (s_nospaces) {
                        resExpr += substArg;

                     } else {
                        resExpr += " " + substArg + " ";
                     }
                  }
               }
            }

         } else {
            // no marker, just copy

            if (! inString && d.at(k) == '\"') {
               inString = true; // entering a literal string

            } else if (inString && d.at(k) == '\"' && (d.at(k - 1) != '\\' || d.at(k - 2) == '\\')) {
               inString = false; // leaving a literal string
            }
            resExpr += d.at(k++);
         }
      }

      len    = j - pos;
      result = resExpr;

      return true;
   }

   return false;
}

/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QString &expr, int p, int *l)
{
   int n;

   while (p < expr.length()) {
      QChar c = expr.at(p++);

      if (c.isNumber()) {
         // skip number
         while (p < expr.length() && isId(expr.at(p))) {
            p++;
         }

      } else if (c.isLetter() || c == '_') {
         // read id
         n = p - 1;

         while (p < expr.length() && isId(expr.at(p))) {
            p++;
         }

         *l = p - n;
         return n;

      } else if (c == '"') {
         // skip string

         QChar ppc = 0;
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);
         }

         while (p < expr.length() && (c != '"' || (pc == '\\' && ppc != '\\')))
            // continue as long as no " is found, but ignoring \", but not \\"
         {
            ppc = pc;
            pc = c;
            c = expr.at(p);
            p++;
         }

         if (p < expr.length()) {
            ++p;   // skip closing quote
         }

      } else if (c == '/') { // skip C Comment
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);

            if (c == '*') { // Start of C comment
               p++;

               while (p < expr.length() && !(pc == '*' && c == '/')) {
                  pc = c;
                  c = expr.at(p++);
               }
            }
         }

      }
   }

   return -1;
}

/*! preforms recursive macro expansion on the string expr starting at position pos.
 *  May read additional characters from the input while re-scanning
 *  If expandAll is true then all macros in the expression are expanded, otherwise only the first is expanded
 */
static void expandExpression(QString &expr, QString *rest, int pos)
{
   QString macroName;
   QString expMacro;

   bool definedTest = false;
   int i = pos;
   int l;
   int p;
   int len;

   while ((p = getNextId(expr, i, &l)) != -1) {
      // search for an macro name

      bool replaced = false;
      macroName = expr.mid(p, l);

      if (p < 2 || ! (expr.at(p - 2) == '@' && expr.at(p - 1) == '-')) {
         // no-rescan marker?

         if (! s_expandedDict->contains(macroName)) {

            // expand macro
            QSharedPointer<A_Define> def = DefineManager::instance().isDefined(macroName);

            if (definedTest) {
               // macro name was found after defined

               if (def) {
                  expMacro = " 1 ";
               } else {
                  expMacro = " 0 ";
               }

               replaced = true;
               len = l;
               definedTest = false;

            } else if (def && def->nargs == -1) {
               // simple macro
               // substitute the definition of the macro

               if (s_nospaces) {
                  expMacro = def->m_definition.trimmed();
               } else {
                  expMacro = " " + def->m_definition.trimmed() + " ";
               }

               replaced = true;
               len = l;

            } else if (def && def->nargs >= 0) {
               // function macro
               replaced = replaceFunctionMacro(expr, rest, p + l, len, def, expMacro);
               len += l;

            } else if (macroName == "defined") {
               definedTest = true;

            }

            if (replaced) {
               // expand the macro and rescan the expression

               QString resultExpr = expMacro;
               QString restExpr   = expr.right(expr.length() - len - p);

               processConcatOperators(resultExpr);

               if (def && !def->nonRecursive) {
                  s_expandedDict->insert(macroName, def);
                  expandExpression(resultExpr, &restExpr, 0);
                  s_expandedDict->remove(macroName);
               }

               expr = expr.left(p) + resultExpr + restExpr;
               i    = p;

            } else {
               // move to the next macro name
               i = p + l;
            }

         } else {
            // move to the next macro name
            expr = expr.left(p) + "@-" + expr.right(expr.length() - p);
            i = p + l + 2;

         }

      } else { // no re-scan marker found, skip the macro name
         i = p + l;
      }
   }
}

/*! replaces all occurrences of @@@@ in s by @@
 *  and removes all occurrences of @@E
 *  All identifiers found are replaced by 0L
 */
QString removeIdsAndMarkers(const QString &s)
{
   QString::const_iterator iter     = s.constBegin();
   QString::const_iterator iter_end = s.constEnd();

   QString result;

   bool inNum = false;

   while (iter != iter_end) {
      QChar c = *iter;

      // replace @@ with @ and remove @E
      if (c == '@') {

         if (*(iter + 1) == '@') {
            result += c;

         } else if (*(iter + 1) == 'E') {
            // skip
         }

         iter += 2;

      } else if (c.isNumber()) {
         // number

         result += c;
         inNum = true;

         ++iter;

      } else if (c == 'd' && ! inNum) {
         // identifier starting with a `d'

         QStringView tmp = QStringView(iter, iter_end);

         if (tmp.startsWith("defined ") || tmp.startsWith("defined(")) {
            // defined keyword, skip defined
            iter += 7;

         } else {
            result += "0L";
            ++iter;

            while (iter != iter_end) {
               c = *iter;

               if (isId(c)) {
                  ++iter;

               } else {
                  break;
               }
            }
         }

      } else if ((c.isLetter() || c == '_') && ! inNum) {
         // replace identifier with 0L
         result += "0L";
         ++iter;

         while (iter != iter_end) {
            c = *iter;

            if (isId(c)) {
               ++iter;

            } else {
               break;
            }
         }

         if (*iter == '(') {
            // undefined function macro
            ++iter;

            int count = 1;

            while (iter != iter_end) {
               c = *iter;
               ++iter;

               if (c == '(') {
                  count++;

               } else if (c == ')') {
                  count--;

                  if (count == 0) {
                     break;
                  }

               } else if (c == '/') {
                  QChar pc = c;

                  ++iter;
                  c = *iter;

                  if (c == '*') {
                     // start of C comment

                     while (iter != iter_end && ! (pc == '*' && c == '/')) {
                        // search end of comment
                        pc = c;

                        ++iter;
                        c = *iter;
                     }

                     ++iter;
                  }
               }
            }
         }

      } else if (c == '/') {
         // skip C comments
         QChar pc = c;

         ++iter;
         c = *iter;

         if (c == '*') {
            // start of C comment

            while (iter != iter_end && ! (pc == '*' && c == '/')) {
               // search end of comment
               pc = c;

               ++iter;
               c = *iter;
            }

            ++iter;

         } else {
            // not comment but division
            result += pc;
            result += c;

            QChar lc = c.toLower()[0];

            if (! isId(lc) && lc != '.') {
               inNum = false;
            }

            ++iter;
         }

      } else {
         result += c;
         QChar lc = c.toLower()[0];

         if (! isId(lc) && lc != '.') {
            inNum = false;
         }

         ++iter;
      }
   }

   return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption:
 *   \a s only contains pairs of @@'s
 */
QString removeMarkers(const QString &s)
{
   QString::const_iterator iter = s.constBegin();
   QString result;

   while (iter != s.constEnd()) {
      QChar c = *iter;

      switch (c.unicode()) {

         case '@': {
            // replace @@ with @

            if (iter + 1 != s.constEnd() && iter[1] ==  '@') {
               result += c;
               ++iter;
            }

            ++iter;
         }
         break;

         case '/': {
            // skip C comments
            result  += c;

            QChar pc = c;
            ++iter;

            if (iter != s.constEnd()) {
               c = *iter;
            }

            if (c == '*') {
               // start of C comment

               while (iter != s.constEnd()  && ! (pc == '*' && c == '/')) {
                  // search end of comment

                  if (*iter == '@' &&  (iter + 1 != s.constEnd() && iter[1] == '@')) {
                     result += c;
                     ++iter;

                  } else {
                     result += c;
                  }

                  pc = c;
                  ++iter;

                  if (iter != s.constEnd()) {
                     c = *iter;
                  }
               }

               if (iter != s.constEnd()) {
                  result += c;
                  ++iter;
               }
            }
         }
         break;

         case '"': {
            // skip string literals
            result += c;

            QChar pc = c;
            ++iter;

            if (iter != s.constEnd()) {
               c = *iter;
            }

            while (iter != s.constEnd() && (pc == '\\' && c != '"')) {
               // no end quote
               result += c;
               ++iter;

               if (iter != s.constEnd()) {
                  c = *iter;
               }
            }

            if (iter != s.constEnd()) {
               result += c;
               ++iter;
            }
         }
         break;

         case '\'': {
            // skip char literals
            result += c;

            QChar pc = c;
            ++iter;

            if (iter != s.constEnd()) {
               c = *iter;
            }

            while (iter != s.constEnd() && (pc == '\\' && c != '\'')) {
               // no end quote
               result += c;
               ++iter;

               if (iter != s.constEnd()) {
                  c = *iter;
               }
            }

            if (iter != s.constEnd()) {
               result += c;
               ++iter;
            }
         }
         break;

         default: {
            result += c;
            ++iter;
         }
         break;
      }
   }

   return result;
}

/*! compute the value of the expression in string expr.
 *  If needed the function may read additional characters from the input.
 */
bool computeExpression(const QString &expr)
{
   QString e = expr;

   expandExpression(e, nullptr, 0);
   e = removeIdsAndMarkers(e);

   if (e.isEmpty()) {
      return false;
   }

   bool retval = parseconstexp(s_yyFileName, s_yyLineNr, e);

   return retval;
}

/*! expands the macro definition in name
 *  If needed the function may read additional characters from the input
 */

QString expandMacro(const QString &name)
{
   QString n = name;

   expandExpression(n, nullptr, 0);
   n = removeMarkers(n);

   return n;
}

QSharedPointer<A_Define> newDefine()
{
   QSharedPointer<A_Define> def = QMakeShared<A_Define>();

   def->m_name       = s_defName;
   def->m_definition = s_defText.trimmed();
   def->nargs        = s_defArgs;
   def->m_fileName   = s_yyFileName;
   def->fileDef      = s_yyFileDef;
   def->lineNr       = s_yyLineNr - s_yyMLines;
   def->columnNr     = s_yyColNr;
   def->varArgs      = s_defVarArgs;

   if (! def->m_name.isEmpty() && Doxy_Globals::expandAsDefinedDict.contains(def->m_name)) {
      def->isPredefined = true;
   }

   return def;
}

void addDefine()
{
   if (s_skip) {
      return;   // do not add this define as it is inside a
   }

   // conditional section (cond command) that is disabled
   if (! Doxy_Globals::gatherDefines) {
      return;
   }

   QSharedPointer<MemberDef> md = QMakeShared<MemberDef>(s_yyFileName, s_yyLineNr - s_yyMLines, s_yyColNr,
               "#define", s_defName, s_defArgsStr, "", Public, Normal, false, Member,
               MemberType_Define, ArgumentList(), ArgumentList());

   if (! s_defArgsStr.isEmpty()) {
      ArgumentList argList;

      argList = stringToArgumentList(s_defArgsStr);
      md->setArgumentList(argList);
   }

   int len = s_defLitText.indexOf('\n');

   if (len > 0 && s_defLitText.left(len).trimmed() == "\\") {
      // strip first line if it only contains a slash
      s_defLitText = s_defLitText.right(s_defLitText.length() - len - 1);

   } else if (len > 0) {
      // align the items on the first line with the items on the second line
      int k = len + 1;

      QString::const_iterator iter = s_defLitText.constBegin() + k;

//    while ((c = *p++) != 0 && (c == ' ' || c == '\t')) {

      while (iter !=  s_defLitText.constEnd())  {
         QChar c = *iter;
         ++iter;

         if (c == ' ' || c == '\t') {
            ++k;

         } else {
            break;

         }
      }

      s_defLitText = s_defLitText.mid(len + 1, k - len - 1) + s_defLitText.trimmed();
   }
   md->setInitializer(s_defLitText.trimmed());

   md->setFileDef(s_inputFileDef);
   md->setDefinition("#define " + s_defName);

   QSharedPointer<MemberName> mn = Doxy_Globals::functionNameSDict.find(s_defName);

   if (! mn) {
      mn = QMakeShared<MemberName>(s_defName);
      Doxy_Globals::functionNameSDict.insert(s_defName, mn);
   }

   mn->append(md);

   if (s_yyFileDef) {
      s_yyFileDef->insertMember(md);
   }
}

static inline void outputChar(QChar c)
{
   if (s_includeStack.isEmpty() || s_curlyCount > 0) {
      s_outputString += c;
   }
}

static inline void outputArray(const QString &a, int len)
{
   if (s_includeStack.isEmpty() || s_curlyCount > 0) {
      s_outputString += a.mid(0, len);
   }
}

static void readIncludeFile(const QString &inc)
{
   static bool searchIncludes = Config::getBool("search-includes");
   uint i = 0;

   // find the start of the include file name
   while (i < inc.length() && (inc.at(i) == ' ' || inc.at(i) == '"' || inc.at(i) == '<')) {
      i++;
   }
   uint s = i;

   // was it a local include?
   bool localInclude = s > 0 && inc.at(s - 1) == '"';

   // find the end of the include file name
   while (i < inc.length() && inc.at(i) != '"' && inc.at(i) != '>') {
      i++;
   }

   if (s < inc.length() && i > s) {
      // valid include file name found

      // extract include path+name
      QString incFileName = inc.mid(s, i - s).trimmed();
      QString dosExt      = incFileName.right(4);

      if (dosExt == ".exe" || dosExt == ".dll" || dosExt == ".tlb") {
         // skip imported binary files (e.g. M$ type libraries)
         return;
      }

      QString oldFileName = s_yyFileName;

      QSharedPointer<FileDef> oldFileDef = s_yyFileDef;
      int oldLineNr = s_yyLineNr;

      // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
      QString absIncFileName = incFileName;
      {
         QFileInfo fi(s_yyFileName);

         if (fi.exists()) {
            QString absName = fi.absolutePath() + "/" + incFileName;

            QFileInfo fi2(absName);
            if (fi2.exists()) {
               absIncFileName = fi2.absoluteFilePath();

            } else if (searchIncludes) {
               const QStringList includePath = Config::getList("include-path");

               for (auto s : includePath) {

                  QFileInfo fi(s);

                  if (fi.exists() && fi.isDir()) {
                     QString absName = fi.absoluteFilePath() + "/" + incFileName;

                     QFileInfo fi2(absName);
                     if (fi2.exists()) {
                        absIncFileName = fi2.absoluteFilePath();
                        break;
                     }

                  }

               }
            }

         }
      }

      DefineManager::instance().addInclude(s_yyFileName, absIncFileName);
      DefineManager::instance().addFileToContext(absIncFileName);

      // findFile will overwrite s_yyFileDef if found
      QSharedPointer<FileState> fs;
      bool alreadyIncluded = false;

      if ((fs = findFile(incFileName, localInclude, alreadyIncluded))) {
         // see if the include file can be found

         if (oldFileDef) {
            // add include dependency to the file in which the #include was found
            bool ambig;

            // change to absolute name
            QSharedPointer<FileDef> incFd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            QSharedPointer<FileDef> temp;
            if (ambig) {
               temp = QSharedPointer<FileDef>();
            } else {
               temp = incFd;
            }

            oldFileDef->addIncludeDependency(temp, incFileName, localInclude, s_isImported, false);

            // add included by dependency
            if (s_yyFileDef) {
               s_yyFileDef->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, s_isImported);
            }

         } else if (s_inputFileDef) {
            s_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, s_isImported, true);

         }

         fs->bufState = YY_CURRENT_BUFFER;
         fs->lineNr   = oldLineNr;
         fs->fileName = oldFileName;

         // push the state on the stack
         s_includeStack.push(fs);

         // set the scanner to the include file

         // Deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# 1 \"%1\" 1\n").formatArg(QString(s_yyFileName));
         outputArray(lineStr, lineStr.length());

         DBG_CTX((stderr, "Switching to include file %s\n", csPrintable(incFileName)));
         s_expectGuard = true;
         s_inputString    = fs->fileBuf;
         s_inputPosition = 0;

         preYY_switch_to_buffer(preYY_create_buffer(0, YY_BUF_SIZE));

      } else {

         if (oldFileDef) {
            bool ambig;

            // change to absolute name for bug 641336
            QSharedPointer<FileDef> fd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            // add include dependency to the file in which the #include was found
            oldFileDef->addIncludeDependency(ambig ? QSharedPointer<FileDef>() : fd, incFileName, localInclude, s_isImported, false);

            // add included by dependency
            if (fd) {
               fd->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, s_isImported);
            }

         } else if (s_inputFileDef) {
            s_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, s_isImported, true);
         }

         if (Debug::isFlagSet(Debug::Preprocessor)) {
            if (alreadyIncluded) {
               Debug::print(Debug::Preprocessor, 0, "#include %s: already included, skipping...\n", csPrintable(incFileName));
            } else {
               Debug::print(Debug::Preprocessor, 0, "#include %s: not found, skipping...\n", csPrintable(incFileName));
            }
         }

         if (s_curlyCount > 0 && !alreadyIncluded) { // failed to find #include inside { ... }
            warn(s_yyFileName, s_yyLineNr, "include file %s was not found, check the value of INCLUDE_PATH", csPrintable(incFileName));
         }
      }
   }
}

static void startCondSection(const QString &sectId)
{
   CondParser prs;

   bool expResult = prs.parse(s_yyFileName, s_yyLineNr, sectId);
   s_condStack.push( QMakeShared<CondCtx>(s_yyLineNr, sectId, s_skip) );

   if (! expResult) {
      s_skip = true;
   }
}

static void endCondSection()
{
   if (s_condStack.isEmpty()) {
      s_skip = false;

   } else {
      QSharedPointer<CondCtx> ctx = s_condStack.pop();
      s_skip = ctx->skip;
   }
}

static void forceEndCondSection()
{
   while (! s_condStack.isEmpty()) {
      s_condStack.pop();
   }

   s_skip = false;
}

static QString escapeAt(const QString &text)
{
   QString result;

   for (auto c : text) {
      if (c == '@') {
         result += "@@";

      } else {
         result += c;
      }
   }

   return result;
}

static char resolveTrigraph(char c)
{
   switch (c) {
      case '=':
         return '#';

      case '/':
         return '\\';

      case '\'':
         return '^';

      case '(':
         return '[';

      case ')':
         return ']';

      case '!':
         return '|';

      case '<':
         return '{';

      case '>':
         return '}';

      case '-':
         return '~';
   }

   return '?';
}

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size)   result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define CopyStringFtn 8
#define Include 9
#define IncludeID 10
#define EndImport 11
#define DefName 12
#define DefineArg 13
#define DefineText 14
#define SkipCPPBlock 15
#define Ifdef 16
#define Ifndef 17
#define SkipCComment 18
#define ArgCopyCComment 19
#define CopyCComment 20
#define SkipVerbatim 21
#define SkipCPPComment 22
#define RemoveCComment 23
#define RemoveCPPComment 24
#define Guard 25
#define DefinedExpr1 26
#define DefinedExpr2 27
#define SkipDoubleQuote 28
#define SkipSingleQuote 29
#define UndefName 30
#define IgnoreLine 31
#define FindDefineArgs 32
#define ReadString 33
#define CondLineC 34
#define CondLineCpp 35
#define SkipCond 36

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

int preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( preYYtext, preYYleng, 1, preYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1399 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6533 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP

	YY_BREAK
case 2:
YY_RULE_SETUP

	YY_BREAK
case 3:
YY_RULE_SETUP

	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // Trigraph
      unput(resolveTrigraph(preYYtext[2]));
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      BEGIN(Command);
      s_yyColNr  += preYYleng;
      s_yyMLines = 0;
   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
      BEGIN(CopyLine);
   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
      // constructors?
      int i;

      for (i = preYYleng - 1; i >= 0; i--) {
         unput(preYYtext[i]);
      }

      BEGIN(CopyLine);
   }
	YY_BREAK
case 8:
/* rule 8 can match eol */
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{

      // function list macro with one (...) argument, e.g. for K_GLOBAL_STATIC_WITH_ARGS
      // function like macro

      static bool skipFuncMacros = Config::getBool("skip-function-macros");

      QString name = QString::fromUtf8(preYYtext);
      name = name.left(name.indexOf('(')).trimmed();

      QSharedPointer<A_Define> def;

      if (skipFuncMacros && name != "Q_PROPERTY" && ! ( (s_includeStack.isEmpty() || s_curlyCount > 0) && s_macroExpansion &&
                  (def = DefineManager::instance().isDefined(name)) && (! s_expandOnlyPredef || def->isPredefined)) ) {

         outputChar('\n');
         s_yyLineNr++;

      } else {
         // do not skip

         for (int i = preYYleng - 1; i >= 0; i--) {
            unput(preYYtext[i]);
         }

         BEGIN(CopyLine);
      }
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_yyLineNr += text.count('\n');
      outputArray(text, text.length());
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (s_includeStack.isEmpty())  {
         s_curlyCount++;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (s_includeStack.isEmpty() && s_curlyCount > 0)  {
         s_curlyCount--;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyString );
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);

      BEGIN( CopyStringFtn );
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_expectGuard = false;
      QSharedPointer<A_Define> def;

      if ((s_includeStack.isEmpty() || s_curlyCount > 0) && s_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                  (! s_expandOnlyPredef || def->isPredefined)) {

         // fount it
         s_roundCount = 0;
         s_defArgsStr = text;

         if (def->nargs == -1) {
            // no function macro

            QString result = def->isPredefined ? def->m_definition : expandMacro(s_defArgsStr);
            outputArray(result, result.length());

         } else {
            // zero or more arguments

            s_findDefArgContext = CopyLine;
            BEGIN(FindDefineArgs);

         }

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((s_includeStack.isEmpty() || s_curlyCount > 0) && s_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                   def->nargs == -1 && (! s_expandOnlyPredef || def->isPredefined)) {

            QString result = def->isPredefined ? def->m_definition : expandMacro(text);
            outputArray(result, result.length());

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 26:
/* rule 26 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      //  strip line continuation characters
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      s_yyLineNr++;
      s_yyColNr = 1;
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      s_defArgsStr += '(';
      s_roundCount++;
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      s_defArgsStr += ')';
      s_roundCount--;

      if (s_roundCount == 0) {
         QString result = expandMacro(s_defArgsStr);

         if (s_findDefArgContext == CopyLine) {
            outputArray(result, result.length());
            BEGIN(s_findDefArgContext);

         } else {
            readIncludeFile(result);
            s_nospaces = false;
            BEGIN(Start);
         }
      }
   }
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("       {
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
   }
  */
case 31:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
    }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
      BEGIN(ArgCopyCComment);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
      BEGIN(ReadString);
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      s_defArgsStr += text[0];
      BEGIN(ReadString);
   }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
      s_defArgsStr += ' ';
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      s_defArgsStr += "@@";
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{
      s_defArgsStr += ' ';
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (getLanguageFromFileName(s_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      s_defArgsStr += text[0];
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      s_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text[0];
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_isImported = text[1] == 'm';

      if (s_macroExpansion) {
         BEGIN(IncludeID);
      }
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_isImported = text[1] == 'm';
      s_incName = text[text.length() - 1];
      BEGIN(Include);
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      s_yyColNr += preYYleng;
      BEGIN(DefName);
   }
	YY_BREAK
case 50:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr.resize(0);
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 51:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr.resize(0);
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 52:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr = "! ";
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 53:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr = "! ";
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 54:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_guardExpr.resize(0);
      BEGIN(Guard);
   }
	YY_BREAK
case 55:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         s_guardExpr.resize(0);
         BEGIN(Guard);

      } else {
         s_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      if (otherCaseDone()) {
         s_ifcount = 0;
         BEGIN(SkipCPPBlock);

      } else {
         setCaseDone(true);
      }
   }
	YY_BREAK
case 57:
YY_RULE_SETUP
{
      BEGIN(UndefName);
   }
	YY_BREAK
case 58:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         s_guardExpr.resize(0);
         BEGIN(Guard);
      }
   }
	YY_BREAK
case 59:
/* rule 59 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      decrLevel();
   }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      s_yyLineNr++;
   }
	YY_BREAK
case 61:
YY_RULE_SETUP
{
      s_expectGuard = false;
   }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(IgnoreLine);
   }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
   }
	YY_BREAK
case 64:
YY_RULE_SETUP

	YY_BREAK
case 65:
YY_RULE_SETUP
{
      s_yyColNr += preYYleng;
   }
	YY_BREAK
case 66:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((def = DefineManager::instance().isDefined(text)) && ! def->nonRecursive) {
         def->undef = true;
      }
      BEGIN(Start);
   }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_guardExpr += ' ';
      s_yyLineNr++;
   }
	YY_BREAK
case 68:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 69:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 70:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_guardExpr += text;
   }
	YY_BREAK
case 71:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_guardExpr += text[0];
   }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{
      unput(*preYYtext);

      bool guard = computeExpression(s_guardExpr);
      setCaseDone(guard);

      if (guard) {
         BEGIN(Start);

      } else {
         s_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 74:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || s_guardName == text) {
         s_guardExpr+=" 1L ";
      } else {
         s_guardExpr+=" 0L ";
      }

      s_lastGuardName = text;
      BEGIN(Guard);
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || s_guardName == text){
         s_guardExpr+=" 1L ";
      } else {
         s_guardExpr+=" 0L ";
      }

      s_lastGuardName = text;
   }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
      // should not happen, handle anyway

      s_yyLineNr++;
      s_ifcount = 0;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 77:
YY_RULE_SETUP
{
      BEGIN(Guard);
   }
	YY_BREAK
case 78:
YY_RULE_SETUP

	YY_BREAK
case 79:
YY_RULE_SETUP
{
      BEGIN(SkipCommand);
   }
	YY_BREAK
case 80:
/* rule 80 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 82:
YY_RULE_SETUP

	YY_BREAK
case 83:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      s_ifcount++;
   }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
      if (s_ifcount == 0 && ! otherCaseDone()) {
         setCaseDone(true);
         BEGIN(Start);
      }
   }
	YY_BREAK
case 85:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (s_ifcount == 0)  {

         if (! otherCaseDone()) {
            s_guardExpr.resize(0);
            s_lastGuardName.resize(0);
            BEGIN(Guard);

         } else {
            BEGIN(SkipCPPBlock);
         }
      }
   }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
      s_expectGuard = false;
      decrLevel();

      if (--s_ifcount < 0) {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(SkipLine);
   }
	YY_BREAK
case 89:
YY_RULE_SETUP

	YY_BREAK
case 90:
YY_RULE_SETUP

	YY_BREAK
case 91:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      BEGIN(SkipString);
   }
	YY_BREAK
case 93:
YY_RULE_SETUP

	YY_BREAK
case 94:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
   }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
      s_lastCPPContext = YY_START;
      BEGIN(RemoveCPPComment);
   }
	YY_BREAK
case 96:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
   }
	YY_BREAK
case 97:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      s_lastCContext=YY_START;
      BEGIN(RemoveCComment);
   }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 103:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_nospaces   = true;
      s_roundCount = 0;
      s_defArgsStr = text;
      s_findDefArgContext = IncludeID;
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_nospaces = true;
      readIncludeFile(expandMacro(text));
      BEGIN(Start);
   }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_incName += text;
      readIncludeFile(s_incName);

      if (s_isImported) {
         BEGIN(EndImport);
      } else {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 106:
/* rule 106 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(Start);
   }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
   }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{
      // define with argument

      s_argDict = QMakeShared<QHash<QString, int>>();

      s_defArgs = 0;
      s_defArgsStr.resize(0);
      s_defText.resize(0);
      s_defLitText.resize(0);

      s_defName    = QString::fromUtf8(preYYtext);
      s_defVarArgs = false;
      s_defExtraSpacing.resize(0);
      BEGIN(DefineArg);
   }
	YY_BREAK
case 110:
/* rule 110 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // special case: define with 1 -> can be "guard"

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_defArgs = -1;
      s_defArgsStr.resize(0);

      s_defName = QString::fromUtf8(preYYtext);
      s_defName = s_defName.left(s_defName.length() - 1).trimmed();
      s_defVarArgs = false;

      if (s_curlyCount > 0 || s_defName != s_lastGuardName || ! s_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + s_defName;
         outputArray(tmp, tmp.length());

         s_quoteArg      = false;
         s_insideComment = false;
         s_lastGuardName.resize(0);
         s_defText    = "1";
         s_defLitText = "1";
         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         s_defText.resize(0);
         s_defLitText.resize(0);
         BEGIN(Start);
      }

      s_expectGuard = false;
   }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{
      // empty define
      QString text = QString::fromUtf8(preYYtext);

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_defArgs = -1;
      s_defName = text;

      s_defArgsStr.resize(0);
      s_defText.resize(0);
      s_defLitText.resize(0);
      s_defVarArgs = false;

      if (s_curlyCount > 0 || s_defName != s_lastGuardName || ! s_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + s_defName;
         outputArray(tmp, tmp.length());

         s_quoteArg      = false;
         s_insideComment = false;

         if (s_insideCS) {
            s_defText="1"; // for C#, use "1" as define text
         }

         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         s_guardName = text;
         s_lastGuardName.resize(0);
         BEGIN(Start);
      }

      s_expectGuard = false;
   }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
      // define with content
      QString text = QString::fromUtf8(preYYtext);

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_defArgs = -1;
      s_defArgsStr.resize(0);

      s_defText.resize(0);
      s_defLitText.resize(0);
      s_defName    = text;
      s_defVarArgs = false;

      QString tmp = "#define " + s_defName + s_defArgsStr;
      outputArray(tmp, tmp.length());

      s_quoteArg      = false;
      s_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{
      s_defExtraSpacing += "\n";
      s_yyLineNr++;
   }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
   }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;
   }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;

      QString tmp = "#define " + s_defName + s_defArgsStr + s_defExtraSpacing;
      outputArray(tmp, tmp.length());

      s_quoteArg      = false;
      s_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
      // Variadic macro
      s_defVarArgs = true;
      s_defArgsStr +=  QString::fromUtf8(preYYtext);

      s_argDict->insert("__VA_ARGS__", s_defArgs);
      s_defArgs++;
   }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defArgsStr += text;

      s_defVarArgs = text.endsWith("...");

      if (s_defVarArgs)  {
         // strip ellipsis
         text = text.left(text.length() - 3);
      }

      text = text.trimmed();

      s_argDict->insert(text, s_defArgs);
      s_defArgs++;
   }
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"  {
      s_defText+=preYYtext;
      s_defLitText+=preYYtext;
      s_insideComment=true;
   }

<DefineText>"* /"          {
      s_defText+=preYYtext;
      s_defLitText+=preYYtext;
      s_insideComment=false;
   }
  */
case 119:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
       QString text = QString::fromUtf8(preYYtext);

      s_defText   += text;
      s_defLitText+= text;
      s_lastCContext = YY_START;
      s_commentCount = 1;
      BEGIN(CopyCComment);
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      s_lastCPPContext  = YY_START;
      s_defLitText     += ' ';
      BEGIN(SkipCPPComment);
   }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (text[0] == '/') {
         outputChar('/');
      }

      outputChar('*');
      outputChar('/');

      if (--s_commentCount <= 0) {

         if (s_lastCContext == Start) {
            // small hack to make sure that ^... rule will
            // match when going to Start... Example: "/*...*/ some stuff..."

            YY_CURRENT_BUFFER->yy_at_bol = 1;
         }

         BEGIN(s_lastCContext);
      }
   }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');

      // s_commentCount++;
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());
      s_yyLineNr += text.count('\n');
   }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());

      s_yyLineNr += text.count('\n');
      s_fenceSize = 0;

      if (text[1] == 'f') {
         s_blockName = "f";

      } else {
         QString bn = text.mid(1);
         int i = bn.indexOf('{');

         // for \code{.c}
         if (i != -1) {
            bn = bn.left(i);
         }

         s_blockName = bn.trimmed();
      }
      BEGIN(SkipVerbatim);
   }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
      // escaped @cond
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      // conditional section
      s_ccomment = true;
      s_condCtx  = YY_START;
      BEGIN(CondLineCpp);
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      // conditional section
      s_ccomment = false;
      s_condCtx  = YY_START;
      BEGIN(CondLineC);
   }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      startCondSection(text);

      if (s_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/", 2);
            s_ccomment = true;

         } else {
            s_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(s_condCtx);

      }
   }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
      // non-guard character
      unput(*preYYtext);
      startCondSection(" ");

      if (s_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/",2);
            s_ccomment = true;

         } else {
            s_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(s_condCtx);
      }
   }
	YY_BREAK
case 134:
/* rule 134 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // no guard
      if (YY_START == SkipCComment) {
         s_ccomment=true;
         // end C comment
         outputArray("*/",2);

      } else {
         s_ccomment = false;
      }

      s_condCtx = YY_START;
      startCondSection(" ");
      BEGIN(SkipCond);
   }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
      s_ccomment = false;
   }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      s_ccomment = true;
   }
	YY_BREAK
case 140:
/* rule 140 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! s_skip) {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 141:
/* rule 141 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      bool oldSkip = s_skip;
      endCondSection();

      if (oldSkip && ! s_skip) {
         if (s_ccomment) {
            outputArray("/** ",4);

            // */ (editor syntax fix)
         }

         BEGIN(s_condCtx);
      }
   }
	YY_BREAK
case 142:
/* rule 142 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      bool oldSkip = s_skip;
      endCondSection();

      if (oldSkip && ! s_skip)  {
         BEGIN(s_condCtx);
      }
   }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      /* end of verbatim block */

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (text[1] == 'f' && s_blockName == "f") {
         BEGIN(SkipCComment);

      } else if (text.mid(4) == s_blockName) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (s_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (s_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 146:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
{
      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      outputChar(*preYYtext);
   }
	YY_BREAK
case 150:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      s_defText    += escapeAt(text);
   }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defLitText += text;

      outputChar('\n');
      s_defText += " ";
      s_yyLineNr++;
      s_yyMLines++;
   }
	YY_BREAK
case 152:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      s_defText    += text;
      BEGIN(s_lastCContext);
   }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_yyLineNr++;
      outputChar('\n');
      s_defLitText += text;
      s_defText+=' ';
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
{
      // see bug 594021 for a usecase for this rule
      if (s_lastCContext == SkipCPPBlock) {
         BEGIN(SkipCommand);

      } else {
         REJECT;
      }
   }
	YY_BREAK
case 155:
YY_RULE_SETUP
{
      BEGIN(s_lastCContext);
   }
	YY_BREAK
case 156:
YY_RULE_SETUP

	YY_BREAK
case 157:
YY_RULE_SETUP

	YY_BREAK
case 158:
YY_RULE_SETUP

	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      s_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 160:
YY_RULE_SETUP

	YY_BREAK
case 161:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
{
      unput(*preYYtext);
      BEGIN(s_lastCPPContext);
   }
	YY_BREAK
case 163:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');
   }
	YY_BREAK
case 164:
YY_RULE_SETUP
{
      outputChar('/');
      outputChar('/');
   }
	YY_BREAK
case 165:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 166:
YY_RULE_SETUP
{
      outputChar(*preYYtext);
   }
	YY_BREAK
case 167:
YY_RULE_SETUP

	YY_BREAK
case 168:
YY_RULE_SETUP

	YY_BREAK
case 169:
YY_RULE_SETUP

	YY_BREAK
case 170:
YY_RULE_SETUP

	YY_BREAK
case 171:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      s_quoteArg   = true;
      s_defLitText += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 172:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defLitText += text;

      if (s_quoteArg) {
         s_defText+="\"";
      }

      if (s_defArgs > 0) {
         auto iter = s_argDict->find(text);

         if (iter != s_argDict->end()) {
            int n = iter.value();

            s_defText += '@';

            QString numStr = QString("%1").formatArg(n);
            s_defText += numStr;

         } else {
            s_defText += text;

         }

      } else {
         s_defText += text;
      }

      if (s_quoteArg) {
         s_defText += "\"";
      }

      s_quoteArg = false;
   }
	YY_BREAK
case 173:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      s_defText    += text;
   }
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defLitText += text;
      outputChar('\n');
      s_defText += ' ';
      s_yyLineNr++;
      s_yyMLines++;
   }
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QString comment = extractTrailingComment(s_defLitText);
      s_defLitText += text;

      if (! comment.isEmpty()) {
         outputArray(comment, comment.length());
         s_defLitText = s_defLitText.left(s_defLitText.length() - comment.length() - 1);
      }

      outputChar('\n');

      QSharedPointer<A_Define> def;

      if (s_includeStack.isEmpty() || s_curlyCount > 0) {
         addDefine();
      }

      def = DefineManager::instance().isDefined(s_defName);

      if (def == nullptr)  {
         // new define

         QSharedPointer<A_Define> nd = newDefine();
         DefineManager::instance().addDefine(s_yyFileName, nd);

      } else if (def) {
         // name already exists

         if (def->undef) {
            // undefined name
            def->undef        = false;
            def->m_name       = s_defName;
            def->m_definition = s_defText.trimmed();
            def->nargs        = s_defArgs;
            def->m_fileName   = s_yyFileName;
            def->lineNr       = s_yyLineNr - s_yyMLines;
            def->columnNr     = s_yyColNr;
         }
      }

      s_argDict = QSharedPointer<QHash<QString, int>>();

      s_yyLineNr++;
      s_yyColNr = 1;
      s_lastGuardName.resize(0);
      BEGIN(Start);
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defText    += ' ';
      s_defLitText += text;
   }
	YY_BREAK
case 177:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defText    += "##";
      s_defLitText += text;
   }
	YY_BREAK
case 178:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      s_defText     += "@@";
      s_defLitText  += text;
   }
	YY_BREAK
case 179:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;

      if (! s_insideComment) {
         BEGIN(SkipDoubleQuote);
      }
   }
	YY_BREAK
case 180:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;

      if (! s_insideComment) {
         BEGIN(SkipSingleQuote);
      }
   }
	YY_BREAK
case 181:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text;
      s_defLitText += text;
   }
	YY_BREAK
case 182:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text;
      s_defLitText += text;
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 184:
YY_RULE_SETUP
{
     QString text = QString::fromUtf8(preYYtext);

      s_defText    += text;
      s_defLitText += text;
   }
	YY_BREAK
case 185:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 186:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
   }
	YY_BREAK
case 187:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      s_defText    += text[0];
      s_defLitText += text;
   }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(CopyStringFtn):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
{
      DBG_CTX((stderr, "End of include file\n"));

      if (s_includeStack.isEmpty()) {
         DBG_CTX((stderr, "Terminating scanner\n"));
         yyterminate();

      } else {
         QSharedPointer<FileState> fs = s_includeStack.pop();

         YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
         preYY_switch_to_buffer(fs->bufState );
         preYY_delete_buffer(oldBuf );

         s_yyLineNr    = fs->lineNr;
         s_inputString    = fs->oldFileBuf;
         s_inputPosition = fs->oldFileBufPos;
         setFileName(fs->fileName);

         DBG_CTX((stderr, "######## FileName %s\n", csPrintable(s_yyFileName)));

         // deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# %1 \"%2\" 2").formatArg(s_yyLineNr).formatArg(QString(s_yyFileName));
         outputArray(lineStr, lineStr.length());
      }
   }
	YY_BREAK
case 189:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
case 190:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      if (YY_START == SkipVerbatim || YY_START == SkipCond) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_lastCContext = YY_START;
         s_commentCount = 1;

         if (preYYleng == 3) {
            s_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 191:
YY_RULE_SETUP
{
      if (YY_START == SkipVerbatim || YY_START == SkipCond || getLanguageFromFileName(s_yyFileName) == SrcLangExt_Fortran) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         s_lastCPPContext = YY_START;

         if (preYYleng == 3) {
            s_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCPPComment);
      }
   }
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      s_yyLineNr++;
   }
	YY_BREAK
case 193:
YY_RULE_SETUP
{
      // utf-8 code point
      QString text  = QString::fromUtf8(preYYtext);
      s_expectGuard = false;

      for (QChar c : text) {
         outputChar(c);
      }
   }
	YY_BREAK
case 194:
YY_RULE_SETUP
{
      // catch all
      QString text  = QString::fromUtf8(preYYtext);
      s_expectGuard = false;

      for (QChar c : text) {
         outputChar(c);
      }
   }
	YY_BREAK
case 195:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 62);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1399 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 62;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1399 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1398);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
int preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static int getNextChar(const QString &expr, QString *rest, uint &pos)
{
   if (pos < expr.length()) {
      return expr.at(pos++).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc  = rest->at(0).unicode();
      *rest   = rest->right(rest->length() - 1);
      return cc;

   } else {
      int cc = yyinput();

      return cc;
   }
}

static int getCurrentChar(const QString &expr, QString *rest, uint pos)
{
   if (pos < expr.length()) {
      return expr.at(pos).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc = rest->at(0).unicode();
      return cc;

   } else {
      int cc = yyinput();

      returnCharToStream(cc);
      return cc;
   }
}

static void unputChar(const QString &expr, QString *rest, uint &pos, char c)
{
   if (pos < expr.length()) {
      pos++;

   } else if (rest) {
      char cs[2];
      cs[0] = c;
      cs[1] = '\0';
      rest->prepend(cs);

   } else {

      returnCharToStream(c);
   }
}

void addSearchDir(const QString &dir)
{
   QFileInfo fi(dir);

   if (fi.isDir()) {
      s_pathList.append(fi.absoluteFilePath());
   }
}

void initPreprocessor()
{
   addSearchDir(".");
   s_expandedDict = QMakeShared<DefineDict>();
}

void removePreProcessor()
{
   s_expandedDict = QSharedPointer<DefineDict>();
   s_pathList.clear();

   DefineManager::deleteInstance();
}

QString preprocessFile(const QString &fileName, const QString &input)
{
   printlex(preYY_flex_debug, true, __FILE__, fileName);

   s_macroExpansion   = Config::getBool("macro-expansion");
   s_expandOnlyPredef = Config::getBool("expand-only-predefined");

   s_skip        = false;
   s_curlyCount  = 0;
   s_nospaces    = false;

   s_inputPosition = 0;
   s_inputString    = input;
   s_outputString   = "";

   s_includeStack.clear();
   s_expandedDict->clear();
   s_condStack.clear();

   uint orgOffset = 0;

   setFileName(fileName);

   s_inputFileDef = s_yyFileDef;
   DefineManager::instance().startContext(s_yyFileName);

   static bool firstTime = true;

   if (firstTime)  {
      // add predefined macros
      static QStringList const preDefinedMacros = Config::getList("predefined-macros");

      for (const auto &definedMacro : preDefinedMacros) {

         int posEquals = definedMacro.indexOf('=');
         int posOpen   = definedMacro.indexOf('(');
         int posClose  = definedMacro.indexOf(')');

         bool nonRecursive = posEquals > 0 && definedMacro.at(posEquals - 1) == ':';

         if (posOpen == 0) {
            // no define name
            continue;
         }

         if (posOpen < posEquals && posClose < posEquals && posOpen != -1  &&
                  posClose != -1  &&  posOpen < posClose) {

            // predefined function macro definition

            // regexp matching an id
            static QRegularExpression regExp_id("[a-z_A-Z\x80-\xFF][a-z_A-Z0-9\x80-\xFF]*");
            QHash<QString, int> argDict;

            int index = posOpen + 1;
            int count = 0;
            int len;

            QRegularExpressionMatch match = regExp_id.match(definedMacro, definedMacro.constBegin() + index);

            // gather the formal arguments in a dictionary
            while (index < posClose) {

               if (match.hasMatch()) {
                  len = match.capturedLength();

                  if (len > 0) {
                     argDict.insert(match.captured(), count);
                     index = match.capturedEnd() - definedMacro.begin();

                     ++count;

                  } else {
                     ++index;
                  }

               } else {
                  break;
               }

               match = regExp_id.match(definedMacro, definedMacro.constBegin() + index);
            }

            // strip definition part
            QString tmp = definedMacro.right(definedMacro.length() - posEquals - 1);
            QString definition;

            index = 0;
            match = regExp_id.match(tmp);

            // substitute all occurrences of formal arguments with their corresponding markers
            while (match.hasMatch()) {

               int p = match.capturedStart() - tmp.constBegin();
               len   = match.capturedLength();

               definition += tmp.mid(index, p - index);

               auto iter = argDict.find(match.captured());

               if (iter != argDict.end()) {
                  int argIndex = iter.value();

                  QString marker = QString(" @%1 ").formatArg(argIndex);
                  definition += marker;

               } else {
                  definition += match.captured();
               }

               index = p + len;
               match = regExp_id.match(tmp, match.capturedEnd());
            }

            if (index < tmp.length()) {
               definition += tmp.mid(index, tmp.length() - index);
            }

            // add define definition to the dictionary of defines for this file
            QString dname = definedMacro.left(posOpen);

            if (! dname.isEmpty()) {
               QSharedPointer<A_Define> def = QMakeShared<A_Define>();

               def->m_name       = dname;
               def->m_definition = definition;
               def->nargs        = count;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = s_yyFileDef;
               def->m_fileName   = fileName;

               DefineManager::instance().addDefine(s_yyFileName, def);
            }

         } else if ((posOpen == -1 || posOpen > posEquals)   &&
                    (posClose == -1 || posClose > posEquals) &&
                    ! definedMacro.isEmpty() && definedMacro.length() > posEquals)  {

            // predefined non-function macro definition
            QSharedPointer<A_Define> def = QMakeShared<A_Define>();

            if (posEquals == -1) {
               // simple define without argument
               def->m_name = definedMacro;
               def->m_definition = "1"; // substitute occurrences by 1 (true)

            } else {
               // simple define with argument
               int ine = posEquals - (nonRecursive ? 1 : 0);
               def->m_name = definedMacro.left(ine);
               def->m_definition = definedMacro.right(definedMacro.length() - posEquals - 1);
            }

            if (! def->m_name.isEmpty()) {
               def->nargs = -1;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = s_yyFileDef;
               def->m_fileName   = fileName;
               DefineManager::instance().addDefine(s_yyFileName, def);
            }
         }
      }
   }

   s_yyLineNr = 1;
   s_yyColNr  = 1;
   s_ifcount  = 0;

   s_levelGuard.clear();

   BEGIN( Start );

   s_expectGuard = determineSection(fileName) == Entry::HEADER_SEC;
   s_guardName.resize(0);
   s_lastGuardName.resize(0);
   s_guardExpr = "";

   preYYlex();

   s_lexInit = true;

   while (! s_condStack.isEmpty()) {
      QSharedPointer<CondCtx> ctx = s_condStack.pop();
      QString sectionInfo = " ";

      if (ctx->sectionId != " ") {
         sectionInfo = QString(" with label '%1' ").formatArg(QString(ctx->sectionId));
      }

      warn(fileName, ctx->lineNr, "Conditional section %s does not have "
           "a corresponding \\endcond command within this file.", csPrintable(sectionInfo));
   }

   // make sure we do not extend a \cond with missing \endcond over multiple files
   forceEndCondSection();

   DefineManager::instance().endContext();
   printlex(preYY_flex_debug, false, __FILE__, fileName);

   return s_outputString;
}

void preFreeScanner()
{
   if (s_lexInit) {
      preYYlex_destroy();
   }
}

