/*************************************************************************
 *
 * Copyright (C) 2014-2017 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License version 2
 * is hereby granted. No representations are made about the suitability of
 * this software for any purpose. It is provided "as is" without express or
 * implied warranty. See the GNU General Public License for more details.
 *
 * Documents produced by DoxyPress are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,int len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 192
#define YY_END_OF_BUFFER 193
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1613] =
    {   0,
      173,  173,  193,  191,  192,    1,  191,  192,  189,  192,
        3,  191,  192,  191,  192,  191,  192,  191,  192,    2,
      191,  192,    6,  191,  192,    1,    6,  191,  192,    6,
      191,  192,    6,  189,  192,    3,    6,  191,  192,    5,
      191,  192,    6,  191,  192,    6,  191,  192,    6,  191,
      192,    6,  191,  192,    6,  191,  192,    2,    6,  191,
      192,   63,  191,  192,    1,   63,  191,  192,   58,  189,
      192,    3,   63,  191,  192,   63,  191,  192,   63,  191,
      192,   60,   63,  191,  192,   60,   63,  191,  192,   60,
       63,  191,  192,   60,   63,  191,  192,   60,   63,  191,

      192,   60,   63,  191,  192,   60,   63,  191,  192,   60,
       63,  191,  192,    2,   63,  191,  192,   87,  191,  192,
        1,   87,  191,  192,   85,  189,  192,    3,   87,  191,
      192,   87,  191,  192,   87,  191,  192,   86,   87,  191,
      192,   86,   87,  191,  192,   86,   87,  191,  192,   86,
       87,  191,  192,    2,   87,  191,  192,   88,   91,  191,
      192,    1,   88,   91,  191,  192,   96,  189,  192,    3,
       88,   91,  191,  192,   90,   91,  191,  192,   91,  191,
      192,   91,  191,  192,   88,   91,  191,  192,   88,   91,
      191,  192,    2,   88,   91,  191,  192,   97,  100,  191,

      192,    1,   97,  100,  191,  192,    3,   97,  100,  191,
      192,   99,  100,  191,  192,   97,  100,  191,  192,   97,
      100,  191,  192,  100,  191,  192,   97,  100,  191,  192,
        2,   97,  100,  191,  192,   27,  191,  192,    1,   27,
      191,  192,   28,  189,  192,    3,   27,  191,  192,   16,
       27,  191,  192,   17,   27,  191,  192,   27,  191,  192,
       27,  191,  192,   25,   27,  191,  192,16408,   27,  191,
      192,   25,   27,  191,  192,16408,   11,   27,  191,  192,
       12,   27,  191,  192,   25,   27,  191,  192,16408,    2,
       27,  191,  192,   18,  191,  192,    1,   18,  191,  192,

       20,  191,  192,   18,  191,  192,   18,  191,  192,  191,
      192,   18,  191,  192,    2,   18,  191,  192,   21,  191,
      192,    1,   21,  191,  192,   23,  191,  192,   21,  191,
      192,   21,  191,  192,  191,  192,   21,  191,  192,    2,
       21,  191,  192,  191,  192,    1,  191,  192,    3,  191,
      192,  191,  192,  191,  192,  191,  192,    2,  191,  192,
      102,  191,  192,  102,  191,  192,  106,  191,  192,    1,
      106,  191,  192,  104,  189,  192,    3,  106,  191,  192,
      106,  191,  192,  106,  191,  192,  106,  191,  192,  106,
      191,  192,    2,  106,  191,  192, 8302,  191,  192,16491,

    16493,16494, 8302,  191,  192,16491,16493,16494,  191,  192,
      113,  191,  192,  114,  191,  192,  112,  191,  192,  191,
      192,  116,  191,  192,  191,  192,  116,  191,  192,  185,
      191,  192,    1,  185,  191,  192,  173,  185,  191,  192,
      172,  189,  192,    3,  185,  191,  192,  176,  185,  191,
      192,  168,  185,  191,  192,  177,  185,  191,  192,  185,
      191,  192,  185,  191,  192,  175,  185,  191,  192,  169,
      185,  191,  192,  185,  191,  192,  169,  185,  191,  192,
        2,  185,  191,  192,   80,  191,  192,    1,   80,  191,
      192,   79,  189,  192,    3,   80,  191,  192,   80,  191,

      192,   80,  191,  192,   80,  191,  192,    2,   80,  191,
      192,   78,   80,  191,  192,    1,   78,   80,  191,  192,
       78,   80,  191,  192,   78,   79,  189,  192,    3,   78,
       80,  191,  192,   77,   80,  191,  192,   78,   80,  191,
      192,   78,   80,  191,  192,   78,   80,  191,  192,    2,
       78,   80,  191,  192,  145,  147,  191,  192,    1,  147,
      191,  192,  146,  189,  192,    3,  145,  147,  191,  192,
      147,  191,  192,  147,  191,  192,  145,  147,  191,  192,
      147,  191,  192,  147,  191,  192,  145,  147,  191,  192,
        2,  145,  147,  191,  192,  145,  147,  191,  192,  147,

      191,  192,  147,  191,  192,  147,  191,  192,   37,   40,
      191,  192,    1,   37,   40,  191,  192,   39,  189,  192,
        3,   37,   40,  191,  192,   40,  191,  192,   37,   40,
      191,  192,   37,   40,  191,  192,   37,   40,  191,  192,
        2,   37,   40,  191,  192,  148,  170,  191,  192,    1,
      148,  170,  191,  192,  150,  189,  192,    3,  148,  170,
      191,  192,  170,  191,  192,  148,  170,  191,  192,  148,
      170,  191,  192,  169,  170,  191,  192,  169,  170,  191,
      192,    2,  148,  170,  191,  192,  147,  191,  192,  147,
      191,  192,  147,  191,  192,  145,  147,  191,  192,  147,

      191,  192,  147,  191,  192,  147,  191,  192,  158,  162,
      163,  191,  192,    1,  158,  163,  191,  192,  159,  189,
      192,    3,  158,  162,  163,  191,  192,  162,  163,  191,
      192,  158,  162,  163,  191,  192,  163,  191,  192,  158,
      162,  163,  191,  192,    2,  158,  162,  163,  191,  192,
      155,  157,  191,  192,    1,  157,  191,  192,  156,  189,
      192,    3,  155,  157,  191,  192,  157,  191,  192,  155,
      157,  191,  192,  155,  157,  191,  192,  155,  157,  191,
      192,    2,  155,  157,  191,  192,  166,  167,  191,  192,
        1,  167,  191,  192,    3,  166,  167,  191,  192,  166,

      167,  191,  192,  166,  167,  191,  192,  166,  167,  191,
      192,    2,  166,  167,  191,  192,   69,  191,  192,    1,
       69,  191,  192,   70,  189,  192,    3,   69,  191,  192,
       69,  191,  192,   69,  191,  192,   68,   69,  191,  192,
       69,  191,  192,   68,   69,  191,  192,   68,   69,  191,
      192,    2,   69,  191,  192,   76,  191,  192,    1,   76,
      191,  192,   74,  189,  192,    3,   76,  191,  192,   76,
      191,  192,   76,  191,  192,   72,   76,  191,  192,   76,
      191,  192,   72,   76,  191,  192,    2,   76,  191,  192,
       75,   76,  191,  192,   73,   76,  191,  192,   73,   76,

      191,  192,  183,  191,  192,    1,  183,  191,  192,    3,
      183,  191,  192,  180,  183,  191,  192,  183,  191,  192,
      183,  191,  192,  183,  191,  192,  183,  191,  192,    2,
      183,  191,  192,  184,  191,  192,    1,  184,  191,  192,
        3,  184,  191,  192,  182,  184,  191,  192,  184,  191,
      192,  184,  191,  192,  184,  191,  192,  184,  191,  192,
        2,  184,  191,  192,   64,  191,  192,   64,  191,  192,
       62,  191,  192,    1,   62,  191,  192,    3,   62,  191,
      192,   62,  191,  192,   62,  191,  192,   62,  191,  192,
       62,  191,  192,    2,   62,  191,  192,   36,  191,  192,

        1,   36,  191,  192,   34,  189,  192,    3,   36,  191,
      192,   33,   36,  191,  192,   36,  191,  192,   29,   36,
      191,  192,   30,   36,  191,  192,   36,  191,  192,   36,
      191,  192,   35,   36,  191,  192,   36,  191,  192,    2,
       36,  191,  192,   44,  191,  192,    1,   44,  191,  192,
        3,   44,  191,  192,   41,   44,  191,  192,   44,  191,
      192,   44,  191,  192,   44,  191,  192,   44,  191,  192,
        2,   44,  191,  192,  131,  191,  192,    1,  131,  191,
      192,  130,  131,  191,  192,    3,  131,  191,  192,  131,
      191,  192,  131,  191,  192,  130,  131,  191,  192,    2,

      131,  191,  192,  134,  135,  191,  192,    1,  134,  135,
      191,  192,  133,  189,  192,    3,  134,  135,  191,  192,
      134,  191,  192,  134,  191,  192,  134,  135,  191,  192,
      134,  191,  192,  134,  135,  191,  192,    2,  134,  135,
      191,  192,  187,  188,  190,    6,    6,    5,    6,    6,
      190,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,  190,   95,  187,   93,  188,   86,   86,   86,
       86,   86,  190,   88,   88,   88,  190,   97,   94,   97,
      187,   92,   97,  188,   97,   98,   97,  190, 8216,   25,
    16408,   26,   25,16408,   25,  190,16408,   18,   18,  187,

       18,  188,   18,   19,   18,  190,   21,   21,  187,   21,
      188,   21,   22,   21,  190,  103,  187,  188,  190,  101,
      102,  102,  190,  104,  187,  188,  105,  190, 8302, 8301,
     8299, 8302,16491,16493,16494, 8302,  190,16491,16493,16494,
      114,  113,  114,  112,  116,  116,  111,  116,  190,  173,
      174,  117,  187,  118,  188,  169,  171,  169,  190,   78,
       78,   77,  145,  119,  121,  187,  120,  188,  145,  145,
      190,  145,   37,   38,   37,  188,   37,   37,  190,  148,
      149,  148,  188,  148,  144,  144,  187,  145,  158,  162,
      158,  162,  160,  162,  187,  161,  162,  188,  158,  162,

      158,  162,  190,  155,  152,  154,  187,  153,  155,  188,
      155,  155,  190,  166,  164,  166,  187,  165,  166,  188,
      166,  166,  190,   68,   65,   68,   68,  190,   72,   71,
       72,  190,   73,   73,  190,  179,  187,  178,  188,  181,
       64,   64,  190,   61,   32,  187,   42,  187,   42,  188,
       43,  130,  130,  190,  135,  187,  188,  135,  135,  190,
      187,  188,    4,   60,   60,   60,   60,   60,   52,   60,
       60,   60,   60,   60,   60,   95,   95,  187,   93,   93,
      188,   86,   86,   86,   81,   86,   86,   89,    4,   88,
       94,   97,   94,   94,   97,  187,   92,   97,   92,   92,

       97,  188,    4,   97,   15,   15,   25,16408,   18,  187,
       18,  188,    4,   18,   21,  187,   21,  188,    4,   21,
      187,  188,    4,    4,  103,  187,  188,    4,  115,  174,
      117,  117,  187,  118,  118,  188,  120,  188,    4,  145,
      145,  124,  123,   37,  188,    4,   37,  148,  188,    4,
      148,  141,  145,  143,  142,  162,  187,  162,  188,    4,
      158,  162,    4,  162,  151,  155,  188,    4,  155,  166,
      187,  166,  188,    4,  166,   68,  178,  188,   31,   32,
      187,  137,  137,  187,  136,  136,  188,    4,  135,  186,
    16391,16391,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   95,  186,   86,   82,   86,   86,   86,
       89,   94,   97,  186,   14,   13,   14,   25,16408,   18,
      186,   21,  186,  186,  186,  108,  116,  120,  122,  145,
      124,  123,  145,  143,  142,  162,  186,  166,  186,   68,
       31,16391,    9, 8199,   60,   60,   53,   56,   54,   54,
       60,   60,   60,   60,   60,   60,   60,   60,   83,   86,
       84,   86,   86,   13,   25,16408,  126,   68, 8199,    9,
       60,   60,   57,   49,   48,   60,   60,   60,   60,   55,
       25,16408,  125,  129,  132,  128,   68,    8,    9,   47,
       51,   50,16429,   46,   10,  127,   68,    9, 8237,   67,

       66,    9, 8237,  140,  139,    9,  138,    9,   59,    9,
        9,    9
    } ;

static yyconst flex_int16_t yy_accept[1395] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    6,    9,   11,   14,
       16,   18,   20,   23,   26,   30,   33,   36,   40,   43,
       46,   49,   52,   55,   58,   62,   65,   69,   72,   76,

       79,   82,   86,   90,   94,   98,  102,  106,  110,  114,
      118,  121,  125,  128,  132,  135,  138,  142,  146,  150,
      154,  158,  162,  167,  170,  175,  179,  182,  185,  189,
      193,  198,  202,  207,  212,  216,  220,  224,  227,  231,
      236,  239,  243,  246,  250,  254,  258,  261,  264,  269,
      272,  277,  281,  285,  290,  294,  297,  301,  304,  307,
      310,  312,  315,  319,  322,  326,  329,  332,  335,  337,
      340,  344,  346,  349,  352,  354,  356,  358,  361,  364,
      367,  370,  374,  377,  381,  384,  387,  390,  393,  397,
      403,  409,  411,  414,  417,  420,  422,  425,  427,  430,

      433,  437,  441,  444,  448,  452,  456,  460,  463,  466,
      470,  474,  477,  481,  485,  488,  492,  495,  499,  502,
      505,  508,  512,  516,  521,  525,  529,  534,  538,  542,
      546,  550,  555,  559,  563,  566,  571,  574,  577,  581,
      584,  587,  591,  596,  600,  603,  606,  609,  613,  618,
      621,  626,  629,  633,  637,  641,  646,  650,  655,  658,
      663,  666,  670,  674,  678,  682,  687,  690,  693,  696,
      700,  703,  706,  709,  714,  719,  722,  728,  732,  737,
      740,  745,  751,  755,  759,  762,  767,  770,  774,  778,
      782,  787,  791,  795,  800,  804,  808,  812,  817,  820,

      824,  827,  831,  834,  837,  841,  844,  848,  852,  856,
      859,  863,  866,  870,  873,  876,  880,  883,  887,  891,
      895,  899,  903,  906,  910,  914,  918,  921,  924,  927,
      930,  934,  937,  941,  945,  949,  952,  955,  958,  961,
      965,  968,  971,  974,  978,  982,  985,  988,  991,  994,
      998, 1001, 1005, 1008, 1012, 1016, 1019, 1023, 1027, 1030,
     1033, 1037, 1040, 1044, 1047, 1051, 1055, 1059, 1062, 1065,
     1068, 1071, 1075, 1078, 1082, 1086, 1090, 1093, 1096, 1100,
     1104, 1108, 1113, 1116, 1121, 1124, 1127, 1131, 1134, 1138,
     1143, 1144, 1145, 1145, 1146, 1147, 1148, 1149, 1150, 1151,

     1151, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
     1160, 1161, 1162, 1164, 1166, 1168, 1169, 1170, 1171, 1172,
     1174, 1175, 1175, 1175, 1176, 1178, 1179, 1182, 1185, 1186,
     1187, 1189, 1189, 1189, 1189, 1190, 1192, 1193, 1193, 1195,
     1198, 1199, 1201, 1203, 1204, 1205, 1207, 1208, 1210, 1212,
     1213, 1214, 1216, 1216, 1217, 1218, 1219, 1219, 1220, 1220,
     1221, 1222, 1224, 1224, 1225, 1226, 1227, 1227, 1228, 1228,
     1229, 1230, 1231, 1232, 1236, 1236, 1241, 1241, 1242, 1243,
     1244, 1245, 1245, 1246, 1246, 1247, 1248, 1250, 1251, 1251,
     1252, 1254, 1256, 1257, 1258, 1258, 1260, 1261, 1262, 1263,

     1264, 1265, 1267, 1269, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1272, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1274, 1275, 1277, 1278, 1280, 1281, 1282,
     1284, 1285, 1286, 1288, 1288, 1288, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1291, 1292, 1293, 1296, 1299, 1301, 1301,
     1301, 1304, 1305, 1306, 1308, 1311, 1312, 1314, 1315, 1318,
     1321, 1322, 1324, 1325, 1326, 1326, 1327, 1329, 1330, 1331,
     1333, 1334, 1336, 1338, 1340, 1341, 1342, 1344, 1345, 1345,
     1345, 1345, 1347, 1349, 1351, 1352, 1353, 1355, 1356, 1357,
     1358, 1359, 1359, 1359, 1361, 1362, 1363, 1364, 1364, 1364,

     1364, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
     1373, 1374, 1375, 1376, 1377, 1379, 1380, 1382, 1383, 1384,
     1385, 1386, 1387, 1388, 1388, 1389, 1389, 1389, 1391, 1393,
     1394, 1397, 1399, 1400, 1403, 1405, 1406, 1406, 1407, 1407,
     1407, 1409, 1411, 1413, 1415, 1417, 1419, 1421, 1422, 1423,
     1424, 1426, 1427, 1428, 1429, 1429, 1429, 1430, 1430, 1431,
     1432, 1434, 1435, 1437, 1439, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1442, 1442, 1443, 1444, 1446,
     1448, 1450, 1452, 1452, 1453, 1454, 1454, 1455, 1456, 1458,

     1460, 1463, 1465, 1465, 1465, 1465, 1466, 1468, 1470, 1472,
     1474, 1476, 1477, 1479, 1479, 1480, 1480, 1480, 1482, 1483,
     1485, 1486, 1488, 1490, 1490, 1491, 1491, 1491, 1492, 1492,
     1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
     1503, 1504, 1506, 1507, 1509, 1510, 1511, 1511, 1512, 1512,
     1515, 1516, 1518, 1518, 1518, 1520, 1522, 1524, 1525, 1526,
     1527, 1528, 1529, 1529, 1529, 1529, 1530, 1530, 1530, 1530,
     1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
     1530, 1530, 1530, 1530, 1531, 1531, 1532, 1533, 1533, 1534,
     1534, 1535, 1536, 1538, 1538, 1538, 1540, 1541, 1541, 1542,

     1542, 1542, 1542, 1543, 1543, 1544, 1544, 1545, 1546, 1547,
     1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
     1559, 1560, 1560, 1561, 1563, 1564, 1564, 1564, 1565, 1565,
     1565, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1570, 1570, 1571, 1571, 1572, 1573, 1573, 1573, 1574,
     1575, 1576, 1577, 1578, 1579, 1580, 1581, 1581, 1581, 1583,
     1583, 1583, 1583, 1584, 1584, 1584, 1584, 1584, 1584, 1584,

     1584, 1584, 1585, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1587, 1588, 1588, 1588, 1588, 1588, 1589, 1589, 1590,
     1590, 1591, 1591, 1592, 1593, 1594, 1595, 1595, 1595, 1595,
     1595, 1595, 1596, 1596, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1598, 1598, 1598, 1598, 1598, 1599, 1599, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1601, 1602, 1602, 1602, 1602,
     1602, 1603, 1603, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1605, 1606, 1606, 1606, 1606, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1609, 1609, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611,
     1611, 1611, 1611, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,

     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,

     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,

     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,    1,   15,   16,   17,   18,   19,   20,   19,
       19,   19,   19,   19,   19,   21,   21,   22,    1,   23,
       24,   25,   26,   27,   28,   28,   29,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       30,   31,   32,    1,   28,   33,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   43,   50,   51,   52,   53,   54,   43,   55,
       56,   43,   57,   10,   58,   59,    1,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,   10,    8,   11,    1,    8,   12,   13,   14,   14,
       14,    1,   15,    1,    1,    1,   16,   17,   17,    1,
       18,    1,   19,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,    1,    1,   19,   17,
       17,    1
    } ;

static yyconst flex_int16_t yy_base[1526] =
    {   0,
        0,    4,    9,   71,  133,    0,  195,    0,  256,  266,
      276,  283,  345,    0,  406,  410,  416,  444,  456,  482,
      544,    0,  605,  609,  644,    0,  705,    0,  767,    0,
      615,  828,  833,  837,  843,  848,  909,  970,  882,  915,
     1032,    0,  426,  931,  920, 1093, 1099, 1104,  961, 1110,
     1172,    0, 1234,    0, 1284,    0, 1344, 1348, 1354, 1382,
     1417,    0, 1386, 1477, 1538, 1599, 1486, 1492, 1661,    0,
        0,    0, 1722, 1783, 4193, 6446, 6446, 6446, 6446,    1,
     4158, 4119, 6446, 6446, 6446, 1845, 6446, 6446, 6446,    2,
     4145,    4,    0, 4106, 6446, 6446, 6446, 6446, 6446,    3,

     4135,    0, 4106, 4113,    0,    2, 4089, 4091, 4069, 6446,
     6446, 6446, 6446, 6446,   20, 4098,    0,    5, 4084, 4061,
     6446,    0,    0, 6446,    0, 6446, 4085,   22, 4085, 4046,
        0,    0,    0,    0, 6446,   25, 4071,    0, 4036,    0,
     6446, 6446, 6446, 6446, 6446, 4060,   28, 4064,   51,   24,
      461, 6446, 6446,  641, 6446,    0,    0, 6446,   39, 4058,
        0, 4023,    0,    0,    0, 6446,   46, 4048,    0, 4006,
        0,   44,  268,  272,  297,  298,  431,  288,    0,  419,
     4057, 4052, 6446, 4047,  258,   33,   63,  260, 4038,  489,
      861,  256, 4038, 4026, 4025, 4002,   41, 4014,  283, 6446,

     6446,  288, 6446, 6446, 6446, 4008, 6446,  285, 3985, 6446,
        0,  261, 3946, 6446, 6446, 6446, 6446, 6446,  292, 3975,
     3936, 6446, 6446, 6446,  313, 6446, 6446, 6446,  294, 3961,
     3926, 6446,    0, 6446, 6446,    0, 3966,  311, 3957, 1881,
     6446, 3914,    0,  436,  480, 3940, 3902,    0,    0, 6446,
        0, 3938,  312, 3925, 3886,    0,    0,    0, 6446,    0,
     3923,  317, 3903,    0, 3868,    0, 3901,  318,  295,  615,
      898, 3885, 3854,  407,    0, 6446,  417,  412,  478,  483,
      842,  497,    0, 6446, 6446,    0, 3893,  508, 3860, 3822,
        0,    0, 6446,    0,  509, 3854, 3813,    0, 6446, 6446,

     6446, 6446,  510, 3837,    0,  335, 3820, 3797, 6446, 6446,
     6446, 6446, 6446,  511, 3829,    0, 3831, 3774, 6446, 6446,
        0, 3759, 6446, 6446, 6446, 6446,  516, 3792,    0, 3744,
     6446, 6446, 6446, 6446, 6446,  517, 3764,    0, 3728, 6446,
        0, 3719, 6446, 6446, 6446,  518, 3751,  337, 3704, 6446,
     6446, 6446, 6446, 6446, 6446, 3731, 6446, 6446,  519, 3735,
     6446, 3697, 6446, 6446, 6446, 6446, 6446,  524, 3724,    0,
     3688, 6446, 6446, 6446,    0, 6446,  594, 3716, 3681, 6446,
        0,    0, 6446,    0, 6446,  607, 3712,  599, 3659,    0,
     3704, 3685,  993, 3642, 6446, 1936, 6446,  630,    0,  635,

      286,  442,    0, 3654, 3635,  401, 3635,  977, 3614, 3625,
     3614, 3609, 3585, 3627, 3616,    0,  446, 3595, 1104, 3566,
        0, 3614,  492, 1121, 3562,    0,  608,  849, 1292, 6446,
     3543, 3591,  623,  657, 6446,  867, 6446, 3583, 1422, 1297,
        0, 3572, 3554, 1417, 6446, 3498,    0, 3542, 3529, 1503,
     6446, 3485,  426, 6446,  868,  650, 1993,  890,  831, 6446,
      837,  925, 3528, 6446,  854,  472, 2015, 6446, 3526,  858,
      949, 6446, 6446,  988, 3525, 1364,  875, 3522, 3515, 3513,
     3507, 3492,  874, 3489,  990, 6446, 1360,  873, 3479, 3483,
      610,  942,    0, 6446, 3467, 3410, 6446,  951, 6446,    0,

     6446,  614, 3438, 1555, 2005, 3394, 3392, 3384, 3377, 3382,
     3380, 3361, 3371, 3356, 3340,  953, 1340, 3361, 3334, 1093,
     3357, 3312,    0, 6446, 3352, 1570, 3295,    0, 6446, 3336,
     1616, 6446, 3326, 3279,  874, 1378, 1472, 3291, 3256, 1338,
     3280, 3241,  937,    0,    0, 3284, 3279, 2059,  972, 3245,
     1103,    0, 1012, 3272, 3266, 1631, 3218,    0, 3263, 3256,
     1719, 3195,    0, 6446, 3250, 3201, 3178,    0, 6446, 3164,
        0, 3150, 3194, 3181, 6446,    0, 3138, 6446, 3187, 3171,
      521, 3167, 3163, 3151, 6446,    0, 3108,    0,  988, 1007,
     1739, 3125, 3115, 3098, 3131, 6446, 6446, 1018,  690, 1126,

     3127, 3089, 3081, 3080, 3076, 3070, 6446, 3073, 3068, 3056,
     3050, 3054, 3054,    0, 3073,    0,    0, 3048, 3039, 3026,
     6446, 3029, 3025, 3046, 6446, 3045, 1129,    0,    0,    0,
     1371, 1092,    0, 1128,    0, 6446, 3043, 3022, 1465, 1529,
     1532, 3010,    0,    0, 3005,    0,    0, 1376,  878, 1143,
     6446, 1138, 3018, 3016, 1023,  895, 6446, 3002, 3003, 6446,
     2987, 6446, 6446, 2983,    0, 2946, 2944, 2944, 1566, 2928,
     2939, 2933, 2905, 2914, 2896, 1106, 1095, 2901, 2889, 2875,
     2875, 2881, 2869, 2868, 1744, 1447, 2879, 2844,    0,    0,
        0,    0, 2864, 6446, 1753, 1526, 2867, 2837, 2870,    0,

     1380,    0, 2839, 2838, 1154, 6446,    0,    0, 2857,    0,
        0, 2832, 6446, 2854, 6446, 2853, 1481, 2844, 6446, 2824,
     6446, 6446,    0, 2804, 6446, 1157, 2820, 1756, 2819, 1768,
     2792, 2780, 1557, 2084, 2786, 2775, 2775, 2759, 2749, 2754,
     2760,    0, 1586, 1361, 2749, 2744, 2767, 6446, 1594, 1400,
     6446, 6446, 1596, 1647, 1788,    0,    0, 1335, 2769, 6446,
     6446, 2753, 1385, 1494, 2732, 6446, 2722, 2714, 2714, 2721,
     2705, 2709, 2714, 2713, 2707, 1615, 2705, 2691, 2696, 2685,
     2682, 2693, 2679, 1435, 1454, 2692, 2660, 1781, 1508, 1465,
     2679, 2647,    0, 2658, 2666,    0, 2653, 2688, 6446, 1755,

     2661, 2682, 2010, 1776, 2144, 2147, 6446, 2657, 2654, 6446,
     6446, 1549, 2648, 2204, 1155, 2647, 2630, 2643, 2640, 2670,
     6446, 1555, 2632,    0, 1618, 2659, 2657, 6446, 2656, 1803,
     1998, 2627, 2627, 2627, 1765, 2608, 2597, 2603, 2589, 2584,
     2589, 2572, 2264, 1791, 2570, 1816, 2568, 2567, 2544, 2549,
     2541, 2549, 2535, 2521, 2516, 2508, 2523, 2522, 2497, 2494,
     2485, 1825, 2491, 2515, 2514, 2470, 1632, 2267, 2270, 1303,
     1644, 2273, 2281, 2293, 2469, 2495, 1762, 2458, 6446, 1726,
     6446, 1799, 1906, 2457, 2491, 2490, 2451, 1911, 2297, 2302,
     2486, 2439, 1836, 2430, 2428, 2417, 2419, 2408, 2419, 2404,

     2392, 1929, 6446, 2031, 2400, 2393, 2388, 2386, 2386, 2385,
     2376, 2381, 2387, 1538, 2377, 2369, 2373, 2378, 2362, 2366,
     2044, 2358, 2345, 2307, 2313, 1415, 6446, 2329, 2336, 2339,
     2388, 1831, 1820, 6446, 2050, 6446, 1366, 1918, 2150, 2362,
     2339, 6446, 2305, 2359, 2312, 2310, 2309, 2305, 2307, 2304,
     2293, 2292, 2278, 2059, 2287, 2286, 2269, 2266, 2252, 2243,
     2252, 2237, 2243, 2157, 2118, 2043, 2028, 2026, 2033, 2010,
     1908, 2019, 2368, 2372, 2375, 2379, 2384,    0, 2007, 2153,
     2395, 2045, 1979, 2075, 1986, 1987, 1967, 1961, 1951, 1854,
     1800, 1768, 1768,    0, 1749, 1754, 1736, 1728, 1706, 1691,

     1694, 1692, 1700, 1686, 2017, 6446,    0, 2400, 2405, 2411,
     2434, 2439,    0, 1622, 2156, 2442, 2460, 1605,    0, 1590,
     1588, 1585, 1562, 6446, 1552, 1554, 1530, 1524, 1517, 1512,
     1503, 1480, 6446, 2466, 2470, 2455, 2481, 2497, 1482, 2167,
     2501, 2477, 1460, 6446, 1446, 1444, 1439, 1376, 1349, 1305,
     1291, 1257, 1108, 2511, 2517, 2506, 2537, 2540, 6446, 2170,
     2543, 2532, 1057, 1044,  930,  905,  885,  811, 2548, 2562,
     2568, 2573, 2576, 2173, 2599, 2582,  609,  605,  453, 2588,
     2604, 2609, 2618, 2624, 2183, 2631, 2644,  458, 2647, 2650,
     2654, 2674, 2680, 2186, 2686, 2705,  367, 2710, 2713, 2343,

     2717, 2735, 2741, 2744, 2754, 2760, 2772, 2777, 2782, 2786,
     2792, 2800, 2803, 2813, 2816, 2819, 2832, 2835, 2841, 2847,
     2851, 2854, 2864, 2868, 2874, 2879, 2887, 2890, 2902, 2905,
     2911, 2921, 2925, 2936, 2929, 2941, 2951, 2946, 2957, 2967,
     2961, 2972, 2978, 2984, 2992, 2995, 3006, 3009, 3022, 3012,
     3027, 3033, 3039, 3043, 3046, 3056, 3061, 3071, 3067, 3077,
     3081, 3094, 3097, 3103, 3113, 3117, 3127, 3122, 3132, 3138,
     3143, 3149, 3152, 3162, 3168, 3171, 3182, 3185, 3189, 3199,
     3202, 3208, 3213, 3218, 3222, 3228, 3232, 3238, 3244, 3248,
     3254, 3259, 3264, 3268, 3278, 3284, 3287, 3299, 3302, 3305,

     3315, 3318, 3324, 3329, 3334, 3338, 3344, 3348, 3354, 3360,
     3364, 3370, 3375, 3380, 3384, 3394, 3400, 3403, 3415, 3418,
     3421, 3431, 3434, 3440, 3445, 3450, 3454, 3460, 3464, 3470,
     3476, 3480, 3486, 3491, 3496, 3500, 3510, 3516, 3519, 3531,
     3534, 3537, 3547, 3550, 3556, 3561, 3566, 3570, 3576, 3580,
     3586, 3592, 3596, 3602, 3607, 3612, 3616, 3626, 3632, 3635,
     3647, 3650, 3653, 3663, 3666, 3672, 3677, 3682, 3686, 3692,
     3696, 3702, 3708, 3712, 3718, 3723, 3728, 3732, 3742, 3748,
     3751, 3763, 3766, 3769, 3779, 3782, 3788, 3793, 3798, 3802,
     3808, 3812, 3818, 3824, 3828, 3834, 3839,  404, 3844, 3849,

     3857, 3863, 3867, 3873, 3880, 3885, 3890, 3895, 3900, 3905,
     3912, 3918, 3922, 3928, 3931,  262, 3935, 3940, 3945, 3950,
     3955, 3960, 3963, 3967, 3973, 3977, 3986, 3990, 3995, 4000,
     4005, 4010, 4018, 4022, 4028, 4032, 4035, 4041, 4045, 4050,
     4055, 4060, 4065, 4068, 4073, 4077, 4083, 4090, 4096, 4100,
     4105, 4110, 4115, 4123, 4128, 4132, 4138, 4141, 4145, 4151,
     4155, 4160, 4165, 4170, 4173, 4178, 4183, 4187, 4196, 4200,
     4206, 4210, 4215, 4220, 4228, 4233, 4238, 4242, 4245, 4251,
     4255, 4261, 4265, 4270, 4275, 4278, 4283, 4288, 4293, 4300,
     4306, 4310, 6446, 4367, 4386, 4405, 4424, 4443, 4462, 4481,

     4500, 4519, 4538, 4557, 4576, 4595, 4614, 4633, 4652, 4671,
     4690, 4709, 4728,  981, 1297, 1422, 4747, 4766, 4785, 4804,
     4823, 4840, 4857, 4876, 4895, 4914, 4933, 4950, 4967, 4984,
     5000, 1570, 5017, 5036, 5053, 5072, 5091, 5110, 5129, 5148,
     5167, 1621, 1911, 2008, 5186, 2052, 5205, 5224, 5241, 5258,
     2150, 2166, 5277, 5296, 2167, 5315, 5334, 5353, 5372, 5391,
     5410, 5429, 5446, 5463, 5482, 5501, 5518, 5535, 5552, 5568,
     2179, 5585, 5604, 5621, 5640, 5659, 5678, 5697, 5716, 5735,
     2180, 2185, 2186, 2265, 5754, 5773, 5790, 5807, 5826, 5845,
     2273, 5864, 5883, 2274, 5902, 5921, 5940, 5959, 5978, 5997,

     6016, 6033, 6050, 6069, 6088, 6107, 6126, 6145, 6164, 6183,
     6202, 6221, 2305, 6240, 6259, 6278, 6297, 6316, 6335, 6352,
     6369, 2311, 6388, 6407, 6426
    } ;

static yyconst flex_int16_t yy_def[1526] =
    {   0,
     1394, 1394, 1394, 1393, 1393,    5, 1393,    7, 1395, 1395,
     1396, 1396, 1393,   13, 1397, 1397, 1398, 1398, 1399, 1399,
     1393,   21, 1400, 1400,   21,   25, 1393,   27, 1393,   29,
     1401, 1402, 1394, 1394, 1394, 1394, 1403, 1403, 1404, 1404,
     1393,   41,   38,   38, 1405, 1405, 1406, 1406, 1407, 1407,
     1393,   51, 1393,   53,   53,   55, 1408, 1408, 1409, 1409,
       25,   61, 1410, 1410, 1411, 1411, 1412, 1412, 1393,   69,
       69,   69, 1413, 1413, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1414, 1414, 1414, 1393, 1393, 1393, 1393, 1393, 1393,

     1393, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1416, 1416, 1416, 1416,
     1393, 1417, 1417, 1393, 1417, 1393, 1418, 1393, 1417, 1417,
     1417, 1419, 1419, 1419, 1393, 1419, 1419, 1420, 1419, 1419,
     1393, 1393, 1393, 1393, 1393, 1421, 1393, 1393, 1422, 1393,
     1422, 1393, 1393, 1422, 1393, 1423, 1423, 1393, 1423, 1423,
     1424, 1423, 1423, 1425, 1425, 1393, 1425, 1425, 1426, 1425,
     1425, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1428, 1428,
     1429, 1429, 1393, 1429, 1429, 1429, 1393, 1429, 1429, 1430,
     1430, 1393, 1393, 1393, 1393, 1393, 1431, 1393, 1431, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1432, 1393, 1432, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1433, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1434, 1393, 1393, 1434, 1393, 1393, 1434, 1393,
     1393, 1434, 1434, 1434, 1393, 1393, 1393, 1435, 1435, 1393,
     1435, 1393, 1435, 1435, 1435, 1435, 1436, 1436, 1393, 1436,
     1393, 1436, 1436, 1432, 1432, 1436, 1393, 1393, 1393, 1434,
     1393, 1393, 1393, 1437, 1438, 1393, 1437, 1439, 1437, 1393,
     1437, 1437, 1440, 1393, 1393, 1440, 1393, 1440, 1440, 1440,
     1440, 1441, 1393, 1441, 1441, 1441, 1441, 1441, 1393, 1393,

     1393, 1393, 1393, 1393, 1442, 1393, 1442, 1442, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1443, 1393, 1443, 1393, 1393,
     1444, 1444, 1393, 1393, 1393, 1393, 1393, 1393, 1445, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1445, 1393, 1393,
     1446, 1446, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1447, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1448,
     1393, 1393, 1393, 1393, 1449, 1393, 1393, 1393, 1449, 1393,
     1450, 1450, 1393, 1450, 1393, 1393, 1450, 1393, 1450, 1450,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1451, 1451, 1451,

     1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1453, 1454, 1455, 1455, 1455, 1455, 1455,
     1456, 1457, 1458, 1456, 1456, 1459, 1460, 1461, 1459, 1393,
     1459, 1393, 1462, 1393, 1393, 1463, 1393, 1393, 1463, 1463,
     1464, 1464, 1464, 1464, 1393, 1464, 1465, 1465, 1465, 1465,
     1393, 1465, 1466, 1393, 1466, 1466, 1466, 1466, 1393, 1393,
     1467, 1467, 1468, 1393, 1468, 1468, 1468, 1393, 1393, 1468,
     1393, 1393, 1393, 1469, 1393, 1469, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1470, 1393, 1470, 1393, 1393, 1393,
     1393, 1393, 1471, 1393, 1393, 1471, 1393, 1472, 1393, 1473,

     1393, 1393, 1393, 1473, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1473, 1473, 1393, 1393, 1393, 1393,
     1393, 1393, 1474, 1393, 1474, 1474, 1474, 1475, 1393, 1475,
     1475, 1393, 1393, 1393, 1393, 1473, 1393, 1393, 1393, 1393,
     1393, 1393, 1476, 1477, 1478, 1478, 1478, 1476, 1393, 1393,
     1476, 1479, 1393, 1393, 1479, 1479, 1479, 1480, 1480, 1480,
     1480, 1480, 1481, 1393, 1393, 1481, 1481, 1482, 1393, 1482,
     1483, 1483, 1393, 1393, 1393, 1484, 1484, 1393, 1393, 1485,
     1486, 1393, 1393, 1393, 1393, 1487, 1487, 1488, 1393, 1393,
     1488, 1393, 1393, 1488, 1393, 1393, 1393, 1393, 1489, 1393,

     1490, 1491, 1491, 1491, 1491, 1491, 1393, 1491, 1491, 1491,
     1491, 1491, 1491, 1492, 1492, 1493, 1493, 1494, 1494, 1494,
     1393, 1494, 1494, 1495, 1393, 1393, 1393, 1496, 1497, 1498,
     1497, 1499, 1500, 1499, 1501, 1393, 1393, 1393, 1393, 1393,
     1502, 1503, 1503, 1503, 1504, 1504, 1504, 1505, 1505, 1505,
     1393, 1506, 1506, 1506, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1473, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1473, 1393, 1393, 1393, 1507, 1507,
     1508, 1508, 1393, 1393, 1473, 1393, 1393, 1393, 1509, 1509,

     1510, 1509, 1393, 1393, 1393, 1393, 1511, 1511, 1512, 1512,
     1512, 1513, 1393, 1514, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1488, 1393, 1393, 1489, 1515, 1393, 1490, 1393,
     1491, 1491, 1491, 1393, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1492, 1494, 1494, 1494, 1494, 1516, 1393, 1393, 1497,
     1393, 1393, 1393, 1393, 1502, 1503, 1504, 1505, 1506, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1473, 1393, 1393, 1393, 1393, 1473, 1393,
     1393, 1393, 1509, 1393, 1393, 1512, 1513, 1517, 1393, 1393,

     1393, 1515, 1518, 1393, 1393, 1393, 1393, 1491, 1491, 1393,
     1393, 1393, 1491, 1393, 1491, 1491, 1491, 1491, 1491, 1491,
     1393, 1393, 1494, 1494, 1494, 1393, 1393, 1393, 1393, 1393,
     1502, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1513, 1393, 1393, 1393, 1518, 1518, 1518, 1393,
     1518, 1393, 1393, 1393, 1491, 1491, 1393, 1393, 1393, 1393,
     1393, 1491, 1491, 1491, 1491, 1393, 1393, 1393, 1502, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,

     1519, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1513, 1393, 1518, 1518, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1520, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1521, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1519, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1513, 1393, 1518, 1518, 1393, 1393, 1393, 1522, 1393, 1393,
     1393, 1393, 1521, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1523, 1393, 1393, 1393, 1393, 1393, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1524, 1518, 1518, 1393,
     1393, 1393, 1522, 1393, 1393, 1393, 1393, 1393, 1525, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1518, 1518, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1518, 1518, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1518, 1518,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1518,
     1518, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1518, 1518,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1518, 1518, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393,    0, 1393, 1393, 1393, 1393, 1393, 1393, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393
    } ;

static yyconst flex_int16_t yy_nxt[6509] =
    {   0,
     1393,   77,  459,   78,   79,   77,  630,   78,   79, 1393,
       77,  460,   78,   79,  391,  391,  391,   80,  392,  392,
      392,   80,  400,  400,  400,   81,   80,  437,  438,   81,
      630,  400,  400,  414,   81,  414,  464,  415,  427,  415,
      408,  391,  428,  483,  406,  392,  407,  409,  410,  417,
      454,  418,  442,  434,  434,  434,  443,  484,  467,  448,
       82,   83,  435,  449,   82,   83,  468,  469,  454,   82,
       83,   84,   85,   86,   87,   88,   84,   84,   89,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   90,   84,
       84,   84,   84,   84,   84,   84,   91,   84,   92,   92,

       84,   84,   84,   84,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   84,   84,   84,
       93,   94,   95,   96,   97,   96,   98,   99,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      100,   96,   96,   96,   96,   96,   96,   96,  101,   96,
      102,  102,   96,   96,   96,   96,  102,  102,  103,  104,
      105,  102,  102,  102,  106,  102,  102,  102,  102,  102,
      102,  107,  102,  102,  102,  108,  102,  102,  102,   96,
       96,   96,  102,  109,  110,  111,  112,  111,  113,  114,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  115,  111,  111,  111,  111,  111,  111,  111,
      116,  111,  117,  117,  111,  111,  111,  111,  117,  117,
      117,  117,  118,  117,  117,  117,  119,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  111,  111,  111,  117,  120,  121,  123,  477,  124,
      125,  464,  126,  464,  494,  495,  127,  123,  478,  124,
      125,  465,  126,  128,  454,  466,  127,  133,  454,   78,
      134,  129,  135,  128,  133,  483,   78,  134,  600,  135,
      488,  129,  454,  136,  454,  489,  454,  601,  491,  484,

      136,  137,  492,  454,  454,  414,  138,  414,  137,  415,
      455,  415,  454,  138,  456,  498,  130,  131,  942,  470,
      499,  454,  454,  457,  502,  391,  130,  131,  503,  525,
      391,  533,  534,  535,  530,  392,  139,  140,  564,  565,
      578,  579,  487,  139,  140,  141,  142,  141,  143,  144,
      141,  145,  141,  141,  141,  146,  141,  141,  141,  141,
      141,  141,  147,  141,  141,  141,  141,  141,  141,  141,
      148,  141,  149,  149,  141,  150,  141,  141,  149,  149,
      149,  149,  151,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  152,  153,  141,  149,  154,  155,  157,  544,   78,
       79,  157,  158,   78,   79,  435,  158,  165,  544,   78,
       79,  459,  694,  159,  545,  546,  166,  159,  233,  547,
      460,  160,  454,  167,  545,  160,  161,  454,  516,  267,
      161,  168,  604,  268,  600,  165,  169,   78,   79,  517,
      454,  605,  269,  601,  166,  454,  269,  173,  241,   78,
      174,  167,   76,  434,  434,  434,  162,  163,  518,  168,
      162,  163,  435,  175,  169,  464,  170,  171,  462,  544,
       76,  176,  520,  173,  241,   78,  174,  618,   76,  653,
      458,  471,  472,  517,  519,  545,  619,  501,  544,  175,

      473,  402, 1097,  548,  170,  171,   76,  176,  694,  549,
      627,  627,  518,  549,  545,  439,  177,  178,  550,  475,
      508,  554,  559,  391,  391,  555,  560,  392,  392,  573,
      391,  391,  582,  574,  392,  392,  392,  583,  519,  717,
      717,  584,  177,  178,   76,   77,   76,   78,   79,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   80,   76,   76,   76,   76,   76,   76,   76,   81,
       76,  179,  179,   76,   76,   76,   76,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

       76,   76,   76,  179,  180,   83,  182,  391,  183,  184,
      182,  392,  183,  184,  630,  660,  216,  536,  217,  218,
      589,  631,  185,  661,  590,  592,  185,  595,  537,  592,
      186,  501,  219,  638,  186,  187,  593,  598,  630,  187,
      220,  639,  639,  434,  434,  434,  599,  538,  400,  400,
      400, 1088,  435,  400,  400,  400,  454,  400,  400,  640,
      640,  640,  400,  400,  835,  188,  189,  649,  435,  188,
      189,  190,  190,  539,  454,  221,  222,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,

      440,  727,  728,  190,  191,   76,   77,  192,   78,   79,
       76,   76,   76,   76,   76,   76,  193,  194,   76,  195,
       76,  196,   80,   76,   76,   76,   76,   76,   76,   76,
       81,   76,  197,  197,   76,  198,   76,   76,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,   76,   76,   76,  197,  199,   83,  200,  201,  202,
      203,  204,  200,  205,  206,  200,  200,  207,  200,  200,
      200,  200,  200,  200,  208,  200,  200,  200,  200,  200,
      200,  200,  209,  210,  211,  211,  200,  212,  200,  200,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  200,  200,  200,  211,  213,  214,  224,
      225,  226,  227,  459,   77,  228,   78,   79,   77,  459,
       78,   79,  460,  544,   77,  229,   78,   79,  460,   77,
       80,   78,   79,  230,   80,  633,  694,  464,   81,  545,
       80,  464,   81,  471,  472,   80,  634,  652,   81,  434,
      434,  434,  473,   81,  454,  488,  483,  477,  435,  633,
      489,  648,  694,  249,  454,  250,  251,  478,  231,  232,
      484,  475,  454,   82,   83,  252,  454,   82,   83,  253,

      540,  551,  454,   82,   83,  694,  473,  254,   82,   83,
      234,  537,  235,  236,  454,  532,  249,  470,  250,  251,
      476,  275,  237,  276,  277,  475,  238,  459,  252, 1079,
      538,  694,  253,  270,  239,  240,  460,  278,  544,  240,
      254,  241,  255,  256,  271,  279,  280,  662,  268,  458,
      280,  471,  472,  498,  545,  685,  539,  269,  499,  663,
      694,  269,  293,  272,  276,  294,  517,  241,  655,  242,
      243,  234,  244,  235,  236,  255,  256, 1078,  295,  607,
      281,  282,  607,  245,  462,  518,  296,  238,  607,  273,
      471,  472,  483,  719,  401,  239,  240,  401,  597,  473,

      240,  720,  246,  597,  597,  597,  484,  703,  597,  668,
      597,  519,  721,  608,  705,  597,  597,  597,  475,  706,
      598,  297,  298,  609,  722,  760,  760,  760,  247,  599,
      242,  243,  257,  258,  257,  259,  260,  257,  257,  257,
      257,  257,  257,  257,  257,  261,  257,  257,  257,  262,
      257,  257,  257,  257,  257,  257,  257,  263,  257,  264,
      264,  257,  257,  257,  257,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  257,  257,
      257,  264,  265,  266,  275,  686,  276,  277,  633,  776,

      284, 1077,  285,  286,  544,  284,  621,  285,  286,  621,
      278,  293,  287,  276,  294,  621,  288,  287,  279,  280,
      545,  288,  633,  280,  289,  518,  628,  295,  600,  289,
      775,  597,  628,  628,  633,  296,  628,  601,  597,  748,
      622,  464,  773,  628,  628,  628,  776,  749,  749,  454,
      623,  519,  774,  281,  282,  759,  705,  880,  633,  290,
      291,  706,  551,  694,  290,  291,  881,  454,  727,  728,
      297,  298,  299,  300,  299,  301,  302,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  303,
      299,  299,  299,  299,  299,  299,  299,  304,  299,  305,

      305,  299,  306,  299,  299,  305,  305,  305,  307,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  299,  299,
      299,  305,  308,  309,  310,  311,  310,  312,  313,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  314,  310,  310,  310,  310,  310,  310,  310,  315,
      310,  316,  316,  310,  317,  310,  310,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      310,  310,  310,  316,  318,  319,  320,  635, 1068,  434,

      434,  434,  635,  635,  635,  926,  927,  635,  435,  635,
      403,  321,  321,  403,  635,  635,  635,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      696,  454,  520,  321,  322,  324,  694,   78,  325,  324,
      326,   78,  325,  517,  326,  333,  440,   78,  334,  454,
      694,  327,  483,  822,  335,  327,  471,  472,  937,  328,
      538,  336,  518,  328,  329,  473,  484,  630,  329,  337,
      695,  544,  454,  333,  338,   78,  334,  344,  750,   98,
      345,  537,  335,  758,  475, 1067,  539,  545,  519,  336,

      454,  630,  823,  346,  330,  331,  630,  337,  330,  331,
      538,  347,  338,  979,  339,  340,  348,  926,  927,  487,
     1066,  832,  644,  476,  434,  434,  434,  644,  644,  644,
      630,  833,  644,  435,  644,  416,  539,  784,  416,  644,
      644,  644,  339,  340,  341,  341,  349,  350,  517,  785,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  641,  540,  752,  341,  342,  344,  518,
       98,  345, 1065,  753,  753,  537,  518,  365, 1064,   78,
      366,  799,  367,  365,  346,   78,  366,  538,  367,  800,

      800,  835,  347,  368,  538,  519, 1063,  348,  647,  368,
      789,  369,  519,  597,  647,  647,  370,  369,  647, 1059,
      647,  537,  370,  539, 1053,  647,  647,  647,  790,  834,
      539,  754,  754,  754,  434,  434,  434,  349,  350,  352,
      435,  353,  354,  435,  355,  835,  371,  372,  356,  357,
      358,  877,  371,  372, 1052,  359, 1051,  822,  538,  810,
      665, 1050,  810,  360,  361,  665,  665,  665,  810,  755,
      665, 1049,  597,  964,  766,  690, 1048,  665,  665,  665,
      690,  690,  690,  493,  539,  690,  493,  690,  821,  694,
      878,  821,  690,  690,  690,  766,  887,  821,  362,  363,

      352, 1047,  353,  354,  625,  355,  828,  776, 1046,  356,
      357,  358,  827,  827,  829,  829,  359,  846,  846,  846,
      621,  692,  766,  621,  360,  361,  692,  692,  692,  621,
      835,  692, 1045,  692,  563, 1393,  708,  563,  692,  692,
      692,  708,  708,  708,  870,  835,  708, 1393,  708,  830,
      830,  830, 1043,  708,  708,  708,  870, 1039,  435,  362,
      363,  373,  374,  375,   78,  376,  375,  373,  373,  373,
      375,  373,  375,  375,  373,  373,  375,  375,  377,  375,
      375,  375,  373,  373,  373,  373,  378,  373,  375,  375,
      373,  373,  373,  373,  375,  375,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  373,  373,  373,
      375,  379,  380,  382,  711,  383,  384,  385,  880,  711,
      711,  711, 1032, 1031,  711,  385,  711,  881, 1030,  386,
     1029,  711,  711,  711,  597, 1028,  784,  387,  388,  723,
      723,  723,  388, 1027,  723,  789,  597,  517,  804,  805,
      806,  723,  723,  723,  877,  715,  537,  893,  893,  893,
      806,  806,  806,  865,  865, 1026,  518,  807,  872,  873,
      874,  776,  389,  390,  382,  538,  383,  384,  385,  807,
      434,  434,  434,  902,  903,  904,  385,  807, 1025,  435,

      386,  933,  519,  878,  776,  888,  888,  888,  387,  388,
      934,  539,  807,  388,  435, 1023,  854,  855,  846,  846,
      846,  856,  933,  835,  807,  857,  858,  921,  903,  904,
      859,  934,  807,  810,  860,  861,  810,  831,  893,  893,
      893, 1022,  810,  389,  390,  395,  395,  396,  395,  395,
      395,  395,  397,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  398,  398,  395,  395,  395,  395,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,

      399,  395,  395,  395,  399,  399,  395,  505,  935,  835,
     1005,  505,  936,  939,  939,  939,  506,  507,  508, 1006,
      821,  509,  435,  821,  568,  510,  511,  568,  936,  821,
      512,  902,  903,  904,  513,  514,  395,  395,  396,  395,
      395,  395,  395,  397,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  398,  398,  395,  395,  395,  395,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  395,  395,  395,  399,  399,  395,  650,  454,

      434,  434,  434,  650,  650,  650,  835, 1021,  650,  435,
      650, 1020,  868,  805,  869,  650,  650,  651,  464, 1005,
      654,  571,  870, 1019,  571,  654,  654,  654, 1006, 1018,
      654,  871,  654,  904,  903,  904,  984,  654,  654,  654,
      666,  667,  668,  669,  889,  670,  921,  903,  904,  671,
      672, 1017,  935, 1014,  673, 1007,  936, 1004,  674,  675,
      544,  846,  846,  846,  701,  576,  871, 1003,  576,  701,
      701,  701,  936, 1002,  701, 1001,  702,  893,  893,  893,
     1000,  701,  701,  701,  811,  811,  812,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,

      811,  811,  403,  403,  403,  811,  811,  811,  811,  811,
      811,  403,  403,  811,  811,  811,  811,  403,  403,  403,
      403,  403,  403,  403,  403,  813,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      811,  811,  811,  403,  403,  811,  874,  874,  874,  874,
      874,  874,  980,  980,  980, 1015, 1015, 1015, 1040, 1040,
     1040,  435,  999,  401,  435,  807,  401,  435,  807, 1060,
     1060, 1060, 1074, 1074, 1074, 1085, 1085, 1085,  435,  403,
      416,  435,  403,  416,  435, 1094, 1094, 1094, 1100, 1100,
     1100,  998,  493,  563,  435,  493,  563,  435,  568,  571,

      807,  568,  571,  807,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  403,  403,  403,  879,  879,  879,  879,  879,
      879,  403,  403,  879,  879,  879,  879,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      879,  879,  879,  403,  403,  879,  846,  846,  846,  924,
      873,  925,  925,  874,  925,  928,  929,  930,  576,  870,
      694,  576,  870,  930,  930,  930,  403,  416,  871,  403,
      416,  871,  776,  997,  807,  930,  930,  930,  776,  940,

      940,  940,  807,  941,  893,  893,  893,  776,  435,  973,
      929,  974,  996,  995,  807,  974,  930,  974,  563,  870,
      901,  563,  994,  871, 1013,  870,  871, 1013,  871,  807,
      993,  975,  976,  977,  871,  954,  992,  807,  977,  977,
      977,  977,  977,  977,  991, 1103, 1103, 1103,  990,  807,
      807,  989,  988,  942,  435,  987,  986,  807,  943,  985,
      807,  944,  984,  871,  981,  981,  981,  982,  941,  871,
     1008,  976, 1009,  435, 1009,  977, 1009, 1010, 1011, 1012,
      870, 1012, 1012, 1012,  870,  807, 1012, 1012, 1012,  871,
      931,  972,  807,  871,  971,  807,  807, 1016, 1016, 1016,

      807,  941, 1034, 1011, 1035,  807,  435, 1035, 1012, 1035,
      970,  969,  870, 1036, 1037, 1038,  968,  870,  942,  967,
      966,  871,  965,  963,  871,  962,  871,  961,  871,  960,
      959,  807,  807,  958,  957,  807, 1038, 1038, 1038,  956,
      807, 1038, 1038, 1038, 1041, 1041, 1041,  955,  941,  954,
      952,  942,  951,  435,  950,  807,  871, 1056, 1057, 1058,
      807,  871, 1042, 1042, 1042,  949,  941,  807, 1054, 1037,
     1055,  948, 1055, 1038, 1055,  947,  807,  946,  870, 1062,
     1062, 1062,  870, 1058, 1058, 1058,  945,  871,  944,  938,
      807,  871,  886,  937,  883,  807,  932,  931,  942, 1058,

     1058, 1058,  807, 1061, 1061, 1061,  405,  941, 1071, 1072,
     1073,  807,  435, 1069, 1057, 1070,  942,  923,  807, 1070,
     1058, 1070,  871,  870,  715,  715,  871,  807,  922,  870,
      920,  919,  871,  942, 1076, 1076, 1076,  807,  871, 1073,
     1073, 1073, 1073, 1073, 1073, 1075, 1075, 1075,  918,  941,
     1080, 1072, 1081,  807,  435,  917,  916,  942,  807,  915,
      870,  807,  807,  914, 1081, 1073, 1081,  871,  913,  871,
     1082, 1083, 1084,  871,  870, 1084, 1084, 1084, 1084, 1084,
     1084,  912,  911,  871, 1087, 1087, 1087,  910,  942,  807,
     1089, 1083, 1090,  807,  807,  909,  807,  807,  908,  942,

      870, 1086, 1086, 1086,  871,  941, 1090, 1084, 1090,  871,
      435, 1091, 1092, 1093,  907,  906,  870,  905,  871,  900,
     1093, 1093, 1093,  899,  807,  871, 1093, 1093, 1093,  807,
      807,  898,  807, 1095, 1095, 1095,  897,  941,  942,  807,
      896,  895,  435,  894,  871,  807, 1096, 1096, 1096, 1098,
     1092, 1099, 1099, 1093, 1099,  942, 1091, 1092, 1093,  870,
      871,  892,  870,  891,  890,  807,  828,  625,  871,  625,
      743,  871,  886,  885,  807,  807, 1093, 1093, 1093,  884,
      807,  883, 1093, 1093, 1093,  882,  733,  942, 1101, 1101,
     1101,  876,  941,  875,  803,  807,  866,  435,  715,  863,

      942,  807,  862,  871,  833,  792,  871, 1102, 1102, 1102,
      807,  791, 1098, 1092, 1099, 1099, 1093, 1099,  787, 1104,
     1104, 1104,  870,  941,  786,  870,  853,  852,  435,  851,
      807,  871,  850,  849,  871,  848,  807, 1105, 1105, 1105,
      847,  845,  942, 1106, 1106, 1106, 1107, 1107, 1107,  844,
      941,  843,  435,  842,  841,  435, 1108, 1108, 1108,  840,
      839,  942, 1109, 1109, 1109,  838,  871,  837,  836,  871,
      762,  435,  464,  942, 1110, 1110, 1110,  625,  941, 1111,
     1111, 1111,  825,  435, 1112, 1112, 1112,  824, 1113, 1113,
     1113,  942,  941,  435, 1114, 1114, 1114,  435,  820,  819,

      942,  818, 1115, 1115, 1115, 1116, 1116, 1116,  817,  941,
      942,  435,  816,  815,  435, 1117, 1117, 1117, 1118, 1118,
     1118, 1119, 1119, 1119,  814,  941,  809,  435,  942,  808,
      435,  730,  803,  942, 1120, 1120, 1120, 1121, 1121, 1121,
      801,  725,  942, 1122, 1122, 1122,  435,  941,  942, 1123,
     1123, 1123,  435, 1124, 1124, 1124, 1125, 1125, 1125,  942,
      941,  725,  435,  715,  715,  435, 1126, 1126, 1126,  942,
     1127, 1127, 1127,  797,  796,  942, 1128, 1128, 1128,  435,
      941, 1129, 1129, 1129,  795,  435,  794,  793,  942, 1130,
     1130, 1130, 1131, 1131, 1131,  792,  941,  942,  435,  791,

      788,  435,  787,  942, 1132, 1132, 1132, 1133, 1133, 1133,
      942,  786,  783, 1134, 1134, 1134,  435,  941,  782,  781,
      942,  780,  435, 1135, 1135, 1135,  779, 1136, 1136, 1136,
      942, 1138, 1138, 1138,  778,  942,  435,  777, 1137, 1137,
     1137,  772,  941, 1139, 1139, 1139,  942,  435, 1141, 1141,
     1141,  771,  435, 1140, 1140, 1140,  770,  941,  942, 1142,
     1142, 1142,  435, 1144, 1144, 1144,  769,  942,  435, 1143,
     1143, 1143,  768,  941, 1145, 1145, 1145,  942,  435,  767,
     1146, 1146, 1146,  435,  941,  942, 1147, 1147, 1147,  435,
      765,  764,  942,  763, 1148, 1148, 1148, 1149, 1149, 1149,

      762,  941,  942,  435,  725,  659,  435,  942, 1150, 1150,
     1150, 1151, 1151, 1151, 1153, 1153, 1153,  942,  761,  464,
      435,  464,  757,  942, 1152, 1152, 1152,  756,  941, 1154,
     1154, 1154,  751,  435,  942, 1155, 1155, 1155,  435,  941,
      942, 1156, 1156, 1156,  435, 1157, 1157, 1157, 1158, 1158,
     1158,  942,  941,  751,  435,  625,  625,  435, 1159, 1159,
     1159,  622,  942, 1160, 1160, 1160,  746,  745,  942, 1162,
     1162, 1162,  435, 1161, 1161, 1161,  744,  941,  942, 1163,
     1163, 1163,  435, 1164, 1164, 1164,  743,  941,  435,  942,
      742,  741,  435,  740,  739,  942, 1165, 1165, 1165, 1166,

     1166, 1166,  942,  738,  737, 1167, 1167, 1167,  435,  941,
      736,  735,  942,  734,  435, 1168, 1168, 1168,  733, 1169,
     1169, 1169,  732,  942, 1171, 1171, 1171,  942,  435, 1170,
     1170, 1170,  731,  941, 1172, 1172, 1172,  942,  435,  730,
     1173, 1173, 1173,  435,  941, 1174, 1174, 1174,  725,  435,
      942, 1175, 1175, 1175, 1176, 1176, 1176,  594,  941,  942,
      435,  724,  668,  435, 1177, 1177, 1177,  587,  596,  942,
     1178, 1178, 1178, 1179, 1179, 1179,  595,  941,  942,  435,
      718,  715,  435,  942, 1180, 1180, 1180, 1181, 1181, 1181,
      578, 1182, 1182, 1182,  942,  941,  435,  577,  713,  942,

      435, 1183, 1183, 1183, 1184, 1184, 1184,  595,  942,  572,
     1185, 1185, 1185,  435,  941, 1186, 1186, 1186,  942,  435,
     1187, 1187, 1187,  570, 1188, 1188, 1188,  942,  941,  435,
     1189, 1189, 1189,  435, 1190, 1190, 1190,  567,  942,  712,
     1191, 1191, 1191,  435,  941,  942, 1192, 1192, 1192,  435,
     1193, 1193, 1193,  564,  562,  942, 1194, 1194, 1194,  435,
      941, 1195, 1195, 1195,  942,  435, 1196, 1196, 1196,  942,
     1197, 1197, 1197,  710,  941,  435,  709,  557,  942,  435,
     1198, 1198, 1198,  707,  942,  595, 1199, 1199, 1199, 1200,
     1200, 1200,  704,  941,  942,  435,  700,  699,  435,  698,

      942, 1201, 1201, 1201, 1202, 1202, 1202, 1203, 1203, 1203,
      942,  941,  697,  435,  542,  942,  435, 1204, 1204, 1204,
     1205, 1205, 1205,  541,  942,  693, 1206, 1206, 1206,  435,
      941, 1207, 1207, 1207,  942,  435, 1208, 1208, 1208,  595,
     1209, 1209, 1209,  942,  941,  435, 1210, 1210, 1210,  435,
     1211, 1211, 1211,  691,  527,  942, 1212, 1212, 1212,  435,
      941,  942, 1213, 1213, 1213,  435, 1214, 1214, 1214,  689,
      688,  942, 1215, 1215, 1215,  435,  941, 1216, 1216, 1216,
      942,  435, 1217, 1217, 1217,  942, 1218, 1218, 1218,  687,
      941,  435,  522,  521,  942,  435, 1219, 1219, 1219,  515,

      942,  684, 1220, 1220, 1220, 1221, 1221, 1221,  683,  941,
      942,  435,  682,  681,  435,  680,  942, 1222, 1222, 1222,
     1223, 1223, 1223, 1224, 1224, 1224,  942,  941,  679,  435,
      678,  942,  435, 1225, 1225, 1225, 1226, 1226, 1226,  677,
      942,  676, 1227, 1227, 1227,  435,  941, 1228, 1228, 1228,
      942,  435, 1229, 1229, 1229,  664, 1230, 1230, 1230,  942,
      941,  435, 1231, 1231, 1231,  435, 1232, 1232, 1232,  496,
      494,  942, 1233, 1233, 1233,  435,  941,  942, 1234, 1234,
     1234,  435, 1235, 1235, 1235,  659,  490,  942, 1236, 1236,
     1236,  435,  941, 1237, 1237, 1237,  942,  435, 1238, 1238,

     1238,  942, 1239, 1239, 1239,  658,  941,  435,  657,  481,
      942,  435, 1240, 1240, 1240,  480,  942,  479, 1241, 1241,
     1241, 1242, 1242, 1242,  480,  941,  942,  435,  656,  468,
      435,  464,  942, 1243, 1243, 1243, 1244, 1244, 1244, 1245,
     1245, 1245,  942,  941,  452,  435,  646,  942,  435, 1246,
     1246, 1246, 1247, 1247, 1247,  645,  942,  446, 1248, 1248,
     1248,  435,  941, 1249, 1249, 1249,  942,  435, 1250, 1250,
     1250,  643, 1251, 1251, 1251,  942,  941,  435, 1252, 1252,
     1252,  435, 1253, 1253, 1253,  642,  437,  942, 1254, 1254,
     1254,  435,  941,  942, 1255, 1255, 1255,  435, 1256, 1256,

     1256,  636,  431,  942, 1257, 1257, 1257,  435,  941, 1258,
     1258, 1258,  942,  435, 1259, 1259, 1259,  942, 1260, 1260,
     1260,  425,  941,  435,  625,  420,  942,  435, 1261, 1261,
     1261,  620,  942,  617, 1262, 1262, 1262, 1263, 1263, 1263,
      615,  941,  942,  435,  413,  613,  435,  612,  942, 1264,
     1264, 1264, 1265, 1265, 1265, 1266, 1266, 1266,  942,  941,
      611,  435,  610,  942,  435, 1267, 1267, 1267, 1268, 1268,
     1268,  606,  942,  603, 1269, 1269, 1269,  435,  941, 1270,
     1270, 1270,  942,  435, 1271, 1271, 1271,  602, 1272, 1272,
     1272,  942,  941,  435, 1273, 1273, 1273,  435, 1274, 1274,

     1274,  394,  596,  942, 1275, 1275, 1275,  435,  941,  942,
     1276, 1276, 1276,  435, 1277, 1277, 1277,  595,  594,  942,
     1278, 1278, 1278,  435,  941, 1279, 1279, 1279,  942,  435,
     1280, 1280, 1280,  942, 1281, 1281, 1281,  591,  941,  435,
      587,  393,  942,  435, 1282, 1282, 1282,  394,  942,  393,
     1283, 1283, 1283, 1284, 1284, 1284,  394,  941,  942,  435,
      393,  581,  435,  394,  942, 1285, 1285, 1285, 1286, 1286,
     1286, 1287, 1287, 1287,  942,  941,  393,  435,  577,  942,
      435, 1288, 1288, 1288, 1289, 1289, 1289,  394,  942,  393,
     1290, 1290, 1290,  435,  941, 1291, 1291, 1291,  942,  435,

     1292, 1292, 1292,  394, 1293, 1293, 1293,  942,  941,  435,
     1294, 1294, 1294,  435, 1295, 1295, 1295,  393,  572,  942,
     1296, 1296, 1296,  435,  941,  942, 1297, 1297, 1297,  435,
     1298, 1298, 1298,  570,  569,  942, 1299, 1299, 1299,  435,
      941, 1300, 1300, 1300,  942,  435, 1301, 1301, 1301,  942,
      941, 1302, 1302, 1302,  393,  435,  567,  566,  942, 1303,
     1303, 1303,  393,  941,  942, 1304, 1304, 1304,  435, 1305,
     1305, 1305,  562,  941,  942, 1306, 1306, 1306,  435,  561,
      942,  557, 1307, 1307, 1307,  556,  941, 1308, 1308, 1308,
      942,  435, 1309, 1309, 1309,  942,  941, 1310, 1310, 1310,

      942,  435, 1311, 1311, 1311,  942,  941, 1312, 1312, 1312,
      553,  435,  542,  942, 1313, 1313, 1313,  541,  532,  942,
     1314, 1314, 1314,  942, 1315, 1315, 1315,  496,  531,  942,
     1316, 1316, 1316, 1317, 1317, 1317,  942, 1318, 1318, 1318,
      529,  942, 1319, 1319, 1319,  527,  942, 1320, 1320, 1320,
      526,  942, 1321, 1321, 1321,  524,  942, 1322, 1322, 1322,
      522,  942, 1323, 1323, 1323, 1324, 1324, 1324,  942, 1325,
     1325, 1325,  521,  515,  942, 1326, 1326, 1326,  942, 1327,
     1327, 1327,  504,  501,  942,  394,  393,  942, 1328, 1328,
     1328,  942, 1329, 1329, 1329,  394,  942, 1330, 1330, 1330,

      393,  942, 1331, 1331, 1331,  496,  942, 1332, 1332, 1332,
      393,  942, 1333, 1333, 1333,  490,  942,  486,  482,  942,
     1334, 1334, 1334,  942, 1335, 1335, 1335,  481,  480,  942,
     1336, 1336, 1336,  942, 1337, 1337, 1337, 1338, 1338, 1338,
      479,  464,  942, 1339, 1339, 1339,  942, 1340, 1340, 1340,
      464,  942, 1341, 1341, 1341,  464,  942, 1342, 1342, 1342,
      464,  942, 1343, 1343, 1343,  452,  942, 1344, 1344, 1344,
     1345, 1345, 1345,  450,  942, 1346, 1346, 1346,  942, 1347,
     1347, 1347,  446,  444,  942, 1348, 1348, 1348,  942,  393,
      433,  942, 1349, 1349, 1349,  431,  429,  942, 1350, 1350,

     1350,  942, 1351, 1351, 1351,  425,  942, 1352, 1352, 1352,
      424,  942, 1353, 1353, 1353,  423,  942, 1354, 1354, 1354,
      420,  942,  419,  393,  942, 1355, 1355, 1355,  413,  942,
     1356, 1356, 1356,  942, 1357, 1357, 1357,  412,  411,  942,
     1358, 1358, 1358, 1359, 1359, 1359,  942, 1360, 1360, 1360,
      405,  404,  942, 1361, 1361, 1361,  942, 1362, 1362, 1362,
      393,  942, 1363, 1363, 1363,  402,  942, 1364, 1364, 1364,
      393,  942, 1365, 1365, 1365, 1366, 1366, 1366,  394,  942,
     1367, 1367, 1367,  393,  942, 1368, 1368, 1368,  942, 1369,
     1369, 1369, 1393, 1393,  942, 1393, 1393,  942, 1370, 1370,

     1370,  942, 1371, 1371, 1371, 1393, 1393,  942, 1372, 1372,
     1372,  942, 1373, 1373, 1373, 1393,  942, 1374, 1374, 1374,
     1393,  942, 1375, 1375, 1375, 1393,  942, 1393, 1393,  942,
     1376, 1376, 1376, 1393,  942, 1377, 1377, 1377, 1393,  942,
     1378, 1378, 1378,  942, 1379, 1379, 1379, 1380, 1380, 1380,
     1393, 1393,  942, 1381, 1381, 1381,  942, 1382, 1382, 1382,
     1393, 1393,  942, 1383, 1383, 1383,  942, 1384, 1384, 1384,
     1393,  942, 1385, 1385, 1385, 1393,  942, 1386, 1386, 1386,
     1387, 1387, 1387, 1393,  942, 1388, 1388, 1388, 1393,  942,
     1389, 1389, 1389, 1393,  942, 1390, 1390, 1390,  942, 1393,

     1393,  942, 1391, 1391, 1391, 1393, 1393,  942, 1392, 1392,
     1392,  942, 1316, 1316, 1316, 1393, 1393,  942, 1393, 1393,
     1393,  942, 1393, 1393, 1393, 1393,  942, 1393, 1393, 1393,
     1393,  942, 1393, 1393,  942, 1393, 1393, 1393, 1393,  942,
     1393, 1393, 1393, 1393,  942, 1393, 1393, 1393, 1393,  942,
     1393, 1393, 1393, 1393, 1393, 1393,  942, 1393, 1393, 1393,
     1393, 1393,  942, 1393, 1393, 1393,  942,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,

      122,  122,  122,  122,  122,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  283,  283,  283,  283,  283,

      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,

      351,  351,  351,  351,  351,  351,  351,  351,  351,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  421,  421,  421,
     1393,  421,  421, 1393,  421, 1393,  421,  421,  421, 1393,
      421,  421,  421,  421,  421,  421,  422,  422,  422, 1393,
      422,  422,  422,  422, 1393,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  426,  426,  426, 1393,  426,
      426, 1393,  426,  426,  426,  426,  426,  426,  426,  426,

      426,  426, 1393,  426,  430,  430,  430, 1393,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  432,  432,  432, 1393,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  436,  436,  436, 1393, 1393, 1393, 1393,  436,
     1393, 1393, 1393,  436, 1393, 1393,  436,  441,  441,  441,
     1393, 1393,  441, 1393,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441, 1393,  441,  445,  445,  445, 1393,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  447,  447,  447, 1393, 1393,

      447,  447,  447, 1393,  447,  447,  447,  447,  447,  447,
      447,  447, 1393,  447,  451,  451,  451, 1393,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  453,  453,  453, 1393,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  461, 1393, 1393, 1393, 1393, 1393, 1393,  461,
     1393, 1393, 1393,  461, 1393, 1393,  461,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463, 1393,  463,  474,  474, 1393, 1393,
     1393, 1393, 1393,  474, 1393, 1393, 1393,  474, 1393, 1393,

      474,  474,  485, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393,  485, 1393,  485, 1393, 1393,  485,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  500, 1393,  500, 1393,
      500,  500,  500,  500,  500,  500, 1393,  500, 1393,  500,
      500, 1393,  500,  523,  523,  523, 1393,  523,  523,  523,
      523,  523,  523, 1393,  523,  523,  523,  523,  523,  523,
      523,  523,  528,  528,  528, 1393,  528,  528,  528,  528,
      528,  528, 1393,  528,  528,  528,  528,  528, 1393,  528,
      528,  543,  543,  543, 1393,  543,  543,  543,  543,  543,

      543,  543,  543,  543,  543,  543, 1393,  543, 1393,  543,
      544,  544,  544, 1393,  544,  544,  544,  544,  544,  544,
      544,  544, 1393,  544,  544, 1393,  544, 1393,  544,  545,
     1393,  545, 1393,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545, 1393,  545, 1393,  545,  552, 1393,
      552, 1393,  552,  552,  552,  552,  552,  552, 1393,  552,
      552,  552,  552,  552,  552,  552,  552,  558, 1393,  558,
     1393,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  575,  575,  575, 1393,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  580,  580,  580, 1393,  580,
      580,  580,  580, 1393,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  585,  585,  585, 1393,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  586, 1393, 1393,  586, 1393,  586, 1393,
      586, 1393,  586, 1393,  586, 1393, 1393,  586,  588,  588,
      588, 1393,  588, 1393,  588,  588,  588,  588, 1393,  588,
     1393,  588,  588, 1393,  588, 1393,  588,  614,  614,  614,
     1393,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  616,  616,  616, 1393,

      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  421,  421,  421, 1393,  421,
      421, 1393,  421, 1393,  421,  421,  421, 1393,  421,  421,
      421,  421,  421,  421,  624,  624,  624, 1393,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624, 1393,  624,  626,  626,  626, 1393,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  426,  426,  426, 1393,  426,  426, 1393,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426, 1393,
      426,  629,  629,  629, 1393,  629,  629,  629,  629,  629,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      632,  632,  632, 1393,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  637,
      637,  637, 1393,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  436,  436,
      436, 1393, 1393, 1393, 1393,  436, 1393, 1393, 1393,  436,
     1393, 1393,  436,  441,  441,  441, 1393, 1393,  441, 1393,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
     1393,  441,  447,  447,  447, 1393, 1393,  447,  447,  447,
     1393,  447,  447,  447,  447,  447,  447,  447,  447, 1393,

      447,  453,  453,  453, 1393,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      461, 1393, 1393, 1393, 1393, 1393, 1393,  461, 1393, 1393,
     1393,  461, 1393, 1393,  461,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463, 1393,  463,  474,  474, 1393, 1393, 1393, 1393,
     1393,  474, 1393, 1393, 1393,  474, 1393, 1393,  474,  474,
      485, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,  485,
     1393,  485, 1393, 1393,  485,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,

      497,  497,  497,  497,  500, 1393,  500, 1393,  500,  500,
      500,  500,  500,  500, 1393,  500, 1393,  500,  500, 1393,
      500,  523,  523,  523, 1393,  523,  523,  523,  523,  523,
      523, 1393,  523,  523,  523,  523,  523,  523,  523,  523,
      528,  528,  528, 1393,  528,  528,  528,  528,  528,  528,
     1393,  528,  528,  528,  528,  528, 1393,  528,  528,  543,
      543,  543, 1393,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543, 1393,  543, 1393,  543,  544,  544,
      544, 1393,  544,  544,  544,  544,  544,  544,  544,  544,
     1393,  544,  544, 1393,  544, 1393,  544,  545, 1393,  545,

     1393,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545, 1393,  545, 1393,  545,  552, 1393,  552, 1393,
      552,  552,  552,  552,  552,  552, 1393,  552,  552,  552,
      552,  552,  552,  552,  552,  558, 1393,  558, 1393,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  714,  714,  714, 1393,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714, 1393,  714,  716,  716,  716, 1393,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  586, 1393, 1393,  586, 1393,  586, 1393,  586,

     1393,  586, 1393,  586, 1393, 1393,  586,  588,  588,  588,
     1393,  588, 1393,  588,  588,  588,  588, 1393,  588, 1393,
      588,  588, 1393,  588, 1393,  588,  726,  726,  726, 1393,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  729,  729,  729, 1393,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  614,  614,  614, 1393,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  616,  616,  616, 1393,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,

      616,  616,  747,  747,  747, 1393,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747, 1393,
      747,  421,  421,  421, 1393,  421,  421, 1393,  421, 1393,
      421,  421,  421, 1393,  421,  421,  421,  421,  421,  421,
      629,  629,  629, 1393,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  630,
      630,  630, 1393,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  632,  632,
      632, 1393,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  633,  633,  633,

     1393,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  426,  426,  426, 1393,
      426,  426, 1393,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426, 1393,  426,  436,  436,  436, 1393, 1393,
     1393, 1393,  436, 1393, 1393, 1393,  436, 1393, 1393,  436,
      441,  441,  441, 1393, 1393,  441, 1393,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441, 1393,  441,  447,
      447,  447, 1393, 1393,  447,  447,  447, 1393,  447,  447,
      447,  447,  447,  447,  447,  447, 1393,  447,  453,  453,
      453, 1393,  453,  453,  453,  453,  453,  453,  453,  453,

      453,  453,  453,  453,  453,  453,  453,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463, 1393,  463,  523,  523,  523, 1393,
      523,  523,  523,  523,  523,  523, 1393,  523,  523,  523,
      523,  523,  523,  523,  523,  528,  528,  528, 1393,  528,
      528,  528,  528,  528,  528, 1393,  528,  528,  528,  528,
      528, 1393,  528,  528,  545, 1393,  545, 1393,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545, 1393,
      545, 1393,  545,  543,  543,  543, 1393,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543, 1393,  543,

     1393,  543,  552, 1393,  552, 1393,  552,  552,  552,  552,
      552,  552, 1393,  552,  552,  552,  552,  552,  552,  552,
      552,  558, 1393,  558, 1393,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      798,  798,  798, 1393,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798, 1393,  798,  802,
      802,  802, 1393,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  826,  826,
      826, 1393,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826, 1393,  826,  864,  864,  864,

     1393,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864, 1393,  864,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  978, 1393, 1393, 1393,  978, 1393,
     1393, 1393, 1393, 1393, 1393, 1393,  978, 1393,  978,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,

     1024, 1393, 1024, 1024, 1393, 1024, 1024, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1393, 1033, 1033, 1393, 1033, 1033, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1393,
     1044, 1044, 1393, 1044, 1044,   75, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393
    } ;

static yyconst flex_int16_t yy_chk[6509] =
    {   0,
        0,    1,  179,    1,    1,    2,  629,    2,    2,    0,
        3,  179,    3,    3,   80,   90,  100,    1,   80,   90,
      100,    2,   92,   92,   92,    1,    3,  150,  150,    2,
      629,   92,   92,  115,    3,  128,  186,  115,  136,  128,
      106,  147,  136,  197,  105,  147,  105,  106,  106,  118,
      172,  118,  159,  149,  149,  149,  159,  197,  186,  167,
        1,    1,  149,  167,    2,    2,  187,  187,  172,    3,
        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    9,  192,    9,
        9,  185,    9,  188,  212,  212,    9,   10,  192,   10,
       10,  185,   10,    9,  173,  185,   10,   11,  174,   11,
       11,    9,   11,   10,   12,  199,   12,   12,  401,   12,
      202,   10,  173,   11,  178,  202,  174,  401,  208,  199,

       12,   11,  208,  175,  176,  219,   11,  229,   12,  219,
      175,  229,  178,   12,  175,  225,    9,    9, 1316,  188,
      225,  175,  176,  176,  238,  253,   10,   10,  238,  253,
      262,  268,  269,  269,  262,  268,   11,   11,  306,  306,
      348,  348,  199,   12,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   15,  274,   15,
       15,   16,   15,   16,   16, 1298,   16,   17,  277,   17,
       17,  180, 1097,   15,  274,  278,   17,   16,   43,  278,
      180,   15,  453,   17,  277,   16,   15,  177,  244,   43,
       16,   17,  406,   43,  402,   18,   17,   18,   18,  244,
      453,  406,   43,  402,   18,  177,   43,   19,   43,   19,
       19,   18,   19,  151,  151,  151,   15,   15,  244,   18,
       16,   16,  151,   19,   18,  466,   17,   17,  180,  279,
       19,   19,  245,   20,   43,   20,   20,  417,   20,  466,
      177,  190,  190,  245,  244,  279,  417,  245,  282,   20,

      190,  402, 1088,  279,   18,   18,   20,   20, 1079,  280,
      423,  423,  245,  280,  282,  151,   19,   19,  280,  190,
      280,  288,  295,  303,  314,  288,  295,  303,  314,  327,
      336,  346,  359,  327,  336,  346,  359,  368,  245,  581,
      581,  368,   20,   20,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   23,  377,   23,   23,
       24,  377,   24,   24,  427,  491,   31,  270,   31,   31,
      386,  427,   23,  491,  386,  388,   24,  502,  270,  388,
       23,  502,   31,  433,   24,   23,  388,  400,  427,   24,
       31,  433,  433,  154,  154,  154,  400,  270,  398,  398,
      398, 1078,  154,  400,  400,  400,  456,  398,  398,  434,
      434,  434,  400,  400, 1077,   23,   23,  456,  434,   24,
       24,   25,   25,  270,  456,   31,   31,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

      154,  599,  599,   25,   25,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   32,
       32,   32,   32,  459,   33,   32,   33,   33,   34,  461,
       34,   34,  459,  281,   35,   32,   35,   35,  461,   36,
       33,   36,   36,   32,   34,  428, 1068,  465,   33,  281,
       35,  470,   34,  191,  191,   36,  428,  465,   35,  436,
      436,  436,  191,   36,  455,  488,  483,  477,  436,  428,
      488,  455,  535,   39,  649,   39,   39,  477,   32,   32,
      483,  191,  455,   33,   33,   39,  458,   34,   34,   39,

      271,  281,  649,   35,   35,  535,  656,   39,   36,   36,
       37,  271,   37,   37,  458,  271,   40,  470,   40,   40,
      191,   45,   37,   45,   45,  656,   37,  462,   40, 1067,
      271,  535,   40,   44,   37,   37,  462,   45,  543,   37,
       40,   37,   39,   39,   44,   45,   45,  492,   44,  458,
       45,  471,  471,  498,  543,  516,  271,   44,  498,  492,
     1066,   44,   49,   44,   49,   49,  516,   37,  471,   37,
       37,   38,   38,   38,   38,   40,   40, 1065,   49,  408,
       45,   45,  408,   38,  462,  516,   49,   38,  408,   44,
      474,  474,  485,  589, 1414,   38,   38, 1414,  393,  474,

       38,  589,   38,  393,  393,  393,  485,  549,  393,  549,
      393,  516,  590,  408,  553,  393,  393,  393,  474,  553,
      598,   49,   49,  408,  590,  655,  655,  655,   38,  598,
       38,   38,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   46,  520,   46,   46,  632, 1064,

       47, 1063,   47,   47,  551,   48,  419,   48,   48,  419,
       46,   50,   47,   50,   50,  419,   47,   48,   46,   46,
      551,   48,  632,   46,   47,  520,  424,   50,  600,   48,
      677,  424,  424,  424,  634,   50,  424,  600,  424,  627,
      419,  652,  676,  424,  424,  424,  677,  627,  627,  650,
      419,  520,  676,   46,   46,  652,  705,  815,  634,   47,
       47,  705,  551, 1053,   48,   48,  815,  650,  726,  726,
       50,   50,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   55,  429, 1052,  440,

      440,  440,  429,  429,  429,  870,  870,  429,  440,  429,
     1415,   55,   55, 1415,  429,  429,  429,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      540,  758,  517,   55,   55,   57, 1051,   57,   57,   58,
       57,   58,   58,  517,   58,   59,  440,   59,   59,  758,
     1050,   57,  487,  744,   59,   58,  476,  476,  937,   57,
      540,   59,  517,   58,   57,  476,  487,  631,   58,   59,
      536,  701,  648,   60,   59,   60,   60,   63,  631,   63,
       63,  536,   60,  648,  476, 1049,  540,  701,  517,   60,

      648,  631,  744,   63,   57,   57,  750,   60,   58,   58,
      536,   63,   60,  937,   59,   59,   63,  926,  926,  487,
     1048,  763,  444,  476,  439,  439,  439,  444,  444,  444,
      750,  763,  444,  439,  444, 1416,  536,  784, 1416,  444,
      444,  444,   60,   60,   61,   61,   63,   63,  784,  686,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,  439,  537,  639,   61,   61,   64,  686,
       64,   64, 1047,  639,  639,  537,  785,   67, 1046,   67,
       67,  717,   67,   68,   64,   68,   68,  790,   68,  717,

      717, 1045,   64,   67,  537,  686, 1043,   64,  450,   68,
      789,   67,  785,  450,  450,  450,   67,   68,  450, 1039,
      450,  789,   68,  790, 1032,  450,  450,  450,  696,  764,
      537,  640,  640,  640,  641,  641,  641,   64,   64,   65,
      640,   65,   65,  641,   65,  764,   67,   67,   65,   65,
       65,  812,   68,   68, 1031,   65, 1030,  822,  696,  733,
      504, 1029,  733,   65,   65,  504,  504,  504,  733,  641,
      504, 1028,  504,  914,  669,  526, 1027,  504,  504,  504,
      526,  526,  526, 1432,  696,  526, 1432,  526,  743,  914,
      812,  743,  526,  526,  526,  669,  822,  743,   65,   65,

       66, 1026,   66,   66,  749,   66,  753, 1025, 1023,   66,
       66,   66,  749,  749,  753,  753,   66,  776,  776,  776,
      825,  531,  669,  825,   66,   66,  531,  531,  531,  825,
     1022,  531, 1021,  531, 1442,  867,  556, 1442,  531,  531,
      531,  556,  556,  556,  867, 1020,  556,  871,  556,  754,
      754,  754, 1018,  556,  556,  556,  871, 1014,  754,   66,
       66,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   73,  561,   73,   73,   73,  880,  561,
      561,  561, 1004, 1003,  561,   73,  561,  880, 1002,   73,
     1001,  561,  561,  561,  591, 1000,  685,   73,   73,  591,
      591,  591,   73,  999,  591,  695,  591,  685,  728,  728,
      728,  591,  591,  591,  877,  800,  695,  835,  835,  835,
      730,  730,  730,  800,  800,  998,  685,  728,  804,  804,
      804,  997,   73,   73,   74,  695,   74,   74,   74,  730,
      755,  755,  755,  844,  844,  844,   74,  804,  996,  755,

       74,  882,  685,  877,  995,  830,  830,  830,   74,   74,
      882,  695,  728,   74,  830,  993,  788,  788,  846,  846,
      846,  788,  933,  992,  730,  788,  788,  862,  862,  862,
      788,  933,  804,  932,  788,  788,  932,  755,  893,  893,
      893,  991,  932,   74,   74,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,  240,  883,  990,
      971,  240,  883,  888,  888,  888,  240,  240,  240,  971,
      938,  240,  888,  938, 1443,  240,  240, 1443,  883,  938,
      240,  902,  902,  902,  240,  240,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  457,  457,

      831,  831,  831,  457,  457,  457,  989,  988,  457,  831,
      457,  987,  803,  803,  803,  457,  457,  457,  467, 1005,
      467, 1444,  803,  986, 1444,  467,  467,  467, 1005,  985,
      467,  803,  467,  904,  904,  904,  983,  467,  467,  467,
      505,  505,  505,  505,  831,  505,  921,  921,  921,  505,
      505,  982,  935,  979,  505,  972,  935,  970,  505,  505,
      548,  954,  954,  954,  548, 1446,  803,  969, 1446,  548,
      548,  548,  935,  968,  548,  967,  548,  984,  984,  984,
      966,  548,  548,  548,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  805,  805,  805,  806,
      806,  806,  939,  939,  939,  980,  980,  980, 1015, 1015,
     1015,  939,  965, 1451,  980,  805, 1451, 1015,  806, 1040,
     1040, 1040, 1060, 1060, 1060, 1074, 1074, 1074, 1040, 1452,
     1455, 1060, 1452, 1455, 1074, 1085, 1085, 1085, 1094, 1094,
     1094,  964, 1471, 1481, 1085, 1471, 1481, 1094, 1482, 1483,

      805, 1482, 1483,  806,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  843,  843,  843,  868,
      868,  868,  869,  869,  869,  872,  872,  872, 1484,  868,
      963, 1484,  869,  873,  873,  873, 1491, 1494,  868, 1491,
     1494,  869,  962,  961,  872,  874,  874,  874,  960,  889,

      889,  889,  873,  889,  890,  890,  890,  959,  889,  924,
      924,  924,  958,  957,  874,  925,  925,  925, 1513,  924,
      843, 1513,  956,  868, 1522,  925,  869, 1522,  924,  872,
      955,  928,  928,  928,  925,  953,  952,  873,  929,  929,
      929,  930,  930,  930,  951, 1100, 1100, 1100,  950,  874,
      928,  949,  948,  889, 1100,  947,  946,  929,  890,  945,
      930,  944,  943,  924,  940,  940,  940,  941,  940,  925,
      973,  973,  973,  940,  974,  974,  974,  975,  975,  975,
      973,  976,  976,  976,  974,  928,  977,  977,  977,  973,
      931,  923,  929,  974,  922,  930,  975,  981,  981,  981,

      976,  981, 1008, 1008, 1008,  977,  981, 1009, 1009, 1009,
      920,  919, 1008, 1010, 1010, 1010,  918, 1009,  940,  917,
      916, 1008,  915,  913,  973,  912, 1009,  911,  974,  910,
      909,  975, 1010,  908,  907,  976, 1011, 1011, 1011,  906,
      977, 1012, 1012, 1012, 1016, 1016, 1016,  905, 1016,  901,
      900,  981,  899, 1016,  898, 1011, 1008, 1036, 1036, 1036,
     1012, 1009, 1017, 1017, 1017,  897, 1017, 1010, 1034, 1034,
     1034,  896, 1035, 1035, 1035,  895, 1036,  894, 1034, 1042,
     1042, 1042, 1035, 1037, 1037, 1037,  892, 1034,  891,  887,
     1011, 1035,  886,  885,  884, 1012,  878,  876, 1016, 1038,

     1038, 1038, 1037, 1041, 1041, 1041,  875, 1041, 1056, 1056,
     1056, 1036, 1041, 1054, 1054, 1054, 1017,  866, 1038, 1055,
     1055, 1055, 1034, 1054,  865,  864, 1035, 1056,  863, 1055,
      861,  860, 1054, 1042, 1062, 1062, 1062, 1037, 1055, 1057,
     1057, 1057, 1058, 1058, 1058, 1061, 1061, 1061,  859, 1061,
     1069, 1069, 1069, 1038, 1061,  858,  857, 1041, 1057,  856,
     1069, 1058, 1056,  855, 1070, 1070, 1070, 1054,  854, 1069,
     1071, 1071, 1071, 1055, 1070, 1072, 1072, 1072, 1073, 1073,
     1073,  853,  852, 1070, 1076, 1076, 1076,  851, 1062, 1071,
     1080, 1080, 1080, 1057, 1072,  850, 1058, 1073,  849, 1061,

     1080, 1075, 1075, 1075, 1069, 1075, 1081, 1081, 1081, 1080,
     1075, 1082, 1082, 1082,  848,  847, 1081,  845, 1070,  842,
     1083, 1083, 1083,  841, 1071, 1081, 1084, 1084, 1084, 1072,
     1082,  840, 1073, 1086, 1086, 1086,  839, 1086, 1076, 1083,
      838,  837, 1086,  836, 1080, 1084, 1087, 1087, 1087, 1089,
     1089, 1089, 1090, 1090, 1090, 1075, 1091, 1091, 1091, 1089,
     1081,  834, 1090,  833,  832, 1082,  829,  827, 1089,  826,
      823, 1090,  820,  819, 1083, 1091, 1092, 1092, 1092,  818,
     1084,  817, 1093, 1093, 1093,  816,  813, 1086, 1095, 1095,
     1095,  809, 1095,  808,  802, 1092,  801, 1095,  798,  797,

     1087, 1093,  795, 1089,  794,  792, 1090, 1096, 1096, 1096,
     1091,  791, 1098, 1098, 1098, 1099, 1099, 1099,  787, 1101,
     1101, 1101, 1098, 1101,  786, 1099,  783,  782, 1101,  781,
     1092, 1098,  780,  779, 1099,  778, 1093, 1102, 1102, 1102,
      777,  775, 1095, 1103, 1103, 1103, 1104, 1104, 1104,  774,
     1104,  773, 1103,  772,  771, 1104, 1105, 1105, 1105,  770,
      769, 1096, 1106, 1106, 1106,  768, 1098,  767,  765, 1099,
      762, 1106,  759, 1101, 1107, 1107, 1107,  747, 1107, 1108,
     1108, 1108,  746, 1107, 1109, 1109, 1109,  745, 1110, 1110,
     1110, 1102, 1110, 1109, 1111, 1111, 1111, 1110,  741,  740,

     1104,  739, 1112, 1112, 1112, 1113, 1113, 1113,  738, 1113,
     1105, 1112,  737,  736, 1113, 1114, 1114, 1114, 1115, 1115,
     1115, 1116, 1116, 1116,  735, 1116,  732, 1115, 1107,  731,
     1116,  729,  727, 1108, 1117, 1117, 1117, 1118, 1118, 1118,
      724,  720, 1110, 1119, 1119, 1119, 1118, 1119, 1111, 1120,
     1120, 1120, 1119, 1121, 1121, 1121, 1122, 1122, 1122, 1113,
     1122,  718, 1121,  716,  714, 1122, 1123, 1123, 1123, 1114,
     1124, 1124, 1124,  712,  709, 1116, 1125, 1125, 1125, 1124,
     1125, 1126, 1126, 1126,  704, 1125,  703,  699, 1117, 1127,
     1127, 1127, 1128, 1128, 1128,  698, 1128, 1119, 1127,  697,

      693, 1128,  688, 1120, 1129, 1129, 1129, 1130, 1130, 1130,
     1122,  687,  684, 1131, 1131, 1131, 1130, 1131,  683,  682,
     1123,  681, 1131, 1132, 1132, 1132,  680, 1133, 1133, 1133,
     1125, 1135, 1135, 1135,  679, 1126, 1133,  678, 1134, 1134,
     1134,  675, 1134, 1136, 1136, 1136, 1128, 1134, 1138, 1138,
     1138,  674, 1136, 1137, 1137, 1137,  673, 1137, 1129, 1139,
     1139, 1139, 1137, 1141, 1141, 1141,  672, 1131, 1139, 1140,
     1140, 1140,  671, 1140, 1142, 1142, 1142, 1132, 1140,  670,
     1143, 1143, 1143, 1142, 1143, 1135, 1144, 1144, 1144, 1143,
      668,  667, 1134,  666, 1145, 1145, 1145, 1146, 1146, 1146,

      664, 1146, 1138, 1145,  661,  659, 1146, 1137, 1147, 1147,
     1147, 1148, 1148, 1148, 1150, 1150, 1150, 1141,  658,  654,
     1148,  653,  645, 1140, 1149, 1149, 1149,  642, 1149, 1151,
     1151, 1151,  638, 1149, 1143, 1152, 1152, 1152, 1151, 1152,
     1144, 1153, 1153, 1153, 1152, 1154, 1154, 1154, 1155, 1155,
     1155, 1146, 1155,  637, 1154,  626,  624, 1155, 1156, 1156,
     1156,  623, 1147, 1157, 1157, 1157,  622,  620, 1150, 1159,
     1159, 1159, 1157, 1158, 1158, 1158,  619, 1158, 1149, 1160,
     1160, 1160, 1158, 1161, 1161, 1161,  618, 1161, 1160, 1152,
      615,  613, 1161,  612,  611, 1153, 1162, 1162, 1162, 1163,

     1163, 1163, 1155,  610,  609, 1164, 1164, 1164, 1163, 1164,
      608,  606, 1156,  605, 1164, 1165, 1165, 1165,  604, 1166,
     1166, 1166,  603, 1159, 1168, 1168, 1168, 1158, 1166, 1167,
     1167, 1167,  602, 1167, 1169, 1169, 1169, 1161, 1167,  601,
     1170, 1170, 1170, 1169, 1170, 1171, 1171, 1171,  595, 1170,
     1162, 1172, 1172, 1172, 1173, 1173, 1173,  594, 1173, 1164,
     1172,  593,  592, 1173, 1174, 1174, 1174,  587,  584, 1165,
     1175, 1175, 1175, 1176, 1176, 1176,  583, 1176, 1168, 1175,
      582,  580, 1176, 1167, 1177, 1177, 1177, 1178, 1178, 1178,
      579, 1179, 1179, 1179, 1170, 1179, 1178,  577,  574, 1171,

     1179, 1180, 1180, 1180, 1181, 1181, 1181,  573, 1173,  572,
     1182, 1182, 1182, 1181, 1182, 1183, 1183, 1183, 1174, 1182,
     1184, 1184, 1184,  570, 1185, 1185, 1185, 1176, 1185, 1184,
     1186, 1186, 1186, 1185, 1187, 1187, 1187,  567, 1177,  566,
     1188, 1188, 1188, 1187, 1188, 1179, 1189, 1189, 1189, 1188,
     1190, 1190, 1190,  565,  562, 1180, 1191, 1191, 1191, 1190,
     1191, 1192, 1192, 1192, 1182, 1191, 1193, 1193, 1193, 1183,
     1194, 1194, 1194,  560, 1194, 1193,  559,  557, 1185, 1194,
     1195, 1195, 1195,  555, 1186,  554, 1196, 1196, 1196, 1197,
     1197, 1197,  550, 1197, 1188, 1196,  547,  546, 1197,  542,

     1189, 1198, 1198, 1198, 1199, 1199, 1199, 1200, 1200, 1200,
     1191, 1200,  541, 1199,  539, 1192, 1200, 1201, 1201, 1201,
     1202, 1202, 1202,  538, 1194,  534, 1203, 1203, 1203, 1202,
     1203, 1204, 1204, 1204, 1195, 1203, 1205, 1205, 1205,  533,
     1206, 1206, 1206, 1197, 1206, 1205, 1207, 1207, 1207, 1206,
     1208, 1208, 1208,  530,  527, 1198, 1209, 1209, 1209, 1208,
     1209, 1200, 1210, 1210, 1210, 1209, 1211, 1211, 1211,  525,
      522, 1201, 1212, 1212, 1212, 1211, 1212, 1213, 1213, 1213,
     1203, 1212, 1214, 1214, 1214, 1204, 1215, 1215, 1215,  521,
     1215, 1214,  519,  518, 1206, 1215, 1216, 1216, 1216,  515,

     1207,  514, 1217, 1217, 1217, 1218, 1218, 1218,  513, 1218,
     1209, 1217,  512,  511, 1218,  510, 1210, 1219, 1219, 1219,
     1220, 1220, 1220, 1221, 1221, 1221, 1212, 1221,  509, 1220,
      508, 1213, 1221, 1222, 1222, 1222, 1223, 1223, 1223,  507,
     1215,  506, 1224, 1224, 1224, 1223, 1224, 1225, 1225, 1225,
     1216, 1224, 1226, 1226, 1226,  503, 1227, 1227, 1227, 1218,
     1227, 1226, 1228, 1228, 1228, 1227, 1229, 1229, 1229,  496,
      495, 1219, 1230, 1230, 1230, 1229, 1230, 1221, 1231, 1231,
     1231, 1230, 1232, 1232, 1232,  490,  489, 1222, 1233, 1233,
     1233, 1232, 1233, 1234, 1234, 1234, 1224, 1233, 1235, 1235,

     1235, 1225, 1236, 1236, 1236,  484, 1236, 1235,  482,  481,
     1227, 1236, 1237, 1237, 1237,  480, 1228,  479, 1238, 1238,
     1238, 1239, 1239, 1239,  478, 1239, 1230, 1238,  475,  469,
     1239,  463, 1231, 1240, 1240, 1240, 1241, 1241, 1241, 1242,
     1242, 1242, 1233, 1242,  452, 1241,  449, 1234, 1242, 1243,
     1243, 1243, 1244, 1244, 1244,  448, 1236,  446, 1245, 1245,
     1245, 1244, 1245, 1246, 1246, 1246, 1237, 1245, 1247, 1247,
     1247,  443, 1248, 1248, 1248, 1239, 1248, 1247, 1249, 1249,
     1249, 1248, 1250, 1250, 1250,  442,  438, 1240, 1251, 1251,
     1251, 1250, 1251, 1242, 1252, 1252, 1252, 1251, 1253, 1253,

     1253,  432,  431, 1243, 1254, 1254, 1254, 1253, 1254, 1255,
     1255, 1255, 1245, 1254, 1256, 1256, 1256, 1246, 1257, 1257,
     1257,  425, 1257, 1256,  422,  420, 1248, 1257, 1258, 1258,
     1258,  418, 1249,  415, 1259, 1259, 1259, 1260, 1260, 1260,
      414, 1260, 1251, 1259,  413,  412, 1260,  411, 1252, 1261,
     1261, 1261, 1262, 1262, 1262, 1263, 1263, 1263, 1254, 1263,
      410, 1262,  409, 1255, 1263, 1264, 1264, 1264, 1265, 1265,
     1265,  407, 1257,  405, 1266, 1266, 1266, 1265, 1266, 1267,
     1267, 1267, 1258, 1266, 1268, 1268, 1268,  404, 1269, 1269,
     1269, 1260, 1269, 1268, 1270, 1270, 1270, 1269, 1271, 1271,

     1271,  394,  392, 1261, 1272, 1272, 1272, 1271, 1272, 1263,
     1273, 1273, 1273, 1272, 1274, 1274, 1274,  391,  389, 1264,
     1275, 1275, 1275, 1274, 1275, 1276, 1276, 1276, 1266, 1275,
     1277, 1277, 1277, 1267, 1278, 1278, 1278,  387, 1278, 1277,
      379,  378, 1269, 1278, 1279, 1279, 1279,  371, 1270,  369,
     1280, 1280, 1280, 1281, 1281, 1281,  362, 1281, 1272, 1280,
      360,  356, 1281,  349, 1273, 1282, 1282, 1282, 1283, 1283,
     1283, 1284, 1284, 1284, 1275, 1284,  347, 1283,  342, 1276,
     1284, 1285, 1285, 1285, 1286, 1286, 1286,  339, 1278,  337,
     1287, 1287, 1287, 1286, 1287, 1288, 1288, 1288, 1279, 1287,

     1289, 1289, 1289,  330, 1290, 1290, 1290, 1281, 1290, 1289,
     1291, 1291, 1291, 1290, 1292, 1292, 1292,  328,  322, 1282,
     1293, 1293, 1293, 1292, 1293, 1284, 1294, 1294, 1294, 1293,
     1295, 1295, 1295,  318,  317, 1285, 1296, 1296, 1296, 1295,
     1296, 1297, 1297, 1297, 1287, 1296, 1299, 1299, 1299, 1288,
     1299, 1300, 1300, 1300,  315, 1299,  308,  307, 1290, 1301,
     1301, 1301,  304, 1301, 1291, 1302, 1302, 1302, 1301, 1303,
     1303, 1303,  297, 1303, 1293, 1304, 1304, 1304, 1303,  296,
     1294,  290, 1305, 1305, 1305,  289, 1305, 1306, 1306, 1306,
     1296, 1305, 1307, 1307, 1307, 1297, 1307, 1308, 1308, 1308,

     1299, 1307, 1309, 1309, 1309, 1300, 1309, 1310, 1310, 1310,
      287, 1309,  273, 1301, 1311, 1311, 1311,  272,  267, 1302,
     1312, 1312, 1312, 1303, 1313, 1313, 1313,  265,  263, 1304,
     1314, 1314, 1314, 1315, 1315, 1315, 1305, 1317, 1317, 1317,
      261, 1306, 1318, 1318, 1318,  255, 1307, 1319, 1319, 1319,
      254, 1308, 1320, 1320, 1320,  252, 1309, 1321, 1321, 1321,
      247, 1310, 1322, 1322, 1322, 1323, 1323, 1323, 1311, 1324,
     1324, 1324,  246,  242, 1312, 1325, 1325, 1325, 1313, 1326,
     1326, 1326,  239,  237, 1314,  231,  230, 1315, 1327, 1327,
     1327, 1317, 1328, 1328, 1328,  221, 1318, 1329, 1329, 1329,

      220, 1319, 1330, 1330, 1330,  213, 1320, 1331, 1331, 1331,
      209, 1321, 1332, 1332, 1332,  206, 1322,  198,  196, 1323,
     1333, 1333, 1333, 1324, 1334, 1334, 1334,  195,  194, 1325,
     1335, 1335, 1335, 1326, 1336, 1336, 1336, 1337, 1337, 1337,
      193,  189, 1327, 1338, 1338, 1338, 1328, 1339, 1339, 1339,
      184, 1329, 1340, 1340, 1340,  182, 1330, 1341, 1341, 1341,
      181, 1331, 1342, 1342, 1342,  170, 1332, 1343, 1343, 1343,
     1344, 1344, 1344,  168, 1333, 1345, 1345, 1345, 1334, 1346,
     1346, 1346,  162,  160, 1335, 1347, 1347, 1347, 1336,  148,
      146, 1337, 1348, 1348, 1348,  139,  137, 1338, 1349, 1349,

     1349, 1339, 1350, 1350, 1350,  130, 1340, 1351, 1351, 1351,
      129, 1341, 1352, 1352, 1352,  127, 1342, 1353, 1353, 1353,
      120, 1343,  119,  116, 1344, 1354, 1354, 1354,  109, 1345,
     1355, 1355, 1355, 1346, 1356, 1356, 1356,  108,  107, 1347,
     1357, 1357, 1357, 1358, 1358, 1358, 1348, 1359, 1359, 1359,
      104,  103, 1349, 1360, 1360, 1360, 1350, 1361, 1361, 1361,
      101, 1351, 1362, 1362, 1362,   94, 1352, 1363, 1363, 1363,
       91, 1353, 1364, 1364, 1364, 1365, 1365, 1365,   82, 1354,
     1366, 1366, 1366,   81, 1355, 1367, 1367, 1367, 1356, 1368,
     1368, 1368,   75,    0, 1357,    0,    0, 1358, 1369, 1369,

     1369, 1359, 1370, 1370, 1370,    0,    0, 1360, 1371, 1371,
     1371, 1361, 1372, 1372, 1372,    0, 1362, 1373, 1373, 1373,
        0, 1363, 1374, 1374, 1374,    0, 1364,    0,    0, 1365,
     1375, 1375, 1375,    0, 1366, 1376, 1376, 1376,    0, 1367,
     1377, 1377, 1377, 1368, 1378, 1378, 1378, 1379, 1379, 1379,
        0,    0, 1369, 1380, 1380, 1380, 1370, 1381, 1381, 1381,
        0,    0, 1371, 1382, 1382, 1382, 1372, 1383, 1383, 1383,
        0, 1373, 1384, 1384, 1384,    0, 1374, 1385, 1385, 1385,
     1386, 1386, 1386,    0, 1375, 1387, 1387, 1387,    0, 1376,
     1388, 1388, 1388,    0, 1377, 1389, 1389, 1389, 1378,    0,

        0, 1379, 1390, 1390, 1390,    0,    0, 1380, 1391, 1391,
     1391, 1381, 1392, 1392, 1392,    0,    0, 1382,    0,    0,
        0, 1383,    0,    0,    0,    0, 1384,    0,    0,    0,
        0, 1385,    0,    0, 1386,    0,    0,    0,    0, 1387,
        0,    0,    0,    0, 1388,    0,    0,    0,    0, 1389,
        0,    0,    0,    0,    0,    0, 1390,    0,    0,    0,
        0,    0, 1391,    0,    0,    0, 1392, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,

     1395, 1395, 1395, 1395, 1395, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1405, 1405, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1406, 1406, 1406, 1406, 1406,

     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,

     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1417, 1417, 1417,
        0, 1417, 1417,    0, 1417,    0, 1417, 1417, 1417,    0,
     1417, 1417, 1417, 1417, 1417, 1417, 1418, 1418, 1418,    0,
     1418, 1418, 1418, 1418,    0, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419,    0, 1419,
     1419,    0, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419,    0, 1419, 1420, 1420, 1420,    0, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1421, 1421, 1421,    0, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1422, 1422, 1422,    0,    0,    0,    0, 1422,
        0,    0,    0, 1422,    0,    0, 1422, 1423, 1423, 1423,
        0,    0, 1423,    0, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1423,    0, 1423, 1424, 1424, 1424,    0,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425,    0,    0,

     1425, 1425, 1425,    0, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425,    0, 1425, 1426, 1426, 1426,    0, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1427, 1427, 1427,    0, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1428,    0,    0,    0,    0,    0,    0, 1428,
        0,    0,    0, 1428,    0,    0, 1428, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429,    0, 1429, 1430, 1430,    0,    0,
        0,    0,    0, 1430,    0,    0,    0, 1430,    0,    0,

     1430, 1430, 1431,    0,    0,    0,    0,    0,    0,    0,
        0, 1431,    0, 1431,    0,    0, 1431, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1434,    0, 1434,    0,
     1434, 1434, 1434, 1434, 1434, 1434,    0, 1434,    0, 1434,
     1434,    0, 1434, 1435, 1435, 1435,    0, 1435, 1435, 1435,
     1435, 1435, 1435,    0, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1436, 1436, 1436,    0, 1436, 1436, 1436, 1436,
     1436, 1436,    0, 1436, 1436, 1436, 1436, 1436,    0, 1436,
     1436, 1437, 1437, 1437,    0, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437,    0, 1437,    0, 1437,
     1438, 1438, 1438,    0, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438,    0, 1438, 1438,    0, 1438,    0, 1438, 1439,
        0, 1439,    0, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439,    0, 1439,    0, 1439, 1440,    0,
     1440,    0, 1440, 1440, 1440, 1440, 1440, 1440,    0, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1441,    0, 1441,
        0, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1445, 1445, 1445,    0,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445,

     1445, 1445, 1445, 1445, 1445, 1447, 1447, 1447,    0, 1447,
     1447, 1447, 1447,    0, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1448, 1448, 1448,    0, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1449,    0,    0, 1449,    0, 1449,    0,
     1449,    0, 1449,    0, 1449,    0,    0, 1449, 1450, 1450,
     1450,    0, 1450,    0, 1450, 1450, 1450, 1450,    0, 1450,
        0, 1450, 1450,    0, 1450,    0, 1450, 1453, 1453, 1453,
        0, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1454, 1454, 1454,    0,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1456, 1456, 1456,    0, 1456,
     1456,    0, 1456,    0, 1456, 1456, 1456,    0, 1456, 1456,
     1456, 1456, 1456, 1456, 1457, 1457, 1457,    0, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457,    0, 1457, 1458, 1458, 1458,    0, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1459, 1459, 1459,    0, 1459, 1459,    0, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,    0,
     1459, 1460, 1460, 1460,    0, 1460, 1460, 1460, 1460, 1460,

     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1461, 1461, 1461,    0, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1462,
     1462, 1462,    0, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1463, 1463,
     1463,    0,    0,    0,    0, 1463,    0,    0,    0, 1463,
        0,    0, 1463, 1464, 1464, 1464,    0,    0, 1464,    0,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
        0, 1464, 1465, 1465, 1465,    0,    0, 1465, 1465, 1465,
        0, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,    0,

     1465, 1466, 1466, 1466,    0, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1467,    0,    0,    0,    0,    0,    0, 1467,    0,    0,
        0, 1467,    0,    0, 1467, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468,    0, 1468, 1469, 1469,    0,    0,    0,    0,
        0, 1469,    0,    0,    0, 1469,    0,    0, 1469, 1469,
     1470,    0,    0,    0,    0,    0,    0,    0,    0, 1470,
        0, 1470,    0,    0, 1470, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1473,    0, 1473,    0, 1473, 1473,
     1473, 1473, 1473, 1473,    0, 1473,    0, 1473, 1473,    0,
     1473, 1474, 1474, 1474,    0, 1474, 1474, 1474, 1474, 1474,
     1474,    0, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1475, 1475, 1475,    0, 1475, 1475, 1475, 1475, 1475, 1475,
        0, 1475, 1475, 1475, 1475, 1475,    0, 1475, 1475, 1476,
     1476, 1476,    0, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476,    0, 1476,    0, 1476, 1477, 1477,
     1477,    0, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
        0, 1477, 1477,    0, 1477,    0, 1477, 1478,    0, 1478,

        0, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
     1478, 1478,    0, 1478,    0, 1478, 1479,    0, 1479,    0,
     1479, 1479, 1479, 1479, 1479, 1479,    0, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1479, 1480,    0, 1480,    0, 1480,
     1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1480, 1480, 1485, 1485, 1485,    0, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485,    0, 1485, 1486, 1486, 1486,    0, 1486, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486,
     1486, 1486, 1487,    0,    0, 1487,    0, 1487,    0, 1487,

        0, 1487,    0, 1487,    0,    0, 1487, 1488, 1488, 1488,
        0, 1488,    0, 1488, 1488, 1488, 1488,    0, 1488,    0,
     1488, 1488,    0, 1488,    0, 1488, 1489, 1489, 1489,    0,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1490, 1490, 1490,    0, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1492, 1492, 1492,    0, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1493, 1493, 1493,    0, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,

     1493, 1493, 1495, 1495, 1495,    0, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,    0,
     1495, 1496, 1496, 1496,    0, 1496, 1496,    0, 1496,    0,
     1496, 1496, 1496,    0, 1496, 1496, 1496, 1496, 1496, 1496,
     1497, 1497, 1497,    0, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1498,
     1498, 1498,    0, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1499, 1499,
     1499,    0, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1500, 1500, 1500,

        0, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1501, 1501, 1501,    0,
     1501, 1501,    0, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501,    0, 1501, 1502, 1502, 1502,    0,    0,
        0,    0, 1502,    0,    0,    0, 1502,    0,    0, 1502,
     1503, 1503, 1503,    0,    0, 1503,    0, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503,    0, 1503, 1504,
     1504, 1504,    0,    0, 1504, 1504, 1504,    0, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504,    0, 1504, 1505, 1505,
     1505,    0, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,

     1505, 1505, 1505, 1505, 1505, 1505, 1505, 1506, 1506, 1506,
     1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506,
     1506, 1506, 1506, 1506,    0, 1506, 1507, 1507, 1507,    0,
     1507, 1507, 1507, 1507, 1507, 1507,    0, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1508, 1508, 1508,    0, 1508,
     1508, 1508, 1508, 1508, 1508,    0, 1508, 1508, 1508, 1508,
     1508,    0, 1508, 1508, 1509,    0, 1509,    0, 1509, 1509,
     1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509,    0,
     1509,    0, 1509, 1510, 1510, 1510,    0, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,    0, 1510,

        0, 1510, 1511,    0, 1511,    0, 1511, 1511, 1511, 1511,
     1511, 1511,    0, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1512,    0, 1512,    0, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1514, 1514, 1514,    0, 1514, 1514, 1514, 1514, 1514, 1514,
     1514, 1514, 1514, 1514, 1514, 1514, 1514,    0, 1514, 1515,
     1515, 1515,    0, 1515, 1515, 1515, 1515, 1515, 1515, 1515,
     1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1516, 1516,
     1516,    0, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516,    0, 1516, 1517, 1517, 1517,

        0, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517,    0, 1517, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1519, 1519, 1519, 1519, 1519,
     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
     1519, 1519, 1519, 1519, 1520,    0,    0,    0, 1520,    0,
        0,    0,    0,    0,    0,    0, 1520,    0, 1520, 1521,
     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521,
     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,

     1523,    0, 1523, 1523,    0, 1523, 1523, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
        0, 1524, 1524,    0, 1524, 1524, 1525, 1525, 1525, 1525,
     1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,    0,
     1525, 1525,    0, 1525, 1525, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393
    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2017 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include <QDir>
#include <QFile>
#include <QFileInfo>
#include <QHash>
#include <QRegExp>
#include <QStringList>
#include <QStack>
#include <QVector>

#include <pre.h>

#include <a_define.h>
#include <arguments.h>
#include <constexp.h>
#include <config.h>
#include <condparser.h>
#include <doxy_globals.h>
#include <default_args.h>
#include <entry.h>
#include <message.h>
#include <membername.h>
#include <util.h>

#define YY_NEVER_INTERACTIVE 1

// Toggle for some debugging info
// #define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

struct CondCtx
{

   CondCtx(int line, const QString &id, bool b)
      : lineNr(line), sectionId(id), skip(b) {}

   int lineNr;
   QString sectionId;
   bool skip;
};

struct FileState {
   FileState(int size) : lineNr(1), fileBuf(size),
      oldFileBuf(""), oldFileBufPos(0), bufState(0) {}

   int       lineNr;
   QString   fileBuf;
   QString   oldFileBuf;
   int       oldFileBufPos;
   QString   fileName;
   YY_BUFFER_STATE bufState;
};

/** @brief Singleton which manages the defines available while proprocessing files
 */
class DefineManager
{
   // local class used to hold the defines for a single file
   class DefinesPerFile
   {
    public:
      DefinesPerFile() {
      }

      virtual ~DefinesPerFile() {
      }

      /** Adds a define in the context of a file. Will replace an existing define
       *  with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(QSharedPointer<A_Define> def) {
         QSharedPointer<A_Define> d = m_defines.value(def->m_name);

         if (d != nullptr) {
            // redefine
            m_defines.remove(d->m_name);
         }

         m_defines.insert(def->m_name, def);
      }

      /** Adds an include file for this file
       *  @param fileName The name of the include file
       */
      void addInclude(const QString &fileName) {
         m_includedFiles.insert(fileName);
      }

      void collectDefines(DefineDict &dict, QSet<QString> &includeStack);

    private:
      DefineDict m_defines;
      QSet<QString> m_includedFiles;
   };

 public:
   friend class DefinesPerFile;

   /** Returns a reference to the singleton */
   static DefineManager &instance() {
      if (theInstance == nullptr) {
         theInstance = new DefineManager;
      }
      return *theInstance;
   }

   static void deleteInstance() {
      delete theInstance;
      theInstance = nullptr;
   }

   /** Starts a context in which defines are collected.
    *  Called at the start of a new file that is preprocessed.
    *  @param fileName the name of the file to process.
    */
   void startContext(const QString &fileName) {
      m_contextDefines.clear();
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);
      if (dpf == nullptr) {
         // new file

         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);
      }
   }

   /** Ends the context started with startContext() freeing any
    *  defines collected within in this context.
    */
   void endContext() {
      m_contextDefines.clear();
   }

   /** Add an included file to the current context.
    *  If the file has been pre-processed already, all defines are added to the context.
    *  @param fileName The name of the include file to add to the context.
    */
   void addFileToContext(const QString &fileName) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         // new file

         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);

      } else {
         // existing file

         QSet<QString> includeStack;
         dpf->collectDefines(m_contextDefines, includeStack);
      }
   }

   /** Add a define to the manager object.
    *  @param fileName The file in which the define was found
    *  @param def The Define object to add.
    */
   void addDefine(const QString &fileName, QSharedPointer<A_Define> def) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<A_Define> d = m_contextDefines.value(def->m_name);

      if (d != nullptr) {
         // redefine
         m_contextDefines.remove(d->m_name);
      }

      m_contextDefines.insert(def->m_name, def);

      //
      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fileName, dpf);
      }

      dpf->addDefine(def);
   }

   /** Add an include relation to the manager object.
    *  @param fromFileName file name in which the include was found.
    *  @param toFileName file name that is included.
    */
   void addInclude(const QString &fromFileName, const QString &toFileName) {
      if (fromFileName.isEmpty() || toFileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fromFileName);

      if (dpf == nullptr) {
         dpf = QMakeShared<DefinesPerFile>();
         m_fileMap.insert(fromFileName, dpf);
      }
      dpf->addInclude(toFileName);
   }

   /** Returns a Define object given its name or 0 if the Define does not exist.
   */
   QSharedPointer<A_Define> isDefined(const QString &name) const {
      QSharedPointer<A_Define> d = m_contextDefines.value(name);

      if (d && d->undef) {
         d = QSharedPointer<A_Define>();
      }

      return d;
   }

   /** Returns a reference to the defines found in the current context. */
   const DefineDict &defineContext() const {
      return m_contextDefines;
   }

 private:
   static DefineManager *theInstance;

   /** Helper function to collect all define for a given file */
   void collectDefinesForFile(const QString &fileName, QSharedPointer<DefineDict> dict) {
      if (fileName.isEmpty()) {
         return;
      }

      QSharedPointer<DefinesPerFile> dpf = m_fileMap.value(fileName);

      if (dpf) {
         QSet<QString> includeStack;
         dpf->collectDefines(*dict, includeStack);
      }
   }

   /** returns the DefinesPerFile object for a given file name. */
   QSharedPointer<DefinesPerFile> find(const QString &fileName) const {
      if (fileName.isEmpty()) {
         return QSharedPointer<DefinesPerFile>();
      }

      return m_fileMap.value(fileName);
   }

   DefineManager() {
   }

   virtual ~DefineManager() {
   }

   QHash<QString, QSharedPointer<DefinesPerFile>> m_fileMap;
   DefineDict m_contextDefines;
};

/** Singleton instance */
DefineManager *DefineManager::theInstance = 0;

/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(DefineDict &dict, QSet<QString> &includeStack)
{
   {
      for (auto di : m_includedFiles) {
         QString incFile = di;

         QSharedPointer<DefinesPerFile> dpf = DefineManager::instance().find(incFile);

         if (dpf && ! includeStack.contains(incFile)) {
            includeStack.insert(incFile);
            dpf->collectDefines(dict, includeStack);
         }
      }
   }

   {
      for (const auto &def : m_defines)  {
         QSharedPointer<A_Define> d = dict.value(def->m_name);

         if (d != nullptr) {
            // redefine
            dict.remove(d->m_name);
         }

         dict.insert(def->m_name, def);
      }
   }
}

static QStringList              g_pathList;
static QString                  g_yyFileName;
static QSharedPointer<FileDef>  g_yyFileDef;
static QSharedPointer<FileDef>  g_inputFileDef;

static QSharedPointer<QHash<QString, int>> g_argDict;
static QStack<QSharedPointer<FileState>>   g_includeStack;
static QStack<QSharedPointer<CondCtx>>     g_condStack;
static QSharedPointer<DefineDict>          g_expandedDict;

static int          g_yyLineNr   = 1;
static int          g_yyMLines   = 1;
static int          g_yyColNr    = 1;
static int          g_ifcount    = 0;
static int          g_defArgs    = -1;

static QString      g_defName;
static QString      g_defText;
static QString      g_defLitText;
static QString      g_defArgsStr;
static QString      g_defExtraSpacing;
static bool         g_defVarArgs;
static int          g_lastCContext;
static int          g_lastCPPContext;
static QStack<int>  g_levelGuard;
static QString      g_inputBuf;
static int          g_inputBufPos;
static QString      g_outputBuf;
static int          g_roundCount;
static bool         g_quoteArg;

static int          g_findDefArgContext;
static bool         g_expectGuard;
static QString      g_guardName;
static QString      g_lastGuardName;
static QString      g_incName;
static QString      g_guardExpr;
static int          g_curlyCount;
static bool         g_nospaces;          // add extra spaces during macro expansion

static bool         g_macroExpansion;    // from the configuration
static bool         g_expandOnlyPredef;  // from the configuration
static int          g_commentCount;
static bool         g_insideComment;
static bool         g_isImported;
static QString      g_blockName;
static int          g_condCtx;
static bool         g_skip;

static bool         g_insideCS;          // C# has simpler preprocessor
static bool         g_isSource;

static bool         g_lexInit   = false;
static int          g_fenceSize = 0;
static bool         g_ccomment;

static void setFileName(const QString &name)
{
   bool ambig;
   QFileInfo fi(name);

   g_yyFileName = fi.absoluteFilePath();
   g_yyFileDef  = findFileDef(&Doxy_Globals::inputNameDict, g_yyFileName, ambig);

   if (g_yyFileDef == nullptr) {
      // if this is not an input file check if it is an include file
      g_yyFileDef = findFileDef(&Doxy_Globals::includeNameDict, g_yyFileName, ambig);
   }

   if (g_yyFileDef && g_yyFileDef->isReference()) {
      g_yyFileDef = QSharedPointer<FileDef>();
   }

   g_insideCS = getLanguageFromFileName(g_yyFileName) == SrcLangExt_CSharp;
   g_isSource = determineSection(g_yyFileName);
}

static void incrLevel()
{
   g_levelGuard.push(0);
}

static void decrLevel()
{
   if (g_levelGuard.size() > 0) {
      g_levelGuard.pop();

   } else {
      warn(g_yyFileName, g_yyLineNr, "More #endif's than #if's found\n");

   }
}

static bool otherCaseDone()
{
   if (g_levelGuard.size() == 0) {
      warn(g_yyFileName, g_yyLineNr, "Found an #else without a preceding #if\n");
      return true;

   } else {
      return g_levelGuard.top();

   }
}

static void setCaseDone(bool value)
{
   g_levelGuard.top() = value;
}

static QSet<QString> g_allIncludes;

static QSharedPointer<FileState> checkAndOpenFile(const QString &fileName, bool &alreadyIncluded)
{
   alreadyIncluded = false;
   QSharedPointer<FileState> fs;

   QFileInfo fi(fileName);

   if (fi.exists() && fi.isFile()) {
      static const QStringList exclPatterns = Config::getList("exclude-patterns");

      if (patternMatch(fi, exclPatterns)) {
         return QSharedPointer<FileState>();
      }

      QString absName = fi.absoluteFilePath();

      // global guard
      if (g_curlyCount == 0) {
         // not #include inside { ... }

         if (g_allIncludes.contains(absName)) {
            alreadyIncluded = true;
            return QSharedPointer<FileState>();
         }

         g_allIncludes.insert(absName);
      }

      // check include stack for absName
      QStack<QSharedPointer<FileState>> tmpStack;

      while (! g_includeStack.isEmpty()) {
         fs = g_includeStack.pop();

         if (fs->fileName == absName) {
            alreadyIncluded = true;
         }

         tmpStack.push(fs);
      }

      while (! tmpStack.isEmpty()) {
         fs = tmpStack.pop();

         g_includeStack.push(fs);
      }

      if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }

      fs = QMakeShared<FileState>(fi.size() + 4096);
      alreadyIncluded = false;

      if (! readInputFile(absName, fs->fileBuf)) {
         // error
         fs = QSharedPointer<FileState>();

      } else {
         fs->oldFileBuf    = g_inputBuf;
         fs->oldFileBufPos = g_inputBufPos;
      }
   }

   return fs;
}

static QSharedPointer<FileState> findFile(const QString &fileName, bool localInclude, bool &alreadyIncluded)
{
   if (QDir::isAbsolutePath(fileName)) {
      QSharedPointer<FileState> fs = checkAndOpenFile(fileName, alreadyIncluded);

      if (fs) {
         setFileName(fileName);
         g_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   if (localInclude && ! g_yyFileName.isEmpty()) {
      QFileInfo fi(g_yyFileName);

      if (fi.exists()) {
         QString absName = fi.absolutePath() + "/" + fileName;
         QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

         if (fs) {
            setFileName(absName);
            g_yyLineNr = 1;
            return fs;

         } else if (alreadyIncluded) {
            return QSharedPointer<FileState>();
         }
      }
   }

   if (g_pathList.isEmpty()) {
      return QSharedPointer<FileState>();
   }

   for (auto &s : g_pathList) {
      QString absName = s + "/" + fileName;

      QSharedPointer<FileState> fs = checkAndOpenFile(absName, alreadyIncluded);

      if (fs) {
         setFileName(absName);
         g_yyLineNr = 1;
         return fs;

      } else if (alreadyIncluded) {
         return QSharedPointer<FileState>();
      }
   }

   return QSharedPointer<FileState>();
}

static QString extractTrailingComment(const QString &s)
{
   if (s.isEmpty()) {
      return "";
   }

   int i = s.length() - 1;

   while (i >= 0) {
      QChar c = s[i];

      switch (c.unicode()) {
         case '/': {
            i--;

            if (i >= 0 && s[i] == '*') {
               // end of a comment block
               i--;

               while (i > 0 && !(s[i - 1] == '/' && s[i] == '*')) {
                  i--;
               }

               if (i == 0) {
                  i++;
               }

               // only /*!< or /**< are treated as a comment for the macro name     */
               // otherwise the comment is treated as part of the macro definition

               return ((s[i + 1] == '*' || s[i + 1] == '!') && s[i + 2] == '<') ? s.mid(i - 1) : "";

            } else {
               return "";
            }
         }

         break;

         // whitespace or line-continuation
         case ' ':
         case '\t':
         case '\r':
         case '\n':
         case '\\':
            break;

         default:
            return "";
      }

      i--;
   }

   return "";
}

static int getNextChar(const QString &expr, QString *rest, uint &pos);
static int getCurrentChar(const QString &expr, QString *rest, uint pos);
static void unputChar(const QString &expr, QString *rest, uint &pos, char c);
static void expandExpression(QString &expr, QString *rest, int pos);

static QString stringize(const QString &s)
{
   QString result;
   QChar c;
   QChar pc;

   uint i = 0;
   bool inString = false;
   bool inChar   = false;

   while (i < s.length()) {

      if (! inString && ! inChar) {
         while (i < s.length() && ! inString && ! inChar) {
            c = s.at(i++);

            if (c == '"') {
               result += "\\\"";
               inString = true;
            } else if (c == '\'') {
               result += c;
               inChar = true;
            } else {
               result += c;
            }
         }

      } else if (inChar) {
         while (i < s.length() && inChar) {
            c = s.at(i++);

            if (c == '\'') {
               result += '\'';
               inChar = false;
            } else if (c == '\\') {
               result += "\\\\";
            } else {
               result += c;
            }
         }

      } else {
         pc = 0;

         while (i < s.length() && inString) {
            QChar c2 = s.at(i++);

            if (c2 == '"') {
               result += "\\\"";
               inString = pc == '\\';

            } else if (c2 == '\\') {
               result += "\\\\";

            } else {
               result += c2;
            }

            pc = c2;
         }
      }
   }

   return result;
}

/*! Execute all ## operators in expr.
 * If the macro name before or after the operator contains a no-rescan
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QString &expr)
{
   QRegExp r("[ \\t\\n]*##[ \\t\\n]*");
   int l;
   int n;
   int i = 0;

   if (expr.isEmpty()) {
      return;
   }

   while ((n = r.indexIn(expr, i)) != -1) {
      l = r.matchedLength();

      if (n + l + 1 < (int)expr.length() && expr.at(n + l) == '@' && expr.at(n + l + 1) == '-') {
         // remove no-rescan marker after ID
         l += 2;
      }

      // remove the ## operator and the surrounding whitespace
      expr  = expr.left(n) + expr.right(expr.length() - n - l);
      int k = n - 1;

      while (k >= 0 && isId(expr.at(k))) {
         k--;
      }

      if (k > 0 && expr.at(k) == '-' && expr.at(k - 1) == '@') {
         // remove no-rescan marker before ID
         expr = expr.left(k - 1) + expr.right(expr.length() - k - 1);
         n -= 2;
      }

      i = n;
   }
}

static void yyunput (int c,char *buf_ptr);
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QString &expr, QString *rest, uint &pos, char term, QString &arg)
{
   int cc;

   while ((cc = getNextChar(expr, rest, pos)) != EOF && cc != 0) {
      if (cc == '\\') {
         arg += (char)cc, cc = getNextChar(expr, rest, pos);
      } else if (cc == term) {
         return;
      }
      arg += (char)cc;
   }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr.
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the
 * length of the (unexpanded) argument list is stored in \a len.
 */
static bool replaceFunctionMacro(const QString &expr, QString *rest, int pos, int &len, QSharedPointer<const A_Define> def, QString &result)
{
   uint j = pos;
   len    = 0;

   result.clear();
   int cc;

   while ((cc = getCurrentChar(expr, rest, j)) != EOF && isspace(cc)) {
      len++;
      getNextChar(expr, rest, j);
   }

   if (cc != '(') {
      unputChar(expr, rest, j, ' ');
      return false;
   }

   // consume the `(' character
   getNextChar(expr, rest, j);

   // list of arguments
   QHash<QString, QString> argTable;

   QString arg;
   int argCount = 0;
   bool done    = false;

   // PHASE 1: read the macro arguments
   if (def->nargs == 0) {
      while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
         char c = (char)cc;

         if (c == ')') {
            break;
         }
      }

   } else {
      while (! done && (argCount < def->nargs || def->varArgs) &&
             ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0)) {

         char c = (char)cc;

         if (c == '(') {
            // argument is a function => search for matching )
            int level = 1;
            arg += c;

            //char term='\0';

            while ((cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               char c = (char)cc;

               if (c == '\'' || c == '\"') {
                  // skip ('s and )'s inside strings
                  arg += c;
                  addTillEndOfString(expr, rest, j, c, arg);
               }

               if (c == ')') {
                  level--;
                  arg += c;
                  if (level == 0) {
                     break;
                  }

               } else if (c == '(') {
                  level++;
                  arg += c;

               } else {
                  arg += c;
               }
            }

         } else if (c == ')' || c == ',') {
            // last or next argument found

            if (c == ',' && argCount == def->nargs - 1 && def->varArgs) {
               arg = arg.trimmed();
               arg += ',';

            } else {

               QString argKey;
               argKey = QString("@%1").arg(argCount++);    // key name
               arg    = arg.trimmed();

               // add argument to the lookup table
               argTable.insert(argKey, arg);
               arg.clear();

               if (c == ')') {
                  // end of the argument list
                  done = true;
               }
            }

         } else if (c == '\"') {
            // append literal strings

            arg += c;
            bool found = false;

            while (!found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '"';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;
                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }
               c = (char)cc;
               arg += c;
            }

         } else if (c == '\'') {
            // append literal characters
            arg += c;
            bool found = false;

            while (!found && (cc = getNextChar(expr, rest, j)) != EOF && cc != 0) {
               found = cc == '\'';

               if (cc == '\\') {
                  c = (char)cc;
                  arg += c;
                  if ((cc = getNextChar(expr, rest, j)) == EOF || cc == 0) {
                     break;
                  }
               }
               c = (char)cc;
               arg += c;
            }
         } else { // append other characters
            arg += c;
         }
      }
   }

   // PHASE 2: apply the macro function
   if (argCount == def->nargs || // same number of arguments
         (argCount >= def->nargs - 1 && def->varArgs)) {

         // variadic macro with at least as many
         // params as the non-variadic part (see bug731985)

      uint k = 0;

      // substitution of all formal arguments
      QString resExpr;
      const QString d = def->m_definition.trimmed();

      bool inString = false;

      while (k < d.length()) {
         if (d.at(k) == '@') {
            // maybe a marker, otherwise an escaped @

            if (d.at(k + 1) == '@') {
               // escaped @ => copy it (is unescaped later)

               k += 2;
               resExpr += "@@"; // we unescape these later

            } else if (d.at(k + 1) == '-') {
               // no-rescan marker
               k += 2;
               resExpr += "@-";

            } else {
               // argument marker, read the argument number
               QString key = "@";

               bool hash = false;
               int len2  = k - 1;

               // search for ## backward
               if (len2 >= 0 && d.at(len2) == '\"') {
                  len2--;
               }

               while (len2 >= 0 && d.at(len2) == ' ') {
                  len2--;
               }

               if (len2 > 0 && d.at(len2) == '#' && d.at(len2 - 1) == '#') {
                  hash = true;
               }

               k++;

               // scan the number
               while (k < d.length() && d.at(k) >= '0' && d.at(k) <= '9') {
                  key += d.at(k++);
               }

               if (! hash) {
                  // search for ## forward
                  len2 = k;

                  if (len2 < d.length() && d.at(len2) == '\"') {
                     len2++;
                  }

                  while (len2 < d.length() && d.at(len2) == ' ') {
                     len2++;
                  }

                  if (len2 < d.length() - 1 && d.at(len2) == '#' && d.at(len2 + 1) == '#') {
                     hash = true;
                  }
               }

               if (key.length() > 1 && argTable.contains(key)) {
                  QString substArg = argTable.value(key);

                  // only if no ## operator is before or after the argument marker, then do macro expansion
                  if (! hash) {
                     expandExpression(substArg, 0, 0);
                  }

                  if (inString) {
                     // if the marker is inside a string (because a # was put
                     // before the macro name), escape " and \ characters
                     resExpr += stringize(substArg);

                  } else {
                     if (hash && substArg.isEmpty()) {
                        // empty argument will be remove later on
                        resExpr += "@E";

                     } else if (g_nospaces) {
                        resExpr += substArg;

                     } else {
                        resExpr += " " + substArg + " ";
                     }
                  }
               }
            }

         } else {
            // no marker, just copy

            if (! inString && d.at(k) == '\"') {
               inString = true; // entering a literal string

            } else if (inString && d.at(k) == '\"' && (d.at(k - 1) != '\\' || d.at(k - 2) == '\\')) {
               inString = false; // leaving a literal string
            }
            resExpr += d.at(k++);
         }
      }

      len    = j - pos;
      result = resExpr;

      return true;
   }

   return false;
}

/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QString &expr, int p, int *l)
{
   int n;

   while (p < expr.length()) {
      QChar c = expr.at(p++);

      if (c.isNumber()) {
         // skip number
         while (p < expr.length() && isId(expr.at(p))) {
            p++;
         }

      } else if (c.isLetter() || c == '_') {
         // read id
         n = p - 1;

         while (p < expr.length() && isId(expr.at(p))) {
            p++;
         }

         *l = p - n;
         return n;

      } else if (c == '"') {
         // skip string

         QChar ppc = 0;
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);
         }

         while (p < expr.length() && (c != '"' || (pc == '\\' && ppc != '\\')))
            // continue as long as no " is found, but ignoring \", but not \\"
         {
            ppc = pc;
            pc = c;
            c = expr.at(p);
            p++;
         }

         if (p < expr.length()) {
            ++p;   // skip closing quote
         }

      } else if (c == '/') { // skip C Comment
         QChar pc = c;

         if (p < expr.length()) {
            c = expr.at(p);

            if (c == '*') { // Start of C comment
               p++;

               while (p < expr.length() && !(pc == '*' && c == '/')) {
                  pc = c;
                  c = expr.at(p++);
               }
            }
         }

      }
   }

   return -1;
}

/*! preforms recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 *  If \a expandAll is \c true then all macros in the expression are
 *  expanded, otherwise only the first is expanded.
 */
static void expandExpression(QString &expr, QString *rest, int pos)
{
   QString macroName;
   QString expMacro;

   bool definedTest = false;
   int i = pos;
   int l;
   int p;
   int len;

   while ((p = getNextId(expr, i, &l)) != -1) {
      // search for an macro name

      bool replaced = false;
      macroName = expr.mid(p, l);

      if (p < 2 || ! (expr.at(p - 2) == '@' && expr.at(p - 1) == '-')) {
         // no-rescan marker?

         if (! g_expandedDict->contains(macroName)) {

            // expand macro
            QSharedPointer<A_Define> def = DefineManager::instance().isDefined(macroName);

            if (definedTest) {
               // macro name was found after defined

               if (def) {
                  expMacro = " 1 ";
               } else {
                  expMacro = " 0 ";
               }

               replaced = true;
               len = l;
               definedTest = false;

            } else if (def && def->nargs == -1) {
               // simple macro
               // substitute the definition of the macro

               if (g_nospaces) {
                  expMacro = def->m_definition.trimmed();
               } else {
                  expMacro = " " + def->m_definition.trimmed() + " ";
               }

               replaced = true;
               len = l;

            } else if (def && def->nargs >= 0) {
               // function macro
               replaced = replaceFunctionMacro(expr, rest, p + l, len, def, expMacro);
               len += l;

            } else if (macroName == "defined") {
               definedTest = true;

            }

            if (replaced) {
               // expand the macro and rescan the expression

               //printf("replacing `%s'->`%s'\n",expr.mid(p,len).data(),expMacro.data());
               QString resultExpr = expMacro;
               QString restExpr   = expr.right(expr.length() - len - p);

               processConcatOperators(resultExpr);

               if (def && !def->nonRecursive) {
                  g_expandedDict->insert(macroName, def);
                  expandExpression(resultExpr, &restExpr, 0);
                  g_expandedDict->remove(macroName);
               }

               expr = expr.left(p) + resultExpr + restExpr;
               i    = p;

            } else {
               // move to the next macro name
               i = p + l;
            }

         } else { // move to the next macro name
            expr = expr.left(p) + "@-" + expr.right(expr.length() - p);
            i = p + l + 2;

         }

      } else { // no re-scan marker found, skip the macro name
         i = p + l;
      }
   }
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
QString removeIdsAndMarkers(const QString &s)
{
   const QChar *p = s.constData();
   const QChar *ptr = p;
   QChar c;

   bool inNum = false;
   QString result;

   if (p) {

      while ((c = *p) != 0) {
         // replace @@ with @ and remove @E

         if (c == '@') {

            if (*(p + 1) == '@') {
               result += c;

            } else if (*(p + 1) == 'E') {
               // skip
            }

            p += 2;

         } else if (c.isNumber()) {
            // number

            result += c;
            p++;
            inNum = true;

         } else if (c == 'd' && ! inNum) {
            // identifier starting with a `d'

            if (s.mid(p - ptr, 8) == "defined " || s.mid(p - ptr, 8) == "defined(") {
               // defined keyword, skip defined
               p += 7;

            } else {
               result += "0L";
               p++;

               while ((c = *p) != 0 && isId(c)) {
                  p++;
               }
            }

         } else if ((c.isLetter() || c == '_') && ! inNum) {
            // replace identifier with 0L
            result += "0L";
            p++;

            while ((c = *p) != 0 && isId(c)) {
               p++;
            }

            if (*p == '(') { // undefined function macro
               p++;
               int count = 1;

               while ((c = *p++) != 0 ) {
                  if (c == '(') {
                     count++;

                  } else if (c == ')') {
                     count--;
                     if (count == 0) {
                        break;
                     }

                  } else if (c == '/') {
                     QChar pc = c;
                     c = *++p;

                     if (c == '*') { // start of C comment
                        while (*p != 0 && ! (pc == '*' && c == '/')) {
                           // search end of comment
                           pc = c;
                           c = *++p;
                        }
                        p++;
                     }
                  }
               }
            }

         } else if (c == '/') {
            // skip C comments

            QChar pc = c;
            c = *++p;

            if (c == '*') {
               // start of C comment

               while (*p != 0 && ! (pc == '*' && c == '/')) {
                  // search end of comment
                  pc = c;
                  c = *++p;
               }
               p++;

            } else { // not comment but division
               result += pc;
               goto nextChar;
            }

         } else {

         nextChar:
            result += c;
            QChar lc = c.toLower();

            if (! isId(lc) && lc != '.' /*&& lc!='-' && lc!='+'*/) {
               inNum = false;
            }
            p++;
         }
      }
   }

   return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption:
 *   \a s only contains pairs of @@'s
 */
QString removeMarkers(const QString &s)
{
   const QChar *p = s.constData();
   QChar c;

   QString result;

   while ((c = *p) != 0) {
      switch (c.unicode()) {
         case '@': { // replace @@ with @
            if (*(p + 1) == '@') {
               result += c;
            }
            p += 2;
         }
         break;

         case '/': { // skip C comments
            result  += c;
            QChar pc = c;
            c = *++p;

            if (c == '*') { // start of C comment

               while (*p != 0  && !(pc == '*' && c == '/')) { // search end of comment
                  if (*p == '@' && *(p + 1) == '@') {
                     result += c;
                     p++;

                  } else {
                     result += c;
                  }

                  pc = c;
                  c  = *++p;
               }

               if (*p != 0) {
                  result += c;
                  p++;
               }
            }
         }
         break;

         case '"': { // skip string literals
            result += c;
            QChar pc = c;
            c = *++p;

            while (*p != 0 && (c != '"' || pc == '\\')) { // no end quote
               result += c;
               c = *++p;
            }
            if (*p != 0) {
               result += c;
               p++;
            }
         }
         break;

         case '\'': { // skip char literals
            result += c;
            QChar pc = c;
            c = *++p;

            while (*p != 0 && (c != '\'' || pc == '\\')) {
               // no end quote
               result += c;
               c = *++p;
            }

            if (*p != 0) {
               result += c;
               p++;
            }
         }
         break;

         default: {
            result += c;
            p++;
         }
         break;
      }
   }

   return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */
bool computeExpression(const QString &expr)
{
   QString e = expr;

   expandExpression(e, 0, 0);
   e = removeIdsAndMarkers(e);

   if (e.isEmpty()) {
      return false;
   }

   bool retval = parseconstexp(g_yyFileName, g_yyLineNr, e);

   return retval;
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

QString expandMacro(const QString &name)
{
   QString n = name;

   expandExpression(n, 0, 0);
   n = removeMarkers(n);

   return n;
}

QSharedPointer<A_Define> newDefine()
{
   QSharedPointer<A_Define> def = QMakeShared<A_Define>();

   def->m_name       = g_defName;
   def->m_definition = g_defText.trimmed();
   def->nargs        = g_defArgs;
   def->m_fileName   = g_yyFileName;
   def->fileDef      = g_yyFileDef;
   def->lineNr       = g_yyLineNr - g_yyMLines;
   def->columnNr     = g_yyColNr;
   def->varArgs      = g_defVarArgs;

   if (! def->m_name.isEmpty() && Doxy_Globals::expandAsDefinedDict.contains(def->m_name)) {
      def->isPredefined = true;
   }

   return def;
}

void addDefine()
{
   if (g_skip) {
      return;   // do not add this define as it is inside a
   }

   // conditional section (cond command) that is disabled
   if (! Doxy_Globals::gatherDefines) {
      return;
   }

   QSharedPointer<MemberDef> md = QMakeShared<MemberDef>(g_yyFileName, g_yyLineNr - g_yyMLines, g_yyColNr,
               "#define", g_defName, g_defArgsStr, "", Public, Normal, false, Member,
               MemberType_Define, ArgumentList(), ArgumentList());

   if (! g_defArgsStr.isEmpty()) {
      ArgumentList argList;

      argList = stringToArgumentList(g_defArgsStr);
      md->setArgumentList(argList);
   }

   int l = g_defLitText.indexOf('\n');

   if (l > 0 && g_defLitText.left(l).trimmed() == "\\") {
      // strip first line if it only contains a slash
      g_defLitText = g_defLitText.right(g_defLitText.length() - l - 1);

   } else if (l > 0) {
      // align the items on the first line with the items on the second line
      int k = l + 1;

      const QChar *p = g_defLitText.data() + k;
      QChar c;

      while ((c = *p++) != 0 && (c == ' ' || c == '\t')) {
         k++;
      }

      g_defLitText = g_defLitText.mid(l + 1, k - l - 1) + g_defLitText.trimmed();
   }
   md->setInitializer(g_defLitText.trimmed());

   md->setFileDef(g_inputFileDef);
   md->setDefinition("#define " + g_defName);

   QSharedPointer<MemberName> mn = Doxy_Globals::functionNameSDict.find(g_defName);

   if (! mn) {
      mn = QMakeShared<MemberName>(g_defName);
      Doxy_Globals::functionNameSDict.insert(g_defName, mn);
   }

   mn->append(md);

   if (g_yyFileDef) {
      g_yyFileDef->insertMember(md);
   }
}

static inline void outputChar(QChar c)
{
   if (g_includeStack.isEmpty() || g_curlyCount > 0) {
      g_outputBuf += c;
   }
}

static inline void outputArray(const QString &a, int len)
{
   if (g_includeStack.isEmpty() || g_curlyCount > 0) {
      g_outputBuf += a.mid(0, len);
   }
}

static void readIncludeFile(const QString &inc)
{
   static bool searchIncludes = Config::getBool("search-includes");
   uint i = 0;

   // find the start of the include file name
   while (i < inc.length() && (inc.at(i) == ' ' || inc.at(i) == '"' || inc.at(i) == '<')) {
      i++;
   }
   uint s = i;

   // was it a local include?
   bool localInclude = s > 0 && inc.at(s - 1) == '"';

   // find the end of the include file name
   while (i < inc.length() && inc.at(i) != '"' && inc.at(i) != '>') {
      i++;
   }

   if (s < inc.length() && i > s) {
      // valid include file name found

      // extract include path+name
      QString incFileName = inc.mid(s, i - s).trimmed();

      QString dosExt = incFileName.right(4);
      if (dosExt == ".exe" || dosExt == ".dll" || dosExt == ".tlb") {
         // skip imported binary files (e.g. M$ type libraries)
         return;
      }

      QString oldFileName = g_yyFileName;

      QSharedPointer<FileDef> oldFileDef = g_yyFileDef;
      int oldLineNr = g_yyLineNr;

      // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
      QString absIncFileName = incFileName;
      {
         QFileInfo fi(g_yyFileName);

         if (fi.exists()) {
            QString absName = fi.absolutePath() + "/" + incFileName;

            QFileInfo fi2(absName);
            if (fi2.exists()) {
               absIncFileName = fi2.absoluteFilePath();

            } else if (searchIncludes) {
               const QStringList includePath = Config::getList("include-path");

               for (auto s : includePath) {

                  QFileInfo fi(s);

                  if (fi.exists() && fi.isDir()) {
                     QString absName = fi.absoluteFilePath() + "/" + incFileName;

                     QFileInfo fi2(absName);
                     if (fi2.exists()) {
                        absIncFileName = fi2.absoluteFilePath();
                        break;
                     }

                  }

               }
            }

         }
      }

      DefineManager::instance().addInclude(g_yyFileName, absIncFileName);
      DefineManager::instance().addFileToContext(absIncFileName);

      // findFile will overwrite g_yyFileDef if found
      QSharedPointer<FileState> fs;
      bool alreadyIncluded = false;

      if ((fs = findFile(incFileName, localInclude, alreadyIncluded))) {
         // see if the include file can be found

         if (oldFileDef) {
            // add include dependency to the file in which the #include was found
            bool ambig;

            // change to absolute name
            QSharedPointer<FileDef> incFd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            QSharedPointer<FileDef> temp;
            if (ambig) {
               temp = QSharedPointer<FileDef>();
            } else {
               temp = incFd;
            }

            oldFileDef->addIncludeDependency(temp, incFileName, localInclude, g_isImported, false);

            // add included by dependency
            if (g_yyFileDef) {
               g_yyFileDef->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, g_isImported);
            }

         } else if (g_inputFileDef) {
            g_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, g_isImported, true);

         }

         fs->bufState = YY_CURRENT_BUFFER;
         fs->lineNr   = oldLineNr;
         fs->fileName = oldFileName;

         // push the state on the stack
         g_includeStack.push(fs);

         // set the scanner to the include file

         // Deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# 1 \"%1\" 1\n").arg(QString(g_yyFileName));
         outputArray(lineStr, lineStr.length());

         DBG_CTX((stderr, "Switching to include file %s\n", csPrintable(incFileName)));
         g_expectGuard = true;
         g_inputBuf    = fs->fileBuf;
         g_inputBufPos = 0;

         preYY_switch_to_buffer(preYY_create_buffer(0, YY_BUF_SIZE));

      } else {

         if (oldFileDef) {
            bool ambig;

            // change to absolute name for bug 641336
            QSharedPointer<FileDef> fd = findFileDef(&Doxy_Globals::inputNameDict, absIncFileName, ambig);

            // add include dependency to the file in which the #include was found
            oldFileDef->addIncludeDependency(ambig ? QSharedPointer<FileDef>() : fd, incFileName, localInclude, g_isImported, false);

            // add included by dependency
            if (fd) {
               fd->addIncludedByDependency(oldFileDef, oldFileDef->docName(), localInclude, g_isImported);
            }

         } else if (g_inputFileDef) {
            g_inputFileDef->addIncludeDependency(QSharedPointer<FileDef>(), absIncFileName, localInclude, g_isImported, true);
         }

         if (Debug::isFlagSet(Debug::Preprocessor)) {
            if (alreadyIncluded) {
               Debug::print(Debug::Preprocessor, 0, "#include %s: already included, skipping...\n", csPrintable(incFileName));
            } else {
               Debug::print(Debug::Preprocessor, 0, "#include %s: not found, skipping...\n", csPrintable(incFileName));
            }
         }

         if (g_curlyCount > 0 && !alreadyIncluded) { // failed to find #include inside { ... }
            warn(g_yyFileName, g_yyLineNr, "include file %s was not found, check the value of INCLUDE_PATH", csPrintable(incFileName));
         }
      }
   }
}

static void startCondSection(const QString &sectId)
{
   CondParser prs;

   bool expResult = prs.parse(g_yyFileName, g_yyLineNr, sectId);
   g_condStack.push( QMakeShared<CondCtx>(g_yyLineNr, sectId, g_skip) );

   if (! expResult) {
      g_skip = true;
   }
}

static void endCondSection()
{
   if (g_condStack.isEmpty()) {
      g_skip = false;

   } else {
      QSharedPointer<CondCtx> ctx = g_condStack.pop();
      g_skip = ctx->skip;
   }
}

static void forceEndCondSection()
{
   while (! g_condStack.isEmpty()) {
      g_condStack.pop();
   }

   g_skip = false;
}

static QString escapeAt(const QString &text)
{
   QString result;

   for (auto c : text) {
      if (c == '@') {
         result += "@@";

      } else {
         result += c;
      }
   }

   return result;
}

static char resolveTrigraph(char c)
{
   switch (c) {
      case '=':
         return '#';

      case '/':
         return '\\';

      case '\'':
         return '^';

      case '(':
         return '[';

      case ')':
         return ']';

      case '!':
         return '|';

      case '<':
         return '{';

      case '>':
         return '}';

      case '-':
         return '~';
   }

   return '?';
}

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size)   result=yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int c = 0;

   while (g_inputBuf[g_inputBufPos] != 0) {

      QString tmp1    = g_inputBuf.at(g_inputBufPos);
      QByteArray tmp2 = tmp1.toUtf8();

      if (c + tmp2.length() >= max_size)  {
         // buffer is full
         break;
      }

      c += tmp2.length();

      for (auto letters : tmp2) {
         *buf = letters;
          buf++;
      }

      g_inputBufPos++;
   }

   return c;
}

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define CopyStringFtn 8
#define Include 9
#define IncludeID 10
#define EndImport 11
#define DefName 12
#define DefineArg 13
#define DefineText 14
#define SkipCPPBlock 15
#define Ifdef 16
#define Ifndef 17
#define SkipCComment 18
#define ArgCopyCComment 19
#define CopyCComment 20
#define SkipVerbatim 21
#define SkipCPPComment 22
#define RemoveCComment 23
#define RemoveCPPComment 24
#define Guard 25
#define DefinedExpr1 26
#define DefinedExpr2 27
#define SkipDoubleQuote 28
#define SkipSingleQuote 29
#define UndefName 30
#define IgnoreLine 31
#define FindDefineArgs 32
#define ReadString 33
#define CondLineC 34
#define CondLineCpp 35
#define SkipCond 36

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

int preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( preYYtext, preYYleng, 1, preYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1394 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6446 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP

	YY_BREAK
case 2:
YY_RULE_SETUP

	YY_BREAK
case 3:
YY_RULE_SETUP

	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // Trigraph
      unput(resolveTrigraph(preYYtext[2]));
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      BEGIN(Command);
      g_yyColNr  += preYYleng;
      g_yyMLines = 0;
   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
      BEGIN(CopyLine);
   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
      // constructors?
      int i;

      for (i = preYYleng - 1; i >= 0; i--) {
         unput(preYYtext[i]);
      }

      BEGIN(CopyLine);
   }
	YY_BREAK
case 8:
/* rule 8 can match eol */
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{

      // function list macro with one (...) argument, e.g. for K_GLOBAL_STATIC_WITH_ARGS
      // function like macro

      static bool skipFuncMacros = Config::getBool("skip-function-macros");

      QString name = QString::fromUtf8(preYYtext);
      name = name.left(name.indexOf('(')).trimmed();

      QSharedPointer<A_Define> def;

      if (skipFuncMacros && name != "Q_PROPERTY" && ! ( (g_includeStack.isEmpty() || g_curlyCount > 0) && g_macroExpansion &&
                  (def = DefineManager::instance().isDefined(name)) && (! g_expandOnlyPredef || def->isPredefined)) ) {

         outputChar('\n');
         g_yyLineNr++;

      } else {
         // do not skip

         for (int i = preYYleng - 1; i >= 0; i--) {
            unput(preYYtext[i]);
         }

         BEGIN(CopyLine);
      }
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_yyLineNr += text.count('\n');
      outputArray(text, text.length());
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (g_includeStack.isEmpty())  {
         g_curlyCount++;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      // count brackets inside the main file
      QString text = QString::fromUtf8(preYYtext);

      if (g_includeStack.isEmpty() && g_curlyCount > 0)  {
         g_curlyCount--;
      }

      outputChar(text[0]);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyString );
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      if (getLanguageFromFileName(g_yyFileName) != SrcLangExt_Fortran) {
         REJECT;
      }

      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);

      BEGIN( CopyStringFtn );
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
      BEGIN( CopyLine );
   }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_expectGuard = false;
      QSharedPointer<A_Define> def;

      if ((g_includeStack.isEmpty() || g_curlyCount > 0) && g_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                  (! g_expandOnlyPredef || def->isPredefined)) {

         // fount it
         g_roundCount = 0;
         g_defArgsStr = text;

         if (def->nargs == -1) {
            // no function macro

            QString result = def->isPredefined ? def->m_definition : expandMacro(g_defArgsStr);
            outputArray(result, result.length());

         } else {
            // zero or more arguments

            g_findDefArgContext = CopyLine;
            BEGIN(FindDefineArgs);

         }

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((g_includeStack.isEmpty() || g_curlyCount > 0) && g_macroExpansion &&
                  (def = DefineManager::instance().isDefined(text)) &&
                   def->nargs == -1 && (! g_expandOnlyPredef || def->isPredefined)) {

            QString result = def->isPredefined ? def->m_definition : expandMacro(text);
            outputArray(result, result.length());

      } else {
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 26:
/* rule 26 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      //  strip line continuation characters
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputChar(text[0]);
   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      g_yyLineNr++;
      g_yyColNr = 1;
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      g_defArgsStr += '(';
      g_roundCount++;
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      g_defArgsStr += ')';
      g_roundCount--;

      if (g_roundCount == 0) {
         QString result = expandMacro(g_defArgsStr);

         if (g_findDefArgContext == CopyLine) {
            outputArray(result, result.length());
            BEGIN(g_findDefArgContext);

         } else {
            readIncludeFile(result);
            g_nospaces = false;
            BEGIN(Start);
         }
      }
   }
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("       {
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
   }
  */
case 31:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
    }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
      BEGIN(ArgCopyCComment);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text[0];
      BEGIN(ReadString);
   }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{
      g_defArgsStr += ' ';
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      g_defArgsStr += "@@";
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text[0];
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      g_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      g_defArgsStr += QString::fromUtf8(preYYtext);
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
{
      g_defArgsStr += ' ';
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      g_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text[0];
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      g_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      g_defArgsStr += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text[0];
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_isImported = text[1] == 'm';

      if (g_macroExpansion) {
         BEGIN(IncludeID);
      }
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_isImported = text[1] == 'm';
      g_incName = text[text.length() - 1];
      BEGIN(Include);
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      g_yyColNr += preYYleng;
      BEGIN(DefName);
   }
	YY_BREAK
case 48:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr.resize(0);
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 49:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr.resize(0);
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 50:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr = "! ";
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 51:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr = "! ";
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 52:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_guardExpr.resize(0);
      BEGIN(Guard);
   }
	YY_BREAK
case 53:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         g_guardExpr.resize(0);
         BEGIN(Guard);

      } else {
         g_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{

      if (otherCaseDone()) {
         g_ifcount = 0;
         BEGIN(SkipCPPBlock);

      } else {
         setCaseDone(true);
      }
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
{
      BEGIN(UndefName);
   }
	YY_BREAK
case 56:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! otherCaseDone()) {
         g_guardExpr.resize(0);
         BEGIN(Guard);
      }
   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      decrLevel();
   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      BEGIN(Start);
      g_yyLineNr++;
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      g_expectGuard = false;
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(IgnoreLine);
   }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
   }
	YY_BREAK
case 62:
YY_RULE_SETUP

	YY_BREAK
case 63:
YY_RULE_SETUP
{
      g_yyColNr += preYYleng;
   }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QSharedPointer<A_Define> def;

      if ((def = DefineManager::instance().isDefined(text)) && ! def->nonRecursive) {
         def->undef = true;
      }
      BEGIN(Start);
   }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_guardExpr += ' ';
      g_yyLineNr++;
   }
	YY_BREAK
case 66:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr2);
   }
	YY_BREAK
case 67:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(DefinedExpr1);
   }
	YY_BREAK
case 68:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_guardExpr += text;
   }
	YY_BREAK
case 69:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_guardExpr += text[0];
   }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{
      unput(*preYYtext);

      bool guard = computeExpression(g_guardExpr);
      setCaseDone(guard);

      if (guard) {
         BEGIN(Start);

      } else {
         g_ifcount = 0;
         BEGIN(SkipCPPBlock);
      }
   }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 72:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || g_guardName == text) {
         g_guardExpr+=" 1L ";
      } else {
         g_guardExpr+=" 0L ";
      }

      g_lastGuardName = text;
      BEGIN(Guard);
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (DefineManager::instance().isDefined(text) || g_guardName == text){
         g_guardExpr+=" 1L ";
      } else {
         g_guardExpr+=" 0L ";
      }

      g_lastGuardName = text;
   }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{
      // should not happen, handle anyway

      g_yyLineNr++;
      g_ifcount = 0;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      BEGIN(Guard);
   }
	YY_BREAK
case 76:
YY_RULE_SETUP

	YY_BREAK
case 77:
YY_RULE_SETUP
{
      BEGIN(SkipCommand);
   }
	YY_BREAK
case 78:
/* rule 78 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 80:
YY_RULE_SETUP

	YY_BREAK
case 81:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      incrLevel();
      g_ifcount++;
   }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
      // printf("Else! g_ifcount=%d otherCaseDone=%d\n",g_ifcount,otherCaseDone());

      if (g_ifcount == 0 && ! otherCaseDone()) {
         setCaseDone(true);
         BEGIN(Start);
      }
   }
	YY_BREAK
case 83:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (g_ifcount == 0)  {

         if (! otherCaseDone()) {
            g_guardExpr.resize(0);
            g_lastGuardName.resize(0);
            BEGIN(Guard);

         } else {
            BEGIN(SkipCPPBlock);
         }
      }
   }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
      g_expectGuard = false;
      decrLevel();

      if (--g_ifcount < 0) {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
      // unknown directive
      BEGIN(SkipLine);
   }
	YY_BREAK
case 87:
YY_RULE_SETUP

	YY_BREAK
case 88:
YY_RULE_SETUP

	YY_BREAK
case 89:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      BEGIN(SkipString);
   }
	YY_BREAK
case 91:
YY_RULE_SETUP

	YY_BREAK
case 92:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
   }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
      g_lastCPPContext = YY_START;
      BEGIN(RemoveCPPComment);
   }
	YY_BREAK
case 94:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
   }
	YY_BREAK
case 95:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      g_lastCContext=YY_START;
      BEGIN(RemoveCComment);
   }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
      BEGIN(SkipCPPBlock);
   }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
      BEGIN(SkipLine);
   }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 101:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_nospaces   = true;
      g_roundCount = 0;
      g_defArgsStr = text;
      g_findDefArgContext = IncludeID;
      BEGIN(FindDefineArgs);
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_nospaces = true;
      readIncludeFile(expandMacro(text));
      BEGIN(Start);
   }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_incName += text;
      readIncludeFile(g_incName);

      if (g_isImported) {
         BEGIN(EndImport);
      } else {
         BEGIN(Start);
      }
   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      BEGIN(Start);
   }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
      // define with argument

      g_argDict = QMakeShared<QHash<QString, int>>();

      g_defArgs = 0;
      g_defArgsStr.resize(0);
      g_defText.resize(0);
      g_defLitText.resize(0);

      g_defName    = QString::fromUtf8(preYYtext);
      g_defVarArgs = false;
      g_defExtraSpacing.resize(0);
      BEGIN(DefineArg);
   }
	YY_BREAK
case 108:
/* rule 108 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // special case: define with 1 -> can be "guard"

      g_argDict = QSharedPointer<QHash<QString, int>>();

      g_defArgs = -1;
      g_defArgsStr.resize(0);

      g_defName = QString::fromUtf8(preYYtext);
      g_defName = g_defName.left(g_defName.length() - 1).trimmed();
      g_defVarArgs = false;

      if (g_curlyCount > 0 || g_defName != g_lastGuardName || ! g_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + g_defName;
         outputArray(tmp, tmp.length());

         g_quoteArg      = false;
         g_insideComment = false;
         g_lastGuardName.resize(0);
         g_defText    = "1";
         g_defLitText = "1";
         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         g_defText.resize(0);
         g_defLitText.resize(0);
         BEGIN(Start);
      }

      g_expectGuard = false;
   }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{
      // empty define
      QString text = QString::fromUtf8(preYYtext);

      g_argDict = QSharedPointer<QHash<QString, int>>();

      g_defArgs = -1;
      g_defName = text;

      g_defArgsStr.resize(0);
      g_defText.resize(0);
      g_defLitText.resize(0);
      g_defVarArgs = false;

      if (g_curlyCount > 0 || g_defName != g_lastGuardName || ! g_expectGuard) {
         // define may appear in the output
         QString tmp = "#define " + g_defName;
         outputArray(tmp, tmp.length());

         g_quoteArg      = false;
         g_insideComment = false;

         if (g_insideCS) {
            g_defText="1"; // for C#, use "1" as define text
         }

         BEGIN(DefineText);

      } else  {
         // define is a guard => hide

         g_guardName = text;
         g_lastGuardName.resize(0);
         BEGIN(Start);
      }

      g_expectGuard = false;
   }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
      // define with content
      QString text = QString::fromUtf8(preYYtext);

      g_argDict = QSharedPointer<QHash<QString, int>>();

      g_defArgs = -1;
      g_defArgsStr.resize(0);

      g_defText.resize(0);
      g_defLitText.resize(0);
      g_defName    = text;
      g_defVarArgs = false;

      QString tmp = "#define " + g_defName + g_defArgsStr;
      outputArray(tmp, tmp.length());

      g_quoteArg      = false;
      g_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{
      g_defExtraSpacing += "\n";
      g_yyLineNr++;
   }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
   }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;
   }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;

      QString tmp = "#define " + g_defName + g_defArgsStr + g_defExtraSpacing;
      outputArray(tmp, tmp.length());

      g_quoteArg      = false;
      g_insideComment = false;
      BEGIN(DefineText);
   }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
      // Variadic macro
      g_defVarArgs = true;
      g_defArgsStr +=  QString::fromUtf8(preYYtext);

      g_argDict->insert("__VA_ARGS__", g_defArgs);
      g_defArgs++;
   }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defArgsStr += text;

      g_defVarArgs = text.endsWith("...");

      if (g_defVarArgs)  {
         // strip ellipsis
         text = text.left(text.length() - 3);
      }

      text = text.trimmed();

      g_argDict->insert(text, g_defArgs);
      g_defArgs++;
   }
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"  {
      g_defText+=preYYtext;
      g_defLitText+=preYYtext;
      g_insideComment=true;
   }

<DefineText>"* /"          {
      g_defText+=preYYtext;
      g_defLitText+=preYYtext;
      g_insideComment=false;
   }
  */
case 117:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
       QString text = QString::fromUtf8(preYYtext);

      g_defText   += text;
      g_defLitText+= text;
      g_lastCContext = YY_START;
      g_commentCount = 1;
      BEGIN(CopyCComment);
   }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      g_lastCPPContext  = YY_START;
      g_defLitText     += ' ';
      BEGIN(SkipCPPComment);
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      if (text[0] == '/') {
         outputChar('/');
      }

      outputChar('*');
      outputChar('/');

      if (--g_commentCount <= 0) {

         if (g_lastCContext == Start) {
            // small hack to make sure that ^... rule will
            // match when going to Start... Example: "/*...*/ some stuff..."

            YY_CURRENT_BUFFER->yy_at_bol = 1;
         }

         BEGIN(g_lastCContext);
      }
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');

      // g_commentCount++;
   }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         g_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      static bool markdown = Config::getBool("markdown");

      if (! markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         g_fenceSize = preYYleng;
         BEGIN(SkipVerbatim);
      }
   }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());
      g_yyLineNr += text.count('\n');
   }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      outputArray(text, text.length());

      g_yyLineNr += text.count('\n');
      g_fenceSize = 0;

      if (text[1] == 'f') {
         g_blockName = "f";

      } else {
         QString bn = text.mid(1);
         int i = bn.indexOf('{');

         // for \code{.c}
         if (i != -1) {
            bn = bn.left(i);
         }

         g_blockName = bn.trimmed();
      }
      BEGIN(SkipVerbatim);
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      // escaped @cond
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
      // conditional section
      g_ccomment = true;
      g_condCtx  = YY_START;
      BEGIN(CondLineCpp);
   }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
      // conditional section
      g_ccomment = false;
      g_condCtx  = YY_START;
      BEGIN(CondLineC);
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      startCondSection(text);

      if (g_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/", 2);
            g_ccomment = true;

         } else {
            g_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(g_condCtx);

      }
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      // non-guard character
      unput(*preYYtext);
      startCondSection(" ");

      if (g_skip) {
         if (YY_START == CondLineC) {
            // end C comment
            outputArray("*/",2);
            g_ccomment = true;

         } else {
            g_ccomment = false;
         }

         BEGIN(SkipCond);

      } else {
         BEGIN(g_condCtx);
      }
   }
	YY_BREAK
case 132:
/* rule 132 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // no guard
      if (YY_START == SkipCComment) {
         g_ccomment=true;
         // end C comment
         outputArray("*/",2);

      } else {
         g_ccomment = false;
      }

      g_condCtx = YY_START;
      startCondSection(" ");
      BEGIN(SkipCond);
   }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
      g_ccomment = false;
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      g_ccomment = true;
   }
	YY_BREAK
case 138:
/* rule 138 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      if (! g_skip) {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());
      }
   }
	YY_BREAK
case 139:
/* rule 139 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      bool oldSkip = g_skip;
      endCondSection();

      if (oldSkip && ! g_skip) {
         if (g_ccomment) {
            outputArray("/** ",4);

            // */ (editor syntax fix)
         }

         BEGIN(g_condCtx);
      }
   }
	YY_BREAK
case 140:
/* rule 140 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      bool oldSkip = g_skip;
      endCondSection();

      if (oldSkip && ! g_skip)  {
         BEGIN(g_condCtx);
      }
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      /* end of verbatim block */

      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (text[1] == 'f' && g_blockName == "f") {
         BEGIN(SkipCComment);

      } else if (text.mid(4) == g_blockName) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (g_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());

      if (g_fenceSize == preYYleng) {
         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{
      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
      outputChar(*preYYtext);
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defLitText += text;
      g_defText    += escapeAt(text);
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defLitText += text;
      g_defText    += text;
      BEGIN(g_lastCContext);
   }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_yyLineNr++;
      outputChar('\n');
      g_defLitText += text;
      g_defText+=' ';
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
{
      // see bug 594021 for a usecase for this rule
      if (g_lastCContext == SkipCPPBlock) {
         BEGIN(SkipCommand);

      } else {
         REJECT;
      }
   }
	YY_BREAK
case 152:
YY_RULE_SETUP
{
      BEGIN(g_lastCContext);
   }
	YY_BREAK
case 153:
YY_RULE_SETUP

	YY_BREAK
case 154:
YY_RULE_SETUP

	YY_BREAK
case 155:
YY_RULE_SETUP

	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      g_yyLineNr++;
      outputChar('\n');
   }
	YY_BREAK
case 157:
YY_RULE_SETUP

	YY_BREAK
case 158:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
{
      unput(*preYYtext);
      BEGIN(g_lastCPPContext);
   }
	YY_BREAK
case 160:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      outputChar('/');
      outputChar('*');
   }
	YY_BREAK
case 161:
YY_RULE_SETUP
{
      outputChar('/');
      outputChar('/');
   }
	YY_BREAK
case 162:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      outputArray(text, text.length());
   }
	YY_BREAK
case 163:
YY_RULE_SETUP
{
      outputChar(*preYYtext);
   }
	YY_BREAK
case 164:
YY_RULE_SETUP

	YY_BREAK
case 165:
YY_RULE_SETUP

	YY_BREAK
case 166:
YY_RULE_SETUP

	YY_BREAK
case 167:
YY_RULE_SETUP

	YY_BREAK
case 168:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      g_quoteArg   = true;
      g_defLitText += QString::fromUtf8(preYYtext);
   }
	YY_BREAK
case 169:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defLitText += text;

      if (g_quoteArg) {
         g_defText+="\"";
      }

      if (g_defArgs > 0) {
         auto iter = g_argDict->find(text);

         if (iter != g_argDict->end()) {
            int n = iter.value();

            g_defText += '@';

            QString numStr = QString("%1").arg(n);
            g_defText += numStr;

         } else {
            g_defText += text;

         }

      } else {
         g_defText += text;
      }

      if (g_quoteArg) {
         g_defText += "\"";
      }

      g_quoteArg = false;
   }
	YY_BREAK
case 170:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defLitText += text;
      g_defText    += text;
   }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defLitText += text;
      outputChar('\n');
      g_defText += ' ';
      g_yyLineNr++;
      g_yyMLines++;
   }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      QString comment = extractTrailingComment(g_defLitText);
      g_defLitText += text;

      if (! comment.isEmpty()) {
         outputArray(comment, comment.length());
         g_defLitText = g_defLitText.left(g_defLitText.length() - comment.length() - 1);
      }

      outputChar('\n');

      QSharedPointer<A_Define> def;

      if (g_includeStack.isEmpty() || g_curlyCount > 0) {
         addDefine();
      }

      def = DefineManager::instance().isDefined(g_defName);

      if (def == nullptr)  {
         // new define

         QSharedPointer<A_Define> nd = newDefine();
         DefineManager::instance().addDefine(g_yyFileName, nd);

      } else if (def) {
         // name already exists

         if (def->undef) {
            // undefined name
            def->undef        = false;
            def->m_name       = g_defName;
            def->m_definition = g_defText.trimmed();
            def->nargs        = g_defArgs;
            def->m_fileName   = g_yyFileName;
            def->lineNr       = g_yyLineNr - g_yyMLines;
            def->columnNr     = g_yyColNr;
         }
      }

      g_argDict = QSharedPointer<QHash<QString, int>>();

      g_yyLineNr++;
      g_yyColNr = 1;
      g_lastGuardName.resize(0);
      BEGIN(Start);
   }
	YY_BREAK
case 173:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defText    += ' ';
      g_defLitText += text;
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defText    += "##";
      g_defLitText += text;
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);
      g_defText     += "@@";
      g_defLitText  += text;
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;

      if (! g_insideComment) {
         BEGIN(SkipDoubleQuote);
      }
   }
	YY_BREAK
case 177:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;

      if (! g_insideComment) {
         BEGIN(SkipSingleQuote);
      }
   }
	YY_BREAK
case 178:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text;
      g_defLitText += text;
   }
	YY_BREAK
case 179:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text;
      g_defLitText += text;
   }
	YY_BREAK
case 180:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 181:
YY_RULE_SETUP
{
     QString text = QString::fromUtf8(preYYtext);

      g_defText    += text;
      g_defLitText += text;
   }
	YY_BREAK
case 182:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
      BEGIN(DefineText);
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
   }
	YY_BREAK
case 184:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
   }
	YY_BREAK
case 185:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(preYYtext);

      g_defText    += text[0];
      g_defLitText += text;
   }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(CopyStringFtn):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
{
      DBG_CTX((stderr, "End of include file\n"));

      if (g_includeStack.isEmpty()) {
         DBG_CTX((stderr, "Terminating scanner\n"));
         yyterminate();

      } else {
         QSharedPointer<FileState> fs = g_includeStack.pop();

         YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
         preYY_switch_to_buffer(fs->bufState );
         preYY_delete_buffer(oldBuf );

         g_yyLineNr    = fs->lineNr;
         g_inputBuf    = fs->oldFileBuf;
         g_inputBufPos = fs->oldFileBufPos;
         setFileName(fs->fileName);

         DBG_CTX((stderr, "######## FileName %s\n", csPrintable(g_yyFileName)));

         // deal with file changes due to
         // #include's within { .. } blocks

         QString lineStr = QString("# %1 \"%2\" 2").arg(g_yyLineNr).arg(QString(g_yyFileName));
         outputArray(lineStr, lineStr.length());
      }
   }
	YY_BREAK
case 186:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
case 187:
YY_RULE_SETUP
{
      // */ (editor syntax fix)

      if (YY_START == SkipVerbatim || YY_START == SkipCond) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         g_lastCContext = YY_START;
         g_commentCount = 1;

         if (preYYleng == 3) {
            g_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCComment);
      }
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
{
      if (YY_START == SkipVerbatim || YY_START == SkipCond) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(preYYtext);
         outputArray(text, text.length());

         g_lastCPPContext = YY_START;

         if (preYYleng == 3) {
            g_lastGuardName.resize(0); // reset guard in case the #define is documented
         }

         BEGIN(SkipCPPComment);
      }
   }
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
{
      outputChar('\n');
      g_yyLineNr++;
   }
	YY_BREAK
case 190:
YY_RULE_SETUP
{
      // utf-8 code point
      QString text  = QString::fromUtf8(preYYtext);
      g_expectGuard = false;

      for (QChar c : text) {
         outputChar(c);
      }
   }
	YY_BREAK
case 191:
YY_RULE_SETUP
{
      // catch all
      QString text  = QString::fromUtf8(preYYtext);
      g_expectGuard = false;

      for (QChar c : text) {
         outputChar(c);
      }
   }
	YY_BREAK
case 192:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 62);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1394 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 62;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1394 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1393);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
int preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static int getNextChar(const QString &expr, QString *rest, uint &pos)
{
   if (pos < expr.length()) {
      return expr.at(pos++).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc  = rest->at(0).unicode();
      *rest   = rest->right(rest->length() - 1);
      return cc;

   } else {
      int cc = yyinput();

      return cc;
   }
}

static int getCurrentChar(const QString &expr, QString *rest, uint pos)
{
   if (pos < expr.length()) {
      return expr.at(pos).unicode();

   } else if (rest && ! rest->isEmpty()) {
      int cc = rest->at(0).unicode();
      return cc;

   } else {
      int cc = yyinput();

      returnCharToStream(cc);
      return cc;
   }
}

static void unputChar(const QString &expr, QString *rest, uint &pos, char c)
{
   if (pos < expr.length()) {
      pos++;

   } else if (rest) {
      char cs[2];
      cs[0] = c;
      cs[1] = '\0';
      rest->prepend(cs);

   } else {

      returnCharToStream(c);
   }
}

void addSearchDir(const QString &dir)
{
   QFileInfo fi(dir);

   if (fi.isDir()) {
      g_pathList.append(fi.absoluteFilePath());
   }
}

void initPreprocessor()
{
   addSearchDir(".");
   g_expandedDict = QMakeShared<DefineDict>();
}

void removePreProcessor()
{
   g_expandedDict = QSharedPointer<DefineDict>();
   g_pathList.clear();

   DefineManager::deleteInstance();
}

QString preprocessFile(const QString &fileName, const QString &input)
{
   printlex(preYY_flex_debug, true, __FILE__, csPrintable(fileName) );

   g_macroExpansion   = Config::getBool("macro-expansion");
   g_expandOnlyPredef = Config::getBool("expand-only-predefined");

   g_skip        = false;
   g_curlyCount  = 0;
   g_nospaces    = false;
   g_inputBufPos = 0;

   g_inputBuf    = input;
   g_outputBuf   = "";

   g_includeStack.clear();
   g_expandedDict->clear();
   g_condStack.clear();

   uint orgOffset = 0;

   setFileName(fileName);

   g_inputFileDef = g_yyFileDef;
   DefineManager::instance().startContext(g_yyFileName);

   static bool firstTime = true;

   if (firstTime)  {
      // add predefined macros
      static QStringList const preDefinedMacros = Config::getList("predefined-macros");

      for (const auto &definedMacro : preDefinedMacros) {

         int posEquals = definedMacro.indexOf('=');
         int posOpen   = definedMacro.indexOf('(');
         int posClose  = definedMacro.indexOf(')');

         bool nonRecursive = posEquals > 0 && definedMacro.at(posEquals - 1) == ':';

         if (posOpen == 0) {
            // no define name
            continue;
         }

         if (posOpen < posEquals && posClose < posEquals && posOpen != -1  &&
                  posClose != -1  &&  posOpen < posClose) {

            // predefined function macro definition

            // regexp matching an id
            QRegExp reId("[a-z_A-Z\x80-\xFF][a-z_A-Z0-9\x80-\xFF]*");
            QHash<QString, int> argDict;

            int index = posOpen + 1;
            int pos;
            int len;
            int count = 0;

            // gather the formal arguments in a dictionary
            while (index < posClose && (pos = reId.indexIn(definedMacro, index))) {
               len = reId.matchedLength();

               if (len > 0) {
                  argDict.insert(definedMacro.mid(pos, len), count++);
                  index = pos + len;

               } else {
                  index++;
               }
            }

            // strip definition part
            QString tmp = definedMacro.right(definedMacro.length() - posEquals - 1);
            QString definition;

            index = 0;

            // substitute all occurrences of formal arguments with their corresponding markers
            while ((pos = reId.indexIn(tmp, index)) != -1) {
               len = reId.matchedLength();

               if (pos > index) {
                  definition += tmp.mid(index, pos - index);
               }

               auto iter = argDict.find(tmp.mid(pos, len));

               if (iter != argDict.end()) {
                  int argIndex = iter.value();

                  QString marker = QString(" @%1 ").arg(argIndex);
                  definition += marker;

               } else {
                  definition += tmp.mid(pos, len);
               }

               index = pos + len;
            }

            if (index < tmp.length()) {
               definition += tmp.mid(index, tmp.length() - index);
            }

            // add define definition to the dictionary of defines for this file
            QString dname = definedMacro.left(posOpen);

            if (! dname.isEmpty()) {
               QSharedPointer<A_Define> def = QMakeShared<A_Define>();

               def->m_name       = dname;
               def->m_definition = definition;
               def->nargs        = count;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = g_yyFileDef;
               def->m_fileName   = fileName;

               DefineManager::instance().addDefine(g_yyFileName, def);
            }

         } else if ((posOpen == -1 || posOpen > posEquals)   &&
                    (posClose == -1 || posClose > posEquals) &&
                    ! definedMacro.isEmpty() && definedMacro.length() > posEquals)  {

            // predefined non-function macro definition
            QSharedPointer<A_Define> def = QMakeShared<A_Define>();

            if (posEquals == -1) {
               // simple define without argument
               def->m_name = definedMacro;
               def->m_definition = "1"; // substitute occurrences by 1 (true)

            } else {
               // simple define with argument
               int ine = posEquals - (nonRecursive ? 1 : 0);
               def->m_name = definedMacro.left(ine);
               def->m_definition = definedMacro.right(definedMacro.length() - posEquals - 1);
            }

            if (! def->m_name.isEmpty()) {
               def->nargs = -1;
               def->isPredefined = true;
               def->nonRecursive = nonRecursive;
               def->fileDef      = g_yyFileDef;
               def->m_fileName   = fileName;
               DefineManager::instance().addDefine(g_yyFileName, def);
            }
         }
      }
   }

   g_yyLineNr = 1;
   g_yyColNr  = 1;
   g_ifcount  = 0;

   g_levelGuard.clear();

   BEGIN( Start );

   g_expectGuard = determineSection(fileName) == Entry::HEADER_SEC;
   g_guardName.resize(0);
   g_lastGuardName.resize(0);
   g_guardExpr = "";

   preYYlex();

   g_lexInit = true;

   while (! g_condStack.isEmpty()) {
      QSharedPointer<CondCtx> ctx = g_condStack.pop();
      QString sectionInfo = " ";

      if (ctx->sectionId != " ") {
         sectionInfo = QString(" with label %1 ").arg(QString(ctx->sectionId));
      }

      warn(fileName, ctx->lineNr, "Conditional section %s does not have "
           "a corresponding \\endcond command within this file.", csPrintable(sectionInfo));
   }

   // make sure we do not extend a \cond with missing \endcond over multiple files
   forceEndCondSection();

   DefineManager::instance().endContext();
   printlex(preYY_flex_debug, false, __FILE__, csPrintable(fileName));

   return g_outputBuf;
}

void preFreeScanner()
{
   if (g_lexInit) {
      preYYlex_destroy();
   }
}

